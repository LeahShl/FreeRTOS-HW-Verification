
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020c30  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004778  08020e00  08020e00  00021e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025578  08025578  00027210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08025578  08025578  00026578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025580  08025580  00027210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025580  08025580  00026580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025584  08025584  00026584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08025588  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  08025658  000270d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  080256f8  00027170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002284c  20000210  08025798  00027210  2**2
                  ALLOC
 12 ._user_heap_stack 00005004  20022a5c  08025798  00027a5c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00027210  2**0
                  CONTENTS, READONLY
 14 .debug_info   000432f6  00000000  00000000  00027240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000aaae  00000000  00000000  0006a536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003090  00000000  00000000  00074fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002625  00000000  00000000  00078078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ea88  00000000  00000000  0007a69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e171  00000000  00000000  000b9125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012342b  00000000  00000000  00107296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022a6c1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cecc  00000000  00000000  0022a704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  002375d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020de8 	.word	0x08020de8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08020de8 	.word	0x08020de8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff17 	bl	8002470 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe26 	bl	8001298 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 ff4b 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe16 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fae1 	bl	8004cac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fc23 	bl	8002f78 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fdae 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 f9e9 	bl	8002b64 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd7e 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 f974 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 f98d 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 f96c 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 f985 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 f964 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 f97d 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 f95c 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 f975 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 f954 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 f96d 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 f94c 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 f965 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 f944 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 f95d 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 f93c 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 f955 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 f934 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 f94d 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 f92c 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 f945 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 f924 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 f93d 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 f91c 	bl	8002b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 f935 	bl	8002b48 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01f fad3 	bl	801fea4 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08020efc 	.word	0x08020efc

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	484f      	ldr	r0, [pc, #316]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000922:	f01f fb2f 	bl	801ff84 <puts>
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of netconnMutex */
  netconnMutexHandle = osMutexNew(&netconnMutex_attributes);
 8000926:	484f      	ldr	r0, [pc, #316]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000928:	f00c f8b0 	bl	800ca8c <osMutexNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a4e      	ldr	r2, [pc, #312]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 8000930:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000932:	4a4e      	ldr	r2, [pc, #312]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000934:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000938:	2010      	movs	r0, #16
 800093a:	f00c fb7f 	bl	800d03c <osMessageQueueNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a4b      	ldr	r2, [pc, #300]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 8000942:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000944:	4a4b      	ldr	r2, [pc, #300]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 8000946:	2110      	movs	r1, #16
 8000948:	2010      	movs	r0, #16
 800094a:	f00c fb77 	bl	800d03c <osMessageQueueNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a49      	ldr	r2, [pc, #292]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 8000952:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000954:	4a49      	ldr	r2, [pc, #292]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 8000956:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800095a:	2008      	movs	r0, #8
 800095c:	f00c fb6e 	bl	800d03c <osMessageQueueNew>
 8000960:	4603      	mov	r3, r0
 8000962:	4a47      	ldr	r2, [pc, #284]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 8000964:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 8000966:	4a47      	ldr	r2, [pc, #284]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 8000968:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800096c:	2008      	movs	r0, #8
 800096e:	f00c fb65 	bl	800d03c <osMessageQueueNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a44      	ldr	r2, [pc, #272]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 8000978:	4a44      	ldr	r2, [pc, #272]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 800097a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800097e:	2008      	movs	r0, #8
 8000980:	f00c fb5c 	bl	800d03c <osMessageQueueNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a42      	ldr	r2, [pc, #264]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800098a:	4a42      	ldr	r2, [pc, #264]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 800098c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000990:	2008      	movs	r0, #8
 8000992:	f00c fb53 	bl	800d03c <osMessageQueueNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a3f      	ldr	r2, [pc, #252]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 800099a:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 800099c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 800099e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80009a2:	2008      	movs	r0, #8
 80009a4:	f00c fb4a 	bl	800d03c <osMessageQueueNew>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009ae:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	483d      	ldr	r0, [pc, #244]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009b4:	f00b fe78 	bl	800c6a8 <osThreadNew>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4a3c      	ldr	r2, [pc, #240]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009bc:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009be:	4a3c      	ldr	r2, [pc, #240]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	483c      	ldr	r0, [pc, #240]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009c4:	f00b fe70 	bl	800c6a8 <osThreadNew>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a3b      	ldr	r2, [pc, #236]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009cc:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009ce:	4a3b      	ldr	r2, [pc, #236]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009d4:	f00b fe68 	bl	800c6a8 <osThreadNew>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009dc:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009de:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	483a      	ldr	r0, [pc, #232]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 80009e4:	f00b fe60 	bl	800c6a8 <osThreadNew>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a39      	ldr	r2, [pc, #228]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 80009ec:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009ee:	4a39      	ldr	r2, [pc, #228]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4839      	ldr	r0, [pc, #228]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 80009f4:	f00b fe58 	bl	800c6a8 <osThreadNew>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a38      	ldr	r2, [pc, #224]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 80009fc:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009fe:	4a38      	ldr	r2, [pc, #224]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4838      	ldr	r0, [pc, #224]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a04:	f00b fe50 	bl	800c6a8 <osThreadNew>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a37      	ldr	r2, [pc, #220]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a0c:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a0e:	4a37      	ldr	r2, [pc, #220]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a14:	f00b fe48 	bl	800c6a8 <osThreadNew>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a36      	ldr	r2, [pc, #216]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a1c:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a1e:	4a36      	ldr	r2, [pc, #216]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4836      	ldr	r0, [pc, #216]	@ (8000afc <MX_FREERTOS_Init+0x1e0>)
 8000a24:	f00b fe40 	bl	800c6a8 <osThreadNew>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a35      	ldr	r2, [pc, #212]	@ (8000b00 <MX_FREERTOS_Init+0x1e4>)
 8000a2c:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a2e:	4a35      	ldr	r2, [pc, #212]	@ (8000b04 <MX_FREERTOS_Init+0x1e8>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <MX_FREERTOS_Init+0x1ec>)
 8000a34:	f00b fe38 	bl	800c6a8 <osThreadNew>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a34      	ldr	r2, [pc, #208]	@ (8000b0c <MX_FREERTOS_Init+0x1f0>)
 8000a3c:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a3e:	4a34      	ldr	r2, [pc, #208]	@ (8000b10 <MX_FREERTOS_Init+0x1f4>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4834      	ldr	r0, [pc, #208]	@ (8000b14 <MX_FREERTOS_Init+0x1f8>)
 8000a44:	f00b fe30 	bl	800c6a8 <osThreadNew>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a33      	ldr	r2, [pc, #204]	@ (8000b18 <MX_FREERTOS_Init+0x1fc>)
 8000a4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of initDoneEvent */
  initDoneEventHandle = osEventFlagsNew(&initDoneEvent_attributes);
 8000a4e:	4833      	ldr	r0, [pc, #204]	@ (8000b1c <MX_FREERTOS_Init+0x200>)
 8000a50:	f00b fefe 	bl	800c850 <osEventFlagsNew>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a32      	ldr	r2, [pc, #200]	@ (8000b20 <MX_FREERTOS_Init+0x204>)
 8000a58:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08020f1c 	.word	0x08020f1c
 8000a64:	080252f0 	.word	0x080252f0
 8000a68:	2000033c 	.word	0x2000033c
 8000a6c:	08025248 	.word	0x08025248
 8000a70:	20000320 	.word	0x20000320
 8000a74:	08025260 	.word	0x08025260
 8000a78:	20000324 	.word	0x20000324
 8000a7c:	08025278 	.word	0x08025278
 8000a80:	20000328 	.word	0x20000328
 8000a84:	08025290 	.word	0x08025290
 8000a88:	2000032c 	.word	0x2000032c
 8000a8c:	080252a8 	.word	0x080252a8
 8000a90:	20000330 	.word	0x20000330
 8000a94:	080252c0 	.word	0x080252c0
 8000a98:	20000334 	.word	0x20000334
 8000a9c:	080252d8 	.word	0x080252d8
 8000aa0:	20000338 	.word	0x20000338
 8000aa4:	080250e0 	.word	0x080250e0
 8000aa8:	08000b25 	.word	0x08000b25
 8000aac:	200002f8 	.word	0x200002f8
 8000ab0:	08025104 	.word	0x08025104
 8000ab4:	08000b5d 	.word	0x08000b5d
 8000ab8:	200002fc 	.word	0x200002fc
 8000abc:	08025128 	.word	0x08025128
 8000ac0:	08000ba5 	.word	0x08000ba5
 8000ac4:	20000300 	.word	0x20000300
 8000ac8:	0802514c 	.word	0x0802514c
 8000acc:	08000bb9 	.word	0x08000bb9
 8000ad0:	20000304 	.word	0x20000304
 8000ad4:	08025170 	.word	0x08025170
 8000ad8:	08000bcd 	.word	0x08000bcd
 8000adc:	20000308 	.word	0x20000308
 8000ae0:	08025194 	.word	0x08025194
 8000ae4:	08000be1 	.word	0x08000be1
 8000ae8:	2000030c 	.word	0x2000030c
 8000aec:	080251b8 	.word	0x080251b8
 8000af0:	08000bf5 	.word	0x08000bf5
 8000af4:	20000310 	.word	0x20000310
 8000af8:	080251dc 	.word	0x080251dc
 8000afc:	08000c05 	.word	0x08000c05
 8000b00:	20000314 	.word	0x20000314
 8000b04:	08025200 	.word	0x08025200
 8000b08:	08000c15 	.word	0x08000c15
 8000b0c:	20000318 	.word	0x20000318
 8000b10:	08025224 	.word	0x08025224
 8000b14:	08000c29 	.word	0x08000c29
 8000b18:	2000031c 	.word	0x2000031c
 8000b1c:	08025300 	.word	0x08025300
 8000b20:	20000340 	.word	0x20000340

08000b24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b2c:	f00a feca 	bl	800b8c4 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  UDP_Server_Init();
 8000b30:	f01e fb2c 	bl	801f18c <UDP_Server_Init>
  osEventFlagsSet(initDoneEventHandle, 0x01);
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <StartDefaultTask+0x30>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00b feda 	bl	800c8f4 <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
	printf("IN default\n");
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <StartDefaultTask+0x34>)
 8000b42:	f01f fa1f 	bl	801ff84 <puts>
    osDelay(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4a:	f00b fe53 	bl	800c7f4 <osDelay>
	printf("IN default\n");
 8000b4e:	bf00      	nop
 8000b50:	e7f6      	b.n	8000b40 <StartDefaultTask+0x1c>
 8000b52:	bf00      	nop
 8000b54:	20000340 	.word	0x20000340
 8000b58:	08020f34 	.word	0x08020f34

08000b5c <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Listener waiting for network...\n");
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <StartTaskUdpListener+0x38>)
 8000b66:	f01f fa0d 	bl	801ff84 <puts>
  osEventFlagsWait(initDoneEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <StartTaskUdpListener+0x3c>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	f00b ff13 	bl	800c9a0 <osEventFlagsWait>
  printf("Network set...\n");
 8000b7a:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <StartTaskUdpListener+0x40>)
 8000b7c:	f01f fa02 	bl	801ff84 <puts>
  printf("Starting UDP Listener...\n");
 8000b80:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <StartTaskUdpListener+0x44>)
 8000b82:	f01f f9ff 	bl	801ff84 <puts>
  UDP_Listen(); // loops here
 8000b86:	f01e fb41 	bl	801f20c <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08020f40 	.word	0x08020f40
 8000b98:	20000340 	.word	0x20000340
 8000b9c:	08020f60 	.word	0x08020f60
 8000ba0:	08020f70 	.word	0x08020f70

08000ba4 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000bac:	f01e fa18 	bl	801efe0 <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000bc0:	f01e ff42 	bl	801fa48 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000bd4:	f01e fc3c 	bl	801f450 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000be8:	f01e fdbc 	bl	801f764 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f00b fdf9 	bl	800c7f4 <osDelay>
 8000c02:	e7fb      	b.n	8000bfc <StartTaskAdcTest+0x8>

08000c04 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f00b fdf1 	bl	800c7f4 <osDelay>
 8000c12:	e7fb      	b.n	8000c0c <StartTaskTimTest+0x8>

08000c14 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000c1c:	f01e fbc4 	bl	801f3a8 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	printf("inMsg Q size: %lu\n", osMessageQueueGetCount(inMsgQueueHandle));
	printf("outMsg Q size: %lu\n", osMessageQueueGetCount(outMsgQueueHandle));
	printf("--------------------------------------\n");
    osDelay(10000);
    */
	osDelay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f00b fddf 	bl	800c7f4 <osDelay>
 8000c36:	e7fb      	b.n	8000c30 <StartLoggerTask+0x8>

08000c38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	4b27      	ldr	r3, [pc, #156]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a26      	ldr	r2, [pc, #152]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a20      	ldr	r2, [pc, #128]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a1a      	ldr	r2, [pc, #104]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_GPIO_Init+0xa4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

}
 8000cce:	bf00      	nop
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <MX_I2C1_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <MX_I2C1_Init+0x7c>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1a:	480e      	ldr	r0, [pc, #56]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d1c:	f004 f972 	bl	8005004 <HAL_I2C_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 fab7 	bl	8001298 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d2e:	f006 fb15 	bl	800735c <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d38:	f000 faae 	bl	8001298 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_I2C1_Init+0x74>)
 8000d40:	f006 fb57 	bl	80073f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 faa5 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000344 	.word	0x20000344
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	20404768 	.word	0x20404768

08000d60 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <MX_I2C2_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <MX_I2C2_Init+0x7c>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d72:	2214      	movs	r2, #20
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000d9c:	f004 f932 	bl	8005004 <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000da6:	f000 fa77 	bl	8001298 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000dae:	f006 fad5 	bl	800735c <HAL_I2CEx_ConfigAnalogFilter>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000db8:	f000 fa6e 	bl	8001298 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_I2C2_Init+0x74>)
 8000dc0:	f006 fb17 	bl	80073f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dca:	f000 fa65 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000398 	.word	0x20000398
 8000dd8:	40005800 	.word	0x40005800
 8000ddc:	20404768 	.word	0x20404768

08000de0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ac      	sub	sp, #176	@ 0xb0
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	2284      	movs	r2, #132	@ 0x84
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f01f f9af 	bl	8020164 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a57      	ldr	r2, [pc, #348]	@ (8000f68 <HAL_I2C_MspInit+0x188>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	f040 80b9 	bne.w	8000f84 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f007 f83f 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e2c:	f000 fa34 	bl	8001298 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b4e      	ldr	r3, [pc, #312]	@ (8000f6c <HAL_I2C_MspInit+0x18c>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a4d      	ldr	r2, [pc, #308]	@ (8000f6c <HAL_I2C_MspInit+0x18c>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f6c <HAL_I2C_MspInit+0x18c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e62:	2304      	movs	r3, #4
 8000e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4840      	ldr	r0, [pc, #256]	@ (8000f70 <HAL_I2C_MspInit+0x190>)
 8000e70:	f003 ff1c 	bl	8004cac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e74:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <HAL_I2C_MspInit+0x18c>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	4a3c      	ldr	r2, [pc, #240]	@ (8000f6c <HAL_I2C_MspInit+0x18c>)
 8000e7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e80:	4b3a      	ldr	r3, [pc, #232]	@ (8000f6c <HAL_I2C_MspInit+0x18c>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e8c:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000e8e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f78 <HAL_I2C_MspInit+0x198>)
 8000e90:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e92:	4b38      	ldr	r3, [pc, #224]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000e94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e98:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9a:	4b36      	ldr	r3, [pc, #216]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea6:	4b33      	ldr	r3, [pc, #204]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ea8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000eba:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ecc:	4829      	ldr	r0, [pc, #164]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ece:	f002 f853 	bl	8002f78 <HAL_DMA_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000ed8:	f000 f9de 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a25      	ldr	r2, [pc, #148]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee2:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <HAL_I2C_MspInit+0x194>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000eea:	4a25      	ldr	r2, [pc, #148]	@ (8000f80 <HAL_I2C_MspInit+0x1a0>)
 8000eec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000eee:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ef4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000ef8:	2240      	movs	r2, #64	@ 0x40
 8000efa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f28:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f2a:	f002 f825 	bl	8002f78 <HAL_DMA_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000f34:	f000 f9b0 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <HAL_I2C_MspInit+0x19c>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2105      	movs	r1, #5
 8000f48:	201f      	movs	r0, #31
 8000f4a:	f001 fde1 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f4e:	201f      	movs	r0, #31
 8000f50:	f001 fdfa 	bl	8002b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2105      	movs	r1, #5
 8000f58:	2020      	movs	r0, #32
 8000f5a:	f001 fdd9 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f5e:	2020      	movs	r0, #32
 8000f60:	f001 fdf2 	bl	8002b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f64:	e0be      	b.n	80010e4 <HAL_I2C_MspInit+0x304>
 8000f66:	bf00      	nop
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	200003ec 	.word	0x200003ec
 8000f78:	40026088 	.word	0x40026088
 8000f7c:	2000044c 	.word	0x2000044c
 8000f80:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a58      	ldr	r2, [pc, #352]	@ (80010ec <HAL_I2C_MspInit+0x30c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	f040 80aa 	bne.w	80010e4 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 ff7f 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000fac:	f000 f974 	bl	8001298 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80010f0 <HAL_I2C_MspInit+0x310>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	4a4e      	ldr	r2, [pc, #312]	@ (80010f0 <HAL_I2C_MspInit+0x310>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80010f0 <HAL_I2C_MspInit+0x310>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd0:	2312      	movs	r3, #18
 8000fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fec:	4619      	mov	r1, r3
 8000fee:	4841      	ldr	r0, [pc, #260]	@ (80010f4 <HAL_I2C_MspInit+0x314>)
 8000ff0:	f003 fe5c 	bl	8004cac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80010f0 <HAL_I2C_MspInit+0x310>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80010f0 <HAL_I2C_MspInit+0x310>)
 8000ffa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <HAL_I2C_MspInit+0x310>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 800100c:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 800100e:	4a3b      	ldr	r2, [pc, #236]	@ (80010fc <HAL_I2C_MspInit+0x31c>)
 8001010:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001012:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001014:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001018:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001028:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001034:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800103a:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800104c:	482a      	ldr	r0, [pc, #168]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 800104e:	f001 ff93 	bl	8002f78 <HAL_DMA_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001058:	f000 f91e 	bl	8001298 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a26      	ldr	r2, [pc, #152]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001060:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001062:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <HAL_I2C_MspInit+0x318>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 800106a:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <HAL_I2C_MspInit+0x324>)
 800106c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800106e:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 8001070:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001074:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001076:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 8001078:	2240      	movs	r2, #64	@ 0x40
 800107a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800107c:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 8001084:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001088:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80010a8:	4815      	ldr	r0, [pc, #84]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 80010aa:	f001 ff65 	bl	8002f78 <HAL_DMA_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 80010b4:	f000 f8f0 	bl	8001298 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 80010bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_I2C_MspInit+0x320>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2105      	movs	r1, #5
 80010c8:	2021      	movs	r0, #33	@ 0x21
 80010ca:	f001 fd21 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010ce:	2021      	movs	r0, #33	@ 0x21
 80010d0:	f001 fd3a 	bl	8002b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2105      	movs	r1, #5
 80010d8:	2022      	movs	r0, #34	@ 0x22
 80010da:	f001 fd19 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80010de:	2022      	movs	r0, #34	@ 0x22
 80010e0:	f001 fd32 	bl	8002b48 <HAL_NVIC_EnableIRQ>
}
 80010e4:	bf00      	nop
 80010e6:	37b0      	adds	r7, #176	@ 0xb0
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40005800 	.word	0x40005800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	200004ac 	.word	0x200004ac
 80010fc:	40026058 	.word	0x40026058
 8001100:	2000050c 	.word	0x2000050c
 8001104:	400260b8 	.word	0x400260b8

08001108 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <_write+0x3c>)
 8001116:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	b29a      	uxth	r2, r3
 800111c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	4809      	ldr	r0, [pc, #36]	@ (8001148 <_write+0x40>)
 8001124:	f009 f87a 	bl	800a21c <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8001128:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800112c:	2201      	movs	r2, #1
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	4805      	ldr	r0, [pc, #20]	@ (8001148 <_write+0x40>)
 8001132:	f009 f873 	bl	800a21c <HAL_UART_Transmit>
	return len + 1;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3301      	adds	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08020f8c 	.word	0x08020f8c
 8001148:	20000a0c 	.word	0x20000a0c

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f001 f93d 	bl	80023ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f822 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f7ff fd6e 	bl	8000c38 <MX_GPIO_Init>
  MX_DMA_Init();
 800115c:	f7ff fb44 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001160:	f000 fe4c 	bl	8001dfc <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001164:	f7ff fafe 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8001168:	f000 fde8 	bl	8001d3c <MX_UART4_Init>
  MX_UART5_Init();
 800116c:	f000 fe16 	bl	8001d9c <MX_UART5_Init>
  MX_I2C1_Init();
 8001170:	f7ff fdb6 	bl	8000ce0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001174:	f7ff fdf4 	bl	8000d60 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001178:	f000 f894 	bl	80012a4 <MX_SPI1_Init>
  MX_SPI4_Init();
 800117c:	f000 f8d0 	bl	8001320 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001180:	f7ff fa2c 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001184:	f000 fd38 	bl	8001bf8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001188:	f000 fce8 	bl	8001b5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800118c:	f00b f9fa 	bl	800c584 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001190:	f7ff fbc4 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001194:	f00b fa2a 	bl	800c5ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <main+0x4c>

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	@ 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	@ 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f01e ffda 	bl	8020164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <SystemClock_Config+0xd0>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	4a29      	ldr	r2, [pc, #164]	@ (800126c <SystemClock_Config+0xd0>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <SystemClock_Config+0xd0>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <SystemClock_Config+0xd4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a24      	ldr	r2, [pc, #144]	@ (8001270 <SystemClock_Config+0xd4>)
 80011de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <SystemClock_Config+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001204:	2308      	movs	r3, #8
 8001206:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001208:	23d8      	movs	r3, #216	@ 0xd8
 800120a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4618      	mov	r0, r3
 800121a:	f006 f987 	bl	800752c <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001224:	f000 f838 	bl	8001298 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001228:	f006 f930 	bl	800748c <HAL_PWREx_EnableOverDrive>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001232:	f000 f831 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001236:	230f      	movs	r3, #15
 8001238:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123a:	2302      	movs	r3, #2
 800123c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001242:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001246:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	2107      	movs	r1, #7
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fc0d 	bl	8007a74 <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001260:	f000 f81a 	bl	8001298 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3750      	adds	r7, #80	@ 0x50
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001286:	f001 f8af 	bl	80023e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40001400 	.word	0x40001400

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_Handler+0x8>

080012a4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <MX_SPI1_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012da:	2218      	movs	r2, #24
 80012dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012f2:	2207      	movs	r2, #7
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_SPI1_Init+0x74>)
 80012fe:	2208      	movs	r2, #8
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_SPI1_Init+0x74>)
 8001304:	f007 f9be 	bl	8008684 <HAL_SPI_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800130e:	f7ff ffc3 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000056c 	.word	0x2000056c
 800131c:	40013000 	.word	0x40013000

08001320 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001326:	4a19      	ldr	r2, [pc, #100]	@ (800138c <MX_SPI4_Init+0x6c>)
 8001328:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_SPI4_Init+0x68>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001338:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800133c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_SPI4_Init+0x68>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <MX_SPI4_Init+0x68>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001364:	2207      	movs	r2, #7
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <MX_SPI4_Init+0x68>)
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	@ (8001388 <MX_SPI4_Init+0x68>)
 8001376:	f007 f985 	bl	8008684 <HAL_SPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001380:	f7ff ff8a 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200005d0 	.word	0x200005d0
 800138c:	40013400 	.word	0x40013400

08001390 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4aa1      	ldr	r2, [pc, #644]	@ (8001634 <HAL_SPI_MspInit+0x2a4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	f040 80a9 	bne.w	8001506 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	4a9f      	ldr	r2, [pc, #636]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013be:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	4a99      	ldr	r2, [pc, #612]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d8:	4b97      	ldr	r3, [pc, #604]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b94      	ldr	r3, [pc, #592]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	4a93      	ldr	r2, [pc, #588]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f0:	4b91      	ldr	r3, [pc, #580]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013fc:	2370      	movs	r3, #112	@ 0x70
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140c:	2305      	movs	r3, #5
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4889      	ldr	r0, [pc, #548]	@ (800163c <HAL_SPI_MspInit+0x2ac>)
 8001418:	f003 fc48 	bl	8004cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800141c:	2320      	movs	r3, #32
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142c:	2305      	movs	r3, #5
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4882      	ldr	r0, [pc, #520]	@ (8001640 <HAL_SPI_MspInit+0x2b0>)
 8001438:	f003 fc38 	bl	8004cac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800143c:	4b81      	ldr	r3, [pc, #516]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 800143e:	4a82      	ldr	r2, [pc, #520]	@ (8001648 <HAL_SPI_MspInit+0x2b8>)
 8001440:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001442:	4b80      	ldr	r3, [pc, #512]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001444:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001448:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144a:	4b7e      	ldr	r3, [pc, #504]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001450:	4b7c      	ldr	r3, [pc, #496]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001456:	4b7b      	ldr	r3, [pc, #492]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001458:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145e:	4b79      	ldr	r3, [pc, #484]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001464:	4b77      	ldr	r3, [pc, #476]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800146a:	4b76      	ldr	r3, [pc, #472]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001470:	4b74      	ldr	r3, [pc, #464]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001476:	4b73      	ldr	r3, [pc, #460]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800147c:	4871      	ldr	r0, [pc, #452]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 800147e:	f001 fd7b 	bl	8002f78 <HAL_DMA_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001488:	f7ff ff06 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a6d      	ldr	r2, [pc, #436]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001490:	659a      	str	r2, [r3, #88]	@ 0x58
 8001492:	4a6c      	ldr	r2, [pc, #432]	@ (8001644 <HAL_SPI_MspInit+0x2b4>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001498:	4b6c      	ldr	r3, [pc, #432]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 800149a:	4a6d      	ldr	r2, [pc, #436]	@ (8001650 <HAL_SPI_MspInit+0x2c0>)
 800149c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800149e:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014a0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a6:	4b69      	ldr	r3, [pc, #420]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014a8:	2240      	movs	r2, #64	@ 0x40
 80014aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ac:	4b67      	ldr	r3, [pc, #412]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b2:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ba:	4b64      	ldr	r3, [pc, #400]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c0:	4b62      	ldr	r3, [pc, #392]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014c6:	4b61      	ldr	r3, [pc, #388]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014cc:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d2:	4b5e      	ldr	r3, [pc, #376]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014d8:	485c      	ldr	r0, [pc, #368]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014da:	f001 fd4d 	bl	8002f78 <HAL_DMA_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80014e4:	f7ff fed8 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a58      	ldr	r2, [pc, #352]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80014ee:	4a57      	ldr	r2, [pc, #348]	@ (800164c <HAL_SPI_MspInit+0x2bc>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2105      	movs	r1, #5
 80014f8:	2023      	movs	r0, #35	@ 0x23
 80014fa:	f001 fb09 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014fe:	2023      	movs	r0, #35	@ 0x23
 8001500:	f001 fb22 	bl	8002b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001504:	e091      	b.n	800162a <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a52      	ldr	r2, [pc, #328]	@ (8001654 <HAL_SPI_MspInit+0x2c4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	f040 808c 	bne.w	800162a <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001512:	4b49      	ldr	r3, [pc, #292]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a48      	ldr	r2, [pc, #288]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 8001518:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b46      	ldr	r3, [pc, #280]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	4b43      	ldr	r3, [pc, #268]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a42      	ldr	r2, [pc, #264]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <HAL_SPI_MspInit+0x2a8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001542:	2374      	movs	r3, #116	@ 0x74
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001552:	2305      	movs	r3, #5
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	483e      	ldr	r0, [pc, #248]	@ (8001658 <HAL_SPI_MspInit+0x2c8>)
 800155e:	f003 fba5 	bl	8004cac <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001562:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 8001564:	4a3e      	ldr	r2, [pc, #248]	@ (8001660 <HAL_SPI_MspInit+0x2d0>)
 8001566:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001568:	4b3c      	ldr	r3, [pc, #240]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 800156a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800156e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001570:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001576:	4b39      	ldr	r3, [pc, #228]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800157c:	4b37      	ldr	r3, [pc, #220]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 800157e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001582:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001584:	4b35      	ldr	r3, [pc, #212]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800159c:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80015a2:	482e      	ldr	r0, [pc, #184]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 80015a4:	f001 fce8 	bl	8002f78 <HAL_DMA_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80015ae:	f7ff fe73 	bl	8001298 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a29      	ldr	r2, [pc, #164]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 80015b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80015b8:	4a28      	ldr	r2, [pc, #160]	@ (800165c <HAL_SPI_MspInit+0x2cc>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80015be:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015c0:	4a29      	ldr	r2, [pc, #164]	@ (8001668 <HAL_SPI_MspInit+0x2d8>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015ca:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015ce:	2240      	movs	r2, #64	@ 0x40
 80015d0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015de:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e0:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80015fe:	4819      	ldr	r0, [pc, #100]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 8001600:	f001 fcba 	bl	8002f78 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800160a:	f7ff fe45 	bl	8001298 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 8001612:	655a      	str	r2, [r3, #84]	@ 0x54
 8001614:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <HAL_SPI_MspInit+0x2d4>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	2054      	movs	r0, #84	@ 0x54
 8001620:	f001 fa76 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001624:	2054      	movs	r0, #84	@ 0x54
 8001626:	f001 fa8f 	bl	8002b48 <HAL_NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	@ 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40013000 	.word	0x40013000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000
 8001640:	40020400 	.word	0x40020400
 8001644:	20000634 	.word	0x20000634
 8001648:	40026440 	.word	0x40026440
 800164c:	20000694 	.word	0x20000694
 8001650:	40026458 	.word	0x40026458
 8001654:	40013400 	.word	0x40013400
 8001658:	40021000 	.word	0x40021000
 800165c:	200006f4 	.word	0x200006f4
 8001660:	40026410 	.word	0x40026410
 8001664:	20000754 	.word	0x20000754
 8001668:	40026428 	.word	0x40026428

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	210f      	movs	r1, #15
 80016a6:	f06f 0001 	mvn.w	r0, #1
 80016aa:	f001 fa31 	bl	8002b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	@ 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	@ (800179c <HAL_InitTick+0xe0>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	4a32      	ldr	r2, [pc, #200]	@ (800179c <HAL_InitTick+0xe0>)
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d8:	4b30      	ldr	r3, [pc, #192]	@ (800179c <HAL_InitTick+0xe0>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e4:	f107 0210 	add.w	r2, r7, #16
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 fba6 	bl	8007e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fe:	f006 fb77 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 8001702:	6378      	str	r0, [r7, #52]	@ 0x34
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001706:	f006 fb73 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <HAL_InitTick+0xe4>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	3b01      	subs	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001720:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <HAL_InitTick+0xec>)
 8001722:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001724:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001726:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800172a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800172c:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <HAL_InitTick+0xe8>)
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <HAL_InitTick+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001744:	4817      	ldr	r0, [pc, #92]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001746:	f008 f865 	bl	8009814 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11b      	bne.n	8001790 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001758:	4812      	ldr	r0, [pc, #72]	@ (80017a4 <HAL_InitTick+0xe8>)
 800175a:	f008 f8b3 	bl	80098c4 <HAL_TIM_Base_Start_IT>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001764:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800176c:	2037      	movs	r0, #55	@ 0x37
 800176e:	f001 f9eb 	bl	8002b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d808      	bhi.n	800178a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	2037      	movs	r0, #55	@ 0x37
 800177e:	f001 f9c7 	bl	8002b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_InitTick+0xf0>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e002      	b.n	8001790 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001790:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001794:	4618      	mov	r0, r3
 8001796:	3738      	adds	r7, #56	@ 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	200007b4 	.word	0x200007b4
 80017a8:	40001400 	.word	0x40001400
 80017ac:	20000004 	.word	0x20000004

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <NMI_Handler+0x4>

080017b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <MemManage_Handler+0x4>

080017c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <DMA1_Stream0_IRQHandler+0x10>)
 80017ee:	f001 fd63 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000af4 	.word	0x20000af4

080017fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <DMA1_Stream1_IRQHandler+0x10>)
 8001802:	f001 fd59 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000089c 	.word	0x2000089c

08001810 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <DMA1_Stream2_IRQHandler+0x10>)
 8001816:	f001 fd4f 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000a94 	.word	0x20000a94

08001824 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <DMA1_Stream3_IRQHandler+0x10>)
 800182a:	f001 fd45 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200004ac 	.word	0x200004ac

08001838 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <DMA1_Stream5_IRQHandler+0x10>)
 800183e:	f001 fd3b 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200003ec 	.word	0x200003ec

0800184c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <DMA1_Stream6_IRQHandler+0x10>)
 8001852:	f001 fd31 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000044c 	.word	0x2000044c

08001860 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <I2C1_EV_IRQHandler+0x10>)
 8001866:	f004 f80f 	bl	8005888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000344 	.word	0x20000344

08001874 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <I2C1_ER_IRQHandler+0x10>)
 800187a:	f004 f81f 	bl	80058bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000344 	.word	0x20000344

08001888 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <I2C2_EV_IRQHandler+0x10>)
 800188e:	f003 fffb 	bl	8005888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000398 	.word	0x20000398

0800189c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <I2C2_ER_IRQHandler+0x10>)
 80018a2:	f004 f80b 	bl	80058bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000398 	.word	0x20000398

080018b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <SPI1_IRQHandler+0x10>)
 80018b6:	f007 fb25 	bl	8008f04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000056c 	.word	0x2000056c

080018c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <USART3_IRQHandler+0x10>)
 80018ca:	f008 fdd3 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000a0c 	.word	0x20000a0c

080018d8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <DMA1_Stream7_IRQHandler+0x10>)
 80018de:	f001 fceb 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000050c 	.word	0x2000050c

080018ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <UART4_IRQHandler+0x10>)
 80018f2:	f008 fdbf 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200008fc 	.word	0x200008fc

08001900 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <UART5_IRQHandler+0x10>)
 8001906:	f008 fdb5 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000984 	.word	0x20000984

08001914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <TIM6_DAC_IRQHandler+0x10>)
 800191a:	f008 f84b 	bl	80099b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000850 	.word	0x20000850

08001928 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <TIM7_IRQHandler+0x10>)
 800192e:	f008 f841 	bl	80099b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200007b4 	.word	0x200007b4

0800193c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <DMA2_Stream0_IRQHandler+0x10>)
 8001942:	f001 fcb9 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200006f4 	.word	0x200006f4

08001950 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <DMA2_Stream1_IRQHandler+0x10>)
 8001956:	f001 fcaf 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000754 	.word	0x20000754

08001964 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <DMA2_Stream2_IRQHandler+0x10>)
 800196a:	f001 fca5 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000634 	.word	0x20000634

08001978 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <DMA2_Stream3_IRQHandler+0x10>)
 800197e:	f001 fc9b 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000694 	.word	0x20000694

0800198c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <DMA2_Stream4_IRQHandler+0x10>)
 8001992:	f001 fc91 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000274 	.word	0x20000274

080019a0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <ETH_IRQHandler+0x10>)
 80019a6:	f002 fa99 	bl	8003edc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000555c 	.word	0x2000555c

080019b4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <ETH_WKUP_IRQHandler+0x10>)
 80019ba:	f002 fa8f 	bl	8003edc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000555c 	.word	0x2000555c

080019c8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <SPI4_IRQHandler+0x10>)
 80019ce:	f007 fa99 	bl	8008f04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200005d0 	.word	0x200005d0

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <_kill+0x20>)
 80019f8:	2216      	movs	r2, #22
 80019fa:	601a      	str	r2, [r3, #0]
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	20022a4c 	.word	0x20022a4c

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe5 	bl	80019ec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a22:	bf00      	nop
 8001a24:	e7fd      	b.n	8001a22 <_exit+0x12>

08001a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e00a      	b.n	8001a4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a38:	f3af 8000 	nop.w
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	b2ca      	uxtb	r2, r1
 8001a46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbf0      	blt.n	8001a38 <_read+0x12>
  }

  return len;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a88:	605a      	str	r2, [r3, #4]
  return 0;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_isatty>:

int _isatty(int file)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d205      	bcs.n	8001b04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <_sbrk+0x6c>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	20050000 	.word	0x20050000
 8001b28:	00002000 	.word	0x00002000
 8001b2c:	20000800 	.word	0x20000800
 8001b30:	20022a60 	.word	0x20022a60
 8001b34:	20022a4c 	.word	0x20022a4c

08001b38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001b7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba2:	4814      	ldr	r0, [pc, #80]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001ba4:	f007 fe36 	bl	8009814 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bae:	f7ff fb73 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001bc0:	f008 f800 	bl	8009bc4 <HAL_TIM_ConfigClockSource>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bca:	f7ff fb65 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	@ (8001bf4 <MX_TIM2_Init+0x98>)
 8001bdc:	f008 fa24 	bl	800a028 <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001be6:	f7ff fb57 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000804 	.word	0x20000804

08001bf8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <MX_TIM6_Init+0x64>)
 8001c0a:	4a15      	ldr	r2, [pc, #84]	@ (8001c60 <MX_TIM6_Init+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <MX_TIM6_Init+0x64>)
 8001c10:	f240 221b 	movw	r2, #539	@ 0x21b
 8001c14:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <MX_TIM6_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <MX_TIM6_Init+0x64>)
 8001c1e:	2263      	movs	r2, #99	@ 0x63
 8001c20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <MX_TIM6_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c28:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <MX_TIM6_Init+0x64>)
 8001c2a:	f007 fdf3 	bl	8009814 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c34:	f7ff fb30 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c38:	2320      	movs	r3, #32
 8001c3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_TIM6_Init+0x64>)
 8001c46:	f008 f9ef 	bl	800a028 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c50:	f7ff fb22 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000850 	.word	0x20000850
 8001c60:	40001000 	.word	0x40001000

08001c64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c74:	d10c      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <HAL_TIM_Base_MspInit+0xc8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d2c <HAL_TIM_Base_MspInit+0xc8>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <HAL_TIM_Base_MspInit+0xc8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c8e:	e049      	b.n	8001d24 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a26      	ldr	r2, [pc, #152]	@ (8001d30 <HAL_TIM_Base_MspInit+0xcc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d144      	bne.n	8001d24 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_TIM_Base_MspInit+0xc8>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a23      	ldr	r2, [pc, #140]	@ (8001d2c <HAL_TIM_Base_MspInit+0xc8>)
 8001ca0:	f043 0310 	orr.w	r3, r3, #16
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_TIM_Base_MspInit+0xc8>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cb4:	4a20      	ldr	r2, [pc, #128]	@ (8001d38 <HAL_TIM_Base_MspInit+0xd4>)
 8001cb6:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cba:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001cbe:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd2:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cda:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce2:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cf0:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001cf8:	480e      	ldr	r0, [pc, #56]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001cfa:	f001 f93d 	bl	8002f78 <HAL_DMA_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001d04:	f7ff fac8 	bl	8001298 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001d0c:	621a      	str	r2, [r3, #32]
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <HAL_TIM_Base_MspInit+0xd0>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2105      	movs	r1, #5
 8001d18:	2036      	movs	r0, #54	@ 0x36
 8001d1a:	f000 fef9 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d1e:	2036      	movs	r0, #54	@ 0x36
 8001d20:	f000 ff12 	bl	8002b48 <HAL_NVIC_EnableIRQ>
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40001000 	.word	0x40001000
 8001d34:	2000089c 	.word	0x2000089c
 8001d38:	40026028 	.word	0x40026028

08001d3c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d42:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <MX_UART4_Init+0x5c>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_UART4_Init+0x58>)
 8001d80:	f008 f9fe 	bl	800a180 <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d8a:	f7ff fa85 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200008fc 	.word	0x200008fc
 8001d98:	40004c00 	.word	0x40004c00

08001d9c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001da0:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001da2:	4a15      	ldr	r2, [pc, #84]	@ (8001df8 <MX_UART5_Init+0x5c>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001da6:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_UART5_Init+0x58>)
 8001de0:	f008 f9ce 	bl	800a180 <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001dea:	f7ff fa55 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000984 	.word	0x20000984
 8001df8:	40005000 	.word	0x40005000

08001dfc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e02:	4a15      	ldr	r2, [pc, #84]	@ (8001e58 <MX_USART3_UART_Init+0x5c>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e06:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_USART3_UART_Init+0x58>)
 8001e40:	f008 f99e 	bl	800a180 <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e4a:	f7ff fa25 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000a0c 	.word	0x20000a0c
 8001e58:	40004800 	.word	0x40004800

08001e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0b0      	sub	sp, #192	@ 0xc0
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e78:	2284      	movs	r2, #132	@ 0x84
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f01e f971 	bl	8020164 <memset>
  if(uartHandle->Instance==UART4)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4ab0      	ldr	r2, [pc, #704]	@ (8002148 <HAL_UART_MspInit+0x2ec>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d173      	bne.n	8001f74 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f006 f802 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ea6:	f7ff f9f7 	bl	8001298 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eaa:	4ba8      	ldr	r3, [pc, #672]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4aa7      	ldr	r2, [pc, #668]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001eb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4ba5      	ldr	r3, [pc, #660]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4ba2      	ldr	r3, [pc, #648]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4aa1      	ldr	r2, [pc, #644]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b9f      	ldr	r3, [pc, #636]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	623b      	str	r3, [r7, #32]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001eda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001efe:	4619      	mov	r1, r3
 8001f00:	4893      	ldr	r0, [pc, #588]	@ (8002150 <HAL_UART_MspInit+0x2f4>)
 8001f02:	f002 fed3 	bl	8004cac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001f06:	4b93      	ldr	r3, [pc, #588]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f08:	4a93      	ldr	r2, [pc, #588]	@ (8002158 <HAL_UART_MspInit+0x2fc>)
 8001f0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001f0c:	4b91      	ldr	r3, [pc, #580]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f12:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f14:	4b8f      	ldr	r3, [pc, #572]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1a:	4b8e      	ldr	r3, [pc, #568]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f20:	4b8c      	ldr	r3, [pc, #560]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f26:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f28:	4b8a      	ldr	r3, [pc, #552]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2e:	4b89      	ldr	r3, [pc, #548]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f34:	4b87      	ldr	r3, [pc, #540]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3a:	4b86      	ldr	r3, [pc, #536]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f40:	4b84      	ldr	r3, [pc, #528]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f46:	4883      	ldr	r0, [pc, #524]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f48:	f001 f816 	bl	8002f78 <HAL_DMA_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f52:	f7ff f9a1 	bl	8001298 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a7e      	ldr	r2, [pc, #504]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f5a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f5c:	4a7d      	ldr	r2, [pc, #500]	@ (8002154 <HAL_UART_MspInit+0x2f8>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2105      	movs	r1, #5
 8001f66:	2034      	movs	r0, #52	@ 0x34
 8001f68:	f000 fdd2 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f6c:	2034      	movs	r0, #52	@ 0x34
 8001f6e:	f000 fdeb 	bl	8002b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f72:	e0e4      	b.n	800213e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a78      	ldr	r2, [pc, #480]	@ (800215c <HAL_UART_MspInit+0x300>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	f040 8095 	bne.w	80020aa <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f005 ff88 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f9a:	f7ff f97d 	bl	8001298 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	4a6a      	ldr	r2, [pc, #424]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001faa:	4b68      	ldr	r3, [pc, #416]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	4b65      	ldr	r3, [pc, #404]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a64      	ldr	r2, [pc, #400]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b62      	ldr	r3, [pc, #392]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fce:	4b5f      	ldr	r3, [pc, #380]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b5c      	ldr	r3, [pc, #368]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002000:	2308      	movs	r3, #8
 8002002:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800200a:	4619      	mov	r1, r3
 800200c:	4850      	ldr	r0, [pc, #320]	@ (8002150 <HAL_UART_MspInit+0x2f4>)
 800200e:	f002 fe4d 	bl	8004cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002012:	2304      	movs	r3, #4
 8002014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800202a:	2308      	movs	r3, #8
 800202c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002030:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002034:	4619      	mov	r1, r3
 8002036:	484a      	ldr	r0, [pc, #296]	@ (8002160 <HAL_UART_MspInit+0x304>)
 8002038:	f002 fe38 	bl	8004cac <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800203c:	4b49      	ldr	r3, [pc, #292]	@ (8002164 <HAL_UART_MspInit+0x308>)
 800203e:	4a4a      	ldr	r2, [pc, #296]	@ (8002168 <HAL_UART_MspInit+0x30c>)
 8002040:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002042:	4b48      	ldr	r3, [pc, #288]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002044:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002048:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800204a:	4b46      	ldr	r3, [pc, #280]	@ (8002164 <HAL_UART_MspInit+0x308>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002050:	4b44      	ldr	r3, [pc, #272]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002056:	4b43      	ldr	r3, [pc, #268]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002058:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800205c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800205e:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002060:	2200      	movs	r2, #0
 8002062:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002064:	4b3f      	ldr	r3, [pc, #252]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800206a:	4b3e      	ldr	r3, [pc, #248]	@ (8002164 <HAL_UART_MspInit+0x308>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002070:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002076:	4b3b      	ldr	r3, [pc, #236]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800207c:	4839      	ldr	r0, [pc, #228]	@ (8002164 <HAL_UART_MspInit+0x308>)
 800207e:	f000 ff7b 	bl	8002f78 <HAL_DMA_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002088:	f7ff f906 	bl	8001298 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a35      	ldr	r2, [pc, #212]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002090:	675a      	str	r2, [r3, #116]	@ 0x74
 8002092:	4a34      	ldr	r2, [pc, #208]	@ (8002164 <HAL_UART_MspInit+0x308>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2105      	movs	r1, #5
 800209c:	2035      	movs	r0, #53	@ 0x35
 800209e:	f000 fd37 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80020a2:	2035      	movs	r0, #53	@ 0x35
 80020a4:	f000 fd50 	bl	8002b48 <HAL_NVIC_EnableIRQ>
}
 80020a8:	e049      	b.n	800213e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a2f      	ldr	r2, [pc, #188]	@ (800216c <HAL_UART_MspInit+0x310>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d144      	bne.n	800213e <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 feee 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_UART_MspInit+0x276>
      Error_Handler();
 80020ce:	f7ff f8e3 	bl	8001298 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d2:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <HAL_UART_MspInit+0x2f0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002102:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211c:	2307      	movs	r3, #7
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002122:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002126:	4619      	mov	r1, r3
 8002128:	480d      	ldr	r0, [pc, #52]	@ (8002160 <HAL_UART_MspInit+0x304>)
 800212a:	f002 fdbf 	bl	8004cac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2105      	movs	r1, #5
 8002132:	2027      	movs	r0, #39	@ 0x27
 8002134:	f000 fcec 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002138:	2027      	movs	r0, #39	@ 0x27
 800213a:	f000 fd05 	bl	8002b48 <HAL_NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	37c0      	adds	r7, #192	@ 0xc0
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40004c00 	.word	0x40004c00
 800214c:	40023800 	.word	0x40023800
 8002150:	40020800 	.word	0x40020800
 8002154:	20000a94 	.word	0x20000a94
 8002158:	40026040 	.word	0x40026040
 800215c:	40005000 	.word	0x40005000
 8002160:	40020c00 	.word	0x40020c00
 8002164:	20000af4 	.word	0x20000af4
 8002168:	40026010 	.word	0x40026010
 800216c:	40004800 	.word	0x40004800

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002174:	f7ff fce0 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	@ (80021b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	@ (80021bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800219e:	f01e f82f 	bl	8020200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7fe ffd3 	bl	800114c <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80021b4:	08025588 	.word	0x08025588
  ldr r2, =_sbss
 80021b8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80021bc:	20022a5c 	.word	0x20022a5c

080021c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC_IRQHandler>

080021c2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <LAN8742_RegisterBusIO+0x28>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <LAN8742_RegisterBusIO+0x28>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <LAN8742_RegisterBusIO+0x28>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ee:	e014      	b.n	800221a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d139      	bne.n	80022b6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e01c      	b.n	8002296 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f107 020c 	add.w	r2, r7, #12
 8002264:	2112      	movs	r1, #18
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	4798      	blx	r3
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	da03      	bge.n	8002278 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002270:	f06f 0304 	mvn.w	r3, #4
 8002274:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002276:	e00b      	b.n	8002290 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d105      	bne.n	8002290 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
         break;
 800228e:	e005      	b.n	800229c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b1f      	cmp	r3, #31
 800229a:	d9df      	bls.n	800225c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b1f      	cmp	r3, #31
 80022a2:	d902      	bls.n	80022aa <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022a4:	f06f 0302 	mvn.w	r3, #2
 80022a8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80022b6:	693b      	ldr	r3, [r7, #16]
 }
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6810      	ldr	r0, [r2, #0]
 80022d4:	f107 020c 	add.w	r2, r7, #12
 80022d8:	2101      	movs	r1, #1
 80022da:	4798      	blx	r3
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da02      	bge.n	80022e8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022e2:	f06f 0304 	mvn.w	r3, #4
 80022e6:	e06e      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6810      	ldr	r0, [r2, #0]
 80022f0:	f107 020c 	add.w	r2, r7, #12
 80022f4:	2101      	movs	r1, #1
 80022f6:	4798      	blx	r3
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da02      	bge.n	8002304 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022fe:	f06f 0304 	mvn.w	r3, #4
 8002302:	e060      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800230e:	2301      	movs	r3, #1
 8002310:	e059      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6810      	ldr	r0, [r2, #0]
 800231a:	f107 020c 	add.w	r2, r7, #12
 800231e:	2100      	movs	r1, #0
 8002320:	4798      	blx	r3
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	da02      	bge.n	800232e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002328:	f06f 0304 	mvn.w	r3, #4
 800232c:	e04b      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11b      	bne.n	8002370 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <LAN8742_GetLinkState+0x90>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800234c:	2302      	movs	r3, #2
 800234e:	e03a      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800235a:	2303      	movs	r3, #3
 800235c:	e033      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002368:	2304      	movs	r3, #4
 800236a:	e02c      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800236c:	2305      	movs	r3, #5
 800236e:	e02a      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6810      	ldr	r0, [r2, #0]
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	211f      	movs	r1, #31
 800237e:	4798      	blx	r3
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	da02      	bge.n	800238c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002386:	f06f 0304 	mvn.w	r3, #4
 800238a:	e01c      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002396:	2306      	movs	r3, #6
 8002398:	e015      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 031c 	and.w	r3, r3, #28
 80023a0:	2b18      	cmp	r3, #24
 80023a2:	d101      	bne.n	80023a8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e00e      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 031c 	and.w	r3, r3, #28
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d101      	bne.n	80023b6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e007      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 031c 	and.w	r3, r3, #28
 80023bc:	2b14      	cmp	r3, #20
 80023be:	d101      	bne.n	80023c4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80023c0:	2304      	movs	r3, #4
 80023c2:	e000      	b.n	80023c6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023c4:	2305      	movs	r3, #5
    }
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d2:	2003      	movs	r0, #3
 80023d4:	f000 fb91 	bl	8002afa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d8:	200f      	movs	r0, #15
 80023da:	f7ff f96f 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023de:	f7ff f945 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x20>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_IncTick+0x24>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	@ (800240c <HAL_IncTick+0x24>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000008 	.word	0x20000008
 800240c:	20000b54 	.word	0x20000b54

08002410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return uwTick;
 8002414:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <HAL_GetTick+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000b54 	.word	0x20000b54

08002428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff ffee 	bl	8002410 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002440:	d005      	beq.n	800244e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_Delay+0x44>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800244e:	bf00      	nop
 8002450:	f7ff ffde 	bl	8002410 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d8f7      	bhi.n	8002450 <HAL_Delay+0x28>
  {
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000008 	.word	0x20000008

08002470 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e031      	b.n	80024ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe f8f6 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_ADC_Init+0x84>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f974 	bl	80027ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024da:	e001      	b.n	80024e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	ffffeefd 	.word	0xffffeefd

080024f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e13a      	b.n	800278a <HAL_ADC_ConfigChannel+0x292>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b09      	cmp	r3, #9
 8002522:	d93a      	bls.n	800259a <HAL_ADC_ConfigChannel+0xa2>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800252c:	d035      	beq.n	800259a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68d9      	ldr	r1, [r3, #12]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	3b1e      	subs	r3, #30
 8002544:	2207      	movs	r2, #7
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	400a      	ands	r2, r1
 8002552:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a8f      	ldr	r2, [pc, #572]	@ (8002798 <HAL_ADC_ConfigChannel+0x2a0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10a      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68d9      	ldr	r1, [r3, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	061a      	lsls	r2, r3, #24
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002572:	e039      	b.n	80025e8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68d9      	ldr	r1, [r3, #12]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	4603      	mov	r3, r0
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4403      	add	r3, r0
 800258c:	3b1e      	subs	r3, #30
 800258e:	409a      	lsls	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002598:	e026      	b.n	80025e8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6919      	ldr	r1, [r3, #16]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2207      	movs	r2, #7
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43da      	mvns	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	400a      	ands	r2, r1
 80025c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6919      	ldr	r1, [r3, #16]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	4603      	mov	r3, r0
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4403      	add	r3, r0
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	409a      	lsls	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d824      	bhi.n	800263a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b05      	subs	r3, #5
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43da      	mvns	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	400a      	ands	r2, r1
 8002610:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3b05      	subs	r3, #5
 800262c:	fa00 f203 	lsl.w	r2, r0, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	635a      	str	r2, [r3, #52]	@ 0x34
 8002638:	e04c      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d824      	bhi.n	800268c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b23      	subs	r3, #35	@ 0x23
 8002654:	221f      	movs	r2, #31
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	400a      	ands	r2, r1
 8002662:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b23      	subs	r3, #35	@ 0x23
 800267e:	fa00 f203 	lsl.w	r2, r0, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
 800268a:	e023      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b41      	subs	r3, #65	@ 0x41
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b41      	subs	r3, #65	@ 0x41
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a30      	ldr	r2, [pc, #192]	@ (800279c <HAL_ADC_ConfigChannel+0x2a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1fc>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026e8:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a28      	ldr	r2, [pc, #160]	@ (800279c <HAL_ADC_ConfigChannel+0x2a4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10f      	bne.n	800271e <HAL_ADC_ConfigChannel+0x226>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b12      	cmp	r3, #18
 8002704:	d10b      	bne.n	800271e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002706:	4b26      	ldr	r3, [pc, #152]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a25      	ldr	r2, [pc, #148]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800270c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002710:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a22      	ldr	r2, [pc, #136]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002718:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800271c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1e      	ldr	r2, [pc, #120]	@ (800279c <HAL_ADC_ConfigChannel+0x2a4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d12b      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x288>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1a      	ldr	r2, [pc, #104]	@ (8002798 <HAL_ADC_ConfigChannel+0x2a0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d003      	beq.n	800273a <HAL_ADC_ConfigChannel+0x242>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b11      	cmp	r3, #17
 8002738:	d122      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002740:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002744:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002746:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a15      	ldr	r2, [pc, #84]	@ (80027a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800274c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002750:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a10      	ldr	r2, [pc, #64]	@ (8002798 <HAL_ADC_ConfigChannel+0x2a0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d111      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <HAL_ADC_ConfigChannel+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <HAL_ADC_ConfigChannel+0x2b0>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0c9a      	lsrs	r2, r3, #18
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002772:	e002      	b.n	800277a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3b01      	subs	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	10000012 	.word	0x10000012
 800279c:	40012000 	.word	0x40012000
 80027a0:	40012300 	.word	0x40012300
 80027a4:	20000000 	.word	0x20000000
 80027a8:	431bde83 	.word	0x431bde83

080027ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027b4:	4b78      	ldr	r3, [pc, #480]	@ (8002998 <ADC_Init+0x1ec>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a77      	ldr	r2, [pc, #476]	@ (8002998 <ADC_Init+0x1ec>)
 80027ba:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80027be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027c0:	4b75      	ldr	r3, [pc, #468]	@ (8002998 <ADC_Init+0x1ec>)
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4973      	ldr	r1, [pc, #460]	@ (8002998 <ADC_Init+0x1ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	4a58      	ldr	r2, [pc, #352]	@ (800299c <ADC_Init+0x1f0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800284e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e00f      	b.n	80028a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0202 	bic.w	r2, r2, #2
 80028b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	005a      	lsls	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	3b01      	subs	r3, #1
 8002900:	035a      	lsls	r2, r3, #13
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	e007      	b.n	800291c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800291a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	3b01      	subs	r3, #1
 8002938:	051a      	lsls	r2, r3, #20
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800295e:	025a      	lsls	r2, r3, #9
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	029a      	lsls	r2, r3, #10
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012300 	.word	0x40012300
 800299c:	0f000001 	.word	0x0f000001

080029a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x40>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029bc:	4013      	ands	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <__NVIC_SetPriorityGrouping+0x44>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x40>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00
 80029e4:	05fa0000 	.word	0x05fa0000

080029e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029ec:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <__NVIC_GetPriorityGrouping+0x18>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	f003 0307 	and.w	r3, r3, #7
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	db0b      	blt.n	8002a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	f003 021f 	and.w	r2, r3, #31
 8002a1c:	4907      	ldr	r1, [pc, #28]	@ (8002a3c <__NVIC_EnableIRQ+0x38>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	2001      	movs	r0, #1
 8002a26:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	@ (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	@ (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
         );
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	@ 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff4c 	bl	80029a0 <__NVIC_SetPriorityGrouping>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b22:	f7ff ff61 	bl	80029e8 <__NVIC_GetPriorityGrouping>
 8002b26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f7ff ffb1 	bl	8002a94 <NVIC_EncodePriority>
 8002b32:	4602      	mov	r2, r0
 8002b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff80 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff54 	bl	8002a04 <__NVIC_EnableIRQ>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e054      	b.n	8002c20 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7f5b      	ldrb	r3, [r3, #29]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fe0e 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	791b      	ldrb	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a22      	ldr	r2, [pc, #136]	@ (8002c28 <HAL_CRC_Init+0xc4>)
 8002ba0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0218 	bic.w	r2, r2, #24
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	e00c      	b.n	8002bce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6899      	ldr	r1, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f94c 	bl	8002e5c <HAL_CRCEx_Polynomial_Set>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e028      	b.n	8002c20 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	795b      	ldrb	r3, [r3, #5]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bde:	611a      	str	r2, [r3, #16]
 8002be0:	e004      	b.n	8002bec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6912      	ldr	r2, [r2, #16]
 8002bea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	04c11db7 	.word	0x04c11db7

08002c2c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d006      	beq.n	8002c68 <HAL_CRC_Calculate+0x3c>
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d829      	bhi.n	8002cb2 <HAL_CRC_Calculate+0x86>
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d019      	beq.n	8002c96 <HAL_CRC_Calculate+0x6a>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d01e      	beq.n	8002ca4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002c66:	e024      	b.n	8002cb2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e00a      	b.n	8002c84 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	441a      	add	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3f0      	bcc.n	8002c6e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
      break;
 8002c94:	e00e      	b.n	8002cb4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f812 	bl	8002cc4 <CRC_Handle_8>
 8002ca0:	6138      	str	r0, [r7, #16]
      break;
 8002ca2:	e007      	b.n	8002cb4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f89d 	bl	8002de8 <CRC_Handle_16>
 8002cae:	6138      	str	r0, [r7, #16]
      break;
 8002cb0:	e000      	b.n	8002cb4 <HAL_CRC_Calculate+0x88>
      break;
 8002cb2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002cba:	693b      	ldr	r3, [r7, #16]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	@ 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	e023      	b.n	8002d1e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	440b      	add	r3, r1
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002cf0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002d00:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	3303      	adds	r3, #3
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	440b      	add	r3, r1
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002d14:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3d6      	bcc.n	8002cd6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d051      	beq.n	8002dd6 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4413      	add	r3, r2
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	7013      	strb	r3, [r2, #0]
 8002d4c:	e043      	b.n	8002dd6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d118      	bne.n	8002d8a <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4413      	add	r3, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	b21a      	sxth	r2, r3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	440b      	add	r3, r1
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	8b7a      	ldrh	r2, [r7, #26]
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	e025      	b.n	8002dd6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d120      	bne.n	8002dd6 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b21b      	sxth	r3, r3
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3301      	adds	r3, #1
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	440b      	add	r3, r1
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b21b      	sxth	r3, r3
 8002db6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	8b7a      	ldrh	r2, [r7, #26]
 8002dc2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4413      	add	r3, r2
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3724      	adds	r7, #36	@ 0x24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e013      	b.n	8002e22 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	041a      	lsls	r2, r3, #16
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	440b      	add	r3, r1
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	4619      	mov	r1, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d3e6      	bcc.n	8002dfa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4413      	add	r3, r2
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	371c      	adds	r7, #28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e6c:	231f      	movs	r3, #31
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
 8002e7e:	e063      	b.n	8002f48 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e80:	bf00      	nop
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1e5a      	subs	r2, r3, #1
 8002e86:	613a      	str	r2, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_CRCEx_Polynomial_Set+0x44>
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b18      	cmp	r3, #24
 8002ea4:	d846      	bhi.n	8002f34 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_CRCEx_Polynomial_Set+0x50>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002f3b 	.word	0x08002f3b
 8002eb0:	08002f35 	.word	0x08002f35
 8002eb4:	08002f35 	.word	0x08002f35
 8002eb8:	08002f35 	.word	0x08002f35
 8002ebc:	08002f35 	.word	0x08002f35
 8002ec0:	08002f35 	.word	0x08002f35
 8002ec4:	08002f35 	.word	0x08002f35
 8002ec8:	08002f35 	.word	0x08002f35
 8002ecc:	08002f29 	.word	0x08002f29
 8002ed0:	08002f35 	.word	0x08002f35
 8002ed4:	08002f35 	.word	0x08002f35
 8002ed8:	08002f35 	.word	0x08002f35
 8002edc:	08002f35 	.word	0x08002f35
 8002ee0:	08002f35 	.word	0x08002f35
 8002ee4:	08002f35 	.word	0x08002f35
 8002ee8:	08002f35 	.word	0x08002f35
 8002eec:	08002f1d 	.word	0x08002f1d
 8002ef0:	08002f35 	.word	0x08002f35
 8002ef4:	08002f35 	.word	0x08002f35
 8002ef8:	08002f35 	.word	0x08002f35
 8002efc:	08002f35 	.word	0x08002f35
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f35 	.word	0x08002f35
 8002f08:	08002f35 	.word	0x08002f35
 8002f0c:	08002f11 	.word	0x08002f11
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d913      	bls.n	8002f3e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f1a:	e010      	b.n	8002f3e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b07      	cmp	r3, #7
 8002f20:	d90f      	bls.n	8002f42 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f26:	e00c      	b.n	8002f42 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	d90b      	bls.n	8002f46 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002f32:	e008      	b.n	8002f46 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
        break;
 8002f38:	e006      	b.n	8002f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e004      	b.n	8002f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e002      	b.n	8002f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002f46:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 0118 	bic.w	r1, r3, #24
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f84:	f7ff fa44 	bl	8002410 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e099      	b.n	80030c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb4:	e00f      	b.n	8002fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fb6:	f7ff fa2b 	bl	8002410 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d908      	bls.n	8002fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e078      	b.n	80030c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e8      	bne.n	8002fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <HAL_DMA_Init+0x158>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	2b04      	cmp	r3, #4
 800302e:	d107      	bne.n	8003040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	4313      	orrs	r3, r2
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f023 0307 	bic.w	r3, r3, #7
 8003056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	2b04      	cmp	r3, #4
 8003068:	d117      	bne.n	800309a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00e      	beq.n	800309a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fb23 	bl	80036c8 <DMA_CheckFifoParam>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2240      	movs	r2, #64	@ 0x40
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003096:	2301      	movs	r3, #1
 8003098:	e016      	b.n	80030c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fada 	bl	800365c <DMA_CalcBaseAndBitshift>
 80030a8:	4603      	mov	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b0:	223f      	movs	r2, #63	@ 0x3f
 80030b2:	409a      	lsls	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	f010803f 	.word	0xf010803f

080030d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_DMA_Start_IT+0x26>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e048      	b.n	800318c <HAL_DMA_Start_IT+0xb8>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d137      	bne.n	800317e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fa6c 	bl	8003600 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	223f      	movs	r2, #63	@ 0x3f
 800312e:	409a      	lsls	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0216 	orr.w	r2, r2, #22
 8003142:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003152:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0208 	orr.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e005      	b.n	800318a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800318a:	7dfb      	ldrb	r3, [r7, #23]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a2:	f7ff f935 	bl	8002410 <HAL_GetTick>
 80031a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d008      	beq.n	80031c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	@ 0x80
 80031b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e052      	b.n	800326c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0216 	bic.w	r2, r2, #22
 80031d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_DMA_Abort+0x62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0208 	bic.w	r2, r2, #8
 8003204:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003216:	e013      	b.n	8003240 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003218:	f7ff f8fa 	bl	8002410 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b05      	cmp	r3, #5
 8003224:	d90c      	bls.n	8003240 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2203      	movs	r2, #3
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e015      	b.n	800326c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e4      	bne.n	8003218 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	223f      	movs	r2, #63	@ 0x3f
 8003254:	409a      	lsls	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00c      	b.n	80032ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2205      	movs	r2, #5
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80032c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003500 <HAL_DMA_IRQHandler+0x248>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a8e      	ldr	r2, [pc, #568]	@ (8003504 <HAL_DMA_IRQHandler+0x24c>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0a9b      	lsrs	r3, r3, #10
 80032d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e2:	2208      	movs	r2, #8
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003310:	2208      	movs	r2, #8
 8003312:	409a      	lsls	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003346:	2201      	movs	r2, #1
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003352:	f043 0202 	orr.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	2204      	movs	r2, #4
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d012      	beq.n	8003390 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	2210      	movs	r2, #16
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d043      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03c      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	2210      	movs	r2, #16
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d024      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
 80033e6:	e01f      	b.n	8003428 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01b      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e016      	b.n	8003428 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0208 	bic.w	r2, r2, #8
 8003416:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	2220      	movs	r2, #32
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 808f 	beq.w	8003558 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8087 	beq.w	8003558 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	2220      	movs	r2, #32
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b05      	cmp	r3, #5
 8003460:	d136      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0216 	bic.w	r2, r2, #22
 8003470:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003480:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_DMA_IRQHandler+0x1da>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0208 	bic.w	r2, r2, #8
 80034a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a6:	223f      	movs	r2, #63	@ 0x3f
 80034a8:	409a      	lsls	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d07e      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
        }
        return;
 80034ce:	e079      	b.n	80035c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d031      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
 80034fc:	e02c      	b.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
 80034fe:	bf00      	nop
 8003500:	20000000 	.word	0x20000000
 8003504:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d023      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e01e      	b.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10f      	bne.n	8003548 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0210 	bic.w	r2, r2, #16
 8003536:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	2b00      	cmp	r3, #0
 800355e:	d032      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2205      	movs	r2, #5
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	d307      	bcc.n	80035a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f2      	bne.n	8003584 <HAL_DMA_IRQHandler+0x2cc>
 800359e:	e000      	b.n	80035a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035c4:	bf00      	nop
    }
  }
}
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035da:	b2db      	uxtb	r3, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800361c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d108      	bne.n	8003640 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800363e:	e007      	b.n	8003650 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3b10      	subs	r3, #16
 800366c:	4a13      	ldr	r2, [pc, #76]	@ (80036bc <DMA_CalcBaseAndBitshift+0x60>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003676:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <DMA_CalcBaseAndBitshift+0x64>)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d908      	bls.n	800369c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003692:	4013      	ands	r3, r2
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	@ 0x58
 800369a:	e006      	b.n	80036aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b08      	ldr	r3, [pc, #32]	@ (80036c4 <DMA_CalcBaseAndBitshift+0x68>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	aaaaaaab 	.word	0xaaaaaaab
 80036c0:	08025328 	.word	0x08025328
 80036c4:	fffffc00 	.word	0xfffffc00

080036c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11f      	bne.n	8003722 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d856      	bhi.n	8003796 <DMA_CheckFifoParam+0xce>
 80036e8:	a201      	add	r2, pc, #4	@ (adr r2, 80036f0 <DMA_CheckFifoParam+0x28>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003701 	.word	0x08003701
 80036f4:	08003713 	.word	0x08003713
 80036f8:	08003701 	.word	0x08003701
 80036fc:	08003797 	.word	0x08003797
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d046      	beq.n	800379a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e043      	b.n	800379a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003716:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800371a:	d140      	bne.n	800379e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e03d      	b.n	800379e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372a:	d121      	bne.n	8003770 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d837      	bhi.n	80037a2 <DMA_CheckFifoParam+0xda>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <DMA_CheckFifoParam+0x70>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003749 	.word	0x08003749
 800373c:	0800374f 	.word	0x0800374f
 8003740:	08003749 	.word	0x08003749
 8003744:	08003761 	.word	0x08003761
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      break;
 800374c:	e030      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d025      	beq.n	80037a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375e:	e022      	b.n	80037a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003768:	d11f      	bne.n	80037aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800376e:	e01c      	b.n	80037aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d903      	bls.n	800377e <DMA_CheckFifoParam+0xb6>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d003      	beq.n	8003784 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800377c:	e018      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      break;
 8003782:	e015      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e00b      	b.n	80037ae <DMA_CheckFifoParam+0xe6>
      break;
 8003796:	bf00      	nop
 8003798:	e00a      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e008      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e006      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e004      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
    }
  } 
  
  return status; 
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e086      	b.n	80038e0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f008 fca5 	bl	800c134 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	4b3f      	ldr	r3, [pc, #252]	@ (80038e8 <HAL_ETH_Init+0x128>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4a3e      	ldr	r2, [pc, #248]	@ (80038e8 <HAL_ETH_Init+0x128>)
 80037f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f6:	4b3c      	ldr	r3, [pc, #240]	@ (80038e8 <HAL_ETH_Init+0x128>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003802:	4b3a      	ldr	r3, [pc, #232]	@ (80038ec <HAL_ETH_Init+0x12c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a39      	ldr	r2, [pc, #228]	@ (80038ec <HAL_ETH_Init+0x12c>)
 8003808:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800380c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800380e:	4b37      	ldr	r3, [pc, #220]	@ (80038ec <HAL_ETH_Init+0x12c>)
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4935      	ldr	r1, [pc, #212]	@ (80038ec <HAL_ETH_Init+0x12c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800381c:	4b33      	ldr	r3, [pc, #204]	@ (80038ec <HAL_ETH_Init+0x12c>)
 800381e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003836:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003838:	f7fe fdea 	bl	8002410 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800383e:	e011      	b.n	8003864 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003840:	f7fe fde6 	bl	8002410 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800384e:	d909      	bls.n	8003864 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2204      	movs	r2, #4
 8003854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	22e0      	movs	r2, #224	@ 0xe0
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e03d      	b.n	80038e0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e4      	bne.n	8003840 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 ff5c 	bl	8004734 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f001 f807 	bl	8004890 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f001 f85d 	bl	8004942 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	461a      	mov	r2, r3
 800388e:	2100      	movs	r1, #0
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 ffc5 	bl	8004820 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80038a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <HAL_ETH_Init+0x130>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80038ca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2210      	movs	r2, #16
 80038da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40013800 	.word	0x40013800
 80038f0:	00020060 	.word	0x00020060

080038f4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003902:	2b10      	cmp	r3, #16
 8003904:	d15f      	bne.n	80039c6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9f6 	bl	8003d0c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003928:	2001      	movs	r0, #1
 800392a:	f7fe fd7d 	bl	8002428 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003948:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800394c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003964:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fd80 	bl	800446c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003984:	2001      	movs	r0, #1
 8003986:	f7fe fd4f 	bl	8002428 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0204 	orr.w	r2, r2, #4
 80039a0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039aa:	69d9      	ldr	r1, [r3, #28]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b07      	ldr	r3, [pc, #28]	@ (80039d0 <HAL_ETH_Start_IT+0xdc>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039b8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2240      	movs	r2, #64	@ 0x40
 80039be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	0001a0c1 	.word	0x0001a0c1

080039d4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d16e      	bne.n	8003ac4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b34      	ldr	r3, [pc, #208]	@ (8003ad0 <HAL_ETH_Stop_IT+0xfc>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a04:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a1c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	f023 0302 	bic.w	r3, r3, #2
 8003a30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a34:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0204 	bic.w	r2, r2, #4
 8003a44:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f7fe fcea 	bl	8002428 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fd05 	bl	800446c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0208 	bic.w	r2, r2, #8
 8003a70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f7fe fcd4 	bl	8002428 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	e00e      	b.n	8003aac <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	3212      	adds	r2, #18
 8003a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a98:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d9ed      	bls.n	8003a8e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2210      	movs	r2, #16
 8003abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	fffe5f3e 	.word	0xfffe5f3e

08003ad4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e045      	b.n	8003b84 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003afe:	2b40      	cmp	r3, #64	@ 0x40
 8003b00:	d13f      	bne.n	8003b82 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	6839      	ldr	r1, [r7, #0]
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 ff86 	bl	8004a20 <ETH_Prepare_Tx_Descriptors>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f043 0202 	orr.w	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e02a      	b.n	8003b84 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b2e:	f3bf 8f4f 	dsb	sy
}
 8003b32:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d904      	bls.n	8003b50 <HAL_ETH_Transmit_IT+0x7c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	1f1a      	subs	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0a4      	b.n	8003d02 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bbe:	2b40      	cmp	r3, #64	@ 0x40
 8003bc0:	d001      	beq.n	8003bc6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e09d      	b.n	8003d02 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	3212      	adds	r2, #18
 8003bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bdc:	f1c3 0304 	rsb	r3, r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003be2:	e066      	b.n	8003cb2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <HAL_ETH_ReadData+0x88>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d03c      	beq.n	8003c8e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c36:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f008 fc35 	bl	800c4dc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	441a      	add	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d902      	bls.n	8003ca0 <HAL_ETH_ReadData+0x114>
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3b04      	subs	r3, #4
 8003c9e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	3212      	adds	r2, #18
 8003ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003caa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	db06      	blt.n	8003cc8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d202      	bcs.n	8003cc8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d08d      	beq.n	8003be4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	441a      	add	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f815 	bl	8003d0c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d20:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	3212      	adds	r2, #18
 8003d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d32:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003d34:	e042      	b.n	8003dbc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d112      	bne.n	8003d64 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	4618      	mov	r0, r3
 8003d44:	f008 fb9a 	bl	800c47c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	74fb      	strb	r3, [r7, #19]
 8003d52:	e007      	b.n	8003d64 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	461a      	mov	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d028      	beq.n	8003dbc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	4b26      	ldr	r3, [pc, #152]	@ (8003e10 <ETH_UpdateDescriptor+0x104>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	6053      	str	r3, [r2, #4]
 8003d7e:	e005      	b.n	8003d8c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d902      	bls.n	8003daa <ETH_UpdateDescriptor+0x9e>
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3b04      	subs	r3, #4
 8003da8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	3212      	adds	r2, #18
 8003db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db4:	617b      	str	r3, [r7, #20]
      desccount--;
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <ETH_UpdateDescriptor+0xbc>
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1b6      	bne.n	8003d36 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d01a      	beq.n	8003e08 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003ddc:	f3bf 8f5f 	dmb	sy
}
 8003de0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	18ca      	adds	r2, r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	80004000 	.word	0x80004000

08003e14 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3318      	adds	r3, #24
 8003e20:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003e32:	e047      	b.n	8003ec4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	3304      	adds	r3, #4
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	3301      	adds	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d902      	bls.n	8003e60 <HAL_ETH_ReleaseTxPacket+0x4c>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3b04      	subs	r3, #4
 8003e5e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003e64:	7bbb      	ldrb	r3, [r7, #14]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02c      	beq.n	8003ec4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68d9      	ldr	r1, [r3, #12]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	db1f      	blt.n	8003ec0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	3304      	adds	r3, #4
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f008 fb67 	bl	800c560 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	3304      	adds	r3, #4
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d902      	bls.n	8003eb2 <HAL_ETH_ReleaseTxPacket+0x9e>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	3b04      	subs	r3, #4
 8003eb0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ebe:	e001      	b.n	8003ec4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_ETH_ReleaseTxPacket+0xbc>
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1b1      	bne.n	8003e34 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eea:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003f04:	4b4b      	ldr	r3, [pc, #300]	@ (8004034 <HAL_ETH_IRQHandler+0x158>)
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <HAL_ETH_IRQHandler+0x56>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b43      	ldr	r3, [pc, #268]	@ (8004038 <HAL_ETH_IRQHandler+0x15c>)
 8003f2a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f007 fe41 	bl	800bbb4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00f      	beq.n	8003f5c <HAL_ETH_IRQHandler+0x80>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003f54:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f007 fe3c 	bl	800bbd4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d042      	beq.n	8003fec <HAL_ETH_IRQHandler+0x110>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d03d      	beq.n	8003fec <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f76:	f043 0208 	orr.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01a      	beq.n	8003fc0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	4b29      	ldr	r3, [pc, #164]	@ (800403c <HAL_ETH_IRQHandler+0x160>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003fb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fb4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	22e0      	movs	r2, #224	@ 0xe0
 8003fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003fbe:	e012      	b.n	8003fe6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fce:	4013      	ands	r3, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003fe4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f007 fe04 	bl	800bbf4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00e      	beq.n	8004014 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f81a 	bl	8004040 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800401e:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HAL_ETH_IRQHandler+0x158>)
 8004020:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004024:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f814 	bl	8004054 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40013c00 	.word	0x40013c00
 8004038:	00010040 	.word	0x00010040
 800403c:	007e2000 	.word	0x007e2000

08004040 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 031c 	and.w	r3, r3, #28
 8004084:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	02db      	lsls	r3, r3, #11
 800408a:	b29b      	uxth	r3, r3
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0302 	bic.w	r3, r3, #2
 80040a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80040b8:	f7fe f9aa 	bl	8002410 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040be:	e00d      	b.n	80040dc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80040c0:	f7fe f9a6 	bl	8002410 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ce:	d301      	bcc.n	80040d4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e010      	b.n	80040f6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ec      	bne.n	80040c0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f003 031c 	and.w	r3, r3, #28
 800411a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	02db      	lsls	r3, r3, #11
 8004120:	b29b      	uxth	r3, r3
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	019b      	lsls	r3, r3, #6
 800412c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004158:	f7fe f95a 	bl	8002410 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800415e:	e00d      	b.n	800417c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004160:	f7fe f956 	bl	8002410 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416e:	d301      	bcc.n	8004174 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e009      	b.n	8004188 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ec      	bne.n	8004160 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0e6      	b.n	8004372 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	b29a      	uxth	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf14      	ite	ne
 8004362:	2301      	movne	r3, #1
 8004364:	2300      	moveq	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e00b      	b.n	80043aa <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004398:	2b10      	cmp	r3, #16
 800439a:	d105      	bne.n	80043a8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f88a 	bl	80044b8 <ETH_SetMACConfig>

    return HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e000      	b.n	80043aa <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
  }
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 031c 	bic.w	r3, r3, #28
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043cc:	f003 fd04 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 80043d0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <HAL_ETH_SetMDIOClockRange+0x74>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d804      	bhi.n	80043e4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f043 0308 	orr.w	r3, r3, #8
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e019      	b.n	8004418 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a11      	ldr	r2, [pc, #68]	@ (800442c <HAL_ETH_SetMDIOClockRange+0x78>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d204      	bcs.n	80043f6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f043 030c 	orr.w	r3, r3, #12
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e010      	b.n	8004418 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d90c      	bls.n	8004418 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a0c      	ldr	r2, [pc, #48]	@ (8004434 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d804      	bhi.n	8004410 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f043 0304 	orr.w	r3, r3, #4
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e003      	b.n	8004418 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f043 0310 	orr.w	r3, r3, #16
 8004416:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	611a      	str	r2, [r3, #16]
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	02160ebf 	.word	0x02160ebf
 800442c:	03938700 	.word	0x03938700
 8004430:	05f5e0ff 	.word	0x05f5e0ff
 8004434:	08f0d17f 	.word	0x08f0d17f

08004438 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800448a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800448e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800449c:	2001      	movs	r0, #1
 800449e:	f7fd ffc3 	bl	8002428 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044ac:	6193      	str	r3, [r2, #24]
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4b53      	ldr	r3, [pc, #332]	@ (800461c <ETH_SetMACConfig+0x164>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	7b9b      	ldrb	r3, [r3, #14]
 80044d6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	7c12      	ldrb	r2, [r2, #16]
 80044dc:	2a00      	cmp	r2, #0
 80044de:	d102      	bne.n	80044e6 <ETH_SetMACConfig+0x2e>
 80044e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044e4:	e000      	b.n	80044e8 <ETH_SetMACConfig+0x30>
 80044e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80044e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	7c52      	ldrb	r2, [r2, #17]
 80044ee:	2a00      	cmp	r2, #0
 80044f0:	d102      	bne.n	80044f8 <ETH_SetMACConfig+0x40>
 80044f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80044f6:	e000      	b.n	80044fa <ETH_SetMACConfig+0x42>
 80044f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004500:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	7fdb      	ldrb	r3, [r3, #31]
 8004506:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004508:	431a      	orrs	r2, r3
                        macconf->Speed |
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800450e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	7f92      	ldrb	r2, [r2, #30]
 8004514:	2a00      	cmp	r2, #0
 8004516:	d102      	bne.n	800451e <ETH_SetMACConfig+0x66>
 8004518:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800451c:	e000      	b.n	8004520 <ETH_SetMACConfig+0x68>
 800451e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004520:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	7f1b      	ldrb	r3, [r3, #28]
 8004526:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004528:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800452e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	791b      	ldrb	r3, [r3, #4]
 8004534:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004536:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800453e:	2a00      	cmp	r2, #0
 8004540:	d102      	bne.n	8004548 <ETH_SetMACConfig+0x90>
 8004542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004546:	e000      	b.n	800454a <ETH_SetMACConfig+0x92>
 8004548:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800454a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	7bdb      	ldrb	r3, [r3, #15]
 8004550:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004552:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004558:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004560:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004562:	4313      	orrs	r3, r2
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800457a:	2001      	movs	r0, #1
 800457c:	f7fd ff54 	bl	8002428 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004596:	4013      	ands	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80045a6:	2a00      	cmp	r2, #0
 80045a8:	d101      	bne.n	80045ae <ETH_SetMACConfig+0xf6>
 80045aa:	2280      	movs	r2, #128	@ 0x80
 80045ac:	e000      	b.n	80045b0 <ETH_SetMACConfig+0xf8>
 80045ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80045b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80045be:	2a01      	cmp	r2, #1
 80045c0:	d101      	bne.n	80045c6 <ETH_SetMACConfig+0x10e>
 80045c2:	2208      	movs	r2, #8
 80045c4:	e000      	b.n	80045c8 <ETH_SetMACConfig+0x110>
 80045c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80045c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80045d0:	2a01      	cmp	r2, #1
 80045d2:	d101      	bne.n	80045d8 <ETH_SetMACConfig+0x120>
 80045d4:	2204      	movs	r2, #4
 80045d6:	e000      	b.n	80045da <ETH_SetMACConfig+0x122>
 80045d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80045da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80045e2:	2a01      	cmp	r2, #1
 80045e4:	d101      	bne.n	80045ea <ETH_SetMACConfig+0x132>
 80045e6:	2202      	movs	r2, #2
 80045e8:	e000      	b.n	80045ec <ETH_SetMACConfig+0x134>
 80045ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045ec:	4313      	orrs	r3, r2
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004604:	2001      	movs	r0, #1
 8004606:	f7fd ff0f 	bl	8002428 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	619a      	str	r2, [r3, #24]
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	fd20810f 	.word	0xfd20810f

08004620 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <ETH_SetDMAConfig+0x110>)
 800463a:	4013      	ands	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	7b1b      	ldrb	r3, [r3, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d102      	bne.n	800464c <ETH_SetDMAConfig+0x2c>
 8004646:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800464a:	e000      	b.n	800464e <ETH_SetDMAConfig+0x2e>
 800464c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	7b5b      	ldrb	r3, [r3, #13]
 8004652:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004654:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	7f52      	ldrb	r2, [r2, #29]
 800465a:	2a00      	cmp	r2, #0
 800465c:	d102      	bne.n	8004664 <ETH_SetDMAConfig+0x44>
 800465e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004662:	e000      	b.n	8004666 <ETH_SetDMAConfig+0x46>
 8004664:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004666:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	7b9b      	ldrb	r3, [r3, #14]
 800466c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800466e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004674:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	7f1b      	ldrb	r3, [r3, #28]
 800467a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800467c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	7f9b      	ldrb	r3, [r3, #30]
 8004682:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004684:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800468a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004692:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004694:	4313      	orrs	r3, r2
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a4:	461a      	mov	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fd feb6 	bl	8002428 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c4:	461a      	mov	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	791b      	ldrb	r3, [r3, #4]
 80046ce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046d4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80046da:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80046e0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046e8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80046ea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80046f2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80046f8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004702:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004706:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004714:	2001      	movs	r0, #1
 8004716:	f7fd fe87 	bl	8002428 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004722:	461a      	mov	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	f8de3f23 	.word	0xf8de3f23

08004734 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b0a6      	sub	sp, #152	@ 0x98
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004748:	2300      	movs	r3, #0
 800474a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004770:	2300      	movs	r3, #0
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004776:	2300      	movs	r3, #0
 8004778:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004780:	2300      	movs	r3, #0
 8004782:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800478a:	2300      	movs	r3, #0
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004790:	2300      	movs	r3, #0
 8004792:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004796:	2300      	movs	r3, #0
 8004798:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800479c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80047a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fe7f 	bl	80044b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80047be:	2301      	movs	r3, #1
 80047c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80047dc:	2300      	movs	r3, #0
 80047de:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80047f4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047fa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004802:	2300      	movs	r3, #0
 8004804:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800480a:	f107 0308 	add.w	r3, r7, #8
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ff05 	bl	8004620 <ETH_SetDMAConfig>
}
 8004816:	bf00      	nop
 8004818:	3798      	adds	r7, #152	@ 0x98
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3305      	adds	r3, #5
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	3204      	adds	r2, #4
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <ETH_MACAddressConfig+0x68>)
 8004842:	4413      	add	r3, r2
 8004844:	461a      	mov	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3303      	adds	r3, #3
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	061a      	lsls	r2, r3, #24
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3302      	adds	r3, #2
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3301      	adds	r3, #1
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	4313      	orrs	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <ETH_MACAddressConfig+0x6c>)
 8004872:	4413      	add	r3, r2
 8004874:	461a      	mov	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40028040 	.word	0x40028040
 800488c:	40028044 	.word	0x40028044

08004890 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e03e      	b.n	800491c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68d9      	ldr	r1, [r3, #12]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	440b      	add	r3, r1
 80048ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2200      	movs	r2, #0
 80048c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	3206      	adds	r2, #6
 80048d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d80c      	bhi.n	8004900 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68d9      	ldr	r1, [r3, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	440b      	add	r3, r1
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	e004      	b.n	800490a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3301      	adds	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d9bd      	bls.n	800489e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004934:	611a      	str	r2, [r3, #16]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e048      	b.n	80049e2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6919      	ldr	r1, [r3, #16]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2200      	movs	r2, #0
 8004984:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800498c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	3212      	adds	r2, #18
 80049ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d80c      	bhi.n	80049d2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6919      	ldr	r1, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	440b      	add	r3, r1
 80049ca:	461a      	mov	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	e004      	b.n	80049dc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d9b3      	bls.n	8004950 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a12:	60da      	str	r2, [r3, #12]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b091      	sub	sp, #68	@ 0x44
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3318      	adds	r3, #24
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a62:	d007      	beq.n	8004a74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a68:	3304      	adds	r3, #4
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004a74:	2302      	movs	r3, #2
 8004a76:	e111      	b.n	8004c9c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	4b86      	ldr	r3, [pc, #536]	@ (8004ca8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a92:	6852      	ldr	r2, [r2, #4]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004afa:	e082      	b.n	8004c02 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d006      	beq.n	8004b1c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e005      	b.n	8004b28 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b26:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d902      	bls.n	8004b3a <ETH_Prepare_Tx_Descriptors+0x11a>
 8004b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b36:	3b04      	subs	r3, #4
 8004b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b42:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b50:	d007      	beq.n	8004b62 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b56:	3304      	adds	r3, #4
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d029      	beq.n	8004bb6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b74:	e019      	b.n	8004baa <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004b76:	f3bf 8f5f 	dmb	sy
}
 8004b7a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d902      	bls.n	8004b9a <ETH_Prepare_Tx_Descriptors+0x17a>
 8004b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b96:	3b04      	subs	r3, #4
 8004b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d3e1      	bcc.n	8004b76 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e072      	b.n	8004c9c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004be2:	6852      	ldr	r2, [r2, #4]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	3301      	adds	r3, #1
 8004bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004bf0:	f3bf 8f5f 	dmb	sy
}
 8004bf4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f47f af78 	bne.w	8004afc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d006      	beq.n	8004c20 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e005      	b.n	8004c2c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	6a3a      	ldr	r2, [r7, #32]
 8004c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c40:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004c42:	f3bf 8f5f 	dmb	sy
}
 8004c46:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c68:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6e:	613b      	str	r3, [r7, #16]
  return(result);
 8004c70:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	2301      	movs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	4413      	add	r3, r2
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f383 8810 	msr	PRIMASK, r3
}
 8004c98:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3744      	adds	r7, #68	@ 0x44
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	ffffe000 	.word	0xffffe000

08004cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b089      	sub	sp, #36	@ 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e175      	b.n	8004fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ccc:	2201      	movs	r2, #1
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	f040 8164 	bne.w	8004fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d005      	beq.n	8004d02 <HAL_GPIO_Init+0x56>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d130      	bne.n	8004d64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d38:	2201      	movs	r2, #1
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 0201 	and.w	r2, r3, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d017      	beq.n	8004da0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d123      	bne.n	8004df4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	08da      	lsrs	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3208      	adds	r2, #8
 8004db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	08da      	lsrs	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3208      	adds	r2, #8
 8004dee:	69b9      	ldr	r1, [r7, #24]
 8004df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	2203      	movs	r2, #3
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 0203 	and.w	r2, r3, #3
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80be 	beq.w	8004fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e36:	4b66      	ldr	r3, [pc, #408]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	4a65      	ldr	r2, [pc, #404]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e42:	4b63      	ldr	r3, [pc, #396]	@ (8004fd0 <HAL_GPIO_Init+0x324>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e4e:	4a61      	ldr	r2, [pc, #388]	@ (8004fd4 <HAL_GPIO_Init+0x328>)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a58      	ldr	r2, [pc, #352]	@ (8004fd8 <HAL_GPIO_Init+0x32c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d037      	beq.n	8004eea <HAL_GPIO_Init+0x23e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a57      	ldr	r2, [pc, #348]	@ (8004fdc <HAL_GPIO_Init+0x330>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d031      	beq.n	8004ee6 <HAL_GPIO_Init+0x23a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a56      	ldr	r2, [pc, #344]	@ (8004fe0 <HAL_GPIO_Init+0x334>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d02b      	beq.n	8004ee2 <HAL_GPIO_Init+0x236>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a55      	ldr	r2, [pc, #340]	@ (8004fe4 <HAL_GPIO_Init+0x338>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d025      	beq.n	8004ede <HAL_GPIO_Init+0x232>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a54      	ldr	r2, [pc, #336]	@ (8004fe8 <HAL_GPIO_Init+0x33c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <HAL_GPIO_Init+0x22e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a53      	ldr	r2, [pc, #332]	@ (8004fec <HAL_GPIO_Init+0x340>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d019      	beq.n	8004ed6 <HAL_GPIO_Init+0x22a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	@ (8004ff0 <HAL_GPIO_Init+0x344>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_GPIO_Init+0x226>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a51      	ldr	r2, [pc, #324]	@ (8004ff4 <HAL_GPIO_Init+0x348>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00d      	beq.n	8004ece <HAL_GPIO_Init+0x222>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a50      	ldr	r2, [pc, #320]	@ (8004ff8 <HAL_GPIO_Init+0x34c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_GPIO_Init+0x21e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8004ffc <HAL_GPIO_Init+0x350>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_GPIO_Init+0x21a>
 8004ec2:	2309      	movs	r3, #9
 8004ec4:	e012      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	e010      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	e00e      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004ece:	2307      	movs	r3, #7
 8004ed0:	e00c      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004ed2:	2306      	movs	r3, #6
 8004ed4:	e00a      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	e008      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004eda:	2304      	movs	r3, #4
 8004edc:	e006      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e004      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e002      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_GPIO_Init+0x240>
 8004eea:	2300      	movs	r3, #0
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	f002 0203 	and.w	r2, r2, #3
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	4093      	lsls	r3, r2
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004efc:	4935      	ldr	r1, [pc, #212]	@ (8004fd4 <HAL_GPIO_Init+0x328>)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	3302      	adds	r3, #2
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f2e:	4a34      	ldr	r2, [pc, #208]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f34:	4b32      	ldr	r3, [pc, #200]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f58:	4a29      	ldr	r2, [pc, #164]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f5e:	4b28      	ldr	r3, [pc, #160]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f82:	4a1f      	ldr	r2, [pc, #124]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f88:	4b1d      	ldr	r3, [pc, #116]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fac:	4a14      	ldr	r2, [pc, #80]	@ (8005000 <HAL_GPIO_Init+0x354>)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b0f      	cmp	r3, #15
 8004fbc:	f67f ae86 	bls.w	8004ccc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	3724      	adds	r7, #36	@ 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40020000 	.word	0x40020000
 8004fdc:	40020400 	.word	0x40020400
 8004fe0:	40020800 	.word	0x40020800
 8004fe4:	40020c00 	.word	0x40020c00
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40021400 	.word	0x40021400
 8004ff0:	40021800 	.word	0x40021800
 8004ff4:	40021c00 	.word	0x40021c00
 8004ff8:	40022000 	.word	0x40022000
 8004ffc:	40022400 	.word	0x40022400
 8005000:	40013c00 	.word	0x40013c00

08005004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e08b      	b.n	800512e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fb fed8 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	@ 0x24
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005054:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005064:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	e006      	b.n	800508c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800508a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d108      	bne.n	80050a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050a2:	605a      	str	r2, [r3, #4]
 80050a4:	e007      	b.n	80050b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005138 <HAL_I2C_Init+0x134>)
 80050c2:	430b      	orrs	r3, r1
 80050c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69d9      	ldr	r1, [r3, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	02008000 	.word	0x02008000

0800513c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	@ 0x28
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	461a      	mov	r2, r3
 8005148:	460b      	mov	r3, r1
 800514a:	817b      	strh	r3, [r7, #10]
 800514c:	4613      	mov	r3, r2
 800514e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b20      	cmp	r3, #32
 800515e:	f040 80ef 	bne.w	8005340 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800516c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
 8005174:	e0e5      	b.n	8005342 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005180:	2302      	movs	r3, #2
 8005182:	e0de      	b.n	8005342 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2221      	movs	r2, #33	@ 0x21
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2210      	movs	r2, #16
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	893a      	ldrh	r2, [r7, #8]
 80051ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a66      	ldr	r2, [pc, #408]	@ (800534c <HAL_I2C_Master_Transmit_DMA+0x210>)
 80051b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a66      	ldr	r2, [pc, #408]	@ (8005350 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80051b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2bff      	cmp	r3, #255	@ 0xff
 80051c2:	d906      	bls.n	80051d2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	22ff      	movs	r2, #255	@ 0xff
 80051c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80051ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	e007      	b.n	80051e2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051e0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01a      	beq.n	8005220 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005204:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d074      	beq.n	8005312 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d022      	beq.n	8005276 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	4a47      	ldr	r2, [pc, #284]	@ (8005354 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005236:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	4a46      	ldr	r2, [pc, #280]	@ (8005358 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800523e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	2200      	movs	r2, #0
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	2200      	movs	r2, #0
 800524e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005260:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005266:	f7fd ff35 	bl	80030d4 <HAL_DMA_Start_IT>
 800526a:	4603      	mov	r3, r0
 800526c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d13a      	bne.n	80052ea <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005274:	e013      	b.n	800529e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e051      	b.n	8005342 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	3301      	adds	r3, #1
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	8979      	ldrh	r1, [r7, #10]
 80052aa:	4b2c      	ldr	r3, [pc, #176]	@ (800535c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f001 ff3f 	bl	8007134 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80052d0:	2110      	movs	r1, #16
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f001 ff60 	bl	8007198 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e028      	b.n	800533c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fe:	f043 0210 	orr.w	r2, r3, #16
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e017      	b.n	8005342 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a12      	ldr	r2, [pc, #72]	@ (8005360 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005316:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	b2da      	uxtb	r2, r3
 800531c:	8979      	ldrh	r1, [r7, #10]
 800531e:	4b0f      	ldr	r3, [pc, #60]	@ (800535c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f001 ff04 	bl	8007134 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005334:	2101      	movs	r1, #1
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f001 ff2e 	bl	8007198 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	ffff0000 	.word	0xffff0000
 8005350:	08005e8b 	.word	0x08005e8b
 8005354:	08006eb7 	.word	0x08006eb7
 8005358:	08007085 	.word	0x08007085
 800535c:	80002000 	.word	0x80002000
 8005360:	080059ff 	.word	0x080059ff

08005364 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	461a      	mov	r2, r3
 8005370:	460b      	mov	r3, r1
 8005372:	817b      	strh	r3, [r7, #10]
 8005374:	4613      	mov	r3, r2
 8005376:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b20      	cmp	r3, #32
 8005382:	f040 80cd 	bne.w	8005520 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005394:	d101      	bne.n	800539a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	e0c3      	b.n	8005522 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_I2C_Master_Receive_DMA+0x44>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0bc      	b.n	8005522 <HAL_I2C_Master_Receive_DMA+0x1be>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2222      	movs	r2, #34	@ 0x22
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2210      	movs	r2, #16
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	893a      	ldrh	r2, [r7, #8]
 80053d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4a55      	ldr	r2, [pc, #340]	@ (800552c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80053d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a55      	ldr	r2, [pc, #340]	@ (8005530 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80053dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2bff      	cmp	r3, #255	@ 0xff
 80053e6:	d906      	bls.n	80053f6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80053ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e007      	b.n	8005406 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005404:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800540a:	2b00      	cmp	r3, #0
 800540c:	d070      	beq.n	80054f0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d020      	beq.n	8005458 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	4a46      	ldr	r2, [pc, #280]	@ (8005534 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800541c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	4a45      	ldr	r2, [pc, #276]	@ (8005538 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005424:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005432:	2200      	movs	r2, #0
 8005434:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3324      	adds	r3, #36	@ 0x24
 8005440:	4619      	mov	r1, r3
 8005442:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005448:	f7fd fe44 	bl	80030d4 <HAL_DMA_Start_IT>
 800544c:	4603      	mov	r3, r0
 800544e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d138      	bne.n	80054c8 <HAL_I2C_Master_Receive_DMA+0x164>
 8005456:	e013      	b.n	8005480 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e050      	b.n	8005522 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005484:	b2da      	uxtb	r2, r3
 8005486:	8979      	ldrh	r1, [r7, #10]
 8005488:	4b2c      	ldr	r3, [pc, #176]	@ (800553c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f001 fe50 	bl	8007134 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80054ae:	2110      	movs	r1, #16
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f001 fe71 	bl	8007198 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e029      	b.n	800551c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e018      	b.n	8005522 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a13      	ldr	r2, [pc, #76]	@ (8005540 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	8979      	ldrh	r1, [r7, #10]
 80054fe:	4b0f      	ldr	r3, [pc, #60]	@ (800553c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 fe14 	bl	8007134 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005514:	2102      	movs	r1, #2
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f001 fe3e 	bl	8007198 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	ffff0000 	.word	0xffff0000
 8005530:	08005e8b 	.word	0x08005e8b
 8005534:	08006f8d 	.word	0x08006f8d
 8005538:	08007085 	.word	0x08007085
 800553c:	80002400 	.word	0x80002400
 8005540:	080059ff 	.word	0x080059ff

08005544 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b20      	cmp	r3, #32
 800555c:	f040 80d1 	bne.w	8005702 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005572:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0c5      	b.n	8005704 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005582:	2302      	movs	r3, #2
 8005584:	e0be      	b.n	8005704 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2221      	movs	r2, #33	@ 0x21
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a53      	ldr	r2, [pc, #332]	@ (800570c <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80055be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a53      	ldr	r2, [pc, #332]	@ (8005710 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80055c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055ce:	d117      	bne.n	8005600 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d068      	beq.n	80056dc <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560e:	2b00      	cmp	r3, #0
 8005610:	d022      	beq.n	8005658 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	4a3f      	ldr	r2, [pc, #252]	@ (8005714 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005618:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561e:	4a3e      	ldr	r2, [pc, #248]	@ (8005718 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005620:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	2200      	movs	r2, #0
 8005628:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	2200      	movs	r2, #0
 8005630:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800563a:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005642:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005648:	f7fd fd44 	bl	80030d4 <HAL_DMA_Start_IT>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d12e      	bne.n	80056b4 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005656:	e013      	b.n	8005680 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2228      	movs	r2, #40	@ 0x28
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e041      	b.n	8005704 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800568e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005698:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f001 fd7b 	bl	8007198 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e024      	b.n	80056fe <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2228      	movs	r2, #40	@ 0x28
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c8:	f043 0210 	orr.w	r2, r3, #16
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e013      	b.n	8005704 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f001 fd4d 	bl	8007198 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e000      	b.n	8005704 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005702:	2302      	movs	r3, #2
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	ffff0000 	.word	0xffff0000
 8005710:	0800632d 	.word	0x0800632d
 8005714:	08006f4d 	.word	0x08006f4d
 8005718:	08007085 	.word	0x08007085

0800571c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b20      	cmp	r3, #32
 8005734:	f040 809b 	bne.w	800586e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_I2C_Slave_Receive_DMA+0x28>
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800574a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e08f      	b.n	8005870 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_I2C_Slave_Receive_DMA+0x42>
 800575a:	2302      	movs	r3, #2
 800575c:	e088      	b.n	8005870 <HAL_I2C_Slave_Receive_DMA+0x154>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2222      	movs	r2, #34	@ 0x22
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a38      	ldr	r2, [pc, #224]	@ (8005878 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005796:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a38      	ldr	r2, [pc, #224]	@ (800587c <HAL_I2C_Slave_Receive_DMA+0x160>)
 800579c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d020      	beq.n	80057e8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057aa:	4a35      	ldr	r2, [pc, #212]	@ (8005880 <HAL_I2C_Slave_Receive_DMA+0x164>)
 80057ac:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b2:	4a34      	ldr	r2, [pc, #208]	@ (8005884 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80057b4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	2200      	movs	r2, #0
 80057bc:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	2200      	movs	r2, #0
 80057c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3324      	adds	r3, #36	@ 0x24
 80057d0:	4619      	mov	r1, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057d8:	f7fd fc7c 	bl	80030d4 <HAL_DMA_Start_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d12f      	bne.n	8005846 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80057e6:	e013      	b.n	8005810 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2228      	movs	r2, #40	@ 0x28
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e02f      	b.n	8005870 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800581e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f001 fcb3 	bl	8007198 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005840:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e014      	b.n	8005870 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2228      	movs	r2, #40	@ 0x28
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f043 0210 	orr.w	r2, r3, #16
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	ffff0000 	.word	0xffff0000
 800587c:	0800632d 	.word	0x0800632d
 8005880:	0800703f 	.word	0x0800703f
 8005884:	08007085 	.word	0x08007085

08005888 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	4798      	blx	r3
  }
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	09db      	lsrs	r3, r3, #7
 80058e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f0:	f043 0201 	orr.w	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005900:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	0a9b      	lsrs	r3, r3, #10
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d010      	beq.n	8005930 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	09db      	lsrs	r3, r3, #7
 8005912:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	f043 0208 	orr.w	r2, r3, #8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800592e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	0a5b      	lsrs	r3, r3, #9
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d010      	beq.n	800595e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	09db      	lsrs	r3, r3, #7
 8005940:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594c:	f043 0202 	orr.w	r2, r3, #2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800595c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 030b 	and.w	r3, r3, #11
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 f965 	bl	8006c40 <I2C_ITError>
  }
}
 8005976:	bf00      	nop
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	70fb      	strb	r3, [r7, #3]
 800598a:	4613      	mov	r3, r2
 800598c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b088      	sub	sp, #32
 8005a02:	af02      	add	r7, sp, #8
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <I2C_Master_ISR_IT+0x1e>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e12e      	b.n	8005c7a <I2C_Master_ISR_IT+0x27c>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00d      	beq.n	8005a58 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2210      	movs	r2, #16
 8005a42:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a48:	f043 0204 	orr.w	r2, r3, #4
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f001 fa0c 	bl	8006e6e <I2C_Flush_TXDR>
 8005a56:	e0fb      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d023      	beq.n	8005aac <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01d      	beq.n	8005aac <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f023 0304 	bic.w	r3, r3, #4
 8005a76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005aaa:	e0d1      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	099b      	lsrs	r3, r3, #6
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d12a      	bne.n	8005b0e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d024      	beq.n	8005b0e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01e      	beq.n	8005b0e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80ba 	beq.w	8005c50 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005b0c:	e0a0      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	09db      	lsrs	r3, r3, #7
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d06b      	beq.n	8005bf2 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	099b      	lsrs	r3, r3, #6
 8005b1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d065      	beq.n	8005bf2 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d04e      	beq.n	8005bce <I2C_Master_ISR_IT+0x1d0>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d14a      	bne.n	8005bce <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b44:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2bff      	cmp	r3, #255	@ 0xff
 8005b4e:	d91c      	bls.n	8005b8a <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d103      	bne.n	8005b6c <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005b6a:	e002      	b.n	8005b72 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	22ff      	movs	r2, #255	@ 0xff
 8005b70:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	8a79      	ldrh	r1, [r7, #18]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f001 fad6 	bl	8007134 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b88:	e032      	b.n	8005bf0 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b9c:	d00b      	beq.n	8005bb6 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba2:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ba8:	8a79      	ldrh	r1, [r7, #18]
 8005baa:	2000      	movs	r0, #0
 8005bac:	9000      	str	r0, [sp, #0]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f001 fac0 	bl	8007134 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb4:	e01c      	b.n	8005bf0 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	8a79      	ldrh	r1, [r7, #18]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f001 fab4 	bl	8007134 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bcc:	e010      	b.n	8005bf0 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bdc:	d003      	beq.n	8005be6 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fd09 	bl	80065f6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005be4:	e034      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005be6:	2140      	movs	r1, #64	@ 0x40
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f001 f829 	bl	8006c40 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bee:	e02f      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
 8005bf0:	e02e      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d028      	beq.n	8005c50 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	099b      	lsrs	r3, r3, #6
 8005c02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d022      	beq.n	8005c50 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d119      	bne.n	8005c48 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c22:	d015      	beq.n	8005c50 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c2c:	d108      	bne.n	8005c40 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	e007      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fcd8 	bl	80065f6 <I2C_ITMasterSeqCplt>
 8005c46:	e003      	b.n	8005c50 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c48:	2140      	movs	r1, #64	@ 0x40
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fff8 	bl	8006c40 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005c68:	6979      	ldr	r1, [r7, #20]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fd5e 	bl	800672c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <I2C_Slave_ISR_IT+0x24>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0ed      	b.n	8005e82 <I2C_Slave_ISR_IT+0x200>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005cc6:	6939      	ldr	r1, [r7, #16]
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fdf9 	bl	80068c0 <I2C_ITSlaveCplt>
 8005cce:	e0d3      	b.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	091b      	lsrs	r3, r3, #4
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d04d      	beq.n	8005d78 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d047      	beq.n	8005d78 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d128      	bne.n	8005d44 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b28      	cmp	r3, #40	@ 0x28
 8005cfc:	d108      	bne.n	8005d10 <I2C_Slave_ISR_IT+0x8e>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d04:	d104      	bne.n	8005d10 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d06:	6939      	ldr	r1, [r7, #16]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 ff43 	bl	8006b94 <I2C_ITListenCplt>
 8005d0e:	e032      	b.n	8005d76 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b29      	cmp	r3, #41	@ 0x29
 8005d1a:	d10e      	bne.n	8005d3a <I2C_Slave_ISR_IT+0xb8>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d22:	d00a      	beq.n	8005d3a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2210      	movs	r2, #16
 8005d2a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f001 f89e 	bl	8006e6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fc9c 	bl	8006670 <I2C_ITSlaveSeqCplt>
 8005d38:	e01d      	b.n	8005d76 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2210      	movs	r2, #16
 8005d40:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d42:	e096      	b.n	8005e72 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d50:	f043 0204 	orr.w	r2, r3, #4
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <I2C_Slave_ISR_IT+0xe6>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d64:	f040 8085 	bne.w	8005e72 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 ff66 	bl	8006c40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d74:	e07d      	b.n	8005e72 <I2C_Slave_ISR_IT+0x1f0>
 8005d76:	e07c      	b.n	8005e72 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	089b      	lsrs	r3, r3, #2
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d030      	beq.n	8005de6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02a      	beq.n	8005de6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d018      	beq.n	8005dcc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d14f      	bne.n	8005e76 <I2C_Slave_ISR_IT+0x1f4>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ddc:	d04b      	beq.n	8005e76 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fc46 	bl	8006670 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005de4:	e047      	b.n	8005e76 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dfe:	6939      	ldr	r1, [r7, #16]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fb74 	bl	80064ee <I2C_ITAddrCplt>
 8005e06:	e037      	b.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d031      	beq.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02b      	beq.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d018      	beq.n	8005e5c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	781a      	ldrb	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e5a:	e00d      	b.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e62:	d002      	beq.n	8005e6a <I2C_Slave_ISR_IT+0x1e8>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fc00 	bl	8006670 <I2C_ITSlaveSeqCplt>
 8005e70:	e002      	b.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005e76:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b088      	sub	sp, #32
 8005e8e:	af02      	add	r7, sp, #8
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <I2C_Master_ISR_DMA+0x1a>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e0f0      	b.n	8006086 <I2C_Master_ISR_DMA+0x1fc>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	091b      	lsrs	r3, r3, #4
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d017      	beq.n	8005ee8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	091b      	lsrs	r3, r3, #4
 8005ebc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d011      	beq.n	8005ee8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2210      	movs	r2, #16
 8005eca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed0:	f043 0204 	orr.w	r2, r3, #4
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ed8:	2120      	movs	r1, #32
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f001 f95c 	bl	8007198 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 ffc4 	bl	8006e6e <I2C_Flush_TXDR>
 8005ee6:	e0c9      	b.n	800607c <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8081 	beq.w	8005ff8 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	099b      	lsrs	r3, r3, #6
 8005efa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d07a      	beq.n	8005ff8 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f10:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d05c      	beq.n	8005fd6 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f28:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2bff      	cmp	r3, #255	@ 0xff
 8005f32:	d914      	bls.n	8005f5e <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	0c1b      	lsrs	r3, r3, #16
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d103      	bne.n	8005f50 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f4e:	e002      	b.n	8005f56 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	22ff      	movs	r2, #255	@ 0xff
 8005f54:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005f56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e010      	b.n	8005f80 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f70:	d003      	beq.n	8005f7a <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e002      	b.n	8005f80 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f7e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	8a79      	ldrh	r1, [r7, #18]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 f8d0 	bl	8007134 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b22      	cmp	r3, #34	@ 0x22
 8005fb0:	d108      	bne.n	8005fc4 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fc0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fc2:	e05b      	b.n	800607c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005fd4:	e052      	b.n	800607c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fe4:	d003      	beq.n	8005fee <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fb05 	bl	80065f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005fec:	e046      	b.n	800607c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fee:	2140      	movs	r1, #64	@ 0x40
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 fe25 	bl	8006c40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005ff6:	e041      	b.n	800607c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	099b      	lsrs	r3, r3, #6
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d029      	beq.n	8006058 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	099b      	lsrs	r3, r3, #6
 8006008:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800600c:	2b00      	cmp	r3, #0
 800600e:	d023      	beq.n	8006058 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d119      	bne.n	800604e <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006028:	d027      	beq.n	800607a <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006032:	d108      	bne.n	8006046 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006042:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006044:	e019      	b.n	800607a <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fad5 	bl	80065f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800604c:	e015      	b.n	800607a <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800604e:	2140      	movs	r1, #64	@ 0x40
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fdf5 	bl	8006c40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006056:	e010      	b.n	800607a <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fb5a 	bl	800672c <I2C_ITMasterCplt>
 8006078:	e000      	b.n	800607c <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800607a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800609c:	4b94      	ldr	r3, [pc, #592]	@ (80062f0 <I2C_Mem_ISR_DMA+0x260>)
 800609e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <I2C_Mem_ISR_DMA+0x1e>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e139      	b.n	8006322 <I2C_Mem_ISR_DMA+0x292>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d011      	beq.n	80060f2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2210      	movs	r2, #16
 80060d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060da:	f043 0204 	orr.w	r2, r3, #4
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80060e2:	2120      	movs	r1, #32
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f001 f857 	bl	8007198 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 febf 	bl	8006e6e <I2C_Flush_TXDR>
 80060f0:	e112      	b.n	8006318 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00f      	beq.n	800611e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006112:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800611a:	651a      	str	r2, [r3, #80]	@ 0x50
 800611c:	e0fc      	b.n	8006318 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	09db      	lsrs	r3, r3, #7
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d06e      	beq.n	8006208 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	099b      	lsrs	r3, r3, #6
 800612e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006132:	2b00      	cmp	r3, #0
 8006134:	d068      	beq.n	8006208 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006136:	2101      	movs	r1, #1
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f001 f8b1 	bl	80072a0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800613e:	2110      	movs	r1, #16
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 f829 	bl	8007198 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d056      	beq.n	80061fe <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	2bff      	cmp	r3, #255	@ 0xff
 8006158:	d91e      	bls.n	8006198 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	0c1b      	lsrs	r3, r3, #16
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d103      	bne.n	8006176 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006174:	e002      	b.n	800617c <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	22ff      	movs	r2, #255	@ 0xff
 800617a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006180:	b299      	uxth	r1, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006186:	b2da      	uxtb	r2, r3
 8006188:	2300      	movs	r3, #0
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 ffcf 	bl	8007134 <I2C_TransferConfig>
 8006196:	e011      	b.n	80061bc <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a6:	b299      	uxth	r1, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 ffbc 	bl	8007134 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b22      	cmp	r3, #34	@ 0x22
 80061d8:	d108      	bne.n	80061ec <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061ea:	e095      	b.n	8006318 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061fc:	e08c      	b.n	8006318 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061fe:	2140      	movs	r1, #64	@ 0x40
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fd1d 	bl	8006c40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006206:	e087      	b.n	8006318 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	099b      	lsrs	r3, r3, #6
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d071      	beq.n	80062f8 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800621c:	2b00      	cmp	r3, #0
 800621e:	d06b      	beq.n	80062f8 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006220:	2101      	movs	r1, #1
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f001 f83c 	bl	80072a0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006228:	2110      	movs	r1, #16
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 ffb4 	bl	8007198 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b22      	cmp	r3, #34	@ 0x22
 800623a:	d101      	bne.n	8006240 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 800623c:	4b2d      	ldr	r3, [pc, #180]	@ (80062f4 <I2C_Mem_ISR_DMA+0x264>)
 800623e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2bff      	cmp	r3, #255	@ 0xff
 8006248:	d91e      	bls.n	8006288 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d103      	bne.n	8006266 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006264:	e002      	b.n	800626c <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	22ff      	movs	r2, #255	@ 0xff
 800626a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006270:	b299      	uxth	r1, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006276:	b2da      	uxtb	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 ff57 	bl	8007134 <I2C_TransferConfig>
 8006286:	e011      	b.n	80062ac <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006296:	b299      	uxth	r1, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629c:	b2da      	uxtb	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 ff44 	bl	8007134 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b22      	cmp	r3, #34	@ 0x22
 80062c8:	d108      	bne.n	80062dc <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062da:	e01d      	b.n	8006318 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062ec:	e014      	b.n	8006318 <I2C_Mem_ISR_DMA+0x288>
 80062ee:	bf00      	nop
 80062f0:	80002000 	.word	0x80002000
 80062f4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fa0a 	bl	800672c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop

0800632c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <I2C_Slave_ISR_DMA+0x24>
 800634c:	2302      	movs	r3, #2
 800634e:	e0ca      	b.n	80064e6 <I2C_Slave_ISR_DMA+0x1ba>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 faa4 	bl	80068c0 <I2C_ITSlaveCplt>
 8006378:	e0b0      	b.n	80064dc <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 809a 	beq.w	80064bc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	091b      	lsrs	r3, r3, #4
 800638c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8093 	beq.w	80064bc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0b9b      	lsrs	r3, r3, #14
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	0bdb      	lsrs	r3, r3, #15
 80063a6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d07f      	beq.n	80064ae <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	0bdb      	lsrs	r3, r3, #15
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80063ce:	2301      	movs	r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00d      	beq.n	80063f6 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	0b9b      	lsrs	r3, r3, #14
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80063f2:	2301      	movs	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d128      	bne.n	800644e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b28      	cmp	r3, #40	@ 0x28
 8006406:	d108      	bne.n	800641a <I2C_Slave_ISR_DMA+0xee>
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800640e:	d104      	bne.n	800641a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fbbe 	bl	8006b94 <I2C_ITListenCplt>
 8006418:	e048      	b.n	80064ac <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b29      	cmp	r3, #41	@ 0x29
 8006424:	d10e      	bne.n	8006444 <I2C_Slave_ISR_DMA+0x118>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800642c:	d00a      	beq.n	8006444 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2210      	movs	r2, #16
 8006434:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fd19 	bl	8006e6e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f917 	bl	8006670 <I2C_ITSlaveSeqCplt>
 8006442:	e033      	b.n	80064ac <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2210      	movs	r2, #16
 800644a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800644c:	e034      	b.n	80064b8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2210      	movs	r2, #16
 8006454:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	f043 0204 	orr.w	r2, r3, #4
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006468:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <I2C_Slave_ISR_DMA+0x14c>
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006476:	d11f      	bne.n	80064b8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b21      	cmp	r3, #33	@ 0x21
 800647c:	d002      	beq.n	8006484 <I2C_Slave_ISR_DMA+0x158>
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	2b29      	cmp	r3, #41	@ 0x29
 8006482:	d103      	bne.n	800648c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2221      	movs	r2, #33	@ 0x21
 8006488:	631a      	str	r2, [r3, #48]	@ 0x30
 800648a:	e008      	b.n	800649e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	2b22      	cmp	r3, #34	@ 0x22
 8006490:	d002      	beq.n	8006498 <I2C_Slave_ISR_DMA+0x16c>
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b2a      	cmp	r3, #42	@ 0x2a
 8006496:	d102      	bne.n	800649e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2222      	movs	r2, #34	@ 0x22
 800649c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fbcb 	bl	8006c40 <I2C_ITError>
      if (treatdmanack == 1U)
 80064aa:	e005      	b.n	80064b8 <I2C_Slave_ISR_DMA+0x18c>
 80064ac:	e004      	b.n	80064b8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064b6:	e011      	b.n	80064dc <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80064b8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064ba:	e00f      	b.n	80064dc <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	08db      	lsrs	r3, r3, #3
 80064cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f809 	bl	80064ee <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3720      	adds	r7, #32
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006504:	2b28      	cmp	r3, #40	@ 0x28
 8006506:	d16a      	bne.n	80065de <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	b29b      	uxth	r3, r3
 8006522:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006526:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006534:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006542:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d138      	bne.n	80065be <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800654c:	897b      	ldrh	r3, [r7, #10]
 800654e:	09db      	lsrs	r3, r3, #7
 8006550:	b29a      	uxth	r2, r3
 8006552:	89bb      	ldrh	r3, [r7, #12]
 8006554:	4053      	eors	r3, r2
 8006556:	b29b      	uxth	r3, r3
 8006558:	f003 0306 	and.w	r3, r3, #6
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11c      	bne.n	800659a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006560:	897b      	ldrh	r3, [r7, #10]
 8006562:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006572:	2b02      	cmp	r3, #2
 8006574:	d13b      	bne.n	80065ee <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800658c:	89ba      	ldrh	r2, [r7, #12]
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff f9f3 	bl	800597e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006598:	e029      	b.n	80065ee <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800659a:	893b      	ldrh	r3, [r7, #8]
 800659c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800659e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fe7c 	bl	80072a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065b0:	89ba      	ldrh	r2, [r7, #12]
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff f9e1 	bl	800597e <HAL_I2C_AddrCallback>
}
 80065bc:	e017      	b.n	80065ee <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fe6c 	bl	80072a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065d0:	89ba      	ldrh	r2, [r7, #12]
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff f9d1 	bl	800597e <HAL_I2C_AddrCallback>
}
 80065dc:	e007      	b.n	80065ee <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2208      	movs	r2, #8
 80065e4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b21      	cmp	r3, #33	@ 0x21
 8006610:	d115      	bne.n	800663e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2211      	movs	r2, #17
 800661e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006626:	2101      	movs	r1, #1
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fe39 	bl	80072a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f019 f83c 	bl	801f6b4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800663c:	e014      	b.n	8006668 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2212      	movs	r2, #18
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006652:	2102      	movs	r1, #2
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fe23 	bl	80072a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f019 f83c 	bl	801f6e0 <HAL_I2C_MasterRxCpltCallback>
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	0b9b      	lsrs	r3, r3, #14
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e00d      	b.n	80066c2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	0bdb      	lsrs	r3, r3, #15
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b29      	cmp	r3, #41	@ 0x29
 80066cc:	d112      	bne.n	80066f4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2228      	movs	r2, #40	@ 0x28
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2221      	movs	r2, #33	@ 0x21
 80066da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066dc:	2101      	movs	r1, #1
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fdde 	bl	80072a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f019 f80d 	bl	801f70c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80066f2:	e017      	b.n	8006724 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80066fe:	d111      	bne.n	8006724 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2228      	movs	r2, #40	@ 0x28
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2222      	movs	r2, #34	@ 0x22
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800670e:	2102      	movs	r1, #2
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fdc5 	bl	80072a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f019 f80a 	bl	801f738 <HAL_I2C_SlaveRxCpltCallback>
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2220      	movs	r2, #32
 8006740:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b21      	cmp	r3, #33	@ 0x21
 800674c:	d107      	bne.n	800675e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800674e:	2101      	movs	r1, #1
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fda5 	bl	80072a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2211      	movs	r2, #17
 800675a:	631a      	str	r2, [r3, #48]	@ 0x30
 800675c:	e00c      	b.n	8006778 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b22      	cmp	r3, #34	@ 0x22
 8006768:	d106      	bne.n	8006778 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800676a:	2102      	movs	r1, #2
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fd97 	bl	80072a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2212      	movs	r2, #18
 8006776:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6859      	ldr	r1, [r3, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b4d      	ldr	r3, [pc, #308]	@ (80068b8 <I2C_ITMasterCplt+0x18c>)
 8006784:	400b      	ands	r3, r1
 8006786:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a4a      	ldr	r2, [pc, #296]	@ (80068bc <I2C_ITMasterCplt+0x190>)
 8006792:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2210      	movs	r2, #16
 80067a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ac:	f043 0204 	orr.w	r2, r3, #4
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b60      	cmp	r3, #96	@ 0x60
 80067be:	d10b      	bne.n	80067d8 <I2C_ITMasterCplt+0xac>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	089b      	lsrs	r3, r3, #2
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80067d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb48 	bl	8006e6e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b60      	cmp	r3, #96	@ 0x60
 80067ee:	d002      	beq.n	80067f6 <I2C_ITMasterCplt+0xca>
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d006      	beq.n	8006804 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa1f 	bl	8006c40 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006802:	e054      	b.n	80068ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b21      	cmp	r3, #33	@ 0x21
 800680e:	d124      	bne.n	800685a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b40      	cmp	r3, #64	@ 0x40
 8006828:	d10b      	bne.n	8006842 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff f8b7 	bl	80059ae <HAL_I2C_MemTxCpltCallback>
}
 8006840:	e035      	b.n	80068ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f018 ff2e 	bl	801f6b4 <HAL_I2C_MasterTxCpltCallback>
}
 8006858:	e029      	b.n	80068ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b22      	cmp	r3, #34	@ 0x22
 8006864:	d123      	bne.n	80068ae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	d10b      	bne.n	8006898 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff f896 	bl	80059c2 <HAL_I2C_MemRxCpltCallback>
}
 8006896:	e00a      	b.n	80068ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f018 ff19 	bl	801f6e0 <HAL_I2C_MasterRxCpltCallback>
}
 80068ae:	bf00      	nop
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	fe00e800 	.word	0xfe00e800
 80068bc:	ffff0000 	.word	0xffff0000

080068c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2220      	movs	r2, #32
 80068ea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068ec:	7afb      	ldrb	r3, [r7, #11]
 80068ee:	2b21      	cmp	r3, #33	@ 0x21
 80068f0:	d002      	beq.n	80068f8 <I2C_ITSlaveCplt+0x38>
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	2b29      	cmp	r3, #41	@ 0x29
 80068f6:	d108      	bne.n	800690a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80068f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fccf 	bl	80072a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2221      	movs	r2, #33	@ 0x21
 8006906:	631a      	str	r2, [r3, #48]	@ 0x30
 8006908:	e019      	b.n	800693e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	2b22      	cmp	r3, #34	@ 0x22
 800690e:	d002      	beq.n	8006916 <I2C_ITSlaveCplt+0x56>
 8006910:	7afb      	ldrb	r3, [r7, #11]
 8006912:	2b2a      	cmp	r3, #42	@ 0x2a
 8006914:	d108      	bne.n	8006928 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006916:	f248 0102 	movw	r1, #32770	@ 0x8002
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fcc0 	bl	80072a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2222      	movs	r2, #34	@ 0x22
 8006924:	631a      	str	r2, [r3, #48]	@ 0x30
 8006926:	e00a      	b.n	800693e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	2b28      	cmp	r3, #40	@ 0x28
 800692c:	d107      	bne.n	800693e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800692e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fcb4 	bl	80072a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800694c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4b8c      	ldr	r3, [pc, #560]	@ (8006b8c <I2C_ITSlaveCplt+0x2cc>)
 800695a:	400b      	ands	r3, r1
 800695c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa85 	bl	8006e6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	0b9b      	lsrs	r3, r3, #14
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d013      	beq.n	8006998 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800697e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d020      	beq.n	80069ca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	b29a      	uxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006996:	e018      	b.n	80069ca <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	0bdb      	lsrs	r3, r3, #15
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d012      	beq.n	80069ca <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d020      	beq.n	8006a18 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00c      	beq.n	8006a18 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a26:	f043 0204 	orr.w	r2, r3, #4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d04a      	beq.n	8006ad0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	091b      	lsrs	r3, r3, #4
 8006a3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d044      	beq.n	8006ad0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d128      	bne.n	8006aa2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b28      	cmp	r3, #40	@ 0x28
 8006a5a:	d108      	bne.n	8006a6e <I2C_ITSlaveCplt+0x1ae>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a62:	d104      	bne.n	8006a6e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a64:	6979      	ldr	r1, [r7, #20]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f894 	bl	8006b94 <I2C_ITListenCplt>
 8006a6c:	e030      	b.n	8006ad0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b29      	cmp	r3, #41	@ 0x29
 8006a78:	d10e      	bne.n	8006a98 <I2C_ITSlaveCplt+0x1d8>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a80:	d00a      	beq.n	8006a98 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2210      	movs	r2, #16
 8006a88:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9ef 	bl	8006e6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fded 	bl	8006670 <I2C_ITSlaveSeqCplt>
 8006a96:	e01b      	b.n	8006ad0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	61da      	str	r2, [r3, #28]
 8006aa0:	e016      	b.n	8006ad0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aae:	f043 0204 	orr.w	r2, r3, #4
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <I2C_ITSlaveCplt+0x204>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ac2:	d105      	bne.n	8006ad0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f8b8 	bl	8006c40 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d010      	beq.n	8006b08 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8a7 	bl	8006c40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b28      	cmp	r3, #40	@ 0x28
 8006afc:	d141      	bne.n	8006b82 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006afe:	6979      	ldr	r1, [r7, #20]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f847 	bl	8006b94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b06:	e03c      	b.n	8006b82 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b10:	d014      	beq.n	8006b3c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff fdac 	bl	8006670 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <I2C_ITSlaveCplt+0x2d0>)
 8006b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7fe ff30 	bl	800599a <HAL_I2C_ListenCpltCallback>
}
 8006b3a:	e022      	b.n	8006b82 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b22      	cmp	r3, #34	@ 0x22
 8006b46:	d10e      	bne.n	8006b66 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f018 fdea 	bl	801f738 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b64:	e00d      	b.n	8006b82 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f018 fdc5 	bl	801f70c <HAL_I2C_SlaveTxCpltCallback>
}
 8006b82:	bf00      	nop
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	fe00e800 	.word	0xfe00e800
 8006b90:	ffff0000 	.word	0xffff0000

08006b94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a26      	ldr	r2, [pc, #152]	@ (8006c3c <I2C_ITListenCplt+0xa8>)
 8006ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	089b      	lsrs	r3, r3, #2
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d022      	beq.n	8006c12 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d012      	beq.n	8006c12 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0a:	f043 0204 	orr.w	r2, r3, #4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c12:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fb42 	bl	80072a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2210      	movs	r2, #16
 8006c22:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fe feb4 	bl	800599a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	ffff0000 	.word	0xffff0000

08006c40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c50:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a6d      	ldr	r2, [pc, #436]	@ (8006e14 <I2C_ITError+0x1d4>)
 8006c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b28      	cmp	r3, #40	@ 0x28
 8006c76:	d005      	beq.n	8006c84 <I2C_ITError+0x44>
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b29      	cmp	r3, #41	@ 0x29
 8006c7c:	d002      	beq.n	8006c84 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c82:	d10b      	bne.n	8006c9c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c84:	2103      	movs	r1, #3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fb0a 	bl	80072a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2228      	movs	r2, #40	@ 0x28
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a60      	ldr	r2, [pc, #384]	@ (8006e18 <I2C_ITError+0x1d8>)
 8006c98:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c9a:	e030      	b.n	8006cfe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c9c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fafd 	bl	80072a0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f8e1 	bl	8006e6e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b60      	cmp	r3, #96	@ 0x60
 8006cb6:	d01f      	beq.n	8006cf8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d114      	bne.n	8006cf8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f003 0310 	and.w	r3, r3, #16
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d109      	bne.n	8006cf0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce8:	f043 0204 	orr.w	r2, r3, #4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d039      	beq.n	8006d80 <I2C_ITError+0x140>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b11      	cmp	r3, #17
 8006d10:	d002      	beq.n	8006d18 <I2C_ITError+0xd8>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b21      	cmp	r3, #33	@ 0x21
 8006d16:	d133      	bne.n	8006d80 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d26:	d107      	bne.n	8006d38 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fc fc45 	bl	80035cc <HAL_DMA_GetState>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d017      	beq.n	8006d78 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	4a33      	ldr	r2, [pc, #204]	@ (8006e1c <I2C_ITError+0x1dc>)
 8006d4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fc fa89 	bl	8003274 <HAL_DMA_Abort_IT>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d04d      	beq.n	8006e04 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d72:	4610      	mov	r0, r2
 8006d74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d76:	e045      	b.n	8006e04 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f851 	bl	8006e20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d7e:	e041      	b.n	8006e04 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d039      	beq.n	8006dfc <I2C_ITError+0x1bc>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b12      	cmp	r3, #18
 8006d8c:	d002      	beq.n	8006d94 <I2C_ITError+0x154>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b22      	cmp	r3, #34	@ 0x22
 8006d92:	d133      	bne.n	8006dfc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da2:	d107      	bne.n	8006db4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006db2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fc fc07 	bl	80035cc <HAL_DMA_GetState>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d017      	beq.n	8006df4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc8:	4a14      	ldr	r2, [pc, #80]	@ (8006e1c <I2C_ITError+0x1dc>)
 8006dca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fc fa4b 	bl	8003274 <HAL_DMA_Abort_IT>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d011      	beq.n	8006e08 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006dee:	4610      	mov	r0, r2
 8006df0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006df2:	e009      	b.n	8006e08 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f813 	bl	8006e20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dfa:	e005      	b.n	8006e08 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f80f 	bl	8006e20 <I2C_TreatErrorCallback>
  }
}
 8006e02:	e002      	b.n	8006e0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e04:	bf00      	nop
 8006e06:	e000      	b.n	8006e0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e08:	bf00      	nop
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	ffff0000 	.word	0xffff0000
 8006e18:	08005c83 	.word	0x08005c83
 8006e1c:	080070f9 	.word	0x080070f9

08006e20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b60      	cmp	r3, #96	@ 0x60
 8006e32:	d10e      	bne.n	8006e52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fe fdcd 	bl	80059ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e50:	e009      	b.n	8006e66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7fe fdb8 	bl	80059d6 <HAL_I2C_ErrorCallback>
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d103      	bne.n	8006e8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d007      	beq.n	8006eaa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0201 	orr.w	r2, r2, #1
 8006ea8:	619a      	str	r2, [r3, #24]
  }
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ed2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ede:	2120      	movs	r1, #32
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 f959 	bl	8007198 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006ee6:	e02d      	b.n	8006f44 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2bff      	cmp	r3, #255	@ 0xff
 8006efe:	d903      	bls.n	8006f08 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	22ff      	movs	r2, #255	@ 0xff
 8006f04:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f06:	e004      	b.n	8006f12 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3328      	adds	r3, #40	@ 0x28
 8006f22:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006f28:	f7fc f8d4 	bl	80030d4 <HAL_DMA_Start_IT>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f32:	2110      	movs	r1, #16
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff fe83 	bl	8006c40 <I2C_ITError>
}
 8006f3a:	e003      	b.n	8006f44 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f3c:	2140      	movs	r1, #64	@ 0x40
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f92a 	bl	8007198 <I2C_Enable_IRQ>
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f66:	d002      	beq.n	8006f6e <I2C_DMASlaveTransmitCplt+0x22>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f7c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff fb76 	bl	8006670 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f98:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fa8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006fb4:	2120      	movs	r1, #32
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f8ee 	bl	8007198 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006fbc:	e03b      	b.n	8007036 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006fc6:	441a      	add	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2bff      	cmp	r3, #255	@ 0xff
 8006fd4:	d911      	bls.n	8006ffa <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d103      	bne.n	8006ff2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ff0:	e008      	b.n	8007004 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	22ff      	movs	r2, #255	@ 0xff
 8006ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ff8:	e004      	b.n	8007004 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3324      	adds	r3, #36	@ 0x24
 800700e:	4619      	mov	r1, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007014:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800701a:	f7fc f85b 	bl	80030d4 <HAL_DMA_Start_IT>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007024:	2110      	movs	r1, #16
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff fe0a 	bl	8006c40 <I2C_ITError>
}
 800702c:	e003      	b.n	8007036 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800702e:	2140      	movs	r1, #64	@ 0x40
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f8b1 	bl	8007198 <I2C_Enable_IRQ>
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10e      	bne.n	800707c <I2C_DMASlaveReceiveCplt+0x3e>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007064:	d00a      	beq.n	800707c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007074:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fafa 	bl	8006670 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007094:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	2b00      	cmp	r3, #0
 800709c:	d007      	beq.n	80070ae <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80070aa:	2301      	movs	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80070c2:	2301      	movs	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fc fa8e 	bl	80035e8 <HAL_DMA_GetError>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d00e      	beq.n	80070f0 <I2C_DMAError+0x6c>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070e6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80070e8:	2110      	movs	r1, #16
 80070ea:	68b8      	ldr	r0, [r7, #8]
 80070ec:	f7ff fda8 	bl	8006c40 <I2C_ITError>
  }
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007104:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007112:	2200      	movs	r2, #0
 8007114:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	2200      	movs	r2, #0
 8007124:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff fe7a 	bl	8006e20 <I2C_TreatErrorCallback>
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	817b      	strh	r3, [r7, #10]
 8007142:	4613      	mov	r3, r2
 8007144:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007146:	897b      	ldrh	r3, [r7, #10]
 8007148:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800714c:	7a7b      	ldrb	r3, [r7, #9]
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007154:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	4313      	orrs	r3, r2
 800715e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007162:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	0d5b      	lsrs	r3, r3, #21
 800716e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007172:	4b08      	ldr	r3, [pc, #32]	@ (8007194 <I2C_TransferConfig+0x60>)
 8007174:	430b      	orrs	r3, r1
 8007176:	43db      	mvns	r3, r3
 8007178:	ea02 0103 	and.w	r1, r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	430a      	orrs	r2, r1
 8007184:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007186:	bf00      	nop
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	03ff63ff 	.word	0x03ff63ff

08007198 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ac:	4a39      	ldr	r2, [pc, #228]	@ (8007294 <I2C_Enable_IRQ+0xfc>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d032      	beq.n	8007218 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071b6:	4a38      	ldr	r2, [pc, #224]	@ (8007298 <I2C_Enable_IRQ+0x100>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d02d      	beq.n	8007218 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071c0:	4a36      	ldr	r2, [pc, #216]	@ (800729c <I2C_Enable_IRQ+0x104>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d028      	beq.n	8007218 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80071c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	da03      	bge.n	80071d6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80071d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071d6:	887b      	ldrh	r3, [r7, #2]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80071e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80071e8:	887b      	ldrh	r3, [r7, #2]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80071f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071fa:	887b      	ldrh	r3, [r7, #2]
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d103      	bne.n	8007208 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007206:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	2b20      	cmp	r3, #32
 800720c:	d133      	bne.n	8007276 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f043 0320 	orr.w	r3, r3, #32
 8007214:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007216:	e02e      	b.n	8007276 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007218:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800721c:	2b00      	cmp	r3, #0
 800721e:	da03      	bge.n	8007228 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007226:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007228:	887b      	ldrh	r3, [r7, #2]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007238:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800723a:	887b      	ldrh	r3, [r7, #2]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800724a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800724c:	887b      	ldrh	r3, [r7, #2]
 800724e:	2b10      	cmp	r3, #16
 8007250:	d103      	bne.n	800725a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007258:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800725a:	887b      	ldrh	r3, [r7, #2]
 800725c:	2b20      	cmp	r3, #32
 800725e:	d103      	bne.n	8007268 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007266:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007268:	887b      	ldrh	r3, [r7, #2]
 800726a:	2b40      	cmp	r3, #64	@ 0x40
 800726c:	d103      	bne.n	8007276 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007274:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6819      	ldr	r1, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	430a      	orrs	r2, r1
 8007284:	601a      	str	r2, [r3, #0]
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	08005e8b 	.word	0x08005e8b
 8007298:	0800632d 	.word	0x0800632d
 800729c:	08006091 	.word	0x08006091

080072a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80072b0:	887b      	ldrh	r3, [r7, #2]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00f      	beq.n	80072da <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80072c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072ce:	2b28      	cmp	r3, #40	@ 0x28
 80072d0:	d003      	beq.n	80072da <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80072da:	887b      	ldrh	r3, [r7, #2]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00f      	beq.n	8007304 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80072ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072f8:	2b28      	cmp	r3, #40	@ 0x28
 80072fa:	d003      	beq.n	8007304 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007302:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007304:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007308:	2b00      	cmp	r3, #0
 800730a:	da03      	bge.n	8007314 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007312:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007314:	887b      	ldrh	r3, [r7, #2]
 8007316:	2b10      	cmp	r3, #16
 8007318:	d103      	bne.n	8007322 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007320:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007322:	887b      	ldrh	r3, [r7, #2]
 8007324:	2b20      	cmp	r3, #32
 8007326:	d103      	bne.n	8007330 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f043 0320 	orr.w	r3, r3, #32
 800732e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007330:	887b      	ldrh	r3, [r7, #2]
 8007332:	2b40      	cmp	r3, #64	@ 0x40
 8007334:	d103      	bne.n	800733e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800733c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	43da      	mvns	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	400a      	ands	r2, r1
 800734e:	601a      	str	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b20      	cmp	r3, #32
 8007370:	d138      	bne.n	80073e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800737c:	2302      	movs	r3, #2
 800737e:	e032      	b.n	80073e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2224      	movs	r2, #36	@ 0x24
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6819      	ldr	r1, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b20      	cmp	r3, #32
 8007406:	d139      	bne.n	800747c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007412:	2302      	movs	r3, #2
 8007414:	e033      	b.n	800747e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2224      	movs	r2, #36	@ 0x24
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007444:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	e000      	b.n	800747e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800747c:	2302      	movs	r3, #2
  }
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007496:	4b23      	ldr	r3, [pc, #140]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x98>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	4a22      	ldr	r2, [pc, #136]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x98>)
 800749c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80074a2:	4b20      	ldr	r3, [pc, #128]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x98>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074ba:	f7fa ffa9 	bl	8002410 <HAL_GetTick>
 80074be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074c0:	e009      	b.n	80074d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074c2:	f7fa ffa5 	bl	8002410 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074d0:	d901      	bls.n	80074d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e022      	b.n	800751c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074d6:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e2:	d1ee      	bne.n	80074c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074e4:	4b10      	ldr	r3, [pc, #64]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a0f      	ldr	r2, [pc, #60]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074f0:	f7fa ff8e 	bl	8002410 <HAL_GetTick>
 80074f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074f6:	e009      	b.n	800750c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074f8:	f7fa ff8a 	bl	8002410 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007506:	d901      	bls.n	800750c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e007      	b.n	800751c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007518:	d1ee      	bne.n	80074f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40023800 	.word	0x40023800
 8007528:	40007000 	.word	0x40007000

0800752c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007534:	2300      	movs	r3, #0
 8007536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e291      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8087 	beq.w	800765e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007550:	4b96      	ldr	r3, [pc, #600]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b04      	cmp	r3, #4
 800755a:	d00c      	beq.n	8007576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800755c:	4b93      	ldr	r3, [pc, #588]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 030c 	and.w	r3, r3, #12
 8007564:	2b08      	cmp	r3, #8
 8007566:	d112      	bne.n	800758e <HAL_RCC_OscConfig+0x62>
 8007568:	4b90      	ldr	r3, [pc, #576]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007574:	d10b      	bne.n	800758e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007576:	4b8d      	ldr	r3, [pc, #564]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d06c      	beq.n	800765c <HAL_RCC_OscConfig+0x130>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d168      	bne.n	800765c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e26b      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007596:	d106      	bne.n	80075a6 <HAL_RCC_OscConfig+0x7a>
 8007598:	4b84      	ldr	r3, [pc, #528]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a83      	ldr	r2, [pc, #524]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800759e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	e02e      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <HAL_RCC_OscConfig+0x9c>
 80075ae:	4b7f      	ldr	r3, [pc, #508]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7e      	ldr	r2, [pc, #504]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	4b7c      	ldr	r3, [pc, #496]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a7b      	ldr	r2, [pc, #492]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e01d      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075d0:	d10c      	bne.n	80075ec <HAL_RCC_OscConfig+0xc0>
 80075d2:	4b76      	ldr	r3, [pc, #472]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a75      	ldr	r2, [pc, #468]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4b73      	ldr	r3, [pc, #460]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a72      	ldr	r2, [pc, #456]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e00b      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075ec:	4b6f      	ldr	r3, [pc, #444]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a6e      	ldr	r2, [pc, #440]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	4b6c      	ldr	r3, [pc, #432]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a6b      	ldr	r2, [pc, #428]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fa ff00 	bl	8002410 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007614:	f7fa fefc 	bl	8002410 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b64      	cmp	r3, #100	@ 0x64
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e21f      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	4b61      	ldr	r3, [pc, #388]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0xe8>
 8007632:	e014      	b.n	800765e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fa feec 	bl	8002410 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800763c:	f7fa fee8 	bl	8002410 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	@ 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e20b      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764e:	4b57      	ldr	r3, [pc, #348]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x110>
 800765a:	e000      	b.n	800765e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800765c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d069      	beq.n	800773e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800766a:	4b50      	ldr	r3, [pc, #320]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007676:	4b4d      	ldr	r3, [pc, #308]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 030c 	and.w	r3, r3, #12
 800767e:	2b08      	cmp	r3, #8
 8007680:	d11c      	bne.n	80076bc <HAL_RCC_OscConfig+0x190>
 8007682:	4b4a      	ldr	r3, [pc, #296]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d116      	bne.n	80076bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800768e:	4b47      	ldr	r3, [pc, #284]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <HAL_RCC_OscConfig+0x17a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d001      	beq.n	80076a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e1df      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a6:	4b41      	ldr	r3, [pc, #260]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	493d      	ldr	r1, [pc, #244]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ba:	e040      	b.n	800773e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d023      	beq.n	800770c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076c4:	4b39      	ldr	r3, [pc, #228]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a38      	ldr	r2, [pc, #224]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d0:	f7fa fe9e 	bl	8002410 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076d8:	f7fa fe9a 	bl	8002410 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e1bd      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ea:	4b30      	ldr	r3, [pc, #192]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f6:	4b2d      	ldr	r3, [pc, #180]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4929      	ldr	r1, [pc, #164]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007706:	4313      	orrs	r3, r2
 8007708:	600b      	str	r3, [r1, #0]
 800770a:	e018      	b.n	800773e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800770c:	4b27      	ldr	r3, [pc, #156]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a26      	ldr	r2, [pc, #152]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007712:	f023 0301 	bic.w	r3, r3, #1
 8007716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007718:	f7fa fe7a 	bl	8002410 <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007720:	f7fa fe76 	bl	8002410 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e199      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007732:	4b1e      	ldr	r3, [pc, #120]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1f0      	bne.n	8007720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d038      	beq.n	80077bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d019      	beq.n	8007786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007752:	4b16      	ldr	r3, [pc, #88]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007756:	4a15      	ldr	r2, [pc, #84]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775e:	f7fa fe57 	bl	8002410 <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007766:	f7fa fe53 	bl	8002410 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e176      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007778:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800777a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0f0      	beq.n	8007766 <HAL_RCC_OscConfig+0x23a>
 8007784:	e01a      	b.n	80077bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007786:	4b09      	ldr	r3, [pc, #36]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800778a:	4a08      	ldr	r2, [pc, #32]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007792:	f7fa fe3d 	bl	8002410 <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007798:	e00a      	b.n	80077b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800779a:	f7fa fe39 	bl	8002410 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d903      	bls.n	80077b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e15c      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
 80077ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b0:	4b91      	ldr	r3, [pc, #580]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1ee      	bne.n	800779a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80a4 	beq.w	8007912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ca:	4b8b      	ldr	r3, [pc, #556]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077d6:	4b88      	ldr	r3, [pc, #544]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077da:	4a87      	ldr	r2, [pc, #540]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80077e2:	4b85      	ldr	r3, [pc, #532]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ea:	60bb      	str	r3, [r7, #8]
 80077ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077f2:	4b82      	ldr	r3, [pc, #520]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d118      	bne.n	8007830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077fe:	4b7f      	ldr	r3, [pc, #508]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a7e      	ldr	r2, [pc, #504]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 8007804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800780a:	f7fa fe01 	bl	8002410 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007812:	f7fa fdfd 	bl	8002410 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b64      	cmp	r3, #100	@ 0x64
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e120      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007824:	4b75      	ldr	r3, [pc, #468]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0f0      	beq.n	8007812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d106      	bne.n	8007846 <HAL_RCC_OscConfig+0x31a>
 8007838:	4b6f      	ldr	r3, [pc, #444]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800783a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783c:	4a6e      	ldr	r2, [pc, #440]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	6713      	str	r3, [r2, #112]	@ 0x70
 8007844:	e02d      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10c      	bne.n	8007868 <HAL_RCC_OscConfig+0x33c>
 800784e:	4b6a      	ldr	r3, [pc, #424]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007852:	4a69      	ldr	r2, [pc, #420]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	6713      	str	r3, [r2, #112]	@ 0x70
 800785a:	4b67      	ldr	r3, [pc, #412]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785e:	4a66      	ldr	r2, [pc, #408]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007860:	f023 0304 	bic.w	r3, r3, #4
 8007864:	6713      	str	r3, [r2, #112]	@ 0x70
 8007866:	e01c      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b05      	cmp	r3, #5
 800786e:	d10c      	bne.n	800788a <HAL_RCC_OscConfig+0x35e>
 8007870:	4b61      	ldr	r3, [pc, #388]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007874:	4a60      	ldr	r2, [pc, #384]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007876:	f043 0304 	orr.w	r3, r3, #4
 800787a:	6713      	str	r3, [r2, #112]	@ 0x70
 800787c:	4b5e      	ldr	r3, [pc, #376]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007880:	4a5d      	ldr	r2, [pc, #372]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	6713      	str	r3, [r2, #112]	@ 0x70
 8007888:	e00b      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
 800788a:	4b5b      	ldr	r3, [pc, #364]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	4a5a      	ldr	r2, [pc, #360]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	6713      	str	r3, [r2, #112]	@ 0x70
 8007896:	4b58      	ldr	r3, [pc, #352]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789a:	4a57      	ldr	r2, [pc, #348]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d015      	beq.n	80078d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078aa:	f7fa fdb1 	bl	8002410 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b0:	e00a      	b.n	80078c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b2:	f7fa fdad 	bl	8002410 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e0ce      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c8:	4b4b      	ldr	r3, [pc, #300]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80078ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0ee      	beq.n	80078b2 <HAL_RCC_OscConfig+0x386>
 80078d4:	e014      	b.n	8007900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d6:	f7fa fd9b 	bl	8002410 <HAL_GetTick>
 80078da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078dc:	e00a      	b.n	80078f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078de:	f7fa fd97 	bl	8002410 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e0b8      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f4:	4b40      	ldr	r3, [pc, #256]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1ee      	bne.n	80078de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d105      	bne.n	8007912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007906:	4b3c      	ldr	r3, [pc, #240]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790a:	4a3b      	ldr	r2, [pc, #236]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800790c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007910:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 80a4 	beq.w	8007a64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800791c:	4b36      	ldr	r3, [pc, #216]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 030c 	and.w	r3, r3, #12
 8007924:	2b08      	cmp	r3, #8
 8007926:	d06b      	beq.n	8007a00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d149      	bne.n	80079c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007930:	4b31      	ldr	r3, [pc, #196]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a30      	ldr	r2, [pc, #192]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800793a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fa fd68 	bl	8002410 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007944:	f7fa fd64 	bl	8002410 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e087      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007956:	4b28      	ldr	r3, [pc, #160]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69da      	ldr	r2, [r3, #28]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	3b01      	subs	r3, #1
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	061b      	lsls	r3, r3, #24
 8007986:	4313      	orrs	r3, r2
 8007988:	4a1b      	ldr	r2, [pc, #108]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800798a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800798e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007990:	4b19      	ldr	r3, [pc, #100]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a18      	ldr	r2, [pc, #96]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800799a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fa fd38 	bl	8002410 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a4:	f7fa fd34 	bl	8002410 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e057      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b6:	4b10      	ldr	r3, [pc, #64]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f0      	beq.n	80079a4 <HAL_RCC_OscConfig+0x478>
 80079c2:	e04f      	b.n	8007a64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c4:	4b0c      	ldr	r3, [pc, #48]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a0b      	ldr	r2, [pc, #44]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7fa fd1e 	bl	8002410 <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d8:	f7fa fd1a 	bl	8002410 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e03d      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ea:	4b03      	ldr	r3, [pc, #12]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0x4ac>
 80079f6:	e035      	b.n	8007a64 <HAL_RCC_OscConfig+0x538>
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a00:	4b1b      	ldr	r3, [pc, #108]	@ (8007a70 <HAL_RCC_OscConfig+0x544>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d028      	beq.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d121      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d11a      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a30:	4013      	ands	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d111      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d001      	beq.n	8007a64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800

08007a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0d0      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d910      	bls.n	8007abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9a:	4b67      	ldr	r3, [pc, #412]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f023 020f 	bic.w	r2, r3, #15
 8007aa2:	4965      	ldr	r1, [pc, #404]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aaa:	4b63      	ldr	r3, [pc, #396]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0b8      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d020      	beq.n	8007b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ad4:	4b59      	ldr	r3, [pc, #356]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	4a58      	ldr	r2, [pc, #352]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007aec:	4b53      	ldr	r3, [pc, #332]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	4a52      	ldr	r2, [pc, #328]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af8:	4b50      	ldr	r3, [pc, #320]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	494d      	ldr	r1, [pc, #308]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d040      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1e:	4b47      	ldr	r3, [pc, #284]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d115      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e07f      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d107      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b36:	4b41      	ldr	r3, [pc, #260]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e073      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b46:	4b3d      	ldr	r3, [pc, #244]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e06b      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b56:	4b39      	ldr	r3, [pc, #228]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 0203 	bic.w	r2, r3, #3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4936      	ldr	r1, [pc, #216]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b68:	f7fa fc52 	bl	8002410 <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b70:	f7fa fc4e 	bl	8002410 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e053      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b86:	4b2d      	ldr	r3, [pc, #180]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 020c 	and.w	r2, r3, #12
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d1eb      	bne.n	8007b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b98:	4b27      	ldr	r3, [pc, #156]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d210      	bcs.n	8007bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba6:	4b24      	ldr	r3, [pc, #144]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f023 020f 	bic.w	r2, r3, #15
 8007bae:	4922      	ldr	r1, [pc, #136]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb6:	4b20      	ldr	r3, [pc, #128]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d001      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e032      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d008      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bd4:	4b19      	ldr	r3, [pc, #100]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4916      	ldr	r1, [pc, #88]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bf2:	4b12      	ldr	r3, [pc, #72]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	490e      	ldr	r1, [pc, #56]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c06:	f000 f821 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	490a      	ldr	r1, [pc, #40]	@ (8007c40 <HAL_RCC_ClockConfig+0x1cc>)
 8007c18:	5ccb      	ldrb	r3, [r1, r3]
 8007c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1e:	4a09      	ldr	r2, [pc, #36]	@ (8007c44 <HAL_RCC_ClockConfig+0x1d0>)
 8007c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c22:	4b09      	ldr	r3, [pc, #36]	@ (8007c48 <HAL_RCC_ClockConfig+0x1d4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f9 fd48 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40023c00 	.word	0x40023c00
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	08025310 	.word	0x08025310
 8007c44:	20000000 	.word	0x20000000
 8007c48:	20000004 	.word	0x20000004

08007c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c50:	b090      	sub	sp, #64	@ 0x40
 8007c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c64:	4b59      	ldr	r3, [pc, #356]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 030c 	and.w	r3, r3, #12
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d00d      	beq.n	8007c8c <HAL_RCC_GetSysClockFreq+0x40>
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	f200 80a1 	bhi.w	8007db8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x34>
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d003      	beq.n	8007c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c7e:	e09b      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c80:	4b53      	ldr	r3, [pc, #332]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c84:	e09b      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c86:	4b53      	ldr	r3, [pc, #332]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c8a:	e098      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c96:	4b4d      	ldr	r3, [pc, #308]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d028      	beq.n	8007cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	2200      	movs	r2, #0
 8007caa:	623b      	str	r3, [r7, #32]
 8007cac:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4b47      	ldr	r3, [pc, #284]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cb8:	fb03 f201 	mul.w	r2, r3, r1
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	fb00 f303 	mul.w	r3, r0, r3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	4a43      	ldr	r2, [pc, #268]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8007cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ccc:	460a      	mov	r2, r1
 8007cce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cd2:	4413      	add	r3, r2
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd8:	2200      	movs	r2, #0
 8007cda:	61bb      	str	r3, [r7, #24]
 8007cdc:	61fa      	str	r2, [r7, #28]
 8007cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007ce6:	f7f8 fae3 	bl	80002b0 <__aeabi_uldivmod>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4613      	mov	r3, r2
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf2:	e053      	b.n	8007d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf4:	4b35      	ldr	r3, [pc, #212]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	099b      	lsrs	r3, r3, #6
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	617a      	str	r2, [r7, #20]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d06:	f04f 0b00 	mov.w	fp, #0
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	f04f 0000 	mov.w	r0, #0
 8007d12:	f04f 0100 	mov.w	r1, #0
 8007d16:	0159      	lsls	r1, r3, #5
 8007d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d1c:	0150      	lsls	r0, r2, #5
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ebb2 080a 	subs.w	r8, r2, sl
 8007d26:	eb63 090b 	sbc.w	r9, r3, fp
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d3e:	ebb2 0408 	subs.w	r4, r2, r8
 8007d42:	eb63 0509 	sbc.w	r5, r3, r9
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	00eb      	lsls	r3, r5, #3
 8007d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d54:	00e2      	lsls	r2, r4, #3
 8007d56:	4614      	mov	r4, r2
 8007d58:	461d      	mov	r5, r3
 8007d5a:	eb14 030a 	adds.w	r3, r4, sl
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	eb45 030b 	adc.w	r3, r5, fp
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d72:	4629      	mov	r1, r5
 8007d74:	028b      	lsls	r3, r1, #10
 8007d76:	4621      	mov	r1, r4
 8007d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	028a      	lsls	r2, r1, #10
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d86:	2200      	movs	r2, #0
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	60fa      	str	r2, [r7, #12]
 8007d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d90:	f7f8 fa8e 	bl	80002b0 <__aeabi_uldivmod>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4613      	mov	r3, r2
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	0c1b      	lsrs	r3, r3, #16
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	3301      	adds	r3, #1
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007db6:	e002      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3740      	adds	r7, #64	@ 0x40
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dca:	bf00      	nop
 8007dcc:	40023800 	.word	0x40023800
 8007dd0:	00f42400 	.word	0x00f42400
 8007dd4:	017d7840 	.word	0x017d7840

08007dd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ddc:	4b03      	ldr	r3, [pc, #12]	@ (8007dec <HAL_RCC_GetHCLKFreq+0x14>)
 8007dde:	681b      	ldr	r3, [r3, #0]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	20000000 	.word	0x20000000

08007df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007df4:	f7ff fff0 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b05      	ldr	r3, [pc, #20]	@ (8007e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	0a9b      	lsrs	r3, r3, #10
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	4903      	ldr	r1, [pc, #12]	@ (8007e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e06:	5ccb      	ldrb	r3, [r1, r3]
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40023800 	.word	0x40023800
 8007e14:	08025320 	.word	0x08025320

08007e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e1c:	f7ff ffdc 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007e20:	4602      	mov	r2, r0
 8007e22:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	0b5b      	lsrs	r3, r3, #13
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	4903      	ldr	r1, [pc, #12]	@ (8007e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e2e:	5ccb      	ldrb	r3, [r1, r3]
 8007e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	08025320 	.word	0x08025320

08007e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220f      	movs	r2, #15
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e50:	4b12      	ldr	r3, [pc, #72]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0203 	and.w	r2, r3, #3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e68:	4b0c      	ldr	r3, [pc, #48]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e74:	4b09      	ldr	r3, [pc, #36]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	08db      	lsrs	r3, r3, #3
 8007e7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e82:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <HAL_RCC_GetClockConfig+0x60>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 020f 	and.w	r2, r3, #15
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	601a      	str	r2, [r3, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	40023c00 	.word	0x40023c00

08007ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d012      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ecc:	4b69      	ldr	r3, [pc, #420]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	4a68      	ldr	r2, [pc, #416]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ed2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ed6:	6093      	str	r3, [r2, #8]
 8007ed8:	4b66      	ldr	r3, [pc, #408]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee0:	4964      	ldr	r1, [pc, #400]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d017      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007efe:	4b5d      	ldr	r3, [pc, #372]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0c:	4959      	ldr	r1, [pc, #356]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d017      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f48:	494a      	ldr	r1, [pc, #296]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f58:	d101      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f66:	2301      	movs	r3, #1
 8007f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 808b 	beq.w	800809e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f88:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	4a39      	ldr	r2, [pc, #228]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f94:	4b37      	ldr	r3, [pc, #220]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f9c:	60bb      	str	r3, [r7, #8]
 8007f9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fa0:	4b35      	ldr	r3, [pc, #212]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a34      	ldr	r2, [pc, #208]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fac:	f7fa fa30 	bl	8002410 <HAL_GetTick>
 8007fb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb4:	f7fa fa2c 	bl	8002410 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	@ 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e357      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fd2:	4b28      	ldr	r3, [pc, #160]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d035      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d02e      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ff0:	4b20      	ldr	r3, [pc, #128]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008004:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008006:	4b1b      	ldr	r3, [pc, #108]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800800a:	4a1a      	ldr	r2, [pc, #104]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008010:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008012:	4a18      	ldr	r2, [pc, #96]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008018:	4b16      	ldr	r3, [pc, #88]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d114      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008024:	f7fa f9f4 	bl	8002410 <HAL_GetTick>
 8008028:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800802a:	e00a      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800802c:	f7fa f9f0 	bl	8002410 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800803a:	4293      	cmp	r3, r2
 800803c:	d901      	bls.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e319      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008042:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0ee      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800805a:	d111      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800805c:	4b05      	ldr	r3, [pc, #20]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008068:	4b04      	ldr	r3, [pc, #16]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800806a:	400b      	ands	r3, r1
 800806c:	4901      	ldr	r1, [pc, #4]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800806e:	4313      	orrs	r3, r2
 8008070:	608b      	str	r3, [r1, #8]
 8008072:	e00b      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008074:	40023800 	.word	0x40023800
 8008078:	40007000 	.word	0x40007000
 800807c:	0ffffcff 	.word	0x0ffffcff
 8008080:	4baa      	ldr	r3, [pc, #680]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	4aa9      	ldr	r2, [pc, #676]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008086:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800808a:	6093      	str	r3, [r2, #8]
 800808c:	4ba7      	ldr	r3, [pc, #668]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008098:	49a4      	ldr	r1, [pc, #656]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809a:	4313      	orrs	r3, r2
 800809c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d010      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080aa:	4ba0      	ldr	r3, [pc, #640]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080b0:	4a9e      	ldr	r2, [pc, #632]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80080ba:	4b9c      	ldr	r3, [pc, #624]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	4999      	ldr	r1, [pc, #612]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080d8:	4b94      	ldr	r3, [pc, #592]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080e6:	4991      	ldr	r1, [pc, #580]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080fa:	4b8c      	ldr	r3, [pc, #560]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008100:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008108:	4988      	ldr	r1, [pc, #544]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800811c:	4b83      	ldr	r3, [pc, #524]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008122:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800812a:	4980      	ldr	r1, [pc, #512]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800813e:	4b7b      	ldr	r3, [pc, #492]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008144:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800814c:	4977      	ldr	r1, [pc, #476]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008160:	4b72      	ldr	r3, [pc, #456]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	f023 0203 	bic.w	r2, r3, #3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816e:	496f      	ldr	r1, [pc, #444]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008182:	4b6a      	ldr	r3, [pc, #424]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008188:	f023 020c 	bic.w	r2, r3, #12
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008190:	4966      	ldr	r1, [pc, #408]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081a4:	4b61      	ldr	r3, [pc, #388]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081b2:	495e      	ldr	r1, [pc, #376]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081c6:	4b59      	ldr	r3, [pc, #356]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d4:	4955      	ldr	r1, [pc, #340]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081e8:	4b50      	ldr	r3, [pc, #320]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f6:	494d      	ldr	r1, [pc, #308]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800820a:	4b48      	ldr	r3, [pc, #288]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008218:	4944      	ldr	r1, [pc, #272]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800822c:	4b3f      	ldr	r3, [pc, #252]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800823a:	493c      	ldr	r1, [pc, #240]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800823c:	4313      	orrs	r3, r2
 800823e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800824e:	4b37      	ldr	r3, [pc, #220]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008254:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800825c:	4933      	ldr	r1, [pc, #204]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008270:	4b2e      	ldr	r3, [pc, #184]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008276:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800827e:	492b      	ldr	r1, [pc, #172]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d011      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008292:	4b26      	ldr	r3, [pc, #152]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008298:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082a0:	4922      	ldr	r1, [pc, #136]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082b0:	d101      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082b2:	2301      	movs	r3, #1
 80082b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0308 	and.w	r3, r3, #8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082d2:	4b16      	ldr	r3, [pc, #88]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e0:	4912      	ldr	r1, [pc, #72]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082f4:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008304:	4909      	ldr	r1, [pc, #36]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d006      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80d9 	beq.w	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008320:	4b02      	ldr	r3, [pc, #8]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a01      	ldr	r2, [pc, #4]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008326:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800832a:	e001      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800832c:	40023800 	.word	0x40023800
 8008330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008332:	f7fa f86d 	bl	8002410 <HAL_GetTick>
 8008336:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008338:	e008      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800833a:	f7fa f869 	bl	8002410 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b64      	cmp	r3, #100	@ 0x64
 8008346:	d901      	bls.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e194      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800834c:	4b6c      	ldr	r3, [pc, #432]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f0      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d021      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11d      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800836c:	4b64      	ldr	r3, [pc, #400]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800836e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800837a:	4b61      	ldr	r3, [pc, #388]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008380:	0e1b      	lsrs	r3, r3, #24
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	019a      	lsls	r2, r3, #6
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	431a      	orrs	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	071b      	lsls	r3, r3, #28
 80083a0:	4957      	ldr	r1, [pc, #348]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083bc:	d00a      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d02e      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083d2:	d129      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083d4:	4b4a      	ldr	r3, [pc, #296]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083e2:	4b47      	ldr	r3, [pc, #284]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083e8:	0f1b      	lsrs	r3, r3, #28
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	019a      	lsls	r2, r3, #6
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	041b      	lsls	r3, r3, #16
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	061b      	lsls	r3, r3, #24
 8008402:	431a      	orrs	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	071b      	lsls	r3, r3, #28
 8008408:	493d      	ldr	r1, [pc, #244]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008410:	4b3b      	ldr	r3, [pc, #236]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008416:	f023 021f 	bic.w	r2, r3, #31
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841e:	3b01      	subs	r3, #1
 8008420:	4937      	ldr	r1, [pc, #220]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008422:	4313      	orrs	r3, r2
 8008424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01d      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008434:	4b32      	ldr	r3, [pc, #200]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008442:	4b2f      	ldr	r3, [pc, #188]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008448:	0f1b      	lsrs	r3, r3, #28
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	019a      	lsls	r2, r3, #6
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	041b      	lsls	r3, r3, #16
 800845c:	431a      	orrs	r2, r3
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	061b      	lsls	r3, r3, #24
 8008462:	431a      	orrs	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	071b      	lsls	r3, r3, #28
 8008468:	4925      	ldr	r1, [pc, #148]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800846a:	4313      	orrs	r3, r2
 800846c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d011      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	019a      	lsls	r2, r3, #6
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	061b      	lsls	r3, r3, #24
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	071b      	lsls	r3, r3, #28
 8008498:	4919      	ldr	r1, [pc, #100]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084a0:	4b17      	ldr	r3, [pc, #92]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a16      	ldr	r2, [pc, #88]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ac:	f7f9 ffb0 	bl	8002410 <HAL_GetTick>
 80084b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084b2:	e008      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084b4:	f7f9 ffac 	bl	8002410 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b64      	cmp	r3, #100	@ 0x64
 80084c0:	d901      	bls.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e0d7      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	f040 80cd 	bne.w	8008674 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084da:	4b09      	ldr	r3, [pc, #36]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a08      	ldr	r2, [pc, #32]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e6:	f7f9 ff93 	bl	8002410 <HAL_GetTick>
 80084ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084ec:	e00a      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084ee:	f7f9 ff8f 	bl	8002410 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b64      	cmp	r3, #100	@ 0x64
 80084fa:	d903      	bls.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e0ba      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008500:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008504:	4b5e      	ldr	r3, [pc, #376]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800850c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008510:	d0ed      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800852e:	2b00      	cmp	r3, #0
 8008530:	d02e      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d12a      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800853a:	4b51      	ldr	r3, [pc, #324]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008540:	0c1b      	lsrs	r3, r3, #16
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008548:	4b4d      	ldr	r3, [pc, #308]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854e:	0f1b      	lsrs	r3, r3, #28
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	019a      	lsls	r2, r3, #6
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	061b      	lsls	r3, r3, #24
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	071b      	lsls	r3, r3, #28
 800856e:	4944      	ldr	r1, [pc, #272]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008576:	4b42      	ldr	r3, [pc, #264]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800857c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	3b01      	subs	r3, #1
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	493d      	ldr	r1, [pc, #244]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d022      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085a4:	d11d      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085a6:	4b36      	ldr	r3, [pc, #216]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ac:	0e1b      	lsrs	r3, r3, #24
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085b4:	4b32      	ldr	r3, [pc, #200]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ba:	0f1b      	lsrs	r3, r3, #28
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	019a      	lsls	r2, r3, #6
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	431a      	orrs	r2, r3
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	061b      	lsls	r3, r3, #24
 80085d4:	431a      	orrs	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	071b      	lsls	r3, r3, #28
 80085da:	4929      	ldr	r1, [pc, #164]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d028      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085ee:	4b24      	ldr	r3, [pc, #144]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f4:	0e1b      	lsrs	r3, r3, #24
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085fc:	4b20      	ldr	r3, [pc, #128]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	019a      	lsls	r2, r3, #6
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	041b      	lsls	r3, r3, #16
 8008614:	431a      	orrs	r2, r3
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	061b      	lsls	r3, r3, #24
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	071b      	lsls	r3, r3, #28
 8008622:	4917      	ldr	r1, [pc, #92]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800862a:	4b15      	ldr	r3, [pc, #84]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800862c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008630:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008638:	4911      	ldr	r1, [pc, #68]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008640:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a0e      	ldr	r2, [pc, #56]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800864a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800864c:	f7f9 fee0 	bl	8002410 <HAL_GetTick>
 8008650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008652:	e008      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008654:	f7f9 fedc 	bl	8002410 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b64      	cmp	r3, #100	@ 0x64
 8008660:	d901      	bls.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e007      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008666:	4b06      	ldr	r3, [pc, #24]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008672:	d1ef      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40023800 	.word	0x40023800

08008684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e09d      	b.n	80087d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	d108      	bne.n	80086b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086a6:	d009      	beq.n	80086bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	61da      	str	r2, [r3, #28]
 80086ae:	e005      	b.n	80086bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7f8 fe5a 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086fc:	d902      	bls.n	8008704 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	e002      	b.n	800870a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008708:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008712:	d007      	beq.n	8008724 <HAL_SPI_Init+0xa0>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800871c:	d002      	beq.n	8008724 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008752:	431a      	orrs	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008766:	ea42 0103 	orr.w	r1, r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	f003 0204 	and.w	r2, r3, #4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008788:	f003 0310 	and.w	r3, r3, #16
 800878c:	431a      	orrs	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80087a0:	ea42 0103 	orr.w	r1, r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69da      	ldr	r2, [r3, #28]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d001      	beq.n	80087fa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80087f6:	2302      	movs	r3, #2
 80087f8:	e0d4      	b.n	80089a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <HAL_SPI_Transmit_DMA+0x2a>
 8008800:	88fb      	ldrh	r3, [r7, #6]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e0cc      	b.n	80089a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <HAL_SPI_Transmit_DMA+0x3c>
 8008814:	2302      	movs	r3, #2
 8008816:	e0c5      	b.n	80089a4 <HAL_SPI_Transmit_DMA+0x1c8>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2203      	movs	r2, #3
 8008824:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	88fa      	ldrh	r2, [r7, #6]
 8008838:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	88fa      	ldrh	r2, [r7, #6]
 800883e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800886a:	d10f      	bne.n	800888c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800887a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800888a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008890:	4a46      	ldr	r2, [pc, #280]	@ (80089ac <HAL_SPI_Transmit_DMA+0x1d0>)
 8008892:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008898:	4a45      	ldr	r2, [pc, #276]	@ (80089b0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800889a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a0:	4a44      	ldr	r2, [pc, #272]	@ (80089b4 <HAL_SPI_Transmit_DMA+0x1d8>)
 80088a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a8:	2200      	movs	r2, #0
 80088aa:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088ba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80088c4:	d82d      	bhi.n	8008922 <HAL_SPI_Transmit_DMA+0x146>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088d0:	d127      	bne.n	8008922 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10f      	bne.n	8008900 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80088fe:	e010      	b.n	8008922 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800890e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008914:	b29b      	uxth	r3, r3
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	b29b      	uxth	r3, r3
 800891a:	3301      	adds	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892a:	4619      	mov	r1, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	330c      	adds	r3, #12
 8008932:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008938:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800893a:	f7fa fbcb 	bl	80030d4 <HAL_DMA_Start_IT>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008948:	f043 0210 	orr.w	r2, r3, #16
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e023      	b.n	80089a4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008966:	2b40      	cmp	r3, #64	@ 0x40
 8008968:	d007      	beq.n	800897a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008978:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0220 	orr.w	r2, r2, #32
 8008990:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0202 	orr.w	r2, r2, #2
 80089a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	0800934d 	.word	0x0800934d
 80089b0:	08009169 	.word	0x08009169
 80089b4:	080093a1 	.word	0x080093a1

080089b8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d001      	beq.n	80089d6 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80089d2:	2302      	movs	r3, #2
 80089d4:	e105      	b.n	8008be2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <HAL_SPI_Receive_DMA+0x2a>
 80089dc:	88fb      	ldrh	r3, [r7, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e0fd      	b.n	8008be2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d110      	bne.n	8008a10 <HAL_SPI_Receive_DMA+0x58>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089f6:	d10b      	bne.n	8008a10 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2204      	movs	r2, #4
 80089fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 f8f6 	bl	8008bf8 <HAL_SPI_TransmitReceive_DMA>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	e0e8      	b.n	8008be2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <HAL_SPI_Receive_DMA+0x66>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e0e1      	b.n	8008be2 <HAL_SPI_Receive_DMA+0x22a>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	88fa      	ldrh	r2, [r7, #6]
 8008a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	88fa      	ldrh	r2, [r7, #6]
 8008a46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a6a:	d10f      	bne.n	8008a8c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008a8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a9a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008aa4:	d908      	bls.n	8008ab8 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	e042      	b.n	8008b3e <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ac6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ad2:	d134      	bne.n	8008b3e <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ae2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d111      	bne.n	8008b18 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b02:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008b16:	e012      	b.n	8008b3e <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b26:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3301      	adds	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b42:	4a2a      	ldr	r2, [pc, #168]	@ (8008bec <HAL_SPI_Receive_DMA+0x234>)
 8008b44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b4a:	4a29      	ldr	r2, [pc, #164]	@ (8008bf0 <HAL_SPI_Receive_DMA+0x238>)
 8008b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b52:	4a28      	ldr	r2, [pc, #160]	@ (8008bf4 <HAL_SPI_Receive_DMA+0x23c>)
 8008b54:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	330c      	adds	r3, #12
 8008b68:	4619      	mov	r1, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008b78:	f7fa faac 	bl	80030d4 <HAL_DMA_Start_IT>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b86:	f043 0210 	orr.w	r2, r3, #16
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e023      	b.n	8008be2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba4:	2b40      	cmp	r3, #64	@ 0x40
 8008ba6:	d007      	beq.n	8008bb8 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bb6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0220 	orr.w	r2, r2, #32
 8008bce:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	08009369 	.word	0x08009369
 8008bf0:	08009211 	.word	0x08009211
 8008bf4:	080093a1 	.word	0x080093a1

08008bf8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c0c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d00c      	beq.n	8008c34 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c20:	d106      	bne.n	8008c30 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d001      	beq.n	8008c34 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008c30:	2302      	movs	r3, #2
 8008c32:	e158      	b.n	8008ee6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008c40:	887b      	ldrh	r3, [r7, #2]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e14d      	b.n	8008ee6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e146      	b.n	8008ee6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d003      	beq.n	8008c74 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2205      	movs	r2, #5
 8008c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	887a      	ldrh	r2, [r7, #2]
 8008c84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	887a      	ldrh	r2, [r7, #2]
 8008c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	887a      	ldrh	r2, [r7, #2]
 8008c96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	887a      	ldrh	r2, [r7, #2]
 8008c9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008cbc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008cc6:	d908      	bls.n	8008cda <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cd6:	605a      	str	r2, [r3, #4]
 8008cd8:	e06f      	b.n	8008dba <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ce8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cf4:	d126      	bne.n	8008d44 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10f      	bne.n	8008d22 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d10:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d20:	e010      	b.n	8008d44 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d30:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d4e:	d134      	bne.n	8008dba <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d5e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d111      	bne.n	8008d94 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d7e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	085b      	lsrs	r3, r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008d92:	e012      	b.n	8008dba <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008da2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3301      	adds	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d108      	bne.n	8008dd8 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	4a49      	ldr	r2, [pc, #292]	@ (8008ef0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8008dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd2:	4a48      	ldr	r2, [pc, #288]	@ (8008ef4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8008dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008dd6:	e007      	b.n	8008de8 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ddc:	4a46      	ldr	r2, [pc, #280]	@ (8008ef8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8008dde:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de4:	4a45      	ldr	r2, [pc, #276]	@ (8008efc <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dec:	4a44      	ldr	r2, [pc, #272]	@ (8008f00 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008dee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df4:	2200      	movs	r2, #0
 8008df6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	4619      	mov	r1, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e08:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e10:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008e12:	f7fa f95f 	bl	80030d4 <HAL_DMA_Start_IT>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e20:	f043 0210 	orr.w	r2, r3, #16
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e058      	b.n	8008ee6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e48:	2200      	movs	r2, #0
 8008e4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e50:	2200      	movs	r2, #0
 8008e52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e58:	2200      	movs	r2, #0
 8008e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e60:	2200      	movs	r2, #0
 8008e62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	330c      	adds	r3, #12
 8008e74:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e7a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e7c:	f7fa f92a 	bl	80030d4 <HAL_DMA_Start_IT>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00b      	beq.n	8008e9e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e8a:	f043 0210 	orr.w	r2, r3, #16
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e023      	b.n	8008ee6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea8:	2b40      	cmp	r3, #64	@ 0x40
 8008eaa:	d007      	beq.n	8008ebc <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008eba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0220 	orr.w	r2, r2, #32
 8008ed2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0202 	orr.w	r2, r2, #2
 8008ee2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	08009369 	.word	0x08009369
 8008ef4:	08009211 	.word	0x08009211
 8008ef8:	08009385 	.word	0x08009385
 8008efc:	080092bb 	.word	0x080092bb
 8008f00:	080093a1 	.word	0x080093a1

08008f04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	099b      	lsrs	r3, r3, #6
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10f      	bne.n	8008f48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	099b      	lsrs	r3, r3, #6
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	4798      	blx	r3
    return;
 8008f46:	e0d7      	b.n	80090f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <HAL_SPI_IRQHandler+0x66>
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	09db      	lsrs	r3, r3, #7
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
    return;
 8008f68:	e0c6      	b.n	80090f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10c      	bne.n	8008f90 <HAL_SPI_IRQHandler+0x8c>
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	099b      	lsrs	r3, r3, #6
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 80b4 	beq.w	80090f8 <HAL_SPI_IRQHandler+0x1f4>
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	095b      	lsrs	r3, r3, #5
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80ad 	beq.w	80090f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	099b      	lsrs	r3, r3, #6
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d023      	beq.n	8008ff2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d011      	beq.n	8008fda <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fba:	f043 0204 	orr.w	r2, r3, #4
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	e00b      	b.n	8008ff2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fda:	2300      	movs	r3, #0
 8008fdc:	613b      	str	r3, [r7, #16]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	613b      	str	r3, [r7, #16]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	613b      	str	r3, [r7, #16]
 8008fee:	693b      	ldr	r3, [r7, #16]
        return;
 8008ff0:	e082      	b.n	80090f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d014      	beq.n	8009028 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009002:	f043 0201 	orr.w	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	0a1b      	lsrs	r3, r3, #8
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009038:	f043 0208 	orr.w	r2, r3, #8
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009040:	2300      	movs	r3, #0
 8009042:	60bb      	str	r3, [r7, #8]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	60bb      	str	r3, [r7, #8]
 800904c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009052:	2b00      	cmp	r3, #0
 8009054:	d04f      	beq.n	80090f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009064:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <HAL_SPI_IRQHandler+0x17e>
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d034      	beq.n	80090ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0203 	bic.w	r2, r2, #3
 8009090:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009096:	2b00      	cmp	r3, #0
 8009098:	d011      	beq.n	80090be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909e:	4a18      	ldr	r2, [pc, #96]	@ (8009100 <HAL_SPI_IRQHandler+0x1fc>)
 80090a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fa f8e4 	bl	8003274 <HAL_DMA_Abort_IT>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d016      	beq.n	80090f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ca:	4a0d      	ldr	r2, [pc, #52]	@ (8009100 <HAL_SPI_IRQHandler+0x1fc>)
 80090cc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fa f8ce 	bl	8003274 <HAL_DMA_Abort_IT>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80090ea:	e003      	b.n	80090f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f831 	bl	8009154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80090f2:	e000      	b.n	80090f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80090f4:	bf00      	nop
    return;
 80090f6:	bf00      	nop
  }
}
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	080093e1 	.word	0x080093e1

08009104 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009174:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009176:	f7f9 f94b 	bl	8002410 <HAL_GetTick>
 800917a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918a:	d03b      	beq.n	8009204 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0220 	bic.w	r2, r2, #32
 800919a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0202 	bic.w	r2, r2, #2
 80091aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	2164      	movs	r1, #100	@ 0x64
 80091b0:	6978      	ldr	r0, [r7, #20]
 80091b2:	f000 fac5 	bl	8009740 <SPI_EndRxTxTransaction>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c0:	f043 0220 	orr.w	r2, r3, #32
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2200      	movs	r2, #0
 80091ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091fc:	6978      	ldr	r0, [r7, #20]
 80091fe:	f7ff ffa9 	bl	8009154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009202:	e002      	b.n	800920a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009204:	6978      	ldr	r0, [r7, #20]
 8009206:	f016 fbdf 	bl	801f9c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800921e:	f7f9 f8f7 	bl	8002410 <HAL_GetTick>
 8009222:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009232:	d03c      	beq.n	80092ae <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 0220 	bic.w	r2, r2, #32
 8009242:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10d      	bne.n	8009268 <SPI_DMAReceiveCplt+0x58>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009254:	d108      	bne.n	8009268 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0203 	bic.w	r2, r2, #3
 8009264:	605a      	str	r2, [r3, #4]
 8009266:	e007      	b.n	8009278 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 0201 	bic.w	r2, r2, #1
 8009276:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	2164      	movs	r1, #100	@ 0x64
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f9e3 	bl	8009648 <SPI_EndRxTransaction>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2220      	movs	r2, #32
 800928c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff ff54 	bl	8009154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80092ac:	e002      	b.n	80092b4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f016 fbaa 	bl	801fa08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092c8:	f7f9 f8a2 	bl	8002410 <HAL_GetTick>
 80092cc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092dc:	d030      	beq.n	8009340 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f022 0220 	bic.w	r2, r2, #32
 80092ec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	2164      	movs	r1, #100	@ 0x64
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fa24 	bl	8009740 <SPI_EndRxTxTransaction>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009302:	f043 0220 	orr.w	r2, r3, #32
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0203 	bic.w	r2, r2, #3
 8009318:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009334:	2b00      	cmp	r3, #0
 8009336:	d003      	beq.n	8009340 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f7ff ff0b 	bl	8009154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800933e:	e002      	b.n	8009346 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f7ff fedf 	bl	8009104 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009358:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff fedc 	bl	8009118 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009360:	bf00      	nop
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009374:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff fed8 	bl	800912c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800937c:	bf00      	nop
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009390:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff fed4 	bl	8009140 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0203 	bic.w	r2, r2, #3
 80093bc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093c2:	f043 0210 	orr.w	r2, r3, #16
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff febe 	bl	8009154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fea9 	bl	8009154 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009402:	bf00      	nop
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	4613      	mov	r3, r2
 800941a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800941c:	f7f8 fff8 	bl	8002410 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	4413      	add	r3, r2
 800942a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800942c:	f7f8 fff0 	bl	8002410 <HAL_GetTick>
 8009430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009432:	4b39      	ldr	r3, [pc, #228]	@ (8009518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	015b      	lsls	r3, r3, #5
 8009438:	0d1b      	lsrs	r3, r3, #20
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	fb02 f303 	mul.w	r3, r2, r3
 8009440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009442:	e055      	b.n	80094f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800944a:	d051      	beq.n	80094f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800944c:	f7f8 ffe0 	bl	8002410 <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	69fa      	ldr	r2, [r7, #28]
 8009458:	429a      	cmp	r2, r3
 800945a:	d902      	bls.n	8009462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d13d      	bne.n	80094de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800947a:	d111      	bne.n	80094a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009484:	d004      	beq.n	8009490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800948e:	d107      	bne.n	80094a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800949e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094a8:	d10f      	bne.n	80094ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e018      	b.n	8009510 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d102      	bne.n	80094ea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	e002      	b.n	80094f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	4013      	ands	r3, r2
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	429a      	cmp	r2, r3
 800950c:	d19a      	bne.n	8009444 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3720      	adds	r7, #32
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20000000 	.word	0x20000000

0800951c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	@ 0x28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800952e:	f7f8 ff6f 	bl	8002410 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	1a9b      	subs	r3, r3, r2
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	4413      	add	r3, r2
 800953c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800953e:	f7f8 ff67 	bl	8002410 <HAL_GetTick>
 8009542:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800954c:	4b3d      	ldr	r3, [pc, #244]	@ (8009644 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	00da      	lsls	r2, r3, #3
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	0d1b      	lsrs	r3, r3, #20
 800955c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009564:	e061      	b.n	800962a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800956c:	d107      	bne.n	800957e <SPI_WaitFifoStateUntilTimeout+0x62>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800957c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009584:	d051      	beq.n	800962a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009586:	f7f8 ff43 	bl	8002410 <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009592:	429a      	cmp	r2, r3
 8009594:	d902      	bls.n	800959c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	d13d      	bne.n	8009618 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095b4:	d111      	bne.n	80095da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095be:	d004      	beq.n	80095ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c8:	d107      	bne.n	80095da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e2:	d10f      	bne.n	8009604 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009602:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e011      	b.n	800963c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
 8009622:	e002      	b.n	800962a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	3b01      	subs	r3, #1
 8009628:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4013      	ands	r3, r2
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d195      	bne.n	8009566 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3728      	adds	r7, #40	@ 0x28
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	20000000 	.word	0x20000000

08009648 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800965c:	d111      	bne.n	8009682 <SPI_EndRxTransaction+0x3a>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009666:	d004      	beq.n	8009672 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009670:	d107      	bne.n	8009682 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009680:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800968a:	d112      	bne.n	80096b2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2200      	movs	r2, #0
 8009694:	2180      	movs	r1, #128	@ 0x80
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff feb8 	bl	800940c <SPI_WaitFlagStateUntilTimeout>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d021      	beq.n	80096e6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a6:	f043 0220 	orr.w	r2, r3, #32
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e03d      	b.n	800972e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80096b2:	4b21      	ldr	r3, [pc, #132]	@ (8009738 <SPI_EndRxTransaction+0xf0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a21      	ldr	r2, [pc, #132]	@ (800973c <SPI_EndRxTransaction+0xf4>)
 80096b8:	fba2 2303 	umull	r2, r3, r2, r3
 80096bc:	0d5b      	lsrs	r3, r3, #21
 80096be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
 80096c6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096de:	2b80      	cmp	r3, #128	@ 0x80
 80096e0:	d0f2      	beq.n	80096c8 <SPI_EndRxTransaction+0x80>
 80096e2:	e000      	b.n	80096e6 <SPI_EndRxTransaction+0x9e>
        break;
 80096e4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096ee:	d11d      	bne.n	800972c <SPI_EndRxTransaction+0xe4>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096f8:	d004      	beq.n	8009704 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009702:	d113      	bne.n	800972c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff ff03 	bl	800951c <SPI_WaitFifoStateUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d007      	beq.n	800972c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009720:	f043 0220 	orr.w	r2, r3, #32
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e000      	b.n	800972e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20000000 	.word	0x20000000
 800973c:	165e9f81 	.word	0x165e9f81

08009740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af02      	add	r7, sp, #8
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2200      	movs	r2, #0
 8009754:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fedf 	bl	800951c <SPI_WaitFifoStateUntilTimeout>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d007      	beq.n	8009774 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009768:	f043 0220 	orr.w	r2, r3, #32
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e046      	b.n	8009802 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009774:	4b25      	ldr	r3, [pc, #148]	@ (800980c <SPI_EndRxTxTransaction+0xcc>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a25      	ldr	r2, [pc, #148]	@ (8009810 <SPI_EndRxTxTransaction+0xd0>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	0d5b      	lsrs	r3, r3, #21
 8009780:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009784:	fb02 f303 	mul.w	r3, r2, r3
 8009788:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009792:	d112      	bne.n	80097ba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	2180      	movs	r1, #128	@ 0x80
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f7ff fe34 	bl	800940c <SPI_WaitFlagStateUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d016      	beq.n	80097d8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097ae:	f043 0220 	orr.w	r2, r3, #32
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e023      	b.n	8009802 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00a      	beq.n	80097d6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097d0:	2b80      	cmp	r3, #128	@ 0x80
 80097d2:	d0f2      	beq.n	80097ba <SPI_EndRxTxTransaction+0x7a>
 80097d4:	e000      	b.n	80097d8 <SPI_EndRxTxTransaction+0x98>
        break;
 80097d6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2200      	movs	r2, #0
 80097e0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f7ff fe99 	bl	800951c <SPI_WaitFifoStateUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d007      	beq.n	8009800 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097f4:	f043 0220 	orr.w	r2, r3, #32
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e000      	b.n	8009802 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000000 	.word	0x20000000
 8009810:	165e9f81 	.word	0x165e9f81

08009814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e049      	b.n	80098ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d106      	bne.n	8009840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7f8 fa12 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2202      	movs	r2, #2
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3304      	adds	r3, #4
 8009850:	4619      	mov	r1, r3
 8009852:	4610      	mov	r0, r2
 8009854:	f000 faa8 	bl	8009da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d001      	beq.n	80098dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e054      	b.n	8009986 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a26      	ldr	r2, [pc, #152]	@ (8009994 <HAL_TIM_Base_Start_IT+0xd0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d022      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x80>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009906:	d01d      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x80>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a22      	ldr	r2, [pc, #136]	@ (8009998 <HAL_TIM_Base_Start_IT+0xd4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d018      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x80>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a21      	ldr	r2, [pc, #132]	@ (800999c <HAL_TIM_Base_Start_IT+0xd8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d013      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x80>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a1f      	ldr	r2, [pc, #124]	@ (80099a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00e      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x80>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a1e      	ldr	r2, [pc, #120]	@ (80099a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d009      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x80>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a1c      	ldr	r2, [pc, #112]	@ (80099a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x80>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1b      	ldr	r2, [pc, #108]	@ (80099ac <HAL_TIM_Base_Start_IT+0xe8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d115      	bne.n	8009970 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	4b19      	ldr	r3, [pc, #100]	@ (80099b0 <HAL_TIM_Base_Start_IT+0xec>)
 800994c:	4013      	ands	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b06      	cmp	r3, #6
 8009954:	d015      	beq.n	8009982 <HAL_TIM_Base_Start_IT+0xbe>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800995c:	d011      	beq.n	8009982 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f042 0201 	orr.w	r2, r2, #1
 800996c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800996e:	e008      	b.n	8009982 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f042 0201 	orr.w	r2, r2, #1
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	e000      	b.n	8009984 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	40010000 	.word	0x40010000
 8009998:	40000400 	.word	0x40000400
 800999c:	40000800 	.word	0x40000800
 80099a0:	40000c00 	.word	0x40000c00
 80099a4:	40010400 	.word	0x40010400
 80099a8:	40014000 	.word	0x40014000
 80099ac:	40001800 	.word	0x40001800
 80099b0:	00010007 	.word	0x00010007

080099b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d020      	beq.n	8009a18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01b      	beq.n	8009a18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f06f 0202 	mvn.w	r2, #2
 80099e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f9b4 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009a04:	e005      	b.n	8009a12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9a6 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f9b7 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f003 0304 	and.w	r3, r3, #4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d020      	beq.n	8009a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01b      	beq.n	8009a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0204 	mvn.w	r2, #4
 8009a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f98e 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009a50:	e005      	b.n	8009a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f980 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f991 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f003 0308 	and.w	r3, r3, #8
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d020      	beq.n	8009ab0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01b      	beq.n	8009ab0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f06f 0208 	mvn.w	r2, #8
 8009a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2204      	movs	r2, #4
 8009a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f968 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009a9c:	e005      	b.n	8009aaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f95a 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f96b 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d020      	beq.n	8009afc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f003 0310 	and.w	r3, r3, #16
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01b      	beq.n	8009afc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0210 	mvn.w	r2, #16
 8009acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2208      	movs	r2, #8
 8009ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f942 	bl	8009d6c <HAL_TIM_IC_CaptureCallback>
 8009ae8:	e005      	b.n	8009af6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f934 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f945 	bl	8009d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00c      	beq.n	8009b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d007      	beq.n	8009b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f06f 0201 	mvn.w	r2, #1
 8009b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7f7 fbaa 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d104      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00c      	beq.n	8009b4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d007      	beq.n	8009b4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fb05 	bl	800a158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00c      	beq.n	8009b72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d007      	beq.n	8009b72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fafd 	bl	800a16c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00c      	beq.n	8009b96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d007      	beq.n	8009b96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f8ff 	bl	8009d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00c      	beq.n	8009bba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f06f 0220 	mvn.w	r2, #32
 8009bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fac5 	bl	800a144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bba:	bf00      	nop
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_TIM_ConfigClockSource+0x1c>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e0b4      	b.n	8009d4a <HAL_TIM_ConfigClockSource+0x186>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	4b56      	ldr	r3, [pc, #344]	@ (8009d54 <HAL_TIM_ConfigClockSource+0x190>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c18:	d03e      	beq.n	8009c98 <HAL_TIM_ConfigClockSource+0xd4>
 8009c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c1e:	f200 8087 	bhi.w	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c26:	f000 8086 	beq.w	8009d36 <HAL_TIM_ConfigClockSource+0x172>
 8009c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c2e:	d87f      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c30:	2b70      	cmp	r3, #112	@ 0x70
 8009c32:	d01a      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0xa6>
 8009c34:	2b70      	cmp	r3, #112	@ 0x70
 8009c36:	d87b      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c38:	2b60      	cmp	r3, #96	@ 0x60
 8009c3a:	d050      	beq.n	8009cde <HAL_TIM_ConfigClockSource+0x11a>
 8009c3c:	2b60      	cmp	r3, #96	@ 0x60
 8009c3e:	d877      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c40:	2b50      	cmp	r3, #80	@ 0x50
 8009c42:	d03c      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0xfa>
 8009c44:	2b50      	cmp	r3, #80	@ 0x50
 8009c46:	d873      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c48:	2b40      	cmp	r3, #64	@ 0x40
 8009c4a:	d058      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x13a>
 8009c4c:	2b40      	cmp	r3, #64	@ 0x40
 8009c4e:	d86f      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c50:	2b30      	cmp	r3, #48	@ 0x30
 8009c52:	d064      	beq.n	8009d1e <HAL_TIM_ConfigClockSource+0x15a>
 8009c54:	2b30      	cmp	r3, #48	@ 0x30
 8009c56:	d86b      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c58:	2b20      	cmp	r3, #32
 8009c5a:	d060      	beq.n	8009d1e <HAL_TIM_ConfigClockSource+0x15a>
 8009c5c:	2b20      	cmp	r3, #32
 8009c5e:	d867      	bhi.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d05c      	beq.n	8009d1e <HAL_TIM_ConfigClockSource+0x15a>
 8009c64:	2b10      	cmp	r3, #16
 8009c66:	d05a      	beq.n	8009d1e <HAL_TIM_ConfigClockSource+0x15a>
 8009c68:	e062      	b.n	8009d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c7a:	f000 f9b5 	bl	8009fe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	609a      	str	r2, [r3, #8]
      break;
 8009c96:	e04f      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ca8:	f000 f99e 	bl	8009fe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cba:	609a      	str	r2, [r3, #8]
      break;
 8009cbc:	e03c      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f000 f912 	bl	8009ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2150      	movs	r1, #80	@ 0x50
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f96b 	bl	8009fb2 <TIM_ITRx_SetConfig>
      break;
 8009cdc:	e02c      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cea:	461a      	mov	r2, r3
 8009cec:	f000 f931 	bl	8009f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2160      	movs	r1, #96	@ 0x60
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f95b 	bl	8009fb2 <TIM_ITRx_SetConfig>
      break;
 8009cfc:	e01c      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f000 f8f2 	bl	8009ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2140      	movs	r1, #64	@ 0x40
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f94b 	bl	8009fb2 <TIM_ITRx_SetConfig>
      break;
 8009d1c:	e00c      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4619      	mov	r1, r3
 8009d28:	4610      	mov	r0, r2
 8009d2a:	f000 f942 	bl	8009fb2 <TIM_ITRx_SetConfig>
      break;
 8009d2e:	e003      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	73fb      	strb	r3, [r7, #15]
      break;
 8009d34:	e000      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	fffeff88 	.word	0xfffeff88

08009d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a43      	ldr	r2, [pc, #268]	@ (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d013      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dc6:	d00f      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a40      	ldr	r2, [pc, #256]	@ (8009ecc <TIM_Base_SetConfig+0x124>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d00b      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8009ed0 <TIM_Base_SetConfig+0x128>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d007      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a3e      	ldr	r2, [pc, #248]	@ (8009ed4 <TIM_Base_SetConfig+0x12c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d003      	beq.n	8009de8 <TIM_Base_SetConfig+0x40>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a3d      	ldr	r2, [pc, #244]	@ (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d108      	bne.n	8009dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a32      	ldr	r2, [pc, #200]	@ (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d02b      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e08:	d027      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8009ecc <TIM_Base_SetConfig+0x124>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d023      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a2e      	ldr	r2, [pc, #184]	@ (8009ed0 <TIM_Base_SetConfig+0x128>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d01f      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8009ed4 <TIM_Base_SetConfig+0x12c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d01b      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a2c      	ldr	r2, [pc, #176]	@ (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d017      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8009edc <TIM_Base_SetConfig+0x134>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a2a      	ldr	r2, [pc, #168]	@ (8009ee0 <TIM_Base_SetConfig+0x138>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d00f      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a29      	ldr	r2, [pc, #164]	@ (8009ee4 <TIM_Base_SetConfig+0x13c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00b      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a28      	ldr	r2, [pc, #160]	@ (8009ee8 <TIM_Base_SetConfig+0x140>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d007      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a27      	ldr	r2, [pc, #156]	@ (8009eec <TIM_Base_SetConfig+0x144>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d003      	beq.n	8009e5a <TIM_Base_SetConfig+0xb2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a26      	ldr	r2, [pc, #152]	@ (8009ef0 <TIM_Base_SetConfig+0x148>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d108      	bne.n	8009e6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009ec8 <TIM_Base_SetConfig+0x120>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d003      	beq.n	8009e9a <TIM_Base_SetConfig+0xf2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a10      	ldr	r2, [pc, #64]	@ (8009ed8 <TIM_Base_SetConfig+0x130>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d103      	bne.n	8009ea2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f043 0204 	orr.w	r2, r3, #4
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	601a      	str	r2, [r3, #0]
}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	40010000 	.word	0x40010000
 8009ecc:	40000400 	.word	0x40000400
 8009ed0:	40000800 	.word	0x40000800
 8009ed4:	40000c00 	.word	0x40000c00
 8009ed8:	40010400 	.word	0x40010400
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	40014800 	.word	0x40014800
 8009ee8:	40001800 	.word	0x40001800
 8009eec:	40001c00 	.word	0x40001c00
 8009ef0:	40002000 	.word	0x40002000

08009ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	f023 0201 	bic.w	r2, r3, #1
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f023 030a 	bic.w	r3, r3, #10
 8009f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	621a      	str	r2, [r3, #32]
}
 8009f46:	bf00      	nop
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b087      	sub	sp, #28
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	f023 0210 	bic.w	r2, r3, #16
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	031b      	lsls	r3, r3, #12
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b085      	sub	sp, #20
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	f043 0307 	orr.w	r3, r3, #7
 8009fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	609a      	str	r2, [r3, #8]
}
 8009fdc:	bf00      	nop
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	021a      	lsls	r2, r3, #8
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	4313      	orrs	r3, r2
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	4313      	orrs	r3, r2
 800a014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	609a      	str	r2, [r3, #8]
}
 800a01c:	bf00      	nop
 800a01e:	371c      	adds	r7, #28
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d101      	bne.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a03c:	2302      	movs	r3, #2
 800a03e:	e06d      	b.n	800a11c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a30      	ldr	r2, [pc, #192]	@ (800a128 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d004      	beq.n	800a074 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a2f      	ldr	r2, [pc, #188]	@ (800a12c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d108      	bne.n	800a086 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a07a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a08c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a20      	ldr	r2, [pc, #128]	@ (800a128 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d022      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b2:	d01d      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d018      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a1c      	ldr	r2, [pc, #112]	@ (800a134 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d013      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a1a      	ldr	r2, [pc, #104]	@ (800a138 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d00e      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a15      	ldr	r2, [pc, #84]	@ (800a12c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d009      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a16      	ldr	r2, [pc, #88]	@ (800a13c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d004      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a15      	ldr	r2, [pc, #84]	@ (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10c      	bne.n	800a10a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	40010000 	.word	0x40010000
 800a12c:	40010400 	.word	0x40010400
 800a130:	40000400 	.word	0x40000400
 800a134:	40000800 	.word	0x40000800
 800a138:	40000c00 	.word	0x40000c00
 800a13c:	40014000 	.word	0x40014000
 800a140:	40001800 	.word	0x40001800

0800a144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e040      	b.n	800a214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7f7 fe5a 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2224      	movs	r2, #36	@ 0x24
 800a1ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f022 0201 	bic.w	r2, r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fece 	bl	800af68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc67 	bl	800aaa0 <UART_SetConfig>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d101      	bne.n	800a1dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e01b      	b.n	800a214 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0201 	orr.w	r2, r2, #1
 800a20a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 ff4d 	bl	800b0ac <UART_CheckIdleState>
 800a212:	4603      	mov	r3, r0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08a      	sub	sp, #40	@ 0x28
 800a220:	af02      	add	r7, sp, #8
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	4613      	mov	r3, r2
 800a22a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a230:	2b20      	cmp	r3, #32
 800a232:	d177      	bne.n	800a324 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <HAL_UART_Transmit+0x24>
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e070      	b.n	800a326 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2221      	movs	r2, #33	@ 0x21
 800a250:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a252:	f7f8 f8dd 	bl	8002410 <HAL_GetTick>
 800a256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	88fa      	ldrh	r2, [r7, #6]
 800a25c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	88fa      	ldrh	r2, [r7, #6]
 800a264:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a270:	d108      	bne.n	800a284 <HAL_UART_Transmit+0x68>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d104      	bne.n	800a284 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	e003      	b.n	800a28c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a28c:	e02f      	b.n	800a2ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2200      	movs	r2, #0
 800a296:	2180      	movs	r1, #128	@ 0x80
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 ff5e 	bl	800b15a <UART_WaitOnFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e03b      	b.n	800a326 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10b      	bne.n	800a2cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	61bb      	str	r3, [r7, #24]
 800a2ca:	e007      	b.n	800a2dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1c9      	bne.n	800a28e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2200      	movs	r2, #0
 800a302:	2140      	movs	r1, #64	@ 0x40
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f000 ff28 	bl	800b15a <UART_WaitOnFlagUntilTimeout>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d004      	beq.n	800a31a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2220      	movs	r2, #32
 800a314:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e005      	b.n	800a326 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2220      	movs	r2, #32
 800a31e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	e000      	b.n	800a326 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a324:	2302      	movs	r3, #2
  }
}
 800a326:	4618      	mov	r0, r3
 800a328:	3720      	adds	r7, #32
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a330:	b480      	push	{r7}
 800a332:	b08b      	sub	sp, #44	@ 0x2c
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a342:	2b20      	cmp	r3, #32
 800a344:	d147      	bne.n	800a3d6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <HAL_UART_Transmit_IT+0x22>
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e040      	b.n	800a3d8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	88fa      	ldrh	r2, [r7, #6]
 800a360:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	88fa      	ldrh	r2, [r7, #6]
 800a368:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2221      	movs	r2, #33	@ 0x21
 800a37e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a388:	d107      	bne.n	800a39a <HAL_UART_Transmit_IT+0x6a>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d103      	bne.n	800a39a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4a13      	ldr	r2, [pc, #76]	@ (800a3e4 <HAL_UART_Transmit_IT+0xb4>)
 800a396:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a398:	e002      	b.n	800a3a0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	4a12      	ldr	r2, [pc, #72]	@ (800a3e8 <HAL_UART_Transmit_IT+0xb8>)
 800a39e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	623b      	str	r3, [r7, #32]
 800a3c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	69f9      	ldr	r1, [r7, #28]
 800a3c4:	6a3a      	ldr	r2, [r7, #32]
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e6      	bne.n	800a3a0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e000      	b.n	800a3d8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a3d6:	2302      	movs	r3, #2
  }
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	372c      	adds	r7, #44	@ 0x2c
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	0800b7b1 	.word	0x0800b7b1
 800a3e8:	0800b6fb 	.word	0x0800b6fb

0800a3ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b08a      	sub	sp, #40	@ 0x28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a400:	2b20      	cmp	r3, #32
 800a402:	d132      	bne.n	800a46a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <HAL_UART_Receive_DMA+0x24>
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e02b      	b.n	800a46c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d018      	beq.n	800a45a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	613b      	str	r3, [r7, #16]
   return(result);
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a43c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a446:	623b      	str	r3, [r7, #32]
 800a448:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	69f9      	ldr	r1, [r7, #28]
 800a44c:	6a3a      	ldr	r2, [r7, #32]
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	61bb      	str	r3, [r7, #24]
   return(result);
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e6      	bne.n	800a428 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	461a      	mov	r2, r3
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f000 fee7 	bl	800b234 <UART_Start_Receive_DMA>
 800a466:	4603      	mov	r3, r0
 800a468:	e000      	b.n	800a46c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a46a:	2302      	movs	r3, #2
  }
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3728      	adds	r7, #40	@ 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b0ba      	sub	sp, #232	@ 0xe8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a49a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a49e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a4a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d115      	bne.n	800a4dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a4b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4b4:	f003 0320 	and.w	r3, r3, #32
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00f      	beq.n	800a4dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a4bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4c0:	f003 0320 	and.w	r3, r3, #32
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d009      	beq.n	800a4dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 82b1 	beq.w	800aa34 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	4798      	blx	r3
      }
      return;
 800a4da:	e2ab      	b.n	800aa34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 8117 	beq.w	800a714 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a4f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a4f6:	4b85      	ldr	r3, [pc, #532]	@ (800a70c <HAL_UART_IRQHandler+0x298>)
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 810a 	beq.w	800a714 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d011      	beq.n	800a530 <HAL_UART_IRQHandler+0xbc>
 800a50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00b      	beq.n	800a530 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2201      	movs	r2, #1
 800a51e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a526:	f043 0201 	orr.w	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d011      	beq.n	800a560 <HAL_UART_IRQHandler+0xec>
 800a53c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2202      	movs	r2, #2
 800a54e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a556:	f043 0204 	orr.w	r2, r3, #4
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d011      	beq.n	800a590 <HAL_UART_IRQHandler+0x11c>
 800a56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2204      	movs	r2, #4
 800a57e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a586:	f043 0202 	orr.w	r2, r3, #2
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a594:	f003 0308 	and.w	r3, r3, #8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d017      	beq.n	800a5cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a0:	f003 0320 	and.w	r3, r3, #32
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d105      	bne.n	800a5b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a5a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2208      	movs	r2, #8
 800a5ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5c2:	f043 0208 	orr.w	r2, r3, #8
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d012      	beq.n	800a5fe <HAL_UART_IRQHandler+0x18a>
 800a5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00c      	beq.n	800a5fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5f4:	f043 0220 	orr.w	r2, r3, #32
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 8217 	beq.w	800aa38 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a60e:	f003 0320 	and.w	r3, r3, #32
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00d      	beq.n	800a632 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a61a:	f003 0320 	and.w	r3, r3, #32
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a646:	2b40      	cmp	r3, #64	@ 0x40
 800a648:	d005      	beq.n	800a656 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a64a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a64e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a652:	2b00      	cmp	r3, #0
 800a654:	d04f      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 feb2 	bl	800b3c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a666:	2b40      	cmp	r3, #64	@ 0x40
 800a668:	d141      	bne.n	800a6ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a680:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3308      	adds	r3, #8
 800a692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a696:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a69a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a6a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a6ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1d9      	bne.n	800a66a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d013      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6c2:	4a13      	ldr	r2, [pc, #76]	@ (800a710 <HAL_UART_IRQHandler+0x29c>)
 800a6c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f8 fdd2 	bl	8003274 <HAL_DMA_Abort_IT>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d017      	beq.n	800a706 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e4:	e00f      	b.n	800a706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f9c4 	bl	800aa74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ec:	e00b      	b.n	800a706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f9c0 	bl	800aa74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f4:	e007      	b.n	800a706 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f9bc 	bl	800aa74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a704:	e198      	b.n	800aa38 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a706:	bf00      	nop
    return;
 800a708:	e196      	b.n	800aa38 <HAL_UART_IRQHandler+0x5c4>
 800a70a:	bf00      	nop
 800a70c:	04000120 	.word	0x04000120
 800a710:	0800b6d7 	.word	0x0800b6d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a718:	2b01      	cmp	r3, #1
 800a71a:	f040 8166 	bne.w	800a9ea <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a722:	f003 0310 	and.w	r3, r3, #16
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 815f 	beq.w	800a9ea <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a72c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 8158 	beq.w	800a9ea <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2210      	movs	r2, #16
 800a740:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a74c:	2b40      	cmp	r3, #64	@ 0x40
 800a74e:	f040 80d0 	bne.w	800a8f2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a75e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 80ab 	beq.w	800a8be <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a76e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a772:	429a      	cmp	r2, r3
 800a774:	f080 80a3 	bcs.w	800a8be <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a77e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a78c:	f000 8086 	beq.w	800a89c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a79c:	e853 3f00 	ldrex	r3, [r3]
 800a7a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a7a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a7be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1da      	bne.n	800a790 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7ec:	f023 0301 	bic.w	r3, r3, #1
 800a7f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a802:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a804:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a806:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e1      	bne.n	800a7da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a82c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3308      	adds	r3, #8
 800a836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a83a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a83c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a840:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e3      	bne.n	800a816 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2220      	movs	r2, #32
 800a852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a864:	e853 3f00 	ldrex	r3, [r3]
 800a868:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a86a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a86c:	f023 0310 	bic.w	r3, r3, #16
 800a870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	461a      	mov	r2, r3
 800a87a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a87e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a880:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a886:	e841 2300 	strex	r3, r2, [r1]
 800a88a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a88c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1e4      	bne.n	800a85c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a896:	4618      	mov	r0, r3
 800a898:	f7f8 fc7c 	bl	8003194 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f8e6 	bl	800aa88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a8bc:	e0be      	b.n	800aa3c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a8c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	f040 80b7 	bne.w	800aa3c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8d8:	f040 80b0 	bne.w	800aa3c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f8cc 	bl	800aa88 <HAL_UARTEx_RxEventCallback>
      return;
 800a8f0:	e0a4      	b.n	800aa3c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 8096 	beq.w	800aa40 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800a914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 8091 	beq.w	800aa40 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a940:	647b      	str	r3, [r7, #68]	@ 0x44
 800a942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a948:	e841 2300 	strex	r3, r2, [r1]
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e4      	bne.n	800a91e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95e:	e853 3f00 	ldrex	r3, [r3]
 800a962:	623b      	str	r3, [r7, #32]
   return(result);
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	f023 0301 	bic.w	r3, r3, #1
 800a96a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3308      	adds	r3, #8
 800a974:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a978:	633a      	str	r2, [r7, #48]	@ 0x30
 800a97a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a980:	e841 2300 	strex	r3, r2, [r1]
 800a984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e3      	bne.n	800a954 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f023 0310 	bic.w	r3, r3, #16
 800a9b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	69b9      	ldr	r1, [r7, #24]
 800a9c8:	69fa      	ldr	r2, [r7, #28]
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e4      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f850 	bl	800aa88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9e8:	e02a      	b.n	800aa40 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00e      	beq.n	800aa14 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a9f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d01c      	beq.n	800aa44 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	4798      	blx	r3
    }
    return;
 800aa12:	e017      	b.n	800aa44 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d012      	beq.n	800aa46 <HAL_UART_IRQHandler+0x5d2>
 800aa20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00c      	beq.n	800aa46 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 ff1f 	bl	800b870 <UART_EndTransmit_IT>
    return;
 800aa32:	e008      	b.n	800aa46 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aa34:	bf00      	nop
 800aa36:	e006      	b.n	800aa46 <HAL_UART_IRQHandler+0x5d2>
    return;
 800aa38:	bf00      	nop
 800aa3a:	e004      	b.n	800aa46 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aa3c:	bf00      	nop
 800aa3e:	e002      	b.n	800aa46 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aa40:	bf00      	nop
 800aa42:	e000      	b.n	800aa46 <HAL_UART_IRQHandler+0x5d2>
    return;
 800aa44:	bf00      	nop
  }

}
 800aa46:	37e8      	adds	r7, #232	@ 0xe8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	431a      	orrs	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4ba6      	ldr	r3, [pc, #664]	@ (800ad64 <UART_SetConfig+0x2c4>)
 800aacc:	4013      	ands	r3, r2
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	6979      	ldr	r1, [r7, #20]
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a94      	ldr	r2, [pc, #592]	@ (800ad68 <UART_SetConfig+0x2c8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d120      	bne.n	800ab5e <UART_SetConfig+0xbe>
 800ab1c:	4b93      	ldr	r3, [pc, #588]	@ (800ad6c <UART_SetConfig+0x2cc>)
 800ab1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d816      	bhi.n	800ab58 <UART_SetConfig+0xb8>
 800ab2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab30 <UART_SetConfig+0x90>)
 800ab2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab30:	0800ab41 	.word	0x0800ab41
 800ab34:	0800ab4d 	.word	0x0800ab4d
 800ab38:	0800ab47 	.word	0x0800ab47
 800ab3c:	0800ab53 	.word	0x0800ab53
 800ab40:	2301      	movs	r3, #1
 800ab42:	77fb      	strb	r3, [r7, #31]
 800ab44:	e150      	b.n	800ade8 <UART_SetConfig+0x348>
 800ab46:	2302      	movs	r3, #2
 800ab48:	77fb      	strb	r3, [r7, #31]
 800ab4a:	e14d      	b.n	800ade8 <UART_SetConfig+0x348>
 800ab4c:	2304      	movs	r3, #4
 800ab4e:	77fb      	strb	r3, [r7, #31]
 800ab50:	e14a      	b.n	800ade8 <UART_SetConfig+0x348>
 800ab52:	2308      	movs	r3, #8
 800ab54:	77fb      	strb	r3, [r7, #31]
 800ab56:	e147      	b.n	800ade8 <UART_SetConfig+0x348>
 800ab58:	2310      	movs	r3, #16
 800ab5a:	77fb      	strb	r3, [r7, #31]
 800ab5c:	e144      	b.n	800ade8 <UART_SetConfig+0x348>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a83      	ldr	r2, [pc, #524]	@ (800ad70 <UART_SetConfig+0x2d0>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d132      	bne.n	800abce <UART_SetConfig+0x12e>
 800ab68:	4b80      	ldr	r3, [pc, #512]	@ (800ad6c <UART_SetConfig+0x2cc>)
 800ab6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab6e:	f003 030c 	and.w	r3, r3, #12
 800ab72:	2b0c      	cmp	r3, #12
 800ab74:	d828      	bhi.n	800abc8 <UART_SetConfig+0x128>
 800ab76:	a201      	add	r2, pc, #4	@ (adr r2, 800ab7c <UART_SetConfig+0xdc>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800abb1 	.word	0x0800abb1
 800ab80:	0800abc9 	.word	0x0800abc9
 800ab84:	0800abc9 	.word	0x0800abc9
 800ab88:	0800abc9 	.word	0x0800abc9
 800ab8c:	0800abbd 	.word	0x0800abbd
 800ab90:	0800abc9 	.word	0x0800abc9
 800ab94:	0800abc9 	.word	0x0800abc9
 800ab98:	0800abc9 	.word	0x0800abc9
 800ab9c:	0800abb7 	.word	0x0800abb7
 800aba0:	0800abc9 	.word	0x0800abc9
 800aba4:	0800abc9 	.word	0x0800abc9
 800aba8:	0800abc9 	.word	0x0800abc9
 800abac:	0800abc3 	.word	0x0800abc3
 800abb0:	2300      	movs	r3, #0
 800abb2:	77fb      	strb	r3, [r7, #31]
 800abb4:	e118      	b.n	800ade8 <UART_SetConfig+0x348>
 800abb6:	2302      	movs	r3, #2
 800abb8:	77fb      	strb	r3, [r7, #31]
 800abba:	e115      	b.n	800ade8 <UART_SetConfig+0x348>
 800abbc:	2304      	movs	r3, #4
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e112      	b.n	800ade8 <UART_SetConfig+0x348>
 800abc2:	2308      	movs	r3, #8
 800abc4:	77fb      	strb	r3, [r7, #31]
 800abc6:	e10f      	b.n	800ade8 <UART_SetConfig+0x348>
 800abc8:	2310      	movs	r3, #16
 800abca:	77fb      	strb	r3, [r7, #31]
 800abcc:	e10c      	b.n	800ade8 <UART_SetConfig+0x348>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a68      	ldr	r2, [pc, #416]	@ (800ad74 <UART_SetConfig+0x2d4>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d120      	bne.n	800ac1a <UART_SetConfig+0x17a>
 800abd8:	4b64      	ldr	r3, [pc, #400]	@ (800ad6c <UART_SetConfig+0x2cc>)
 800abda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800abe2:	2b30      	cmp	r3, #48	@ 0x30
 800abe4:	d013      	beq.n	800ac0e <UART_SetConfig+0x16e>
 800abe6:	2b30      	cmp	r3, #48	@ 0x30
 800abe8:	d814      	bhi.n	800ac14 <UART_SetConfig+0x174>
 800abea:	2b20      	cmp	r3, #32
 800abec:	d009      	beq.n	800ac02 <UART_SetConfig+0x162>
 800abee:	2b20      	cmp	r3, #32
 800abf0:	d810      	bhi.n	800ac14 <UART_SetConfig+0x174>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <UART_SetConfig+0x15c>
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d006      	beq.n	800ac08 <UART_SetConfig+0x168>
 800abfa:	e00b      	b.n	800ac14 <UART_SetConfig+0x174>
 800abfc:	2300      	movs	r3, #0
 800abfe:	77fb      	strb	r3, [r7, #31]
 800ac00:	e0f2      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac02:	2302      	movs	r3, #2
 800ac04:	77fb      	strb	r3, [r7, #31]
 800ac06:	e0ef      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac08:	2304      	movs	r3, #4
 800ac0a:	77fb      	strb	r3, [r7, #31]
 800ac0c:	e0ec      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac0e:	2308      	movs	r3, #8
 800ac10:	77fb      	strb	r3, [r7, #31]
 800ac12:	e0e9      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac14:	2310      	movs	r3, #16
 800ac16:	77fb      	strb	r3, [r7, #31]
 800ac18:	e0e6      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a56      	ldr	r2, [pc, #344]	@ (800ad78 <UART_SetConfig+0x2d8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d120      	bne.n	800ac66 <UART_SetConfig+0x1c6>
 800ac24:	4b51      	ldr	r3, [pc, #324]	@ (800ad6c <UART_SetConfig+0x2cc>)
 800ac26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac30:	d013      	beq.n	800ac5a <UART_SetConfig+0x1ba>
 800ac32:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac34:	d814      	bhi.n	800ac60 <UART_SetConfig+0x1c0>
 800ac36:	2b80      	cmp	r3, #128	@ 0x80
 800ac38:	d009      	beq.n	800ac4e <UART_SetConfig+0x1ae>
 800ac3a:	2b80      	cmp	r3, #128	@ 0x80
 800ac3c:	d810      	bhi.n	800ac60 <UART_SetConfig+0x1c0>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <UART_SetConfig+0x1a8>
 800ac42:	2b40      	cmp	r3, #64	@ 0x40
 800ac44:	d006      	beq.n	800ac54 <UART_SetConfig+0x1b4>
 800ac46:	e00b      	b.n	800ac60 <UART_SetConfig+0x1c0>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	77fb      	strb	r3, [r7, #31]
 800ac4c:	e0cc      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	77fb      	strb	r3, [r7, #31]
 800ac52:	e0c9      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac54:	2304      	movs	r3, #4
 800ac56:	77fb      	strb	r3, [r7, #31]
 800ac58:	e0c6      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	77fb      	strb	r3, [r7, #31]
 800ac5e:	e0c3      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac60:	2310      	movs	r3, #16
 800ac62:	77fb      	strb	r3, [r7, #31]
 800ac64:	e0c0      	b.n	800ade8 <UART_SetConfig+0x348>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a44      	ldr	r2, [pc, #272]	@ (800ad7c <UART_SetConfig+0x2dc>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d125      	bne.n	800acbc <UART_SetConfig+0x21c>
 800ac70:	4b3e      	ldr	r3, [pc, #248]	@ (800ad6c <UART_SetConfig+0x2cc>)
 800ac72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac7e:	d017      	beq.n	800acb0 <UART_SetConfig+0x210>
 800ac80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac84:	d817      	bhi.n	800acb6 <UART_SetConfig+0x216>
 800ac86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac8a:	d00b      	beq.n	800aca4 <UART_SetConfig+0x204>
 800ac8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac90:	d811      	bhi.n	800acb6 <UART_SetConfig+0x216>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <UART_SetConfig+0x1fe>
 800ac96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac9a:	d006      	beq.n	800acaa <UART_SetConfig+0x20a>
 800ac9c:	e00b      	b.n	800acb6 <UART_SetConfig+0x216>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	77fb      	strb	r3, [r7, #31]
 800aca2:	e0a1      	b.n	800ade8 <UART_SetConfig+0x348>
 800aca4:	2302      	movs	r3, #2
 800aca6:	77fb      	strb	r3, [r7, #31]
 800aca8:	e09e      	b.n	800ade8 <UART_SetConfig+0x348>
 800acaa:	2304      	movs	r3, #4
 800acac:	77fb      	strb	r3, [r7, #31]
 800acae:	e09b      	b.n	800ade8 <UART_SetConfig+0x348>
 800acb0:	2308      	movs	r3, #8
 800acb2:	77fb      	strb	r3, [r7, #31]
 800acb4:	e098      	b.n	800ade8 <UART_SetConfig+0x348>
 800acb6:	2310      	movs	r3, #16
 800acb8:	77fb      	strb	r3, [r7, #31]
 800acba:	e095      	b.n	800ade8 <UART_SetConfig+0x348>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a2f      	ldr	r2, [pc, #188]	@ (800ad80 <UART_SetConfig+0x2e0>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d125      	bne.n	800ad12 <UART_SetConfig+0x272>
 800acc6:	4b29      	ldr	r3, [pc, #164]	@ (800ad6c <UART_SetConfig+0x2cc>)
 800acc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800accc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800acd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acd4:	d017      	beq.n	800ad06 <UART_SetConfig+0x266>
 800acd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acda:	d817      	bhi.n	800ad0c <UART_SetConfig+0x26c>
 800acdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ace0:	d00b      	beq.n	800acfa <UART_SetConfig+0x25a>
 800ace2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ace6:	d811      	bhi.n	800ad0c <UART_SetConfig+0x26c>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <UART_SetConfig+0x254>
 800acec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acf0:	d006      	beq.n	800ad00 <UART_SetConfig+0x260>
 800acf2:	e00b      	b.n	800ad0c <UART_SetConfig+0x26c>
 800acf4:	2301      	movs	r3, #1
 800acf6:	77fb      	strb	r3, [r7, #31]
 800acf8:	e076      	b.n	800ade8 <UART_SetConfig+0x348>
 800acfa:	2302      	movs	r3, #2
 800acfc:	77fb      	strb	r3, [r7, #31]
 800acfe:	e073      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad00:	2304      	movs	r3, #4
 800ad02:	77fb      	strb	r3, [r7, #31]
 800ad04:	e070      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad06:	2308      	movs	r3, #8
 800ad08:	77fb      	strb	r3, [r7, #31]
 800ad0a:	e06d      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad0c:	2310      	movs	r3, #16
 800ad0e:	77fb      	strb	r3, [r7, #31]
 800ad10:	e06a      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a1b      	ldr	r2, [pc, #108]	@ (800ad84 <UART_SetConfig+0x2e4>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d138      	bne.n	800ad8e <UART_SetConfig+0x2ee>
 800ad1c:	4b13      	ldr	r3, [pc, #76]	@ (800ad6c <UART_SetConfig+0x2cc>)
 800ad1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ad26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad2a:	d017      	beq.n	800ad5c <UART_SetConfig+0x2bc>
 800ad2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad30:	d82a      	bhi.n	800ad88 <UART_SetConfig+0x2e8>
 800ad32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad36:	d00b      	beq.n	800ad50 <UART_SetConfig+0x2b0>
 800ad38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad3c:	d824      	bhi.n	800ad88 <UART_SetConfig+0x2e8>
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <UART_SetConfig+0x2aa>
 800ad42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad46:	d006      	beq.n	800ad56 <UART_SetConfig+0x2b6>
 800ad48:	e01e      	b.n	800ad88 <UART_SetConfig+0x2e8>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	77fb      	strb	r3, [r7, #31]
 800ad4e:	e04b      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad50:	2302      	movs	r3, #2
 800ad52:	77fb      	strb	r3, [r7, #31]
 800ad54:	e048      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad56:	2304      	movs	r3, #4
 800ad58:	77fb      	strb	r3, [r7, #31]
 800ad5a:	e045      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	77fb      	strb	r3, [r7, #31]
 800ad60:	e042      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad62:	bf00      	nop
 800ad64:	efff69f3 	.word	0xefff69f3
 800ad68:	40011000 	.word	0x40011000
 800ad6c:	40023800 	.word	0x40023800
 800ad70:	40004400 	.word	0x40004400
 800ad74:	40004800 	.word	0x40004800
 800ad78:	40004c00 	.word	0x40004c00
 800ad7c:	40005000 	.word	0x40005000
 800ad80:	40011400 	.word	0x40011400
 800ad84:	40007800 	.word	0x40007800
 800ad88:	2310      	movs	r3, #16
 800ad8a:	77fb      	strb	r3, [r7, #31]
 800ad8c:	e02c      	b.n	800ade8 <UART_SetConfig+0x348>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a72      	ldr	r2, [pc, #456]	@ (800af5c <UART_SetConfig+0x4bc>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d125      	bne.n	800ade4 <UART_SetConfig+0x344>
 800ad98:	4b71      	ldr	r3, [pc, #452]	@ (800af60 <UART_SetConfig+0x4c0>)
 800ad9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ada2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ada6:	d017      	beq.n	800add8 <UART_SetConfig+0x338>
 800ada8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800adac:	d817      	bhi.n	800adde <UART_SetConfig+0x33e>
 800adae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adb2:	d00b      	beq.n	800adcc <UART_SetConfig+0x32c>
 800adb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adb8:	d811      	bhi.n	800adde <UART_SetConfig+0x33e>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <UART_SetConfig+0x326>
 800adbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adc2:	d006      	beq.n	800add2 <UART_SetConfig+0x332>
 800adc4:	e00b      	b.n	800adde <UART_SetConfig+0x33e>
 800adc6:	2300      	movs	r3, #0
 800adc8:	77fb      	strb	r3, [r7, #31]
 800adca:	e00d      	b.n	800ade8 <UART_SetConfig+0x348>
 800adcc:	2302      	movs	r3, #2
 800adce:	77fb      	strb	r3, [r7, #31]
 800add0:	e00a      	b.n	800ade8 <UART_SetConfig+0x348>
 800add2:	2304      	movs	r3, #4
 800add4:	77fb      	strb	r3, [r7, #31]
 800add6:	e007      	b.n	800ade8 <UART_SetConfig+0x348>
 800add8:	2308      	movs	r3, #8
 800adda:	77fb      	strb	r3, [r7, #31]
 800addc:	e004      	b.n	800ade8 <UART_SetConfig+0x348>
 800adde:	2310      	movs	r3, #16
 800ade0:	77fb      	strb	r3, [r7, #31]
 800ade2:	e001      	b.n	800ade8 <UART_SetConfig+0x348>
 800ade4:	2310      	movs	r3, #16
 800ade6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adf0:	d15b      	bne.n	800aeaa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800adf2:	7ffb      	ldrb	r3, [r7, #31]
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d828      	bhi.n	800ae4a <UART_SetConfig+0x3aa>
 800adf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <UART_SetConfig+0x360>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae25 	.word	0x0800ae25
 800ae04:	0800ae2d 	.word	0x0800ae2d
 800ae08:	0800ae35 	.word	0x0800ae35
 800ae0c:	0800ae4b 	.word	0x0800ae4b
 800ae10:	0800ae3b 	.word	0x0800ae3b
 800ae14:	0800ae4b 	.word	0x0800ae4b
 800ae18:	0800ae4b 	.word	0x0800ae4b
 800ae1c:	0800ae4b 	.word	0x0800ae4b
 800ae20:	0800ae43 	.word	0x0800ae43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae24:	f7fc ffe4 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800ae28:	61b8      	str	r0, [r7, #24]
        break;
 800ae2a:	e013      	b.n	800ae54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae2c:	f7fc fff4 	bl	8007e18 <HAL_RCC_GetPCLK2Freq>
 800ae30:	61b8      	str	r0, [r7, #24]
        break;
 800ae32:	e00f      	b.n	800ae54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae34:	4b4b      	ldr	r3, [pc, #300]	@ (800af64 <UART_SetConfig+0x4c4>)
 800ae36:	61bb      	str	r3, [r7, #24]
        break;
 800ae38:	e00c      	b.n	800ae54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae3a:	f7fc ff07 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 800ae3e:	61b8      	str	r0, [r7, #24]
        break;
 800ae40:	e008      	b.n	800ae54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae46:	61bb      	str	r3, [r7, #24]
        break;
 800ae48:	e004      	b.n	800ae54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	77bb      	strb	r3, [r7, #30]
        break;
 800ae52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d074      	beq.n	800af44 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	005a      	lsls	r2, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	441a      	add	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	2b0f      	cmp	r3, #15
 800ae74:	d916      	bls.n	800aea4 <UART_SetConfig+0x404>
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae7c:	d212      	bcs.n	800aea4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	f023 030f 	bic.w	r3, r3, #15
 800ae86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	085b      	lsrs	r3, r3, #1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	89fb      	ldrh	r3, [r7, #14]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	89fa      	ldrh	r2, [r7, #14]
 800aea0:	60da      	str	r2, [r3, #12]
 800aea2:	e04f      	b.n	800af44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	77bb      	strb	r3, [r7, #30]
 800aea8:	e04c      	b.n	800af44 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aeaa:	7ffb      	ldrb	r3, [r7, #31]
 800aeac:	2b08      	cmp	r3, #8
 800aeae:	d828      	bhi.n	800af02 <UART_SetConfig+0x462>
 800aeb0:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb8 <UART_SetConfig+0x418>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800aedd 	.word	0x0800aedd
 800aebc:	0800aee5 	.word	0x0800aee5
 800aec0:	0800aeed 	.word	0x0800aeed
 800aec4:	0800af03 	.word	0x0800af03
 800aec8:	0800aef3 	.word	0x0800aef3
 800aecc:	0800af03 	.word	0x0800af03
 800aed0:	0800af03 	.word	0x0800af03
 800aed4:	0800af03 	.word	0x0800af03
 800aed8:	0800aefb 	.word	0x0800aefb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aedc:	f7fc ff88 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800aee0:	61b8      	str	r0, [r7, #24]
        break;
 800aee2:	e013      	b.n	800af0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee4:	f7fc ff98 	bl	8007e18 <HAL_RCC_GetPCLK2Freq>
 800aee8:	61b8      	str	r0, [r7, #24]
        break;
 800aeea:	e00f      	b.n	800af0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aeec:	4b1d      	ldr	r3, [pc, #116]	@ (800af64 <UART_SetConfig+0x4c4>)
 800aeee:	61bb      	str	r3, [r7, #24]
        break;
 800aef0:	e00c      	b.n	800af0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aef2:	f7fc feab 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 800aef6:	61b8      	str	r0, [r7, #24]
        break;
 800aef8:	e008      	b.n	800af0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aefa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aefe:	61bb      	str	r3, [r7, #24]
        break;
 800af00:	e004      	b.n	800af0c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	77bb      	strb	r3, [r7, #30]
        break;
 800af0a:	bf00      	nop
    }

    if (pclk != 0U)
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d018      	beq.n	800af44 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	085a      	lsrs	r2, r3, #1
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	441a      	add	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	fbb2 f3f3 	udiv	r3, r2, r3
 800af24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	2b0f      	cmp	r3, #15
 800af2a:	d909      	bls.n	800af40 <UART_SetConfig+0x4a0>
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af32:	d205      	bcs.n	800af40 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	b29a      	uxth	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	e001      	b.n	800af44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800af50:	7fbb      	ldrb	r3, [r7, #30]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3720      	adds	r7, #32
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	40007c00 	.word	0x40007c00
 800af60:	40023800 	.word	0x40023800
 800af64:	00f42400 	.word	0x00f42400

0800af68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af74:	f003 0308 	and.w	r3, r3, #8
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00a      	beq.n	800af92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	430a      	orrs	r2, r1
 800af90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af96:	f003 0301 	and.w	r3, r3, #1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb8:	f003 0302 	and.w	r3, r3, #2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00a      	beq.n	800afd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afda:	f003 0304 	and.w	r3, r3, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00a      	beq.n	800b03c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01a      	beq.n	800b07e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b066:	d10a      	bne.n	800b07e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00a      	beq.n	800b0a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	605a      	str	r2, [r3, #4]
  }
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b08c      	sub	sp, #48	@ 0x30
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0bc:	f7f7 f9a8 	bl	8002410 <HAL_GetTick>
 800b0c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0308 	and.w	r3, r3, #8
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d12e      	bne.n	800b12e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f83b 	bl	800b15a <UART_WaitOnFlagUntilTimeout>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d021      	beq.n	800b12e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0fe:	623b      	str	r3, [r7, #32]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	461a      	mov	r2, r3
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	61fb      	str	r3, [r7, #28]
 800b10a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	69b9      	ldr	r1, [r7, #24]
 800b10e:	69fa      	ldr	r2, [r7, #28]
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	617b      	str	r3, [r7, #20]
   return(result);
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e6      	bne.n	800b0ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2220      	movs	r2, #32
 800b120:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e011      	b.n	800b152 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2220      	movs	r2, #32
 800b132:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2220      	movs	r2, #32
 800b138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3728      	adds	r7, #40	@ 0x28
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	603b      	str	r3, [r7, #0]
 800b166:	4613      	mov	r3, r2
 800b168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b16a:	e04f      	b.n	800b20c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b172:	d04b      	beq.n	800b20c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b174:	f7f7 f94c 	bl	8002410 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	429a      	cmp	r2, r3
 800b182:	d302      	bcc.n	800b18a <UART_WaitOnFlagUntilTimeout+0x30>
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e04e      	b.n	800b22c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d037      	beq.n	800b20c <UART_WaitOnFlagUntilTimeout+0xb2>
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b80      	cmp	r3, #128	@ 0x80
 800b1a0:	d034      	beq.n	800b20c <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b40      	cmp	r3, #64	@ 0x40
 800b1a6:	d031      	beq.n	800b20c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	69db      	ldr	r3, [r3, #28]
 800b1ae:	f003 0308 	and.w	r3, r3, #8
 800b1b2:	2b08      	cmp	r3, #8
 800b1b4:	d110      	bne.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2208      	movs	r2, #8
 800b1bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 f8fe 	bl	800b3c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2208      	movs	r2, #8
 800b1c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e029      	b.n	800b22c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1e6:	d111      	bne.n	800b20c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 f8e4 	bl	800b3c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2220      	movs	r2, #32
 800b1fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e00f      	b.n	800b22c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	69da      	ldr	r2, [r3, #28]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	4013      	ands	r3, r2
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	429a      	cmp	r2, r3
 800b21a:	bf0c      	ite	eq
 800b21c:	2301      	moveq	r3, #1
 800b21e:	2300      	movne	r3, #0
 800b220:	b2db      	uxtb	r3, r3
 800b222:	461a      	mov	r2, r3
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	429a      	cmp	r2, r3
 800b228:	d0a0      	beq.n	800b16c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b096      	sub	sp, #88	@ 0x58
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4613      	mov	r3, r2
 800b240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	88fa      	ldrh	r2, [r7, #6]
 800b24c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2222      	movs	r2, #34	@ 0x22
 800b25c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b264:	2b00      	cmp	r3, #0
 800b266:	d028      	beq.n	800b2ba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b26c:	4a3e      	ldr	r2, [pc, #248]	@ (800b368 <UART_Start_Receive_DMA+0x134>)
 800b26e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b274:	4a3d      	ldr	r2, [pc, #244]	@ (800b36c <UART_Start_Receive_DMA+0x138>)
 800b276:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b27c:	4a3c      	ldr	r2, [pc, #240]	@ (800b370 <UART_Start_Receive_DMA+0x13c>)
 800b27e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b284:	2200      	movs	r2, #0
 800b286:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3324      	adds	r3, #36	@ 0x24
 800b292:	4619      	mov	r1, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b298:	461a      	mov	r2, r3
 800b29a:	88fb      	ldrh	r3, [r7, #6]
 800b29c:	f7f7 ff1a 	bl	80030d4 <HAL_DMA_Start_IT>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d009      	beq.n	800b2ba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2210      	movs	r2, #16
 800b2aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e051      	b.n	800b35e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d018      	beq.n	800b2f4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ca:	e853 3f00 	ldrex	r3, [r3]
 800b2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2e2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2e8:	e841 2300 	strex	r3, r2, [r1]
 800b2ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b2ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1e6      	bne.n	800b2c2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b306:	f043 0301 	orr.w	r3, r3, #1
 800b30a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3308      	adds	r3, #8
 800b312:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b314:	637a      	str	r2, [r7, #52]	@ 0x34
 800b316:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b31a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e5      	bne.n	800b2f4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3308      	adds	r3, #8
 800b32e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	e853 3f00 	ldrex	r3, [r3]
 800b336:	613b      	str	r3, [r7, #16]
   return(result);
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3308      	adds	r3, #8
 800b346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b348:	623a      	str	r2, [r7, #32]
 800b34a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	69f9      	ldr	r1, [r7, #28]
 800b34e:	6a3a      	ldr	r2, [r7, #32]
 800b350:	e841 2300 	strex	r3, r2, [r1]
 800b354:	61bb      	str	r3, [r7, #24]
   return(result);
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1e5      	bne.n	800b328 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3758      	adds	r7, #88	@ 0x58
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	0800b489 	.word	0x0800b489
 800b36c:	0800b5e7 	.word	0x0800b5e7
 800b370:	0800b659 	.word	0x0800b659

0800b374 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b089      	sub	sp, #36	@ 0x24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	e853 3f00 	ldrex	r3, [r3]
 800b388:	60bb      	str	r3, [r7, #8]
   return(result);
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b390:	61fb      	str	r3, [r7, #28]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	61bb      	str	r3, [r7, #24]
 800b39c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	6979      	ldr	r1, [r7, #20]
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	e841 2300 	strex	r3, r2, [r1]
 800b3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1e6      	bne.n	800b37c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b3b4:	bf00      	nop
 800b3b6:	3724      	adds	r7, #36	@ 0x24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b095      	sub	sp, #84	@ 0x54
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e6      	bne.n	800b3c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3308      	adds	r3, #8
 800b400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	61fb      	str	r3, [r7, #28]
   return(result);
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	f023 0301 	bic.w	r3, r3, #1
 800b410:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b41a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b41c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e5      	bne.n	800b3fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b432:	2b01      	cmp	r3, #1
 800b434:	d118      	bne.n	800b468 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	e853 3f00 	ldrex	r3, [r3]
 800b442:	60bb      	str	r3, [r7, #8]
   return(result);
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	f023 0310 	bic.w	r3, r3, #16
 800b44a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b454:	61bb      	str	r3, [r7, #24]
 800b456:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6979      	ldr	r1, [r7, #20]
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	613b      	str	r3, [r7, #16]
   return(result);
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e6      	bne.n	800b436 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b47c:	bf00      	nop
 800b47e:	3754      	adds	r7, #84	@ 0x54
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b09c      	sub	sp, #112	@ 0x70
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b494:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b49e:	d071      	beq.n	800b584 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b4b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b4cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e6      	bne.n	800b4a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	f023 0301 	bic.w	r3, r3, #1
 800b4f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b4fa:	643a      	str	r2, [r7, #64]	@ 0x40
 800b4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b500:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e5      	bne.n	800b4da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b50e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3308      	adds	r3, #8
 800b514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	e853 3f00 	ldrex	r3, [r3]
 800b51c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b524:	663b      	str	r3, [r7, #96]	@ 0x60
 800b526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b52e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b530:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b536:	e841 2300 	strex	r3, r2, [r1]
 800b53a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1e5      	bne.n	800b50e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b544:	2220      	movs	r2, #32
 800b546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b54a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b54c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d118      	bne.n	800b584 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	e853 3f00 	ldrex	r3, [r3]
 800b55e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f023 0310 	bic.w	r3, r3, #16
 800b566:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	461a      	mov	r2, r3
 800b56e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b570:	61bb      	str	r3, [r7, #24]
 800b572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b574:	6979      	ldr	r1, [r7, #20]
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	e841 2300 	strex	r3, r2, [r1]
 800b57c:	613b      	str	r3, [r7, #16]
   return(result);
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e6      	bne.n	800b552 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b586:	2200      	movs	r2, #0
 800b588:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b58c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d122      	bne.n	800b5d8 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800b592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b594:	2200      	movs	r2, #0
 800b596:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800b5a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b5aa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d204      	bcs.n	800b5bc <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b5b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800b5b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b5c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5d2:	f7ff fa59 	bl	800aa88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5d6:	e002      	b.n	800b5de <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800b5d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b5da:	f014 fb43 	bl	801fc64 <HAL_UART_RxCpltCallback>
}
 800b5de:	bf00      	nop
 800b5e0:	3770      	adds	r7, #112	@ 0x70
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d123      	bne.n	800b64a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b608:	085b      	lsrs	r3, r3, #1
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b620:	897a      	ldrh	r2, [r7, #10]
 800b622:	429a      	cmp	r2, r3
 800b624:	d803      	bhi.n	800b62e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	897a      	ldrh	r2, [r7, #10]
 800b62a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	b29b      	uxth	r3, r3
 800b640:	4619      	mov	r1, r3
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f7ff fa20 	bl	800aa88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b648:	e002      	b.n	800b650 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff fa08 	bl	800aa60 <HAL_UART_RxHalfCpltCallback>
}
 800b650:	bf00      	nop
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b664:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b66a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b672:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b67e:	2b80      	cmp	r3, #128	@ 0x80
 800b680:	d109      	bne.n	800b696 <UART_DMAError+0x3e>
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	2b21      	cmp	r3, #33	@ 0x21
 800b686:	d106      	bne.n	800b696 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800b690:	6978      	ldr	r0, [r7, #20]
 800b692:	f7ff fe6f 	bl	800b374 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6a0:	2b40      	cmp	r3, #64	@ 0x40
 800b6a2:	d109      	bne.n	800b6b8 <UART_DMAError+0x60>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b22      	cmp	r3, #34	@ 0x22
 800b6a8:	d106      	bne.n	800b6b8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800b6b2:	6978      	ldr	r0, [r7, #20]
 800b6b4:	f7ff fe84 	bl	800b3c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6be:	f043 0210 	orr.w	r2, r3, #16
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6c8:	6978      	ldr	r0, [r7, #20]
 800b6ca:	f7ff f9d3 	bl	800aa74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ce:	bf00      	nop
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f7ff f9c1 	bl	800aa74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b08f      	sub	sp, #60	@ 0x3c
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b706:	2b21      	cmp	r3, #33	@ 0x21
 800b708:	d14c      	bne.n	800b7a4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b710:	b29b      	uxth	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d132      	bne.n	800b77c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	e853 3f00 	ldrex	r3, [r3]
 800b722:	61fb      	str	r3, [r7, #28]
   return(result);
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b72a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	461a      	mov	r2, r3
 800b732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b736:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b73a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b73c:	e841 2300 	strex	r3, r2, [r1]
 800b740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1e6      	bne.n	800b716 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	e853 3f00 	ldrex	r3, [r3]
 800b754:	60bb      	str	r3, [r7, #8]
   return(result);
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b75c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	461a      	mov	r2, r3
 800b764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b766:	61bb      	str	r3, [r7, #24]
 800b768:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6979      	ldr	r1, [r7, #20]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	613b      	str	r3, [r7, #16]
   return(result);
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e6      	bne.n	800b748 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b77a:	e013      	b.n	800b7a4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b780:	781a      	ldrb	r2, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b798:	b29b      	uxth	r3, r3
 800b79a:	3b01      	subs	r3, #1
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b7a4:	bf00      	nop
 800b7a6:	373c      	adds	r7, #60	@ 0x3c
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b091      	sub	sp, #68	@ 0x44
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7bc:	2b21      	cmp	r3, #33	@ 0x21
 800b7be:	d151      	bne.n	800b864 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d132      	bne.n	800b832 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d4:	e853 3f00 	ldrex	r3, [r3]
 800b7d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b7da:	6a3b      	ldr	r3, [r7, #32]
 800b7dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7f2:	e841 2300 	strex	r3, r2, [r1]
 800b7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1e6      	bne.n	800b7cc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b812:	637b      	str	r3, [r7, #52]	@ 0x34
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	461a      	mov	r2, r3
 800b81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b81c:	61fb      	str	r3, [r7, #28]
 800b81e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b820:	69b9      	ldr	r1, [r7, #24]
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	e841 2300 	strex	r3, r2, [r1]
 800b828:	617b      	str	r3, [r7, #20]
   return(result);
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e6      	bne.n	800b7fe <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b830:	e018      	b.n	800b864 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b846:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b84c:	1c9a      	adds	r2, r3, #2
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b858:	b29b      	uxth	r3, r3
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b864:	bf00      	nop
 800b866:	3744      	adds	r7, #68	@ 0x44
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	60bb      	str	r3, [r7, #8]
   return(result);
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	61bb      	str	r3, [r7, #24]
 800b898:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6979      	ldr	r1, [r7, #20]
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e6      	bne.n	800b878 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2220      	movs	r2, #32
 800b8ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff f8c8 	bl	800aa4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8bc:	bf00      	nop
 800b8be:	3720      	adds	r7, #32
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800b8ca:	4b92      	ldr	r3, [pc, #584]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b8cc:	220a      	movs	r2, #10
 800b8ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800b8d0:	4b90      	ldr	r3, [pc, #576]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b8d6:	4b8f      	ldr	r3, [pc, #572]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800b8dc:	4b8d      	ldr	r3, [pc, #564]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b8de:	2264      	movs	r2, #100	@ 0x64
 800b8e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b8e2:	4b8d      	ldr	r3, [pc, #564]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b8e4:	22ff      	movs	r2, #255	@ 0xff
 800b8e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b8e8:	4b8b      	ldr	r3, [pc, #556]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b8ea:	22ff      	movs	r2, #255	@ 0xff
 800b8ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b8ee:	4b8a      	ldr	r3, [pc, #552]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b8f0:	22ff      	movs	r2, #255	@ 0xff
 800b8f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b8f4:	4b88      	ldr	r3, [pc, #544]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800b8fa:	4b88      	ldr	r3, [pc, #544]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800b8fc:	220a      	movs	r2, #10
 800b8fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b900:	4b86      	ldr	r3, [pc, #536]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800b902:	2200      	movs	r2, #0
 800b904:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b906:	4b85      	ldr	r3, [pc, #532]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800b908:	2201      	movs	r2, #1
 800b90a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800b90c:	4b83      	ldr	r3, [pc, #524]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800b90e:	2265      	movs	r2, #101	@ 0x65
 800b910:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b912:	2100      	movs	r1, #0
 800b914:	2000      	movs	r0, #0
 800b916:	f007 fc1b 	bl	8013150 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b91a:	4b7e      	ldr	r3, [pc, #504]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	061a      	lsls	r2, r3, #24
 800b920:	4b7c      	ldr	r3, [pc, #496]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b922:	785b      	ldrb	r3, [r3, #1]
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	431a      	orrs	r2, r3
 800b928:	4b7a      	ldr	r3, [pc, #488]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b92a:	789b      	ldrb	r3, [r3, #2]
 800b92c:	021b      	lsls	r3, r3, #8
 800b92e:	4313      	orrs	r3, r2
 800b930:	4a78      	ldr	r2, [pc, #480]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b932:	78d2      	ldrb	r2, [r2, #3]
 800b934:	4313      	orrs	r3, r2
 800b936:	061a      	lsls	r2, r3, #24
 800b938:	4b76      	ldr	r3, [pc, #472]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	0619      	lsls	r1, r3, #24
 800b93e:	4b75      	ldr	r3, [pc, #468]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b940:	785b      	ldrb	r3, [r3, #1]
 800b942:	041b      	lsls	r3, r3, #16
 800b944:	4319      	orrs	r1, r3
 800b946:	4b73      	ldr	r3, [pc, #460]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b948:	789b      	ldrb	r3, [r3, #2]
 800b94a:	021b      	lsls	r3, r3, #8
 800b94c:	430b      	orrs	r3, r1
 800b94e:	4971      	ldr	r1, [pc, #452]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b950:	78c9      	ldrb	r1, [r1, #3]
 800b952:	430b      	orrs	r3, r1
 800b954:	021b      	lsls	r3, r3, #8
 800b956:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b95a:	431a      	orrs	r2, r3
 800b95c:	4b6d      	ldr	r3, [pc, #436]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	0619      	lsls	r1, r3, #24
 800b962:	4b6c      	ldr	r3, [pc, #432]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b964:	785b      	ldrb	r3, [r3, #1]
 800b966:	041b      	lsls	r3, r3, #16
 800b968:	4319      	orrs	r1, r3
 800b96a:	4b6a      	ldr	r3, [pc, #424]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b96c:	789b      	ldrb	r3, [r3, #2]
 800b96e:	021b      	lsls	r3, r3, #8
 800b970:	430b      	orrs	r3, r1
 800b972:	4968      	ldr	r1, [pc, #416]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b974:	78c9      	ldrb	r1, [r1, #3]
 800b976:	430b      	orrs	r3, r1
 800b978:	0a1b      	lsrs	r3, r3, #8
 800b97a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b97e:	431a      	orrs	r2, r3
 800b980:	4b64      	ldr	r3, [pc, #400]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	0619      	lsls	r1, r3, #24
 800b986:	4b63      	ldr	r3, [pc, #396]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b988:	785b      	ldrb	r3, [r3, #1]
 800b98a:	041b      	lsls	r3, r3, #16
 800b98c:	4319      	orrs	r1, r3
 800b98e:	4b61      	ldr	r3, [pc, #388]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b990:	789b      	ldrb	r3, [r3, #2]
 800b992:	021b      	lsls	r3, r3, #8
 800b994:	430b      	orrs	r3, r1
 800b996:	495f      	ldr	r1, [pc, #380]	@ (800bb14 <MX_LWIP_Init+0x250>)
 800b998:	78c9      	ldrb	r1, [r1, #3]
 800b99a:	430b      	orrs	r3, r1
 800b99c:	0e1b      	lsrs	r3, r3, #24
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	4a5f      	ldr	r2, [pc, #380]	@ (800bb20 <MX_LWIP_Init+0x25c>)
 800b9a2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b9a4:	4b5c      	ldr	r3, [pc, #368]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	061a      	lsls	r2, r3, #24
 800b9aa:	4b5b      	ldr	r3, [pc, #364]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9ac:	785b      	ldrb	r3, [r3, #1]
 800b9ae:	041b      	lsls	r3, r3, #16
 800b9b0:	431a      	orrs	r2, r3
 800b9b2:	4b59      	ldr	r3, [pc, #356]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9b4:	789b      	ldrb	r3, [r3, #2]
 800b9b6:	021b      	lsls	r3, r3, #8
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	4a57      	ldr	r2, [pc, #348]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9bc:	78d2      	ldrb	r2, [r2, #3]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	061a      	lsls	r2, r3, #24
 800b9c2:	4b55      	ldr	r3, [pc, #340]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	0619      	lsls	r1, r3, #24
 800b9c8:	4b53      	ldr	r3, [pc, #332]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	041b      	lsls	r3, r3, #16
 800b9ce:	4319      	orrs	r1, r3
 800b9d0:	4b51      	ldr	r3, [pc, #324]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9d2:	789b      	ldrb	r3, [r3, #2]
 800b9d4:	021b      	lsls	r3, r3, #8
 800b9d6:	430b      	orrs	r3, r1
 800b9d8:	494f      	ldr	r1, [pc, #316]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9da:	78c9      	ldrb	r1, [r1, #3]
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	021b      	lsls	r3, r3, #8
 800b9e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	4b4c      	ldr	r3, [pc, #304]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	0619      	lsls	r1, r3, #24
 800b9ec:	4b4a      	ldr	r3, [pc, #296]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9ee:	785b      	ldrb	r3, [r3, #1]
 800b9f0:	041b      	lsls	r3, r3, #16
 800b9f2:	4319      	orrs	r1, r3
 800b9f4:	4b48      	ldr	r3, [pc, #288]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9f6:	789b      	ldrb	r3, [r3, #2]
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	430b      	orrs	r3, r1
 800b9fc:	4946      	ldr	r1, [pc, #280]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800b9fe:	78c9      	ldrb	r1, [r1, #3]
 800ba00:	430b      	orrs	r3, r1
 800ba02:	0a1b      	lsrs	r3, r3, #8
 800ba04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba08:	431a      	orrs	r2, r3
 800ba0a:	4b43      	ldr	r3, [pc, #268]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	0619      	lsls	r1, r3, #24
 800ba10:	4b41      	ldr	r3, [pc, #260]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800ba12:	785b      	ldrb	r3, [r3, #1]
 800ba14:	041b      	lsls	r3, r3, #16
 800ba16:	4319      	orrs	r1, r3
 800ba18:	4b3f      	ldr	r3, [pc, #252]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800ba1a:	789b      	ldrb	r3, [r3, #2]
 800ba1c:	021b      	lsls	r3, r3, #8
 800ba1e:	430b      	orrs	r3, r1
 800ba20:	493d      	ldr	r1, [pc, #244]	@ (800bb18 <MX_LWIP_Init+0x254>)
 800ba22:	78c9      	ldrb	r1, [r1, #3]
 800ba24:	430b      	orrs	r3, r1
 800ba26:	0e1b      	lsrs	r3, r3, #24
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	4a3e      	ldr	r2, [pc, #248]	@ (800bb24 <MX_LWIP_Init+0x260>)
 800ba2c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ba2e:	4b3b      	ldr	r3, [pc, #236]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	061a      	lsls	r2, r3, #24
 800ba34:	4b39      	ldr	r3, [pc, #228]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba36:	785b      	ldrb	r3, [r3, #1]
 800ba38:	041b      	lsls	r3, r3, #16
 800ba3a:	431a      	orrs	r2, r3
 800ba3c:	4b37      	ldr	r3, [pc, #220]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba3e:	789b      	ldrb	r3, [r3, #2]
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	4313      	orrs	r3, r2
 800ba44:	4a35      	ldr	r2, [pc, #212]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba46:	78d2      	ldrb	r2, [r2, #3]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	061a      	lsls	r2, r3, #24
 800ba4c:	4b33      	ldr	r3, [pc, #204]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	0619      	lsls	r1, r3, #24
 800ba52:	4b32      	ldr	r3, [pc, #200]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba54:	785b      	ldrb	r3, [r3, #1]
 800ba56:	041b      	lsls	r3, r3, #16
 800ba58:	4319      	orrs	r1, r3
 800ba5a:	4b30      	ldr	r3, [pc, #192]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba5c:	789b      	ldrb	r3, [r3, #2]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	430b      	orrs	r3, r1
 800ba62:	492e      	ldr	r1, [pc, #184]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba64:	78c9      	ldrb	r1, [r1, #3]
 800ba66:	430b      	orrs	r3, r1
 800ba68:	021b      	lsls	r3, r3, #8
 800ba6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba6e:	431a      	orrs	r2, r3
 800ba70:	4b2a      	ldr	r3, [pc, #168]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	0619      	lsls	r1, r3, #24
 800ba76:	4b29      	ldr	r3, [pc, #164]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	041b      	lsls	r3, r3, #16
 800ba7c:	4319      	orrs	r1, r3
 800ba7e:	4b27      	ldr	r3, [pc, #156]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba80:	789b      	ldrb	r3, [r3, #2]
 800ba82:	021b      	lsls	r3, r3, #8
 800ba84:	430b      	orrs	r3, r1
 800ba86:	4925      	ldr	r1, [pc, #148]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba88:	78c9      	ldrb	r1, [r1, #3]
 800ba8a:	430b      	orrs	r3, r1
 800ba8c:	0a1b      	lsrs	r3, r3, #8
 800ba8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba92:	431a      	orrs	r2, r3
 800ba94:	4b21      	ldr	r3, [pc, #132]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	0619      	lsls	r1, r3, #24
 800ba9a:	4b20      	ldr	r3, [pc, #128]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800ba9c:	785b      	ldrb	r3, [r3, #1]
 800ba9e:	041b      	lsls	r3, r3, #16
 800baa0:	4319      	orrs	r1, r3
 800baa2:	4b1e      	ldr	r3, [pc, #120]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800baa4:	789b      	ldrb	r3, [r3, #2]
 800baa6:	021b      	lsls	r3, r3, #8
 800baa8:	430b      	orrs	r3, r1
 800baaa:	491c      	ldr	r1, [pc, #112]	@ (800bb1c <MX_LWIP_Init+0x258>)
 800baac:	78c9      	ldrb	r1, [r1, #3]
 800baae:	430b      	orrs	r3, r1
 800bab0:	0e1b      	lsrs	r3, r3, #24
 800bab2:	4313      	orrs	r3, r2
 800bab4:	4a1c      	ldr	r2, [pc, #112]	@ (800bb28 <MX_LWIP_Init+0x264>)
 800bab6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bab8:	4b1c      	ldr	r3, [pc, #112]	@ (800bb2c <MX_LWIP_Init+0x268>)
 800baba:	9302      	str	r3, [sp, #8]
 800babc:	4b1c      	ldr	r3, [pc, #112]	@ (800bb30 <MX_LWIP_Init+0x26c>)
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	2300      	movs	r3, #0
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	4b18      	ldr	r3, [pc, #96]	@ (800bb28 <MX_LWIP_Init+0x264>)
 800bac6:	4a17      	ldr	r2, [pc, #92]	@ (800bb24 <MX_LWIP_Init+0x260>)
 800bac8:	4915      	ldr	r1, [pc, #84]	@ (800bb20 <MX_LWIP_Init+0x25c>)
 800baca:	481a      	ldr	r0, [pc, #104]	@ (800bb34 <MX_LWIP_Init+0x270>)
 800bacc:	f008 f906 	bl	8013cdc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bad0:	4818      	ldr	r0, [pc, #96]	@ (800bb34 <MX_LWIP_Init+0x270>)
 800bad2:	f008 fb97 	bl	8014204 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bad6:	4817      	ldr	r0, [pc, #92]	@ (800bb34 <MX_LWIP_Init+0x270>)
 800bad8:	f008 fbb8 	bl	801424c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800badc:	4916      	ldr	r1, [pc, #88]	@ (800bb38 <MX_LWIP_Init+0x274>)
 800bade:	4815      	ldr	r0, [pc, #84]	@ (800bb34 <MX_LWIP_Init+0x270>)
 800bae0:	f008 fcb6 	bl	8014450 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bae4:	2224      	movs	r2, #36	@ 0x24
 800bae6:	2100      	movs	r1, #0
 800bae8:	4814      	ldr	r0, [pc, #80]	@ (800bb3c <MX_LWIP_Init+0x278>)
 800baea:	f014 fb3b 	bl	8020164 <memset>
  attributes.name = "EthLink";
 800baee:	4b13      	ldr	r3, [pc, #76]	@ (800bb3c <MX_LWIP_Init+0x278>)
 800baf0:	4a13      	ldr	r2, [pc, #76]	@ (800bb40 <MX_LWIP_Init+0x27c>)
 800baf2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800baf4:	4b11      	ldr	r3, [pc, #68]	@ (800bb3c <MX_LWIP_Init+0x278>)
 800baf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bafa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bafc:	4b0f      	ldr	r3, [pc, #60]	@ (800bb3c <MX_LWIP_Init+0x278>)
 800bafe:	2210      	movs	r2, #16
 800bb00:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bb02:	4a0e      	ldr	r2, [pc, #56]	@ (800bb3c <MX_LWIP_Init+0x278>)
 800bb04:	490b      	ldr	r1, [pc, #44]	@ (800bb34 <MX_LWIP_Init+0x270>)
 800bb06:	480f      	ldr	r0, [pc, #60]	@ (800bb44 <MX_LWIP_Init+0x280>)
 800bb08:	f000 fdce 	bl	800c6a8 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bb0c:	bf00      	nop
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000b98 	.word	0x20000b98
 800bb18:	20000b9c 	.word	0x20000b9c
 800bb1c:	20000ba0 	.word	0x20000ba0
 800bb20:	20000b8c 	.word	0x20000b8c
 800bb24:	20000b90 	.word	0x20000b90
 800bb28:	20000b94 	.word	0x20000b94
 800bb2c:	08013061 	.word	0x08013061
 800bb30:	0800c089 	.word	0x0800c089
 800bb34:	20000b58 	.word	0x20000b58
 800bb38:	0800bb49 	.word	0x0800bb49
 800bb3c:	20000ba4 	.word	0x20000ba4
 800bb40:	08020f90 	.word	0x08020f90
 800bb44:	0800c361 	.word	0x0800c361

0800bb48 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bb6e:	2320      	movs	r3, #32
 800bb70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb72:	f3bf 8f4f 	dsb	sy
}
 800bb76:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800bb78:	e00b      	b.n	800bb92 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800bb7a:	4a0d      	ldr	r2, [pc, #52]	@ (800bbb0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4413      	add	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dcf0      	bgt.n	800bb7a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800bb98:	f3bf 8f4f 	dsb	sy
}
 800bb9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bb9e:	f3bf 8f6f 	isb	sy
}
 800bba2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800bba4:	bf00      	nop
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	e000ed00 	.word	0xe000ed00

0800bbb4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bbbc:	4b04      	ldr	r3, [pc, #16]	@ (800bbd0 <HAL_ETH_RxCpltCallback+0x1c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f001 f9ad 	bl	800cf20 <osSemaphoreRelease>
}
 800bbc6:	bf00      	nop
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	20005554 	.word	0x20005554

0800bbd4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800bbdc:	4b04      	ldr	r3, [pc, #16]	@ (800bbf0 <HAL_ETH_TxCpltCallback+0x1c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 f99d 	bl	800cf20 <osSemaphoreRelease>
}
 800bbe6:	bf00      	nop
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20005558 	.word	0x20005558

0800bbf4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7f8 fc28 	bl	8004452 <HAL_ETH_GetDMAError>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc08:	2b80      	cmp	r3, #128	@ 0x80
 800bc0a:	d104      	bne.n	800bc16 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800bc0c:	4b04      	ldr	r3, [pc, #16]	@ (800bc20 <HAL_ETH_ErrorCallback+0x2c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f001 f985 	bl	800cf20 <osSemaphoreRelease>
  }
}
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20005554 	.word	0x20005554

0800bc24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b0aa      	sub	sp, #168	@ 0xa8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800bc3e:	f107 0310 	add.w	r3, r7, #16
 800bc42:	2264      	movs	r2, #100	@ 0x64
 800bc44:	2100      	movs	r1, #0
 800bc46:	4618      	mov	r0, r3
 800bc48:	f014 fa8c 	bl	8020164 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bc4c:	4b89      	ldr	r3, [pc, #548]	@ (800be74 <low_level_init+0x250>)
 800bc4e:	4a8a      	ldr	r2, [pc, #552]	@ (800be78 <low_level_init+0x254>)
 800bc50:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bc52:	2300      	movs	r3, #0
 800bc54:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bc56:	2380      	movs	r3, #128	@ 0x80
 800bc58:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bc5a:	23e1      	movs	r3, #225	@ 0xe1
 800bc5c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bc62:	2300      	movs	r3, #0
 800bc64:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bc66:	2300      	movs	r3, #0
 800bc68:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bc6a:	4a82      	ldr	r2, [pc, #520]	@ (800be74 <low_level_init+0x250>)
 800bc6c:	f107 0308 	add.w	r3, r7, #8
 800bc70:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bc72:	4b80      	ldr	r3, [pc, #512]	@ (800be74 <low_level_init+0x250>)
 800bc74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bc78:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bc7a:	4b7e      	ldr	r3, [pc, #504]	@ (800be74 <low_level_init+0x250>)
 800bc7c:	4a7f      	ldr	r2, [pc, #508]	@ (800be7c <low_level_init+0x258>)
 800bc7e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bc80:	4b7c      	ldr	r3, [pc, #496]	@ (800be74 <low_level_init+0x250>)
 800bc82:	4a7f      	ldr	r2, [pc, #508]	@ (800be80 <low_level_init+0x25c>)
 800bc84:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bc86:	4b7b      	ldr	r3, [pc, #492]	@ (800be74 <low_level_init+0x250>)
 800bc88:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bc8c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bc8e:	4879      	ldr	r0, [pc, #484]	@ (800be74 <low_level_init+0x250>)
 800bc90:	f7f7 fd96 	bl	80037c0 <HAL_ETH_Init>
 800bc94:	4603      	mov	r3, r0
 800bc96:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bc9a:	2238      	movs	r2, #56	@ 0x38
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	4879      	ldr	r0, [pc, #484]	@ (800be84 <low_level_init+0x260>)
 800bca0:	f014 fa60 	bl	8020164 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bca4:	4b77      	ldr	r3, [pc, #476]	@ (800be84 <low_level_init+0x260>)
 800bca6:	2221      	movs	r2, #33	@ 0x21
 800bca8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bcaa:	4b76      	ldr	r3, [pc, #472]	@ (800be84 <low_level_init+0x260>)
 800bcac:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bcb0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bcb2:	4b74      	ldr	r3, [pc, #464]	@ (800be84 <low_level_init+0x260>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bcb8:	4873      	ldr	r0, [pc, #460]	@ (800be88 <low_level_init+0x264>)
 800bcba:	f007 fec9 	bl	8013a50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2206      	movs	r2, #6
 800bcc2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bcc6:	4b6b      	ldr	r3, [pc, #428]	@ (800be74 <low_level_init+0x250>)
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	781a      	ldrb	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bcd2:	4b68      	ldr	r3, [pc, #416]	@ (800be74 <low_level_init+0x250>)
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	785a      	ldrb	r2, [r3, #1]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bcde:	4b65      	ldr	r3, [pc, #404]	@ (800be74 <low_level_init+0x250>)
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	789a      	ldrb	r2, [r3, #2]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bcea:	4b62      	ldr	r3, [pc, #392]	@ (800be74 <low_level_init+0x250>)
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	78da      	ldrb	r2, [r3, #3]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bcf6:	4b5f      	ldr	r3, [pc, #380]	@ (800be74 <low_level_init+0x250>)
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	791a      	ldrb	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bd02:	4b5c      	ldr	r3, [pc, #368]	@ (800be74 <low_level_init+0x250>)
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	795a      	ldrb	r2, [r3, #5]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bd14:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bd1c:	f043 030a 	orr.w	r3, r3, #10
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	2001      	movs	r0, #1
 800bd2e:	f000 fff5 	bl	800cd1c <osSemaphoreNew>
 800bd32:	4603      	mov	r3, r0
 800bd34:	4a55      	ldr	r2, [pc, #340]	@ (800be8c <low_level_init+0x268>)
 800bd36:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	2001      	movs	r0, #1
 800bd3e:	f000 ffed 	bl	800cd1c <osSemaphoreNew>
 800bd42:	4603      	mov	r3, r0
 800bd44:	4a52      	ldr	r2, [pc, #328]	@ (800be90 <low_level_init+0x26c>)
 800bd46:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bd48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bd4c:	2224      	movs	r2, #36	@ 0x24
 800bd4e:	2100      	movs	r1, #0
 800bd50:	4618      	mov	r0, r3
 800bd52:	f014 fa07 	bl	8020164 <memset>
  attributes.name = "EthIf";
 800bd56:	4b4f      	ldr	r3, [pc, #316]	@ (800be94 <low_level_init+0x270>)
 800bd58:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bd5a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800bd5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800bd62:	2330      	movs	r3, #48	@ 0x30
 800bd64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800bd68:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	4849      	ldr	r0, [pc, #292]	@ (800be98 <low_level_init+0x274>)
 800bd72:	f000 fc99 	bl	800c6a8 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bd76:	4949      	ldr	r1, [pc, #292]	@ (800be9c <low_level_init+0x278>)
 800bd78:	4849      	ldr	r0, [pc, #292]	@ (800bea0 <low_level_init+0x27c>)
 800bd7a:	f7f6 fa22 	bl	80021c2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bd7e:	4848      	ldr	r0, [pc, #288]	@ (800bea0 <low_level_init+0x27c>)
 800bd80:	f7f6 fa51 	bl	8002226 <LAN8742_Init>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d006      	beq.n	800bd98 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f008 fb30 	bl	80143f0 <netif_set_link_down>
    netif_set_down(netif);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f008 fac7 	bl	8014324 <netif_set_down>
 800bd96:	e06a      	b.n	800be6e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bd98:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d164      	bne.n	800be6a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bda0:	483f      	ldr	r0, [pc, #252]	@ (800bea0 <low_level_init+0x27c>)
 800bda2:	f7f6 fa8d 	bl	80022c0 <LAN8742_GetLinkState>
 800bda6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bdaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	dc06      	bgt.n	800bdc0 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f008 fb1c 	bl	80143f0 <netif_set_link_down>
      netif_set_down(netif);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f008 fab3 	bl	8014324 <netif_set_down>
 800bdbe:	e056      	b.n	800be6e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800bdc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdc4:	3b02      	subs	r3, #2
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d82a      	bhi.n	800be20 <low_level_init+0x1fc>
 800bdca:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd0 <low_level_init+0x1ac>)
 800bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd0:	0800bde1 	.word	0x0800bde1
 800bdd4:	0800bdf3 	.word	0x0800bdf3
 800bdd8:	0800be03 	.word	0x0800be03
 800bddc:	0800be13 	.word	0x0800be13
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bde0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bde4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bde8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bdec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bdf0:	e01f      	b.n	800be32 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bdf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bdfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be00:	e017      	b.n	800be32 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800be02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be10:	e00f      	b.n	800be32 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800be12:	2300      	movs	r3, #0
 800be14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800be18:	2300      	movs	r3, #0
 800be1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be1e:	e008      	b.n	800be32 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800be20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800be28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800be2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800be30:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800be32:	f107 0310 	add.w	r3, r7, #16
 800be36:	4619      	mov	r1, r3
 800be38:	480e      	ldr	r0, [pc, #56]	@ (800be74 <low_level_init+0x250>)
 800be3a:	f7f8 f9a9 	bl	8004190 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800be3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800be42:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800be44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800be4a:	f107 0310 	add.w	r3, r7, #16
 800be4e:	4619      	mov	r1, r3
 800be50:	4808      	ldr	r0, [pc, #32]	@ (800be74 <low_level_init+0x250>)
 800be52:	f7f8 fa94 	bl	800437e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800be56:	4807      	ldr	r0, [pc, #28]	@ (800be74 <low_level_init+0x250>)
 800be58:	f7f7 fd4c 	bl	80038f4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f008 f9f5 	bl	801424c <netif_set_up>
    netif_set_link_up(netif);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f008 fa90 	bl	8014388 <netif_set_link_up>
 800be68:	e001      	b.n	800be6e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800be6a:	f7f5 fa15 	bl	8001298 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800be6e:	37a8      	adds	r7, #168	@ 0xa8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	2000555c 	.word	0x2000555c
 800be78:	40028000 	.word	0x40028000
 800be7c:	20000170 	.word	0x20000170
 800be80:	200000d0 	.word	0x200000d0
 800be84:	2000560c 	.word	0x2000560c
 800be88:	08025330 	.word	0x08025330
 800be8c:	20005554 	.word	0x20005554
 800be90:	20005558 	.word	0x20005558
 800be94:	08020fb0 	.word	0x08020fb0
 800be98:	0800c035 	.word	0x0800c035
 800be9c:	2000000c 	.word	0x2000000c
 800bea0:	20005644 	.word	0x20005644

0800bea4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b092      	sub	sp, #72	@ 0x48
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	2230      	movs	r2, #48	@ 0x30
 800bec2:	2100      	movs	r1, #0
 800bec4:	4618      	mov	r0, r3
 800bec6:	f014 f94d 	bl	8020164 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800beca:	f107 030c 	add.w	r3, r7, #12
 800bece:	2230      	movs	r2, #48	@ 0x30
 800bed0:	2100      	movs	r1, #0
 800bed2:	4618      	mov	r0, r3
 800bed4:	f014 f946 	bl	8020164 <memset>

  for(q = p; q != NULL; q = q->next)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	643b      	str	r3, [r7, #64]	@ 0x40
 800bedc:	e045      	b.n	800bf6a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	d902      	bls.n	800beea <low_level_output+0x46>
      return ERR_IF;
 800bee4:	f06f 030b 	mvn.w	r3, #11
 800bee8:	e07f      	b.n	800bfea <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800beea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beec:	6859      	ldr	r1, [r3, #4]
 800beee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bef0:	4613      	mov	r3, r2
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	4413      	add	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	3348      	adds	r3, #72	@ 0x48
 800befa:	443b      	add	r3, r7
 800befc:	3b3c      	subs	r3, #60	@ 0x3c
 800befe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bf00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf02:	895b      	ldrh	r3, [r3, #10]
 800bf04:	4619      	mov	r1, r3
 800bf06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf08:	4613      	mov	r3, r2
 800bf0a:	005b      	lsls	r3, r3, #1
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	3348      	adds	r3, #72	@ 0x48
 800bf12:	443b      	add	r3, r7
 800bf14:	3b38      	subs	r3, #56	@ 0x38
 800bf16:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bf18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d011      	beq.n	800bf42 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bf1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf20:	1e5a      	subs	r2, r3, #1
 800bf22:	f107 000c 	add.w	r0, r7, #12
 800bf26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf28:	460b      	mov	r3, r1
 800bf2a:	005b      	lsls	r3, r3, #1
 800bf2c:	440b      	add	r3, r1
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	18c1      	adds	r1, r0, r3
 800bf32:	4613      	mov	r3, r2
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	4413      	add	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	3348      	adds	r3, #72	@ 0x48
 800bf3c:	443b      	add	r3, r7
 800bf3e:	3b34      	subs	r3, #52	@ 0x34
 800bf40:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bf42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d109      	bne.n	800bf5e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bf4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	4413      	add	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	3348      	adds	r3, #72	@ 0x48
 800bf56:	443b      	add	r3, r7
 800bf58:	3b34      	subs	r3, #52	@ 0x34
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bf5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf60:	3301      	adds	r3, #1
 800bf62:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800bf64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1b6      	bne.n	800bede <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	891b      	ldrh	r3, [r3, #8]
 800bf74:	461a      	mov	r2, r3
 800bf76:	4b1f      	ldr	r3, [pc, #124]	@ (800bff4 <low_level_output+0x150>)
 800bf78:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bf7a:	4a1e      	ldr	r2, [pc, #120]	@ (800bff4 <low_level_output+0x150>)
 800bf7c:	f107 030c 	add.w	r3, r7, #12
 800bf80:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bf82:	4a1c      	ldr	r2, [pc, #112]	@ (800bff4 <low_level_output+0x150>)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800bf88:	6838      	ldr	r0, [r7, #0]
 800bf8a:	f008 feb5 	bl	8014cf8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800bf8e:	4919      	ldr	r1, [pc, #100]	@ (800bff4 <low_level_output+0x150>)
 800bf90:	4819      	ldr	r0, [pc, #100]	@ (800bff8 <low_level_output+0x154>)
 800bf92:	f7f7 fd9f 	bl	8003ad4 <HAL_ETH_Transmit_IT>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d103      	bne.n	800bfa4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bfa2:	e01b      	b.n	800bfdc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800bfa4:	4814      	ldr	r0, [pc, #80]	@ (800bff8 <low_level_output+0x154>)
 800bfa6:	f7f8 fa47 	bl	8004438 <HAL_ETH_GetError>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f003 0302 	and.w	r3, r3, #2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00d      	beq.n	800bfd0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800bfb4:	4b11      	ldr	r3, [pc, #68]	@ (800bffc <low_level_output+0x158>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 ff49 	bl	800ce54 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800bfc2:	480d      	ldr	r0, [pc, #52]	@ (800bff8 <low_level_output+0x154>)
 800bfc4:	f7f7 ff26 	bl	8003e14 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800bfc8:	23fe      	movs	r3, #254	@ 0xfe
 800bfca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bfce:	e005      	b.n	800bfdc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800bfd0:	6838      	ldr	r0, [r7, #0]
 800bfd2:	f008 fdeb 	bl	8014bac <pbuf_free>
        errval =  ERR_IF;
 800bfd6:	23f4      	movs	r3, #244	@ 0xf4
 800bfd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800bfdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfe0:	f113 0f02 	cmn.w	r3, #2
 800bfe4:	d0d3      	beq.n	800bf8e <low_level_output+0xea>

  return errval;
 800bfe6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3748      	adds	r7, #72	@ 0x48
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	2000560c 	.word	0x2000560c
 800bff8:	2000555c 	.word	0x2000555c
 800bffc:	20005558 	.word	0x20005558

0800c000 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c00c:	4b07      	ldr	r3, [pc, #28]	@ (800c02c <low_level_input+0x2c>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d105      	bne.n	800c020 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c014:	f107 030c 	add.w	r3, r7, #12
 800c018:	4619      	mov	r1, r3
 800c01a:	4805      	ldr	r0, [pc, #20]	@ (800c030 <low_level_input+0x30>)
 800c01c:	f7f7 fdb6 	bl	8003b8c <HAL_ETH_ReadData>
  }

  return p;
 800c020:	68fb      	ldr	r3, [r7, #12]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20005550 	.word	0x20005550
 800c030:	2000555c 	.word	0x2000555c

0800c034 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c044:	4b0f      	ldr	r3, [pc, #60]	@ (800c084 <ethernetif_input+0x50>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 ff01 	bl	800ce54 <osSemaphoreAcquire>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1f5      	bne.n	800c044 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c058:	68b8      	ldr	r0, [r7, #8]
 800c05a:	f7ff ffd1 	bl	800c000 <low_level_input>
 800c05e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00a      	beq.n	800c07c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	68b9      	ldr	r1, [r7, #8]
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	4798      	blx	r3
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f008 fd98 	bl	8014bac <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1ea      	bne.n	800c058 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c082:	e7df      	b.n	800c044 <ethernetif_input+0x10>
 800c084:	20005554 	.word	0x20005554

0800c088 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <ethernetif_init+0x1c>
 800c096:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d0 <ethernetif_init+0x48>)
 800c098:	f240 220d 	movw	r2, #525	@ 0x20d
 800c09c:	490d      	ldr	r1, [pc, #52]	@ (800c0d4 <ethernetif_init+0x4c>)
 800c09e:	480e      	ldr	r0, [pc, #56]	@ (800c0d8 <ethernetif_init+0x50>)
 800c0a0:	f013 ff00 	bl	801fea4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2273      	movs	r2, #115	@ 0x73
 800c0a8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2274      	movs	r2, #116	@ 0x74
 800c0b0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a09      	ldr	r2, [pc, #36]	@ (800c0dc <ethernetif_init+0x54>)
 800c0b8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a08      	ldr	r2, [pc, #32]	@ (800c0e0 <ethernetif_init+0x58>)
 800c0be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff fdaf 	bl	800bc24 <low_level_init>

  return ERR_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	08020fb8 	.word	0x08020fb8
 800c0d4:	08020fd4 	.word	0x08020fd4
 800c0d8:	08020fe4 	.word	0x08020fe4
 800c0dc:	0801ce5d 	.word	0x0801ce5d
 800c0e0:	0800bea5 	.word	0x0800bea5

0800c0e4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c0f0:	68f9      	ldr	r1, [r7, #12]
 800c0f2:	4809      	ldr	r0, [pc, #36]	@ (800c118 <pbuf_free_custom+0x34>)
 800c0f4:	f007 fd9c 	bl	8013c30 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c0f8:	4b08      	ldr	r3, [pc, #32]	@ (800c11c <pbuf_free_custom+0x38>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d107      	bne.n	800c110 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c100:	4b06      	ldr	r3, [pc, #24]	@ (800c11c <pbuf_free_custom+0x38>)
 800c102:	2200      	movs	r2, #0
 800c104:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c106:	4b06      	ldr	r3, [pc, #24]	@ (800c120 <pbuf_free_custom+0x3c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 ff08 	bl	800cf20 <osSemaphoreRelease>
  }
}
 800c110:	bf00      	nop
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	08025330 	.word	0x08025330
 800c11c:	20005550 	.word	0x20005550
 800c120:	20005554 	.word	0x20005554

0800c124 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c128:	f7f6 f972 	bl	8002410 <HAL_GetTick>
 800c12c:	4603      	mov	r3, r0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	bd80      	pop	{r7, pc}
	...

0800c134 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	@ 0x38
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c13c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	605a      	str	r2, [r3, #4]
 800c146:	609a      	str	r2, [r3, #8]
 800c148:	60da      	str	r2, [r3, #12]
 800c14a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a56      	ldr	r2, [pc, #344]	@ (800c2ac <HAL_ETH_MspInit+0x178>)
 800c152:	4293      	cmp	r3, r2
 800c154:	f040 80a6 	bne.w	800c2a4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c158:	4b55      	ldr	r3, [pc, #340]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15c:	4a54      	ldr	r2, [pc, #336]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c15e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c162:	6313      	str	r3, [r2, #48]	@ 0x30
 800c164:	4b52      	ldr	r3, [pc, #328]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c16c:	623b      	str	r3, [r7, #32]
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	4b4f      	ldr	r3, [pc, #316]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c174:	4a4e      	ldr	r2, [pc, #312]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c176:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c17a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c17c:	4b4c      	ldr	r3, [pc, #304]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c17e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c184:	61fb      	str	r3, [r7, #28]
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	4b49      	ldr	r3, [pc, #292]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18c:	4a48      	ldr	r2, [pc, #288]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c18e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c192:	6313      	str	r3, [r2, #48]	@ 0x30
 800c194:	4b46      	ldr	r3, [pc, #280]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1a0:	4b43      	ldr	r3, [pc, #268]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1a4:	4a42      	ldr	r2, [pc, #264]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1a6:	f043 0304 	orr.w	r3, r3, #4
 800c1aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800c1ac:	4b40      	ldr	r3, [pc, #256]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1b0:	f003 0304 	and.w	r3, r3, #4
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1b8:	4b3d      	ldr	r3, [pc, #244]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1bc:	4a3c      	ldr	r2, [pc, #240]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1be:	f043 0301 	orr.w	r3, r3, #1
 800c1c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c1c4:	4b3a      	ldr	r3, [pc, #232]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	613b      	str	r3, [r7, #16]
 800c1ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1d0:	4b37      	ldr	r3, [pc, #220]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1d4:	4a36      	ldr	r2, [pc, #216]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1d6:	f043 0302 	orr.w	r3, r3, #2
 800c1da:	6313      	str	r3, [r2, #48]	@ 0x30
 800c1dc:	4b34      	ldr	r3, [pc, #208]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1e0:	f003 0302 	and.w	r3, r3, #2
 800c1e4:	60fb      	str	r3, [r7, #12]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c1e8:	4b31      	ldr	r3, [pc, #196]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ec:	4a30      	ldr	r2, [pc, #192]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c1f4:	4b2e      	ldr	r3, [pc, #184]	@ (800c2b0 <HAL_ETH_MspInit+0x17c>)
 800c1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1fc:	60bb      	str	r3, [r7, #8]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c200:	2332      	movs	r3, #50	@ 0x32
 800c202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c204:	2302      	movs	r3, #2
 800c206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c208:	2300      	movs	r3, #0
 800c20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c20c:	2303      	movs	r3, #3
 800c20e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c210:	230b      	movs	r3, #11
 800c212:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c218:	4619      	mov	r1, r3
 800c21a:	4826      	ldr	r0, [pc, #152]	@ (800c2b4 <HAL_ETH_MspInit+0x180>)
 800c21c:	f7f8 fd46 	bl	8004cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c220:	2386      	movs	r3, #134	@ 0x86
 800c222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c224:	2302      	movs	r3, #2
 800c226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c22c:	2303      	movs	r3, #3
 800c22e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c230:	230b      	movs	r3, #11
 800c232:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c238:	4619      	mov	r1, r3
 800c23a:	481f      	ldr	r0, [pc, #124]	@ (800c2b8 <HAL_ETH_MspInit+0x184>)
 800c23c:	f7f8 fd36 	bl	8004cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c244:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c246:	2302      	movs	r3, #2
 800c248:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c24e:	2303      	movs	r3, #3
 800c250:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c252:	230b      	movs	r3, #11
 800c254:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c25a:	4619      	mov	r1, r3
 800c25c:	4817      	ldr	r0, [pc, #92]	@ (800c2bc <HAL_ETH_MspInit+0x188>)
 800c25e:	f7f8 fd25 	bl	8004cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c262:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c266:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c268:	2302      	movs	r3, #2
 800c26a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c26c:	2300      	movs	r3, #0
 800c26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c270:	2303      	movs	r3, #3
 800c272:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c274:	230b      	movs	r3, #11
 800c276:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c27c:	4619      	mov	r1, r3
 800c27e:	4810      	ldr	r0, [pc, #64]	@ (800c2c0 <HAL_ETH_MspInit+0x18c>)
 800c280:	f7f8 fd14 	bl	8004cac <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c284:	2200      	movs	r2, #0
 800c286:	2105      	movs	r1, #5
 800c288:	203d      	movs	r0, #61	@ 0x3d
 800c28a:	f7f6 fc41 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c28e:	203d      	movs	r0, #61	@ 0x3d
 800c290:	f7f6 fc5a 	bl	8002b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c294:	2200      	movs	r2, #0
 800c296:	2105      	movs	r1, #5
 800c298:	203e      	movs	r0, #62	@ 0x3e
 800c29a:	f7f6 fc39 	bl	8002b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c29e:	203e      	movs	r0, #62	@ 0x3e
 800c2a0:	f7f6 fc52 	bl	8002b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c2a4:	bf00      	nop
 800c2a6:	3738      	adds	r7, #56	@ 0x38
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	40028000 	.word	0x40028000
 800c2b0:	40023800 	.word	0x40023800
 800c2b4:	40020800 	.word	0x40020800
 800c2b8:	40020000 	.word	0x40020000
 800c2bc:	40020400 	.word	0x40020400
 800c2c0:	40021800 	.word	0x40021800

0800c2c4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c2c8:	4802      	ldr	r0, [pc, #8]	@ (800c2d4 <ETH_PHY_IO_Init+0x10>)
 800c2ca:	f7f8 f873 	bl	80043b4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	2000555c 	.word	0x2000555c

0800c2d8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	af00      	add	r7, sp, #0
  return 0;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	68f9      	ldr	r1, [r7, #12]
 800c2fa:	4807      	ldr	r0, [pc, #28]	@ (800c318 <ETH_PHY_IO_ReadReg+0x30>)
 800c2fc:	f7f7 feb4 	bl	8004068 <HAL_ETH_ReadPHYRegister>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c30a:	e000      	b.n	800c30e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000555c 	.word	0x2000555c

0800c31c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	68f9      	ldr	r1, [r7, #12]
 800c32e:	4807      	ldr	r0, [pc, #28]	@ (800c34c <ETH_PHY_IO_WriteReg+0x30>)
 800c330:	f7f7 fee5 	bl	80040fe <HAL_ETH_WritePHYRegister>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d002      	beq.n	800c340 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c33a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c33e:	e000      	b.n	800c342 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	2000555c 	.word	0x2000555c

0800c350 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c354:	f7f6 f85c 	bl	8002410 <HAL_GetTick>
 800c358:	4603      	mov	r3, r0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	bd80      	pop	{r7, pc}
	...

0800c360 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b0a0      	sub	sp, #128	@ 0x80
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c368:	f107 0308 	add.w	r3, r7, #8
 800c36c:	2264      	movs	r2, #100	@ 0x64
 800c36e:	2100      	movs	r1, #0
 800c370:	4618      	mov	r0, r3
 800c372:	f013 fef7 	bl	8020164 <memset>
  int32_t PHYLinkState = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c37a:	2300      	movs	r3, #0
 800c37c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c37e:	2300      	movs	r3, #0
 800c380:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c382:	2300      	movs	r3, #0
 800c384:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c38a:	483a      	ldr	r0, [pc, #232]	@ (800c474 <ethernet_link_thread+0x114>)
 800c38c:	f7f5 ff98 	bl	80022c0 <LAN8742_GetLinkState>
 800c390:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c394:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c398:	089b      	lsrs	r3, r3, #2
 800c39a:	f003 0301 	and.w	r3, r3, #1
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00c      	beq.n	800c3be <ethernet_link_thread+0x5e>
 800c3a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	dc09      	bgt.n	800c3be <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c3aa:	4833      	ldr	r0, [pc, #204]	@ (800c478 <ethernet_link_thread+0x118>)
 800c3ac:	f7f7 fb12 	bl	80039d4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c3b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3b2:	f007 ffb7 	bl	8014324 <netif_set_down>
    netif_set_link_down(netif);
 800c3b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3b8:	f008 f81a 	bl	80143f0 <netif_set_link_down>
 800c3bc:	e055      	b.n	800c46a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c3be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d14e      	bne.n	800c46a <ethernet_link_thread+0x10a>
 800c3cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	dd4b      	ble.n	800c46a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c3d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3d4:	3b02      	subs	r3, #2
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d82a      	bhi.n	800c430 <ethernet_link_thread+0xd0>
 800c3da:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e0 <ethernet_link_thread+0x80>)
 800c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e0:	0800c3f1 	.word	0x0800c3f1
 800c3e4:	0800c403 	.word	0x0800c403
 800c3e8:	0800c413 	.word	0x0800c413
 800c3ec:	0800c423 	.word	0x0800c423
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c3f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c3f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c400:	e017      	b.n	800c432 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c402:	2300      	movs	r3, #0
 800c404:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c406:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c40a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c40c:	2301      	movs	r3, #1
 800c40e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c410:	e00f      	b.n	800c432 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c412:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c416:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c418:	2300      	movs	r3, #0
 800c41a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c41c:	2301      	movs	r3, #1
 800c41e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c420:	e007      	b.n	800c432 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c422:	2300      	movs	r3, #0
 800c424:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c426:	2300      	movs	r3, #0
 800c428:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c42a:	2301      	movs	r3, #1
 800c42c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c42e:	e000      	b.n	800c432 <ethernet_link_thread+0xd2>
    default:
      break;
 800c430:	bf00      	nop
    }

    if(linkchanged)
 800c432:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c434:	2b00      	cmp	r3, #0
 800c436:	d018      	beq.n	800c46a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c438:	f107 0308 	add.w	r3, r7, #8
 800c43c:	4619      	mov	r1, r3
 800c43e:	480e      	ldr	r0, [pc, #56]	@ (800c478 <ethernet_link_thread+0x118>)
 800c440:	f7f7 fea6 	bl	8004190 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c446:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c44a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c44c:	f107 0308 	add.w	r3, r7, #8
 800c450:	4619      	mov	r1, r3
 800c452:	4809      	ldr	r0, [pc, #36]	@ (800c478 <ethernet_link_thread+0x118>)
 800c454:	f7f7 ff93 	bl	800437e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c458:	4807      	ldr	r0, [pc, #28]	@ (800c478 <ethernet_link_thread+0x118>)
 800c45a:	f7f7 fa4b 	bl	80038f4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c45e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c460:	f007 fef4 	bl	801424c <netif_set_up>
      netif_set_link_up(netif);
 800c464:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c466:	f007 ff8f 	bl	8014388 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c46a:	2064      	movs	r0, #100	@ 0x64
 800c46c:	f000 f9c2 	bl	800c7f4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c470:	e78b      	b.n	800c38a <ethernet_link_thread+0x2a>
 800c472:	bf00      	nop
 800c474:	20005644 	.word	0x20005644
 800c478:	2000555c 	.word	0x2000555c

0800c47c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af02      	add	r7, sp, #8
 800c482:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c484:	4812      	ldr	r0, [pc, #72]	@ (800c4d0 <HAL_ETH_RxAllocateCallback+0x54>)
 800c486:	f007 fb5f 	bl	8013b48 <memp_malloc_pool>
 800c48a:	60f8      	str	r0, [r7, #12]
  if (p)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d014      	beq.n	800c4bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f103 0220 	add.w	r2, r3, #32
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4a0d      	ldr	r2, [pc, #52]	@ (800c4d4 <HAL_ETH_RxAllocateCallback+0x58>)
 800c4a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c4aa:	9201      	str	r2, [sp, #4]
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2241      	movs	r2, #65	@ 0x41
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f008 f9bf 	bl	8014838 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c4ba:	e005      	b.n	800c4c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c4bc:	4b06      	ldr	r3, [pc, #24]	@ (800c4d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c4be:	2201      	movs	r2, #1
 800c4c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
}
 800c4c8:	bf00      	nop
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	08025330 	.word	0x08025330
 800c4d4:	0800c0e5 	.word	0x0800c0e5
 800c4d8:	20005550 	.word	0x20005550

0800c4dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3b20      	subs	r3, #32
 800c4fa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	2200      	movs	r2, #0
 800c506:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	887a      	ldrh	r2, [r7, #2]
 800c50c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d103      	bne.n	800c51e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	69fa      	ldr	r2, [r7, #28]
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	e003      	b.n	800c526 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69fa      	ldr	r2, [r7, #28]
 800c524:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	69fa      	ldr	r2, [r7, #28]
 800c52a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	61fb      	str	r3, [r7, #28]
 800c532:	e009      	b.n	800c548 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	891a      	ldrh	r2, [r3, #8]
 800c538:	887b      	ldrh	r3, [r7, #2]
 800c53a:	4413      	add	r3, r2
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1f2      	bne.n	800c534 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c54e:	887b      	ldrh	r3, [r7, #2]
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff fb02 	bl	800bb5c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c558:	bf00      	nop
 800c55a:	3720      	adds	r7, #32
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f008 fb1f 	bl	8014bac <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c576:	b480      	push	{r7}
 800c578:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c57a:	bf00      	nop
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c58a:	f3ef 8305 	mrs	r3, IPSR
 800c58e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c590:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10f      	bne.n	800c5b6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c596:	f3ef 8310 	mrs	r3, PRIMASK
 800c59a:	607b      	str	r3, [r7, #4]
  return(result);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d105      	bne.n	800c5ae <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c5a2:	f3ef 8311 	mrs	r3, BASEPRI
 800c5a6:	603b      	str	r3, [r7, #0]
  return(result);
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <osKernelInitialize+0x3a>
 800c5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c5e8 <osKernelInitialize+0x64>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d103      	bne.n	800c5be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c5b6:	f06f 0305 	mvn.w	r3, #5
 800c5ba:	60fb      	str	r3, [r7, #12]
 800c5bc:	e00c      	b.n	800c5d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c5be:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e8 <osKernelInitialize+0x64>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d105      	bne.n	800c5d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c5c6:	4b08      	ldr	r3, [pc, #32]	@ (800c5e8 <osKernelInitialize+0x64>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	e002      	b.n	800c5d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c5d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	20005664 	.word	0x20005664

0800c5ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5f2:	f3ef 8305 	mrs	r3, IPSR
 800c5f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d10f      	bne.n	800c61e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c602:	607b      	str	r3, [r7, #4]
  return(result);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d105      	bne.n	800c616 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c60a:	f3ef 8311 	mrs	r3, BASEPRI
 800c60e:	603b      	str	r3, [r7, #0]
  return(result);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <osKernelStart+0x3a>
 800c616:	4b0f      	ldr	r3, [pc, #60]	@ (800c654 <osKernelStart+0x68>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	d103      	bne.n	800c626 <osKernelStart+0x3a>
    stat = osErrorISR;
 800c61e:	f06f 0305 	mvn.w	r3, #5
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	e010      	b.n	800c648 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c626:	4b0b      	ldr	r3, [pc, #44]	@ (800c654 <osKernelStart+0x68>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d109      	bne.n	800c642 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c62e:	f7ff ffa2 	bl	800c576 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c632:	4b08      	ldr	r3, [pc, #32]	@ (800c654 <osKernelStart+0x68>)
 800c634:	2202      	movs	r2, #2
 800c636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c638:	f002 fd32 	bl	800f0a0 <vTaskStartScheduler>
      stat = osOK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e002      	b.n	800c648 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c648:	68fb      	ldr	r3, [r7, #12]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20005664 	.word	0x20005664

0800c658 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c65e:	f3ef 8305 	mrs	r3, IPSR
 800c662:	60bb      	str	r3, [r7, #8]
  return(result);
 800c664:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10f      	bne.n	800c68a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c66a:	f3ef 8310 	mrs	r3, PRIMASK
 800c66e:	607b      	str	r3, [r7, #4]
  return(result);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d105      	bne.n	800c682 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c676:	f3ef 8311 	mrs	r3, BASEPRI
 800c67a:	603b      	str	r3, [r7, #0]
  return(result);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d007      	beq.n	800c692 <osKernelGetTickCount+0x3a>
 800c682:	4b08      	ldr	r3, [pc, #32]	@ (800c6a4 <osKernelGetTickCount+0x4c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d103      	bne.n	800c692 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800c68a:	f002 fe3b 	bl	800f304 <xTaskGetTickCountFromISR>
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	e002      	b.n	800c698 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800c692:	f002 fe27 	bl	800f2e4 <xTaskGetTickCount>
 800c696:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800c698:	68fb      	ldr	r3, [r7, #12]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20005664 	.word	0x20005664

0800c6a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b090      	sub	sp, #64	@ 0x40
 800c6ac:	af04      	add	r7, sp, #16
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6b8:	f3ef 8305 	mrs	r3, IPSR
 800c6bc:	61fb      	str	r3, [r7, #28]
  return(result);
 800c6be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f040 8090 	bne.w	800c7e6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800c6ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d105      	bne.n	800c6de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c6d2:	f3ef 8311 	mrs	r3, BASEPRI
 800c6d6:	617b      	str	r3, [r7, #20]
  return(result);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d003      	beq.n	800c6e6 <osThreadNew+0x3e>
 800c6de:	4b44      	ldr	r3, [pc, #272]	@ (800c7f0 <osThreadNew+0x148>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d07f      	beq.n	800c7e6 <osThreadNew+0x13e>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d07c      	beq.n	800c7e6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800c6ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c6f2:	2318      	movs	r3, #24
 800c6f4:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800c6fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6fe:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d045      	beq.n	800c792 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d002      	beq.n	800c714 <osThreadNew+0x6c>
        name = attr->name;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d008      	beq.n	800c73a <osThreadNew+0x92>
 800c728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72a:	2b38      	cmp	r3, #56	@ 0x38
 800c72c:	d805      	bhi.n	800c73a <osThreadNew+0x92>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <osThreadNew+0x96>
        return (NULL);
 800c73a:	2300      	movs	r3, #0
 800c73c:	e054      	b.n	800c7e8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	695b      	ldr	r3, [r3, #20]
 800c74a:	089b      	lsrs	r3, r3, #2
 800c74c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00e      	beq.n	800c774 <osThreadNew+0xcc>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	2ba7      	cmp	r3, #167	@ 0xa7
 800c75c:	d90a      	bls.n	800c774 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c762:	2b00      	cmp	r3, #0
 800c764:	d006      	beq.n	800c774 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d002      	beq.n	800c774 <osThreadNew+0xcc>
        mem = 1;
 800c76e:	2301      	movs	r3, #1
 800c770:	623b      	str	r3, [r7, #32]
 800c772:	e010      	b.n	800c796 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10c      	bne.n	800c796 <osThreadNew+0xee>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d108      	bne.n	800c796 <osThreadNew+0xee>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d104      	bne.n	800c796 <osThreadNew+0xee>
          mem = 0;
 800c78c:	2300      	movs	r3, #0
 800c78e:	623b      	str	r3, [r7, #32]
 800c790:	e001      	b.n	800c796 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d110      	bne.n	800c7be <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7a4:	9202      	str	r2, [sp, #8]
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f002 fa76 	bl	800eca4 <xTaskCreateStatic>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	613b      	str	r3, [r7, #16]
 800c7bc:	e013      	b.n	800c7e6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d110      	bne.n	800c7e6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	f107 0310 	add.w	r3, r7, #16
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f002 faca 	bl	800ed70 <xTaskCreate>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d001      	beq.n	800c7e6 <osThreadNew+0x13e>
          hTask = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c7e6:	693b      	ldr	r3, [r7, #16]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3730      	adds	r7, #48	@ 0x30
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20005664 	.word	0x20005664

0800c7f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7fc:	f3ef 8305 	mrs	r3, IPSR
 800c800:	613b      	str	r3, [r7, #16]
  return(result);
 800c802:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10f      	bne.n	800c828 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c808:	f3ef 8310 	mrs	r3, PRIMASK
 800c80c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d105      	bne.n	800c820 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c814:	f3ef 8311 	mrs	r3, BASEPRI
 800c818:	60bb      	str	r3, [r7, #8]
  return(result);
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d007      	beq.n	800c830 <osDelay+0x3c>
 800c820:	4b0a      	ldr	r3, [pc, #40]	@ (800c84c <osDelay+0x58>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d103      	bne.n	800c830 <osDelay+0x3c>
    stat = osErrorISR;
 800c828:	f06f 0305 	mvn.w	r3, #5
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	e007      	b.n	800c840 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c830:	2300      	movs	r3, #0
 800c832:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <osDelay+0x4c>
      vTaskDelay(ticks);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f002 fbf8 	bl	800f030 <vTaskDelay>
    }
  }

  return (stat);
 800c840:	697b      	ldr	r3, [r7, #20]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20005664 	.word	0x20005664

0800c850 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b088      	sub	sp, #32
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c858:	2300      	movs	r3, #0
 800c85a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c85c:	f3ef 8305 	mrs	r3, IPSR
 800c860:	617b      	str	r3, [r7, #20]
  return(result);
 800c862:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800c864:	2b00      	cmp	r3, #0
 800c866:	d13d      	bne.n	800c8e4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c868:	f3ef 8310 	mrs	r3, PRIMASK
 800c86c:	613b      	str	r3, [r7, #16]
  return(result);
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d105      	bne.n	800c880 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c874:	f3ef 8311 	mrs	r3, BASEPRI
 800c878:	60fb      	str	r3, [r7, #12]
  return(result);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <osEventFlagsNew+0x38>
 800c880:	4b1b      	ldr	r3, [pc, #108]	@ (800c8f0 <osEventFlagsNew+0xa0>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b02      	cmp	r3, #2
 800c886:	d02d      	beq.n	800c8e4 <osEventFlagsNew+0x94>
    mem = -1;
 800c888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c88c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d015      	beq.n	800c8c0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d006      	beq.n	800c8aa <osEventFlagsNew+0x5a>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	2b1f      	cmp	r3, #31
 800c8a2:	d902      	bls.n	800c8aa <osEventFlagsNew+0x5a>
        mem = 1;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	61bb      	str	r3, [r7, #24]
 800c8a8:	e00c      	b.n	800c8c4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d108      	bne.n	800c8c4 <osEventFlagsNew+0x74>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d104      	bne.n	800c8c4 <osEventFlagsNew+0x74>
          mem = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	61bb      	str	r3, [r7, #24]
 800c8be:	e001      	b.n	800c8c4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d106      	bne.n	800c8d8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 fdbc 	bl	800d44c <xEventGroupCreateStatic>
 800c8d4:	61f8      	str	r0, [r7, #28]
 800c8d6:	e005      	b.n	800c8e4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800c8de:	f000 fdf2 	bl	800d4c6 <xEventGroupCreate>
 800c8e2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c8e4:	69fb      	ldr	r3, [r7, #28]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20005664 	.word	0x20005664

0800c8f4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b088      	sub	sp, #32
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d003      	beq.n	800c910 <osEventFlagsSet+0x1c>
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c90e:	d303      	bcc.n	800c918 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800c910:	f06f 0303 	mvn.w	r3, #3
 800c914:	61fb      	str	r3, [r7, #28]
 800c916:	e03a      	b.n	800c98e <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c918:	f3ef 8305 	mrs	r3, IPSR
 800c91c:	617b      	str	r3, [r7, #20]
  return(result);
 800c91e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10f      	bne.n	800c944 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c924:	f3ef 8310 	mrs	r3, PRIMASK
 800c928:	613b      	str	r3, [r7, #16]
  return(result);
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d105      	bne.n	800c93c <osEventFlagsSet+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c930:	f3ef 8311 	mrs	r3, BASEPRI
 800c934:	60fb      	str	r3, [r7, #12]
  return(result);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d021      	beq.n	800c980 <osEventFlagsSet+0x8c>
 800c93c:	4b16      	ldr	r3, [pc, #88]	@ (800c998 <osEventFlagsSet+0xa4>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b02      	cmp	r3, #2
 800c942:	d11d      	bne.n	800c980 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 800c944:	2300      	movs	r3, #0
 800c946:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c948:	f107 0308 	add.w	r3, r7, #8
 800c94c:	461a      	mov	r2, r3
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	69b8      	ldr	r0, [r7, #24]
 800c952:	f000 ff6d 	bl	800d830 <xEventGroupSetBitsFromISR>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d103      	bne.n	800c964 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 800c95c:	f06f 0302 	mvn.w	r3, #2
 800c960:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c962:	e013      	b.n	800c98c <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00e      	beq.n	800c98c <osEventFlagsSet+0x98>
 800c96e:	4b0b      	ldr	r3, [pc, #44]	@ (800c99c <osEventFlagsSet+0xa8>)
 800c970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	f3bf 8f4f 	dsb	sy
 800c97a:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c97e:	e005      	b.n	800c98c <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	69b8      	ldr	r0, [r7, #24]
 800c984:	f000 fe94 	bl	800d6b0 <xEventGroupSetBits>
 800c988:	61f8      	str	r0, [r7, #28]
 800c98a:	e000      	b.n	800c98e <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c98c:	bf00      	nop
  }

  return (rflags);
 800c98e:	69fb      	ldr	r3, [r7, #28]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20005664 	.word	0x20005664
 800c99c:	e000ed04 	.word	0xe000ed04

0800c9a0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08e      	sub	sp, #56	@ 0x38
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c9b2:	6a3b      	ldr	r3, [r7, #32]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <osEventFlagsWait+0x20>
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9be:	d303      	bcc.n	800c9c8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800c9c0:	f06f 0303 	mvn.w	r3, #3
 800c9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9c6:	e059      	b.n	800ca7c <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9c8:	f3ef 8305 	mrs	r3, IPSR
 800c9cc:	61fb      	str	r3, [r7, #28]
  return(result);
 800c9ce:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10f      	bne.n	800c9f4 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9d8:	61bb      	str	r3, [r7, #24]
  return(result);
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d105      	bne.n	800c9ec <osEventFlagsWait+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c9e0:	f3ef 8311 	mrs	r3, BASEPRI
 800c9e4:	617b      	str	r3, [r7, #20]
  return(result);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d007      	beq.n	800c9fc <osEventFlagsWait+0x5c>
 800c9ec:	4b26      	ldr	r3, [pc, #152]	@ (800ca88 <osEventFlagsWait+0xe8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d103      	bne.n	800c9fc <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 800c9f4:	f06f 0305 	mvn.w	r3, #5
 800c9f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9fa:	e03f      	b.n	800ca7c <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f003 0301 	and.w	r3, r3, #1
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d002      	beq.n	800ca0c <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 800ca06:	2301      	movs	r3, #1
 800ca08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca0a:	e001      	b.n	800ca10 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca1e:	e001      	b.n	800ca24 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 800ca20:	2301      	movs	r3, #1
 800ca22:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca2c:	68b9      	ldr	r1, [r7, #8]
 800ca2e:	6a38      	ldr	r0, [r7, #32]
 800ca30:	f000 fd64 	bl	800d4fc <xEventGroupWaitBits>
 800ca34:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00e      	beq.n	800ca5e <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d019      	beq.n	800ca7c <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d003      	beq.n	800ca56 <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 800ca4e:	f06f 0301 	mvn.w	r3, #1
 800ca52:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca54:	e012      	b.n	800ca7c <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ca56:	f06f 0302 	mvn.w	r3, #2
 800ca5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca5c:	e00e      	b.n	800ca7c <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca62:	4013      	ands	r3, r2
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d109      	bne.n	800ca7c <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 800ca6e:	f06f 0301 	mvn.w	r3, #1
 800ca72:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca74:	e002      	b.n	800ca7c <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ca76:	f06f 0302 	mvn.w	r3, #2
 800ca7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3730      	adds	r7, #48	@ 0x30
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	20005664 	.word	0x20005664

0800ca8c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08a      	sub	sp, #40	@ 0x28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ca94:	2300      	movs	r3, #0
 800ca96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca98:	f3ef 8305 	mrs	r3, IPSR
 800ca9c:	613b      	str	r3, [r7, #16]
  return(result);
 800ca9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f040 8085 	bne.w	800cbb0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caa6:	f3ef 8310 	mrs	r3, PRIMASK
 800caaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d105      	bne.n	800cabe <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cab2:	f3ef 8311 	mrs	r3, BASEPRI
 800cab6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <osMutexNew+0x3a>
 800cabe:	4b3f      	ldr	r3, [pc, #252]	@ (800cbbc <osMutexNew+0x130>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d074      	beq.n	800cbb0 <osMutexNew+0x124>
    if (attr != NULL) {
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	623b      	str	r3, [r7, #32]
 800cad2:	e001      	b.n	800cad8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cad4:	2300      	movs	r3, #0
 800cad6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d002      	beq.n	800cae8 <osMutexNew+0x5c>
      rmtx = 1U;
 800cae2:	2301      	movs	r3, #1
 800cae4:	61fb      	str	r3, [r7, #28]
 800cae6:	e001      	b.n	800caec <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	f003 0308 	and.w	r3, r3, #8
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d15c      	bne.n	800cbb0 <osMutexNew+0x124>
      mem = -1;
 800caf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cafa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d015      	beq.n	800cb2e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d006      	beq.n	800cb18 <osMutexNew+0x8c>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	2b4f      	cmp	r3, #79	@ 0x4f
 800cb10:	d902      	bls.n	800cb18 <osMutexNew+0x8c>
          mem = 1;
 800cb12:	2301      	movs	r3, #1
 800cb14:	61bb      	str	r3, [r7, #24]
 800cb16:	e00c      	b.n	800cb32 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d108      	bne.n	800cb32 <osMutexNew+0xa6>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d104      	bne.n	800cb32 <osMutexNew+0xa6>
            mem = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61bb      	str	r3, [r7, #24]
 800cb2c:	e001      	b.n	800cb32 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d112      	bne.n	800cb5e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d007      	beq.n	800cb4e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	4619      	mov	r1, r3
 800cb44:	2004      	movs	r0, #4
 800cb46:	f001 f8c6 	bl	800dcd6 <xQueueCreateMutexStatic>
 800cb4a:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb4c:	e016      	b.n	800cb7c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	4619      	mov	r1, r3
 800cb54:	2001      	movs	r0, #1
 800cb56:	f001 f8be 	bl	800dcd6 <xQueueCreateMutexStatic>
 800cb5a:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb5c:	e00e      	b.n	800cb7c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10b      	bne.n	800cb7c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d004      	beq.n	800cb74 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cb6a:	2004      	movs	r0, #4
 800cb6c:	f001 f89b 	bl	800dca6 <xQueueCreateMutex>
 800cb70:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb72:	e003      	b.n	800cb7c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800cb74:	2001      	movs	r0, #1
 800cb76:	f001 f896 	bl	800dca6 <xQueueCreateMutex>
 800cb7a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00c      	beq.n	800cb9c <osMutexNew+0x110>
        if (attr != NULL) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d003      	beq.n	800cb90 <osMutexNew+0x104>
          name = attr->name;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	617b      	str	r3, [r7, #20]
 800cb8e:	e001      	b.n	800cb94 <osMutexNew+0x108>
        } else {
          name = NULL;
 800cb90:	2300      	movs	r3, #0
 800cb92:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800cb94:	6979      	ldr	r1, [r7, #20]
 800cb96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb98:	f001 fffc 	bl	800eb94 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d006      	beq.n	800cbb0 <osMutexNew+0x124>
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	f043 0301 	orr.w	r3, r3, #1
 800cbae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3728      	adds	r7, #40	@ 0x28
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20005664 	.word	0x20005664

0800cbc0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b088      	sub	sp, #32
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f023 0301 	bic.w	r3, r3, #1
 800cbd0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbde:	f3ef 8305 	mrs	r3, IPSR
 800cbe2:	613b      	str	r3, [r7, #16]
  return(result);
 800cbe4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10f      	bne.n	800cc0a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbea:	f3ef 8310 	mrs	r3, PRIMASK
 800cbee:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d105      	bne.n	800cc02 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbf6:	f3ef 8311 	mrs	r3, BASEPRI
 800cbfa:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d007      	beq.n	800cc12 <osMutexAcquire+0x52>
 800cc02:	4b1d      	ldr	r3, [pc, #116]	@ (800cc78 <osMutexAcquire+0xb8>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d103      	bne.n	800cc12 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800cc0a:	f06f 0305 	mvn.w	r3, #5
 800cc0e:	61fb      	str	r3, [r7, #28]
 800cc10:	e02c      	b.n	800cc6c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d103      	bne.n	800cc20 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800cc18:	f06f 0303 	mvn.w	r3, #3
 800cc1c:	61fb      	str	r3, [r7, #28]
 800cc1e:	e025      	b.n	800cc6c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d011      	beq.n	800cc4a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cc26:	6839      	ldr	r1, [r7, #0]
 800cc28:	69b8      	ldr	r0, [r7, #24]
 800cc2a:	f001 f8a6 	bl	800dd7a <xQueueTakeMutexRecursive>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d01b      	beq.n	800cc6c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800cc3a:	f06f 0301 	mvn.w	r3, #1
 800cc3e:	61fb      	str	r3, [r7, #28]
 800cc40:	e014      	b.n	800cc6c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cc42:	f06f 0302 	mvn.w	r3, #2
 800cc46:	61fb      	str	r3, [r7, #28]
 800cc48:	e010      	b.n	800cc6c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	69b8      	ldr	r0, [r7, #24]
 800cc4e:	f001 fc71 	bl	800e534 <xQueueSemaphoreTake>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d009      	beq.n	800cc6c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800cc5e:	f06f 0301 	mvn.w	r3, #1
 800cc62:	61fb      	str	r3, [r7, #28]
 800cc64:	e002      	b.n	800cc6c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cc66:	f06f 0302 	mvn.w	r3, #2
 800cc6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cc6c:	69fb      	ldr	r3, [r7, #28]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3720      	adds	r7, #32
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	20005664 	.word	0x20005664

0800cc7c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b088      	sub	sp, #32
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f023 0301 	bic.w	r3, r3, #1
 800cc8a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f003 0301 	and.w	r3, r3, #1
 800cc92:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc98:	f3ef 8305 	mrs	r3, IPSR
 800cc9c:	613b      	str	r3, [r7, #16]
  return(result);
 800cc9e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10f      	bne.n	800ccc4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cca4:	f3ef 8310 	mrs	r3, PRIMASK
 800cca8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccb0:	f3ef 8311 	mrs	r3, BASEPRI
 800ccb4:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d007      	beq.n	800cccc <osMutexRelease+0x50>
 800ccbc:	4b16      	ldr	r3, [pc, #88]	@ (800cd18 <osMutexRelease+0x9c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	d103      	bne.n	800cccc <osMutexRelease+0x50>
    stat = osErrorISR;
 800ccc4:	f06f 0305 	mvn.w	r3, #5
 800ccc8:	61fb      	str	r3, [r7, #28]
 800ccca:	e01f      	b.n	800cd0c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d103      	bne.n	800ccda <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ccd2:	f06f 0303 	mvn.w	r3, #3
 800ccd6:	61fb      	str	r3, [r7, #28]
 800ccd8:	e018      	b.n	800cd0c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d009      	beq.n	800ccf4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cce0:	69b8      	ldr	r0, [r7, #24]
 800cce2:	f001 f813 	bl	800dd0c <xQueueGiveMutexRecursive>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d00f      	beq.n	800cd0c <osMutexRelease+0x90>
        stat = osErrorResource;
 800ccec:	f06f 0302 	mvn.w	r3, #2
 800ccf0:	61fb      	str	r3, [r7, #28]
 800ccf2:	e00b      	b.n	800cd0c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	69b8      	ldr	r0, [r7, #24]
 800ccfc:	f001 f8ec 	bl	800ded8 <xQueueGenericSend>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d002      	beq.n	800cd0c <osMutexRelease+0x90>
        stat = osErrorResource;
 800cd06:	f06f 0302 	mvn.w	r3, #2
 800cd0a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800cd0c:	69fb      	ldr	r3, [r7, #28]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20005664 	.word	0x20005664

0800cd1c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b08c      	sub	sp, #48	@ 0x30
 800cd20:	af02      	add	r7, sp, #8
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd2c:	f3ef 8305 	mrs	r3, IPSR
 800cd30:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f040 8086 	bne.w	800ce46 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd3a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd3e:	617b      	str	r3, [r7, #20]
  return(result);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d105      	bne.n	800cd52 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd46:	f3ef 8311 	mrs	r3, BASEPRI
 800cd4a:	613b      	str	r3, [r7, #16]
  return(result);
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d003      	beq.n	800cd5a <osSemaphoreNew+0x3e>
 800cd52:	4b3f      	ldr	r3, [pc, #252]	@ (800ce50 <osSemaphoreNew+0x134>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d075      	beq.n	800ce46 <osSemaphoreNew+0x12a>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d072      	beq.n	800ce46 <osSemaphoreNew+0x12a>
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d86e      	bhi.n	800ce46 <osSemaphoreNew+0x12a>
    mem = -1;
 800cd68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d015      	beq.n	800cda0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d006      	beq.n	800cd8a <osSemaphoreNew+0x6e>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	2b4f      	cmp	r3, #79	@ 0x4f
 800cd82:	d902      	bls.n	800cd8a <osSemaphoreNew+0x6e>
        mem = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	623b      	str	r3, [r7, #32]
 800cd88:	e00c      	b.n	800cda4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d108      	bne.n	800cda4 <osSemaphoreNew+0x88>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d104      	bne.n	800cda4 <osSemaphoreNew+0x88>
          mem = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	623b      	str	r3, [r7, #32]
 800cd9e:	e001      	b.n	800cda4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdaa:	d04c      	beq.n	800ce46 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d128      	bne.n	800ce04 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d10a      	bne.n	800cdce <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	2203      	movs	r2, #3
 800cdbe:	9200      	str	r2, [sp, #0]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	f000 fe67 	bl	800da98 <xQueueGenericCreateStatic>
 800cdca:	6278      	str	r0, [r7, #36]	@ 0x24
 800cdcc:	e005      	b.n	800cdda <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800cdce:	2203      	movs	r2, #3
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	f000 fee7 	bl	800dba6 <xQueueGenericCreate>
 800cdd8:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d022      	beq.n	800ce26 <osSemaphoreNew+0x10a>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d01f      	beq.n	800ce26 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cde6:	2300      	movs	r3, #0
 800cde8:	2200      	movs	r2, #0
 800cdea:	2100      	movs	r1, #0
 800cdec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdee:	f001 f873 	bl	800ded8 <xQueueGenericSend>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d016      	beq.n	800ce26 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800cdf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdfa:	f001 fd7d 	bl	800e8f8 <vQueueDelete>
            hSemaphore = NULL;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce02:	e010      	b.n	800ce26 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d108      	bne.n	800ce1c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	68b9      	ldr	r1, [r7, #8]
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	f000 ffea 	bl	800ddec <xQueueCreateCountingSemaphoreStatic>
 800ce18:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce1a:	e004      	b.n	800ce26 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ce1c:	68b9      	ldr	r1, [r7, #8]
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f001 f821 	bl	800de66 <xQueueCreateCountingSemaphore>
 800ce24:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ce26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00c      	beq.n	800ce46 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <osSemaphoreNew+0x11e>
          name = attr->name;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	61fb      	str	r3, [r7, #28]
 800ce38:	e001      	b.n	800ce3e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ce3e:	69f9      	ldr	r1, [r7, #28]
 800ce40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce42:	f001 fea7 	bl	800eb94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ce46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3728      	adds	r7, #40	@ 0x28
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20005664 	.word	0x20005664

0800ce54 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ce62:	2300      	movs	r3, #0
 800ce64:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ce6c:	f06f 0303 	mvn.w	r3, #3
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	e04b      	b.n	800cf0c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce74:	f3ef 8305 	mrs	r3, IPSR
 800ce78:	617b      	str	r3, [r7, #20]
  return(result);
 800ce7a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10f      	bne.n	800cea0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce80:	f3ef 8310 	mrs	r3, PRIMASK
 800ce84:	613b      	str	r3, [r7, #16]
  return(result);
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d105      	bne.n	800ce98 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce8c:	f3ef 8311 	mrs	r3, BASEPRI
 800ce90:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d026      	beq.n	800cee6 <osSemaphoreAcquire+0x92>
 800ce98:	4b1f      	ldr	r3, [pc, #124]	@ (800cf18 <osSemaphoreAcquire+0xc4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d122      	bne.n	800cee6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800cea6:	f06f 0303 	mvn.w	r3, #3
 800ceaa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ceac:	e02d      	b.n	800cf0a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ceb2:	f107 0308 	add.w	r3, r7, #8
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	2100      	movs	r1, #0
 800ceba:	69b8      	ldr	r0, [r7, #24]
 800cebc:	f001 fc52 	bl	800e764 <xQueueReceiveFromISR>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d003      	beq.n	800cece <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800cec6:	f06f 0302 	mvn.w	r3, #2
 800ceca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cecc:	e01d      	b.n	800cf0a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01a      	beq.n	800cf0a <osSemaphoreAcquire+0xb6>
 800ced4:	4b11      	ldr	r3, [pc, #68]	@ (800cf1c <osSemaphoreAcquire+0xc8>)
 800ced6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800cee4:	e011      	b.n	800cf0a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	69b8      	ldr	r0, [r7, #24]
 800ceea:	f001 fb23 	bl	800e534 <xQueueSemaphoreTake>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d00b      	beq.n	800cf0c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d003      	beq.n	800cf02 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800cefa:	f06f 0301 	mvn.w	r3, #1
 800cefe:	61fb      	str	r3, [r7, #28]
 800cf00:	e004      	b.n	800cf0c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800cf02:	f06f 0302 	mvn.w	r3, #2
 800cf06:	61fb      	str	r3, [r7, #28]
 800cf08:	e000      	b.n	800cf0c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800cf0a:	bf00      	nop
      }
    }
  }

  return (stat);
 800cf0c:	69fb      	ldr	r3, [r7, #28]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3720      	adds	r7, #32
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20005664 	.word	0x20005664
 800cf1c:	e000ed04 	.word	0xe000ed04

0800cf20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b088      	sub	sp, #32
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d103      	bne.n	800cf3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cf36:	f06f 0303 	mvn.w	r3, #3
 800cf3a:	61fb      	str	r3, [r7, #28]
 800cf3c:	e03e      	b.n	800cfbc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf3e:	f3ef 8305 	mrs	r3, IPSR
 800cf42:	617b      	str	r3, [r7, #20]
  return(result);
 800cf44:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10f      	bne.n	800cf6a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf4a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf4e:	613b      	str	r3, [r7, #16]
  return(result);
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d105      	bne.n	800cf62 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf56:	f3ef 8311 	mrs	r3, BASEPRI
 800cf5a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d01e      	beq.n	800cfa0 <osSemaphoreRelease+0x80>
 800cf62:	4b19      	ldr	r3, [pc, #100]	@ (800cfc8 <osSemaphoreRelease+0xa8>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d11a      	bne.n	800cfa0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cf6e:	f107 0308 	add.w	r3, r7, #8
 800cf72:	4619      	mov	r1, r3
 800cf74:	69b8      	ldr	r0, [r7, #24]
 800cf76:	f001 f95c 	bl	800e232 <xQueueGiveFromISR>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d003      	beq.n	800cf88 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800cf80:	f06f 0302 	mvn.w	r3, #2
 800cf84:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cf86:	e018      	b.n	800cfba <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d015      	beq.n	800cfba <osSemaphoreRelease+0x9a>
 800cf8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cfcc <osSemaphoreRelease+0xac>)
 800cf90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cf9e:	e00c      	b.n	800cfba <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	69b8      	ldr	r0, [r7, #24]
 800cfa8:	f000 ff96 	bl	800ded8 <xQueueGenericSend>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d004      	beq.n	800cfbc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800cfb2:	f06f 0302 	mvn.w	r3, #2
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	e000      	b.n	800cfbc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cfba:	bf00      	nop
    }
  }

  return (stat);
 800cfbc:	69fb      	ldr	r3, [r7, #28]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3720      	adds	r7, #32
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20005664 	.word	0x20005664
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfdc:	f3ef 8305 	mrs	r3, IPSR
 800cfe0:	617b      	str	r3, [r7, #20]
  return(result);
 800cfe2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10f      	bne.n	800d008 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfe8:	f3ef 8310 	mrs	r3, PRIMASK
 800cfec:	613b      	str	r3, [r7, #16]
  return(result);
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d105      	bne.n	800d000 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cff4:	f3ef 8311 	mrs	r3, BASEPRI
 800cff8:	60fb      	str	r3, [r7, #12]
  return(result);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d007      	beq.n	800d010 <osSemaphoreDelete+0x40>
 800d000:	4b0d      	ldr	r3, [pc, #52]	@ (800d038 <osSemaphoreDelete+0x68>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d103      	bne.n	800d010 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d008:	f06f 0305 	mvn.w	r3, #5
 800d00c:	61fb      	str	r3, [r7, #28]
 800d00e:	e00e      	b.n	800d02e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d103      	bne.n	800d01e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d016:	f06f 0303 	mvn.w	r3, #3
 800d01a:	61fb      	str	r3, [r7, #28]
 800d01c:	e007      	b.n	800d02e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d01e:	69b8      	ldr	r0, [r7, #24]
 800d020:	f001 fde2 	bl	800ebe8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d024:	2300      	movs	r3, #0
 800d026:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d028:	69b8      	ldr	r0, [r7, #24]
 800d02a:	f001 fc65 	bl	800e8f8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d02e:	69fb      	ldr	r3, [r7, #28]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3720      	adds	r7, #32
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	20005664 	.word	0x20005664

0800d03c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08c      	sub	sp, #48	@ 0x30
 800d040:	af02      	add	r7, sp, #8
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d048:	2300      	movs	r3, #0
 800d04a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d04c:	f3ef 8305 	mrs	r3, IPSR
 800d050:	61bb      	str	r3, [r7, #24]
  return(result);
 800d052:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d054:	2b00      	cmp	r3, #0
 800d056:	d16f      	bne.n	800d138 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d058:	f3ef 8310 	mrs	r3, PRIMASK
 800d05c:	617b      	str	r3, [r7, #20]
  return(result);
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d105      	bne.n	800d070 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d064:	f3ef 8311 	mrs	r3, BASEPRI
 800d068:	613b      	str	r3, [r7, #16]
  return(result);
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d003      	beq.n	800d078 <osMessageQueueNew+0x3c>
 800d070:	4b34      	ldr	r3, [pc, #208]	@ (800d144 <osMessageQueueNew+0x108>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b02      	cmp	r3, #2
 800d076:	d05f      	beq.n	800d138 <osMessageQueueNew+0xfc>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d05c      	beq.n	800d138 <osMessageQueueNew+0xfc>
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d059      	beq.n	800d138 <osMessageQueueNew+0xfc>
    mem = -1;
 800d084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d088:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d029      	beq.n	800d0e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d012      	beq.n	800d0be <osMessageQueueNew+0x82>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	2b4f      	cmp	r3, #79	@ 0x4f
 800d09e:	d90e      	bls.n	800d0be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00a      	beq.n	800d0be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	695a      	ldr	r2, [r3, #20]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	68b9      	ldr	r1, [r7, #8]
 800d0b0:	fb01 f303 	mul.w	r3, r1, r3
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d302      	bcc.n	800d0be <osMessageQueueNew+0x82>
        mem = 1;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	623b      	str	r3, [r7, #32]
 800d0bc:	e014      	b.n	800d0e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d110      	bne.n	800d0e8 <osMessageQueueNew+0xac>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10c      	bne.n	800d0e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d108      	bne.n	800d0e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d104      	bne.n	800d0e8 <osMessageQueueNew+0xac>
          mem = 0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	623b      	str	r3, [r7, #32]
 800d0e2:	e001      	b.n	800d0e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d10b      	bne.n	800d106 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	691a      	ldr	r2, [r3, #16]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	9100      	str	r1, [sp, #0]
 800d0fa:	68b9      	ldr	r1, [r7, #8]
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f000 fccb 	bl	800da98 <xQueueGenericCreateStatic>
 800d102:	6278      	str	r0, [r7, #36]	@ 0x24
 800d104:	e008      	b.n	800d118 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d105      	bne.n	800d118 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d10c:	2200      	movs	r2, #0
 800d10e:	68b9      	ldr	r1, [r7, #8]
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f000 fd48 	bl	800dba6 <xQueueGenericCreate>
 800d116:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00c      	beq.n	800d138 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <osMessageQueueNew+0xf0>
        name = attr->name;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	61fb      	str	r3, [r7, #28]
 800d12a:	e001      	b.n	800d130 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d12c:	2300      	movs	r3, #0
 800d12e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d130:	69f9      	ldr	r1, [r7, #28]
 800d132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d134:	f001 fd2e 	bl	800eb94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3728      	adds	r7, #40	@ 0x28
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	20005664 	.word	0x20005664

0800d148 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08a      	sub	sp, #40	@ 0x28
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	603b      	str	r3, [r7, #0]
 800d154:	4613      	mov	r3, r2
 800d156:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d160:	f3ef 8305 	mrs	r3, IPSR
 800d164:	61fb      	str	r3, [r7, #28]
  return(result);
 800d166:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10f      	bne.n	800d18c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16c:	f3ef 8310 	mrs	r3, PRIMASK
 800d170:	61bb      	str	r3, [r7, #24]
  return(result);
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d105      	bne.n	800d184 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d178:	f3ef 8311 	mrs	r3, BASEPRI
 800d17c:	617b      	str	r3, [r7, #20]
  return(result);
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d02c      	beq.n	800d1de <osMessageQueuePut+0x96>
 800d184:	4b28      	ldr	r3, [pc, #160]	@ (800d228 <osMessageQueuePut+0xe0>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d128      	bne.n	800d1de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d18c:	6a3b      	ldr	r3, [r7, #32]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <osMessageQueuePut+0x56>
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <osMessageQueuePut+0x56>
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d19e:	f06f 0303 	mvn.w	r3, #3
 800d1a2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1a4:	e039      	b.n	800d21a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1aa:	f107 0210 	add.w	r2, r7, #16
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	68b9      	ldr	r1, [r7, #8]
 800d1b2:	6a38      	ldr	r0, [r7, #32]
 800d1b4:	f000 ff9a 	bl	800e0ec <xQueueGenericSendFromISR>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d003      	beq.n	800d1c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d1be:	f06f 0302 	mvn.w	r3, #2
 800d1c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1c4:	e029      	b.n	800d21a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d026      	beq.n	800d21a <osMessageQueuePut+0xd2>
 800d1cc:	4b17      	ldr	r3, [pc, #92]	@ (800d22c <osMessageQueuePut+0xe4>)
 800d1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1dc:	e01d      	b.n	800d21a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d002      	beq.n	800d1ea <osMessageQueuePut+0xa2>
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d103      	bne.n	800d1f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d1ea:	f06f 0303 	mvn.w	r3, #3
 800d1ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1f0:	e014      	b.n	800d21c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	68b9      	ldr	r1, [r7, #8]
 800d1f8:	6a38      	ldr	r0, [r7, #32]
 800d1fa:	f000 fe6d 	bl	800ded8 <xQueueGenericSend>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b01      	cmp	r3, #1
 800d202:	d00b      	beq.n	800d21c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d20a:	f06f 0301 	mvn.w	r3, #1
 800d20e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d210:	e004      	b.n	800d21c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d212:	f06f 0302 	mvn.w	r3, #2
 800d216:	627b      	str	r3, [r7, #36]	@ 0x24
 800d218:	e000      	b.n	800d21c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d21a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3728      	adds	r7, #40	@ 0x28
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	20005664 	.word	0x20005664
 800d22c:	e000ed04 	.word	0xe000ed04

0800d230 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d230:	b580      	push	{r7, lr}
 800d232:	b08a      	sub	sp, #40	@ 0x28
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d242:	2300      	movs	r3, #0
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d246:	f3ef 8305 	mrs	r3, IPSR
 800d24a:	61fb      	str	r3, [r7, #28]
  return(result);
 800d24c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10f      	bne.n	800d272 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d252:	f3ef 8310 	mrs	r3, PRIMASK
 800d256:	61bb      	str	r3, [r7, #24]
  return(result);
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d105      	bne.n	800d26a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d25e:	f3ef 8311 	mrs	r3, BASEPRI
 800d262:	617b      	str	r3, [r7, #20]
  return(result);
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d02c      	beq.n	800d2c4 <osMessageQueueGet+0x94>
 800d26a:	4b28      	ldr	r3, [pc, #160]	@ (800d30c <osMessageQueueGet+0xdc>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d128      	bne.n	800d2c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d005      	beq.n	800d284 <osMessageQueueGet+0x54>
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <osMessageQueueGet+0x54>
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d003      	beq.n	800d28c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d284:	f06f 0303 	mvn.w	r3, #3
 800d288:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d28a:	e038      	b.n	800d2fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d28c:	2300      	movs	r3, #0
 800d28e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d290:	f107 0310 	add.w	r3, r7, #16
 800d294:	461a      	mov	r2, r3
 800d296:	68b9      	ldr	r1, [r7, #8]
 800d298:	6a38      	ldr	r0, [r7, #32]
 800d29a:	f001 fa63 	bl	800e764 <xQueueReceiveFromISR>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d003      	beq.n	800d2ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d2a4:	f06f 0302 	mvn.w	r3, #2
 800d2a8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2aa:	e028      	b.n	800d2fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d025      	beq.n	800d2fe <osMessageQueueGet+0xce>
 800d2b2:	4b17      	ldr	r3, [pc, #92]	@ (800d310 <osMessageQueueGet+0xe0>)
 800d2b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2c2:	e01c      	b.n	800d2fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d2c4:	6a3b      	ldr	r3, [r7, #32]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <osMessageQueueGet+0xa0>
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d103      	bne.n	800d2d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d2d0:	f06f 0303 	mvn.w	r3, #3
 800d2d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2d6:	e013      	b.n	800d300 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	6a38      	ldr	r0, [r7, #32]
 800d2de:	f001 f841 	bl	800e364 <xQueueReceive>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d00b      	beq.n	800d300 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d003      	beq.n	800d2f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d2ee:	f06f 0301 	mvn.w	r3, #1
 800d2f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2f4:	e004      	b.n	800d300 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d2f6:	f06f 0302 	mvn.w	r3, #2
 800d2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2fc:	e000      	b.n	800d300 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d2fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d302:	4618      	mov	r0, r3
 800d304:	3728      	adds	r7, #40	@ 0x28
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	20005664 	.word	0x20005664
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d102      	bne.n	800d32c <osMessageQueueGetCount+0x18>
    count = 0U;
 800d326:	2300      	movs	r3, #0
 800d328:	61fb      	str	r3, [r7, #28]
 800d32a:	e01e      	b.n	800d36a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d32c:	f3ef 8305 	mrs	r3, IPSR
 800d330:	617b      	str	r3, [r7, #20]
  return(result);
 800d332:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10f      	bne.n	800d358 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d338:	f3ef 8310 	mrs	r3, PRIMASK
 800d33c:	613b      	str	r3, [r7, #16]
  return(result);
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d105      	bne.n	800d350 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d344:	f3ef 8311 	mrs	r3, BASEPRI
 800d348:	60fb      	str	r3, [r7, #12]
  return(result);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d008      	beq.n	800d362 <osMessageQueueGetCount+0x4e>
 800d350:	4b08      	ldr	r3, [pc, #32]	@ (800d374 <osMessageQueueGetCount+0x60>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d104      	bne.n	800d362 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d358:	69b8      	ldr	r0, [r7, #24]
 800d35a:	f001 faac 	bl	800e8b6 <uxQueueMessagesWaitingFromISR>
 800d35e:	61f8      	str	r0, [r7, #28]
 800d360:	e003      	b.n	800d36a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d362:	69b8      	ldr	r0, [r7, #24]
 800d364:	f001 fa86 	bl	800e874 <uxQueueMessagesWaiting>
 800d368:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d36a:	69fb      	ldr	r3, [r7, #28]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20005664 	.word	0x20005664

0800d378 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d384:	f3ef 8305 	mrs	r3, IPSR
 800d388:	617b      	str	r3, [r7, #20]
  return(result);
 800d38a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10f      	bne.n	800d3b0 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d390:	f3ef 8310 	mrs	r3, PRIMASK
 800d394:	613b      	str	r3, [r7, #16]
  return(result);
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d105      	bne.n	800d3a8 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d39c:	f3ef 8311 	mrs	r3, BASEPRI
 800d3a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <osMessageQueueDelete+0x40>
 800d3a8:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e0 <osMessageQueueDelete+0x68>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d103      	bne.n	800d3b8 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d3b0:	f06f 0305 	mvn.w	r3, #5
 800d3b4:	61fb      	str	r3, [r7, #28]
 800d3b6:	e00e      	b.n	800d3d6 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d103      	bne.n	800d3c6 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d3be:	f06f 0303 	mvn.w	r3, #3
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	e007      	b.n	800d3d6 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d3c6:	69b8      	ldr	r0, [r7, #24]
 800d3c8:	f001 fc0e 	bl	800ebe8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d3d0:	69b8      	ldr	r0, [r7, #24]
 800d3d2:	f001 fa91 	bl	800e8f8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d3d6:	69fb      	ldr	r3, [r7, #28]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3720      	adds	r7, #32
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20005664 	.word	0x20005664

0800d3e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	4a07      	ldr	r2, [pc, #28]	@ (800d410 <vApplicationGetIdleTaskMemory+0x2c>)
 800d3f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	4a06      	ldr	r2, [pc, #24]	@ (800d414 <vApplicationGetIdleTaskMemory+0x30>)
 800d3fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d402:	601a      	str	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	3714      	adds	r7, #20
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	20005668 	.word	0x20005668
 800d414:	20005710 	.word	0x20005710

0800d418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	4a07      	ldr	r2, [pc, #28]	@ (800d444 <vApplicationGetTimerTaskMemory+0x2c>)
 800d428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	4a06      	ldr	r2, [pc, #24]	@ (800d448 <vApplicationGetTimerTaskMemory+0x30>)
 800d42e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d436:	601a      	str	r2, [r3, #0]
}
 800d438:	bf00      	nop
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	20005f10 	.word	0x20005f10
 800d448:	20005fb8 	.word	0x20005fb8

0800d44c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10d      	bne.n	800d476 <xEventGroupCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45e:	b672      	cpsid	i
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	b662      	cpsie	i
 800d46e:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	e7fd      	b.n	800d472 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800d476:	2320      	movs	r3, #32
 800d478:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b20      	cmp	r3, #32
 800d47e:	d00d      	beq.n	800d49c <xEventGroupCreateStatic+0x50>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d484:	b672      	cpsid	i
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	b662      	cpsie	i
 800d494:	60fb      	str	r3, [r7, #12]
}
 800d496:	bf00      	nop
 800d498:	bf00      	nop
 800d49a:	e7fd      	b.n	800d498 <xEventGroupCreateStatic+0x4c>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00a      	beq.n	800d4bc <xEventGroupCreateStatic+0x70>
		{
			pxEventBits->uxEventBits = 0;
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 f9d1 	bl	800d858 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800d4bc:	697b      	ldr	r3, [r7, #20]
	}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d4cc:	2020      	movs	r0, #32
 800d4ce:	f003 fab3 	bl	8010a38 <pvPortMalloc>
 800d4d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00a      	beq.n	800d4f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 f9b7 	bl	800d858 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d4f0:	687b      	ldr	r3, [r7, #4]
	}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
	...

0800d4fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b090      	sub	sp, #64	@ 0x40
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d512:	2300      	movs	r3, #0
 800d514:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10d      	bne.n	800d538 <xEventGroupWaitBits+0x3c>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d520:	b672      	cpsid	i
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	b662      	cpsie	i
 800d530:	623b      	str	r3, [r7, #32]
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	e7fd      	b.n	800d534 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d53e:	d30d      	bcc.n	800d55c <xEventGroupWaitBits+0x60>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d544:	b672      	cpsid	i
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	b662      	cpsie	i
 800d554:	61fb      	str	r3, [r7, #28]
}
 800d556:	bf00      	nop
 800d558:	bf00      	nop
 800d55a:	e7fd      	b.n	800d558 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10d      	bne.n	800d57e <xEventGroupWaitBits+0x82>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d566:	b672      	cpsid	i
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	b662      	cpsie	i
 800d576:	61bb      	str	r3, [r7, #24]
}
 800d578:	bf00      	nop
 800d57a:	bf00      	nop
 800d57c:	e7fd      	b.n	800d57a <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d57e:	f002 fa95 	bl	800faac <xTaskGetSchedulerState>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d102      	bne.n	800d58e <xEventGroupWaitBits+0x92>
 800d588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d101      	bne.n	800d592 <xEventGroupWaitBits+0x96>
 800d58e:	2301      	movs	r3, #1
 800d590:	e000      	b.n	800d594 <xEventGroupWaitBits+0x98>
 800d592:	2300      	movs	r3, #0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10d      	bne.n	800d5b4 <xEventGroupWaitBits+0xb8>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59c:	b672      	cpsid	i
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	b662      	cpsie	i
 800d5ac:	617b      	str	r3, [r7, #20]
}
 800d5ae:	bf00      	nop
 800d5b0:	bf00      	nop
 800d5b2:	e7fd      	b.n	800d5b0 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 800d5b4:	f001 fde8 	bl	800f188 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	68b9      	ldr	r1, [r7, #8]
 800d5c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5c4:	f000 f911 	bl	800d7ea <prvTestWaitCondition>
 800d5c8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800d5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00e      	beq.n	800d5ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d028      	beq.n	800d630 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d5de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	43db      	mvns	r3, r3
 800d5e6:	401a      	ands	r2, r3
 800d5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	e020      	b.n	800d630 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d5ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d104      	bne.n	800d5fe <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5fc:	e018      	b.n	800d630 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d003      	beq.n	800d60c <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d60a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d614:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d618:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d61c:	1d18      	adds	r0, r3, #4
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	4313      	orrs	r3, r2
 800d624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d626:	4619      	mov	r1, r3
 800d628:	f001 ffee 	bl	800f608 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d630:	f001 fdb8 	bl	800f1a4 <xTaskResumeAll>
 800d634:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d031      	beq.n	800d6a0 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 800d63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d107      	bne.n	800d652 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 800d642:	4b1a      	ldr	r3, [pc, #104]	@ (800d6ac <xEventGroupWaitBits+0x1b0>)
 800d644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d652:	f002 fbad 	bl	800fdb0 <uxTaskResetEventItemValue>
 800d656:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d65a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d11a      	bne.n	800d698 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 800d662:	f003 f8bb 	bl	80107dc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	68b9      	ldr	r1, [r7, #8]
 800d670:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d672:	f000 f8ba 	bl	800d7ea <prvTestWaitCondition>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d009      	beq.n	800d690 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d006      	beq.n	800d690 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	43db      	mvns	r3, r3
 800d68a:	401a      	ands	r2, r3
 800d68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d690:	2301      	movs	r3, #1
 800d692:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800d694:	f003 f8d8 	bl	8010848 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d69a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3740      	adds	r7, #64	@ 0x40
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	e000ed04 	.word	0xe000ed04

0800d6b0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08e      	sub	sp, #56	@ 0x38
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10d      	bne.n	800d6e8 <xEventGroupSetBits+0x38>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d0:	b672      	cpsid	i
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	b662      	cpsie	i
 800d6e0:	613b      	str	r3, [r7, #16]
}
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
 800d6e6:	e7fd      	b.n	800d6e4 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6ee:	d30d      	bcc.n	800d70c <xEventGroupSetBits+0x5c>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f4:	b672      	cpsid	i
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	b662      	cpsie	i
 800d704:	60fb      	str	r3, [r7, #12]
}
 800d706:	bf00      	nop
 800d708:	bf00      	nop
 800d70a:	e7fd      	b.n	800d708 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70e:	3304      	adds	r3, #4
 800d710:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	3308      	adds	r3, #8
 800d716:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d718:	f001 fd36 	bl	800f188 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	431a      	orrs	r2, r3
 800d72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d72c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d72e:	e03c      	b.n	800d7aa <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d73c:	2300      	movs	r3, #0
 800d73e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d746:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d74e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d108      	bne.n	800d76c <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	4013      	ands	r3, r2
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00b      	beq.n	800d77e <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 800d766:	2301      	movs	r3, #1
 800d768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d76a:	e008      	b.n	800d77e <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	4013      	ands	r3, r2
 800d774:	69ba      	ldr	r2, [r7, #24]
 800d776:	429a      	cmp	r2, r3
 800d778:	d101      	bne.n	800d77e <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d77a:	2301      	movs	r3, #1
 800d77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d010      	beq.n	800d7a6 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d003      	beq.n	800d796 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d78e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	4313      	orrs	r3, r2
 800d794:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d7a2:	f002 f807 	bl	800f7b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800d7aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7ac:	6a3b      	ldr	r3, [r7, #32]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d1be      	bne.n	800d730 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b8:	43db      	mvns	r3, r3
 800d7ba:	401a      	ands	r2, r3
 800d7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7be:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d7c0:	f001 fcf0 	bl	800f1a4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c6:	681b      	ldr	r3, [r3, #0]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3738      	adds	r7, #56	@ 0x38
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d7da:	6839      	ldr	r1, [r7, #0]
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7ff ff67 	bl	800d6b0 <xEventGroupSetBits>
}
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b087      	sub	sp, #28
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d107      	bne.n	800d810 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	4013      	ands	r3, r2
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d80a:	2301      	movs	r3, #1
 800d80c:	617b      	str	r3, [r7, #20]
 800d80e:	e007      	b.n	800d820 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	4013      	ands	r3, r2
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d101      	bne.n	800d820 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d81c:	2301      	movs	r3, #1
 800d81e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d820:	697b      	ldr	r3, [r7, #20]
}
 800d822:	4618      	mov	r0, r3
 800d824:	371c      	adds	r7, #28
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
	...

0800d830 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	68f9      	ldr	r1, [r7, #12]
 800d842:	4804      	ldr	r0, [pc, #16]	@ (800d854 <xEventGroupSetBitsFromISR+0x24>)
 800d844:	f002 fe9c 	bl	8010580 <xTimerPendFunctionCallFromISR>
 800d848:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d84a:	697b      	ldr	r3, [r7, #20]
	}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	0800d7d1 	.word	0x0800d7d1

0800d858 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f103 0208 	add.w	r2, r3, #8
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d870:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f103 0208 	add.w	r2, r3, #8
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f103 0208 	add.w	r2, r3, #8
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d8a6:	bf00      	nop
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b085      	sub	sp, #20
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	689a      	ldr	r2, [r3, #8]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
}
 800d8ee:	bf00      	nop
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d910:	d103      	bne.n	800d91a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	e00c      	b.n	800d934 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	3308      	adds	r3, #8
 800d91e:	60fb      	str	r3, [r7, #12]
 800d920:	e002      	b.n	800d928 <vListInsert+0x2e>
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68ba      	ldr	r2, [r7, #8]
 800d930:	429a      	cmp	r2, r3
 800d932:	d2f6      	bcs.n	800d922 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	683a      	ldr	r2, [r7, #0]
 800d942:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	601a      	str	r2, [r3, #0]
}
 800d960:	bf00      	nop
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	691b      	ldr	r3, [r3, #16]
 800d978:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	6892      	ldr	r2, [r2, #8]
 800d982:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	6852      	ldr	r2, [r2, #4]
 800d98c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d103      	bne.n	800d9a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	689a      	ldr	r2, [r3, #8]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	1e5a      	subs	r2, r3, #1
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10d      	bne.n	800d9f0 <xQueueGenericReset+0x30>
	__asm volatile
 800d9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d8:	b672      	cpsid	i
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	b662      	cpsie	i
 800d9e8:	60bb      	str	r3, [r7, #8]
}
 800d9ea:	bf00      	nop
 800d9ec:	bf00      	nop
 800d9ee:	e7fd      	b.n	800d9ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d9f0:	f002 fef4 	bl	80107dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9fc:	68f9      	ldr	r1, [r7, #12]
 800d9fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800da00:	fb01 f303 	mul.w	r3, r1, r3
 800da04:	441a      	add	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da20:	3b01      	subs	r3, #1
 800da22:	68f9      	ldr	r1, [r7, #12]
 800da24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800da26:	fb01 f303 	mul.w	r3, r1, r3
 800da2a:	441a      	add	r2, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	22ff      	movs	r2, #255	@ 0xff
 800da34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	22ff      	movs	r2, #255	@ 0xff
 800da3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d114      	bne.n	800da70 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d01a      	beq.n	800da84 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3310      	adds	r3, #16
 800da52:	4618      	mov	r0, r3
 800da54:	f001 fe48 	bl	800f6e8 <xTaskRemoveFromEventList>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d012      	beq.n	800da84 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800da5e:	4b0d      	ldr	r3, [pc, #52]	@ (800da94 <xQueueGenericReset+0xd4>)
 800da60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	e009      	b.n	800da84 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	3310      	adds	r3, #16
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff feef 	bl	800d858 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3324      	adds	r3, #36	@ 0x24
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff feea 	bl	800d858 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da84:	f002 fee0 	bl	8010848 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da88:	2301      	movs	r3, #1
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	e000ed04 	.word	0xe000ed04

0800da98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b08e      	sub	sp, #56	@ 0x38
 800da9c:	af02      	add	r7, sp, #8
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	607a      	str	r2, [r7, #4]
 800daa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10d      	bne.n	800dac8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab0:	b672      	cpsid	i
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	b662      	cpsie	i
 800dac0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dac2:	bf00      	nop
 800dac4:	bf00      	nop
 800dac6:	e7fd      	b.n	800dac4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d10d      	bne.n	800daea <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad2:	b672      	cpsid	i
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	b662      	cpsie	i
 800dae2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dae4:	bf00      	nop
 800dae6:	bf00      	nop
 800dae8:	e7fd      	b.n	800dae6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <xQueueGenericCreateStatic+0x5e>
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <xQueueGenericCreateStatic+0x62>
 800daf6:	2301      	movs	r3, #1
 800daf8:	e000      	b.n	800dafc <xQueueGenericCreateStatic+0x64>
 800dafa:	2300      	movs	r3, #0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10d      	bne.n	800db1c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800db00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db04:	b672      	cpsid	i
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	b662      	cpsie	i
 800db14:	623b      	str	r3, [r7, #32]
}
 800db16:	bf00      	nop
 800db18:	bf00      	nop
 800db1a:	e7fd      	b.n	800db18 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <xQueueGenericCreateStatic+0x90>
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <xQueueGenericCreateStatic+0x94>
 800db28:	2301      	movs	r3, #1
 800db2a:	e000      	b.n	800db2e <xQueueGenericCreateStatic+0x96>
 800db2c:	2300      	movs	r3, #0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10d      	bne.n	800db4e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800db32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db36:	b672      	cpsid	i
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	b662      	cpsie	i
 800db46:	61fb      	str	r3, [r7, #28]
}
 800db48:	bf00      	nop
 800db4a:	bf00      	nop
 800db4c:	e7fd      	b.n	800db4a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800db4e:	2350      	movs	r3, #80	@ 0x50
 800db50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b50      	cmp	r3, #80	@ 0x50
 800db56:	d00d      	beq.n	800db74 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5c:	b672      	cpsid	i
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	b662      	cpsie	i
 800db6c:	61bb      	str	r3, [r7, #24]
}
 800db6e:	bf00      	nop
 800db70:	bf00      	nop
 800db72:	e7fd      	b.n	800db70 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800db7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00d      	beq.n	800db9c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800db80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800db8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	4613      	mov	r3, r2
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f000 f848 	bl	800dc2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3730      	adds	r7, #48	@ 0x30
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b08a      	sub	sp, #40	@ 0x28
 800dbaa:	af02      	add	r7, sp, #8
 800dbac:	60f8      	str	r0, [r7, #12]
 800dbae:	60b9      	str	r1, [r7, #8]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10d      	bne.n	800dbd6 <xQueueGenericCreate+0x30>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbbe:	b672      	cpsid	i
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	b662      	cpsie	i
 800dbce:	613b      	str	r3, [r7, #16]
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	e7fd      	b.n	800dbd2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	61fb      	str	r3, [r7, #28]
 800dbe0:	e004      	b.n	800dbec <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	fb02 f303 	mul.w	r3, r2, r3
 800dbea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	3350      	adds	r3, #80	@ 0x50
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f002 ff21 	bl	8010a38 <pvPortMalloc>
 800dbf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d011      	beq.n	800dc22 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	3350      	adds	r3, #80	@ 0x50
 800dc06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc10:	79fa      	ldrb	r2, [r7, #7]
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	4613      	mov	r3, r2
 800dc18:	697a      	ldr	r2, [r7, #20]
 800dc1a:	68b9      	ldr	r1, [r7, #8]
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f000 f805 	bl	800dc2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc22:	69bb      	ldr	r3, [r7, #24]
	}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3720      	adds	r7, #32
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d103      	bne.n	800dc48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	69ba      	ldr	r2, [r7, #24]
 800dc44:	601a      	str	r2, [r3, #0]
 800dc46:	e002      	b.n	800dc4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc5a:	2101      	movs	r1, #1
 800dc5c:	69b8      	ldr	r0, [r7, #24]
 800dc5e:	f7ff feaf 	bl	800d9c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	78fa      	ldrb	r2, [r7, #3]
 800dc66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc6a:	bf00      	nop
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b082      	sub	sp, #8
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00e      	beq.n	800dc9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc92:	2300      	movs	r3, #0
 800dc94:	2200      	movs	r2, #0
 800dc96:	2100      	movs	r1, #0
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f91d 	bl	800ded8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dc9e:	bf00      	nop
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b086      	sub	sp, #24
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	4603      	mov	r3, r0
 800dcae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	617b      	str	r3, [r7, #20]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dcb8:	79fb      	ldrb	r3, [r7, #7]
 800dcba:	461a      	mov	r2, r3
 800dcbc:	6939      	ldr	r1, [r7, #16]
 800dcbe:	6978      	ldr	r0, [r7, #20]
 800dcc0:	f7ff ff71 	bl	800dba6 <xQueueGenericCreate>
 800dcc4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7ff ffd3 	bl	800dc72 <prvInitialiseMutex>

		return xNewQueue;
 800dccc:	68fb      	ldr	r3, [r7, #12]
	}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b088      	sub	sp, #32
 800dcda:	af02      	add	r7, sp, #8
 800dcdc:	4603      	mov	r3, r0
 800dcde:	6039      	str	r1, [r7, #0]
 800dce0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dce2:	2301      	movs	r3, #1
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	2300      	movs	r3, #0
 800dce8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	6939      	ldr	r1, [r7, #16]
 800dcf4:	6978      	ldr	r0, [r7, #20]
 800dcf6:	f7ff fecf 	bl	800da98 <xQueueGenericCreateStatic>
 800dcfa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f7ff ffb8 	bl	800dc72 <prvInitialiseMutex>

		return xNewQueue;
 800dd02:	68fb      	ldr	r3, [r7, #12]
	}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dd0c:	b590      	push	{r4, r7, lr}
 800dd0e:	b087      	sub	sp, #28
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10d      	bne.n	800dd3a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd22:	b672      	cpsid	i
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	b662      	cpsie	i
 800dd32:	60fb      	str	r3, [r7, #12]
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop
 800dd38:	e7fd      	b.n	800dd36 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	689c      	ldr	r4, [r3, #8]
 800dd3e:	f001 fea5 	bl	800fa8c <xTaskGetCurrentTaskHandle>
 800dd42:	4603      	mov	r3, r0
 800dd44:	429c      	cmp	r4, r3
 800dd46:	d111      	bne.n	800dd6c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	1e5a      	subs	r2, r3, #1
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d105      	bne.n	800dd66 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2100      	movs	r1, #0
 800dd60:	6938      	ldr	r0, [r7, #16]
 800dd62:	f000 f8b9 	bl	800ded8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dd66:	2301      	movs	r3, #1
 800dd68:	617b      	str	r3, [r7, #20]
 800dd6a:	e001      	b.n	800dd70 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dd70:	697b      	ldr	r3, [r7, #20]
	}
 800dd72:	4618      	mov	r0, r3
 800dd74:	371c      	adds	r7, #28
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd90      	pop	{r4, r7, pc}

0800dd7a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dd7a:	b590      	push	{r4, r7, lr}
 800dd7c:	b087      	sub	sp, #28
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10d      	bne.n	800ddaa <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	b672      	cpsid	i
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	b662      	cpsie	i
 800dda2:	60fb      	str	r3, [r7, #12]
}
 800dda4:	bf00      	nop
 800dda6:	bf00      	nop
 800dda8:	e7fd      	b.n	800dda6 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	689c      	ldr	r4, [r3, #8]
 800ddae:	f001 fe6d 	bl	800fa8c <xTaskGetCurrentTaskHandle>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	429c      	cmp	r4, r3
 800ddb6:	d107      	bne.n	800ddc8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	1c5a      	adds	r2, r3, #1
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	617b      	str	r3, [r7, #20]
 800ddc6:	e00c      	b.n	800dde2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6938      	ldr	r0, [r7, #16]
 800ddcc:	f000 fbb2 	bl	800e534 <xQueueSemaphoreTake>
 800ddd0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dde2:	697b      	ldr	r3, [r7, #20]
	}
 800dde4:	4618      	mov	r0, r3
 800dde6:	371c      	adds	r7, #28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd90      	pop	{r4, r7, pc}

0800ddec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b08a      	sub	sp, #40	@ 0x28
 800ddf0:	af02      	add	r7, sp, #8
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10d      	bne.n	800de1a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800ddfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de02:	b672      	cpsid	i
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	b662      	cpsie	i
 800de12:	61bb      	str	r3, [r7, #24]
}
 800de14:	bf00      	nop
 800de16:	bf00      	nop
 800de18:	e7fd      	b.n	800de16 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d90d      	bls.n	800de3e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de26:	b672      	cpsid	i
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	b662      	cpsie	i
 800de36:	617b      	str	r3, [r7, #20]
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	e7fd      	b.n	800de3a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800de3e:	2302      	movs	r3, #2
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	2100      	movs	r1, #0
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f7ff fe25 	bl	800da98 <xQueueGenericCreateStatic>
 800de4e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800de5c:	69fb      	ldr	r3, [r7, #28]
	}
 800de5e:	4618      	mov	r0, r3
 800de60:	3720      	adds	r7, #32
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800de66:	b580      	push	{r7, lr}
 800de68:	b086      	sub	sp, #24
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10d      	bne.n	800de92 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800de76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7a:	b672      	cpsid	i
 800de7c:	f383 8811 	msr	BASEPRI, r3
 800de80:	f3bf 8f6f 	isb	sy
 800de84:	f3bf 8f4f 	dsb	sy
 800de88:	b662      	cpsie	i
 800de8a:	613b      	str	r3, [r7, #16]
}
 800de8c:	bf00      	nop
 800de8e:	bf00      	nop
 800de90:	e7fd      	b.n	800de8e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800de92:	683a      	ldr	r2, [r7, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	429a      	cmp	r2, r3
 800de98:	d90d      	bls.n	800deb6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800de9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9e:	b672      	cpsid	i
 800dea0:	f383 8811 	msr	BASEPRI, r3
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	b662      	cpsie	i
 800deae:	60fb      	str	r3, [r7, #12]
}
 800deb0:	bf00      	nop
 800deb2:	bf00      	nop
 800deb4:	e7fd      	b.n	800deb2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800deb6:	2202      	movs	r2, #2
 800deb8:	2100      	movs	r1, #0
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff fe73 	bl	800dba6 <xQueueGenericCreate>
 800dec0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dece:	697b      	ldr	r3, [r7, #20]
	}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3718      	adds	r7, #24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08e      	sub	sp, #56	@ 0x38
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dee6:	2300      	movs	r3, #0
 800dee8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800deee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10d      	bne.n	800df10 <xQueueGenericSend+0x38>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def8:	b672      	cpsid	i
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	b662      	cpsie	i
 800df08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800df0a:	bf00      	nop
 800df0c:	bf00      	nop
 800df0e:	e7fd      	b.n	800df0c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d103      	bne.n	800df1e <xQueueGenericSend+0x46>
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <xQueueGenericSend+0x4a>
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <xQueueGenericSend+0x4c>
 800df22:	2300      	movs	r3, #0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10d      	bne.n	800df44 <xQueueGenericSend+0x6c>
	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2c:	b672      	cpsid	i
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	b662      	cpsie	i
 800df3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	e7fd      	b.n	800df40 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2b02      	cmp	r3, #2
 800df48:	d103      	bne.n	800df52 <xQueueGenericSend+0x7a>
 800df4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d101      	bne.n	800df56 <xQueueGenericSend+0x7e>
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <xQueueGenericSend+0x80>
 800df56:	2300      	movs	r3, #0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10d      	bne.n	800df78 <xQueueGenericSend+0xa0>
	__asm volatile
 800df5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df60:	b672      	cpsid	i
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	b662      	cpsie	i
 800df70:	623b      	str	r3, [r7, #32]
}
 800df72:	bf00      	nop
 800df74:	bf00      	nop
 800df76:	e7fd      	b.n	800df74 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df78:	f001 fd98 	bl	800faac <xTaskGetSchedulerState>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d102      	bne.n	800df88 <xQueueGenericSend+0xb0>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <xQueueGenericSend+0xb4>
 800df88:	2301      	movs	r3, #1
 800df8a:	e000      	b.n	800df8e <xQueueGenericSend+0xb6>
 800df8c:	2300      	movs	r3, #0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10d      	bne.n	800dfae <xQueueGenericSend+0xd6>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df96:	b672      	cpsid	i
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	b662      	cpsie	i
 800dfa6:	61fb      	str	r3, [r7, #28]
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	e7fd      	b.n	800dfaa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfae:	f002 fc15 	bl	80107dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d302      	bcc.n	800dfc4 <xQueueGenericSend+0xec>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d129      	bne.n	800e018 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	68b9      	ldr	r1, [r7, #8]
 800dfc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfca:	f000 fcd3 	bl	800e974 <prvCopyDataToQueue>
 800dfce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d010      	beq.n	800dffa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfda:	3324      	adds	r3, #36	@ 0x24
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f001 fb83 	bl	800f6e8 <xTaskRemoveFromEventList>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d013      	beq.n	800e010 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dfe8:	4b3f      	ldr	r3, [pc, #252]	@ (800e0e8 <xQueueGenericSend+0x210>)
 800dfea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	e00a      	b.n	800e010 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d007      	beq.n	800e010 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e000:	4b39      	ldr	r3, [pc, #228]	@ (800e0e8 <xQueueGenericSend+0x210>)
 800e002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e006:	601a      	str	r2, [r3, #0]
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e010:	f002 fc1a 	bl	8010848 <vPortExitCritical>
				return pdPASS;
 800e014:	2301      	movs	r3, #1
 800e016:	e063      	b.n	800e0e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d103      	bne.n	800e026 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e01e:	f002 fc13 	bl	8010848 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e022:	2300      	movs	r3, #0
 800e024:	e05c      	b.n	800e0e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d106      	bne.n	800e03a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e02c:	f107 0314 	add.w	r3, r7, #20
 800e030:	4618      	mov	r0, r3
 800e032:	f001 fc27 	bl	800f884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e036:	2301      	movs	r3, #1
 800e038:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e03a:	f002 fc05 	bl	8010848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e03e:	f001 f8a3 	bl	800f188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e042:	f002 fbcb 	bl	80107dc <vPortEnterCritical>
 800e046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e04c:	b25b      	sxtb	r3, r3
 800e04e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e052:	d103      	bne.n	800e05c <xQueueGenericSend+0x184>
 800e054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e056:	2200      	movs	r2, #0
 800e058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e062:	b25b      	sxtb	r3, r3
 800e064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e068:	d103      	bne.n	800e072 <xQueueGenericSend+0x19a>
 800e06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e072:	f002 fbe9 	bl	8010848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e076:	1d3a      	adds	r2, r7, #4
 800e078:	f107 0314 	add.w	r3, r7, #20
 800e07c:	4611      	mov	r1, r2
 800e07e:	4618      	mov	r0, r3
 800e080:	f001 fc16 	bl	800f8b0 <xTaskCheckForTimeOut>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d124      	bne.n	800e0d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e08a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e08c:	f000 fd6a 	bl	800eb64 <prvIsQueueFull>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d018      	beq.n	800e0c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e098:	3310      	adds	r3, #16
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f001 fa8a 	bl	800f5b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e0a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0a6:	f000 fcf5 	bl	800ea94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e0aa:	f001 f87b 	bl	800f1a4 <xTaskResumeAll>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f47f af7c 	bne.w	800dfae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e0e8 <xQueueGenericSend+0x210>)
 800e0b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	e772      	b.n	800dfae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e0c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0ca:	f000 fce3 	bl	800ea94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0ce:	f001 f869 	bl	800f1a4 <xTaskResumeAll>
 800e0d2:	e76c      	b.n	800dfae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e0d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0d6:	f000 fcdd 	bl	800ea94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0da:	f001 f863 	bl	800f1a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e0de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3738      	adds	r7, #56	@ 0x38
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	e000ed04 	.word	0xe000ed04

0800e0ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08e      	sub	sp, #56	@ 0x38
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10d      	bne.n	800e120 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e108:	b672      	cpsid	i
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	b662      	cpsie	i
 800e118:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e11a:	bf00      	nop
 800e11c:	bf00      	nop
 800e11e:	e7fd      	b.n	800e11c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d103      	bne.n	800e12e <xQueueGenericSendFromISR+0x42>
 800e126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <xQueueGenericSendFromISR+0x46>
 800e12e:	2301      	movs	r3, #1
 800e130:	e000      	b.n	800e134 <xQueueGenericSendFromISR+0x48>
 800e132:	2300      	movs	r3, #0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10d      	bne.n	800e154 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e13c:	b672      	cpsid	i
 800e13e:	f383 8811 	msr	BASEPRI, r3
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	b662      	cpsie	i
 800e14c:	623b      	str	r3, [r7, #32]
}
 800e14e:	bf00      	nop
 800e150:	bf00      	nop
 800e152:	e7fd      	b.n	800e150 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b02      	cmp	r3, #2
 800e158:	d103      	bne.n	800e162 <xQueueGenericSendFromISR+0x76>
 800e15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d101      	bne.n	800e166 <xQueueGenericSendFromISR+0x7a>
 800e162:	2301      	movs	r3, #1
 800e164:	e000      	b.n	800e168 <xQueueGenericSendFromISR+0x7c>
 800e166:	2300      	movs	r3, #0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10d      	bne.n	800e188 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e170:	b672      	cpsid	i
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	b662      	cpsie	i
 800e180:	61fb      	str	r3, [r7, #28]
}
 800e182:	bf00      	nop
 800e184:	bf00      	nop
 800e186:	e7fd      	b.n	800e184 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e188:	f002 fc10 	bl	80109ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e18c:	f3ef 8211 	mrs	r2, BASEPRI
 800e190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e194:	b672      	cpsid	i
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	b662      	cpsie	i
 800e1a4:	61ba      	str	r2, [r7, #24]
 800e1a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e1a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d302      	bcc.n	800e1be <xQueueGenericSendFromISR+0xd2>
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d12c      	bne.n	800e218 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	68b9      	ldr	r1, [r7, #8]
 800e1cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1ce:	f000 fbd1 	bl	800e974 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e1d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1da:	d112      	bne.n	800e202 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d016      	beq.n	800e212 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e6:	3324      	adds	r3, #36	@ 0x24
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f001 fa7d 	bl	800f6e8 <xTaskRemoveFromEventList>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00e      	beq.n	800e212 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00b      	beq.n	800e212 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	601a      	str	r2, [r3, #0]
 800e200:	e007      	b.n	800e212 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e206:	3301      	adds	r3, #1
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	b25a      	sxtb	r2, r3
 800e20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e212:	2301      	movs	r3, #1
 800e214:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e216:	e001      	b.n	800e21c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e218:	2300      	movs	r3, #0
 800e21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e226:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3738      	adds	r7, #56	@ 0x38
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b08e      	sub	sp, #56	@ 0x38
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e242:	2b00      	cmp	r3, #0
 800e244:	d10d      	bne.n	800e262 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e24a:	b672      	cpsid	i
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	b662      	cpsie	i
 800e25a:	623b      	str	r3, [r7, #32]
}
 800e25c:	bf00      	nop
 800e25e:	bf00      	nop
 800e260:	e7fd      	b.n	800e25e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00d      	beq.n	800e286 <xQueueGiveFromISR+0x54>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26e:	b672      	cpsid	i
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	b662      	cpsie	i
 800e27e:	61fb      	str	r3, [r7, #28]
}
 800e280:	bf00      	nop
 800e282:	bf00      	nop
 800e284:	e7fd      	b.n	800e282 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d103      	bne.n	800e296 <xQueueGiveFromISR+0x64>
 800e28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d101      	bne.n	800e29a <xQueueGiveFromISR+0x68>
 800e296:	2301      	movs	r3, #1
 800e298:	e000      	b.n	800e29c <xQueueGiveFromISR+0x6a>
 800e29a:	2300      	movs	r3, #0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10d      	bne.n	800e2bc <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a4:	b672      	cpsid	i
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	b662      	cpsie	i
 800e2b4:	61bb      	str	r3, [r7, #24]
}
 800e2b6:	bf00      	nop
 800e2b8:	bf00      	nop
 800e2ba:	e7fd      	b.n	800e2b8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2bc:	f002 fb76 	bl	80109ac <vPortValidateInterruptPriority>
	__asm volatile
 800e2c0:	f3ef 8211 	mrs	r2, BASEPRI
 800e2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c8:	b672      	cpsid	i
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	b662      	cpsie	i
 800e2d8:	617a      	str	r2, [r7, #20]
 800e2da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e2dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d22b      	bcs.n	800e348 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	1c5a      	adds	r2, r3, #1
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e300:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e302:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e30a:	d112      	bne.n	800e332 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e310:	2b00      	cmp	r3, #0
 800e312:	d016      	beq.n	800e342 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e316:	3324      	adds	r3, #36	@ 0x24
 800e318:	4618      	mov	r0, r3
 800e31a:	f001 f9e5 	bl	800f6e8 <xTaskRemoveFromEventList>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00e      	beq.n	800e342 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00b      	beq.n	800e342 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	2201      	movs	r2, #1
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	e007      	b.n	800e342 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e336:	3301      	adds	r3, #1
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	b25a      	sxtb	r2, r3
 800e33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e342:	2301      	movs	r3, #1
 800e344:	637b      	str	r3, [r7, #52]	@ 0x34
 800e346:	e001      	b.n	800e34c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e348:	2300      	movs	r3, #0
 800e34a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f383 8811 	msr	BASEPRI, r3
}
 800e356:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3738      	adds	r7, #56	@ 0x38
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
	...

0800e364 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08c      	sub	sp, #48	@ 0x30
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e370:	2300      	movs	r3, #0
 800e372:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10d      	bne.n	800e39a <xQueueReceive+0x36>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e382:	b672      	cpsid	i
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	b662      	cpsie	i
 800e392:	623b      	str	r3, [r7, #32]
}
 800e394:	bf00      	nop
 800e396:	bf00      	nop
 800e398:	e7fd      	b.n	800e396 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d103      	bne.n	800e3a8 <xQueueReceive+0x44>
 800e3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d101      	bne.n	800e3ac <xQueueReceive+0x48>
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e000      	b.n	800e3ae <xQueueReceive+0x4a>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10d      	bne.n	800e3ce <xQueueReceive+0x6a>
	__asm volatile
 800e3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b6:	b672      	cpsid	i
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	b662      	cpsie	i
 800e3c6:	61fb      	str	r3, [r7, #28]
}
 800e3c8:	bf00      	nop
 800e3ca:	bf00      	nop
 800e3cc:	e7fd      	b.n	800e3ca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3ce:	f001 fb6d 	bl	800faac <xTaskGetSchedulerState>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d102      	bne.n	800e3de <xQueueReceive+0x7a>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d101      	bne.n	800e3e2 <xQueueReceive+0x7e>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e000      	b.n	800e3e4 <xQueueReceive+0x80>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10d      	bne.n	800e404 <xQueueReceive+0xa0>
	__asm volatile
 800e3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ec:	b672      	cpsid	i
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	b662      	cpsie	i
 800e3fc:	61bb      	str	r3, [r7, #24]
}
 800e3fe:	bf00      	nop
 800e400:	bf00      	nop
 800e402:	e7fd      	b.n	800e400 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e404:	f002 f9ea 	bl	80107dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e40c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01f      	beq.n	800e454 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e414:	68b9      	ldr	r1, [r7, #8]
 800e416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e418:	f000 fb16 	bl	800ea48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41e:	1e5a      	subs	r2, r3, #1
 800e420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e422:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e426:	691b      	ldr	r3, [r3, #16]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00f      	beq.n	800e44c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e42e:	3310      	adds	r3, #16
 800e430:	4618      	mov	r0, r3
 800e432:	f001 f959 	bl	800f6e8 <xTaskRemoveFromEventList>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d007      	beq.n	800e44c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e43c:	4b3c      	ldr	r3, [pc, #240]	@ (800e530 <xQueueReceive+0x1cc>)
 800e43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e44c:	f002 f9fc 	bl	8010848 <vPortExitCritical>
				return pdPASS;
 800e450:	2301      	movs	r3, #1
 800e452:	e069      	b.n	800e528 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d103      	bne.n	800e462 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e45a:	f002 f9f5 	bl	8010848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e45e:	2300      	movs	r3, #0
 800e460:	e062      	b.n	800e528 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e464:	2b00      	cmp	r3, #0
 800e466:	d106      	bne.n	800e476 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e468:	f107 0310 	add.w	r3, r7, #16
 800e46c:	4618      	mov	r0, r3
 800e46e:	f001 fa09 	bl	800f884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e472:	2301      	movs	r3, #1
 800e474:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e476:	f002 f9e7 	bl	8010848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e47a:	f000 fe85 	bl	800f188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e47e:	f002 f9ad 	bl	80107dc <vPortEnterCritical>
 800e482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e484:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e488:	b25b      	sxtb	r3, r3
 800e48a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e48e:	d103      	bne.n	800e498 <xQueueReceive+0x134>
 800e490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e492:	2200      	movs	r2, #0
 800e494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e49e:	b25b      	sxtb	r3, r3
 800e4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4a4:	d103      	bne.n	800e4ae <xQueueReceive+0x14a>
 800e4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e4ae:	f002 f9cb 	bl	8010848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4b2:	1d3a      	adds	r2, r7, #4
 800e4b4:	f107 0310 	add.w	r3, r7, #16
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f001 f9f8 	bl	800f8b0 <xTaskCheckForTimeOut>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d123      	bne.n	800e50e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4c8:	f000 fb36 	bl	800eb38 <prvIsQueueEmpty>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d017      	beq.n	800e502 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d4:	3324      	adds	r3, #36	@ 0x24
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	4611      	mov	r1, r2
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f001 f86c 	bl	800f5b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4e2:	f000 fad7 	bl	800ea94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4e6:	f000 fe5d 	bl	800f1a4 <xTaskResumeAll>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d189      	bne.n	800e404 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e530 <xQueueReceive+0x1cc>)
 800e4f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f6:	601a      	str	r2, [r3, #0]
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	e780      	b.n	800e404 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e504:	f000 fac6 	bl	800ea94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e508:	f000 fe4c 	bl	800f1a4 <xTaskResumeAll>
 800e50c:	e77a      	b.n	800e404 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e50e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e510:	f000 fac0 	bl	800ea94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e514:	f000 fe46 	bl	800f1a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e51a:	f000 fb0d 	bl	800eb38 <prvIsQueueEmpty>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	f43f af6f 	beq.w	800e404 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e526:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3730      	adds	r7, #48	@ 0x30
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	e000ed04 	.word	0xe000ed04

0800e534 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b08e      	sub	sp, #56	@ 0x38
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e53e:	2300      	movs	r3, #0
 800e540:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e546:	2300      	movs	r3, #0
 800e548:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10d      	bne.n	800e56c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e554:	b672      	cpsid	i
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	b662      	cpsie	i
 800e564:	623b      	str	r3, [r7, #32]
}
 800e566:	bf00      	nop
 800e568:	bf00      	nop
 800e56a:	e7fd      	b.n	800e568 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e570:	2b00      	cmp	r3, #0
 800e572:	d00d      	beq.n	800e590 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e578:	b672      	cpsid	i
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	b662      	cpsie	i
 800e588:	61fb      	str	r3, [r7, #28]
}
 800e58a:	bf00      	nop
 800e58c:	bf00      	nop
 800e58e:	e7fd      	b.n	800e58c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e590:	f001 fa8c 	bl	800faac <xTaskGetSchedulerState>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d102      	bne.n	800e5a0 <xQueueSemaphoreTake+0x6c>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <xQueueSemaphoreTake+0x70>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	e000      	b.n	800e5a6 <xQueueSemaphoreTake+0x72>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10d      	bne.n	800e5c6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ae:	b672      	cpsid	i
 800e5b0:	f383 8811 	msr	BASEPRI, r3
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	b662      	cpsie	i
 800e5be:	61bb      	str	r3, [r7, #24]
}
 800e5c0:	bf00      	nop
 800e5c2:	bf00      	nop
 800e5c4:	e7fd      	b.n	800e5c2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5c6:	f002 f909 	bl	80107dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d024      	beq.n	800e620 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d8:	1e5a      	subs	r2, r3, #1
 800e5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d104      	bne.n	800e5f0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e5e6:	f001 fbfb 	bl	800fde0 <pvTaskIncrementMutexHeldCount>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00f      	beq.n	800e618 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5fa:	3310      	adds	r3, #16
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f001 f873 	bl	800f6e8 <xTaskRemoveFromEventList>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d007      	beq.n	800e618 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e608:	4b55      	ldr	r3, [pc, #340]	@ (800e760 <xQueueSemaphoreTake+0x22c>)
 800e60a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e60e:	601a      	str	r2, [r3, #0]
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e618:	f002 f916 	bl	8010848 <vPortExitCritical>
				return pdPASS;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e09a      	b.n	800e756 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d114      	bne.n	800e650 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00d      	beq.n	800e648 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e630:	b672      	cpsid	i
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	b662      	cpsie	i
 800e640:	617b      	str	r3, [r7, #20]
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	e7fd      	b.n	800e644 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e648:	f002 f8fe 	bl	8010848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e082      	b.n	800e756 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e652:	2b00      	cmp	r3, #0
 800e654:	d106      	bne.n	800e664 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e656:	f107 030c 	add.w	r3, r7, #12
 800e65a:	4618      	mov	r0, r3
 800e65c:	f001 f912 	bl	800f884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e660:	2301      	movs	r3, #1
 800e662:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e664:	f002 f8f0 	bl	8010848 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e668:	f000 fd8e 	bl	800f188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e66c:	f002 f8b6 	bl	80107dc <vPortEnterCritical>
 800e670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e672:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e676:	b25b      	sxtb	r3, r3
 800e678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e67c:	d103      	bne.n	800e686 <xQueueSemaphoreTake+0x152>
 800e67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e680:	2200      	movs	r2, #0
 800e682:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e688:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e68c:	b25b      	sxtb	r3, r3
 800e68e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e692:	d103      	bne.n	800e69c <xQueueSemaphoreTake+0x168>
 800e694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e696:	2200      	movs	r2, #0
 800e698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e69c:	f002 f8d4 	bl	8010848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6a0:	463a      	mov	r2, r7
 800e6a2:	f107 030c 	add.w	r3, r7, #12
 800e6a6:	4611      	mov	r1, r2
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f001 f901 	bl	800f8b0 <xTaskCheckForTimeOut>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d132      	bne.n	800e71a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6b6:	f000 fa3f 	bl	800eb38 <prvIsQueueEmpty>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d026      	beq.n	800e70e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d109      	bne.n	800e6dc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e6c8:	f002 f888 	bl	80107dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f001 fa09 	bl	800fae8 <xTaskPriorityInherit>
 800e6d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e6d8:	f002 f8b6 	bl	8010848 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6de:	3324      	adds	r3, #36	@ 0x24
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f000 ff67 	bl	800f5b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6ec:	f000 f9d2 	bl	800ea94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6f0:	f000 fd58 	bl	800f1a4 <xTaskResumeAll>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f47f af65 	bne.w	800e5c6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e6fc:	4b18      	ldr	r3, [pc, #96]	@ (800e760 <xQueueSemaphoreTake+0x22c>)
 800e6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	e75b      	b.n	800e5c6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e70e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e710:	f000 f9c0 	bl	800ea94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e714:	f000 fd46 	bl	800f1a4 <xTaskResumeAll>
 800e718:	e755      	b.n	800e5c6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e71a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e71c:	f000 f9ba 	bl	800ea94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e720:	f000 fd40 	bl	800f1a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e724:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e726:	f000 fa07 	bl	800eb38 <prvIsQueueEmpty>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f43f af4a 	beq.w	800e5c6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00d      	beq.n	800e754 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e738:	f002 f850 	bl	80107dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e73c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e73e:	f000 f901 	bl	800e944 <prvGetDisinheritPriorityAfterTimeout>
 800e742:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e74a:	4618      	mov	r0, r3
 800e74c:	f001 faa8 	bl	800fca0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e750:	f002 f87a 	bl	8010848 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e756:	4618      	mov	r0, r3
 800e758:	3738      	adds	r7, #56	@ 0x38
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	e000ed04 	.word	0xe000ed04

0800e764 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b08e      	sub	sp, #56	@ 0x38
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10d      	bne.n	800e796 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77e:	b672      	cpsid	i
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	b662      	cpsie	i
 800e78e:	623b      	str	r3, [r7, #32]
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	e7fd      	b.n	800e792 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d103      	bne.n	800e7a4 <xQueueReceiveFromISR+0x40>
 800e79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d101      	bne.n	800e7a8 <xQueueReceiveFromISR+0x44>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e000      	b.n	800e7aa <xQueueReceiveFromISR+0x46>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d10d      	bne.n	800e7ca <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b2:	b672      	cpsid	i
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	b662      	cpsie	i
 800e7c2:	61fb      	str	r3, [r7, #28]
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop
 800e7c8:	e7fd      	b.n	800e7c6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ca:	f002 f8ef 	bl	80109ac <vPortValidateInterruptPriority>
	__asm volatile
 800e7ce:	f3ef 8211 	mrs	r2, BASEPRI
 800e7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d6:	b672      	cpsid	i
 800e7d8:	f383 8811 	msr	BASEPRI, r3
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f3bf 8f4f 	dsb	sy
 800e7e4:	b662      	cpsie	i
 800e7e6:	61ba      	str	r2, [r7, #24]
 800e7e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e7ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d02f      	beq.n	800e85a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e804:	68b9      	ldr	r1, [r7, #8]
 800e806:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e808:	f000 f91e 	bl	800ea48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80e:	1e5a      	subs	r2, r3, #1
 800e810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e812:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e814:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e818:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e81c:	d112      	bne.n	800e844 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d016      	beq.n	800e854 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e828:	3310      	adds	r3, #16
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 ff5c 	bl	800f6e8 <xTaskRemoveFromEventList>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00e      	beq.n	800e854 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00b      	beq.n	800e854 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2201      	movs	r2, #1
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	e007      	b.n	800e854 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e848:	3301      	adds	r3, #1
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	b25a      	sxtb	r2, r3
 800e84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e854:	2301      	movs	r3, #1
 800e856:	637b      	str	r3, [r7, #52]	@ 0x34
 800e858:	e001      	b.n	800e85e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e860:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	f383 8811 	msr	BASEPRI, r3
}
 800e868:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3738      	adds	r7, #56	@ 0x38
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10d      	bne.n	800e89e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e886:	b672      	cpsid	i
 800e888:	f383 8811 	msr	BASEPRI, r3
 800e88c:	f3bf 8f6f 	isb	sy
 800e890:	f3bf 8f4f 	dsb	sy
 800e894:	b662      	cpsie	i
 800e896:	60bb      	str	r3, [r7, #8]
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	e7fd      	b.n	800e89a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800e89e:	f001 ff9d 	bl	80107dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8a6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e8a8:	f001 ffce 	bl	8010848 <vPortExitCritical>

	return uxReturn;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e8b6:	b480      	push	{r7}
 800e8b8:	b087      	sub	sp, #28
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10d      	bne.n	800e8e4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800e8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8cc:	b672      	cpsid	i
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	b662      	cpsie	i
 800e8dc:	60fb      	str	r3, [r7, #12]
}
 800e8de:	bf00      	nop
 800e8e0:	bf00      	nop
 800e8e2:	e7fd      	b.n	800e8e0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8e8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e8ea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	371c      	adds	r7, #28
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10d      	bne.n	800e926 <vQueueDelete+0x2e>
	__asm volatile
 800e90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e90e:	b672      	cpsid	i
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	b662      	cpsie	i
 800e91e:	60bb      	str	r3, [r7, #8]
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	e7fd      	b.n	800e922 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f000 f95e 	bl	800ebe8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e932:	2b00      	cmp	r3, #0
 800e934:	d102      	bne.n	800e93c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f002 f950 	bl	8010bdc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e93c:	bf00      	nop
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e950:	2b00      	cmp	r3, #0
 800e952:	d006      	beq.n	800e962 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	e001      	b.n	800e966 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e962:	2300      	movs	r3, #0
 800e964:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e966:	68fb      	ldr	r3, [r7, #12]
	}
 800e968:	4618      	mov	r0, r3
 800e96a:	3714      	adds	r7, #20
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e980:	2300      	movs	r3, #0
 800e982:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e988:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10d      	bne.n	800e9ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d14d      	bne.n	800ea36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f001 f90a 	bl	800fbb8 <xTaskPriorityDisinherit>
 800e9a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	609a      	str	r2, [r3, #8]
 800e9ac:	e043      	b.n	800ea36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d119      	bne.n	800e9e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	6858      	ldr	r0, [r3, #4]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9bc:	461a      	mov	r2, r3
 800e9be:	68b9      	ldr	r1, [r7, #8]
 800e9c0:	f011 fc45 	bl	802024e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	685a      	ldr	r2, [r3, #4]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9cc:	441a      	add	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d32b      	bcc.n	800ea36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	605a      	str	r2, [r3, #4]
 800e9e6:	e026      	b.n	800ea36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	68d8      	ldr	r0, [r3, #12]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	68b9      	ldr	r1, [r7, #8]
 800e9f4:	f011 fc2b 	bl	802024e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	68da      	ldr	r2, [r3, #12]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea00:	425b      	negs	r3, r3
 800ea02:	441a      	add	r2, r3
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	68da      	ldr	r2, [r3, #12]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d207      	bcs.n	800ea24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	689a      	ldr	r2, [r3, #8]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea1c:	425b      	negs	r3, r3
 800ea1e:	441a      	add	r2, r3
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	d105      	bne.n	800ea36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	3b01      	subs	r3, #1
 800ea34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ea3e:	697b      	ldr	r3, [r7, #20]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3718      	adds	r7, #24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d018      	beq.n	800ea8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	68da      	ldr	r2, [r3, #12]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea62:	441a      	add	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d303      	bcc.n	800ea7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	68d9      	ldr	r1, [r3, #12]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea84:	461a      	mov	r2, r3
 800ea86:	6838      	ldr	r0, [r7, #0]
 800ea88:	f011 fbe1 	bl	802024e <memcpy>
	}
}
 800ea8c:	bf00      	nop
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea9c:	f001 fe9e 	bl	80107dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eaa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eaa8:	e011      	b.n	800eace <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d012      	beq.n	800ead8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	3324      	adds	r3, #36	@ 0x24
 800eab6:	4618      	mov	r0, r3
 800eab8:	f000 fe16 	bl	800f6e8 <xTaskRemoveFromEventList>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eac2:	f000 ff5d 	bl	800f980 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eac6:	7bfb      	ldrb	r3, [r7, #15]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	dce9      	bgt.n	800eaaa <prvUnlockQueue+0x16>
 800ead6:	e000      	b.n	800eada <prvUnlockQueue+0x46>
					break;
 800ead8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	22ff      	movs	r2, #255	@ 0xff
 800eade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eae2:	f001 feb1 	bl	8010848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eae6:	f001 fe79 	bl	80107dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eaf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eaf2:	e011      	b.n	800eb18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d012      	beq.n	800eb22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	3310      	adds	r3, #16
 800eb00:	4618      	mov	r0, r3
 800eb02:	f000 fdf1 	bl	800f6e8 <xTaskRemoveFromEventList>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d001      	beq.n	800eb10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb0c:	f000 ff38 	bl	800f980 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb10:	7bbb      	ldrb	r3, [r7, #14]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	dce9      	bgt.n	800eaf4 <prvUnlockQueue+0x60>
 800eb20:	e000      	b.n	800eb24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	22ff      	movs	r2, #255	@ 0xff
 800eb28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800eb2c:	f001 fe8c 	bl	8010848 <vPortExitCritical>
}
 800eb30:	bf00      	nop
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb40:	f001 fe4c 	bl	80107dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d102      	bne.n	800eb52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	e001      	b.n	800eb56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eb52:	2300      	movs	r3, #0
 800eb54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb56:	f001 fe77 	bl	8010848 <vPortExitCritical>

	return xReturn;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb6c:	f001 fe36 	bl	80107dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d102      	bne.n	800eb82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	60fb      	str	r3, [r7, #12]
 800eb80:	e001      	b.n	800eb86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eb82:	2300      	movs	r3, #0
 800eb84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb86:	f001 fe5f 	bl	8010848 <vPortExitCritical>

	return xReturn;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb9e:	2300      	movs	r3, #0
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	e014      	b.n	800ebce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eba4:	4a0f      	ldr	r2, [pc, #60]	@ (800ebe4 <vQueueAddToRegistry+0x50>)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10b      	bne.n	800ebc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ebb0:	490c      	ldr	r1, [pc, #48]	@ (800ebe4 <vQueueAddToRegistry+0x50>)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	683a      	ldr	r2, [r7, #0]
 800ebb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ebba:	4a0a      	ldr	r2, [pc, #40]	@ (800ebe4 <vQueueAddToRegistry+0x50>)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	4413      	add	r3, r2
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ebc6:	e006      	b.n	800ebd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2b0b      	cmp	r3, #11
 800ebd2:	d9e7      	bls.n	800eba4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ebd4:	bf00      	nop
 800ebd6:	bf00      	nop
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	20006fb8 	.word	0x20006fb8

0800ebe8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	60fb      	str	r3, [r7, #12]
 800ebf4:	e016      	b.n	800ec24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ebf6:	4a10      	ldr	r2, [pc, #64]	@ (800ec38 <vQueueUnregisterQueue+0x50>)
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	4413      	add	r3, r2
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d10b      	bne.n	800ec1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ec06:	4a0c      	ldr	r2, [pc, #48]	@ (800ec38 <vQueueUnregisterQueue+0x50>)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ec10:	4a09      	ldr	r2, [pc, #36]	@ (800ec38 <vQueueUnregisterQueue+0x50>)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	00db      	lsls	r3, r3, #3
 800ec16:	4413      	add	r3, r2
 800ec18:	2200      	movs	r2, #0
 800ec1a:	605a      	str	r2, [r3, #4]
				break;
 800ec1c:	e006      	b.n	800ec2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3301      	adds	r3, #1
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b0b      	cmp	r3, #11
 800ec28:	d9e5      	bls.n	800ebf6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ec2a:	bf00      	nop
 800ec2c:	bf00      	nop
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	20006fb8 	.word	0x20006fb8

0800ec3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ec4c:	f001 fdc6 	bl	80107dc <vPortEnterCritical>
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec56:	b25b      	sxtb	r3, r3
 800ec58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec5c:	d103      	bne.n	800ec66 <vQueueWaitForMessageRestricted+0x2a>
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec6c:	b25b      	sxtb	r3, r3
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec72:	d103      	bne.n	800ec7c <vQueueWaitForMessageRestricted+0x40>
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	2200      	movs	r2, #0
 800ec78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec7c:	f001 fde4 	bl	8010848 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d106      	bne.n	800ec96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	3324      	adds	r3, #36	@ 0x24
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	68b9      	ldr	r1, [r7, #8]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 fcfb 	bl	800f68c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ec96:	6978      	ldr	r0, [r7, #20]
 800ec98:	f7ff fefc 	bl	800ea94 <prvUnlockQueue>
	}
 800ec9c:	bf00      	nop
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b08e      	sub	sp, #56	@ 0x38
 800eca8:	af04      	add	r7, sp, #16
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ecb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d10d      	bne.n	800ecd4 <xTaskCreateStatic+0x30>
	__asm volatile
 800ecb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecbc:	b672      	cpsid	i
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	b662      	cpsie	i
 800eccc:	623b      	str	r3, [r7, #32]
}
 800ecce:	bf00      	nop
 800ecd0:	bf00      	nop
 800ecd2:	e7fd      	b.n	800ecd0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10d      	bne.n	800ecf6 <xTaskCreateStatic+0x52>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecde:	b672      	cpsid	i
 800ece0:	f383 8811 	msr	BASEPRI, r3
 800ece4:	f3bf 8f6f 	isb	sy
 800ece8:	f3bf 8f4f 	dsb	sy
 800ecec:	b662      	cpsie	i
 800ecee:	61fb      	str	r3, [r7, #28]
}
 800ecf0:	bf00      	nop
 800ecf2:	bf00      	nop
 800ecf4:	e7fd      	b.n	800ecf2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ecf6:	23a8      	movs	r3, #168	@ 0xa8
 800ecf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	2ba8      	cmp	r3, #168	@ 0xa8
 800ecfe:	d00d      	beq.n	800ed1c <xTaskCreateStatic+0x78>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed04:	b672      	cpsid	i
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	b662      	cpsie	i
 800ed14:	61bb      	str	r3, [r7, #24]
}
 800ed16:	bf00      	nop
 800ed18:	bf00      	nop
 800ed1a:	e7fd      	b.n	800ed18 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d01e      	beq.n	800ed62 <xTaskCreateStatic+0xbe>
 800ed24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d01b      	beq.n	800ed62 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed36:	2202      	movs	r2, #2
 800ed38:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	9303      	str	r3, [sp, #12]
 800ed40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed42:	9302      	str	r3, [sp, #8]
 800ed44:	f107 0314 	add.w	r3, r7, #20
 800ed48:	9301      	str	r3, [sp, #4]
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	68b9      	ldr	r1, [r7, #8]
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f000 f851 	bl	800edfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed5c:	f000 f8f8 	bl	800ef50 <prvAddNewTaskToReadyList>
 800ed60:	e001      	b.n	800ed66 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ed62:	2300      	movs	r3, #0
 800ed64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ed66:	697b      	ldr	r3, [r7, #20]
	}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3728      	adds	r7, #40	@ 0x28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08c      	sub	sp, #48	@ 0x30
 800ed74:	af04      	add	r7, sp, #16
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	603b      	str	r3, [r7, #0]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ed80:	88fb      	ldrh	r3, [r7, #6]
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	4618      	mov	r0, r3
 800ed86:	f001 fe57 	bl	8010a38 <pvPortMalloc>
 800ed8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00e      	beq.n	800edb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ed92:	20a8      	movs	r0, #168	@ 0xa8
 800ed94:	f001 fe50 	bl	8010a38 <pvPortMalloc>
 800ed98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d003      	beq.n	800eda8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	697a      	ldr	r2, [r7, #20]
 800eda4:	631a      	str	r2, [r3, #48]	@ 0x30
 800eda6:	e005      	b.n	800edb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eda8:	6978      	ldr	r0, [r7, #20]
 800edaa:	f001 ff17 	bl	8010bdc <vPortFree>
 800edae:	e001      	b.n	800edb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d017      	beq.n	800edea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800edc2:	88fa      	ldrh	r2, [r7, #6]
 800edc4:	2300      	movs	r3, #0
 800edc6:	9303      	str	r3, [sp, #12]
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	9302      	str	r3, [sp, #8]
 800edcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edce:	9301      	str	r3, [sp, #4]
 800edd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	68b9      	ldr	r1, [r7, #8]
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f000 f80f 	bl	800edfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800edde:	69f8      	ldr	r0, [r7, #28]
 800ede0:	f000 f8b6 	bl	800ef50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ede4:	2301      	movs	r3, #1
 800ede6:	61bb      	str	r3, [r7, #24]
 800ede8:	e002      	b.n	800edf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800edea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800edee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800edf0:	69bb      	ldr	r3, [r7, #24]
	}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3720      	adds	r7, #32
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
	...

0800edfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	607a      	str	r2, [r7, #4]
 800ee08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	461a      	mov	r2, r3
 800ee14:	21a5      	movs	r1, #165	@ 0xa5
 800ee16:	f011 f9a5 	bl	8020164 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee1e:	6879      	ldr	r1, [r7, #4]
 800ee20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ee24:	440b      	add	r3, r1
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	f023 0307 	bic.w	r3, r3, #7
 800ee32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	f003 0307 	and.w	r3, r3, #7
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00d      	beq.n	800ee5a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800ee3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee42:	b672      	cpsid	i
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	b662      	cpsie	i
 800ee52:	617b      	str	r3, [r7, #20]
}
 800ee54:	bf00      	nop
 800ee56:	bf00      	nop
 800ee58:	e7fd      	b.n	800ee56 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d01f      	beq.n	800eea0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee60:	2300      	movs	r3, #0
 800ee62:	61fb      	str	r3, [r7, #28]
 800ee64:	e012      	b.n	800ee8c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	7819      	ldrb	r1, [r3, #0]
 800ee6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	4413      	add	r3, r2
 800ee74:	3334      	adds	r3, #52	@ 0x34
 800ee76:	460a      	mov	r2, r1
 800ee78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	69fb      	ldr	r3, [r7, #28]
 800ee7e:	4413      	add	r3, r2
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d006      	beq.n	800ee94 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	61fb      	str	r3, [r7, #28]
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2b0f      	cmp	r3, #15
 800ee90:	d9e9      	bls.n	800ee66 <prvInitialiseNewTask+0x6a>
 800ee92:	e000      	b.n	800ee96 <prvInitialiseNewTask+0x9a>
			{
				break;
 800ee94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee98:	2200      	movs	r2, #0
 800ee9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ee9e:	e003      	b.n	800eea8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeaa:	2b37      	cmp	r3, #55	@ 0x37
 800eeac:	d901      	bls.n	800eeb2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eeae:	2337      	movs	r3, #55	@ 0x37
 800eeb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eeb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eebc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec0:	2200      	movs	r2, #0
 800eec2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec6:	3304      	adds	r3, #4
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe fce5 	bl	800d898 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed0:	3318      	adds	r3, #24
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fe fce0 	bl	800d898 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eedc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eeec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef0:	2200      	movs	r2, #0
 800eef2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef00:	3354      	adds	r3, #84	@ 0x54
 800ef02:	224c      	movs	r2, #76	@ 0x4c
 800ef04:	2100      	movs	r1, #0
 800ef06:	4618      	mov	r0, r3
 800ef08:	f011 f92c 	bl	8020164 <memset>
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0e:	4a0d      	ldr	r2, [pc, #52]	@ (800ef44 <prvInitialiseNewTask+0x148>)
 800ef10:	659a      	str	r2, [r3, #88]	@ 0x58
 800ef12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef14:	4a0c      	ldr	r2, [pc, #48]	@ (800ef48 <prvInitialiseNewTask+0x14c>)
 800ef16:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ef18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ef4c <prvInitialiseNewTask+0x150>)
 800ef1c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef1e:	683a      	ldr	r2, [r7, #0]
 800ef20:	68f9      	ldr	r1, [r7, #12]
 800ef22:	69b8      	ldr	r0, [r7, #24]
 800ef24:	f001 fb4c 	bl	80105c0 <pxPortInitialiseStack>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef3a:	bf00      	nop
 800ef3c:	3720      	adds	r7, #32
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	20022910 	.word	0x20022910
 800ef48:	20022978 	.word	0x20022978
 800ef4c:	200229e0 	.word	0x200229e0

0800ef50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef58:	f001 fc40 	bl	80107dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef5c:	4b2d      	ldr	r3, [pc, #180]	@ (800f014 <prvAddNewTaskToReadyList+0xc4>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3301      	adds	r3, #1
 800ef62:	4a2c      	ldr	r2, [pc, #176]	@ (800f014 <prvAddNewTaskToReadyList+0xc4>)
 800ef64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef66:	4b2c      	ldr	r3, [pc, #176]	@ (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d109      	bne.n	800ef82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ef6e:	4a2a      	ldr	r2, [pc, #168]	@ (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef74:	4b27      	ldr	r3, [pc, #156]	@ (800f014 <prvAddNewTaskToReadyList+0xc4>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d110      	bne.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef7c:	f000 fd24 	bl	800f9c8 <prvInitialiseTaskLists>
 800ef80:	e00d      	b.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef82:	4b26      	ldr	r3, [pc, #152]	@ (800f01c <prvAddNewTaskToReadyList+0xcc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d109      	bne.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef8a:	4b23      	ldr	r3, [pc, #140]	@ (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d802      	bhi.n	800ef9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ef98:	4a1f      	ldr	r2, [pc, #124]	@ (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ef9e:	4b20      	ldr	r3, [pc, #128]	@ (800f020 <prvAddNewTaskToReadyList+0xd0>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3301      	adds	r3, #1
 800efa4:	4a1e      	ldr	r2, [pc, #120]	@ (800f020 <prvAddNewTaskToReadyList+0xd0>)
 800efa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800efa8:	4b1d      	ldr	r3, [pc, #116]	@ (800f020 <prvAddNewTaskToReadyList+0xd0>)
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efb4:	4b1b      	ldr	r3, [pc, #108]	@ (800f024 <prvAddNewTaskToReadyList+0xd4>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d903      	bls.n	800efc4 <prvAddNewTaskToReadyList+0x74>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efc0:	4a18      	ldr	r2, [pc, #96]	@ (800f024 <prvAddNewTaskToReadyList+0xd4>)
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc8:	4613      	mov	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	4a15      	ldr	r2, [pc, #84]	@ (800f028 <prvAddNewTaskToReadyList+0xd8>)
 800efd2:	441a      	add	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3304      	adds	r3, #4
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f7fe fc69 	bl	800d8b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800efe0:	f001 fc32 	bl	8010848 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800efe4:	4b0d      	ldr	r3, [pc, #52]	@ (800f01c <prvAddNewTaskToReadyList+0xcc>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00e      	beq.n	800f00a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800efec:	4b0a      	ldr	r3, [pc, #40]	@ (800f018 <prvAddNewTaskToReadyList+0xc8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d207      	bcs.n	800f00a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800effa:	4b0c      	ldr	r3, [pc, #48]	@ (800f02c <prvAddNewTaskToReadyList+0xdc>)
 800effc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	200074d4 	.word	0x200074d4
 800f018:	20007018 	.word	0x20007018
 800f01c:	200074e0 	.word	0x200074e0
 800f020:	200074f0 	.word	0x200074f0
 800f024:	200074dc 	.word	0x200074dc
 800f028:	2000701c 	.word	0x2000701c
 800f02c:	e000ed04 	.word	0xe000ed04

0800f030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f038:	2300      	movs	r3, #0
 800f03a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d01a      	beq.n	800f078 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f042:	4b15      	ldr	r3, [pc, #84]	@ (800f098 <vTaskDelay+0x68>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00d      	beq.n	800f066 <vTaskDelay+0x36>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f04e:	b672      	cpsid	i
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	b662      	cpsie	i
 800f05e:	60bb      	str	r3, [r7, #8]
}
 800f060:	bf00      	nop
 800f062:	bf00      	nop
 800f064:	e7fd      	b.n	800f062 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f066:	f000 f88f 	bl	800f188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f06a:	2100      	movs	r1, #0
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 fecb 	bl	800fe08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f072:	f000 f897 	bl	800f1a4 <xTaskResumeAll>
 800f076:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d107      	bne.n	800f08e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f07e:	4b07      	ldr	r3, [pc, #28]	@ (800f09c <vTaskDelay+0x6c>)
 800f080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f08e:	bf00      	nop
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	200074fc 	.word	0x200074fc
 800f09c:	e000ed04 	.word	0xe000ed04

0800f0a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b08a      	sub	sp, #40	@ 0x28
 800f0a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0ae:	463a      	mov	r2, r7
 800f0b0:	1d39      	adds	r1, r7, #4
 800f0b2:	f107 0308 	add.w	r3, r7, #8
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe f994 	bl	800d3e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0bc:	6839      	ldr	r1, [r7, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	68ba      	ldr	r2, [r7, #8]
 800f0c2:	9202      	str	r2, [sp, #8]
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	460a      	mov	r2, r1
 800f0ce:	4926      	ldr	r1, [pc, #152]	@ (800f168 <vTaskStartScheduler+0xc8>)
 800f0d0:	4826      	ldr	r0, [pc, #152]	@ (800f16c <vTaskStartScheduler+0xcc>)
 800f0d2:	f7ff fde7 	bl	800eca4 <xTaskCreateStatic>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	4a25      	ldr	r2, [pc, #148]	@ (800f170 <vTaskStartScheduler+0xd0>)
 800f0da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0dc:	4b24      	ldr	r3, [pc, #144]	@ (800f170 <vTaskStartScheduler+0xd0>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	617b      	str	r3, [r7, #20]
 800f0e8:	e001      	b.n	800f0ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d102      	bne.n	800f0fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f0f4:	f000 fedc 	bl	800feb0 <xTimerCreateTimerTask>
 800f0f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d11d      	bne.n	800f13c <vTaskStartScheduler+0x9c>
	__asm volatile
 800f100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f104:	b672      	cpsid	i
 800f106:	f383 8811 	msr	BASEPRI, r3
 800f10a:	f3bf 8f6f 	isb	sy
 800f10e:	f3bf 8f4f 	dsb	sy
 800f112:	b662      	cpsie	i
 800f114:	613b      	str	r3, [r7, #16]
}
 800f116:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f118:	4b16      	ldr	r3, [pc, #88]	@ (800f174 <vTaskStartScheduler+0xd4>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3354      	adds	r3, #84	@ 0x54
 800f11e:	4a16      	ldr	r2, [pc, #88]	@ (800f178 <vTaskStartScheduler+0xd8>)
 800f120:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f122:	4b16      	ldr	r3, [pc, #88]	@ (800f17c <vTaskStartScheduler+0xdc>)
 800f124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f128:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f12a:	4b15      	ldr	r3, [pc, #84]	@ (800f180 <vTaskStartScheduler+0xe0>)
 800f12c:	2201      	movs	r2, #1
 800f12e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f130:	4b14      	ldr	r3, [pc, #80]	@ (800f184 <vTaskStartScheduler+0xe4>)
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f136:	f001 fad3 	bl	80106e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f13a:	e011      	b.n	800f160 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f142:	d10d      	bne.n	800f160 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f148:	b672      	cpsid	i
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	b662      	cpsie	i
 800f158:	60fb      	str	r3, [r7, #12]
}
 800f15a:	bf00      	nop
 800f15c:	bf00      	nop
 800f15e:	e7fd      	b.n	800f15c <vTaskStartScheduler+0xbc>
}
 800f160:	bf00      	nop
 800f162:	3718      	adds	r7, #24
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	0802100c 	.word	0x0802100c
 800f16c:	0800f999 	.word	0x0800f999
 800f170:	200074f8 	.word	0x200074f8
 800f174:	20007018 	.word	0x20007018
 800f178:	20000080 	.word	0x20000080
 800f17c:	200074f4 	.word	0x200074f4
 800f180:	200074e0 	.word	0x200074e0
 800f184:	200074d8 	.word	0x200074d8

0800f188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f188:	b480      	push	{r7}
 800f18a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f18c:	4b04      	ldr	r3, [pc, #16]	@ (800f1a0 <vTaskSuspendAll+0x18>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	3301      	adds	r3, #1
 800f192:	4a03      	ldr	r2, [pc, #12]	@ (800f1a0 <vTaskSuspendAll+0x18>)
 800f194:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f196:	bf00      	nop
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr
 800f1a0:	200074fc 	.word	0x200074fc

0800f1a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1b2:	4b43      	ldr	r3, [pc, #268]	@ (800f2c0 <xTaskResumeAll+0x11c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d10d      	bne.n	800f1d6 <xTaskResumeAll+0x32>
	__asm volatile
 800f1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1be:	b672      	cpsid	i
 800f1c0:	f383 8811 	msr	BASEPRI, r3
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	b662      	cpsie	i
 800f1ce:	603b      	str	r3, [r7, #0]
}
 800f1d0:	bf00      	nop
 800f1d2:	bf00      	nop
 800f1d4:	e7fd      	b.n	800f1d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1d6:	f001 fb01 	bl	80107dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1da:	4b39      	ldr	r3, [pc, #228]	@ (800f2c0 <xTaskResumeAll+0x11c>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	3b01      	subs	r3, #1
 800f1e0:	4a37      	ldr	r2, [pc, #220]	@ (800f2c0 <xTaskResumeAll+0x11c>)
 800f1e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1e4:	4b36      	ldr	r3, [pc, #216]	@ (800f2c0 <xTaskResumeAll+0x11c>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d162      	bne.n	800f2b2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1ec:	4b35      	ldr	r3, [pc, #212]	@ (800f2c4 <xTaskResumeAll+0x120>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d05e      	beq.n	800f2b2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1f4:	e02f      	b.n	800f256 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f6:	4b34      	ldr	r3, [pc, #208]	@ (800f2c8 <xTaskResumeAll+0x124>)
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	3318      	adds	r3, #24
 800f202:	4618      	mov	r0, r3
 800f204:	f7fe fbb2 	bl	800d96c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	3304      	adds	r3, #4
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fe fbad 	bl	800d96c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f216:	4b2d      	ldr	r3, [pc, #180]	@ (800f2cc <xTaskResumeAll+0x128>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d903      	bls.n	800f226 <xTaskResumeAll+0x82>
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f222:	4a2a      	ldr	r2, [pc, #168]	@ (800f2cc <xTaskResumeAll+0x128>)
 800f224:	6013      	str	r3, [r2, #0]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22a:	4613      	mov	r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4413      	add	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	4a27      	ldr	r2, [pc, #156]	@ (800f2d0 <xTaskResumeAll+0x12c>)
 800f234:	441a      	add	r2, r3
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3304      	adds	r3, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	4610      	mov	r0, r2
 800f23e:	f7fe fb38 	bl	800d8b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f246:	4b23      	ldr	r3, [pc, #140]	@ (800f2d4 <xTaskResumeAll+0x130>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d302      	bcc.n	800f256 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f250:	4b21      	ldr	r3, [pc, #132]	@ (800f2d8 <xTaskResumeAll+0x134>)
 800f252:	2201      	movs	r2, #1
 800f254:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f256:	4b1c      	ldr	r3, [pc, #112]	@ (800f2c8 <xTaskResumeAll+0x124>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1cb      	bne.n	800f1f6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d001      	beq.n	800f268 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f264:	f000 fbf2 	bl	800fa4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f268:	4b1c      	ldr	r3, [pc, #112]	@ (800f2dc <xTaskResumeAll+0x138>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d010      	beq.n	800f296 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f274:	f000 f858 	bl	800f328 <xTaskIncrementTick>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d002      	beq.n	800f284 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f27e:	4b16      	ldr	r3, [pc, #88]	@ (800f2d8 <xTaskResumeAll+0x134>)
 800f280:	2201      	movs	r2, #1
 800f282:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3b01      	subs	r3, #1
 800f288:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d1f1      	bne.n	800f274 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f290:	4b12      	ldr	r3, [pc, #72]	@ (800f2dc <xTaskResumeAll+0x138>)
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f296:	4b10      	ldr	r3, [pc, #64]	@ (800f2d8 <xTaskResumeAll+0x134>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d009      	beq.n	800f2b2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f2e0 <xTaskResumeAll+0x13c>)
 800f2a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2a8:	601a      	str	r2, [r3, #0]
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2b2:	f001 fac9 	bl	8010848 <vPortExitCritical>

	return xAlreadyYielded;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	200074fc 	.word	0x200074fc
 800f2c4:	200074d4 	.word	0x200074d4
 800f2c8:	200074ac 	.word	0x200074ac
 800f2cc:	200074dc 	.word	0x200074dc
 800f2d0:	2000701c 	.word	0x2000701c
 800f2d4:	20007018 	.word	0x20007018
 800f2d8:	200074e8 	.word	0x200074e8
 800f2dc:	200074e4 	.word	0x200074e4
 800f2e0:	e000ed04 	.word	0xe000ed04

0800f2e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2ea:	4b05      	ldr	r3, [pc, #20]	@ (800f300 <xTaskGetTickCount+0x1c>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2f0:	687b      	ldr	r3, [r7, #4]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr
 800f2fe:	bf00      	nop
 800f300:	200074d8 	.word	0x200074d8

0800f304 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f30a:	f001 fb4f 	bl	80109ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f30e:	2300      	movs	r3, #0
 800f310:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f312:	4b04      	ldr	r3, [pc, #16]	@ (800f324 <xTaskGetTickCountFromISR+0x20>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f318:	683b      	ldr	r3, [r7, #0]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	200074d8 	.word	0x200074d8

0800f328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f32e:	2300      	movs	r3, #0
 800f330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f332:	4b50      	ldr	r3, [pc, #320]	@ (800f474 <xTaskIncrementTick+0x14c>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	f040 808c 	bne.w	800f454 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f33c:	4b4e      	ldr	r3, [pc, #312]	@ (800f478 <xTaskIncrementTick+0x150>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3301      	adds	r3, #1
 800f342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f344:	4a4c      	ldr	r2, [pc, #304]	@ (800f478 <xTaskIncrementTick+0x150>)
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d123      	bne.n	800f398 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f350:	4b4a      	ldr	r3, [pc, #296]	@ (800f47c <xTaskIncrementTick+0x154>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00d      	beq.n	800f376 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f35e:	b672      	cpsid	i
 800f360:	f383 8811 	msr	BASEPRI, r3
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	b662      	cpsie	i
 800f36e:	603b      	str	r3, [r7, #0]
}
 800f370:	bf00      	nop
 800f372:	bf00      	nop
 800f374:	e7fd      	b.n	800f372 <xTaskIncrementTick+0x4a>
 800f376:	4b41      	ldr	r3, [pc, #260]	@ (800f47c <xTaskIncrementTick+0x154>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	60fb      	str	r3, [r7, #12]
 800f37c:	4b40      	ldr	r3, [pc, #256]	@ (800f480 <xTaskIncrementTick+0x158>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a3e      	ldr	r2, [pc, #248]	@ (800f47c <xTaskIncrementTick+0x154>)
 800f382:	6013      	str	r3, [r2, #0]
 800f384:	4a3e      	ldr	r2, [pc, #248]	@ (800f480 <xTaskIncrementTick+0x158>)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	6013      	str	r3, [r2, #0]
 800f38a:	4b3e      	ldr	r3, [pc, #248]	@ (800f484 <xTaskIncrementTick+0x15c>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	3301      	adds	r3, #1
 800f390:	4a3c      	ldr	r2, [pc, #240]	@ (800f484 <xTaskIncrementTick+0x15c>)
 800f392:	6013      	str	r3, [r2, #0]
 800f394:	f000 fb5a 	bl	800fa4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f398:	4b3b      	ldr	r3, [pc, #236]	@ (800f488 <xTaskIncrementTick+0x160>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	693a      	ldr	r2, [r7, #16]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d349      	bcc.n	800f436 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3a2:	4b36      	ldr	r3, [pc, #216]	@ (800f47c <xTaskIncrementTick+0x154>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d104      	bne.n	800f3b6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ac:	4b36      	ldr	r3, [pc, #216]	@ (800f488 <xTaskIncrementTick+0x160>)
 800f3ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f3b2:	601a      	str	r2, [r3, #0]
					break;
 800f3b4:	e03f      	b.n	800f436 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3b6:	4b31      	ldr	r3, [pc, #196]	@ (800f47c <xTaskIncrementTick+0x154>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3c6:	693a      	ldr	r2, [r7, #16]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d203      	bcs.n	800f3d6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3ce:	4a2e      	ldr	r2, [pc, #184]	@ (800f488 <xTaskIncrementTick+0x160>)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3d4:	e02f      	b.n	800f436 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	3304      	adds	r3, #4
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fe fac6 	bl	800d96c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d004      	beq.n	800f3f2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	3318      	adds	r3, #24
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fe fabd 	bl	800d96c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3f6:	4b25      	ldr	r3, [pc, #148]	@ (800f48c <xTaskIncrementTick+0x164>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d903      	bls.n	800f406 <xTaskIncrementTick+0xde>
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f402:	4a22      	ldr	r2, [pc, #136]	@ (800f48c <xTaskIncrementTick+0x164>)
 800f404:	6013      	str	r3, [r2, #0]
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f40a:	4613      	mov	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4a1f      	ldr	r2, [pc, #124]	@ (800f490 <xTaskIncrementTick+0x168>)
 800f414:	441a      	add	r2, r3
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	3304      	adds	r3, #4
 800f41a:	4619      	mov	r1, r3
 800f41c:	4610      	mov	r0, r2
 800f41e:	f7fe fa48 	bl	800d8b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f426:	4b1b      	ldr	r3, [pc, #108]	@ (800f494 <xTaskIncrementTick+0x16c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d3b8      	bcc.n	800f3a2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f430:	2301      	movs	r3, #1
 800f432:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f434:	e7b5      	b.n	800f3a2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f436:	4b17      	ldr	r3, [pc, #92]	@ (800f494 <xTaskIncrementTick+0x16c>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f43c:	4914      	ldr	r1, [pc, #80]	@ (800f490 <xTaskIncrementTick+0x168>)
 800f43e:	4613      	mov	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	4413      	add	r3, r2
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	440b      	add	r3, r1
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d907      	bls.n	800f45e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f44e:	2301      	movs	r3, #1
 800f450:	617b      	str	r3, [r7, #20]
 800f452:	e004      	b.n	800f45e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f454:	4b10      	ldr	r3, [pc, #64]	@ (800f498 <xTaskIncrementTick+0x170>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	3301      	adds	r3, #1
 800f45a:	4a0f      	ldr	r2, [pc, #60]	@ (800f498 <xTaskIncrementTick+0x170>)
 800f45c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f45e:	4b0f      	ldr	r3, [pc, #60]	@ (800f49c <xTaskIncrementTick+0x174>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f466:	2301      	movs	r3, #1
 800f468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f46a:	697b      	ldr	r3, [r7, #20]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	200074fc 	.word	0x200074fc
 800f478:	200074d8 	.word	0x200074d8
 800f47c:	200074a4 	.word	0x200074a4
 800f480:	200074a8 	.word	0x200074a8
 800f484:	200074ec 	.word	0x200074ec
 800f488:	200074f4 	.word	0x200074f4
 800f48c:	200074dc 	.word	0x200074dc
 800f490:	2000701c 	.word	0x2000701c
 800f494:	20007018 	.word	0x20007018
 800f498:	200074e4 	.word	0x200074e4
 800f49c:	200074e8 	.word	0x200074e8

0800f4a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4a6:	4b3e      	ldr	r3, [pc, #248]	@ (800f5a0 <vTaskSwitchContext+0x100>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d003      	beq.n	800f4b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4ae:	4b3d      	ldr	r3, [pc, #244]	@ (800f5a4 <vTaskSwitchContext+0x104>)
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4b4:	e070      	b.n	800f598 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f4b6:	4b3b      	ldr	r3, [pc, #236]	@ (800f5a4 <vTaskSwitchContext+0x104>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f4bc:	4b3a      	ldr	r3, [pc, #232]	@ (800f5a8 <vTaskSwitchContext+0x108>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4c2:	613b      	str	r3, [r7, #16]
 800f4c4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f4c8:	60fb      	str	r3, [r7, #12]
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d111      	bne.n	800f4f8 <vTaskSwitchContext+0x58>
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	3304      	adds	r3, #4
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d10b      	bne.n	800f4f8 <vTaskSwitchContext+0x58>
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	3308      	adds	r3, #8
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d105      	bne.n	800f4f8 <vTaskSwitchContext+0x58>
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	330c      	adds	r3, #12
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d008      	beq.n	800f50a <vTaskSwitchContext+0x6a>
 800f4f8:	4b2b      	ldr	r3, [pc, #172]	@ (800f5a8 <vTaskSwitchContext+0x108>)
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	4b2a      	ldr	r3, [pc, #168]	@ (800f5a8 <vTaskSwitchContext+0x108>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	3334      	adds	r3, #52	@ 0x34
 800f502:	4619      	mov	r1, r3
 800f504:	4610      	mov	r0, r2
 800f506:	f7f1 f9f1 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f50a:	4b28      	ldr	r3, [pc, #160]	@ (800f5ac <vTaskSwitchContext+0x10c>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	617b      	str	r3, [r7, #20]
 800f510:	e013      	b.n	800f53a <vTaskSwitchContext+0x9a>
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10d      	bne.n	800f534 <vTaskSwitchContext+0x94>
	__asm volatile
 800f518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51c:	b672      	cpsid	i
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	b662      	cpsie	i
 800f52c:	607b      	str	r3, [r7, #4]
}
 800f52e:	bf00      	nop
 800f530:	bf00      	nop
 800f532:	e7fd      	b.n	800f530 <vTaskSwitchContext+0x90>
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	3b01      	subs	r3, #1
 800f538:	617b      	str	r3, [r7, #20]
 800f53a:	491d      	ldr	r1, [pc, #116]	@ (800f5b0 <vTaskSwitchContext+0x110>)
 800f53c:	697a      	ldr	r2, [r7, #20]
 800f53e:	4613      	mov	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4413      	add	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	440b      	add	r3, r1
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d0e1      	beq.n	800f512 <vTaskSwitchContext+0x72>
 800f54e:	697a      	ldr	r2, [r7, #20]
 800f550:	4613      	mov	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	4a15      	ldr	r2, [pc, #84]	@ (800f5b0 <vTaskSwitchContext+0x110>)
 800f55a:	4413      	add	r3, r2
 800f55c:	60bb      	str	r3, [r7, #8]
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	685a      	ldr	r2, [r3, #4]
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	605a      	str	r2, [r3, #4]
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	685a      	ldr	r2, [r3, #4]
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	3308      	adds	r3, #8
 800f570:	429a      	cmp	r2, r3
 800f572:	d104      	bne.n	800f57e <vTaskSwitchContext+0xde>
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	685a      	ldr	r2, [r3, #4]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	605a      	str	r2, [r3, #4]
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	4a08      	ldr	r2, [pc, #32]	@ (800f5a8 <vTaskSwitchContext+0x108>)
 800f586:	6013      	str	r3, [r2, #0]
 800f588:	4a08      	ldr	r2, [pc, #32]	@ (800f5ac <vTaskSwitchContext+0x10c>)
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f58e:	4b06      	ldr	r3, [pc, #24]	@ (800f5a8 <vTaskSwitchContext+0x108>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3354      	adds	r3, #84	@ 0x54
 800f594:	4a07      	ldr	r2, [pc, #28]	@ (800f5b4 <vTaskSwitchContext+0x114>)
 800f596:	6013      	str	r3, [r2, #0]
}
 800f598:	bf00      	nop
 800f59a:	3718      	adds	r7, #24
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	200074fc 	.word	0x200074fc
 800f5a4:	200074e8 	.word	0x200074e8
 800f5a8:	20007018 	.word	0x20007018
 800f5ac:	200074dc 	.word	0x200074dc
 800f5b0:	2000701c 	.word	0x2000701c
 800f5b4:	20000080 	.word	0x20000080

0800f5b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10d      	bne.n	800f5e4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5cc:	b672      	cpsid	i
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	b662      	cpsie	i
 800f5dc:	60fb      	str	r3, [r7, #12]
}
 800f5de:	bf00      	nop
 800f5e0:	bf00      	nop
 800f5e2:	e7fd      	b.n	800f5e0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5e4:	4b07      	ldr	r3, [pc, #28]	@ (800f604 <vTaskPlaceOnEventList+0x4c>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3318      	adds	r3, #24
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7fe f984 	bl	800d8fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f5f2:	2101      	movs	r1, #1
 800f5f4:	6838      	ldr	r0, [r7, #0]
 800f5f6:	f000 fc07 	bl	800fe08 <prvAddCurrentTaskToDelayedList>
}
 800f5fa:	bf00      	nop
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	20007018 	.word	0x20007018

0800f608 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d10d      	bne.n	800f636 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 800f61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f61e:	b672      	cpsid	i
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	b662      	cpsie	i
 800f62e:	617b      	str	r3, [r7, #20]
}
 800f630:	bf00      	nop
 800f632:	bf00      	nop
 800f634:	e7fd      	b.n	800f632 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f636:	4b13      	ldr	r3, [pc, #76]	@ (800f684 <vTaskPlaceOnUnorderedEventList+0x7c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10d      	bne.n	800f65a <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 800f63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f642:	b672      	cpsid	i
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	b662      	cpsie	i
 800f652:	613b      	str	r3, [r7, #16]
}
 800f654:	bf00      	nop
 800f656:	bf00      	nop
 800f658:	e7fd      	b.n	800f656 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f65a:	4b0b      	ldr	r3, [pc, #44]	@ (800f688 <vTaskPlaceOnUnorderedEventList+0x80>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f664:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f666:	4b08      	ldr	r3, [pc, #32]	@ (800f688 <vTaskPlaceOnUnorderedEventList+0x80>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3318      	adds	r3, #24
 800f66c:	4619      	mov	r1, r3
 800f66e:	68f8      	ldr	r0, [r7, #12]
 800f670:	f7fe f91f 	bl	800d8b2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f674:	2101      	movs	r1, #1
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 fbc6 	bl	800fe08 <prvAddCurrentTaskToDelayedList>
}
 800f67c:	bf00      	nop
 800f67e:	3718      	adds	r7, #24
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	200074fc 	.word	0x200074fc
 800f688:	20007018 	.word	0x20007018

0800f68c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d10d      	bne.n	800f6ba <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800f69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a2:	b672      	cpsid	i
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	b662      	cpsie	i
 800f6b2:	617b      	str	r3, [r7, #20]
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	e7fd      	b.n	800f6b6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f6ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f6e4 <vTaskPlaceOnEventListRestricted+0x58>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	3318      	adds	r3, #24
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f7fe f8f5 	bl	800d8b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d002      	beq.n	800f6d4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800f6ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f6d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f6d4:	6879      	ldr	r1, [r7, #4]
 800f6d6:	68b8      	ldr	r0, [r7, #8]
 800f6d8:	f000 fb96 	bl	800fe08 <prvAddCurrentTaskToDelayedList>
	}
 800f6dc:	bf00      	nop
 800f6de:	3718      	adds	r7, #24
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	20007018 	.word	0x20007018

0800f6e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d10d      	bne.n	800f71a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f702:	b672      	cpsid	i
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	b662      	cpsie	i
 800f712:	60fb      	str	r3, [r7, #12]
}
 800f714:	bf00      	nop
 800f716:	bf00      	nop
 800f718:	e7fd      	b.n	800f716 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	3318      	adds	r3, #24
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fe f924 	bl	800d96c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f724:	4b1d      	ldr	r3, [pc, #116]	@ (800f79c <xTaskRemoveFromEventList+0xb4>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d11d      	bne.n	800f768 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	3304      	adds	r3, #4
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe f91b 	bl	800d96c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f73a:	4b19      	ldr	r3, [pc, #100]	@ (800f7a0 <xTaskRemoveFromEventList+0xb8>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d903      	bls.n	800f74a <xTaskRemoveFromEventList+0x62>
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f746:	4a16      	ldr	r2, [pc, #88]	@ (800f7a0 <xTaskRemoveFromEventList+0xb8>)
 800f748:	6013      	str	r3, [r2, #0]
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f74e:	4613      	mov	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	4413      	add	r3, r2
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	4a13      	ldr	r2, [pc, #76]	@ (800f7a4 <xTaskRemoveFromEventList+0xbc>)
 800f758:	441a      	add	r2, r3
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	3304      	adds	r3, #4
 800f75e:	4619      	mov	r1, r3
 800f760:	4610      	mov	r0, r2
 800f762:	f7fe f8a6 	bl	800d8b2 <vListInsertEnd>
 800f766:	e005      	b.n	800f774 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	3318      	adds	r3, #24
 800f76c:	4619      	mov	r1, r3
 800f76e:	480e      	ldr	r0, [pc, #56]	@ (800f7a8 <xTaskRemoveFromEventList+0xc0>)
 800f770:	f7fe f89f 	bl	800d8b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f778:	4b0c      	ldr	r3, [pc, #48]	@ (800f7ac <xTaskRemoveFromEventList+0xc4>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f77e:	429a      	cmp	r2, r3
 800f780:	d905      	bls.n	800f78e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f782:	2301      	movs	r3, #1
 800f784:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f786:	4b0a      	ldr	r3, [pc, #40]	@ (800f7b0 <xTaskRemoveFromEventList+0xc8>)
 800f788:	2201      	movs	r2, #1
 800f78a:	601a      	str	r2, [r3, #0]
 800f78c:	e001      	b.n	800f792 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800f78e:	2300      	movs	r3, #0
 800f790:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f792:	697b      	ldr	r3, [r7, #20]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	200074fc 	.word	0x200074fc
 800f7a0:	200074dc 	.word	0x200074dc
 800f7a4:	2000701c 	.word	0x2000701c
 800f7a8:	200074ac 	.word	0x200074ac
 800f7ac:	20007018 	.word	0x20007018
 800f7b0:	200074e8 	.word	0x200074e8

0800f7b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b086      	sub	sp, #24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f7be:	4b2c      	ldr	r3, [pc, #176]	@ (800f870 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10d      	bne.n	800f7e2 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ca:	b672      	cpsid	i
 800f7cc:	f383 8811 	msr	BASEPRI, r3
 800f7d0:	f3bf 8f6f 	isb	sy
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	b662      	cpsie	i
 800f7da:	613b      	str	r3, [r7, #16]
}
 800f7dc:	bf00      	nop
 800f7de:	bf00      	nop
 800f7e0:	e7fd      	b.n	800f7de <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d10d      	bne.n	800f814 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 800f7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fc:	b672      	cpsid	i
 800f7fe:	f383 8811 	msr	BASEPRI, r3
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	f3bf 8f4f 	dsb	sy
 800f80a:	b662      	cpsie	i
 800f80c:	60fb      	str	r3, [r7, #12]
}
 800f80e:	bf00      	nop
 800f810:	bf00      	nop
 800f812:	e7fd      	b.n	800f810 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7fe f8a9 	bl	800d96c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	3304      	adds	r3, #4
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe f8a4 	bl	800d96c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f828:	4b12      	ldr	r3, [pc, #72]	@ (800f874 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d903      	bls.n	800f838 <vTaskRemoveFromUnorderedEventList+0x84>
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f834:	4a0f      	ldr	r2, [pc, #60]	@ (800f874 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f836:	6013      	str	r3, [r2, #0]
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f83c:	4613      	mov	r3, r2
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	4413      	add	r3, r2
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	4a0c      	ldr	r2, [pc, #48]	@ (800f878 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800f846:	441a      	add	r2, r3
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	3304      	adds	r3, #4
 800f84c:	4619      	mov	r1, r3
 800f84e:	4610      	mov	r0, r2
 800f850:	f7fe f82f 	bl	800d8b2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f858:	4b08      	ldr	r3, [pc, #32]	@ (800f87c <vTaskRemoveFromUnorderedEventList+0xc8>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f85e:	429a      	cmp	r2, r3
 800f860:	d902      	bls.n	800f868 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f862:	4b07      	ldr	r3, [pc, #28]	@ (800f880 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800f864:	2201      	movs	r2, #1
 800f866:	601a      	str	r2, [r3, #0]
	}
}
 800f868:	bf00      	nop
 800f86a:	3718      	adds	r7, #24
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	200074fc 	.word	0x200074fc
 800f874:	200074dc 	.word	0x200074dc
 800f878:	2000701c 	.word	0x2000701c
 800f87c:	20007018 	.word	0x20007018
 800f880:	200074e8 	.word	0x200074e8

0800f884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f88c:	4b06      	ldr	r3, [pc, #24]	@ (800f8a8 <vTaskInternalSetTimeOutState+0x24>)
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f894:	4b05      	ldr	r3, [pc, #20]	@ (800f8ac <vTaskInternalSetTimeOutState+0x28>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	605a      	str	r2, [r3, #4]
}
 800f89c:	bf00      	nop
 800f89e:	370c      	adds	r7, #12
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr
 800f8a8:	200074ec 	.word	0x200074ec
 800f8ac:	200074d8 	.word	0x200074d8

0800f8b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d10d      	bne.n	800f8dc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c4:	b672      	cpsid	i
 800f8c6:	f383 8811 	msr	BASEPRI, r3
 800f8ca:	f3bf 8f6f 	isb	sy
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	b662      	cpsie	i
 800f8d4:	613b      	str	r3, [r7, #16]
}
 800f8d6:	bf00      	nop
 800f8d8:	bf00      	nop
 800f8da:	e7fd      	b.n	800f8d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d10d      	bne.n	800f8fe <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e6:	b672      	cpsid	i
 800f8e8:	f383 8811 	msr	BASEPRI, r3
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	b662      	cpsie	i
 800f8f6:	60fb      	str	r3, [r7, #12]
}
 800f8f8:	bf00      	nop
 800f8fa:	bf00      	nop
 800f8fc:	e7fd      	b.n	800f8fa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f8fe:	f000 ff6d 	bl	80107dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f902:	4b1d      	ldr	r3, [pc, #116]	@ (800f978 <xTaskCheckForTimeOut+0xc8>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	69ba      	ldr	r2, [r7, #24]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f91a:	d102      	bne.n	800f922 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f91c:	2300      	movs	r3, #0
 800f91e:	61fb      	str	r3, [r7, #28]
 800f920:	e023      	b.n	800f96a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	4b15      	ldr	r3, [pc, #84]	@ (800f97c <xTaskCheckForTimeOut+0xcc>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d007      	beq.n	800f93e <xTaskCheckForTimeOut+0x8e>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	69ba      	ldr	r2, [r7, #24]
 800f934:	429a      	cmp	r2, r3
 800f936:	d302      	bcc.n	800f93e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f938:	2301      	movs	r3, #1
 800f93a:	61fb      	str	r3, [r7, #28]
 800f93c:	e015      	b.n	800f96a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	429a      	cmp	r2, r3
 800f946:	d20b      	bcs.n	800f960 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	1ad2      	subs	r2, r2, r3
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7ff ff95 	bl	800f884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f95a:	2300      	movs	r3, #0
 800f95c:	61fb      	str	r3, [r7, #28]
 800f95e:	e004      	b.n	800f96a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	2200      	movs	r2, #0
 800f964:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f966:	2301      	movs	r3, #1
 800f968:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f96a:	f000 ff6d 	bl	8010848 <vPortExitCritical>

	return xReturn;
 800f96e:	69fb      	ldr	r3, [r7, #28]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3720      	adds	r7, #32
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	200074d8 	.word	0x200074d8
 800f97c:	200074ec 	.word	0x200074ec

0800f980 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f980:	b480      	push	{r7}
 800f982:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f984:	4b03      	ldr	r3, [pc, #12]	@ (800f994 <vTaskMissedYield+0x14>)
 800f986:	2201      	movs	r2, #1
 800f988:	601a      	str	r2, [r3, #0]
}
 800f98a:	bf00      	nop
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	200074e8 	.word	0x200074e8

0800f998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f9a0:	f000 f84c 	bl	800fa3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f9a4:	4b06      	ldr	r3, [pc, #24]	@ (800f9c0 <prvIdleTask+0x28>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d9f9      	bls.n	800f9a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f9ac:	4b05      	ldr	r3, [pc, #20]	@ (800f9c4 <prvIdleTask+0x2c>)
 800f9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9b2:	601a      	str	r2, [r3, #0]
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f9bc:	e7f0      	b.n	800f9a0 <prvIdleTask+0x8>
 800f9be:	bf00      	nop
 800f9c0:	2000701c 	.word	0x2000701c
 800f9c4:	e000ed04 	.word	0xe000ed04

0800f9c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	607b      	str	r3, [r7, #4]
 800f9d2:	e00c      	b.n	800f9ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4a10      	ldr	r2, [pc, #64]	@ (800fa20 <prvInitialiseTaskLists+0x58>)
 800f9e0:	4413      	add	r3, r2
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fd ff38 	bl	800d858 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	607b      	str	r3, [r7, #4]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b37      	cmp	r3, #55	@ 0x37
 800f9f2:	d9ef      	bls.n	800f9d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f9f4:	480b      	ldr	r0, [pc, #44]	@ (800fa24 <prvInitialiseTaskLists+0x5c>)
 800f9f6:	f7fd ff2f 	bl	800d858 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f9fa:	480b      	ldr	r0, [pc, #44]	@ (800fa28 <prvInitialiseTaskLists+0x60>)
 800f9fc:	f7fd ff2c 	bl	800d858 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fa00:	480a      	ldr	r0, [pc, #40]	@ (800fa2c <prvInitialiseTaskLists+0x64>)
 800fa02:	f7fd ff29 	bl	800d858 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fa06:	480a      	ldr	r0, [pc, #40]	@ (800fa30 <prvInitialiseTaskLists+0x68>)
 800fa08:	f7fd ff26 	bl	800d858 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fa0c:	4b09      	ldr	r3, [pc, #36]	@ (800fa34 <prvInitialiseTaskLists+0x6c>)
 800fa0e:	4a05      	ldr	r2, [pc, #20]	@ (800fa24 <prvInitialiseTaskLists+0x5c>)
 800fa10:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fa12:	4b09      	ldr	r3, [pc, #36]	@ (800fa38 <prvInitialiseTaskLists+0x70>)
 800fa14:	4a04      	ldr	r2, [pc, #16]	@ (800fa28 <prvInitialiseTaskLists+0x60>)
 800fa16:	601a      	str	r2, [r3, #0]
}
 800fa18:	bf00      	nop
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	2000701c 	.word	0x2000701c
 800fa24:	2000747c 	.word	0x2000747c
 800fa28:	20007490 	.word	0x20007490
 800fa2c:	200074ac 	.word	0x200074ac
 800fa30:	200074c0 	.word	0x200074c0
 800fa34:	200074a4 	.word	0x200074a4
 800fa38:	200074a8 	.word	0x200074a8

0800fa3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fa40:	bf00      	nop
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
	...

0800fa4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa52:	4b0c      	ldr	r3, [pc, #48]	@ (800fa84 <prvResetNextTaskUnblockTime+0x38>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d104      	bne.n	800fa66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa5c:	4b0a      	ldr	r3, [pc, #40]	@ (800fa88 <prvResetNextTaskUnblockTime+0x3c>)
 800fa5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fa64:	e008      	b.n	800fa78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa66:	4b07      	ldr	r3, [pc, #28]	@ (800fa84 <prvResetNextTaskUnblockTime+0x38>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	4a04      	ldr	r2, [pc, #16]	@ (800fa88 <prvResetNextTaskUnblockTime+0x3c>)
 800fa76:	6013      	str	r3, [r2, #0]
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr
 800fa84:	200074a4 	.word	0x200074a4
 800fa88:	200074f4 	.word	0x200074f4

0800fa8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fa92:	4b05      	ldr	r3, [pc, #20]	@ (800faa8 <xTaskGetCurrentTaskHandle+0x1c>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fa98:	687b      	ldr	r3, [r7, #4]
	}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr
 800faa6:	bf00      	nop
 800faa8:	20007018 	.word	0x20007018

0800faac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fab2:	4b0b      	ldr	r3, [pc, #44]	@ (800fae0 <xTaskGetSchedulerState+0x34>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d102      	bne.n	800fac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800faba:	2301      	movs	r3, #1
 800fabc:	607b      	str	r3, [r7, #4]
 800fabe:	e008      	b.n	800fad2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fac0:	4b08      	ldr	r3, [pc, #32]	@ (800fae4 <xTaskGetSchedulerState+0x38>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d102      	bne.n	800face <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fac8:	2302      	movs	r3, #2
 800faca:	607b      	str	r3, [r7, #4]
 800facc:	e001      	b.n	800fad2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800face:	2300      	movs	r3, #0
 800fad0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fad2:	687b      	ldr	r3, [r7, #4]
	}
 800fad4:	4618      	mov	r0, r3
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr
 800fae0:	200074e0 	.word	0x200074e0
 800fae4:	200074fc 	.word	0x200074fc

0800fae8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800faf4:	2300      	movs	r3, #0
 800faf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d051      	beq.n	800fba2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb02:	4b2a      	ldr	r3, [pc, #168]	@ (800fbac <xTaskPriorityInherit+0xc4>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d241      	bcs.n	800fb90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	db06      	blt.n	800fb22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb14:	4b25      	ldr	r3, [pc, #148]	@ (800fbac <xTaskPriorityInherit+0xc4>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	6959      	ldr	r1, [r3, #20]
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	4413      	add	r3, r2
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	4a1f      	ldr	r2, [pc, #124]	@ (800fbb0 <xTaskPriorityInherit+0xc8>)
 800fb34:	4413      	add	r3, r2
 800fb36:	4299      	cmp	r1, r3
 800fb38:	d122      	bne.n	800fb80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	3304      	adds	r3, #4
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fd ff14 	bl	800d96c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb44:	4b19      	ldr	r3, [pc, #100]	@ (800fbac <xTaskPriorityInherit+0xc4>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb52:	4b18      	ldr	r3, [pc, #96]	@ (800fbb4 <xTaskPriorityInherit+0xcc>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d903      	bls.n	800fb62 <xTaskPriorityInherit+0x7a>
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb5e:	4a15      	ldr	r2, [pc, #84]	@ (800fbb4 <xTaskPriorityInherit+0xcc>)
 800fb60:	6013      	str	r3, [r2, #0]
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb66:	4613      	mov	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4413      	add	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4a10      	ldr	r2, [pc, #64]	@ (800fbb0 <xTaskPriorityInherit+0xc8>)
 800fb70:	441a      	add	r2, r3
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	3304      	adds	r3, #4
 800fb76:	4619      	mov	r1, r3
 800fb78:	4610      	mov	r0, r2
 800fb7a:	f7fd fe9a 	bl	800d8b2 <vListInsertEnd>
 800fb7e:	e004      	b.n	800fb8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb80:	4b0a      	ldr	r3, [pc, #40]	@ (800fbac <xTaskPriorityInherit+0xc4>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	60fb      	str	r3, [r7, #12]
 800fb8e:	e008      	b.n	800fba2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb94:	4b05      	ldr	r3, [pc, #20]	@ (800fbac <xTaskPriorityInherit+0xc4>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d201      	bcs.n	800fba2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fba2:	68fb      	ldr	r3, [r7, #12]
	}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	20007018 	.word	0x20007018
 800fbb0:	2000701c 	.word	0x2000701c
 800fbb4:	200074dc 	.word	0x200074dc

0800fbb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b086      	sub	sp, #24
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d05c      	beq.n	800fc88 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fbce:	4b31      	ldr	r3, [pc, #196]	@ (800fc94 <xTaskPriorityDisinherit+0xdc>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	693a      	ldr	r2, [r7, #16]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d00d      	beq.n	800fbf4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbdc:	b672      	cpsid	i
 800fbde:	f383 8811 	msr	BASEPRI, r3
 800fbe2:	f3bf 8f6f 	isb	sy
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	b662      	cpsie	i
 800fbec:	60fb      	str	r3, [r7, #12]
}
 800fbee:	bf00      	nop
 800fbf0:	bf00      	nop
 800fbf2:	e7fd      	b.n	800fbf0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d10d      	bne.n	800fc18 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800fbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc00:	b672      	cpsid	i
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	b662      	cpsie	i
 800fc10:	60bb      	str	r3, [r7, #8]
}
 800fc12:	bf00      	nop
 800fc14:	bf00      	nop
 800fc16:	e7fd      	b.n	800fc14 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc1c:	1e5a      	subs	r2, r3, #1
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d02c      	beq.n	800fc88 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d128      	bne.n	800fc88 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	3304      	adds	r3, #4
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fd fe96 	bl	800d96c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc58:	4b0f      	ldr	r3, [pc, #60]	@ (800fc98 <xTaskPriorityDisinherit+0xe0>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d903      	bls.n	800fc68 <xTaskPriorityDisinherit+0xb0>
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc64:	4a0c      	ldr	r2, [pc, #48]	@ (800fc98 <xTaskPriorityDisinherit+0xe0>)
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	4413      	add	r3, r2
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	4a09      	ldr	r2, [pc, #36]	@ (800fc9c <xTaskPriorityDisinherit+0xe4>)
 800fc76:	441a      	add	r2, r3
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	3304      	adds	r3, #4
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	4610      	mov	r0, r2
 800fc80:	f7fd fe17 	bl	800d8b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fc84:	2301      	movs	r3, #1
 800fc86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fc88:	697b      	ldr	r3, [r7, #20]
	}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3718      	adds	r7, #24
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	20007018 	.word	0x20007018
 800fc98:	200074dc 	.word	0x200074dc
 800fc9c:	2000701c 	.word	0x2000701c

0800fca0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b088      	sub	sp, #32
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d070      	beq.n	800fd9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10d      	bne.n	800fcdc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800fcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc4:	b672      	cpsid	i
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	b662      	cpsie	i
 800fcd4:	60fb      	str	r3, [r7, #12]
}
 800fcd6:	bf00      	nop
 800fcd8:	bf00      	nop
 800fcda:	e7fd      	b.n	800fcd8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fce0:	683a      	ldr	r2, [r7, #0]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d902      	bls.n	800fcec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	61fb      	str	r3, [r7, #28]
 800fcea:	e002      	b.n	800fcf2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fcec:	69bb      	ldr	r3, [r7, #24]
 800fcee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fcf2:	69bb      	ldr	r3, [r7, #24]
 800fcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcf6:	69fa      	ldr	r2, [r7, #28]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d04e      	beq.n	800fd9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fcfc:	69bb      	ldr	r3, [r7, #24]
 800fcfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd00:	697a      	ldr	r2, [r7, #20]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d149      	bne.n	800fd9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fd06:	4b27      	ldr	r3, [pc, #156]	@ (800fda4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	69ba      	ldr	r2, [r7, #24]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d10d      	bne.n	800fd2c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd14:	b672      	cpsid	i
 800fd16:	f383 8811 	msr	BASEPRI, r3
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	b662      	cpsie	i
 800fd24:	60bb      	str	r3, [r7, #8]
}
 800fd26:	bf00      	nop
 800fd28:	bf00      	nop
 800fd2a:	e7fd      	b.n	800fd28 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fd2c:	69bb      	ldr	r3, [r7, #24]
 800fd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	69fa      	ldr	r2, [r7, #28]
 800fd36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	699b      	ldr	r3, [r3, #24]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	db04      	blt.n	800fd4a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	6959      	ldr	r1, [r3, #20]
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	4613      	mov	r3, r2
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	4413      	add	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4a13      	ldr	r2, [pc, #76]	@ (800fda8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fd5a:	4413      	add	r3, r2
 800fd5c:	4299      	cmp	r1, r3
 800fd5e:	d11c      	bne.n	800fd9a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	3304      	adds	r3, #4
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7fd fe01 	bl	800d96c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd6e:	4b0f      	ldr	r3, [pc, #60]	@ (800fdac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d903      	bls.n	800fd7e <vTaskPriorityDisinheritAfterTimeout+0xde>
 800fd76:	69bb      	ldr	r3, [r7, #24]
 800fd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7a:	4a0c      	ldr	r2, [pc, #48]	@ (800fdac <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fd7c:	6013      	str	r3, [r2, #0]
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd82:	4613      	mov	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4a07      	ldr	r2, [pc, #28]	@ (800fda8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fd8c:	441a      	add	r2, r3
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	3304      	adds	r3, #4
 800fd92:	4619      	mov	r1, r3
 800fd94:	4610      	mov	r0, r2
 800fd96:	f7fd fd8c 	bl	800d8b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd9a:	bf00      	nop
 800fd9c:	3720      	adds	r7, #32
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	20007018 	.word	0x20007018
 800fda8:	2000701c 	.word	0x2000701c
 800fdac:	200074dc 	.word	0x200074dc

0800fdb0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800fdb6:	4b09      	ldr	r3, [pc, #36]	@ (800fddc <uxTaskResetEventItemValue+0x2c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	699b      	ldr	r3, [r3, #24]
 800fdbc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdbe:	4b07      	ldr	r3, [pc, #28]	@ (800fddc <uxTaskResetEventItemValue+0x2c>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdc4:	4b05      	ldr	r3, [pc, #20]	@ (800fddc <uxTaskResetEventItemValue+0x2c>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800fdcc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800fdce:	687b      	ldr	r3, [r7, #4]
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr
 800fddc:	20007018 	.word	0x20007018

0800fde0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fde0:	b480      	push	{r7}
 800fde2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fde4:	4b07      	ldr	r3, [pc, #28]	@ (800fe04 <pvTaskIncrementMutexHeldCount+0x24>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d004      	beq.n	800fdf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fdec:	4b05      	ldr	r3, [pc, #20]	@ (800fe04 <pvTaskIncrementMutexHeldCount+0x24>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdf2:	3201      	adds	r2, #1
 800fdf4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fdf6:	4b03      	ldr	r3, [pc, #12]	@ (800fe04 <pvTaskIncrementMutexHeldCount+0x24>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
	}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	20007018 	.word	0x20007018

0800fe08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fe12:	4b21      	ldr	r3, [pc, #132]	@ (800fe98 <prvAddCurrentTaskToDelayedList+0x90>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe18:	4b20      	ldr	r3, [pc, #128]	@ (800fe9c <prvAddCurrentTaskToDelayedList+0x94>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	3304      	adds	r3, #4
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fd fda4 	bl	800d96c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe2a:	d10a      	bne.n	800fe42 <prvAddCurrentTaskToDelayedList+0x3a>
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d007      	beq.n	800fe42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe32:	4b1a      	ldr	r3, [pc, #104]	@ (800fe9c <prvAddCurrentTaskToDelayedList+0x94>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	3304      	adds	r3, #4
 800fe38:	4619      	mov	r1, r3
 800fe3a:	4819      	ldr	r0, [pc, #100]	@ (800fea0 <prvAddCurrentTaskToDelayedList+0x98>)
 800fe3c:	f7fd fd39 	bl	800d8b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fe40:	e026      	b.n	800fe90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fe42:	68fa      	ldr	r2, [r7, #12]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4413      	add	r3, r2
 800fe48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fe4a:	4b14      	ldr	r3, [pc, #80]	@ (800fe9c <prvAddCurrentTaskToDelayedList+0x94>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fe52:	68ba      	ldr	r2, [r7, #8]
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d209      	bcs.n	800fe6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe5a:	4b12      	ldr	r3, [pc, #72]	@ (800fea4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	4b0f      	ldr	r3, [pc, #60]	@ (800fe9c <prvAddCurrentTaskToDelayedList+0x94>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	3304      	adds	r3, #4
 800fe64:	4619      	mov	r1, r3
 800fe66:	4610      	mov	r0, r2
 800fe68:	f7fd fd47 	bl	800d8fa <vListInsert>
}
 800fe6c:	e010      	b.n	800fe90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe6e:	4b0e      	ldr	r3, [pc, #56]	@ (800fea8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	4b0a      	ldr	r3, [pc, #40]	@ (800fe9c <prvAddCurrentTaskToDelayedList+0x94>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	3304      	adds	r3, #4
 800fe78:	4619      	mov	r1, r3
 800fe7a:	4610      	mov	r0, r2
 800fe7c:	f7fd fd3d 	bl	800d8fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fe80:	4b0a      	ldr	r3, [pc, #40]	@ (800feac <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d202      	bcs.n	800fe90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fe8a:	4a08      	ldr	r2, [pc, #32]	@ (800feac <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	6013      	str	r3, [r2, #0]
}
 800fe90:	bf00      	nop
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	200074d8 	.word	0x200074d8
 800fe9c:	20007018 	.word	0x20007018
 800fea0:	200074c0 	.word	0x200074c0
 800fea4:	200074a8 	.word	0x200074a8
 800fea8:	200074a4 	.word	0x200074a4
 800feac:	200074f4 	.word	0x200074f4

0800feb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b08a      	sub	sp, #40	@ 0x28
 800feb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800feb6:	2300      	movs	r3, #0
 800feb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800feba:	f000 fb21 	bl	8010500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800febe:	4b1e      	ldr	r3, [pc, #120]	@ (800ff38 <xTimerCreateTimerTask+0x88>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d021      	beq.n	800ff0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800feca:	2300      	movs	r3, #0
 800fecc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fece:	1d3a      	adds	r2, r7, #4
 800fed0:	f107 0108 	add.w	r1, r7, #8
 800fed4:	f107 030c 	add.w	r3, r7, #12
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fd fa9d 	bl	800d418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fede:	6879      	ldr	r1, [r7, #4]
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	9202      	str	r2, [sp, #8]
 800fee6:	9301      	str	r3, [sp, #4]
 800fee8:	2302      	movs	r3, #2
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	2300      	movs	r3, #0
 800feee:	460a      	mov	r2, r1
 800fef0:	4912      	ldr	r1, [pc, #72]	@ (800ff3c <xTimerCreateTimerTask+0x8c>)
 800fef2:	4813      	ldr	r0, [pc, #76]	@ (800ff40 <xTimerCreateTimerTask+0x90>)
 800fef4:	f7fe fed6 	bl	800eca4 <xTaskCreateStatic>
 800fef8:	4603      	mov	r3, r0
 800fefa:	4a12      	ldr	r2, [pc, #72]	@ (800ff44 <xTimerCreateTimerTask+0x94>)
 800fefc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fefe:	4b11      	ldr	r3, [pc, #68]	@ (800ff44 <xTimerCreateTimerTask+0x94>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d001      	beq.n	800ff0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ff06:	2301      	movs	r3, #1
 800ff08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10d      	bne.n	800ff2c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff14:	b672      	cpsid	i
 800ff16:	f383 8811 	msr	BASEPRI, r3
 800ff1a:	f3bf 8f6f 	isb	sy
 800ff1e:	f3bf 8f4f 	dsb	sy
 800ff22:	b662      	cpsie	i
 800ff24:	613b      	str	r3, [r7, #16]
}
 800ff26:	bf00      	nop
 800ff28:	bf00      	nop
 800ff2a:	e7fd      	b.n	800ff28 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ff2c:	697b      	ldr	r3, [r7, #20]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	20007530 	.word	0x20007530
 800ff3c:	08021014 	.word	0x08021014
 800ff40:	08010089 	.word	0x08010089
 800ff44:	20007534 	.word	0x20007534

0800ff48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b08a      	sub	sp, #40	@ 0x28
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ff56:	2300      	movs	r3, #0
 800ff58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d10d      	bne.n	800ff7c <xTimerGenericCommand+0x34>
	__asm volatile
 800ff60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff64:	b672      	cpsid	i
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	b662      	cpsie	i
 800ff74:	623b      	str	r3, [r7, #32]
}
 800ff76:	bf00      	nop
 800ff78:	bf00      	nop
 800ff7a:	e7fd      	b.n	800ff78 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ff7c:	4b19      	ldr	r3, [pc, #100]	@ (800ffe4 <xTimerGenericCommand+0x9c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d02a      	beq.n	800ffda <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b05      	cmp	r3, #5
 800ff94:	dc18      	bgt.n	800ffc8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ff96:	f7ff fd89 	bl	800faac <xTaskGetSchedulerState>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d109      	bne.n	800ffb4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ffa0:	4b10      	ldr	r3, [pc, #64]	@ (800ffe4 <xTimerGenericCommand+0x9c>)
 800ffa2:	6818      	ldr	r0, [r3, #0]
 800ffa4:	f107 0110 	add.w	r1, r7, #16
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffac:	f7fd ff94 	bl	800ded8 <xQueueGenericSend>
 800ffb0:	6278      	str	r0, [r7, #36]	@ 0x24
 800ffb2:	e012      	b.n	800ffda <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ffb4:	4b0b      	ldr	r3, [pc, #44]	@ (800ffe4 <xTimerGenericCommand+0x9c>)
 800ffb6:	6818      	ldr	r0, [r3, #0]
 800ffb8:	f107 0110 	add.w	r1, r7, #16
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f7fd ff8a 	bl	800ded8 <xQueueGenericSend>
 800ffc4:	6278      	str	r0, [r7, #36]	@ 0x24
 800ffc6:	e008      	b.n	800ffda <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ffc8:	4b06      	ldr	r3, [pc, #24]	@ (800ffe4 <xTimerGenericCommand+0x9c>)
 800ffca:	6818      	ldr	r0, [r3, #0]
 800ffcc:	f107 0110 	add.w	r1, r7, #16
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	f7fe f88a 	bl	800e0ec <xQueueGenericSendFromISR>
 800ffd8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ffda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3728      	adds	r7, #40	@ 0x28
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	20007530 	.word	0x20007530

0800ffe8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	af02      	add	r7, sp, #8
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fff2:	4b24      	ldr	r3, [pc, #144]	@ (8010084 <prvProcessExpiredTimer+0x9c>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	3304      	adds	r3, #4
 8010000:	4618      	mov	r0, r3
 8010002:	f7fd fcb3 	bl	800d96c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801000c:	f003 0304 	and.w	r3, r3, #4
 8010010:	2b00      	cmp	r3, #0
 8010012:	d025      	beq.n	8010060 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	699a      	ldr	r2, [r3, #24]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	18d1      	adds	r1, r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	683a      	ldr	r2, [r7, #0]
 8010020:	6978      	ldr	r0, [r7, #20]
 8010022:	f000 f8d7 	bl	80101d4 <prvInsertTimerInActiveList>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d022      	beq.n	8010072 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801002c:	2300      	movs	r3, #0
 801002e:	9300      	str	r3, [sp, #0]
 8010030:	2300      	movs	r3, #0
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	2100      	movs	r1, #0
 8010036:	6978      	ldr	r0, [r7, #20]
 8010038:	f7ff ff86 	bl	800ff48 <xTimerGenericCommand>
 801003c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d116      	bne.n	8010072 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010048:	b672      	cpsid	i
 801004a:	f383 8811 	msr	BASEPRI, r3
 801004e:	f3bf 8f6f 	isb	sy
 8010052:	f3bf 8f4f 	dsb	sy
 8010056:	b662      	cpsie	i
 8010058:	60fb      	str	r3, [r7, #12]
}
 801005a:	bf00      	nop
 801005c:	bf00      	nop
 801005e:	e7fd      	b.n	801005c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010066:	f023 0301 	bic.w	r3, r3, #1
 801006a:	b2da      	uxtb	r2, r3
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	6978      	ldr	r0, [r7, #20]
 8010078:	4798      	blx	r3
}
 801007a:	bf00      	nop
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	20007528 	.word	0x20007528

08010088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010090:	f107 0308 	add.w	r3, r7, #8
 8010094:	4618      	mov	r0, r3
 8010096:	f000 f859 	bl	801014c <prvGetNextExpireTime>
 801009a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	4619      	mov	r1, r3
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f000 f805 	bl	80100b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80100a6:	f000 f8d7 	bl	8010258 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80100aa:	bf00      	nop
 80100ac:	e7f0      	b.n	8010090 <prvTimerTask+0x8>
	...

080100b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80100ba:	f7ff f865 	bl	800f188 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80100be:	f107 0308 	add.w	r3, r7, #8
 80100c2:	4618      	mov	r0, r3
 80100c4:	f000 f866 	bl	8010194 <prvSampleTimeNow>
 80100c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d130      	bne.n	8010132 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d10a      	bne.n	80100ec <prvProcessTimerOrBlockTask+0x3c>
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d806      	bhi.n	80100ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80100de:	f7ff f861 	bl	800f1a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80100e2:	68f9      	ldr	r1, [r7, #12]
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7ff ff7f 	bl	800ffe8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80100ea:	e024      	b.n	8010136 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d008      	beq.n	8010104 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80100f2:	4b13      	ldr	r3, [pc, #76]	@ (8010140 <prvProcessTimerOrBlockTask+0x90>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d101      	bne.n	8010100 <prvProcessTimerOrBlockTask+0x50>
 80100fc:	2301      	movs	r3, #1
 80100fe:	e000      	b.n	8010102 <prvProcessTimerOrBlockTask+0x52>
 8010100:	2300      	movs	r3, #0
 8010102:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010104:	4b0f      	ldr	r3, [pc, #60]	@ (8010144 <prvProcessTimerOrBlockTask+0x94>)
 8010106:	6818      	ldr	r0, [r3, #0]
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	4619      	mov	r1, r3
 8010112:	f7fe fd93 	bl	800ec3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010116:	f7ff f845 	bl	800f1a4 <xTaskResumeAll>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10a      	bne.n	8010136 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010120:	4b09      	ldr	r3, [pc, #36]	@ (8010148 <prvProcessTimerOrBlockTask+0x98>)
 8010122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010126:	601a      	str	r2, [r3, #0]
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	f3bf 8f6f 	isb	sy
}
 8010130:	e001      	b.n	8010136 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010132:	f7ff f837 	bl	800f1a4 <xTaskResumeAll>
}
 8010136:	bf00      	nop
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	2000752c 	.word	0x2000752c
 8010144:	20007530 	.word	0x20007530
 8010148:	e000ed04 	.word	0xe000ed04

0801014c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010154:	4b0e      	ldr	r3, [pc, #56]	@ (8010190 <prvGetNextExpireTime+0x44>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d101      	bne.n	8010162 <prvGetNextExpireTime+0x16>
 801015e:	2201      	movs	r2, #1
 8010160:	e000      	b.n	8010164 <prvGetNextExpireTime+0x18>
 8010162:	2200      	movs	r2, #0
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d105      	bne.n	801017c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010170:	4b07      	ldr	r3, [pc, #28]	@ (8010190 <prvGetNextExpireTime+0x44>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	60fb      	str	r3, [r7, #12]
 801017a:	e001      	b.n	8010180 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801017c:	2300      	movs	r3, #0
 801017e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010180:	68fb      	ldr	r3, [r7, #12]
}
 8010182:	4618      	mov	r0, r3
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	20007528 	.word	0x20007528

08010194 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801019c:	f7ff f8a2 	bl	800f2e4 <xTaskGetTickCount>
 80101a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80101a2:	4b0b      	ldr	r3, [pc, #44]	@ (80101d0 <prvSampleTimeNow+0x3c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d205      	bcs.n	80101b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80101ac:	f000 f940 	bl	8010430 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2201      	movs	r2, #1
 80101b4:	601a      	str	r2, [r3, #0]
 80101b6:	e002      	b.n	80101be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80101be:	4a04      	ldr	r2, [pc, #16]	@ (80101d0 <prvSampleTimeNow+0x3c>)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80101c4:	68fb      	ldr	r3, [r7, #12]
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3710      	adds	r7, #16
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	20007538 	.word	0x20007538

080101d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b086      	sub	sp, #24
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	607a      	str	r2, [r7, #4]
 80101e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80101e2:	2300      	movs	r3, #0
 80101e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	68ba      	ldr	r2, [r7, #8]
 80101ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d812      	bhi.n	8010220 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	1ad2      	subs	r2, r2, r3
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	699b      	ldr	r3, [r3, #24]
 8010204:	429a      	cmp	r2, r3
 8010206:	d302      	bcc.n	801020e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010208:	2301      	movs	r3, #1
 801020a:	617b      	str	r3, [r7, #20]
 801020c:	e01b      	b.n	8010246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801020e:	4b10      	ldr	r3, [pc, #64]	@ (8010250 <prvInsertTimerInActiveList+0x7c>)
 8010210:	681a      	ldr	r2, [r3, #0]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	3304      	adds	r3, #4
 8010216:	4619      	mov	r1, r3
 8010218:	4610      	mov	r0, r2
 801021a:	f7fd fb6e 	bl	800d8fa <vListInsert>
 801021e:	e012      	b.n	8010246 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	429a      	cmp	r2, r3
 8010226:	d206      	bcs.n	8010236 <prvInsertTimerInActiveList+0x62>
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	429a      	cmp	r2, r3
 801022e:	d302      	bcc.n	8010236 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010230:	2301      	movs	r3, #1
 8010232:	617b      	str	r3, [r7, #20]
 8010234:	e007      	b.n	8010246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010236:	4b07      	ldr	r3, [pc, #28]	@ (8010254 <prvInsertTimerInActiveList+0x80>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3304      	adds	r3, #4
 801023e:	4619      	mov	r1, r3
 8010240:	4610      	mov	r0, r2
 8010242:	f7fd fb5a 	bl	800d8fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010246:	697b      	ldr	r3, [r7, #20]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3718      	adds	r7, #24
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	2000752c 	.word	0x2000752c
 8010254:	20007528 	.word	0x20007528

08010258 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08e      	sub	sp, #56	@ 0x38
 801025c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801025e:	e0d4      	b.n	801040a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	da1b      	bge.n	801029e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010266:	1d3b      	adds	r3, r7, #4
 8010268:	3304      	adds	r3, #4
 801026a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801026c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026e:	2b00      	cmp	r3, #0
 8010270:	d10d      	bne.n	801028e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8010272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010276:	b672      	cpsid	i
 8010278:	f383 8811 	msr	BASEPRI, r3
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f3bf 8f4f 	dsb	sy
 8010284:	b662      	cpsie	i
 8010286:	61fb      	str	r3, [r7, #28]
}
 8010288:	bf00      	nop
 801028a:	bf00      	nop
 801028c:	e7fd      	b.n	801028a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801028e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010294:	6850      	ldr	r0, [r2, #4]
 8010296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010298:	6892      	ldr	r2, [r2, #8]
 801029a:	4611      	mov	r1, r2
 801029c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f2c0 80b2 	blt.w	801040a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80102aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ac:	695b      	ldr	r3, [r3, #20]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d004      	beq.n	80102bc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b4:	3304      	adds	r3, #4
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fd fb58 	bl	800d96c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80102bc:	463b      	mov	r3, r7
 80102be:	4618      	mov	r0, r3
 80102c0:	f7ff ff68 	bl	8010194 <prvSampleTimeNow>
 80102c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b09      	cmp	r3, #9
 80102ca:	f200 809b 	bhi.w	8010404 <prvProcessReceivedCommands+0x1ac>
 80102ce:	a201      	add	r2, pc, #4	@ (adr r2, 80102d4 <prvProcessReceivedCommands+0x7c>)
 80102d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102d4:	080102fd 	.word	0x080102fd
 80102d8:	080102fd 	.word	0x080102fd
 80102dc:	080102fd 	.word	0x080102fd
 80102e0:	08010377 	.word	0x08010377
 80102e4:	0801038b 	.word	0x0801038b
 80102e8:	080103db 	.word	0x080103db
 80102ec:	080102fd 	.word	0x080102fd
 80102f0:	080102fd 	.word	0x080102fd
 80102f4:	08010377 	.word	0x08010377
 80102f8:	0801038b 	.word	0x0801038b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010302:	f043 0301 	orr.w	r3, r3, #1
 8010306:	b2da      	uxtb	r2, r3
 8010308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010312:	699b      	ldr	r3, [r3, #24]
 8010314:	18d1      	adds	r1, r2, r3
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801031a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801031c:	f7ff ff5a 	bl	80101d4 <prvInsertTimerInActiveList>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d070      	beq.n	8010408 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801032c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801032e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010334:	f003 0304 	and.w	r3, r3, #4
 8010338:	2b00      	cmp	r3, #0
 801033a:	d065      	beq.n	8010408 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801033c:	68ba      	ldr	r2, [r7, #8]
 801033e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010340:	699b      	ldr	r3, [r3, #24]
 8010342:	441a      	add	r2, r3
 8010344:	2300      	movs	r3, #0
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	2300      	movs	r3, #0
 801034a:	2100      	movs	r1, #0
 801034c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801034e:	f7ff fdfb 	bl	800ff48 <xTimerGenericCommand>
 8010352:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010354:	6a3b      	ldr	r3, [r7, #32]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d156      	bne.n	8010408 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801035a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801035e:	b672      	cpsid	i
 8010360:	f383 8811 	msr	BASEPRI, r3
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	b662      	cpsie	i
 801036e:	61bb      	str	r3, [r7, #24]
}
 8010370:	bf00      	nop
 8010372:	bf00      	nop
 8010374:	e7fd      	b.n	8010372 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801037c:	f023 0301 	bic.w	r3, r3, #1
 8010380:	b2da      	uxtb	r2, r3
 8010382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010384:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010388:	e03f      	b.n	801040a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801038a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801038c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010390:	f043 0301 	orr.w	r3, r3, #1
 8010394:	b2da      	uxtb	r2, r3
 8010396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010398:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80103a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a4:	699b      	ldr	r3, [r3, #24]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d10d      	bne.n	80103c6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80103aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ae:	b672      	cpsid	i
 80103b0:	f383 8811 	msr	BASEPRI, r3
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	b662      	cpsie	i
 80103be:	617b      	str	r3, [r7, #20]
}
 80103c0:	bf00      	nop
 80103c2:	bf00      	nop
 80103c4:	e7fd      	b.n	80103c2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80103c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103c8:	699a      	ldr	r2, [r3, #24]
 80103ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103cc:	18d1      	adds	r1, r2, r3
 80103ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103d4:	f7ff fefe 	bl	80101d4 <prvInsertTimerInActiveList>
					break;
 80103d8:	e017      	b.n	801040a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80103da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80103e0:	f003 0302 	and.w	r3, r3, #2
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d103      	bne.n	80103f0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80103e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103ea:	f000 fbf7 	bl	8010bdc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80103ee:	e00c      	b.n	801040a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80103f6:	f023 0301 	bic.w	r3, r3, #1
 80103fa:	b2da      	uxtb	r2, r3
 80103fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010402:	e002      	b.n	801040a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010404:	bf00      	nop
 8010406:	e000      	b.n	801040a <prvProcessReceivedCommands+0x1b2>
					break;
 8010408:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801040a:	4b08      	ldr	r3, [pc, #32]	@ (801042c <prvProcessReceivedCommands+0x1d4>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	1d39      	adds	r1, r7, #4
 8010410:	2200      	movs	r2, #0
 8010412:	4618      	mov	r0, r3
 8010414:	f7fd ffa6 	bl	800e364 <xQueueReceive>
 8010418:	4603      	mov	r3, r0
 801041a:	2b00      	cmp	r3, #0
 801041c:	f47f af20 	bne.w	8010260 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010420:	bf00      	nop
 8010422:	bf00      	nop
 8010424:	3730      	adds	r7, #48	@ 0x30
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	20007530 	.word	0x20007530

08010430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010436:	e04b      	b.n	80104d0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010438:	4b2f      	ldr	r3, [pc, #188]	@ (80104f8 <prvSwitchTimerLists+0xc8>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	68db      	ldr	r3, [r3, #12]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010442:	4b2d      	ldr	r3, [pc, #180]	@ (80104f8 <prvSwitchTimerLists+0xc8>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	68db      	ldr	r3, [r3, #12]
 801044a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	3304      	adds	r3, #4
 8010450:	4618      	mov	r0, r3
 8010452:	f7fd fa8b 	bl	800d96c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	6a1b      	ldr	r3, [r3, #32]
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010464:	f003 0304 	and.w	r3, r3, #4
 8010468:	2b00      	cmp	r3, #0
 801046a:	d031      	beq.n	80104d0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	699b      	ldr	r3, [r3, #24]
 8010470:	693a      	ldr	r2, [r7, #16]
 8010472:	4413      	add	r3, r2
 8010474:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010476:	68ba      	ldr	r2, [r7, #8]
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	429a      	cmp	r2, r3
 801047c:	d90e      	bls.n	801049c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	68ba      	ldr	r2, [r7, #8]
 8010482:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801048a:	4b1b      	ldr	r3, [pc, #108]	@ (80104f8 <prvSwitchTimerLists+0xc8>)
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	3304      	adds	r3, #4
 8010492:	4619      	mov	r1, r3
 8010494:	4610      	mov	r0, r2
 8010496:	f7fd fa30 	bl	800d8fa <vListInsert>
 801049a:	e019      	b.n	80104d0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801049c:	2300      	movs	r3, #0
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	2300      	movs	r3, #0
 80104a2:	693a      	ldr	r2, [r7, #16]
 80104a4:	2100      	movs	r1, #0
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f7ff fd4e 	bl	800ff48 <xTimerGenericCommand>
 80104ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10d      	bne.n	80104d0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80104b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b8:	b672      	cpsid	i
 80104ba:	f383 8811 	msr	BASEPRI, r3
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	b662      	cpsie	i
 80104c8:	603b      	str	r3, [r7, #0]
}
 80104ca:	bf00      	nop
 80104cc:	bf00      	nop
 80104ce:	e7fd      	b.n	80104cc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80104d0:	4b09      	ldr	r3, [pc, #36]	@ (80104f8 <prvSwitchTimerLists+0xc8>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d1ae      	bne.n	8010438 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80104da:	4b07      	ldr	r3, [pc, #28]	@ (80104f8 <prvSwitchTimerLists+0xc8>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80104e0:	4b06      	ldr	r3, [pc, #24]	@ (80104fc <prvSwitchTimerLists+0xcc>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a04      	ldr	r2, [pc, #16]	@ (80104f8 <prvSwitchTimerLists+0xc8>)
 80104e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80104e8:	4a04      	ldr	r2, [pc, #16]	@ (80104fc <prvSwitchTimerLists+0xcc>)
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	6013      	str	r3, [r2, #0]
}
 80104ee:	bf00      	nop
 80104f0:	3718      	adds	r7, #24
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	20007528 	.word	0x20007528
 80104fc:	2000752c 	.word	0x2000752c

08010500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010506:	f000 f969 	bl	80107dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801050a:	4b15      	ldr	r3, [pc, #84]	@ (8010560 <prvCheckForValidListAndQueue+0x60>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d120      	bne.n	8010554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010512:	4814      	ldr	r0, [pc, #80]	@ (8010564 <prvCheckForValidListAndQueue+0x64>)
 8010514:	f7fd f9a0 	bl	800d858 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010518:	4813      	ldr	r0, [pc, #76]	@ (8010568 <prvCheckForValidListAndQueue+0x68>)
 801051a:	f7fd f99d 	bl	800d858 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801051e:	4b13      	ldr	r3, [pc, #76]	@ (801056c <prvCheckForValidListAndQueue+0x6c>)
 8010520:	4a10      	ldr	r2, [pc, #64]	@ (8010564 <prvCheckForValidListAndQueue+0x64>)
 8010522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010524:	4b12      	ldr	r3, [pc, #72]	@ (8010570 <prvCheckForValidListAndQueue+0x70>)
 8010526:	4a10      	ldr	r2, [pc, #64]	@ (8010568 <prvCheckForValidListAndQueue+0x68>)
 8010528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801052a:	2300      	movs	r3, #0
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	4b11      	ldr	r3, [pc, #68]	@ (8010574 <prvCheckForValidListAndQueue+0x74>)
 8010530:	4a11      	ldr	r2, [pc, #68]	@ (8010578 <prvCheckForValidListAndQueue+0x78>)
 8010532:	2110      	movs	r1, #16
 8010534:	200a      	movs	r0, #10
 8010536:	f7fd faaf 	bl	800da98 <xQueueGenericCreateStatic>
 801053a:	4603      	mov	r3, r0
 801053c:	4a08      	ldr	r2, [pc, #32]	@ (8010560 <prvCheckForValidListAndQueue+0x60>)
 801053e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010540:	4b07      	ldr	r3, [pc, #28]	@ (8010560 <prvCheckForValidListAndQueue+0x60>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d005      	beq.n	8010554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010548:	4b05      	ldr	r3, [pc, #20]	@ (8010560 <prvCheckForValidListAndQueue+0x60>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	490b      	ldr	r1, [pc, #44]	@ (801057c <prvCheckForValidListAndQueue+0x7c>)
 801054e:	4618      	mov	r0, r3
 8010550:	f7fe fb20 	bl	800eb94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010554:	f000 f978 	bl	8010848 <vPortExitCritical>
}
 8010558:	bf00      	nop
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	20007530 	.word	0x20007530
 8010564:	20007500 	.word	0x20007500
 8010568:	20007514 	.word	0x20007514
 801056c:	20007528 	.word	0x20007528
 8010570:	2000752c 	.word	0x2000752c
 8010574:	200075dc 	.word	0x200075dc
 8010578:	2000753c 	.word	0x2000753c
 801057c:	0802101c 	.word	0x0802101c

08010580 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010580:	b580      	push	{r7, lr}
 8010582:	b08a      	sub	sp, #40	@ 0x28
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
 801058c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801058e:	f06f 0301 	mvn.w	r3, #1
 8010592:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105a0:	4b06      	ldr	r3, [pc, #24]	@ (80105bc <xTimerPendFunctionCallFromISR+0x3c>)
 80105a2:	6818      	ldr	r0, [r3, #0]
 80105a4:	f107 0114 	add.w	r1, r7, #20
 80105a8:	2300      	movs	r3, #0
 80105aa:	683a      	ldr	r2, [r7, #0]
 80105ac:	f7fd fd9e 	bl	800e0ec <xQueueGenericSendFromISR>
 80105b0:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80105b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3728      	adds	r7, #40	@ 0x28
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	20007530 	.word	0x20007530

080105c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80105c0:	b480      	push	{r7}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	3b04      	subs	r3, #4
 80105d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80105d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	3b04      	subs	r3, #4
 80105de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	f023 0201 	bic.w	r2, r3, #1
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	3b04      	subs	r3, #4
 80105ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80105f0:	4a0c      	ldr	r2, [pc, #48]	@ (8010624 <pxPortInitialiseStack+0x64>)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3b14      	subs	r3, #20
 80105fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	3b04      	subs	r3, #4
 8010606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f06f 0202 	mvn.w	r2, #2
 801060e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	3b20      	subs	r3, #32
 8010614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010616:	68fb      	ldr	r3, [r7, #12]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3714      	adds	r7, #20
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr
 8010624:	08010629 	.word	0x08010629

08010628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010628:	b480      	push	{r7}
 801062a:	b085      	sub	sp, #20
 801062c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801062e:	2300      	movs	r3, #0
 8010630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010632:	4b15      	ldr	r3, [pc, #84]	@ (8010688 <prvTaskExitError+0x60>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801063a:	d00d      	beq.n	8010658 <prvTaskExitError+0x30>
	__asm volatile
 801063c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010640:	b672      	cpsid	i
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	b662      	cpsie	i
 8010650:	60fb      	str	r3, [r7, #12]
}
 8010652:	bf00      	nop
 8010654:	bf00      	nop
 8010656:	e7fd      	b.n	8010654 <prvTaskExitError+0x2c>
	__asm volatile
 8010658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801065c:	b672      	cpsid	i
 801065e:	f383 8811 	msr	BASEPRI, r3
 8010662:	f3bf 8f6f 	isb	sy
 8010666:	f3bf 8f4f 	dsb	sy
 801066a:	b662      	cpsie	i
 801066c:	60bb      	str	r3, [r7, #8]
}
 801066e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010670:	bf00      	nop
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d0fc      	beq.n	8010672 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010678:	bf00      	nop
 801067a:	bf00      	nop
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	20000020 	.word	0x20000020
 801068c:	00000000 	.word	0x00000000

08010690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010690:	4b07      	ldr	r3, [pc, #28]	@ (80106b0 <pxCurrentTCBConst2>)
 8010692:	6819      	ldr	r1, [r3, #0]
 8010694:	6808      	ldr	r0, [r1, #0]
 8010696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801069a:	f380 8809 	msr	PSP, r0
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f04f 0000 	mov.w	r0, #0
 80106a6:	f380 8811 	msr	BASEPRI, r0
 80106aa:	4770      	bx	lr
 80106ac:	f3af 8000 	nop.w

080106b0 <pxCurrentTCBConst2>:
 80106b0:	20007018 	.word	0x20007018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80106b4:	bf00      	nop
 80106b6:	bf00      	nop

080106b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80106b8:	4808      	ldr	r0, [pc, #32]	@ (80106dc <prvPortStartFirstTask+0x24>)
 80106ba:	6800      	ldr	r0, [r0, #0]
 80106bc:	6800      	ldr	r0, [r0, #0]
 80106be:	f380 8808 	msr	MSP, r0
 80106c2:	f04f 0000 	mov.w	r0, #0
 80106c6:	f380 8814 	msr	CONTROL, r0
 80106ca:	b662      	cpsie	i
 80106cc:	b661      	cpsie	f
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	f3bf 8f6f 	isb	sy
 80106d6:	df00      	svc	0
 80106d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80106da:	bf00      	nop
 80106dc:	e000ed08 	.word	0xe000ed08

080106e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80106e6:	4b37      	ldr	r3, [pc, #220]	@ (80107c4 <xPortStartScheduler+0xe4>)
 80106e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	22ff      	movs	r2, #255	@ 0xff
 80106f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010700:	78fb      	ldrb	r3, [r7, #3]
 8010702:	b2db      	uxtb	r3, r3
 8010704:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010708:	b2da      	uxtb	r2, r3
 801070a:	4b2f      	ldr	r3, [pc, #188]	@ (80107c8 <xPortStartScheduler+0xe8>)
 801070c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801070e:	4b2f      	ldr	r3, [pc, #188]	@ (80107cc <xPortStartScheduler+0xec>)
 8010710:	2207      	movs	r2, #7
 8010712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010714:	e009      	b.n	801072a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010716:	4b2d      	ldr	r3, [pc, #180]	@ (80107cc <xPortStartScheduler+0xec>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	3b01      	subs	r3, #1
 801071c:	4a2b      	ldr	r2, [pc, #172]	@ (80107cc <xPortStartScheduler+0xec>)
 801071e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010720:	78fb      	ldrb	r3, [r7, #3]
 8010722:	b2db      	uxtb	r3, r3
 8010724:	005b      	lsls	r3, r3, #1
 8010726:	b2db      	uxtb	r3, r3
 8010728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801072a:	78fb      	ldrb	r3, [r7, #3]
 801072c:	b2db      	uxtb	r3, r3
 801072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010732:	2b80      	cmp	r3, #128	@ 0x80
 8010734:	d0ef      	beq.n	8010716 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010736:	4b25      	ldr	r3, [pc, #148]	@ (80107cc <xPortStartScheduler+0xec>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f1c3 0307 	rsb	r3, r3, #7
 801073e:	2b04      	cmp	r3, #4
 8010740:	d00d      	beq.n	801075e <xPortStartScheduler+0x7e>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010746:	b672      	cpsid	i
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	b662      	cpsie	i
 8010756:	60bb      	str	r3, [r7, #8]
}
 8010758:	bf00      	nop
 801075a:	bf00      	nop
 801075c:	e7fd      	b.n	801075a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801075e:	4b1b      	ldr	r3, [pc, #108]	@ (80107cc <xPortStartScheduler+0xec>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	021b      	lsls	r3, r3, #8
 8010764:	4a19      	ldr	r2, [pc, #100]	@ (80107cc <xPortStartScheduler+0xec>)
 8010766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010768:	4b18      	ldr	r3, [pc, #96]	@ (80107cc <xPortStartScheduler+0xec>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010770:	4a16      	ldr	r2, [pc, #88]	@ (80107cc <xPortStartScheduler+0xec>)
 8010772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	b2da      	uxtb	r2, r3
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801077c:	4b14      	ldr	r3, [pc, #80]	@ (80107d0 <xPortStartScheduler+0xf0>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a13      	ldr	r2, [pc, #76]	@ (80107d0 <xPortStartScheduler+0xf0>)
 8010782:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010788:	4b11      	ldr	r3, [pc, #68]	@ (80107d0 <xPortStartScheduler+0xf0>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a10      	ldr	r2, [pc, #64]	@ (80107d0 <xPortStartScheduler+0xf0>)
 801078e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010794:	f000 f8dc 	bl	8010950 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010798:	4b0e      	ldr	r3, [pc, #56]	@ (80107d4 <xPortStartScheduler+0xf4>)
 801079a:	2200      	movs	r2, #0
 801079c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801079e:	f000 f8fb 	bl	8010998 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80107a2:	4b0d      	ldr	r3, [pc, #52]	@ (80107d8 <xPortStartScheduler+0xf8>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a0c      	ldr	r2, [pc, #48]	@ (80107d8 <xPortStartScheduler+0xf8>)
 80107a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80107ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80107ae:	f7ff ff83 	bl	80106b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80107b2:	f7fe fe75 	bl	800f4a0 <vTaskSwitchContext>
	prvTaskExitError();
 80107b6:	f7ff ff37 	bl	8010628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80107ba:	2300      	movs	r3, #0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	e000e400 	.word	0xe000e400
 80107c8:	2000762c 	.word	0x2000762c
 80107cc:	20007630 	.word	0x20007630
 80107d0:	e000ed20 	.word	0xe000ed20
 80107d4:	20000020 	.word	0x20000020
 80107d8:	e000ef34 	.word	0xe000ef34

080107dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
	__asm volatile
 80107e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e6:	b672      	cpsid	i
 80107e8:	f383 8811 	msr	BASEPRI, r3
 80107ec:	f3bf 8f6f 	isb	sy
 80107f0:	f3bf 8f4f 	dsb	sy
 80107f4:	b662      	cpsie	i
 80107f6:	607b      	str	r3, [r7, #4]
}
 80107f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80107fa:	4b11      	ldr	r3, [pc, #68]	@ (8010840 <vPortEnterCritical+0x64>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	3301      	adds	r3, #1
 8010800:	4a0f      	ldr	r2, [pc, #60]	@ (8010840 <vPortEnterCritical+0x64>)
 8010802:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010804:	4b0e      	ldr	r3, [pc, #56]	@ (8010840 <vPortEnterCritical+0x64>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d112      	bne.n	8010832 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801080c:	4b0d      	ldr	r3, [pc, #52]	@ (8010844 <vPortEnterCritical+0x68>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	b2db      	uxtb	r3, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00d      	beq.n	8010832 <vPortEnterCritical+0x56>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801081a:	b672      	cpsid	i
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	b662      	cpsie	i
 801082a:	603b      	str	r3, [r7, #0]
}
 801082c:	bf00      	nop
 801082e:	bf00      	nop
 8010830:	e7fd      	b.n	801082e <vPortEnterCritical+0x52>
	}
}
 8010832:	bf00      	nop
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	20000020 	.word	0x20000020
 8010844:	e000ed04 	.word	0xe000ed04

08010848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801084e:	4b13      	ldr	r3, [pc, #76]	@ (801089c <vPortExitCritical+0x54>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d10d      	bne.n	8010872 <vPortExitCritical+0x2a>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085a:	b672      	cpsid	i
 801085c:	f383 8811 	msr	BASEPRI, r3
 8010860:	f3bf 8f6f 	isb	sy
 8010864:	f3bf 8f4f 	dsb	sy
 8010868:	b662      	cpsie	i
 801086a:	607b      	str	r3, [r7, #4]
}
 801086c:	bf00      	nop
 801086e:	bf00      	nop
 8010870:	e7fd      	b.n	801086e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010872:	4b0a      	ldr	r3, [pc, #40]	@ (801089c <vPortExitCritical+0x54>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	3b01      	subs	r3, #1
 8010878:	4a08      	ldr	r2, [pc, #32]	@ (801089c <vPortExitCritical+0x54>)
 801087a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801087c:	4b07      	ldr	r3, [pc, #28]	@ (801089c <vPortExitCritical+0x54>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d105      	bne.n	8010890 <vPortExitCritical+0x48>
 8010884:	2300      	movs	r3, #0
 8010886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	f383 8811 	msr	BASEPRI, r3
}
 801088e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010890:	bf00      	nop
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr
 801089c:	20000020 	.word	0x20000020

080108a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80108a0:	f3ef 8009 	mrs	r0, PSP
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	4b15      	ldr	r3, [pc, #84]	@ (8010900 <pxCurrentTCBConst>)
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	f01e 0f10 	tst.w	lr, #16
 80108b0:	bf08      	it	eq
 80108b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80108b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ba:	6010      	str	r0, [r2, #0]
 80108bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80108c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80108c4:	b672      	cpsid	i
 80108c6:	f380 8811 	msr	BASEPRI, r0
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	b662      	cpsie	i
 80108d4:	f7fe fde4 	bl	800f4a0 <vTaskSwitchContext>
 80108d8:	f04f 0000 	mov.w	r0, #0
 80108dc:	f380 8811 	msr	BASEPRI, r0
 80108e0:	bc09      	pop	{r0, r3}
 80108e2:	6819      	ldr	r1, [r3, #0]
 80108e4:	6808      	ldr	r0, [r1, #0]
 80108e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ea:	f01e 0f10 	tst.w	lr, #16
 80108ee:	bf08      	it	eq
 80108f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80108f4:	f380 8809 	msr	PSP, r0
 80108f8:	f3bf 8f6f 	isb	sy
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop

08010900 <pxCurrentTCBConst>:
 8010900:	20007018 	.word	0x20007018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010904:	bf00      	nop
 8010906:	bf00      	nop

08010908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
	__asm volatile
 801090e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010912:	b672      	cpsid	i
 8010914:	f383 8811 	msr	BASEPRI, r3
 8010918:	f3bf 8f6f 	isb	sy
 801091c:	f3bf 8f4f 	dsb	sy
 8010920:	b662      	cpsie	i
 8010922:	607b      	str	r3, [r7, #4]
}
 8010924:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010926:	f7fe fcff 	bl	800f328 <xTaskIncrementTick>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d003      	beq.n	8010938 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010930:	4b06      	ldr	r3, [pc, #24]	@ (801094c <SysTick_Handler+0x44>)
 8010932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010936:	601a      	str	r2, [r3, #0]
 8010938:	2300      	movs	r3, #0
 801093a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	f383 8811 	msr	BASEPRI, r3
}
 8010942:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010944:	bf00      	nop
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	e000ed04 	.word	0xe000ed04

08010950 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010950:	b480      	push	{r7}
 8010952:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010954:	4b0b      	ldr	r3, [pc, #44]	@ (8010984 <vPortSetupTimerInterrupt+0x34>)
 8010956:	2200      	movs	r2, #0
 8010958:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801095a:	4b0b      	ldr	r3, [pc, #44]	@ (8010988 <vPortSetupTimerInterrupt+0x38>)
 801095c:	2200      	movs	r2, #0
 801095e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010960:	4b0a      	ldr	r3, [pc, #40]	@ (801098c <vPortSetupTimerInterrupt+0x3c>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4a0a      	ldr	r2, [pc, #40]	@ (8010990 <vPortSetupTimerInterrupt+0x40>)
 8010966:	fba2 2303 	umull	r2, r3, r2, r3
 801096a:	099b      	lsrs	r3, r3, #6
 801096c:	4a09      	ldr	r2, [pc, #36]	@ (8010994 <vPortSetupTimerInterrupt+0x44>)
 801096e:	3b01      	subs	r3, #1
 8010970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010972:	4b04      	ldr	r3, [pc, #16]	@ (8010984 <vPortSetupTimerInterrupt+0x34>)
 8010974:	2207      	movs	r2, #7
 8010976:	601a      	str	r2, [r3, #0]
}
 8010978:	bf00      	nop
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	e000e010 	.word	0xe000e010
 8010988:	e000e018 	.word	0xe000e018
 801098c:	20000000 	.word	0x20000000
 8010990:	10624dd3 	.word	0x10624dd3
 8010994:	e000e014 	.word	0xe000e014

08010998 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010998:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80109a8 <vPortEnableVFP+0x10>
 801099c:	6801      	ldr	r1, [r0, #0]
 801099e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80109a2:	6001      	str	r1, [r0, #0]
 80109a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80109a6:	bf00      	nop
 80109a8:	e000ed88 	.word	0xe000ed88

080109ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80109b2:	f3ef 8305 	mrs	r3, IPSR
 80109b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b0f      	cmp	r3, #15
 80109bc:	d917      	bls.n	80109ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80109be:	4a1a      	ldr	r2, [pc, #104]	@ (8010a28 <vPortValidateInterruptPriority+0x7c>)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	4413      	add	r3, r2
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80109c8:	4b18      	ldr	r3, [pc, #96]	@ (8010a2c <vPortValidateInterruptPriority+0x80>)
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	7afa      	ldrb	r2, [r7, #11]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d20d      	bcs.n	80109ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80109d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d6:	b672      	cpsid	i
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	b662      	cpsie	i
 80109e6:	607b      	str	r3, [r7, #4]
}
 80109e8:	bf00      	nop
 80109ea:	bf00      	nop
 80109ec:	e7fd      	b.n	80109ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80109ee:	4b10      	ldr	r3, [pc, #64]	@ (8010a30 <vPortValidateInterruptPriority+0x84>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80109f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010a34 <vPortValidateInterruptPriority+0x88>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d90d      	bls.n	8010a1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a02:	b672      	cpsid	i
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	b662      	cpsie	i
 8010a12:	603b      	str	r3, [r7, #0]
}
 8010a14:	bf00      	nop
 8010a16:	bf00      	nop
 8010a18:	e7fd      	b.n	8010a16 <vPortValidateInterruptPriority+0x6a>
	}
 8010a1a:	bf00      	nop
 8010a1c:	3714      	adds	r7, #20
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	e000e3f0 	.word	0xe000e3f0
 8010a2c:	2000762c 	.word	0x2000762c
 8010a30:	e000ed0c 	.word	0xe000ed0c
 8010a34:	20007630 	.word	0x20007630

08010a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b08a      	sub	sp, #40	@ 0x28
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010a40:	2300      	movs	r3, #0
 8010a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010a44:	f7fe fba0 	bl	800f188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010a48:	4b5f      	ldr	r3, [pc, #380]	@ (8010bc8 <pvPortMalloc+0x190>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d101      	bne.n	8010a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010a50:	f000 f924 	bl	8010c9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010a54:	4b5d      	ldr	r3, [pc, #372]	@ (8010bcc <pvPortMalloc+0x194>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4013      	ands	r3, r2
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f040 8094 	bne.w	8010b8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d020      	beq.n	8010aaa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010a68:	2208      	movs	r2, #8
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4413      	add	r3, r2
 8010a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f003 0307 	and.w	r3, r3, #7
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d017      	beq.n	8010aaa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f023 0307 	bic.w	r3, r3, #7
 8010a80:	3308      	adds	r3, #8
 8010a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f003 0307 	and.w	r3, r3, #7
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00d      	beq.n	8010aaa <pvPortMalloc+0x72>
	__asm volatile
 8010a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a92:	b672      	cpsid	i
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	b662      	cpsie	i
 8010aa2:	617b      	str	r3, [r7, #20]
}
 8010aa4:	bf00      	nop
 8010aa6:	bf00      	nop
 8010aa8:	e7fd      	b.n	8010aa6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d06c      	beq.n	8010b8a <pvPortMalloc+0x152>
 8010ab0:	4b47      	ldr	r3, [pc, #284]	@ (8010bd0 <pvPortMalloc+0x198>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d867      	bhi.n	8010b8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010aba:	4b46      	ldr	r3, [pc, #280]	@ (8010bd4 <pvPortMalloc+0x19c>)
 8010abc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010abe:	4b45      	ldr	r3, [pc, #276]	@ (8010bd4 <pvPortMalloc+0x19c>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ac4:	e004      	b.n	8010ad0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	687a      	ldr	r2, [r7, #4]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d903      	bls.n	8010ae2 <pvPortMalloc+0xaa>
 8010ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1f1      	bne.n	8010ac6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ae2:	4b39      	ldr	r3, [pc, #228]	@ (8010bc8 <pvPortMalloc+0x190>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d04e      	beq.n	8010b8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010aec:	6a3b      	ldr	r3, [r7, #32]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2208      	movs	r2, #8
 8010af2:	4413      	add	r3, r2
 8010af4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	6a3b      	ldr	r3, [r7, #32]
 8010afc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b00:	685a      	ldr	r2, [r3, #4]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	1ad2      	subs	r2, r2, r3
 8010b06:	2308      	movs	r3, #8
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d922      	bls.n	8010b54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4413      	add	r3, r2
 8010b14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	f003 0307 	and.w	r3, r3, #7
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00d      	beq.n	8010b3c <pvPortMalloc+0x104>
	__asm volatile
 8010b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b24:	b672      	cpsid	i
 8010b26:	f383 8811 	msr	BASEPRI, r3
 8010b2a:	f3bf 8f6f 	isb	sy
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	b662      	cpsie	i
 8010b34:	613b      	str	r3, [r7, #16]
}
 8010b36:	bf00      	nop
 8010b38:	bf00      	nop
 8010b3a:	e7fd      	b.n	8010b38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b3e:	685a      	ldr	r2, [r3, #4]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	1ad2      	subs	r2, r2, r3
 8010b44:	69bb      	ldr	r3, [r7, #24]
 8010b46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010b4e:	69b8      	ldr	r0, [r7, #24]
 8010b50:	f000 f906 	bl	8010d60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010b54:	4b1e      	ldr	r3, [pc, #120]	@ (8010bd0 <pvPortMalloc+0x198>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8010bd0 <pvPortMalloc+0x198>)
 8010b60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010b62:	4b1b      	ldr	r3, [pc, #108]	@ (8010bd0 <pvPortMalloc+0x198>)
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	4b1c      	ldr	r3, [pc, #112]	@ (8010bd8 <pvPortMalloc+0x1a0>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d203      	bcs.n	8010b76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010b6e:	4b18      	ldr	r3, [pc, #96]	@ (8010bd0 <pvPortMalloc+0x198>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	4a19      	ldr	r2, [pc, #100]	@ (8010bd8 <pvPortMalloc+0x1a0>)
 8010b74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b78:	685a      	ldr	r2, [r3, #4]
 8010b7a:	4b14      	ldr	r3, [pc, #80]	@ (8010bcc <pvPortMalloc+0x194>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	431a      	orrs	r2, r3
 8010b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b86:	2200      	movs	r2, #0
 8010b88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010b8a:	f7fe fb0b 	bl	800f1a4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010b8e:	69fb      	ldr	r3, [r7, #28]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d101      	bne.n	8010b98 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010b94:	f7ef feba 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	f003 0307 	and.w	r3, r3, #7
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d00d      	beq.n	8010bbe <pvPortMalloc+0x186>
	__asm volatile
 8010ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba6:	b672      	cpsid	i
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	b662      	cpsie	i
 8010bb6:	60fb      	str	r3, [r7, #12]
}
 8010bb8:	bf00      	nop
 8010bba:	bf00      	nop
 8010bbc:	e7fd      	b.n	8010bba <pvPortMalloc+0x182>
	return pvReturn;
 8010bbe:	69fb      	ldr	r3, [r7, #28]
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3728      	adds	r7, #40	@ 0x28
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	2001f63c 	.word	0x2001f63c
 8010bcc:	2001f648 	.word	0x2001f648
 8010bd0:	2001f640 	.word	0x2001f640
 8010bd4:	2001f634 	.word	0x2001f634
 8010bd8:	2001f644 	.word	0x2001f644

08010bdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d04e      	beq.n	8010c8c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010bee:	2308      	movs	r3, #8
 8010bf0:	425b      	negs	r3, r3
 8010bf2:	697a      	ldr	r2, [r7, #20]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	685a      	ldr	r2, [r3, #4]
 8010c00:	4b24      	ldr	r3, [pc, #144]	@ (8010c94 <vPortFree+0xb8>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	4013      	ands	r3, r2
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10d      	bne.n	8010c26 <vPortFree+0x4a>
	__asm volatile
 8010c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c0e:	b672      	cpsid	i
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	b662      	cpsie	i
 8010c1e:	60fb      	str	r3, [r7, #12]
}
 8010c20:	bf00      	nop
 8010c22:	bf00      	nop
 8010c24:	e7fd      	b.n	8010c22 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00d      	beq.n	8010c4a <vPortFree+0x6e>
	__asm volatile
 8010c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c32:	b672      	cpsid	i
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	b662      	cpsie	i
 8010c42:	60bb      	str	r3, [r7, #8]
}
 8010c44:	bf00      	nop
 8010c46:	bf00      	nop
 8010c48:	e7fd      	b.n	8010c46 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	685a      	ldr	r2, [r3, #4]
 8010c4e:	4b11      	ldr	r3, [pc, #68]	@ (8010c94 <vPortFree+0xb8>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4013      	ands	r3, r2
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d019      	beq.n	8010c8c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d115      	bne.n	8010c8c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	4b0b      	ldr	r3, [pc, #44]	@ (8010c94 <vPortFree+0xb8>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	43db      	mvns	r3, r3
 8010c6a:	401a      	ands	r2, r3
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010c70:	f7fe fa8a 	bl	800f188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	685a      	ldr	r2, [r3, #4]
 8010c78:	4b07      	ldr	r3, [pc, #28]	@ (8010c98 <vPortFree+0xbc>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	4a06      	ldr	r2, [pc, #24]	@ (8010c98 <vPortFree+0xbc>)
 8010c80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010c82:	6938      	ldr	r0, [r7, #16]
 8010c84:	f000 f86c 	bl	8010d60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010c88:	f7fe fa8c 	bl	800f1a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010c8c:	bf00      	nop
 8010c8e:	3718      	adds	r7, #24
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	2001f648 	.word	0x2001f648
 8010c98:	2001f640 	.word	0x2001f640

08010c9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010ca2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8010ca6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010ca8:	4b27      	ldr	r3, [pc, #156]	@ (8010d48 <prvHeapInit+0xac>)
 8010caa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f003 0307 	and.w	r3, r3, #7
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00c      	beq.n	8010cd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	3307      	adds	r3, #7
 8010cba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	f023 0307 	bic.w	r3, r3, #7
 8010cc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010cc4:	68ba      	ldr	r2, [r7, #8]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	4a1f      	ldr	r2, [pc, #124]	@ (8010d48 <prvHeapInit+0xac>)
 8010ccc:	4413      	add	r3, r2
 8010cce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8010d4c <prvHeapInit+0xb0>)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010cda:	4b1c      	ldr	r3, [pc, #112]	@ (8010d4c <prvHeapInit+0xb0>)
 8010cdc:	2200      	movs	r2, #0
 8010cde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	68ba      	ldr	r2, [r7, #8]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010ce8:	2208      	movs	r2, #8
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	1a9b      	subs	r3, r3, r2
 8010cee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f023 0307 	bic.w	r3, r3, #7
 8010cf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	4a15      	ldr	r2, [pc, #84]	@ (8010d50 <prvHeapInit+0xb4>)
 8010cfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010cfe:	4b14      	ldr	r3, [pc, #80]	@ (8010d50 <prvHeapInit+0xb4>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2200      	movs	r2, #0
 8010d04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d06:	4b12      	ldr	r3, [pc, #72]	@ (8010d50 <prvHeapInit+0xb4>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	1ad2      	subs	r2, r2, r3
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8010d50 <prvHeapInit+0xb4>)
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	4a0a      	ldr	r2, [pc, #40]	@ (8010d54 <prvHeapInit+0xb8>)
 8010d2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	685b      	ldr	r3, [r3, #4]
 8010d30:	4a09      	ldr	r2, [pc, #36]	@ (8010d58 <prvHeapInit+0xbc>)
 8010d32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010d34:	4b09      	ldr	r3, [pc, #36]	@ (8010d5c <prvHeapInit+0xc0>)
 8010d36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010d3a:	601a      	str	r2, [r3, #0]
}
 8010d3c:	bf00      	nop
 8010d3e:	3714      	adds	r7, #20
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	20007634 	.word	0x20007634
 8010d4c:	2001f634 	.word	0x2001f634
 8010d50:	2001f63c 	.word	0x2001f63c
 8010d54:	2001f644 	.word	0x2001f644
 8010d58:	2001f640 	.word	0x2001f640
 8010d5c:	2001f648 	.word	0x2001f648

08010d60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d60:	b480      	push	{r7}
 8010d62:	b085      	sub	sp, #20
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d68:	4b28      	ldr	r3, [pc, #160]	@ (8010e0c <prvInsertBlockIntoFreeList+0xac>)
 8010d6a:	60fb      	str	r3, [r7, #12]
 8010d6c:	e002      	b.n	8010d74 <prvInsertBlockIntoFreeList+0x14>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	60fb      	str	r3, [r7, #12]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d8f7      	bhi.n	8010d6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	4413      	add	r3, r2
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d108      	bne.n	8010da2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	685a      	ldr	r2, [r3, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	441a      	add	r2, r3
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	68ba      	ldr	r2, [r7, #8]
 8010dac:	441a      	add	r2, r3
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d118      	bne.n	8010de8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	4b15      	ldr	r3, [pc, #84]	@ (8010e10 <prvInsertBlockIntoFreeList+0xb0>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d00d      	beq.n	8010dde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	685a      	ldr	r2, [r3, #4]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	441a      	add	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	681a      	ldr	r2, [r3, #0]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	601a      	str	r2, [r3, #0]
 8010ddc:	e008      	b.n	8010df0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010dde:	4b0c      	ldr	r3, [pc, #48]	@ (8010e10 <prvInsertBlockIntoFreeList+0xb0>)
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	601a      	str	r2, [r3, #0]
 8010de6:	e003      	b.n	8010df0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010df0:	68fa      	ldr	r2, [r7, #12]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d002      	beq.n	8010dfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010dfe:	bf00      	nop
 8010e00:	3714      	adds	r7, #20
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	2001f634 	.word	0x2001f634
 8010e10:	2001f63c 	.word	0x2001f63c

08010e14 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	22fa      	movs	r2, #250	@ 0xfa
 8010e22:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	330c      	adds	r3, #12
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	6839      	ldr	r1, [r7, #0]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f002 f978 	bl	8013124 <tcpip_send_msg_wait_sem>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d103      	bne.n	8010e48 <netconn_apimsg+0x34>
    return apimsg->err;
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010e46:	e001      	b.n	8010e4c <netconn_apimsg+0x38>
  }
  return err;
 8010e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b08c      	sub	sp, #48	@ 0x30
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	603a      	str	r2, [r7, #0]
 8010e5e:	71fb      	strb	r3, [r7, #7]
 8010e60:	460b      	mov	r3, r1
 8010e62:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010e64:	79fb      	ldrb	r3, [r7, #7]
 8010e66:	6839      	ldr	r1, [r7, #0]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 ff61 	bl	8011d30 <netconn_alloc>
 8010e6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8010e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d054      	beq.n	8010f20 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010e76:	79bb      	ldrb	r3, [r7, #6]
 8010e78:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010e7e:	f107 0308 	add.w	r3, r7, #8
 8010e82:	4619      	mov	r1, r3
 8010e84:	4829      	ldr	r0, [pc, #164]	@ (8010f2c <netconn_new_with_proto_and_callback+0xd8>)
 8010e86:	f7ff ffc5 	bl	8010e14 <netconn_apimsg>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8010e90:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d043      	beq.n	8010f20 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d005      	beq.n	8010eac <netconn_new_with_proto_and_callback+0x58>
 8010ea0:	4b23      	ldr	r3, [pc, #140]	@ (8010f30 <netconn_new_with_proto_and_callback+0xdc>)
 8010ea2:	22a3      	movs	r2, #163	@ 0xa3
 8010ea4:	4923      	ldr	r1, [pc, #140]	@ (8010f34 <netconn_new_with_proto_and_callback+0xe0>)
 8010ea6:	4824      	ldr	r0, [pc, #144]	@ (8010f38 <netconn_new_with_proto_and_callback+0xe4>)
 8010ea8:	f00e fffc 	bl	801fea4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eae:	3310      	adds	r3, #16
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f00d ff6d 	bl	801ed90 <sys_mbox_valid>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d105      	bne.n	8010ec8 <netconn_new_with_proto_and_callback+0x74>
 8010ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8010f30 <netconn_new_with_proto_and_callback+0xdc>)
 8010ebe:	22a4      	movs	r2, #164	@ 0xa4
 8010ec0:	491e      	ldr	r1, [pc, #120]	@ (8010f3c <netconn_new_with_proto_and_callback+0xe8>)
 8010ec2:	481d      	ldr	r0, [pc, #116]	@ (8010f38 <netconn_new_with_proto_and_callback+0xe4>)
 8010ec4:	f00e ffee 	bl	801fea4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eca:	3314      	adds	r3, #20
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f00d ff5f 	bl	801ed90 <sys_mbox_valid>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d005      	beq.n	8010ee4 <netconn_new_with_proto_and_callback+0x90>
 8010ed8:	4b15      	ldr	r3, [pc, #84]	@ (8010f30 <netconn_new_with_proto_and_callback+0xdc>)
 8010eda:	22a6      	movs	r2, #166	@ 0xa6
 8010edc:	4918      	ldr	r1, [pc, #96]	@ (8010f40 <netconn_new_with_proto_and_callback+0xec>)
 8010ede:	4816      	ldr	r0, [pc, #88]	@ (8010f38 <netconn_new_with_proto_and_callback+0xe4>)
 8010ee0:	f00e ffe0 	bl	801fea4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee6:	330c      	adds	r3, #12
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f00d ffdf 	bl	801eeac <sys_sem_valid>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d105      	bne.n	8010f00 <netconn_new_with_proto_and_callback+0xac>
 8010ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8010f30 <netconn_new_with_proto_and_callback+0xdc>)
 8010ef6:	22a9      	movs	r2, #169	@ 0xa9
 8010ef8:	4912      	ldr	r1, [pc, #72]	@ (8010f44 <netconn_new_with_proto_and_callback+0xf0>)
 8010efa:	480f      	ldr	r0, [pc, #60]	@ (8010f38 <netconn_new_with_proto_and_callback+0xe4>)
 8010efc:	f00e ffd2 	bl	801fea4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f02:	330c      	adds	r3, #12
 8010f04:	4618      	mov	r0, r3
 8010f06:	f00d ffc4 	bl	801ee92 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f0c:	3310      	adds	r3, #16
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f00d feca 	bl	801eca8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f16:	2007      	movs	r0, #7
 8010f18:	f002 feae 	bl	8013c78 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e000      	b.n	8010f22 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3730      	adds	r7, #48	@ 0x30
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	08011d05 	.word	0x08011d05
 8010f30:	08021024 	.word	0x08021024
 8010f34:	08021058 	.word	0x08021058
 8010f38:	0802107c 	.word	0x0802107c
 8010f3c:	080210a4 	.word	0x080210a4
 8010f40:	080210bc 	.word	0x080210bc
 8010f44:	080210e0 	.word	0x080210e0

08010f48 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b08c      	sub	sp, #48	@ 0x30
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d101      	bne.n	8010f5a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010f56:	2300      	movs	r3, #0
 8010f58:	e014      	b.n	8010f84 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010f5e:	2329      	movs	r3, #41	@ 0x29
 8010f60:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010f62:	f107 030c 	add.w	r3, r7, #12
 8010f66:	4619      	mov	r1, r3
 8010f68:	4808      	ldr	r0, [pc, #32]	@ (8010f8c <netconn_prepare_delete+0x44>)
 8010f6a:	f7ff ff53 	bl	8010e14 <netconn_apimsg>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010f74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d002      	beq.n	8010f82 <netconn_prepare_delete+0x3a>
    return err;
 8010f7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010f80:	e000      	b.n	8010f84 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010f82:	2300      	movs	r3, #0
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3730      	adds	r7, #48	@ 0x30
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	08012271 	.word	0x08012271

08010f90 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d101      	bne.n	8010fa2 <netconn_delete+0x12>
    return ERR_OK;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	e00d      	b.n	8010fbe <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f7ff ffd0 	bl	8010f48 <netconn_prepare_delete>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d102      	bne.n	8010fba <netconn_delete+0x2a>
    netconn_free(conn);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 ff29 	bl	8011e0c <netconn_free>
  }
  return err;
 8010fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
	...

08010fc8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08e      	sub	sp, #56	@ 0x38
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d109      	bne.n	8010ff0 <netconn_bind+0x28>
 8010fdc:	4b11      	ldr	r3, [pc, #68]	@ (8011024 <netconn_bind+0x5c>)
 8010fde:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8010fe2:	4911      	ldr	r1, [pc, #68]	@ (8011028 <netconn_bind+0x60>)
 8010fe4:	4811      	ldr	r0, [pc, #68]	@ (801102c <netconn_bind+0x64>)
 8010fe6:	f00e ff5d 	bl	801fea4 <iprintf>
 8010fea:	f06f 030f 	mvn.w	r3, #15
 8010fee:	e015      	b.n	801101c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d101      	bne.n	8010ffa <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8010ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8011030 <netconn_bind+0x68>)
 8010ff8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011002:	88fb      	ldrh	r3, [r7, #6]
 8011004:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011006:	f107 0314 	add.w	r3, r7, #20
 801100a:	4619      	mov	r1, r3
 801100c:	4809      	ldr	r0, [pc, #36]	@ (8011034 <netconn_bind+0x6c>)
 801100e:	f7ff ff01 	bl	8010e14 <netconn_apimsg>
 8011012:	4603      	mov	r3, r0
 8011014:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011018:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801101c:	4618      	mov	r0, r3
 801101e:	3738      	adds	r7, #56	@ 0x38
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	08021024 	.word	0x08021024
 8011028:	0802115c 	.word	0x0802115c
 801102c:	0802107c 	.word	0x0802107c
 8011030:	08025488 	.word	0x08025488
 8011034:	08012439 	.word	0x08012439

08011038 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08e      	sub	sp, #56	@ 0x38
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	4613      	mov	r3, r2
 8011044:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d109      	bne.n	8011060 <netconn_connect+0x28>
 801104c:	4b11      	ldr	r3, [pc, #68]	@ (8011094 <netconn_connect+0x5c>)
 801104e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8011052:	4911      	ldr	r1, [pc, #68]	@ (8011098 <netconn_connect+0x60>)
 8011054:	4811      	ldr	r0, [pc, #68]	@ (801109c <netconn_connect+0x64>)
 8011056:	f00e ff25 	bl	801fea4 <iprintf>
 801105a:	f06f 030f 	mvn.w	r3, #15
 801105e:	e015      	b.n	801108c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d101      	bne.n	801106a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8011066:	4b0e      	ldr	r3, [pc, #56]	@ (80110a0 <netconn_connect+0x68>)
 8011068:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011072:	88fb      	ldrh	r3, [r7, #6]
 8011074:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8011076:	f107 0314 	add.w	r3, r7, #20
 801107a:	4619      	mov	r1, r3
 801107c:	4809      	ldr	r0, [pc, #36]	@ (80110a4 <netconn_connect+0x6c>)
 801107e:	f7ff fec9 	bl	8010e14 <netconn_apimsg>
 8011082:	4603      	mov	r3, r0
 8011084:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011088:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801108c:	4618      	mov	r0, r3
 801108e:	3738      	adds	r7, #56	@ 0x38
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	08021024 	.word	0x08021024
 8011098:	08021198 	.word	0x08021198
 801109c:	0802107c 	.word	0x0802107c
 80110a0:	08025488 	.word	0x08025488
 80110a4:	080125cd 	.word	0x080125cd

080110a8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b08c      	sub	sp, #48	@ 0x30
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d109      	bne.n	80110ca <netconn_disconnect+0x22>
 80110b6:	4b0d      	ldr	r3, [pc, #52]	@ (80110ec <netconn_disconnect+0x44>)
 80110b8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80110bc:	490c      	ldr	r1, [pc, #48]	@ (80110f0 <netconn_disconnect+0x48>)
 80110be:	480d      	ldr	r0, [pc, #52]	@ (80110f4 <netconn_disconnect+0x4c>)
 80110c0:	f00e fef0 	bl	801fea4 <iprintf>
 80110c4:	f06f 030f 	mvn.w	r3, #15
 80110c8:	e00c      	b.n	80110e4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 80110ce:	f107 030c 	add.w	r3, r7, #12
 80110d2:	4619      	mov	r1, r3
 80110d4:	4808      	ldr	r0, [pc, #32]	@ (80110f8 <netconn_disconnect+0x50>)
 80110d6:	f7ff fe9d 	bl	8010e14 <netconn_apimsg>
 80110da:	4603      	mov	r3, r0
 80110dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80110e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3730      	adds	r7, #48	@ 0x30
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	08021024 	.word	0x08021024
 80110f0:	080211b8 	.word	0x080211b8
 80110f4:	0802107c 	.word	0x0802107c
 80110f8:	08012749 	.word	0x08012749

080110fc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b088      	sub	sp, #32
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	4613      	mov	r3, r2
 8011108:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801110a:	2300      	movs	r3, #0
 801110c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d109      	bne.n	8011128 <netconn_recv_data+0x2c>
 8011114:	4b58      	ldr	r3, [pc, #352]	@ (8011278 <netconn_recv_data+0x17c>)
 8011116:	f44f 7212 	mov.w	r2, #584	@ 0x248
 801111a:	4958      	ldr	r1, [pc, #352]	@ (801127c <netconn_recv_data+0x180>)
 801111c:	4858      	ldr	r0, [pc, #352]	@ (8011280 <netconn_recv_data+0x184>)
 801111e:	f00e fec1 	bl	801fea4 <iprintf>
 8011122:	f06f 030f 	mvn.w	r3, #15
 8011126:	e0a2      	b.n	801126e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2200      	movs	r2, #0
 801112c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d109      	bne.n	8011148 <netconn_recv_data+0x4c>
 8011134:	4b50      	ldr	r3, [pc, #320]	@ (8011278 <netconn_recv_data+0x17c>)
 8011136:	f240 224a 	movw	r2, #586	@ 0x24a
 801113a:	4952      	ldr	r1, [pc, #328]	@ (8011284 <netconn_recv_data+0x188>)
 801113c:	4850      	ldr	r0, [pc, #320]	@ (8011280 <netconn_recv_data+0x184>)
 801113e:	f00e feb1 	bl	801fea4 <iprintf>
 8011142:	f06f 030f 	mvn.w	r3, #15
 8011146:	e092      	b.n	801126e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	3310      	adds	r3, #16
 801114c:	4618      	mov	r0, r3
 801114e:	f00d fe1f 	bl	801ed90 <sys_mbox_valid>
 8011152:	4603      	mov	r3, r0
 8011154:	2b00      	cmp	r3, #0
 8011156:	d10e      	bne.n	8011176 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f000 fa23 	bl	80115a4 <netconn_err>
 801115e:	4603      	mov	r3, r0
 8011160:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8011162:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d002      	beq.n	8011170 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801116a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801116e:	e07e      	b.n	801126e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011170:	f06f 030a 	mvn.w	r3, #10
 8011174:	e07b      	b.n	801126e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	7f1b      	ldrb	r3, [r3, #28]
 801117a:	f003 0302 	and.w	r3, r3, #2
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10f      	bne.n	80111a2 <netconn_recv_data+0xa6>
 8011182:	79fb      	ldrb	r3, [r7, #7]
 8011184:	f003 0304 	and.w	r3, r3, #4
 8011188:	2b00      	cmp	r3, #0
 801118a:	d10a      	bne.n	80111a2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	7f1b      	ldrb	r3, [r3, #28]
 8011190:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011194:	2b00      	cmp	r3, #0
 8011196:	d104      	bne.n	80111a2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d023      	beq.n	80111ea <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	3310      	adds	r3, #16
 80111a6:	f107 0218 	add.w	r2, r7, #24
 80111aa:	4611      	mov	r1, r2
 80111ac:	4618      	mov	r0, r3
 80111ae:	f00d fdd8 	bl	801ed62 <sys_arch_mbox_tryfetch>
 80111b2:	4603      	mov	r3, r0
 80111b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80111b8:	d11f      	bne.n	80111fa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f000 f9f2 	bl	80115a4 <netconn_err>
 80111c0:	4603      	mov	r3, r0
 80111c2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80111c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d002      	beq.n	80111d2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80111cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80111d0:	e04d      	b.n	801126e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	7f1b      	ldrb	r3, [r3, #28]
 80111d6:	f003 0301 	and.w	r3, r3, #1
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d002      	beq.n	80111e4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80111de:	f06f 030a 	mvn.w	r3, #10
 80111e2:	e044      	b.n	801126e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80111e4:	f06f 0306 	mvn.w	r3, #6
 80111e8:	e041      	b.n	801126e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	3310      	adds	r3, #16
 80111ee:	f107 0118 	add.w	r1, r7, #24
 80111f2:	2200      	movs	r2, #0
 80111f4:	4618      	mov	r0, r3
 80111f6:	f00d fd83 	bl	801ed00 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011202:	2b10      	cmp	r3, #16
 8011204:	d117      	bne.n	8011236 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	f107 0217 	add.w	r2, r7, #23
 801120c:	4611      	mov	r1, r2
 801120e:	4618      	mov	r0, r3
 8011210:	f000 fa1a 	bl	8011648 <lwip_netconn_is_err_msg>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d009      	beq.n	801122e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801121a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801121e:	f113 0f0f 	cmn.w	r3, #15
 8011222:	d101      	bne.n	8011228 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8011224:	2300      	movs	r3, #0
 8011226:	e022      	b.n	801126e <netconn_recv_data+0x172>
      }
      return err;
 8011228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801122c:	e01f      	b.n	801126e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	891b      	ldrh	r3, [r3, #8]
 8011232:	83fb      	strh	r3, [r7, #30]
 8011234:	e00d      	b.n	8011252 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d106      	bne.n	801124a <netconn_recv_data+0x14e>
 801123c:	4b0e      	ldr	r3, [pc, #56]	@ (8011278 <netconn_recv_data+0x17c>)
 801123e:	f240 2291 	movw	r2, #657	@ 0x291
 8011242:	4911      	ldr	r1, [pc, #68]	@ (8011288 <netconn_recv_data+0x18c>)
 8011244:	480e      	ldr	r0, [pc, #56]	@ (8011280 <netconn_recv_data+0x184>)
 8011246:	f00e fe2d 	bl	801fea4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	891b      	ldrh	r3, [r3, #8]
 8011250:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011256:	2b00      	cmp	r3, #0
 8011258:	d005      	beq.n	8011266 <netconn_recv_data+0x16a>
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801125e:	8bfa      	ldrh	r2, [r7, #30]
 8011260:	2101      	movs	r1, #1
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8011266:	69ba      	ldr	r2, [r7, #24]
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801126c:	2300      	movs	r3, #0
}
 801126e:	4618      	mov	r0, r3
 8011270:	3720      	adds	r7, #32
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	08021024 	.word	0x08021024
 801127c:	0802123c 	.word	0x0802123c
 8011280:	0802107c 	.word	0x0802107c
 8011284:	0802125c 	.word	0x0802125c
 8011288:	08021278 	.word	0x08021278

0801128c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d005      	beq.n	80112aa <netconn_tcp_recvd_msg+0x1e>
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80112a6:	2b10      	cmp	r3, #16
 80112a8:	d009      	beq.n	80112be <netconn_tcp_recvd_msg+0x32>
 80112aa:	4b0c      	ldr	r3, [pc, #48]	@ (80112dc <netconn_tcp_recvd_msg+0x50>)
 80112ac:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80112b0:	490b      	ldr	r1, [pc, #44]	@ (80112e0 <netconn_tcp_recvd_msg+0x54>)
 80112b2:	480c      	ldr	r0, [pc, #48]	@ (80112e4 <netconn_tcp_recvd_msg+0x58>)
 80112b4:	f00e fdf6 	bl	801fea4 <iprintf>
 80112b8:	f06f 030f 	mvn.w	r3, #15
 80112bc:	e00a      	b.n	80112d4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	68fa      	ldr	r2, [r7, #12]
 80112c2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	68ba      	ldr	r2, [r7, #8]
 80112c8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80112ca:	6879      	ldr	r1, [r7, #4]
 80112cc:	4806      	ldr	r0, [pc, #24]	@ (80112e8 <netconn_tcp_recvd_msg+0x5c>)
 80112ce:	f7ff fda1 	bl	8010e14 <netconn_apimsg>
 80112d2:	4603      	mov	r3, r0
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	08021024 	.word	0x08021024
 80112e0:	08021284 	.word	0x08021284
 80112e4:	0802107c 	.word	0x0802107c
 80112e8:	0801281f 	.word	0x0801281f

080112ec <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b090      	sub	sp, #64	@ 0x40
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	4613      	mov	r3, r2
 80112f8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	3310      	adds	r3, #16
 80112fe:	4618      	mov	r0, r3
 8011300:	f00d fd46 	bl	801ed90 <sys_mbox_valid>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	d102      	bne.n	8011310 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801130a:	f06f 030a 	mvn.w	r3, #10
 801130e:	e06d      	b.n	80113ec <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	7f1b      	ldrb	r3, [r3, #28]
 8011314:	b25b      	sxtb	r3, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	da07      	bge.n	801132a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	7f1b      	ldrb	r3, [r3, #28]
 801131e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011322:	b2da      	uxtb	r2, r3
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011328:	e039      	b.n	801139e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801132a:	79fb      	ldrb	r3, [r7, #7]
 801132c:	461a      	mov	r2, r3
 801132e:	68b9      	ldr	r1, [r7, #8]
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f7ff fee3 	bl	80110fc <netconn_recv_data>
 8011336:	4603      	mov	r3, r0
 8011338:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 801133c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011340:	2b00      	cmp	r3, #0
 8011342:	d002      	beq.n	801134a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8011344:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011348:	e050      	b.n	80113ec <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011350:	79fb      	ldrb	r3, [r7, #7]
 8011352:	f003 0308 	and.w	r3, r3, #8
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10e      	bne.n	8011378 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801135a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <netconn_recv_data_tcp+0x7a>
 8011360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011362:	891b      	ldrh	r3, [r3, #8]
 8011364:	e000      	b.n	8011368 <netconn_recv_data_tcp+0x7c>
 8011366:	2301      	movs	r3, #1
 8011368:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801136a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801136c:	f107 0214 	add.w	r2, r7, #20
 8011370:	4619      	mov	r1, r3
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f7ff ff8a 	bl	801128c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137a:	2b00      	cmp	r3, #0
 801137c:	d134      	bne.n	80113e8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801137e:	79fb      	ldrb	r3, [r7, #7]
 8011380:	f003 0310 	and.w	r3, r3, #16
 8011384:	2b00      	cmp	r3, #0
 8011386:	d009      	beq.n	801139c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	7f1b      	ldrb	r3, [r3, #28]
 801138c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011390:	b2da      	uxtb	r2, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8011396:	f06f 0306 	mvn.w	r3, #6
 801139a:	e027      	b.n	80113ec <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801139c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d005      	beq.n	80113b2 <netconn_recv_data_tcp+0xc6>
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113aa:	2200      	movs	r2, #0
 80113ac:	2101      	movs	r1, #1
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d10f      	bne.n	80113da <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f000 f8f2 	bl	80115a4 <netconn_err>
 80113c0:	4603      	mov	r3, r0
 80113c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80113c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d002      	beq.n	80113d4 <netconn_recv_data_tcp+0xe8>
          return err;
 80113ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80113d2:	e00b      	b.n	80113ec <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80113d4:	f06f 030d 	mvn.w	r3, #13
 80113d8:	e008      	b.n	80113ec <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80113da:	2101      	movs	r1, #1
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f000 f8b1 	bl	8011544 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80113e2:	f06f 030e 	mvn.w	r3, #14
 80113e6:	e001      	b.n	80113ec <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80113e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3740      	adds	r7, #64	@ 0x40
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80113fe:	2300      	movs	r3, #0
 8011400:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d109      	bne.n	801141c <netconn_recv+0x28>
 8011408:	4b32      	ldr	r3, [pc, #200]	@ (80114d4 <netconn_recv+0xe0>)
 801140a:	f240 3263 	movw	r2, #867	@ 0x363
 801140e:	4932      	ldr	r1, [pc, #200]	@ (80114d8 <netconn_recv+0xe4>)
 8011410:	4832      	ldr	r0, [pc, #200]	@ (80114dc <netconn_recv+0xe8>)
 8011412:	f00e fd47 	bl	801fea4 <iprintf>
 8011416:	f06f 030f 	mvn.w	r3, #15
 801141a:	e056      	b.n	80114ca <netconn_recv+0xd6>
  *new_buf = NULL;
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	2200      	movs	r2, #0
 8011420:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d109      	bne.n	801143c <netconn_recv+0x48>
 8011428:	4b2a      	ldr	r3, [pc, #168]	@ (80114d4 <netconn_recv+0xe0>)
 801142a:	f240 3265 	movw	r2, #869	@ 0x365
 801142e:	492c      	ldr	r1, [pc, #176]	@ (80114e0 <netconn_recv+0xec>)
 8011430:	482a      	ldr	r0, [pc, #168]	@ (80114dc <netconn_recv+0xe8>)
 8011432:	f00e fd37 	bl	801fea4 <iprintf>
 8011436:	f06f 030f 	mvn.w	r3, #15
 801143a:	e046      	b.n	80114ca <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011444:	2b10      	cmp	r3, #16
 8011446:	d13a      	bne.n	80114be <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011448:	2300      	movs	r3, #0
 801144a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801144c:	2006      	movs	r0, #6
 801144e:	f002 fb9d 	bl	8013b8c <memp_malloc>
 8011452:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d102      	bne.n	8011460 <netconn_recv+0x6c>
      return ERR_MEM;
 801145a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801145e:	e034      	b.n	80114ca <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011460:	f107 030c 	add.w	r3, r7, #12
 8011464:	2200      	movs	r2, #0
 8011466:	4619      	mov	r1, r3
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff ff3f 	bl	80112ec <netconn_recv_data_tcp>
 801146e:	4603      	mov	r3, r0
 8011470:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011472:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d006      	beq.n	8011488 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801147a:	6979      	ldr	r1, [r7, #20]
 801147c:	2006      	movs	r0, #6
 801147e:	f002 fbfb 	bl	8013c78 <memp_free>
      return err;
 8011482:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011486:	e020      	b.n	80114ca <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d106      	bne.n	801149c <netconn_recv+0xa8>
 801148e:	4b11      	ldr	r3, [pc, #68]	@ (80114d4 <netconn_recv+0xe0>)
 8011490:	f240 3279 	movw	r2, #889	@ 0x379
 8011494:	4913      	ldr	r1, [pc, #76]	@ (80114e4 <netconn_recv+0xf0>)
 8011496:	4811      	ldr	r0, [pc, #68]	@ (80114dc <netconn_recv+0xe8>)
 8011498:	f00e fd04 	bl	801fea4 <iprintf>

    buf->p = p;
 801149c:	68fa      	ldr	r2, [r7, #12]
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	2200      	movs	r2, #0
 80114ac:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2200      	movs	r2, #0
 80114b2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	697a      	ldr	r2, [r7, #20]
 80114b8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80114ba:	2300      	movs	r3, #0
 80114bc:	e005      	b.n	80114ca <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80114be:	2200      	movs	r2, #0
 80114c0:	6839      	ldr	r1, [r7, #0]
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7ff fe1a 	bl	80110fc <netconn_recv_data>
 80114c8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3718      	adds	r7, #24
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	08021024 	.word	0x08021024
 80114d8:	0802123c 	.word	0x0802123c
 80114dc:	0802107c 	.word	0x0802107c
 80114e0:	0802125c 	.word	0x0802125c
 80114e4:	080212d4 	.word	0x080212d4

080114e8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b08c      	sub	sp, #48	@ 0x30
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d109      	bne.n	801150c <netconn_send+0x24>
 80114f8:	4b0e      	ldr	r3, [pc, #56]	@ (8011534 <netconn_send+0x4c>)
 80114fa:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80114fe:	490e      	ldr	r1, [pc, #56]	@ (8011538 <netconn_send+0x50>)
 8011500:	480e      	ldr	r0, [pc, #56]	@ (801153c <netconn_send+0x54>)
 8011502:	f00e fccf 	bl	801fea4 <iprintf>
 8011506:	f06f 030f 	mvn.w	r3, #15
 801150a:	e00e      	b.n	801152a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011514:	f107 030c 	add.w	r3, r7, #12
 8011518:	4619      	mov	r1, r3
 801151a:	4809      	ldr	r0, [pc, #36]	@ (8011540 <netconn_send+0x58>)
 801151c:	f7ff fc7a 	bl	8010e14 <netconn_apimsg>
 8011520:	4603      	mov	r3, r0
 8011522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011526:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801152a:	4618      	mov	r0, r3
 801152c:	3730      	adds	r7, #48	@ 0x30
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	08021024 	.word	0x08021024
 8011538:	080212e0 	.word	0x080212e0
 801153c:	0802107c 	.word	0x0802107c
 8011540:	08012785 	.word	0x08012785

08011544 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b08c      	sub	sp, #48	@ 0x30
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	460b      	mov	r3, r1
 801154e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d109      	bne.n	801156a <netconn_close_shutdown+0x26>
 8011556:	4b0f      	ldr	r3, [pc, #60]	@ (8011594 <netconn_close_shutdown+0x50>)
 8011558:	f240 4247 	movw	r2, #1095	@ 0x447
 801155c:	490e      	ldr	r1, [pc, #56]	@ (8011598 <netconn_close_shutdown+0x54>)
 801155e:	480f      	ldr	r0, [pc, #60]	@ (801159c <netconn_close_shutdown+0x58>)
 8011560:	f00e fca0 	bl	801fea4 <iprintf>
 8011564:	f06f 030f 	mvn.w	r3, #15
 8011568:	e010      	b.n	801158c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801156e:	78fb      	ldrb	r3, [r7, #3]
 8011570:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011572:	2329      	movs	r3, #41	@ 0x29
 8011574:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011576:	f107 030c 	add.w	r3, r7, #12
 801157a:	4619      	mov	r1, r3
 801157c:	4808      	ldr	r0, [pc, #32]	@ (80115a0 <netconn_close_shutdown+0x5c>)
 801157e:	f7ff fc49 	bl	8010e14 <netconn_apimsg>
 8011582:	4603      	mov	r3, r0
 8011584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011588:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801158c:	4618      	mov	r0, r3
 801158e:	3730      	adds	r7, #48	@ 0x30
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	08021024 	.word	0x08021024
 8011598:	08021360 	.word	0x08021360
 801159c:	0802107c 	.word	0x0802107c
 80115a0:	08012c21 	.word	0x08012c21

080115a4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d101      	bne.n	80115b6 <netconn_err+0x12>
    return ERR_OK;
 80115b2:	2300      	movs	r3, #0
 80115b4:	e00d      	b.n	80115d2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80115b6:	f00d fcf5 	bl	801efa4 <sys_arch_protect>
 80115ba:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	7a1b      	ldrb	r3, [r3, #8]
 80115c0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80115c8:	68f8      	ldr	r0, [r7, #12]
 80115ca:	f00d fcf9 	bl	801efc0 <sys_arch_unprotect>
  return err;
 80115ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
	...

080115dc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	4603      	mov	r3, r0
 80115e4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80115e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115ea:	f113 0f0d 	cmn.w	r3, #13
 80115ee:	d009      	beq.n	8011604 <lwip_netconn_err_to_msg+0x28>
 80115f0:	f113 0f0d 	cmn.w	r3, #13
 80115f4:	dc0c      	bgt.n	8011610 <lwip_netconn_err_to_msg+0x34>
 80115f6:	f113 0f0f 	cmn.w	r3, #15
 80115fa:	d007      	beq.n	801160c <lwip_netconn_err_to_msg+0x30>
 80115fc:	f113 0f0e 	cmn.w	r3, #14
 8011600:	d002      	beq.n	8011608 <lwip_netconn_err_to_msg+0x2c>
 8011602:	e005      	b.n	8011610 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011604:	4b0a      	ldr	r3, [pc, #40]	@ (8011630 <lwip_netconn_err_to_msg+0x54>)
 8011606:	e00e      	b.n	8011626 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011608:	4b0a      	ldr	r3, [pc, #40]	@ (8011634 <lwip_netconn_err_to_msg+0x58>)
 801160a:	e00c      	b.n	8011626 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801160c:	4b0a      	ldr	r3, [pc, #40]	@ (8011638 <lwip_netconn_err_to_msg+0x5c>)
 801160e:	e00a      	b.n	8011626 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d005      	beq.n	8011624 <lwip_netconn_err_to_msg+0x48>
 8011618:	4b08      	ldr	r3, [pc, #32]	@ (801163c <lwip_netconn_err_to_msg+0x60>)
 801161a:	227d      	movs	r2, #125	@ 0x7d
 801161c:	4908      	ldr	r1, [pc, #32]	@ (8011640 <lwip_netconn_err_to_msg+0x64>)
 801161e:	4809      	ldr	r0, [pc, #36]	@ (8011644 <lwip_netconn_err_to_msg+0x68>)
 8011620:	f00e fc40 	bl	801fea4 <iprintf>
      return NULL;
 8011624:	2300      	movs	r3, #0
  }
}
 8011626:	4618      	mov	r0, r3
 8011628:	3708      	adds	r7, #8
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	08025340 	.word	0x08025340
 8011634:	08025341 	.word	0x08025341
 8011638:	08025342 	.word	0x08025342
 801163c:	0802137c 	.word	0x0802137c
 8011640:	080213b0 	.word	0x080213b0
 8011644:	080213c0 	.word	0x080213c0

08011648 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d105      	bne.n	8011664 <lwip_netconn_is_err_msg+0x1c>
 8011658:	4b12      	ldr	r3, [pc, #72]	@ (80116a4 <lwip_netconn_is_err_msg+0x5c>)
 801165a:	2285      	movs	r2, #133	@ 0x85
 801165c:	4912      	ldr	r1, [pc, #72]	@ (80116a8 <lwip_netconn_is_err_msg+0x60>)
 801165e:	4813      	ldr	r0, [pc, #76]	@ (80116ac <lwip_netconn_is_err_msg+0x64>)
 8011660:	f00e fc20 	bl	801fea4 <iprintf>

  if (msg == &netconn_aborted) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4a12      	ldr	r2, [pc, #72]	@ (80116b0 <lwip_netconn_is_err_msg+0x68>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d104      	bne.n	8011676 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	22f3      	movs	r2, #243	@ 0xf3
 8011670:	701a      	strb	r2, [r3, #0]
    return 1;
 8011672:	2301      	movs	r3, #1
 8011674:	e012      	b.n	801169c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4a0e      	ldr	r2, [pc, #56]	@ (80116b4 <lwip_netconn_is_err_msg+0x6c>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d104      	bne.n	8011688 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	22f2      	movs	r2, #242	@ 0xf2
 8011682:	701a      	strb	r2, [r3, #0]
    return 1;
 8011684:	2301      	movs	r3, #1
 8011686:	e009      	b.n	801169c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	4a0b      	ldr	r2, [pc, #44]	@ (80116b8 <lwip_netconn_is_err_msg+0x70>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d104      	bne.n	801169a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	22f1      	movs	r2, #241	@ 0xf1
 8011694:	701a      	strb	r2, [r3, #0]
    return 1;
 8011696:	2301      	movs	r3, #1
 8011698:	e000      	b.n	801169c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801169a:	2300      	movs	r3, #0
}
 801169c:	4618      	mov	r0, r3
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	0802137c 	.word	0x0802137c
 80116a8:	080213e8 	.word	0x080213e8
 80116ac:	080213c0 	.word	0x080213c0
 80116b0:	08025340 	.word	0x08025340
 80116b4:	08025341 	.word	0x08025341
 80116b8:	08025342 	.word	0x08025342

080116bc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b088      	sub	sp, #32
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	607a      	str	r2, [r7, #4]
 80116c8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d105      	bne.n	80116dc <recv_udp+0x20>
 80116d0:	4b34      	ldr	r3, [pc, #208]	@ (80117a4 <recv_udp+0xe8>)
 80116d2:	22e5      	movs	r2, #229	@ 0xe5
 80116d4:	4934      	ldr	r1, [pc, #208]	@ (80117a8 <recv_udp+0xec>)
 80116d6:	4835      	ldr	r0, [pc, #212]	@ (80117ac <recv_udp+0xf0>)
 80116d8:	f00e fbe4 	bl	801fea4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d105      	bne.n	80116ee <recv_udp+0x32>
 80116e2:	4b30      	ldr	r3, [pc, #192]	@ (80117a4 <recv_udp+0xe8>)
 80116e4:	22e6      	movs	r2, #230	@ 0xe6
 80116e6:	4932      	ldr	r1, [pc, #200]	@ (80117b0 <recv_udp+0xf4>)
 80116e8:	4830      	ldr	r0, [pc, #192]	@ (80117ac <recv_udp+0xf0>)
 80116ea:	f00e fbdb 	bl	801fea4 <iprintf>
  conn = (struct netconn *)arg;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d103      	bne.n	8011700 <recv_udp+0x44>
    pbuf_free(p);
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f003 fa57 	bl	8014bac <pbuf_free>
    return;
 80116fe:	e04d      	b.n	801179c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	429a      	cmp	r2, r3
 8011708:	d005      	beq.n	8011716 <recv_udp+0x5a>
 801170a:	4b26      	ldr	r3, [pc, #152]	@ (80117a4 <recv_udp+0xe8>)
 801170c:	22ee      	movs	r2, #238	@ 0xee
 801170e:	4929      	ldr	r1, [pc, #164]	@ (80117b4 <recv_udp+0xf8>)
 8011710:	4826      	ldr	r0, [pc, #152]	@ (80117ac <recv_udp+0xf0>)
 8011712:	f00e fbc7 	bl	801fea4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	3310      	adds	r3, #16
 801171a:	4618      	mov	r0, r3
 801171c:	f00d fb38 	bl	801ed90 <sys_mbox_valid>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d103      	bne.n	801172e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f003 fa40 	bl	8014bac <pbuf_free>
    return;
 801172c:	e036      	b.n	801179c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801172e:	2006      	movs	r0, #6
 8011730:	f002 fa2c 	bl	8013b8c <memp_malloc>
 8011734:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d103      	bne.n	8011744 <recv_udp+0x88>
    pbuf_free(p);
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f003 fa35 	bl	8014bac <pbuf_free>
    return;
 8011742:	e02b      	b.n	801179c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d002      	beq.n	801175c <recv_udp+0xa0>
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	e000      	b.n	801175e <recv_udp+0xa2>
 801175c:	2300      	movs	r3, #0
 801175e:	69ba      	ldr	r2, [r7, #24]
 8011760:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011762:	69bb      	ldr	r3, [r7, #24]
 8011764:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011766:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	891b      	ldrh	r3, [r3, #8]
 801176c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	3310      	adds	r3, #16
 8011772:	69b9      	ldr	r1, [r7, #24]
 8011774:	4618      	mov	r0, r3
 8011776:	f00d faa9 	bl	801eccc <sys_mbox_trypost>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d003      	beq.n	8011788 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011780:	69b8      	ldr	r0, [r7, #24]
 8011782:	f001 fb0d 	bl	8012da0 <netbuf_delete>
    return;
 8011786:	e009      	b.n	801179c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801178c:	2b00      	cmp	r3, #0
 801178e:	d005      	beq.n	801179c <recv_udp+0xe0>
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011794:	8afa      	ldrh	r2, [r7, #22]
 8011796:	2100      	movs	r1, #0
 8011798:	69f8      	ldr	r0, [r7, #28]
 801179a:	4798      	blx	r3
  }
}
 801179c:	3720      	adds	r7, #32
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	0802137c 	.word	0x0802137c
 80117a8:	080213f4 	.word	0x080213f4
 80117ac:	080213c0 	.word	0x080213c0
 80117b0:	08021418 	.word	0x08021418
 80117b4:	08021438 	.word	0x08021438

080117b8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b088      	sub	sp, #32
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	607a      	str	r2, [r7, #4]
 80117c4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d106      	bne.n	80117da <recv_tcp+0x22>
 80117cc:	4b36      	ldr	r3, [pc, #216]	@ (80118a8 <recv_tcp+0xf0>)
 80117ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80117d2:	4936      	ldr	r1, [pc, #216]	@ (80118ac <recv_tcp+0xf4>)
 80117d4:	4836      	ldr	r0, [pc, #216]	@ (80118b0 <recv_tcp+0xf8>)
 80117d6:	f00e fb65 	bl	801fea4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d106      	bne.n	80117ee <recv_tcp+0x36>
 80117e0:	4b31      	ldr	r3, [pc, #196]	@ (80118a8 <recv_tcp+0xf0>)
 80117e2:	f240 122d 	movw	r2, #301	@ 0x12d
 80117e6:	4933      	ldr	r1, [pc, #204]	@ (80118b4 <recv_tcp+0xfc>)
 80117e8:	4831      	ldr	r0, [pc, #196]	@ (80118b0 <recv_tcp+0xf8>)
 80117ea:	f00e fb5b 	bl	801fea4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80117ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d006      	beq.n	8011804 <recv_tcp+0x4c>
 80117f6:	4b2c      	ldr	r3, [pc, #176]	@ (80118a8 <recv_tcp+0xf0>)
 80117f8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80117fc:	492e      	ldr	r1, [pc, #184]	@ (80118b8 <recv_tcp+0x100>)
 80117fe:	482c      	ldr	r0, [pc, #176]	@ (80118b0 <recv_tcp+0xf8>)
 8011800:	f00e fb50 	bl	801fea4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d102      	bne.n	8011814 <recv_tcp+0x5c>
    return ERR_VAL;
 801180e:	f06f 0305 	mvn.w	r3, #5
 8011812:	e045      	b.n	80118a0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	429a      	cmp	r2, r3
 801181c:	d006      	beq.n	801182c <recv_tcp+0x74>
 801181e:	4b22      	ldr	r3, [pc, #136]	@ (80118a8 <recv_tcp+0xf0>)
 8011820:	f240 1235 	movw	r2, #309	@ 0x135
 8011824:	4925      	ldr	r1, [pc, #148]	@ (80118bc <recv_tcp+0x104>)
 8011826:	4822      	ldr	r0, [pc, #136]	@ (80118b0 <recv_tcp+0xf8>)
 8011828:	f00e fb3c 	bl	801fea4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	3310      	adds	r3, #16
 8011830:	4618      	mov	r0, r3
 8011832:	f00d faad 	bl	801ed90 <sys_mbox_valid>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d10d      	bne.n	8011858 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d008      	beq.n	8011854 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	891b      	ldrh	r3, [r3, #8]
 8011846:	4619      	mov	r1, r3
 8011848:	68b8      	ldr	r0, [r7, #8]
 801184a:	f004 f8ad 	bl	80159a8 <tcp_recved>
      pbuf_free(p);
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f003 f9ac 	bl	8014bac <pbuf_free>
    }
    return ERR_OK;
 8011854:	2300      	movs	r3, #0
 8011856:	e023      	b.n	80118a0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d005      	beq.n	801186a <recv_tcp+0xb2>
    msg = p;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	891b      	ldrh	r3, [r3, #8]
 8011866:	83fb      	strh	r3, [r7, #30]
 8011868:	e003      	b.n	8011872 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801186a:	4b15      	ldr	r3, [pc, #84]	@ (80118c0 <recv_tcp+0x108>)
 801186c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801186e:	2300      	movs	r3, #0
 8011870:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	3310      	adds	r3, #16
 8011876:	69b9      	ldr	r1, [r7, #24]
 8011878:	4618      	mov	r0, r3
 801187a:	f00d fa27 	bl	801eccc <sys_mbox_trypost>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011884:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011888:	e00a      	b.n	80118a0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801188e:	2b00      	cmp	r3, #0
 8011890:	d005      	beq.n	801189e <recv_tcp+0xe6>
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011896:	8bfa      	ldrh	r2, [r7, #30]
 8011898:	2100      	movs	r1, #0
 801189a:	6978      	ldr	r0, [r7, #20]
 801189c:	4798      	blx	r3
  }

  return ERR_OK;
 801189e:	2300      	movs	r3, #0
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3720      	adds	r7, #32
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	0802137c 	.word	0x0802137c
 80118ac:	08021458 	.word	0x08021458
 80118b0:	080213c0 	.word	0x080213c0
 80118b4:	0802147c 	.word	0x0802147c
 80118b8:	0802149c 	.word	0x0802149c
 80118bc:	080214b4 	.word	0x080214b4
 80118c0:	08025342 	.word	0x08025342

080118c4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d106      	bne.n	80118e6 <poll_tcp+0x22>
 80118d8:	4b29      	ldr	r3, [pc, #164]	@ (8011980 <poll_tcp+0xbc>)
 80118da:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80118de:	4929      	ldr	r1, [pc, #164]	@ (8011984 <poll_tcp+0xc0>)
 80118e0:	4829      	ldr	r0, [pc, #164]	@ (8011988 <poll_tcp+0xc4>)
 80118e2:	f00e fadf 	bl	801fea4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	785b      	ldrb	r3, [r3, #1]
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d104      	bne.n	80118f8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80118ee:	2101      	movs	r1, #1
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f000 ffc9 	bl	8012888 <lwip_netconn_do_writemore>
 80118f6:	e016      	b.n	8011926 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	785b      	ldrb	r3, [r3, #1]
 80118fc:	2b04      	cmp	r3, #4
 80118fe:	d112      	bne.n	8011926 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6a1b      	ldr	r3, [r3, #32]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00a      	beq.n	801191e <poll_tcp+0x5a>
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6a1b      	ldr	r3, [r3, #32]
 801190c:	7a5b      	ldrb	r3, [r3, #9]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d005      	beq.n	801191e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	6a1b      	ldr	r3, [r3, #32]
 8011916:	7a5a      	ldrb	r2, [r3, #9]
 8011918:	3a01      	subs	r2, #1
 801191a:	b2d2      	uxtb	r2, r2
 801191c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801191e:	2101      	movs	r1, #1
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f000 fb3b 	bl	8011f9c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	7f1b      	ldrb	r3, [r3, #28]
 801192a:	f003 0310 	and.w	r3, r3, #16
 801192e:	2b00      	cmp	r3, #0
 8011930:	d021      	beq.n	8011976 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d01d      	beq.n	8011976 <poll_tcp+0xb2>
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011942:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011946:	d316      	bcc.n	8011976 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011950:	2b04      	cmp	r3, #4
 8011952:	d810      	bhi.n	8011976 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	7f1b      	ldrb	r3, [r3, #28]
 8011958:	f023 0310 	bic.w	r3, r3, #16
 801195c:	b2da      	uxtb	r2, r3
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011966:	2b00      	cmp	r3, #0
 8011968:	d005      	beq.n	8011976 <poll_tcp+0xb2>
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801196e:	2200      	movs	r2, #0
 8011970:	2102      	movs	r1, #2
 8011972:	68f8      	ldr	r0, [r7, #12]
 8011974:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3710      	adds	r7, #16
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	0802137c 	.word	0x0802137c
 8011984:	080214d4 	.word	0x080214d4
 8011988:	080213c0 	.word	0x080213c0

0801198c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b086      	sub	sp, #24
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	4613      	mov	r3, r2
 8011998:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d106      	bne.n	80119b2 <sent_tcp+0x26>
 80119a4:	4b20      	ldr	r3, [pc, #128]	@ (8011a28 <sent_tcp+0x9c>)
 80119a6:	f240 1293 	movw	r2, #403	@ 0x193
 80119aa:	4920      	ldr	r1, [pc, #128]	@ (8011a2c <sent_tcp+0xa0>)
 80119ac:	4820      	ldr	r0, [pc, #128]	@ (8011a30 <sent_tcp+0xa4>)
 80119ae:	f00e fa79 	bl	801fea4 <iprintf>

  if (conn) {
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d032      	beq.n	8011a1e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	785b      	ldrb	r3, [r3, #1]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d104      	bne.n	80119ca <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80119c0:	2101      	movs	r1, #1
 80119c2:	6978      	ldr	r0, [r7, #20]
 80119c4:	f000 ff60 	bl	8012888 <lwip_netconn_do_writemore>
 80119c8:	e007      	b.n	80119da <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	785b      	ldrb	r3, [r3, #1]
 80119ce:	2b04      	cmp	r3, #4
 80119d0:	d103      	bne.n	80119da <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80119d2:	2101      	movs	r1, #1
 80119d4:	6978      	ldr	r0, [r7, #20]
 80119d6:	f000 fae1 	bl	8011f9c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d01d      	beq.n	8011a1e <sent_tcp+0x92>
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80119ea:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80119ee:	d316      	bcc.n	8011a1e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80119f8:	2b04      	cmp	r3, #4
 80119fa:	d810      	bhi.n	8011a1e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	7f1b      	ldrb	r3, [r3, #28]
 8011a00:	f023 0310 	bic.w	r3, r3, #16
 8011a04:	b2da      	uxtb	r2, r3
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d005      	beq.n	8011a1e <sent_tcp+0x92>
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a16:	88fa      	ldrh	r2, [r7, #6]
 8011a18:	2102      	movs	r1, #2
 8011a1a:	6978      	ldr	r0, [r7, #20]
 8011a1c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011a1e:	2300      	movs	r3, #0
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	0802137c 	.word	0x0802137c
 8011a2c:	080214d4 	.word	0x080214d4
 8011a30:	080213c0 	.word	0x080213c0

08011a34 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b088      	sub	sp, #32
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d106      	bne.n	8011a58 <err_tcp+0x24>
 8011a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8011bc8 <err_tcp+0x194>)
 8011a4c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011a50:	495e      	ldr	r1, [pc, #376]	@ (8011bcc <err_tcp+0x198>)
 8011a52:	485f      	ldr	r0, [pc, #380]	@ (8011bd0 <err_tcp+0x19c>)
 8011a54:	f00e fa26 	bl	801fea4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011a58:	f00d faa4 	bl	801efa4 <sys_arch_protect>
 8011a5c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	2200      	movs	r2, #0
 8011a62:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	78fa      	ldrb	r2, [r7, #3]
 8011a68:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011a6a:	69fb      	ldr	r3, [r7, #28]
 8011a6c:	7f1b      	ldrb	r3, [r3, #28]
 8011a6e:	f043 0301 	orr.w	r3, r3, #1
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	785b      	ldrb	r3, [r3, #1]
 8011a7c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011a7e:	69fb      	ldr	r3, [r7, #28]
 8011a80:	2200      	movs	r2, #0
 8011a82:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011a84:	69b8      	ldr	r0, [r7, #24]
 8011a86:	f00d fa9b 	bl	801efc0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d005      	beq.n	8011a9e <err_tcp+0x6a>
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a96:	2200      	movs	r2, #0
 8011a98:	2104      	movs	r1, #4
 8011a9a:	69f8      	ldr	r0, [r7, #28]
 8011a9c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d005      	beq.n	8011ab2 <err_tcp+0x7e>
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011aaa:	2200      	movs	r2, #0
 8011aac:	2100      	movs	r1, #0
 8011aae:	69f8      	ldr	r0, [r7, #28]
 8011ab0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d005      	beq.n	8011ac6 <err_tcp+0x92>
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011abe:	2200      	movs	r2, #0
 8011ac0:	2102      	movs	r1, #2
 8011ac2:	69f8      	ldr	r0, [r7, #28]
 8011ac4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7ff fd86 	bl	80115dc <lwip_netconn_err_to_msg>
 8011ad0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	3310      	adds	r3, #16
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f00d f95a 	bl	801ed90 <sys_mbox_valid>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d005      	beq.n	8011aee <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	3310      	adds	r3, #16
 8011ae6:	6939      	ldr	r1, [r7, #16]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f00d f8ef 	bl	801eccc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	3314      	adds	r3, #20
 8011af2:	4618      	mov	r0, r3
 8011af4:	f00d f94c 	bl	801ed90 <sys_mbox_valid>
 8011af8:	4603      	mov	r3, r0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d005      	beq.n	8011b0a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	3314      	adds	r3, #20
 8011b02:	6939      	ldr	r1, [r7, #16]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f00d f8e1 	bl	801eccc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d005      	beq.n	8011b1c <err_tcp+0xe8>
 8011b10:	7dfb      	ldrb	r3, [r7, #23]
 8011b12:	2b04      	cmp	r3, #4
 8011b14:	d002      	beq.n	8011b1c <err_tcp+0xe8>
 8011b16:	7dfb      	ldrb	r3, [r7, #23]
 8011b18:	2b03      	cmp	r3, #3
 8011b1a:	d143      	bne.n	8011ba4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	7f1b      	ldrb	r3, [r3, #28]
 8011b20:	f003 0304 	and.w	r3, r3, #4
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	bf14      	ite	ne
 8011b28:	2301      	movne	r3, #1
 8011b2a:	2300      	moveq	r3, #0
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	7f1b      	ldrb	r3, [r3, #28]
 8011b34:	f023 0304 	bic.w	r3, r3, #4
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d13b      	bne.n	8011bbc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	6a1b      	ldr	r3, [r3, #32]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d106      	bne.n	8011b5a <err_tcp+0x126>
 8011b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8011bc8 <err_tcp+0x194>)
 8011b4e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011b52:	4920      	ldr	r1, [pc, #128]	@ (8011bd4 <err_tcp+0x1a0>)
 8011b54:	481e      	ldr	r0, [pc, #120]	@ (8011bd0 <err_tcp+0x19c>)
 8011b56:	f00e f9a5 	bl	801fea4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011b5a:	7dfb      	ldrb	r3, [r7, #23]
 8011b5c:	2b04      	cmp	r3, #4
 8011b5e:	d104      	bne.n	8011b6a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011b60:	69fb      	ldr	r3, [r7, #28]
 8011b62:	6a1b      	ldr	r3, [r3, #32]
 8011b64:	2200      	movs	r2, #0
 8011b66:	711a      	strb	r2, [r3, #4]
 8011b68:	e003      	b.n	8011b72 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	6a1b      	ldr	r3, [r3, #32]
 8011b6e:	78fa      	ldrb	r2, [r7, #3]
 8011b70:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	6a1b      	ldr	r3, [r3, #32]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	330c      	adds	r3, #12
 8011b7a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011b7c:	68b8      	ldr	r0, [r7, #8]
 8011b7e:	f00d f995 	bl	801eeac <sys_sem_valid>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d106      	bne.n	8011b96 <err_tcp+0x162>
 8011b88:	4b0f      	ldr	r3, [pc, #60]	@ (8011bc8 <err_tcp+0x194>)
 8011b8a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8011b8e:	4912      	ldr	r1, [pc, #72]	@ (8011bd8 <err_tcp+0x1a4>)
 8011b90:	480f      	ldr	r0, [pc, #60]	@ (8011bd0 <err_tcp+0x19c>)
 8011b92:	f00e f987 	bl	801fea4 <iprintf>
      conn->current_msg = NULL;
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011b9c:	68b8      	ldr	r0, [r7, #8]
 8011b9e:	f00d f96b 	bl	801ee78 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011ba2:	e00b      	b.n	8011bbc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	6a1b      	ldr	r3, [r3, #32]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d008      	beq.n	8011bbe <err_tcp+0x18a>
 8011bac:	4b06      	ldr	r3, [pc, #24]	@ (8011bc8 <err_tcp+0x194>)
 8011bae:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8011bb2:	490a      	ldr	r1, [pc, #40]	@ (8011bdc <err_tcp+0x1a8>)
 8011bb4:	4806      	ldr	r0, [pc, #24]	@ (8011bd0 <err_tcp+0x19c>)
 8011bb6:	f00e f975 	bl	801fea4 <iprintf>
  }
}
 8011bba:	e000      	b.n	8011bbe <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011bbc:	bf00      	nop
}
 8011bbe:	bf00      	nop
 8011bc0:	3720      	adds	r7, #32
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	0802137c 	.word	0x0802137c
 8011bcc:	080214d4 	.word	0x080214d4
 8011bd0:	080213c0 	.word	0x080213c0
 8011bd4:	080214e4 	.word	0x080214e4
 8011bd8:	08021500 	.word	0x08021500
 8011bdc:	0802151c 	.word	0x0802151c

08011be0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b084      	sub	sp, #16
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011bee:	6879      	ldr	r1, [r7, #4]
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f004 feb9 	bl	8016968 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011bf6:	490a      	ldr	r1, [pc, #40]	@ (8011c20 <setup_tcp+0x40>)
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f004 fec7 	bl	801698c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011bfe:	4909      	ldr	r1, [pc, #36]	@ (8011c24 <setup_tcp+0x44>)
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f004 fee5 	bl	80169d0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011c06:	2202      	movs	r2, #2
 8011c08:	4907      	ldr	r1, [pc, #28]	@ (8011c28 <setup_tcp+0x48>)
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	f004 ff3c 	bl	8016a88 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011c10:	4906      	ldr	r1, [pc, #24]	@ (8011c2c <setup_tcp+0x4c>)
 8011c12:	68f8      	ldr	r0, [r7, #12]
 8011c14:	f004 fefe 	bl	8016a14 <tcp_err>
}
 8011c18:	bf00      	nop
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	080117b9 	.word	0x080117b9
 8011c24:	0801198d 	.word	0x0801198d
 8011c28:	080118c5 	.word	0x080118c5
 8011c2c:	08011a35 	.word	0x08011a35

08011c30 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011c30:	b590      	push	{r4, r7, lr}
 8011c32:	b085      	sub	sp, #20
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d006      	beq.n	8011c54 <pcb_new+0x24>
 8011c46:	4b2b      	ldr	r3, [pc, #172]	@ (8011cf4 <pcb_new+0xc4>)
 8011c48:	f240 2265 	movw	r2, #613	@ 0x265
 8011c4c:	492a      	ldr	r1, [pc, #168]	@ (8011cf8 <pcb_new+0xc8>)
 8011c4e:	482b      	ldr	r0, [pc, #172]	@ (8011cfc <pcb_new+0xcc>)
 8011c50:	f00e f928 	bl	801fea4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011c5e:	2b10      	cmp	r3, #16
 8011c60:	d022      	beq.n	8011ca8 <pcb_new+0x78>
 8011c62:	2b20      	cmp	r3, #32
 8011c64:	d133      	bne.n	8011cce <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681c      	ldr	r4, [r3, #0]
 8011c6a:	7bfb      	ldrb	r3, [r7, #15]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f00a fbfa 	bl	801c466 <udp_new_ip_type>
 8011c72:	4603      	mov	r3, r0
 8011c74:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d02a      	beq.n	8011cd6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	2b22      	cmp	r3, #34	@ 0x22
 8011c88:	d104      	bne.n	8011c94 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	2201      	movs	r2, #1
 8011c92:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	6858      	ldr	r0, [r3, #4]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	4917      	ldr	r1, [pc, #92]	@ (8011d00 <pcb_new+0xd0>)
 8011ca2:	f00a fb67 	bl	801c374 <udp_recv>
      }
      break;
 8011ca6:	e016      	b.n	8011cd6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681c      	ldr	r4, [r3, #0]
 8011cac:	7bfb      	ldrb	r3, [r7, #15]
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f004 fe4c 	bl	801694c <tcp_new_ip_type>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00b      	beq.n	8011cda <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7ff ff8a 	bl	8011be0 <setup_tcp>
      }
      break;
 8011ccc:	e005      	b.n	8011cda <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	22fa      	movs	r2, #250	@ 0xfa
 8011cd2:	711a      	strb	r2, [r3, #4]
      return;
 8011cd4:	e00a      	b.n	8011cec <pcb_new+0xbc>
      break;
 8011cd6:	bf00      	nop
 8011cd8:	e000      	b.n	8011cdc <pcb_new+0xac>
      break;
 8011cda:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d102      	bne.n	8011cec <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	22ff      	movs	r2, #255	@ 0xff
 8011cea:	711a      	strb	r2, [r3, #4]
  }
}
 8011cec:	3714      	adds	r7, #20
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd90      	pop	{r4, r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	0802137c 	.word	0x0802137c
 8011cf8:	08021560 	.word	0x08021560
 8011cfc:	080213c0 	.word	0x080213c0
 8011d00:	080116bd 	.word	0x080116bd

08011d04 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2200      	movs	r2, #0
 8011d14:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d102      	bne.n	8011d26 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f7ff ff85 	bl	8011c30 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011d26:	bf00      	nop
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b086      	sub	sp, #24
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	4603      	mov	r3, r0
 8011d38:	6039      	str	r1, [r7, #0]
 8011d3a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011d40:	2007      	movs	r0, #7
 8011d42:	f001 ff23 	bl	8013b8c <memp_malloc>
 8011d46:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d101      	bne.n	8011d52 <netconn_alloc+0x22>
    return NULL;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	e052      	b.n	8011df8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2200      	movs	r2, #0
 8011d56:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	79fa      	ldrb	r2, [r7, #7]
 8011d5c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2200      	movs	r2, #0
 8011d62:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011d64:	79fb      	ldrb	r3, [r7, #7]
 8011d66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011d6a:	2b10      	cmp	r3, #16
 8011d6c:	d004      	beq.n	8011d78 <netconn_alloc+0x48>
 8011d6e:	2b20      	cmp	r3, #32
 8011d70:	d105      	bne.n	8011d7e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011d72:	2306      	movs	r3, #6
 8011d74:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011d76:	e00a      	b.n	8011d8e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011d78:	2306      	movs	r3, #6
 8011d7a:	617b      	str	r3, [r7, #20]
      break;
 8011d7c:	e007      	b.n	8011d8e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011d7e:	4b20      	ldr	r3, [pc, #128]	@ (8011e00 <netconn_alloc+0xd0>)
 8011d80:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8011d84:	491f      	ldr	r1, [pc, #124]	@ (8011e04 <netconn_alloc+0xd4>)
 8011d86:	4820      	ldr	r0, [pc, #128]	@ (8011e08 <netconn_alloc+0xd8>)
 8011d88:	f00e f88c 	bl	801fea4 <iprintf>
      goto free_and_return;
 8011d8c:	e02f      	b.n	8011dee <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	3310      	adds	r3, #16
 8011d92:	6979      	ldr	r1, [r7, #20]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f00c ff6d 	bl	801ec74 <sys_mbox_new>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d125      	bne.n	8011dec <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	330c      	adds	r3, #12
 8011da4:	2100      	movs	r1, #0
 8011da6:	4618      	mov	r0, r3
 8011da8:	f00d f810 	bl	801edcc <sys_sem_new>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d005      	beq.n	8011dbe <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	3310      	adds	r3, #16
 8011db6:	4618      	mov	r0, r3
 8011db8:	f00c ff76 	bl	801eca8 <sys_mbox_free>
    goto free_and_return;
 8011dbc:	e017      	b.n	8011dee <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	3314      	adds	r3, #20
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f00c fff5 	bl	801edb2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011dd4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	683a      	ldr	r2, [r7, #0]
 8011dda:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	2200      	movs	r2, #0
 8011de0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	7cfa      	ldrb	r2, [r7, #19]
 8011de6:	771a      	strb	r2, [r3, #28]
  return conn;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	e005      	b.n	8011df8 <netconn_alloc+0xc8>
    goto free_and_return;
 8011dec:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011dee:	68f9      	ldr	r1, [r7, #12]
 8011df0:	2007      	movs	r0, #7
 8011df2:	f001 ff41 	bl	8013c78 <memp_free>
  return NULL;
 8011df6:	2300      	movs	r3, #0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3718      	adds	r7, #24
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	0802137c 	.word	0x0802137c
 8011e04:	08021580 	.word	0x08021580
 8011e08:	080213c0 	.word	0x080213c0

08011e0c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d006      	beq.n	8011e2a <netconn_free+0x1e>
 8011e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8011e8c <netconn_free+0x80>)
 8011e1e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011e22:	491b      	ldr	r1, [pc, #108]	@ (8011e90 <netconn_free+0x84>)
 8011e24:	481b      	ldr	r0, [pc, #108]	@ (8011e94 <netconn_free+0x88>)
 8011e26:	f00e f83d 	bl	801fea4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	3310      	adds	r3, #16
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f00c ffae 	bl	801ed90 <sys_mbox_valid>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d006      	beq.n	8011e48 <netconn_free+0x3c>
 8011e3a:	4b14      	ldr	r3, [pc, #80]	@ (8011e8c <netconn_free+0x80>)
 8011e3c:	f240 3223 	movw	r2, #803	@ 0x323
 8011e40:	4915      	ldr	r1, [pc, #84]	@ (8011e98 <netconn_free+0x8c>)
 8011e42:	4814      	ldr	r0, [pc, #80]	@ (8011e94 <netconn_free+0x88>)
 8011e44:	f00e f82e 	bl	801fea4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	3314      	adds	r3, #20
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f00c ff9f 	bl	801ed90 <sys_mbox_valid>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d006      	beq.n	8011e66 <netconn_free+0x5a>
 8011e58:	4b0c      	ldr	r3, [pc, #48]	@ (8011e8c <netconn_free+0x80>)
 8011e5a:	f240 3226 	movw	r2, #806	@ 0x326
 8011e5e:	490f      	ldr	r1, [pc, #60]	@ (8011e9c <netconn_free+0x90>)
 8011e60:	480c      	ldr	r0, [pc, #48]	@ (8011e94 <netconn_free+0x88>)
 8011e62:	f00e f81f 	bl	801fea4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	330c      	adds	r3, #12
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f00d f811 	bl	801ee92 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	330c      	adds	r3, #12
 8011e74:	4618      	mov	r0, r3
 8011e76:	f00d f82a 	bl	801eece <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011e7a:	6879      	ldr	r1, [r7, #4]
 8011e7c:	2007      	movs	r0, #7
 8011e7e:	f001 fefb 	bl	8013c78 <memp_free>
}
 8011e82:	bf00      	nop
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	0802137c 	.word	0x0802137c
 8011e90:	080215a8 	.word	0x080215a8
 8011e94:	080213c0 	.word	0x080213c0
 8011e98:	080215d8 	.word	0x080215d8
 8011e9c:	08021614 	.word	0x08021614

08011ea0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b086      	sub	sp, #24
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3310      	adds	r3, #16
 8011eac:	4618      	mov	r0, r3
 8011eae:	f00c ff6f 	bl	801ed90 <sys_mbox_valid>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d02f      	beq.n	8011f18 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011eb8:	e018      	b.n	8011eec <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011ec2:	2b10      	cmp	r3, #16
 8011ec4:	d10e      	bne.n	8011ee4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	f107 020f 	add.w	r2, r7, #15
 8011ecc:	4611      	mov	r1, r2
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7ff fbba 	bl	8011648 <lwip_netconn_is_err_msg>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d108      	bne.n	8011eec <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f002 fe65 	bl	8014bac <pbuf_free>
 8011ee2:	e003      	b.n	8011eec <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f000 ff5a 	bl	8012da0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3310      	adds	r3, #16
 8011ef0:	f107 0210 	add.w	r2, r7, #16
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f00c ff33 	bl	801ed62 <sys_arch_mbox_tryfetch>
 8011efc:	4603      	mov	r3, r0
 8011efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f02:	d1da      	bne.n	8011eba <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	3310      	adds	r3, #16
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f00c fecd 	bl	801eca8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	3310      	adds	r3, #16
 8011f12:	4618      	mov	r0, r3
 8011f14:	f00c ff4d 	bl	801edb2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	3314      	adds	r3, #20
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f00c ff37 	bl	801ed90 <sys_mbox_valid>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d034      	beq.n	8011f92 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011f28:	e01d      	b.n	8011f66 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	f107 020e 	add.w	r2, r7, #14
 8011f30:	4611      	mov	r1, r2
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7ff fb88 	bl	8011648 <lwip_netconn_is_err_msg>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d113      	bne.n	8011f66 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011f42:	6978      	ldr	r0, [r7, #20]
 8011f44:	f7ff ffac 	bl	8011ea0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d007      	beq.n	8011f60 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	f003 fc29 	bl	80157ac <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011f60:	6978      	ldr	r0, [r7, #20]
 8011f62:	f7ff ff53 	bl	8011e0c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3314      	adds	r3, #20
 8011f6a:	f107 0210 	add.w	r2, r7, #16
 8011f6e:	4611      	mov	r1, r2
 8011f70:	4618      	mov	r0, r3
 8011f72:	f00c fef6 	bl	801ed62 <sys_arch_mbox_tryfetch>
 8011f76:	4603      	mov	r3, r0
 8011f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f7c:	d1d5      	bne.n	8011f2a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	3314      	adds	r3, #20
 8011f82:	4618      	mov	r0, r3
 8011f84:	f00c fe90 	bl	801eca8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	3314      	adds	r3, #20
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f00c ff10 	bl	801edb2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011f92:	bf00      	nop
 8011f94:	3718      	adds	r7, #24
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
	...

08011f9c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d106      	bne.n	8011fc0 <lwip_netconn_do_close_internal+0x24>
 8011fb2:	4b87      	ldr	r3, [pc, #540]	@ (80121d0 <lwip_netconn_do_close_internal+0x234>)
 8011fb4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011fb8:	4986      	ldr	r1, [pc, #536]	@ (80121d4 <lwip_netconn_do_close_internal+0x238>)
 8011fba:	4887      	ldr	r0, [pc, #540]	@ (80121d8 <lwip_netconn_do_close_internal+0x23c>)
 8011fbc:	f00d ff72 	bl	801fea4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011fc8:	2b10      	cmp	r3, #16
 8011fca:	d006      	beq.n	8011fda <lwip_netconn_do_close_internal+0x3e>
 8011fcc:	4b80      	ldr	r3, [pc, #512]	@ (80121d0 <lwip_netconn_do_close_internal+0x234>)
 8011fce:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8011fd2:	4982      	ldr	r1, [pc, #520]	@ (80121dc <lwip_netconn_do_close_internal+0x240>)
 8011fd4:	4880      	ldr	r0, [pc, #512]	@ (80121d8 <lwip_netconn_do_close_internal+0x23c>)
 8011fd6:	f00d ff65 	bl	801fea4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	785b      	ldrb	r3, [r3, #1]
 8011fde:	2b04      	cmp	r3, #4
 8011fe0:	d006      	beq.n	8011ff0 <lwip_netconn_do_close_internal+0x54>
 8011fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80121d0 <lwip_netconn_do_close_internal+0x234>)
 8011fe4:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011fe8:	497d      	ldr	r1, [pc, #500]	@ (80121e0 <lwip_netconn_do_close_internal+0x244>)
 8011fea:	487b      	ldr	r0, [pc, #492]	@ (80121d8 <lwip_netconn_do_close_internal+0x23c>)
 8011fec:	f00d ff5a 	bl	801fea4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d106      	bne.n	8012006 <lwip_netconn_do_close_internal+0x6a>
 8011ff8:	4b75      	ldr	r3, [pc, #468]	@ (80121d0 <lwip_netconn_do_close_internal+0x234>)
 8011ffa:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8011ffe:	4979      	ldr	r1, [pc, #484]	@ (80121e4 <lwip_netconn_do_close_internal+0x248>)
 8012000:	4875      	ldr	r0, [pc, #468]	@ (80121d8 <lwip_netconn_do_close_internal+0x23c>)
 8012002:	f00d ff4f 	bl	801fea4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6a1b      	ldr	r3, [r3, #32]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d106      	bne.n	801201c <lwip_netconn_do_close_internal+0x80>
 801200e:	4b70      	ldr	r3, [pc, #448]	@ (80121d0 <lwip_netconn_do_close_internal+0x234>)
 8012010:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012014:	4974      	ldr	r1, [pc, #464]	@ (80121e8 <lwip_netconn_do_close_internal+0x24c>)
 8012016:	4870      	ldr	r0, [pc, #448]	@ (80121d8 <lwip_netconn_do_close_internal+0x23c>)
 8012018:	f00d ff44 	bl	801fea4 <iprintf>

  tpcb = conn->pcb.tcp;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6a1b      	ldr	r3, [r3, #32]
 8012026:	7a1b      	ldrb	r3, [r3, #8]
 8012028:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801202a:	7bfb      	ldrb	r3, [r7, #15]
 801202c:	f003 0301 	and.w	r3, r3, #1
 8012030:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8012032:	7bfb      	ldrb	r3, [r7, #15]
 8012034:	f003 0302 	and.w	r3, r3, #2
 8012038:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801203a:	7bfb      	ldrb	r3, [r7, #15]
 801203c:	2b03      	cmp	r3, #3
 801203e:	d102      	bne.n	8012046 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8012040:	2301      	movs	r3, #1
 8012042:	75bb      	strb	r3, [r7, #22]
 8012044:	e01f      	b.n	8012086 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012046:	7bbb      	ldrb	r3, [r7, #14]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00e      	beq.n	801206a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8012050:	2b05      	cmp	r3, #5
 8012052:	d007      	beq.n	8012064 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012058:	2b06      	cmp	r3, #6
 801205a:	d003      	beq.n	8012064 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8012060:	2b08      	cmp	r3, #8
 8012062:	d102      	bne.n	801206a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012064:	2301      	movs	r3, #1
 8012066:	75bb      	strb	r3, [r7, #22]
 8012068:	e00d      	b.n	8012086 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801206a:	7b7b      	ldrb	r3, [r7, #13]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d008      	beq.n	8012082 <lwip_netconn_do_close_internal+0xe6>
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	8b5b      	ldrh	r3, [r3, #26]
 8012074:	f003 0310 	and.w	r3, r3, #16
 8012078:	2b00      	cmp	r3, #0
 801207a:	d002      	beq.n	8012082 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801207c:	2301      	movs	r3, #1
 801207e:	75bb      	strb	r3, [r7, #22]
 8012080:	e001      	b.n	8012086 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8012082:	2300      	movs	r3, #0
 8012084:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012086:	7dbb      	ldrb	r3, [r7, #22]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d003      	beq.n	8012094 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801208c:	2100      	movs	r1, #0
 801208e:	6938      	ldr	r0, [r7, #16]
 8012090:	f004 fc6a 	bl	8016968 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	7d1b      	ldrb	r3, [r3, #20]
 8012098:	2b01      	cmp	r3, #1
 801209a:	d104      	bne.n	80120a6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801209c:	2100      	movs	r1, #0
 801209e:	6938      	ldr	r0, [r7, #16]
 80120a0:	f004 fcda 	bl	8016a58 <tcp_accept>
 80120a4:	e01d      	b.n	80120e2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80120a6:	7bbb      	ldrb	r3, [r7, #14]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d007      	beq.n	80120bc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80120ac:	2100      	movs	r1, #0
 80120ae:	6938      	ldr	r0, [r7, #16]
 80120b0:	f004 fc6c 	bl	801698c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80120b4:	2100      	movs	r1, #0
 80120b6:	6938      	ldr	r0, [r7, #16]
 80120b8:	f004 fcce 	bl	8016a58 <tcp_accept>
    }
    if (shut_tx) {
 80120bc:	7b7b      	ldrb	r3, [r7, #13]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d003      	beq.n	80120ca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80120c2:	2100      	movs	r1, #0
 80120c4:	6938      	ldr	r0, [r7, #16]
 80120c6:	f004 fc83 	bl	80169d0 <tcp_sent>
    }
    if (shut_close) {
 80120ca:	7dbb      	ldrb	r3, [r7, #22]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d008      	beq.n	80120e2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80120d0:	2200      	movs	r2, #0
 80120d2:	2100      	movs	r1, #0
 80120d4:	6938      	ldr	r0, [r7, #16]
 80120d6:	f004 fcd7 	bl	8016a88 <tcp_poll>
      tcp_err(tpcb, NULL);
 80120da:	2100      	movs	r1, #0
 80120dc:	6938      	ldr	r0, [r7, #16]
 80120de:	f004 fc99 	bl	8016a14 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80120e2:	7dbb      	ldrb	r3, [r7, #22]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d005      	beq.n	80120f4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80120e8:	6938      	ldr	r0, [r7, #16]
 80120ea:	f003 fa19 	bl	8015520 <tcp_close>
 80120ee:	4603      	mov	r3, r0
 80120f0:	75fb      	strb	r3, [r7, #23]
 80120f2:	e007      	b.n	8012104 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80120f4:	7bbb      	ldrb	r3, [r7, #14]
 80120f6:	7b7a      	ldrb	r2, [r7, #13]
 80120f8:	4619      	mov	r1, r3
 80120fa:	6938      	ldr	r0, [r7, #16]
 80120fc:	f003 fa3c 	bl	8015578 <tcp_shutdown>
 8012100:	4603      	mov	r3, r0
 8012102:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012104:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d102      	bne.n	8012112 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801210c:	2301      	movs	r3, #1
 801210e:	757b      	strb	r3, [r7, #21]
 8012110:	e016      	b.n	8012140 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8012112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801211a:	d10f      	bne.n	801213c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6a1b      	ldr	r3, [r3, #32]
 8012120:	7a5b      	ldrb	r3, [r3, #9]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d10c      	bne.n	8012140 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012126:	2301      	movs	r3, #1
 8012128:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801212a:	7dbb      	ldrb	r3, [r7, #22]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d007      	beq.n	8012140 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8012130:	6938      	ldr	r0, [r7, #16]
 8012132:	f003 fb3b 	bl	80157ac <tcp_abort>
          err = ERR_OK;
 8012136:	2300      	movs	r3, #0
 8012138:	75fb      	strb	r3, [r7, #23]
 801213a:	e001      	b.n	8012140 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801213c:	2301      	movs	r3, #1
 801213e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8012140:	7d7b      	ldrb	r3, [r7, #21]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d052      	beq.n	80121ec <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6a1b      	ldr	r3, [r3, #32]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	330c      	adds	r3, #12
 801214e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6a1b      	ldr	r3, [r3, #32]
 8012154:	7dfa      	ldrb	r2, [r7, #23]
 8012156:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d129      	bne.n	80121c0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801216c:	7dbb      	ldrb	r3, [r7, #22]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00c      	beq.n	801218c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801217c:	2b00      	cmp	r3, #0
 801217e:	d005      	beq.n	801218c <lwip_netconn_do_close_internal+0x1f0>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012184:	2200      	movs	r2, #0
 8012186:	2104      	movs	r1, #4
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	4798      	blx	r3
      }
      if (shut_rx) {
 801218c:	7bbb      	ldrb	r3, [r7, #14]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d009      	beq.n	80121a6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012196:	2b00      	cmp	r3, #0
 8012198:	d005      	beq.n	80121a6 <lwip_netconn_do_close_internal+0x20a>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801219e:	2200      	movs	r2, #0
 80121a0:	2100      	movs	r1, #0
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	4798      	blx	r3
      }
      if (shut_tx) {
 80121a6:	7b7b      	ldrb	r3, [r7, #13]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d009      	beq.n	80121c0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d005      	beq.n	80121c0 <lwip_netconn_do_close_internal+0x224>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b8:	2200      	movs	r2, #0
 80121ba:	2102      	movs	r1, #2
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80121c0:	78fb      	ldrb	r3, [r7, #3]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d002      	beq.n	80121cc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80121c6:	68b8      	ldr	r0, [r7, #8]
 80121c8:	f00c fe56 	bl	801ee78 <sys_sem_signal>
    }
    return ERR_OK;
 80121cc:	2300      	movs	r3, #0
 80121ce:	e03c      	b.n	801224a <lwip_netconn_do_close_internal+0x2ae>
 80121d0:	0802137c 	.word	0x0802137c
 80121d4:	08021650 	.word	0x08021650
 80121d8:	080213c0 	.word	0x080213c0
 80121dc:	08021660 	.word	0x08021660
 80121e0:	08021680 	.word	0x08021680
 80121e4:	080216a4 	.word	0x080216a4
 80121e8:	080214e4 	.word	0x080214e4
  }
  if (!close_finished) {
 80121ec:	7d7b      	ldrb	r3, [r7, #21]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d11e      	bne.n	8012230 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	7d1b      	ldrb	r3, [r3, #20]
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d106      	bne.n	8012208 <lwip_netconn_do_close_internal+0x26c>
 80121fa:	4b16      	ldr	r3, [pc, #88]	@ (8012254 <lwip_netconn_do_close_internal+0x2b8>)
 80121fc:	f240 4241 	movw	r2, #1089	@ 0x441
 8012200:	4915      	ldr	r1, [pc, #84]	@ (8012258 <lwip_netconn_do_close_internal+0x2bc>)
 8012202:	4816      	ldr	r0, [pc, #88]	@ (801225c <lwip_netconn_do_close_internal+0x2c0>)
 8012204:	f00d fe4e 	bl	801fea4 <iprintf>
    if (shut_tx) {
 8012208:	7b7b      	ldrb	r3, [r7, #13]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d003      	beq.n	8012216 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801220e:	4914      	ldr	r1, [pc, #80]	@ (8012260 <lwip_netconn_do_close_internal+0x2c4>)
 8012210:	6938      	ldr	r0, [r7, #16]
 8012212:	f004 fbdd 	bl	80169d0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012216:	2201      	movs	r2, #1
 8012218:	4912      	ldr	r1, [pc, #72]	@ (8012264 <lwip_netconn_do_close_internal+0x2c8>)
 801221a:	6938      	ldr	r0, [r7, #16]
 801221c:	f004 fc34 	bl	8016a88 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8012220:	4911      	ldr	r1, [pc, #68]	@ (8012268 <lwip_netconn_do_close_internal+0x2cc>)
 8012222:	6938      	ldr	r0, [r7, #16]
 8012224:	f004 fbf6 	bl	8016a14 <tcp_err>
    tcp_arg(tpcb, conn);
 8012228:	6879      	ldr	r1, [r7, #4]
 801222a:	6938      	ldr	r0, [r7, #16]
 801222c:	f004 fb9c 	bl	8016968 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012230:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d106      	bne.n	8012246 <lwip_netconn_do_close_internal+0x2aa>
 8012238:	4b06      	ldr	r3, [pc, #24]	@ (8012254 <lwip_netconn_do_close_internal+0x2b8>)
 801223a:	f240 424d 	movw	r2, #1101	@ 0x44d
 801223e:	490b      	ldr	r1, [pc, #44]	@ (801226c <lwip_netconn_do_close_internal+0x2d0>)
 8012240:	4806      	ldr	r0, [pc, #24]	@ (801225c <lwip_netconn_do_close_internal+0x2c0>)
 8012242:	f00d fe2f 	bl	801fea4 <iprintf>
  return err;
 8012246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801224a:	4618      	mov	r0, r3
 801224c:	3718      	adds	r7, #24
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	0802137c 	.word	0x0802137c
 8012258:	080216b8 	.word	0x080216b8
 801225c:	080213c0 	.word	0x080213c0
 8012260:	0801198d 	.word	0x0801198d
 8012264:	080118c5 	.word	0x080118c5
 8012268:	08011a35 	.word	0x08011a35
 801226c:	080216dc 	.word	0x080216dc

08012270 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	785b      	ldrb	r3, [r3, #1]
 8012282:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012284:	7afb      	ldrb	r3, [r7, #11]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00d      	beq.n	80122a6 <lwip_netconn_do_delconn+0x36>
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012294:	2b10      	cmp	r3, #16
 8012296:	d006      	beq.n	80122a6 <lwip_netconn_do_delconn+0x36>
 8012298:	4b60      	ldr	r3, [pc, #384]	@ (801241c <lwip_netconn_do_delconn+0x1ac>)
 801229a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801229e:	4960      	ldr	r1, [pc, #384]	@ (8012420 <lwip_netconn_do_delconn+0x1b0>)
 80122a0:	4860      	ldr	r0, [pc, #384]	@ (8012424 <lwip_netconn_do_delconn+0x1b4>)
 80122a2:	f00d fdff 	bl	801fea4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80122a6:	7afb      	ldrb	r3, [r7, #11]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d005      	beq.n	80122b8 <lwip_netconn_do_delconn+0x48>
 80122ac:	7afb      	ldrb	r3, [r7, #11]
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	d002      	beq.n	80122b8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80122b2:	7afb      	ldrb	r3, [r7, #11]
 80122b4:	2b03      	cmp	r3, #3
 80122b6:	d109      	bne.n	80122cc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80122b8:	7afb      	ldrb	r3, [r7, #11]
 80122ba:	2b03      	cmp	r3, #3
 80122bc:	d10a      	bne.n	80122d4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	7f1b      	ldrb	r3, [r3, #28]
 80122c4:	f003 0304 	and.w	r3, r3, #4
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d103      	bne.n	80122d4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	22fb      	movs	r2, #251	@ 0xfb
 80122d0:	711a      	strb	r2, [r3, #4]
 80122d2:	e097      	b.n	8012404 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80122d4:	7afb      	ldrb	r3, [r7, #11]
 80122d6:	2b03      	cmp	r3, #3
 80122d8:	d10d      	bne.n	80122f6 <lwip_netconn_do_delconn+0x86>
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	7f1b      	ldrb	r3, [r3, #28]
 80122e0:	f003 0304 	and.w	r3, r3, #4
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d106      	bne.n	80122f6 <lwip_netconn_do_delconn+0x86>
 80122e8:	4b4c      	ldr	r3, [pc, #304]	@ (801241c <lwip_netconn_do_delconn+0x1ac>)
 80122ea:	f240 427a 	movw	r2, #1146	@ 0x47a
 80122ee:	494e      	ldr	r1, [pc, #312]	@ (8012428 <lwip_netconn_do_delconn+0x1b8>)
 80122f0:	484c      	ldr	r0, [pc, #304]	@ (8012424 <lwip_netconn_do_delconn+0x1b4>)
 80122f2:	f00d fdd7 	bl	801fea4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2200      	movs	r2, #0
 80122fa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4618      	mov	r0, r3
 8012302:	f7ff fdcd 	bl	8011ea0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d05f      	beq.n	80123d0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801231a:	2b10      	cmp	r3, #16
 801231c:	d00d      	beq.n	801233a <lwip_netconn_do_delconn+0xca>
 801231e:	2b20      	cmp	r3, #32
 8012320:	d151      	bne.n	80123c6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	2200      	movs	r2, #0
 801232a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	4618      	mov	r0, r3
 8012334:	f00a f83e 	bl	801c3b4 <udp_remove>
          break;
 8012338:	e046      	b.n	80123c8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	6a1b      	ldr	r3, [r3, #32]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d006      	beq.n	8012352 <lwip_netconn_do_delconn+0xe2>
 8012344:	4b35      	ldr	r3, [pc, #212]	@ (801241c <lwip_netconn_do_delconn+0x1ac>)
 8012346:	f240 4294 	movw	r2, #1172	@ 0x494
 801234a:	4938      	ldr	r1, [pc, #224]	@ (801242c <lwip_netconn_do_delconn+0x1bc>)
 801234c:	4835      	ldr	r0, [pc, #212]	@ (8012424 <lwip_netconn_do_delconn+0x1b4>)
 801234e:	f00d fda9 	bl	801fea4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2204      	movs	r2, #4
 8012358:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2203      	movs	r2, #3
 801235e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	68fa      	ldr	r2, [r7, #12]
 8012366:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2100      	movs	r1, #0
 801236e:	4618      	mov	r0, r3
 8012370:	f7ff fe14 	bl	8011f9c <lwip_netconn_do_close_internal>
 8012374:	4603      	mov	r3, r0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d04b      	beq.n	8012412 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	785b      	ldrb	r3, [r3, #1]
 8012380:	2b04      	cmp	r3, #4
 8012382:	d006      	beq.n	8012392 <lwip_netconn_do_delconn+0x122>
 8012384:	4b25      	ldr	r3, [pc, #148]	@ (801241c <lwip_netconn_do_delconn+0x1ac>)
 8012386:	f240 429a 	movw	r2, #1178	@ 0x49a
 801238a:	4929      	ldr	r1, [pc, #164]	@ (8012430 <lwip_netconn_do_delconn+0x1c0>)
 801238c:	4825      	ldr	r0, [pc, #148]	@ (8012424 <lwip_netconn_do_delconn+0x1b4>)
 801238e:	f00d fd89 	bl	801fea4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8012392:	4828      	ldr	r0, [pc, #160]	@ (8012434 <lwip_netconn_do_delconn+0x1c4>)
 8012394:	f00c fdd9 	bl	801ef4a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	330c      	adds	r3, #12
 801239e:	2100      	movs	r1, #0
 80123a0:	4618      	mov	r0, r3
 80123a2:	f00c fd38 	bl	801ee16 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80123a6:	4823      	ldr	r0, [pc, #140]	@ (8012434 <lwip_netconn_do_delconn+0x1c4>)
 80123a8:	f00c fdc0 	bl	801ef2c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	785b      	ldrb	r3, [r3, #1]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d02d      	beq.n	8012412 <lwip_netconn_do_delconn+0x1a2>
 80123b6:	4b19      	ldr	r3, [pc, #100]	@ (801241c <lwip_netconn_do_delconn+0x1ac>)
 80123b8:	f240 429e 	movw	r2, #1182	@ 0x49e
 80123bc:	491c      	ldr	r1, [pc, #112]	@ (8012430 <lwip_netconn_do_delconn+0x1c0>)
 80123be:	4819      	ldr	r0, [pc, #100]	@ (8012424 <lwip_netconn_do_delconn+0x1b4>)
 80123c0:	f00d fd70 	bl	801fea4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80123c4:	e025      	b.n	8012412 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80123c6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	2200      	movs	r2, #0
 80123ce:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d007      	beq.n	80123ea <lwip_netconn_do_delconn+0x17a>
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	6810      	ldr	r0, [r2, #0]
 80123e4:	2200      	movs	r2, #0
 80123e6:	2100      	movs	r1, #0
 80123e8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d007      	beq.n	8012404 <lwip_netconn_do_delconn+0x194>
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	6810      	ldr	r0, [r2, #0]
 80123fe:	2200      	movs	r2, #0
 8012400:	2102      	movs	r1, #2
 8012402:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	330c      	adds	r3, #12
 801240a:	4618      	mov	r0, r3
 801240c:	f00c fd4e 	bl	801eeac <sys_sem_valid>
 8012410:	e000      	b.n	8012414 <lwip_netconn_do_delconn+0x1a4>
          return;
 8012412:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012414:	3710      	adds	r7, #16
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	0802137c 	.word	0x0802137c
 8012420:	080216ec 	.word	0x080216ec
 8012424:	080213c0 	.word	0x080213c0
 8012428:	08021700 	.word	0x08021700
 801242c:	08021720 	.word	0x08021720
 8012430:	0802173c 	.word	0x0802173c
 8012434:	2001f658 	.word	0x2001f658

08012438 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d025      	beq.n	801249a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012458:	2b10      	cmp	r3, #16
 801245a:	d00e      	beq.n	801247a <lwip_netconn_do_bind+0x42>
 801245c:	2b20      	cmp	r3, #32
 801245e:	d119      	bne.n	8012494 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	6858      	ldr	r0, [r3, #4]
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	6899      	ldr	r1, [r3, #8]
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	899b      	ldrh	r3, [r3, #12]
 801246e:	461a      	mov	r2, r3
 8012470:	f009 fdd6 	bl	801c020 <udp_bind>
 8012474:	4603      	mov	r3, r0
 8012476:	73fb      	strb	r3, [r7, #15]
        break;
 8012478:	e011      	b.n	801249e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	6858      	ldr	r0, [r3, #4]
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	6899      	ldr	r1, [r3, #8]
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	899b      	ldrh	r3, [r3, #12]
 8012488:	461a      	mov	r2, r3
 801248a:	f003 f99b 	bl	80157c4 <tcp_bind>
 801248e:	4603      	mov	r3, r0
 8012490:	73fb      	strb	r3, [r7, #15]
        break;
 8012492:	e004      	b.n	801249e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012494:	23fa      	movs	r3, #250	@ 0xfa
 8012496:	73fb      	strb	r3, [r7, #15]
        break;
 8012498:	e001      	b.n	801249e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801249a:	23fa      	movs	r3, #250	@ 0xfa
 801249c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	7bfa      	ldrb	r2, [r7, #15]
 80124a2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80124a4:	bf00      	nop
 80124a6:	3710      	adds	r7, #16
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b088      	sub	sp, #32
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	4613      	mov	r3, r2
 80124b8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80124ba:	2300      	movs	r3, #0
 80124bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d102      	bne.n	80124ce <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80124c8:	f06f 0305 	mvn.w	r3, #5
 80124cc:	e070      	b.n	80125b0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	785b      	ldrb	r3, [r3, #1]
 80124d2:	2b03      	cmp	r3, #3
 80124d4:	d006      	beq.n	80124e4 <lwip_netconn_do_connected+0x38>
 80124d6:	4b38      	ldr	r3, [pc, #224]	@ (80125b8 <lwip_netconn_do_connected+0x10c>)
 80124d8:	f240 5223 	movw	r2, #1315	@ 0x523
 80124dc:	4937      	ldr	r1, [pc, #220]	@ (80125bc <lwip_netconn_do_connected+0x110>)
 80124de:	4838      	ldr	r0, [pc, #224]	@ (80125c0 <lwip_netconn_do_connected+0x114>)
 80124e0:	f00d fce0 	bl	801fea4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	6a1b      	ldr	r3, [r3, #32]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d10c      	bne.n	8012506 <lwip_netconn_do_connected+0x5a>
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	7f1b      	ldrb	r3, [r3, #28]
 80124f0:	f003 0304 	and.w	r3, r3, #4
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d106      	bne.n	8012506 <lwip_netconn_do_connected+0x5a>
 80124f8:	4b2f      	ldr	r3, [pc, #188]	@ (80125b8 <lwip_netconn_do_connected+0x10c>)
 80124fa:	f240 5224 	movw	r2, #1316	@ 0x524
 80124fe:	4931      	ldr	r1, [pc, #196]	@ (80125c4 <lwip_netconn_do_connected+0x118>)
 8012500:	482f      	ldr	r0, [pc, #188]	@ (80125c0 <lwip_netconn_do_connected+0x114>)
 8012502:	f00d fccf 	bl	801fea4 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	6a1b      	ldr	r3, [r3, #32]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d008      	beq.n	8012520 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	6a1b      	ldr	r3, [r3, #32]
 8012512:	79fa      	ldrb	r2, [r7, #7]
 8012514:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012516:	69bb      	ldr	r3, [r7, #24]
 8012518:	6a1b      	ldr	r3, [r3, #32]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	330c      	adds	r3, #12
 801251e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012528:	2b10      	cmp	r3, #16
 801252a:	d106      	bne.n	801253a <lwip_netconn_do_connected+0x8e>
 801252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d102      	bne.n	801253a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8012534:	69b8      	ldr	r0, [r7, #24]
 8012536:	f7ff fb53 	bl	8011be0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	7f1b      	ldrb	r3, [r3, #28]
 801253e:	f003 0304 	and.w	r3, r3, #4
 8012542:	2b00      	cmp	r3, #0
 8012544:	bf0c      	ite	eq
 8012546:	2301      	moveq	r3, #1
 8012548:	2300      	movne	r3, #0
 801254a:	b2db      	uxtb	r3, r3
 801254c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	7f1b      	ldrb	r3, [r3, #28]
 8012552:	f023 0304 	bic.w	r3, r3, #4
 8012556:	b2da      	uxtb	r2, r3
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d002      	beq.n	8012568 <lwip_netconn_do_connected+0xbc>
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10c      	bne.n	8012582 <lwip_netconn_do_connected+0xd6>
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d102      	bne.n	8012574 <lwip_netconn_do_connected+0xc8>
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d006      	beq.n	8012582 <lwip_netconn_do_connected+0xd6>
 8012574:	4b10      	ldr	r3, [pc, #64]	@ (80125b8 <lwip_netconn_do_connected+0x10c>)
 8012576:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 801257a:	4913      	ldr	r1, [pc, #76]	@ (80125c8 <lwip_netconn_do_connected+0x11c>)
 801257c:	4810      	ldr	r0, [pc, #64]	@ (80125c0 <lwip_netconn_do_connected+0x114>)
 801257e:	f00d fc91 	bl	801fea4 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8012582:	69bb      	ldr	r3, [r7, #24]
 8012584:	2200      	movs	r2, #0
 8012586:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	2200      	movs	r2, #0
 801258c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012592:	2b00      	cmp	r3, #0
 8012594:	d005      	beq.n	80125a2 <lwip_netconn_do_connected+0xf6>
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801259a:	2200      	movs	r2, #0
 801259c:	2102      	movs	r1, #2
 801259e:	69b8      	ldr	r0, [r7, #24]
 80125a0:	4798      	blx	r3

  if (was_blocking) {
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d002      	beq.n	80125ae <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80125a8:	69f8      	ldr	r0, [r7, #28]
 80125aa:	f00c fc65 	bl	801ee78 <sys_sem_signal>
  }
  return ERR_OK;
 80125ae:	2300      	movs	r3, #0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3720      	adds	r7, #32
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}
 80125b8:	0802137c 	.word	0x0802137c
 80125bc:	08021744 	.word	0x08021744
 80125c0:	080213c0 	.word	0x080213c0
 80125c4:	08021764 	.word	0x08021764
 80125c8:	080217a4 	.word	0x080217a4

080125cc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b086      	sub	sp, #24
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d102      	bne.n	80125e8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 80125e2:	23f1      	movs	r3, #241	@ 0xf1
 80125e4:	75fb      	strb	r3, [r7, #23]
 80125e6:	e09b      	b.n	8012720 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125f2:	2b10      	cmp	r3, #16
 80125f4:	d00f      	beq.n	8012616 <lwip_netconn_do_connect+0x4a>
 80125f6:	2b20      	cmp	r3, #32
 80125f8:	f040 8087 	bne.w	801270a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	6858      	ldr	r0, [r3, #4]
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	6899      	ldr	r1, [r3, #8]
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	899b      	ldrh	r3, [r3, #12]
 801260a:	461a      	mov	r2, r3
 801260c:	f009 fdf6 	bl	801c1fc <udp_connect>
 8012610:	4603      	mov	r3, r0
 8012612:	75fb      	strb	r3, [r7, #23]
        break;
 8012614:	e084      	b.n	8012720 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	785b      	ldrb	r3, [r3, #1]
 801261c:	2b03      	cmp	r3, #3
 801261e:	d102      	bne.n	8012626 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8012620:	23f7      	movs	r3, #247	@ 0xf7
 8012622:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8012624:	e07b      	b.n	801271e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	785b      	ldrb	r3, [r3, #1]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d002      	beq.n	8012636 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8012630:	23f6      	movs	r3, #246	@ 0xf6
 8012632:	75fb      	strb	r3, [r7, #23]
        break;
 8012634:	e073      	b.n	801271e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4618      	mov	r0, r3
 801263c:	f7ff fad0 	bl	8011be0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	6858      	ldr	r0, [r3, #4]
 8012646:	693b      	ldr	r3, [r7, #16]
 8012648:	6899      	ldr	r1, [r3, #8]
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	899a      	ldrh	r2, [r3, #12]
 801264e:	4b38      	ldr	r3, [pc, #224]	@ (8012730 <lwip_netconn_do_connect+0x164>)
 8012650:	f003 fa40 	bl	8015ad4 <tcp_connect>
 8012654:	4603      	mov	r3, r0
 8012656:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8012658:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d15e      	bne.n	801271e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	7f1b      	ldrb	r3, [r3, #28]
 8012666:	f003 0302 	and.w	r3, r3, #2
 801266a:	2b00      	cmp	r3, #0
 801266c:	bf14      	ite	ne
 801266e:	2301      	movne	r3, #1
 8012670:	2300      	moveq	r3, #0
 8012672:	b2db      	uxtb	r3, r3
 8012674:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2203      	movs	r2, #3
 801267c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801267e:	7bfb      	ldrb	r3, [r7, #15]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d009      	beq.n	8012698 <lwip_netconn_do_connect+0xcc>
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	7f1a      	ldrb	r2, [r3, #28]
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f042 0204 	orr.w	r2, r2, #4
 8012692:	b2d2      	uxtb	r2, r2
 8012694:	771a      	strb	r2, [r3, #28]
 8012696:	e008      	b.n	80126aa <lwip_netconn_do_connect+0xde>
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	7f1a      	ldrb	r2, [r3, #28]
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	f022 0204 	bic.w	r2, r2, #4
 80126a6:	b2d2      	uxtb	r2, r2
 80126a8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80126aa:	7bfb      	ldrb	r3, [r7, #15]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80126b0:	23fb      	movs	r3, #251	@ 0xfb
 80126b2:	75fb      	strb	r3, [r7, #23]
        break;
 80126b4:	e033      	b.n	801271e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	693a      	ldr	r2, [r7, #16]
 80126bc:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	785b      	ldrb	r3, [r3, #1]
 80126c4:	2b03      	cmp	r3, #3
 80126c6:	d006      	beq.n	80126d6 <lwip_netconn_do_connect+0x10a>
 80126c8:	4b1a      	ldr	r3, [pc, #104]	@ (8012734 <lwip_netconn_do_connect+0x168>)
 80126ca:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 80126ce:	491a      	ldr	r1, [pc, #104]	@ (8012738 <lwip_netconn_do_connect+0x16c>)
 80126d0:	481a      	ldr	r0, [pc, #104]	@ (801273c <lwip_netconn_do_connect+0x170>)
 80126d2:	f00d fbe7 	bl	801fea4 <iprintf>
              UNLOCK_TCPIP_CORE();
 80126d6:	481a      	ldr	r0, [pc, #104]	@ (8012740 <lwip_netconn_do_connect+0x174>)
 80126d8:	f00c fc37 	bl	801ef4a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	330c      	adds	r3, #12
 80126e2:	2100      	movs	r1, #0
 80126e4:	4618      	mov	r0, r3
 80126e6:	f00c fb96 	bl	801ee16 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 80126ea:	4815      	ldr	r0, [pc, #84]	@ (8012740 <lwip_netconn_do_connect+0x174>)
 80126ec:	f00c fc1e 	bl	801ef2c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	785b      	ldrb	r3, [r3, #1]
 80126f6:	2b03      	cmp	r3, #3
 80126f8:	d116      	bne.n	8012728 <lwip_netconn_do_connect+0x15c>
 80126fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012734 <lwip_netconn_do_connect+0x168>)
 80126fc:	f240 5274 	movw	r2, #1396	@ 0x574
 8012700:	490d      	ldr	r1, [pc, #52]	@ (8012738 <lwip_netconn_do_connect+0x16c>)
 8012702:	480e      	ldr	r0, [pc, #56]	@ (801273c <lwip_netconn_do_connect+0x170>)
 8012704:	f00d fbce 	bl	801fea4 <iprintf>
              return;
 8012708:	e00e      	b.n	8012728 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 801270a:	4b0a      	ldr	r3, [pc, #40]	@ (8012734 <lwip_netconn_do_connect+0x168>)
 801270c:	f240 527d 	movw	r2, #1405	@ 0x57d
 8012710:	490c      	ldr	r1, [pc, #48]	@ (8012744 <lwip_netconn_do_connect+0x178>)
 8012712:	480a      	ldr	r0, [pc, #40]	@ (801273c <lwip_netconn_do_connect+0x170>)
 8012714:	f00d fbc6 	bl	801fea4 <iprintf>
 8012718:	23fa      	movs	r3, #250	@ 0xfa
 801271a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 801271c:	e000      	b.n	8012720 <lwip_netconn_do_connect+0x154>
        break;
 801271e:	bf00      	nop
    }
  }
  msg->err = err;
 8012720:	693b      	ldr	r3, [r7, #16]
 8012722:	7dfa      	ldrb	r2, [r7, #23]
 8012724:	711a      	strb	r2, [r3, #4]
 8012726:	e000      	b.n	801272a <lwip_netconn_do_connect+0x15e>
              return;
 8012728:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 801272a:	3718      	adds	r7, #24
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	080124ad 	.word	0x080124ad
 8012734:	0802137c 	.word	0x0802137c
 8012738:	0802173c 	.word	0x0802173c
 801273c:	080213c0 	.word	0x080213c0
 8012740:	2001f658 	.word	0x2001f658
 8012744:	080217c4 	.word	0x080217c4

08012748 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801275e:	2b20      	cmp	r3, #32
 8012760:	d109      	bne.n	8012776 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	4618      	mov	r0, r3
 801276a:	f009 fddb 	bl	801c324 <udp_disconnect>
    msg->err = ERR_OK;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2200      	movs	r2, #0
 8012772:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012774:	e002      	b.n	801277c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	22fa      	movs	r2, #250	@ 0xfa
 801277a:	711a      	strb	r2, [r3, #4]
}
 801277c:	bf00      	nop
 801277e:	3710      	adds	r7, #16
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b084      	sub	sp, #16
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	4618      	mov	r0, r3
 8012796:	f7fe ff05 	bl	80115a4 <netconn_err>
 801279a:	4603      	mov	r3, r0
 801279c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d134      	bne.n	8012810 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d02d      	beq.n	801280c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127ba:	2b20      	cmp	r3, #32
 80127bc:	d123      	bne.n	8012806 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	689b      	ldr	r3, [r3, #8]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d10c      	bne.n	80127e2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	685a      	ldr	r2, [r3, #4]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	689b      	ldr	r3, [r3, #8]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4619      	mov	r1, r3
 80127d6:	4610      	mov	r0, r2
 80127d8:	f009 f9c6 	bl	801bb68 <udp_send>
 80127dc:	4603      	mov	r3, r0
 80127de:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80127e0:	e016      	b.n	8012810 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	6858      	ldr	r0, [r3, #4]
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	6819      	ldr	r1, [r3, #0]
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	689b      	ldr	r3, [r3, #8]
 80127f2:	f103 0208 	add.w	r2, r3, #8
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	899b      	ldrh	r3, [r3, #12]
 80127fc:	f009 f9e8 	bl	801bbd0 <udp_sendto>
 8012800:	4603      	mov	r3, r0
 8012802:	73fb      	strb	r3, [r7, #15]
          break;
 8012804:	e004      	b.n	8012810 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012806:	23f5      	movs	r3, #245	@ 0xf5
 8012808:	73fb      	strb	r3, [r7, #15]
          break;
 801280a:	e001      	b.n	8012810 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 801280c:	23f5      	movs	r3, #245	@ 0xf5
 801280e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	7bfa      	ldrb	r2, [r7, #15]
 8012814:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012816:	bf00      	nop
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}

0801281e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 801281e:	b580      	push	{r7, lr}
 8012820:	b086      	sub	sp, #24
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	2200      	movs	r2, #0
 801282e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d022      	beq.n	8012880 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012844:	2b10      	cmp	r3, #16
 8012846:	d11b      	bne.n	8012880 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	689b      	ldr	r3, [r3, #8]
 801284c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012854:	d202      	bcs.n	801285c <lwip_netconn_do_recv+0x3e>
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	b29b      	uxth	r3, r3
 801285a:	e001      	b.n	8012860 <lwip_netconn_do_recv+0x42>
 801285c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012860:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	89fa      	ldrh	r2, [r7, #14]
 801286a:	4611      	mov	r1, r2
 801286c:	4618      	mov	r0, r3
 801286e:	f003 f89b 	bl	80159a8 <tcp_recved>
        remaining -= recved;
 8012872:	89fb      	ldrh	r3, [r7, #14]
 8012874:	697a      	ldr	r2, [r7, #20]
 8012876:	1ad3      	subs	r3, r2, r3
 8012878:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d1e6      	bne.n	801284e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012880:	bf00      	nop
 8012882:	3718      	adds	r7, #24
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b088      	sub	sp, #32
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012894:	2300      	movs	r3, #0
 8012896:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d106      	bne.n	80128ac <lwip_netconn_do_writemore+0x24>
 801289e:	4b96      	ldr	r3, [pc, #600]	@ (8012af8 <lwip_netconn_do_writemore+0x270>)
 80128a0:	f240 6273 	movw	r2, #1651	@ 0x673
 80128a4:	4995      	ldr	r1, [pc, #596]	@ (8012afc <lwip_netconn_do_writemore+0x274>)
 80128a6:	4896      	ldr	r0, [pc, #600]	@ (8012b00 <lwip_netconn_do_writemore+0x278>)
 80128a8:	f00d fafc 	bl	801fea4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	785b      	ldrb	r3, [r3, #1]
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	d006      	beq.n	80128c2 <lwip_netconn_do_writemore+0x3a>
 80128b4:	4b90      	ldr	r3, [pc, #576]	@ (8012af8 <lwip_netconn_do_writemore+0x270>)
 80128b6:	f240 6274 	movw	r2, #1652	@ 0x674
 80128ba:	4992      	ldr	r1, [pc, #584]	@ (8012b04 <lwip_netconn_do_writemore+0x27c>)
 80128bc:	4890      	ldr	r0, [pc, #576]	@ (8012b00 <lwip_netconn_do_writemore+0x278>)
 80128be:	f00d faf1 	bl	801fea4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a1b      	ldr	r3, [r3, #32]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d106      	bne.n	80128d8 <lwip_netconn_do_writemore+0x50>
 80128ca:	4b8b      	ldr	r3, [pc, #556]	@ (8012af8 <lwip_netconn_do_writemore+0x270>)
 80128cc:	f240 6275 	movw	r2, #1653	@ 0x675
 80128d0:	498d      	ldr	r1, [pc, #564]	@ (8012b08 <lwip_netconn_do_writemore+0x280>)
 80128d2:	488b      	ldr	r0, [pc, #556]	@ (8012b00 <lwip_netconn_do_writemore+0x278>)
 80128d4:	f00d fae6 	bl	801fea4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d106      	bne.n	80128ee <lwip_netconn_do_writemore+0x66>
 80128e0:	4b85      	ldr	r3, [pc, #532]	@ (8012af8 <lwip_netconn_do_writemore+0x270>)
 80128e2:	f240 6276 	movw	r2, #1654	@ 0x676
 80128e6:	4989      	ldr	r1, [pc, #548]	@ (8012b0c <lwip_netconn_do_writemore+0x284>)
 80128e8:	4885      	ldr	r0, [pc, #532]	@ (8012b00 <lwip_netconn_do_writemore+0x278>)
 80128ea:	f00d fadb 	bl	801fea4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6a1b      	ldr	r3, [r3, #32]
 80128f2:	699a      	ldr	r2, [r3, #24]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6a1b      	ldr	r3, [r3, #32]
 80128f8:	695b      	ldr	r3, [r3, #20]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d306      	bcc.n	801290c <lwip_netconn_do_writemore+0x84>
 80128fe:	4b7e      	ldr	r3, [pc, #504]	@ (8012af8 <lwip_netconn_do_writemore+0x270>)
 8012900:	f240 6277 	movw	r2, #1655	@ 0x677
 8012904:	4982      	ldr	r1, [pc, #520]	@ (8012b10 <lwip_netconn_do_writemore+0x288>)
 8012906:	487e      	ldr	r0, [pc, #504]	@ (8012b00 <lwip_netconn_do_writemore+0x278>)
 8012908:	f00d facc 	bl	801fea4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6a1b      	ldr	r3, [r3, #32]
 8012910:	899b      	ldrh	r3, [r3, #12]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <lwip_netconn_do_writemore+0x9c>
 8012916:	4b78      	ldr	r3, [pc, #480]	@ (8012af8 <lwip_netconn_do_writemore+0x270>)
 8012918:	f240 6279 	movw	r2, #1657	@ 0x679
 801291c:	497d      	ldr	r1, [pc, #500]	@ (8012b14 <lwip_netconn_do_writemore+0x28c>)
 801291e:	4878      	ldr	r0, [pc, #480]	@ (8012b00 <lwip_netconn_do_writemore+0x278>)
 8012920:	f00d fac0 	bl	801fea4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6a1b      	ldr	r3, [r3, #32]
 8012928:	7f1b      	ldrb	r3, [r3, #28]
 801292a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	7f1b      	ldrb	r3, [r3, #28]
 8012930:	f003 0302 	and.w	r3, r3, #2
 8012934:	2b00      	cmp	r3, #0
 8012936:	d104      	bne.n	8012942 <lwip_netconn_do_writemore+0xba>
 8012938:	7ebb      	ldrb	r3, [r7, #26]
 801293a:	f003 0304 	and.w	r3, r3, #4
 801293e:	2b00      	cmp	r3, #0
 8012940:	d001      	beq.n	8012946 <lwip_netconn_do_writemore+0xbe>
 8012942:	2301      	movs	r3, #1
 8012944:	e000      	b.n	8012948 <lwip_netconn_do_writemore+0xc0>
 8012946:	2300      	movs	r3, #0
 8012948:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6a1b      	ldr	r3, [r3, #32]
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6a1b      	ldr	r3, [r3, #32]
 8012956:	691b      	ldr	r3, [r3, #16]
 8012958:	4413      	add	r3, r2
 801295a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6a1b      	ldr	r3, [r3, #32]
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	685a      	ldr	r2, [r3, #4]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6a1b      	ldr	r3, [r3, #32]
 8012968:	691b      	ldr	r3, [r3, #16]
 801296a:	1ad3      	subs	r3, r2, r3
 801296c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012974:	d307      	bcc.n	8012986 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012976:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801297a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801297c:	7ebb      	ldrb	r3, [r7, #26]
 801297e:	f043 0302 	orr.w	r3, r3, #2
 8012982:	76bb      	strb	r3, [r7, #26]
 8012984:	e001      	b.n	801298a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012992:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012994:	89fa      	ldrh	r2, [r7, #14]
 8012996:	8bbb      	ldrh	r3, [r7, #28]
 8012998:	429a      	cmp	r2, r3
 801299a:	d216      	bcs.n	80129ca <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801299c:	89fb      	ldrh	r3, [r7, #14]
 801299e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80129a0:	7e3b      	ldrb	r3, [r7, #24]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00d      	beq.n	80129c2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80129a6:	8bbb      	ldrh	r3, [r7, #28]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d10e      	bne.n	80129ca <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6a1b      	ldr	r3, [r3, #32]
 80129b0:	699b      	ldr	r3, [r3, #24]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d102      	bne.n	80129bc <lwip_netconn_do_writemore+0x134>
 80129b6:	f06f 0306 	mvn.w	r3, #6
 80129ba:	e000      	b.n	80129be <lwip_netconn_do_writemore+0x136>
 80129bc:	2300      	movs	r3, #0
 80129be:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80129c0:	e07d      	b.n	8012abe <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80129c2:	7ebb      	ldrb	r3, [r7, #26]
 80129c4:	f043 0302 	orr.w	r3, r3, #2
 80129c8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6a1b      	ldr	r3, [r3, #32]
 80129ce:	691a      	ldr	r2, [r3, #16]
 80129d0:	8bbb      	ldrh	r3, [r7, #28]
 80129d2:	441a      	add	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6a1b      	ldr	r3, [r3, #32]
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d906      	bls.n	80129ee <lwip_netconn_do_writemore+0x166>
 80129e0:	4b45      	ldr	r3, [pc, #276]	@ (8012af8 <lwip_netconn_do_writemore+0x270>)
 80129e2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80129e6:	494c      	ldr	r1, [pc, #304]	@ (8012b18 <lwip_netconn_do_writemore+0x290>)
 80129e8:	4845      	ldr	r0, [pc, #276]	@ (8012b00 <lwip_netconn_do_writemore+0x278>)
 80129ea:	f00d fa5b 	bl	801fea4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80129ee:	8bbb      	ldrh	r3, [r7, #28]
 80129f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129f4:	4293      	cmp	r3, r2
 80129f6:	d103      	bne.n	8012a00 <lwip_netconn_do_writemore+0x178>
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129fe:	d209      	bcs.n	8012a14 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012a04:	8bba      	ldrh	r2, [r7, #28]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d10b      	bne.n	8012a22 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6a1b      	ldr	r3, [r3, #32]
 8012a0e:	899b      	ldrh	r3, [r3, #12]
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d906      	bls.n	8012a22 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8012a14:	2301      	movs	r3, #1
 8012a16:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012a18:	7ebb      	ldrb	r3, [r7, #26]
 8012a1a:	f043 0302 	orr.w	r3, r3, #2
 8012a1e:	76bb      	strb	r3, [r7, #26]
 8012a20:	e001      	b.n	8012a26 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8012a22:	2300      	movs	r3, #0
 8012a24:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6858      	ldr	r0, [r3, #4]
 8012a2a:	7ebb      	ldrb	r3, [r7, #26]
 8012a2c:	8bba      	ldrh	r2, [r7, #28]
 8012a2e:	6979      	ldr	r1, [r7, #20]
 8012a30:	f006 fee0 	bl	80197f4 <tcp_write>
 8012a34:	4603      	mov	r3, r0
 8012a36:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012a38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d12c      	bne.n	8012a9a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6a1b      	ldr	r3, [r3, #32]
 8012a44:	6999      	ldr	r1, [r3, #24]
 8012a46:	8bba      	ldrh	r2, [r7, #28]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6a1b      	ldr	r3, [r3, #32]
 8012a4c:	440a      	add	r2, r1
 8012a4e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6a1b      	ldr	r3, [r3, #32]
 8012a54:	6919      	ldr	r1, [r3, #16]
 8012a56:	8bba      	ldrh	r2, [r7, #28]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6a1b      	ldr	r3, [r3, #32]
 8012a5c:	440a      	add	r2, r1
 8012a5e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6a1b      	ldr	r3, [r3, #32]
 8012a64:	691a      	ldr	r2, [r3, #16]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	689b      	ldr	r3, [r3, #8]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d113      	bne.n	8012a9a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6a1b      	ldr	r3, [r3, #32]
 8012a76:	899a      	ldrh	r2, [r3, #12]
 8012a78:	3a01      	subs	r2, #1
 8012a7a:	b292      	uxth	r2, r2
 8012a7c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a1b      	ldr	r3, [r3, #32]
 8012a82:	899b      	ldrh	r3, [r3, #12]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d008      	beq.n	8012a9a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6a1b      	ldr	r3, [r3, #32]
 8012a8c:	689a      	ldr	r2, [r3, #8]
 8012a8e:	3208      	adds	r2, #8
 8012a90:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6a1b      	ldr	r3, [r3, #32]
 8012a96:	2200      	movs	r2, #0
 8012a98:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012a9a:	7e7b      	ldrb	r3, [r7, #25]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d004      	beq.n	8012aaa <lwip_netconn_do_writemore+0x222>
 8012aa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f43f af50 	beq.w	801294a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d004      	beq.n	8012abc <lwip_netconn_do_writemore+0x234>
 8012ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012aba:	d146      	bne.n	8012b4a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012abc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012abe:	7e3b      	ldrb	r3, [r7, #24]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d02b      	beq.n	8012b1c <lwip_netconn_do_writemore+0x294>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6a1b      	ldr	r3, [r3, #32]
 8012ac8:	699a      	ldr	r2, [r3, #24]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a1b      	ldr	r3, [r3, #32]
 8012ace:	695b      	ldr	r3, [r3, #20]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d223      	bcs.n	8012b1c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d005      	beq.n	8012ae8 <lwip_netconn_do_writemore+0x260>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	2103      	movs	r1, #3
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	7f1b      	ldrb	r3, [r3, #28]
 8012aec:	f043 0310 	orr.w	r3, r3, #16
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	771a      	strb	r2, [r3, #28]
 8012af6:	e028      	b.n	8012b4a <lwip_netconn_do_writemore+0x2c2>
 8012af8:	0802137c 	.word	0x0802137c
 8012afc:	080214d4 	.word	0x080214d4
 8012b00:	080213c0 	.word	0x080213c0
 8012b04:	080217dc 	.word	0x080217dc
 8012b08:	080214e4 	.word	0x080214e4
 8012b0c:	080217fc 	.word	0x080217fc
 8012b10:	08021814 	.word	0x08021814
 8012b14:	08021854 	.word	0x08021854
 8012b18:	0802187c 	.word	0x0802187c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012b24:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8012b28:	d305      	bcc.n	8012b36 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012b32:	2b04      	cmp	r3, #4
 8012b34:	d909      	bls.n	8012b4a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d005      	beq.n	8012b4a <lwip_netconn_do_writemore+0x2c2>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b42:	2200      	movs	r2, #0
 8012b44:	2103      	movs	r1, #3
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012b4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d11d      	bne.n	8012b8e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6a1b      	ldr	r3, [r3, #32]
 8012b56:	699a      	ldr	r2, [r3, #24]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a1b      	ldr	r3, [r3, #32]
 8012b5c:	695b      	ldr	r3, [r3, #20]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d002      	beq.n	8012b68 <lwip_netconn_do_writemore+0x2e0>
 8012b62:	7e3b      	ldrb	r3, [r7, #24]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f007 fc87 	bl	801a484 <tcp_output>
 8012b76:	4603      	mov	r3, r0
 8012b78:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012b7a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012b7e:	f113 0f04 	cmn.w	r3, #4
 8012b82:	d12c      	bne.n	8012bde <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012b84:	7b3b      	ldrb	r3, [r7, #12]
 8012b86:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	76fb      	strb	r3, [r7, #27]
 8012b8c:	e027      	b.n	8012bde <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012b8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b96:	d120      	bne.n	8012bda <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f007 fc71 	bl	801a484 <tcp_output>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012ba6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012baa:	f113 0f04 	cmn.w	r3, #4
 8012bae:	d104      	bne.n	8012bba <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012bb0:	7b7b      	ldrb	r3, [r7, #13]
 8012bb2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	76fb      	strb	r3, [r7, #27]
 8012bb8:	e011      	b.n	8012bde <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012bba:	7e3b      	ldrb	r3, [r7, #24]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d00e      	beq.n	8012bde <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6a1b      	ldr	r3, [r3, #32]
 8012bc4:	699b      	ldr	r3, [r3, #24]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d102      	bne.n	8012bd0 <lwip_netconn_do_writemore+0x348>
 8012bca:	f06f 0306 	mvn.w	r3, #6
 8012bce:	e000      	b.n	8012bd2 <lwip_netconn_do_writemore+0x34a>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	76fb      	strb	r3, [r7, #27]
 8012bd8:	e001      	b.n	8012bde <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012bda:	2301      	movs	r3, #1
 8012bdc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012bde:	7efb      	ldrb	r3, [r7, #27]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d015      	beq.n	8012c10 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a1b      	ldr	r3, [r3, #32]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	330c      	adds	r3, #12
 8012bec:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6a1b      	ldr	r3, [r3, #32]
 8012bf2:	7ffa      	ldrb	r2, [r7, #31]
 8012bf4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012c02:	78fb      	ldrb	r3, [r7, #3]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d006      	beq.n	8012c16 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012c08:	68b8      	ldr	r0, [r7, #8]
 8012c0a:	f00c f935 	bl	801ee78 <sys_sem_signal>
 8012c0e:	e002      	b.n	8012c16 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012c10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c14:	e000      	b.n	8012c18 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8012c16:	2300      	movs	r3, #0
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3720      	adds	r7, #32
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	785b      	ldrb	r3, [r3, #1]
 8012c32:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d069      	beq.n	8012d12 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012c48:	2b10      	cmp	r3, #16
 8012c4a:	d162      	bne.n	8012d12 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d002      	beq.n	8012c5a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012c54:	7afb      	ldrb	r3, [r7, #11]
 8012c56:	2b02      	cmp	r3, #2
 8012c58:	d05b      	beq.n	8012d12 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012c5a:	7afb      	ldrb	r3, [r7, #11]
 8012c5c:	2b03      	cmp	r3, #3
 8012c5e:	d103      	bne.n	8012c68 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	22f5      	movs	r2, #245	@ 0xf5
 8012c64:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012c66:	e059      	b.n	8012d1c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012c68:	7afb      	ldrb	r3, [r7, #11]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d103      	bne.n	8012c76 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	22fb      	movs	r2, #251	@ 0xfb
 8012c72:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012c74:	e052      	b.n	8012d1c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	7a1b      	ldrb	r3, [r3, #8]
 8012c7a:	f003 0301 	and.w	r3, r3, #1
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d004      	beq.n	8012c8c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7ff f90a 	bl	8011ea0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	6a1b      	ldr	r3, [r3, #32]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d006      	beq.n	8012ca4 <lwip_netconn_do_close+0x84>
 8012c96:	4b23      	ldr	r3, [pc, #140]	@ (8012d24 <lwip_netconn_do_close+0x104>)
 8012c98:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012c9c:	4922      	ldr	r1, [pc, #136]	@ (8012d28 <lwip_netconn_do_close+0x108>)
 8012c9e:	4823      	ldr	r0, [pc, #140]	@ (8012d2c <lwip_netconn_do_close+0x10c>)
 8012ca0:	f00d f900 	bl	801fea4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2204      	movs	r2, #4
 8012caa:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	68fa      	ldr	r2, [r7, #12]
 8012cb2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2100      	movs	r1, #0
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ff f96e 	bl	8011f9c <lwip_netconn_do_close_internal>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d029      	beq.n	8012d1a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	785b      	ldrb	r3, [r3, #1]
 8012ccc:	2b04      	cmp	r3, #4
 8012cce:	d006      	beq.n	8012cde <lwip_netconn_do_close+0xbe>
 8012cd0:	4b14      	ldr	r3, [pc, #80]	@ (8012d24 <lwip_netconn_do_close+0x104>)
 8012cd2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8012cd6:	4916      	ldr	r1, [pc, #88]	@ (8012d30 <lwip_netconn_do_close+0x110>)
 8012cd8:	4814      	ldr	r0, [pc, #80]	@ (8012d2c <lwip_netconn_do_close+0x10c>)
 8012cda:	f00d f8e3 	bl	801fea4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8012cde:	4815      	ldr	r0, [pc, #84]	@ (8012d34 <lwip_netconn_do_close+0x114>)
 8012ce0:	f00c f933 	bl	801ef4a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	330c      	adds	r3, #12
 8012cea:	2100      	movs	r1, #0
 8012cec:	4618      	mov	r0, r3
 8012cee:	f00c f892 	bl	801ee16 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012cf2:	4810      	ldr	r0, [pc, #64]	@ (8012d34 <lwip_netconn_do_close+0x114>)
 8012cf4:	f00c f91a 	bl	801ef2c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	785b      	ldrb	r3, [r3, #1]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00b      	beq.n	8012d1a <lwip_netconn_do_close+0xfa>
 8012d02:	4b08      	ldr	r3, [pc, #32]	@ (8012d24 <lwip_netconn_do_close+0x104>)
 8012d04:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8012d08:	4909      	ldr	r1, [pc, #36]	@ (8012d30 <lwip_netconn_do_close+0x110>)
 8012d0a:	4808      	ldr	r0, [pc, #32]	@ (8012d2c <lwip_netconn_do_close+0x10c>)
 8012d0c:	f00d f8ca 	bl	801fea4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012d10:	e003      	b.n	8012d1a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	22f5      	movs	r2, #245	@ 0xf5
 8012d16:	711a      	strb	r2, [r3, #4]
 8012d18:	e000      	b.n	8012d1c <lwip_netconn_do_close+0xfc>
      return;
 8012d1a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012d1c:	3710      	adds	r7, #16
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	0802137c 	.word	0x0802137c
 8012d28:	08021720 	.word	0x08021720
 8012d2c:	080213c0 	.word	0x080213c0
 8012d30:	0802173c 	.word	0x0802173c
 8012d34:	2001f658 	.word	0x2001f658

08012d38 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	4603      	mov	r3, r0
 8012d40:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8012d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	dc04      	bgt.n	8012d54 <lwip_strerr+0x1c>
 8012d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d4e:	f113 0f10 	cmn.w	r3, #16
 8012d52:	da01      	bge.n	8012d58 <lwip_strerr+0x20>
    return "Unknown error.";
 8012d54:	4b06      	ldr	r3, [pc, #24]	@ (8012d70 <lwip_strerr+0x38>)
 8012d56:	e005      	b.n	8012d64 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8012d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d5c:	425b      	negs	r3, r3
 8012d5e:	4a05      	ldr	r2, [pc, #20]	@ (8012d74 <lwip_strerr+0x3c>)
 8012d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr
 8012d70:	08021a10 	.word	0x08021a10
 8012d74:	20000024 	.word	0x20000024

08012d78 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012d7e:	2006      	movs	r0, #6
 8012d80:	f000 ff04 	bl	8013b8c <memp_malloc>
 8012d84:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d004      	beq.n	8012d96 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012d8c:	2210      	movs	r2, #16
 8012d8e:	2100      	movs	r1, #0
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f00d f9e7 	bl	8020164 <memset>
  }
  return buf;
 8012d96:	687b      	ldr	r3, [r7, #4]
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d013      	beq.n	8012dd6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d00b      	beq.n	8012dce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f001 fef6 	bl	8014bac <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	605a      	str	r2, [r3, #4]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	685a      	ldr	r2, [r3, #4]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012dce:	6879      	ldr	r1, [r7, #4]
 8012dd0:	2006      	movs	r0, #6
 8012dd2:	f000 ff51 	bl	8013c78 <memp_free>
  }
}
 8012dd6:	bf00      	nop
 8012dd8:	3708      	adds	r7, #8
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
	...

08012de0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	4613      	mov	r3, r2
 8012dec:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d108      	bne.n	8012e06 <netbuf_ref+0x26>
 8012df4:	4b1c      	ldr	r3, [pc, #112]	@ (8012e68 <netbuf_ref+0x88>)
 8012df6:	2299      	movs	r2, #153	@ 0x99
 8012df8:	491c      	ldr	r1, [pc, #112]	@ (8012e6c <netbuf_ref+0x8c>)
 8012dfa:	481d      	ldr	r0, [pc, #116]	@ (8012e70 <netbuf_ref+0x90>)
 8012dfc:	f00d f852 	bl	801fea4 <iprintf>
 8012e00:	f06f 030f 	mvn.w	r3, #15
 8012e04:	e02b      	b.n	8012e5e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d004      	beq.n	8012e18 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f001 feca 	bl	8014bac <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8012e18:	2241      	movs	r2, #65	@ 0x41
 8012e1a:	2100      	movs	r1, #0
 8012e1c:	2036      	movs	r0, #54	@ 0x36
 8012e1e:	f001 fbe1 	bl	80145e4 <pbuf_alloc>
 8012e22:	4602      	mov	r2, r0
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d105      	bne.n	8012e3c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2200      	movs	r2, #0
 8012e34:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8012e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e3a:	e010      	b.n	8012e5e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	68ba      	ldr	r2, [r7, #8]
 8012e42:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	88fa      	ldrh	r2, [r7, #6]
 8012e4a:	811a      	strh	r2, [r3, #8]
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	6812      	ldr	r2, [r2, #0]
 8012e50:	891b      	ldrh	r3, [r3, #8]
 8012e52:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8012e5c:	2300      	movs	r3, #0
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3710      	adds	r7, #16
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	bf00      	nop
 8012e68:	08021a20 	.word	0x08021a20
 8012e6c:	08021ad8 	.word	0x08021ad8
 8012e70:	08021a70 	.word	0x08021a70

08012e74 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012e7e:	f008 fbc5 	bl	801b60c <sys_timeouts_sleeptime>
 8012e82:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e8a:	d10b      	bne.n	8012ea4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012e8c:	4813      	ldr	r0, [pc, #76]	@ (8012edc <tcpip_timeouts_mbox_fetch+0x68>)
 8012e8e:	f00c f85c 	bl	801ef4a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012e92:	2200      	movs	r2, #0
 8012e94:	6839      	ldr	r1, [r7, #0]
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f00b ff32 	bl	801ed00 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012e9c:	480f      	ldr	r0, [pc, #60]	@ (8012edc <tcpip_timeouts_mbox_fetch+0x68>)
 8012e9e:	f00c f845 	bl	801ef2c <sys_mutex_lock>
    return;
 8012ea2:	e018      	b.n	8012ed6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d102      	bne.n	8012eb0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012eaa:	f008 fb75 	bl	801b598 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012eae:	e7e6      	b.n	8012e7e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012eb0:	480a      	ldr	r0, [pc, #40]	@ (8012edc <tcpip_timeouts_mbox_fetch+0x68>)
 8012eb2:	f00c f84a 	bl	801ef4a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012eb6:	68fa      	ldr	r2, [r7, #12]
 8012eb8:	6839      	ldr	r1, [r7, #0]
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f00b ff20 	bl	801ed00 <sys_arch_mbox_fetch>
 8012ec0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012ec2:	4806      	ldr	r0, [pc, #24]	@ (8012edc <tcpip_timeouts_mbox_fetch+0x68>)
 8012ec4:	f00c f832 	bl	801ef2c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ece:	d102      	bne.n	8012ed6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012ed0:	f008 fb62 	bl	801b598 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012ed4:	e7d3      	b.n	8012e7e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012ed6:	3710      	adds	r7, #16
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	2001f658 	.word	0x2001f658

08012ee0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012ee8:	4810      	ldr	r0, [pc, #64]	@ (8012f2c <tcpip_thread+0x4c>)
 8012eea:	f00c f81f 	bl	801ef2c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012eee:	4b10      	ldr	r3, [pc, #64]	@ (8012f30 <tcpip_thread+0x50>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d005      	beq.n	8012f02 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8012f30 <tcpip_thread+0x50>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4a0e      	ldr	r2, [pc, #56]	@ (8012f34 <tcpip_thread+0x54>)
 8012efc:	6812      	ldr	r2, [r2, #0]
 8012efe:	4610      	mov	r0, r2
 8012f00:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012f02:	f107 030c 	add.w	r3, r7, #12
 8012f06:	4619      	mov	r1, r3
 8012f08:	480b      	ldr	r0, [pc, #44]	@ (8012f38 <tcpip_thread+0x58>)
 8012f0a:	f7ff ffb3 	bl	8012e74 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d106      	bne.n	8012f22 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012f14:	4b09      	ldr	r3, [pc, #36]	@ (8012f3c <tcpip_thread+0x5c>)
 8012f16:	2291      	movs	r2, #145	@ 0x91
 8012f18:	4909      	ldr	r1, [pc, #36]	@ (8012f40 <tcpip_thread+0x60>)
 8012f1a:	480a      	ldr	r0, [pc, #40]	@ (8012f44 <tcpip_thread+0x64>)
 8012f1c:	f00c ffc2 	bl	801fea4 <iprintf>
      continue;
 8012f20:	e003      	b.n	8012f2a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	4618      	mov	r0, r3
 8012f26:	f000 f80f 	bl	8012f48 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012f2a:	e7ea      	b.n	8012f02 <tcpip_thread+0x22>
 8012f2c:	2001f658 	.word	0x2001f658
 8012f30:	2001f64c 	.word	0x2001f64c
 8012f34:	2001f650 	.word	0x2001f650
 8012f38:	2001f654 	.word	0x2001f654
 8012f3c:	08021bb8 	.word	0x08021bb8
 8012f40:	08021be8 	.word	0x08021be8
 8012f44:	08021c08 	.word	0x08021c08

08012f48 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	d026      	beq.n	8012fa6 <tcpip_thread_handle_msg+0x5e>
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	dc2b      	bgt.n	8012fb4 <tcpip_thread_handle_msg+0x6c>
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <tcpip_thread_handle_msg+0x1e>
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d015      	beq.n	8012f90 <tcpip_thread_handle_msg+0x48>
 8012f64:	e026      	b.n	8012fb4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	687a      	ldr	r2, [r7, #4]
 8012f6c:	6850      	ldr	r0, [r2, #4]
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	6892      	ldr	r2, [r2, #8]
 8012f72:	4611      	mov	r1, r2
 8012f74:	4798      	blx	r3
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d004      	beq.n	8012f86 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	4618      	mov	r0, r3
 8012f82:	f001 fe13 	bl	8014bac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012f86:	6879      	ldr	r1, [r7, #4]
 8012f88:	2009      	movs	r0, #9
 8012f8a:	f000 fe75 	bl	8013c78 <memp_free>
      break;
 8012f8e:	e018      	b.n	8012fc2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	687a      	ldr	r2, [r7, #4]
 8012f96:	6892      	ldr	r2, [r2, #8]
 8012f98:	4610      	mov	r0, r2
 8012f9a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012f9c:	6879      	ldr	r1, [r7, #4]
 8012f9e:	2008      	movs	r0, #8
 8012fa0:	f000 fe6a 	bl	8013c78 <memp_free>
      break;
 8012fa4:	e00d      	b.n	8012fc2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	6892      	ldr	r2, [r2, #8]
 8012fae:	4610      	mov	r0, r2
 8012fb0:	4798      	blx	r3
      break;
 8012fb2:	e006      	b.n	8012fc2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012fb4:	4b05      	ldr	r3, [pc, #20]	@ (8012fcc <tcpip_thread_handle_msg+0x84>)
 8012fb6:	22cf      	movs	r2, #207	@ 0xcf
 8012fb8:	4905      	ldr	r1, [pc, #20]	@ (8012fd0 <tcpip_thread_handle_msg+0x88>)
 8012fba:	4806      	ldr	r0, [pc, #24]	@ (8012fd4 <tcpip_thread_handle_msg+0x8c>)
 8012fbc:	f00c ff72 	bl	801fea4 <iprintf>
      break;
 8012fc0:	bf00      	nop
  }
}
 8012fc2:	bf00      	nop
 8012fc4:	3708      	adds	r7, #8
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	08021bb8 	.word	0x08021bb8
 8012fd0:	08021be8 	.word	0x08021be8
 8012fd4:	08021c08 	.word	0x08021c08

08012fd8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b086      	sub	sp, #24
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012fe4:	481a      	ldr	r0, [pc, #104]	@ (8013050 <tcpip_inpkt+0x78>)
 8012fe6:	f00b fed3 	bl	801ed90 <sys_mbox_valid>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d105      	bne.n	8012ffc <tcpip_inpkt+0x24>
 8012ff0:	4b18      	ldr	r3, [pc, #96]	@ (8013054 <tcpip_inpkt+0x7c>)
 8012ff2:	22fc      	movs	r2, #252	@ 0xfc
 8012ff4:	4918      	ldr	r1, [pc, #96]	@ (8013058 <tcpip_inpkt+0x80>)
 8012ff6:	4819      	ldr	r0, [pc, #100]	@ (801305c <tcpip_inpkt+0x84>)
 8012ff8:	f00c ff54 	bl	801fea4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012ffc:	2009      	movs	r0, #9
 8012ffe:	f000 fdc5 	bl	8013b8c <memp_malloc>
 8013002:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d102      	bne.n	8013010 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801300a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801300e:	e01a      	b.n	8013046 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	2200      	movs	r2, #0
 8013014:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	68ba      	ldr	r2, [r7, #8]
 8013020:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013028:	6979      	ldr	r1, [r7, #20]
 801302a:	4809      	ldr	r0, [pc, #36]	@ (8013050 <tcpip_inpkt+0x78>)
 801302c:	f00b fe4e 	bl	801eccc <sys_mbox_trypost>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d006      	beq.n	8013044 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013036:	6979      	ldr	r1, [r7, #20]
 8013038:	2009      	movs	r0, #9
 801303a:	f000 fe1d 	bl	8013c78 <memp_free>
    return ERR_MEM;
 801303e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013042:	e000      	b.n	8013046 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013044:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013046:	4618      	mov	r0, r3
 8013048:	3718      	adds	r7, #24
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
 801304e:	bf00      	nop
 8013050:	2001f654 	.word	0x2001f654
 8013054:	08021bb8 	.word	0x08021bb8
 8013058:	08021c30 	.word	0x08021c30
 801305c:	08021c08 	.word	0x08021c08

08013060 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013070:	f003 0318 	and.w	r3, r3, #24
 8013074:	2b00      	cmp	r3, #0
 8013076:	d006      	beq.n	8013086 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013078:	4a08      	ldr	r2, [pc, #32]	@ (801309c <tcpip_input+0x3c>)
 801307a:	6839      	ldr	r1, [r7, #0]
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f7ff ffab 	bl	8012fd8 <tcpip_inpkt>
 8013082:	4603      	mov	r3, r0
 8013084:	e005      	b.n	8013092 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8013086:	4a06      	ldr	r2, [pc, #24]	@ (80130a0 <tcpip_input+0x40>)
 8013088:	6839      	ldr	r1, [r7, #0]
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7ff ffa4 	bl	8012fd8 <tcpip_inpkt>
 8013090:	4603      	mov	r3, r0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3708      	adds	r7, #8
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	0801eac9 	.word	0x0801eac9
 80130a0:	0801d9d1 	.word	0x0801d9d1

080130a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80130ae:	4819      	ldr	r0, [pc, #100]	@ (8013114 <tcpip_try_callback+0x70>)
 80130b0:	f00b fe6e 	bl	801ed90 <sys_mbox_valid>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d106      	bne.n	80130c8 <tcpip_try_callback+0x24>
 80130ba:	4b17      	ldr	r3, [pc, #92]	@ (8013118 <tcpip_try_callback+0x74>)
 80130bc:	f240 125d 	movw	r2, #349	@ 0x15d
 80130c0:	4916      	ldr	r1, [pc, #88]	@ (801311c <tcpip_try_callback+0x78>)
 80130c2:	4817      	ldr	r0, [pc, #92]	@ (8013120 <tcpip_try_callback+0x7c>)
 80130c4:	f00c feee 	bl	801fea4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80130c8:	2008      	movs	r0, #8
 80130ca:	f000 fd5f 	bl	8013b8c <memp_malloc>
 80130ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d102      	bne.n	80130dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80130d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130da:	e017      	b.n	801310c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2201      	movs	r2, #1
 80130e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	687a      	ldr	r2, [r7, #4]
 80130e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	683a      	ldr	r2, [r7, #0]
 80130ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80130ee:	68f9      	ldr	r1, [r7, #12]
 80130f0:	4808      	ldr	r0, [pc, #32]	@ (8013114 <tcpip_try_callback+0x70>)
 80130f2:	f00b fdeb 	bl	801eccc <sys_mbox_trypost>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d006      	beq.n	801310a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80130fc:	68f9      	ldr	r1, [r7, #12]
 80130fe:	2008      	movs	r0, #8
 8013100:	f000 fdba 	bl	8013c78 <memp_free>
    return ERR_MEM;
 8013104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013108:	e000      	b.n	801310c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801310a:	2300      	movs	r3, #0
}
 801310c:	4618      	mov	r0, r3
 801310e:	3710      	adds	r7, #16
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}
 8013114:	2001f654 	.word	0x2001f654
 8013118:	08021bb8 	.word	0x08021bb8
 801311c:	08021c30 	.word	0x08021c30
 8013120:	08021c08 	.word	0x08021c08

08013124 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af00      	add	r7, sp, #0
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013130:	4806      	ldr	r0, [pc, #24]	@ (801314c <tcpip_send_msg_wait_sem+0x28>)
 8013132:	f00b fefb 	bl	801ef2c <sys_mutex_lock>
  fn(apimsg);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	68b8      	ldr	r0, [r7, #8]
 801313a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801313c:	4803      	ldr	r0, [pc, #12]	@ (801314c <tcpip_send_msg_wait_sem+0x28>)
 801313e:	f00b ff04 	bl	801ef4a <sys_mutex_unlock>
  return ERR_OK;
 8013142:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8013144:	4618      	mov	r0, r3
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	2001f658 	.word	0x2001f658

08013150 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af02      	add	r7, sp, #8
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  lwip_init();
 801315a:	f000 f872 	bl	8013242 <lwip_init>

  tcpip_init_done = initfunc;
 801315e:	4a17      	ldr	r2, [pc, #92]	@ (80131bc <tcpip_init+0x6c>)
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013164:	4a16      	ldr	r2, [pc, #88]	@ (80131c0 <tcpip_init+0x70>)
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801316a:	2106      	movs	r1, #6
 801316c:	4815      	ldr	r0, [pc, #84]	@ (80131c4 <tcpip_init+0x74>)
 801316e:	f00b fd81 	bl	801ec74 <sys_mbox_new>
 8013172:	4603      	mov	r3, r0
 8013174:	2b00      	cmp	r3, #0
 8013176:	d006      	beq.n	8013186 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013178:	4b13      	ldr	r3, [pc, #76]	@ (80131c8 <tcpip_init+0x78>)
 801317a:	f240 2261 	movw	r2, #609	@ 0x261
 801317e:	4913      	ldr	r1, [pc, #76]	@ (80131cc <tcpip_init+0x7c>)
 8013180:	4813      	ldr	r0, [pc, #76]	@ (80131d0 <tcpip_init+0x80>)
 8013182:	f00c fe8f 	bl	801fea4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013186:	4813      	ldr	r0, [pc, #76]	@ (80131d4 <tcpip_init+0x84>)
 8013188:	f00b feba 	bl	801ef00 <sys_mutex_new>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d006      	beq.n	80131a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8013192:	4b0d      	ldr	r3, [pc, #52]	@ (80131c8 <tcpip_init+0x78>)
 8013194:	f240 2265 	movw	r2, #613	@ 0x265
 8013198:	490f      	ldr	r1, [pc, #60]	@ (80131d8 <tcpip_init+0x88>)
 801319a:	480d      	ldr	r0, [pc, #52]	@ (80131d0 <tcpip_init+0x80>)
 801319c:	f00c fe82 	bl	801fea4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80131a0:	2318      	movs	r3, #24
 80131a2:	9300      	str	r3, [sp, #0]
 80131a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80131a8:	2200      	movs	r2, #0
 80131aa:	490c      	ldr	r1, [pc, #48]	@ (80131dc <tcpip_init+0x8c>)
 80131ac:	480c      	ldr	r0, [pc, #48]	@ (80131e0 <tcpip_init+0x90>)
 80131ae:	f00b fed9 	bl	801ef64 <sys_thread_new>
}
 80131b2:	bf00      	nop
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	2001f64c 	.word	0x2001f64c
 80131c0:	2001f650 	.word	0x2001f650
 80131c4:	2001f654 	.word	0x2001f654
 80131c8:	08021bb8 	.word	0x08021bb8
 80131cc:	08021c40 	.word	0x08021c40
 80131d0:	08021c08 	.word	0x08021c08
 80131d4:	2001f658 	.word	0x2001f658
 80131d8:	08021c64 	.word	0x08021c64
 80131dc:	08012ee1 	.word	0x08012ee1
 80131e0:	08021c88 	.word	0x08021c88

080131e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b083      	sub	sp, #12
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	4603      	mov	r3, r0
 80131ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80131ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80131f2:	021b      	lsls	r3, r3, #8
 80131f4:	b21a      	sxth	r2, r3
 80131f6:	88fb      	ldrh	r3, [r7, #6]
 80131f8:	0a1b      	lsrs	r3, r3, #8
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	b21b      	sxth	r3, r3
 80131fe:	4313      	orrs	r3, r2
 8013200:	b21b      	sxth	r3, r3
 8013202:	b29b      	uxth	r3, r3
}
 8013204:	4618      	mov	r0, r3
 8013206:	370c      	adds	r7, #12
 8013208:	46bd      	mov	sp, r7
 801320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320e:	4770      	bx	lr

08013210 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	061a      	lsls	r2, r3, #24
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	021b      	lsls	r3, r3, #8
 8013220:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013224:	431a      	orrs	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	0a1b      	lsrs	r3, r3, #8
 801322a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801322e:	431a      	orrs	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	0e1b      	lsrs	r3, r3, #24
 8013234:	4313      	orrs	r3, r2
}
 8013236:	4618      	mov	r0, r3
 8013238:	370c      	adds	r7, #12
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr

08013242 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013242:	b580      	push	{r7, lr}
 8013244:	b082      	sub	sp, #8
 8013246:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801324c:	f00b fe4c 	bl	801eee8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013250:	f000 f8d4 	bl	80133fc <mem_init>
  memp_init();
 8013254:	f000 fc2c 	bl	8013ab0 <memp_init>
  pbuf_init();
  netif_init();
 8013258:	f000 fd38 	bl	8013ccc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801325c:	f008 fa0e 	bl	801b67c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013260:	f001 ff4e 	bl	8015100 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013264:	f008 f950 	bl	801b508 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013268:	bf00      	nop
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
 8013276:	4603      	mov	r3, r0
 8013278:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801327a:	4b05      	ldr	r3, [pc, #20]	@ (8013290 <ptr_to_mem+0x20>)
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	88fb      	ldrh	r3, [r7, #6]
 8013280:	4413      	add	r3, r2
}
 8013282:	4618      	mov	r0, r3
 8013284:	370c      	adds	r7, #12
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	2001f674 	.word	0x2001f674

08013294 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013294:	b480      	push	{r7}
 8013296:	b083      	sub	sp, #12
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801329c:	4b05      	ldr	r3, [pc, #20]	@ (80132b4 <mem_to_ptr+0x20>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	b29b      	uxth	r3, r3
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop
 80132b4:	2001f674 	.word	0x2001f674

080132b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80132b8:	b590      	push	{r4, r7, lr}
 80132ba:	b085      	sub	sp, #20
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80132c0:	4b45      	ldr	r3, [pc, #276]	@ (80133d8 <plug_holes+0x120>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d206      	bcs.n	80132d8 <plug_holes+0x20>
 80132ca:	4b44      	ldr	r3, [pc, #272]	@ (80133dc <plug_holes+0x124>)
 80132cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80132d0:	4943      	ldr	r1, [pc, #268]	@ (80133e0 <plug_holes+0x128>)
 80132d2:	4844      	ldr	r0, [pc, #272]	@ (80133e4 <plug_holes+0x12c>)
 80132d4:	f00c fde6 	bl	801fea4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80132d8:	4b43      	ldr	r3, [pc, #268]	@ (80133e8 <plug_holes+0x130>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d306      	bcc.n	80132f0 <plug_holes+0x38>
 80132e2:	4b3e      	ldr	r3, [pc, #248]	@ (80133dc <plug_holes+0x124>)
 80132e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80132e8:	4940      	ldr	r1, [pc, #256]	@ (80133ec <plug_holes+0x134>)
 80132ea:	483e      	ldr	r0, [pc, #248]	@ (80133e4 <plug_holes+0x12c>)
 80132ec:	f00c fdda 	bl	801fea4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	791b      	ldrb	r3, [r3, #4]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d006      	beq.n	8013306 <plug_holes+0x4e>
 80132f8:	4b38      	ldr	r3, [pc, #224]	@ (80133dc <plug_holes+0x124>)
 80132fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80132fe:	493c      	ldr	r1, [pc, #240]	@ (80133f0 <plug_holes+0x138>)
 8013300:	4838      	ldr	r0, [pc, #224]	@ (80133e4 <plug_holes+0x12c>)
 8013302:	f00c fdcf 	bl	801fea4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801330e:	d906      	bls.n	801331e <plug_holes+0x66>
 8013310:	4b32      	ldr	r3, [pc, #200]	@ (80133dc <plug_holes+0x124>)
 8013312:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8013316:	4937      	ldr	r1, [pc, #220]	@ (80133f4 <plug_holes+0x13c>)
 8013318:	4832      	ldr	r0, [pc, #200]	@ (80133e4 <plug_holes+0x12c>)
 801331a:	f00c fdc3 	bl	801fea4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	881b      	ldrh	r3, [r3, #0]
 8013322:	4618      	mov	r0, r3
 8013324:	f7ff ffa4 	bl	8013270 <ptr_to_mem>
 8013328:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	429a      	cmp	r2, r3
 8013330:	d024      	beq.n	801337c <plug_holes+0xc4>
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	791b      	ldrb	r3, [r3, #4]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d120      	bne.n	801337c <plug_holes+0xc4>
 801333a:	4b2b      	ldr	r3, [pc, #172]	@ (80133e8 <plug_holes+0x130>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	68fa      	ldr	r2, [r7, #12]
 8013340:	429a      	cmp	r2, r3
 8013342:	d01b      	beq.n	801337c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013344:	4b2c      	ldr	r3, [pc, #176]	@ (80133f8 <plug_holes+0x140>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	68fa      	ldr	r2, [r7, #12]
 801334a:	429a      	cmp	r2, r3
 801334c:	d102      	bne.n	8013354 <plug_holes+0x9c>
      lfree = mem;
 801334e:	4a2a      	ldr	r2, [pc, #168]	@ (80133f8 <plug_holes+0x140>)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	881a      	ldrh	r2, [r3, #0]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	881b      	ldrh	r3, [r3, #0]
 8013360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013364:	d00a      	beq.n	801337c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	881b      	ldrh	r3, [r3, #0]
 801336a:	4618      	mov	r0, r3
 801336c:	f7ff ff80 	bl	8013270 <ptr_to_mem>
 8013370:	4604      	mov	r4, r0
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	f7ff ff8e 	bl	8013294 <mem_to_ptr>
 8013378:	4603      	mov	r3, r0
 801337a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	885b      	ldrh	r3, [r3, #2]
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff ff75 	bl	8013270 <ptr_to_mem>
 8013386:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013388:	68ba      	ldr	r2, [r7, #8]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	429a      	cmp	r2, r3
 801338e:	d01f      	beq.n	80133d0 <plug_holes+0x118>
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	791b      	ldrb	r3, [r3, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d11b      	bne.n	80133d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013398:	4b17      	ldr	r3, [pc, #92]	@ (80133f8 <plug_holes+0x140>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d102      	bne.n	80133a8 <plug_holes+0xf0>
      lfree = pmem;
 80133a2:	4a15      	ldr	r2, [pc, #84]	@ (80133f8 <plug_holes+0x140>)
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	881a      	ldrh	r2, [r3, #0]
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80133b8:	d00a      	beq.n	80133d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	881b      	ldrh	r3, [r3, #0]
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff ff56 	bl	8013270 <ptr_to_mem>
 80133c4:	4604      	mov	r4, r0
 80133c6:	68b8      	ldr	r0, [r7, #8]
 80133c8:	f7ff ff64 	bl	8013294 <mem_to_ptr>
 80133cc:	4603      	mov	r3, r0
 80133ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80133d0:	bf00      	nop
 80133d2:	3714      	adds	r7, #20
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd90      	pop	{r4, r7, pc}
 80133d8:	2001f674 	.word	0x2001f674
 80133dc:	08021c98 	.word	0x08021c98
 80133e0:	08021cc8 	.word	0x08021cc8
 80133e4:	08021ce0 	.word	0x08021ce0
 80133e8:	2001f678 	.word	0x2001f678
 80133ec:	08021d08 	.word	0x08021d08
 80133f0:	08021d24 	.word	0x08021d24
 80133f4:	08021d40 	.word	0x08021d40
 80133f8:	2001f680 	.word	0x2001f680

080133fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013402:	4b1d      	ldr	r3, [pc, #116]	@ (8013478 <mem_init+0x7c>)
 8013404:	4a1d      	ldr	r2, [pc, #116]	@ (801347c <mem_init+0x80>)
 8013406:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013408:	4b1b      	ldr	r3, [pc, #108]	@ (8013478 <mem_init+0x7c>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8013414:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2200      	movs	r2, #0
 801341a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2200      	movs	r2, #0
 8013420:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013422:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8013426:	f7ff ff23 	bl	8013270 <ptr_to_mem>
 801342a:	4603      	mov	r3, r0
 801342c:	4a14      	ldr	r2, [pc, #80]	@ (8013480 <mem_init+0x84>)
 801342e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013430:	4b13      	ldr	r3, [pc, #76]	@ (8013480 <mem_init+0x84>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2201      	movs	r2, #1
 8013436:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013438:	4b11      	ldr	r3, [pc, #68]	@ (8013480 <mem_init+0x84>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8013440:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013442:	4b0f      	ldr	r3, [pc, #60]	@ (8013480 <mem_init+0x84>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 801344a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801344c:	4b0a      	ldr	r3, [pc, #40]	@ (8013478 <mem_init+0x7c>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4a0c      	ldr	r2, [pc, #48]	@ (8013484 <mem_init+0x88>)
 8013452:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013454:	480c      	ldr	r0, [pc, #48]	@ (8013488 <mem_init+0x8c>)
 8013456:	f00b fd53 	bl	801ef00 <sys_mutex_new>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d006      	beq.n	801346e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013460:	4b0a      	ldr	r3, [pc, #40]	@ (801348c <mem_init+0x90>)
 8013462:	f240 221f 	movw	r2, #543	@ 0x21f
 8013466:	490a      	ldr	r1, [pc, #40]	@ (8013490 <mem_init+0x94>)
 8013468:	480a      	ldr	r0, [pc, #40]	@ (8013494 <mem_init+0x98>)
 801346a:	f00c fd1b 	bl	801fea4 <iprintf>
  }
}
 801346e:	bf00      	nop
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
 8013476:	bf00      	nop
 8013478:	2001f674 	.word	0x2001f674
 801347c:	20048000 	.word	0x20048000
 8013480:	2001f678 	.word	0x2001f678
 8013484:	2001f680 	.word	0x2001f680
 8013488:	2001f67c 	.word	0x2001f67c
 801348c:	08021c98 	.word	0x08021c98
 8013490:	08021d6c 	.word	0x08021d6c
 8013494:	08021ce0 	.word	0x08021ce0

08013498 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b086      	sub	sp, #24
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f7ff fef7 	bl	8013294 <mem_to_ptr>
 80134a6:	4603      	mov	r3, r0
 80134a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7ff fede 	bl	8013270 <ptr_to_mem>
 80134b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	885b      	ldrh	r3, [r3, #2]
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7ff fed8 	bl	8013270 <ptr_to_mem>
 80134c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80134ca:	d818      	bhi.n	80134fe <mem_link_valid+0x66>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	885b      	ldrh	r3, [r3, #2]
 80134d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80134d4:	d813      	bhi.n	80134fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80134da:	8afa      	ldrh	r2, [r7, #22]
 80134dc:	429a      	cmp	r2, r3
 80134de:	d004      	beq.n	80134ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	881b      	ldrh	r3, [r3, #0]
 80134e4:	8afa      	ldrh	r2, [r7, #22]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d109      	bne.n	80134fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80134ea:	4b08      	ldr	r3, [pc, #32]	@ (801350c <mem_link_valid+0x74>)
 80134ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80134ee:	693a      	ldr	r2, [r7, #16]
 80134f0:	429a      	cmp	r2, r3
 80134f2:	d006      	beq.n	8013502 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	885b      	ldrh	r3, [r3, #2]
 80134f8:	8afa      	ldrh	r2, [r7, #22]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d001      	beq.n	8013502 <mem_link_valid+0x6a>
    return 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	e000      	b.n	8013504 <mem_link_valid+0x6c>
  }
  return 1;
 8013502:	2301      	movs	r3, #1
}
 8013504:	4618      	mov	r0, r3
 8013506:	3718      	adds	r7, #24
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}
 801350c:	2001f678 	.word	0x2001f678

08013510 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b088      	sub	sp, #32
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d070      	beq.n	8013600 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f003 0303 	and.w	r3, r3, #3
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00d      	beq.n	8013544 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013528:	4b37      	ldr	r3, [pc, #220]	@ (8013608 <mem_free+0xf8>)
 801352a:	f240 2273 	movw	r2, #627	@ 0x273
 801352e:	4937      	ldr	r1, [pc, #220]	@ (801360c <mem_free+0xfc>)
 8013530:	4837      	ldr	r0, [pc, #220]	@ (8013610 <mem_free+0x100>)
 8013532:	f00c fcb7 	bl	801fea4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013536:	f00b fd35 	bl	801efa4 <sys_arch_protect>
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f00b fd3f 	bl	801efc0 <sys_arch_unprotect>
    return;
 8013542:	e05e      	b.n	8013602 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	3b08      	subs	r3, #8
 8013548:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801354a:	4b32      	ldr	r3, [pc, #200]	@ (8013614 <mem_free+0x104>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	69fa      	ldr	r2, [r7, #28]
 8013550:	429a      	cmp	r2, r3
 8013552:	d306      	bcc.n	8013562 <mem_free+0x52>
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f103 020c 	add.w	r2, r3, #12
 801355a:	4b2f      	ldr	r3, [pc, #188]	@ (8013618 <mem_free+0x108>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	429a      	cmp	r2, r3
 8013560:	d90d      	bls.n	801357e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013562:	4b29      	ldr	r3, [pc, #164]	@ (8013608 <mem_free+0xf8>)
 8013564:	f240 227f 	movw	r2, #639	@ 0x27f
 8013568:	492c      	ldr	r1, [pc, #176]	@ (801361c <mem_free+0x10c>)
 801356a:	4829      	ldr	r0, [pc, #164]	@ (8013610 <mem_free+0x100>)
 801356c:	f00c fc9a 	bl	801fea4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013570:	f00b fd18 	bl	801efa4 <sys_arch_protect>
 8013574:	6138      	str	r0, [r7, #16]
 8013576:	6938      	ldr	r0, [r7, #16]
 8013578:	f00b fd22 	bl	801efc0 <sys_arch_unprotect>
    return;
 801357c:	e041      	b.n	8013602 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801357e:	4828      	ldr	r0, [pc, #160]	@ (8013620 <mem_free+0x110>)
 8013580:	f00b fcd4 	bl	801ef2c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	791b      	ldrb	r3, [r3, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d110      	bne.n	80135ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801358c:	4b1e      	ldr	r3, [pc, #120]	@ (8013608 <mem_free+0xf8>)
 801358e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8013592:	4924      	ldr	r1, [pc, #144]	@ (8013624 <mem_free+0x114>)
 8013594:	481e      	ldr	r0, [pc, #120]	@ (8013610 <mem_free+0x100>)
 8013596:	f00c fc85 	bl	801fea4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801359a:	4821      	ldr	r0, [pc, #132]	@ (8013620 <mem_free+0x110>)
 801359c:	f00b fcd5 	bl	801ef4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135a0:	f00b fd00 	bl	801efa4 <sys_arch_protect>
 80135a4:	6178      	str	r0, [r7, #20]
 80135a6:	6978      	ldr	r0, [r7, #20]
 80135a8:	f00b fd0a 	bl	801efc0 <sys_arch_unprotect>
    return;
 80135ac:	e029      	b.n	8013602 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80135ae:	69f8      	ldr	r0, [r7, #28]
 80135b0:	f7ff ff72 	bl	8013498 <mem_link_valid>
 80135b4:	4603      	mov	r3, r0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d110      	bne.n	80135dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80135ba:	4b13      	ldr	r3, [pc, #76]	@ (8013608 <mem_free+0xf8>)
 80135bc:	f240 2295 	movw	r2, #661	@ 0x295
 80135c0:	4919      	ldr	r1, [pc, #100]	@ (8013628 <mem_free+0x118>)
 80135c2:	4813      	ldr	r0, [pc, #76]	@ (8013610 <mem_free+0x100>)
 80135c4:	f00c fc6e 	bl	801fea4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80135c8:	4815      	ldr	r0, [pc, #84]	@ (8013620 <mem_free+0x110>)
 80135ca:	f00b fcbe 	bl	801ef4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135ce:	f00b fce9 	bl	801efa4 <sys_arch_protect>
 80135d2:	61b8      	str	r0, [r7, #24]
 80135d4:	69b8      	ldr	r0, [r7, #24]
 80135d6:	f00b fcf3 	bl	801efc0 <sys_arch_unprotect>
    return;
 80135da:	e012      	b.n	8013602 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	2200      	movs	r2, #0
 80135e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80135e2:	4b12      	ldr	r3, [pc, #72]	@ (801362c <mem_free+0x11c>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	69fa      	ldr	r2, [r7, #28]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d202      	bcs.n	80135f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80135ec:	4a0f      	ldr	r2, [pc, #60]	@ (801362c <mem_free+0x11c>)
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80135f2:	69f8      	ldr	r0, [r7, #28]
 80135f4:	f7ff fe60 	bl	80132b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80135f8:	4809      	ldr	r0, [pc, #36]	@ (8013620 <mem_free+0x110>)
 80135fa:	f00b fca6 	bl	801ef4a <sys_mutex_unlock>
 80135fe:	e000      	b.n	8013602 <mem_free+0xf2>
    return;
 8013600:	bf00      	nop
}
 8013602:	3720      	adds	r7, #32
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	08021c98 	.word	0x08021c98
 801360c:	08021d88 	.word	0x08021d88
 8013610:	08021ce0 	.word	0x08021ce0
 8013614:	2001f674 	.word	0x2001f674
 8013618:	2001f678 	.word	0x2001f678
 801361c:	08021dac 	.word	0x08021dac
 8013620:	2001f67c 	.word	0x2001f67c
 8013624:	08021dc8 	.word	0x08021dc8
 8013628:	08021df0 	.word	0x08021df0
 801362c:	2001f680 	.word	0x2001f680

08013630 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b088      	sub	sp, #32
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	460b      	mov	r3, r1
 801363a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801363c:	887b      	ldrh	r3, [r7, #2]
 801363e:	3303      	adds	r3, #3
 8013640:	b29b      	uxth	r3, r3
 8013642:	f023 0303 	bic.w	r3, r3, #3
 8013646:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013648:	8bfb      	ldrh	r3, [r7, #30]
 801364a:	2b0b      	cmp	r3, #11
 801364c:	d801      	bhi.n	8013652 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801364e:	230c      	movs	r3, #12
 8013650:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013652:	8bfb      	ldrh	r3, [r7, #30]
 8013654:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013658:	d803      	bhi.n	8013662 <mem_trim+0x32>
 801365a:	8bfa      	ldrh	r2, [r7, #30]
 801365c:	887b      	ldrh	r3, [r7, #2]
 801365e:	429a      	cmp	r2, r3
 8013660:	d201      	bcs.n	8013666 <mem_trim+0x36>
    return NULL;
 8013662:	2300      	movs	r3, #0
 8013664:	e0d8      	b.n	8013818 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013666:	4b6e      	ldr	r3, [pc, #440]	@ (8013820 <mem_trim+0x1f0>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	429a      	cmp	r2, r3
 801366e:	d304      	bcc.n	801367a <mem_trim+0x4a>
 8013670:	4b6c      	ldr	r3, [pc, #432]	@ (8013824 <mem_trim+0x1f4>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	687a      	ldr	r2, [r7, #4]
 8013676:	429a      	cmp	r2, r3
 8013678:	d306      	bcc.n	8013688 <mem_trim+0x58>
 801367a:	4b6b      	ldr	r3, [pc, #428]	@ (8013828 <mem_trim+0x1f8>)
 801367c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013680:	496a      	ldr	r1, [pc, #424]	@ (801382c <mem_trim+0x1fc>)
 8013682:	486b      	ldr	r0, [pc, #428]	@ (8013830 <mem_trim+0x200>)
 8013684:	f00c fc0e 	bl	801fea4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013688:	4b65      	ldr	r3, [pc, #404]	@ (8013820 <mem_trim+0x1f0>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	429a      	cmp	r2, r3
 8013690:	d304      	bcc.n	801369c <mem_trim+0x6c>
 8013692:	4b64      	ldr	r3, [pc, #400]	@ (8013824 <mem_trim+0x1f4>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	429a      	cmp	r2, r3
 801369a:	d307      	bcc.n	80136ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801369c:	f00b fc82 	bl	801efa4 <sys_arch_protect>
 80136a0:	60b8      	str	r0, [r7, #8]
 80136a2:	68b8      	ldr	r0, [r7, #8]
 80136a4:	f00b fc8c 	bl	801efc0 <sys_arch_unprotect>
    return rmem;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	e0b5      	b.n	8013818 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	3b08      	subs	r3, #8
 80136b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80136b2:	69b8      	ldr	r0, [r7, #24]
 80136b4:	f7ff fdee 	bl	8013294 <mem_to_ptr>
 80136b8:	4603      	mov	r3, r0
 80136ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	881a      	ldrh	r2, [r3, #0]
 80136c0:	8afb      	ldrh	r3, [r7, #22]
 80136c2:	1ad3      	subs	r3, r2, r3
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	3b08      	subs	r3, #8
 80136c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80136ca:	8bfa      	ldrh	r2, [r7, #30]
 80136cc:	8abb      	ldrh	r3, [r7, #20]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d906      	bls.n	80136e0 <mem_trim+0xb0>
 80136d2:	4b55      	ldr	r3, [pc, #340]	@ (8013828 <mem_trim+0x1f8>)
 80136d4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80136d8:	4956      	ldr	r1, [pc, #344]	@ (8013834 <mem_trim+0x204>)
 80136da:	4855      	ldr	r0, [pc, #340]	@ (8013830 <mem_trim+0x200>)
 80136dc:	f00c fbe2 	bl	801fea4 <iprintf>
  if (newsize > size) {
 80136e0:	8bfa      	ldrh	r2, [r7, #30]
 80136e2:	8abb      	ldrh	r3, [r7, #20]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d901      	bls.n	80136ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80136e8:	2300      	movs	r3, #0
 80136ea:	e095      	b.n	8013818 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80136ec:	8bfa      	ldrh	r2, [r7, #30]
 80136ee:	8abb      	ldrh	r3, [r7, #20]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d101      	bne.n	80136f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	e08f      	b.n	8013818 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80136f8:	484f      	ldr	r0, [pc, #316]	@ (8013838 <mem_trim+0x208>)
 80136fa:	f00b fc17 	bl	801ef2c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	881b      	ldrh	r3, [r3, #0]
 8013702:	4618      	mov	r0, r3
 8013704:	f7ff fdb4 	bl	8013270 <ptr_to_mem>
 8013708:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	791b      	ldrb	r3, [r3, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d13f      	bne.n	8013792 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	881b      	ldrh	r3, [r3, #0]
 8013716:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801371a:	d106      	bne.n	801372a <mem_trim+0xfa>
 801371c:	4b42      	ldr	r3, [pc, #264]	@ (8013828 <mem_trim+0x1f8>)
 801371e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013722:	4946      	ldr	r1, [pc, #280]	@ (801383c <mem_trim+0x20c>)
 8013724:	4842      	ldr	r0, [pc, #264]	@ (8013830 <mem_trim+0x200>)
 8013726:	f00c fbbd 	bl	801fea4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	881b      	ldrh	r3, [r3, #0]
 801372e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013730:	8afa      	ldrh	r2, [r7, #22]
 8013732:	8bfb      	ldrh	r3, [r7, #30]
 8013734:	4413      	add	r3, r2
 8013736:	b29b      	uxth	r3, r3
 8013738:	3308      	adds	r3, #8
 801373a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801373c:	4b40      	ldr	r3, [pc, #256]	@ (8013840 <mem_trim+0x210>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	693a      	ldr	r2, [r7, #16]
 8013742:	429a      	cmp	r2, r3
 8013744:	d106      	bne.n	8013754 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013746:	89fb      	ldrh	r3, [r7, #14]
 8013748:	4618      	mov	r0, r3
 801374a:	f7ff fd91 	bl	8013270 <ptr_to_mem>
 801374e:	4603      	mov	r3, r0
 8013750:	4a3b      	ldr	r2, [pc, #236]	@ (8013840 <mem_trim+0x210>)
 8013752:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013754:	89fb      	ldrh	r3, [r7, #14]
 8013756:	4618      	mov	r0, r3
 8013758:	f7ff fd8a 	bl	8013270 <ptr_to_mem>
 801375c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	2200      	movs	r2, #0
 8013762:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	89ba      	ldrh	r2, [r7, #12]
 8013768:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	8afa      	ldrh	r2, [r7, #22]
 801376e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	89fa      	ldrh	r2, [r7, #14]
 8013774:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801377e:	d047      	beq.n	8013810 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	881b      	ldrh	r3, [r3, #0]
 8013784:	4618      	mov	r0, r3
 8013786:	f7ff fd73 	bl	8013270 <ptr_to_mem>
 801378a:	4602      	mov	r2, r0
 801378c:	89fb      	ldrh	r3, [r7, #14]
 801378e:	8053      	strh	r3, [r2, #2]
 8013790:	e03e      	b.n	8013810 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013792:	8bfb      	ldrh	r3, [r7, #30]
 8013794:	f103 0214 	add.w	r2, r3, #20
 8013798:	8abb      	ldrh	r3, [r7, #20]
 801379a:	429a      	cmp	r2, r3
 801379c:	d838      	bhi.n	8013810 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801379e:	8afa      	ldrh	r2, [r7, #22]
 80137a0:	8bfb      	ldrh	r3, [r7, #30]
 80137a2:	4413      	add	r3, r2
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	3308      	adds	r3, #8
 80137a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	881b      	ldrh	r3, [r3, #0]
 80137ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80137b2:	d106      	bne.n	80137c2 <mem_trim+0x192>
 80137b4:	4b1c      	ldr	r3, [pc, #112]	@ (8013828 <mem_trim+0x1f8>)
 80137b6:	f240 3216 	movw	r2, #790	@ 0x316
 80137ba:	4920      	ldr	r1, [pc, #128]	@ (801383c <mem_trim+0x20c>)
 80137bc:	481c      	ldr	r0, [pc, #112]	@ (8013830 <mem_trim+0x200>)
 80137be:	f00c fb71 	bl	801fea4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80137c2:	89fb      	ldrh	r3, [r7, #14]
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7ff fd53 	bl	8013270 <ptr_to_mem>
 80137ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80137cc:	4b1c      	ldr	r3, [pc, #112]	@ (8013840 <mem_trim+0x210>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	693a      	ldr	r2, [r7, #16]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d202      	bcs.n	80137dc <mem_trim+0x1ac>
      lfree = mem2;
 80137d6:	4a1a      	ldr	r2, [pc, #104]	@ (8013840 <mem_trim+0x210>)
 80137d8:	693b      	ldr	r3, [r7, #16]
 80137da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	2200      	movs	r2, #0
 80137e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	881a      	ldrh	r2, [r3, #0]
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	8afa      	ldrh	r2, [r7, #22]
 80137ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	89fa      	ldrh	r2, [r7, #14]
 80137f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	881b      	ldrh	r3, [r3, #0]
 80137fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80137fe:	d007      	beq.n	8013810 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	881b      	ldrh	r3, [r3, #0]
 8013804:	4618      	mov	r0, r3
 8013806:	f7ff fd33 	bl	8013270 <ptr_to_mem>
 801380a:	4602      	mov	r2, r0
 801380c:	89fb      	ldrh	r3, [r7, #14]
 801380e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013810:	4809      	ldr	r0, [pc, #36]	@ (8013838 <mem_trim+0x208>)
 8013812:	f00b fb9a 	bl	801ef4a <sys_mutex_unlock>
  return rmem;
 8013816:	687b      	ldr	r3, [r7, #4]
}
 8013818:	4618      	mov	r0, r3
 801381a:	3720      	adds	r7, #32
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}
 8013820:	2001f674 	.word	0x2001f674
 8013824:	2001f678 	.word	0x2001f678
 8013828:	08021c98 	.word	0x08021c98
 801382c:	08021e24 	.word	0x08021e24
 8013830:	08021ce0 	.word	0x08021ce0
 8013834:	08021e3c 	.word	0x08021e3c
 8013838:	2001f67c 	.word	0x2001f67c
 801383c:	08021e5c 	.word	0x08021e5c
 8013840:	2001f680 	.word	0x2001f680

08013844 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b088      	sub	sp, #32
 8013848:	af00      	add	r7, sp, #0
 801384a:	4603      	mov	r3, r0
 801384c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801384e:	88fb      	ldrh	r3, [r7, #6]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d101      	bne.n	8013858 <mem_malloc+0x14>
    return NULL;
 8013854:	2300      	movs	r3, #0
 8013856:	e0e2      	b.n	8013a1e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013858:	88fb      	ldrh	r3, [r7, #6]
 801385a:	3303      	adds	r3, #3
 801385c:	b29b      	uxth	r3, r3
 801385e:	f023 0303 	bic.w	r3, r3, #3
 8013862:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013864:	8bbb      	ldrh	r3, [r7, #28]
 8013866:	2b0b      	cmp	r3, #11
 8013868:	d801      	bhi.n	801386e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801386a:	230c      	movs	r3, #12
 801386c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801386e:	8bbb      	ldrh	r3, [r7, #28]
 8013870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013874:	d803      	bhi.n	801387e <mem_malloc+0x3a>
 8013876:	8bba      	ldrh	r2, [r7, #28]
 8013878:	88fb      	ldrh	r3, [r7, #6]
 801387a:	429a      	cmp	r2, r3
 801387c:	d201      	bcs.n	8013882 <mem_malloc+0x3e>
    return NULL;
 801387e:	2300      	movs	r3, #0
 8013880:	e0cd      	b.n	8013a1e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013882:	4869      	ldr	r0, [pc, #420]	@ (8013a28 <mem_malloc+0x1e4>)
 8013884:	f00b fb52 	bl	801ef2c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013888:	4b68      	ldr	r3, [pc, #416]	@ (8013a2c <mem_malloc+0x1e8>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	4618      	mov	r0, r3
 801388e:	f7ff fd01 	bl	8013294 <mem_to_ptr>
 8013892:	4603      	mov	r3, r0
 8013894:	83fb      	strh	r3, [r7, #30]
 8013896:	e0b7      	b.n	8013a08 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013898:	8bfb      	ldrh	r3, [r7, #30]
 801389a:	4618      	mov	r0, r3
 801389c:	f7ff fce8 	bl	8013270 <ptr_to_mem>
 80138a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	791b      	ldrb	r3, [r3, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f040 80a7 	bne.w	80139fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	461a      	mov	r2, r3
 80138b2:	8bfb      	ldrh	r3, [r7, #30]
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	f1a3 0208 	sub.w	r2, r3, #8
 80138ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80138bc:	429a      	cmp	r2, r3
 80138be:	f0c0 809c 	bcc.w	80139fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	881b      	ldrh	r3, [r3, #0]
 80138c6:	461a      	mov	r2, r3
 80138c8:	8bfb      	ldrh	r3, [r7, #30]
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	f1a3 0208 	sub.w	r2, r3, #8
 80138d0:	8bbb      	ldrh	r3, [r7, #28]
 80138d2:	3314      	adds	r3, #20
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d333      	bcc.n	8013940 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80138d8:	8bfa      	ldrh	r2, [r7, #30]
 80138da:	8bbb      	ldrh	r3, [r7, #28]
 80138dc:	4413      	add	r3, r2
 80138de:	b29b      	uxth	r3, r3
 80138e0:	3308      	adds	r3, #8
 80138e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80138e4:	8a7b      	ldrh	r3, [r7, #18]
 80138e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80138ea:	d106      	bne.n	80138fa <mem_malloc+0xb6>
 80138ec:	4b50      	ldr	r3, [pc, #320]	@ (8013a30 <mem_malloc+0x1ec>)
 80138ee:	f240 3287 	movw	r2, #903	@ 0x387
 80138f2:	4950      	ldr	r1, [pc, #320]	@ (8013a34 <mem_malloc+0x1f0>)
 80138f4:	4850      	ldr	r0, [pc, #320]	@ (8013a38 <mem_malloc+0x1f4>)
 80138f6:	f00c fad5 	bl	801fea4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80138fa:	8a7b      	ldrh	r3, [r7, #18]
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7ff fcb7 	bl	8013270 <ptr_to_mem>
 8013902:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2200      	movs	r2, #0
 8013908:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	881a      	ldrh	r2, [r3, #0]
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	8bfa      	ldrh	r2, [r7, #30]
 8013916:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	8a7a      	ldrh	r2, [r7, #18]
 801391c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	2201      	movs	r2, #1
 8013922:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	881b      	ldrh	r3, [r3, #0]
 8013928:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801392c:	d00b      	beq.n	8013946 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	881b      	ldrh	r3, [r3, #0]
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff fc9c 	bl	8013270 <ptr_to_mem>
 8013938:	4602      	mov	r2, r0
 801393a:	8a7b      	ldrh	r3, [r7, #18]
 801393c:	8053      	strh	r3, [r2, #2]
 801393e:	e002      	b.n	8013946 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	2201      	movs	r2, #1
 8013944:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013946:	4b39      	ldr	r3, [pc, #228]	@ (8013a2c <mem_malloc+0x1e8>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	697a      	ldr	r2, [r7, #20]
 801394c:	429a      	cmp	r2, r3
 801394e:	d127      	bne.n	80139a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013950:	4b36      	ldr	r3, [pc, #216]	@ (8013a2c <mem_malloc+0x1e8>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013956:	e005      	b.n	8013964 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	881b      	ldrh	r3, [r3, #0]
 801395c:	4618      	mov	r0, r3
 801395e:	f7ff fc87 	bl	8013270 <ptr_to_mem>
 8013962:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	791b      	ldrb	r3, [r3, #4]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d004      	beq.n	8013976 <mem_malloc+0x132>
 801396c:	4b33      	ldr	r3, [pc, #204]	@ (8013a3c <mem_malloc+0x1f8>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	69ba      	ldr	r2, [r7, #24]
 8013972:	429a      	cmp	r2, r3
 8013974:	d1f0      	bne.n	8013958 <mem_malloc+0x114>
          }
          lfree = cur;
 8013976:	4a2d      	ldr	r2, [pc, #180]	@ (8013a2c <mem_malloc+0x1e8>)
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801397c:	4b2b      	ldr	r3, [pc, #172]	@ (8013a2c <mem_malloc+0x1e8>)
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	4b2e      	ldr	r3, [pc, #184]	@ (8013a3c <mem_malloc+0x1f8>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	429a      	cmp	r2, r3
 8013986:	d00b      	beq.n	80139a0 <mem_malloc+0x15c>
 8013988:	4b28      	ldr	r3, [pc, #160]	@ (8013a2c <mem_malloc+0x1e8>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	791b      	ldrb	r3, [r3, #4]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d006      	beq.n	80139a0 <mem_malloc+0x15c>
 8013992:	4b27      	ldr	r3, [pc, #156]	@ (8013a30 <mem_malloc+0x1ec>)
 8013994:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013998:	4929      	ldr	r1, [pc, #164]	@ (8013a40 <mem_malloc+0x1fc>)
 801399a:	4827      	ldr	r0, [pc, #156]	@ (8013a38 <mem_malloc+0x1f4>)
 801399c:	f00c fa82 	bl	801fea4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80139a0:	4821      	ldr	r0, [pc, #132]	@ (8013a28 <mem_malloc+0x1e4>)
 80139a2:	f00b fad2 	bl	801ef4a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80139a6:	8bba      	ldrh	r2, [r7, #28]
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	4413      	add	r3, r2
 80139ac:	3308      	adds	r3, #8
 80139ae:	4a23      	ldr	r2, [pc, #140]	@ (8013a3c <mem_malloc+0x1f8>)
 80139b0:	6812      	ldr	r2, [r2, #0]
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d906      	bls.n	80139c4 <mem_malloc+0x180>
 80139b6:	4b1e      	ldr	r3, [pc, #120]	@ (8013a30 <mem_malloc+0x1ec>)
 80139b8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80139bc:	4921      	ldr	r1, [pc, #132]	@ (8013a44 <mem_malloc+0x200>)
 80139be:	481e      	ldr	r0, [pc, #120]	@ (8013a38 <mem_malloc+0x1f4>)
 80139c0:	f00c fa70 	bl	801fea4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	f003 0303 	and.w	r3, r3, #3
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d006      	beq.n	80139dc <mem_malloc+0x198>
 80139ce:	4b18      	ldr	r3, [pc, #96]	@ (8013a30 <mem_malloc+0x1ec>)
 80139d0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80139d4:	491c      	ldr	r1, [pc, #112]	@ (8013a48 <mem_malloc+0x204>)
 80139d6:	4818      	ldr	r0, [pc, #96]	@ (8013a38 <mem_malloc+0x1f4>)
 80139d8:	f00c fa64 	bl	801fea4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	f003 0303 	and.w	r3, r3, #3
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d006      	beq.n	80139f4 <mem_malloc+0x1b0>
 80139e6:	4b12      	ldr	r3, [pc, #72]	@ (8013a30 <mem_malloc+0x1ec>)
 80139e8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80139ec:	4917      	ldr	r1, [pc, #92]	@ (8013a4c <mem_malloc+0x208>)
 80139ee:	4812      	ldr	r0, [pc, #72]	@ (8013a38 <mem_malloc+0x1f4>)
 80139f0:	f00c fa58 	bl	801fea4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	3308      	adds	r3, #8
 80139f8:	e011      	b.n	8013a1e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80139fa:	8bfb      	ldrh	r3, [r7, #30]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff fc37 	bl	8013270 <ptr_to_mem>
 8013a02:	4603      	mov	r3, r0
 8013a04:	881b      	ldrh	r3, [r3, #0]
 8013a06:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013a08:	8bfa      	ldrh	r2, [r7, #30]
 8013a0a:	8bbb      	ldrh	r3, [r7, #28]
 8013a0c:	f5c3 5340 	rsb	r3, r3, #12288	@ 0x3000
 8013a10:	429a      	cmp	r2, r3
 8013a12:	f4ff af41 	bcc.w	8013898 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013a16:	4804      	ldr	r0, [pc, #16]	@ (8013a28 <mem_malloc+0x1e4>)
 8013a18:	f00b fa97 	bl	801ef4a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013a1c:	2300      	movs	r3, #0
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3720      	adds	r7, #32
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	2001f67c 	.word	0x2001f67c
 8013a2c:	2001f680 	.word	0x2001f680
 8013a30:	08021c98 	.word	0x08021c98
 8013a34:	08021e5c 	.word	0x08021e5c
 8013a38:	08021ce0 	.word	0x08021ce0
 8013a3c:	2001f678 	.word	0x2001f678
 8013a40:	08021e70 	.word	0x08021e70
 8013a44:	08021e8c 	.word	0x08021e8c
 8013a48:	08021ebc 	.word	0x08021ebc
 8013a4c:	08021eec 	.word	0x08021eec

08013a50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013a50:	b480      	push	{r7}
 8013a52:	b085      	sub	sp, #20
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	689b      	ldr	r3, [r3, #8]
 8013a64:	3303      	adds	r3, #3
 8013a66:	f023 0303 	bic.w	r3, r3, #3
 8013a6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	60fb      	str	r3, [r7, #12]
 8013a70:	e011      	b.n	8013a96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	68db      	ldr	r3, [r3, #12]
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	889b      	ldrh	r3, [r3, #4]
 8013a88:	461a      	mov	r2, r3
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	4413      	add	r3, r2
 8013a8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	3301      	adds	r3, #1
 8013a94:	60fb      	str	r3, [r7, #12]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	88db      	ldrh	r3, [r3, #6]
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	dbe7      	blt.n	8013a72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013aa2:	bf00      	nop
 8013aa4:	bf00      	nop
 8013aa6:	3714      	adds	r7, #20
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr

08013ab0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	80fb      	strh	r3, [r7, #6]
 8013aba:	e009      	b.n	8013ad0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013abc:	88fb      	ldrh	r3, [r7, #6]
 8013abe:	4a08      	ldr	r2, [pc, #32]	@ (8013ae0 <memp_init+0x30>)
 8013ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff ffc3 	bl	8013a50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013aca:	88fb      	ldrh	r3, [r7, #6]
 8013acc:	3301      	adds	r3, #1
 8013ace:	80fb      	strh	r3, [r7, #6]
 8013ad0:	88fb      	ldrh	r3, [r7, #6]
 8013ad2:	2b0c      	cmp	r3, #12
 8013ad4:	d9f2      	bls.n	8013abc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013ad6:	bf00      	nop
 8013ad8:	bf00      	nop
 8013ada:	3708      	adds	r7, #8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	08025414 	.word	0x08025414

08013ae4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013aec:	f00b fa5a 	bl	801efa4 <sys_arch_protect>
 8013af0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d015      	beq.n	8013b2c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	68ba      	ldr	r2, [r7, #8]
 8013b06:	6812      	ldr	r2, [r2, #0]
 8013b08:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	f003 0303 	and.w	r3, r3, #3
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d006      	beq.n	8013b22 <do_memp_malloc_pool+0x3e>
 8013b14:	4b09      	ldr	r3, [pc, #36]	@ (8013b3c <do_memp_malloc_pool+0x58>)
 8013b16:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013b1a:	4909      	ldr	r1, [pc, #36]	@ (8013b40 <do_memp_malloc_pool+0x5c>)
 8013b1c:	4809      	ldr	r0, [pc, #36]	@ (8013b44 <do_memp_malloc_pool+0x60>)
 8013b1e:	f00c f9c1 	bl	801fea4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013b22:	68f8      	ldr	r0, [r7, #12]
 8013b24:	f00b fa4c 	bl	801efc0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	e003      	b.n	8013b34 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f00b fa47 	bl	801efc0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013b32:	2300      	movs	r3, #0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3710      	adds	r7, #16
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	08021fa8 	.word	0x08021fa8
 8013b40:	08021fd8 	.word	0x08021fd8
 8013b44:	08021ffc 	.word	0x08021ffc

08013b48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d106      	bne.n	8013b64 <memp_malloc_pool+0x1c>
 8013b56:	4b0a      	ldr	r3, [pc, #40]	@ (8013b80 <memp_malloc_pool+0x38>)
 8013b58:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013b5c:	4909      	ldr	r1, [pc, #36]	@ (8013b84 <memp_malloc_pool+0x3c>)
 8013b5e:	480a      	ldr	r0, [pc, #40]	@ (8013b88 <memp_malloc_pool+0x40>)
 8013b60:	f00c f9a0 	bl	801fea4 <iprintf>
  if (desc == NULL) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d101      	bne.n	8013b6e <memp_malloc_pool+0x26>
    return NULL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e003      	b.n	8013b76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7ff ffb8 	bl	8013ae4 <do_memp_malloc_pool>
 8013b74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3708      	adds	r7, #8
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	08021fa8 	.word	0x08021fa8
 8013b84:	08022024 	.word	0x08022024
 8013b88:	08021ffc 	.word	0x08021ffc

08013b8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	4603      	mov	r3, r0
 8013b94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013b96:	79fb      	ldrb	r3, [r7, #7]
 8013b98:	2b0c      	cmp	r3, #12
 8013b9a:	d908      	bls.n	8013bae <memp_malloc+0x22>
 8013b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8013bc8 <memp_malloc+0x3c>)
 8013b9e:	f240 1257 	movw	r2, #343	@ 0x157
 8013ba2:	490a      	ldr	r1, [pc, #40]	@ (8013bcc <memp_malloc+0x40>)
 8013ba4:	480a      	ldr	r0, [pc, #40]	@ (8013bd0 <memp_malloc+0x44>)
 8013ba6:	f00c f97d 	bl	801fea4 <iprintf>
 8013baa:	2300      	movs	r3, #0
 8013bac:	e008      	b.n	8013bc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013bae:	79fb      	ldrb	r3, [r7, #7]
 8013bb0:	4a08      	ldr	r2, [pc, #32]	@ (8013bd4 <memp_malloc+0x48>)
 8013bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7ff ff94 	bl	8013ae4 <do_memp_malloc_pool>
 8013bbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3710      	adds	r7, #16
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	08021fa8 	.word	0x08021fa8
 8013bcc:	08022038 	.word	0x08022038
 8013bd0:	08021ffc 	.word	0x08021ffc
 8013bd4:	08025414 	.word	0x08025414

08013bd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	f003 0303 	and.w	r3, r3, #3
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d006      	beq.n	8013bfa <do_memp_free_pool+0x22>
 8013bec:	4b0d      	ldr	r3, [pc, #52]	@ (8013c24 <do_memp_free_pool+0x4c>)
 8013bee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013bf2:	490d      	ldr	r1, [pc, #52]	@ (8013c28 <do_memp_free_pool+0x50>)
 8013bf4:	480d      	ldr	r0, [pc, #52]	@ (8013c2c <do_memp_free_pool+0x54>)
 8013bf6:	f00c f955 	bl	801fea4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013bfe:	f00b f9d1 	bl	801efa4 <sys_arch_protect>
 8013c02:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	68db      	ldr	r3, [r3, #12]
 8013c12:	68fa      	ldr	r2, [r7, #12]
 8013c14:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013c16:	68b8      	ldr	r0, [r7, #8]
 8013c18:	f00b f9d2 	bl	801efc0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013c1c:	bf00      	nop
 8013c1e:	3710      	adds	r7, #16
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	08021fa8 	.word	0x08021fa8
 8013c28:	08022058 	.word	0x08022058
 8013c2c:	08021ffc 	.word	0x08021ffc

08013c30 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d106      	bne.n	8013c4e <memp_free_pool+0x1e>
 8013c40:	4b0a      	ldr	r3, [pc, #40]	@ (8013c6c <memp_free_pool+0x3c>)
 8013c42:	f240 1295 	movw	r2, #405	@ 0x195
 8013c46:	490a      	ldr	r1, [pc, #40]	@ (8013c70 <memp_free_pool+0x40>)
 8013c48:	480a      	ldr	r0, [pc, #40]	@ (8013c74 <memp_free_pool+0x44>)
 8013c4a:	f00c f92b 	bl	801fea4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d007      	beq.n	8013c64 <memp_free_pool+0x34>
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d004      	beq.n	8013c64 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013c5a:	6839      	ldr	r1, [r7, #0]
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7ff ffbb 	bl	8013bd8 <do_memp_free_pool>
 8013c62:	e000      	b.n	8013c66 <memp_free_pool+0x36>
    return;
 8013c64:	bf00      	nop
}
 8013c66:	3708      	adds	r7, #8
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	08021fa8 	.word	0x08021fa8
 8013c70:	08022024 	.word	0x08022024
 8013c74:	08021ffc 	.word	0x08021ffc

08013c78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	4603      	mov	r3, r0
 8013c80:	6039      	str	r1, [r7, #0]
 8013c82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013c84:	79fb      	ldrb	r3, [r7, #7]
 8013c86:	2b0c      	cmp	r3, #12
 8013c88:	d907      	bls.n	8013c9a <memp_free+0x22>
 8013c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8013cbc <memp_free+0x44>)
 8013c8c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013c90:	490b      	ldr	r1, [pc, #44]	@ (8013cc0 <memp_free+0x48>)
 8013c92:	480c      	ldr	r0, [pc, #48]	@ (8013cc4 <memp_free+0x4c>)
 8013c94:	f00c f906 	bl	801fea4 <iprintf>
 8013c98:	e00c      	b.n	8013cb4 <memp_free+0x3c>

  if (mem == NULL) {
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d008      	beq.n	8013cb2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013ca0:	79fb      	ldrb	r3, [r7, #7]
 8013ca2:	4a09      	ldr	r2, [pc, #36]	@ (8013cc8 <memp_free+0x50>)
 8013ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ca8:	6839      	ldr	r1, [r7, #0]
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7ff ff94 	bl	8013bd8 <do_memp_free_pool>
 8013cb0:	e000      	b.n	8013cb4 <memp_free+0x3c>
    return;
 8013cb2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	08021fa8 	.word	0x08021fa8
 8013cc0:	08022078 	.word	0x08022078
 8013cc4:	08021ffc 	.word	0x08021ffc
 8013cc8:	08025414 	.word	0x08025414

08013ccc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013cd0:	bf00      	nop
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd8:	4770      	bx	lr
	...

08013cdc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b088      	sub	sp, #32
 8013ce0:	af02      	add	r7, sp, #8
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
 8013ce8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d108      	bne.n	8013d02 <netif_add+0x26>
 8013cf0:	4b96      	ldr	r3, [pc, #600]	@ (8013f4c <netif_add+0x270>)
 8013cf2:	f240 1227 	movw	r2, #295	@ 0x127
 8013cf6:	4996      	ldr	r1, [pc, #600]	@ (8013f50 <netif_add+0x274>)
 8013cf8:	4896      	ldr	r0, [pc, #600]	@ (8013f54 <netif_add+0x278>)
 8013cfa:	f00c f8d3 	bl	801fea4 <iprintf>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	e14c      	b.n	8013f9c <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d108      	bne.n	8013d1a <netif_add+0x3e>
 8013d08:	4b90      	ldr	r3, [pc, #576]	@ (8013f4c <netif_add+0x270>)
 8013d0a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013d0e:	4992      	ldr	r1, [pc, #584]	@ (8013f58 <netif_add+0x27c>)
 8013d10:	4890      	ldr	r0, [pc, #576]	@ (8013f54 <netif_add+0x278>)
 8013d12:	f00c f8c7 	bl	801fea4 <iprintf>
 8013d16:	2300      	movs	r3, #0
 8013d18:	e140      	b.n	8013f9c <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d101      	bne.n	8013d24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013d20:	4b8e      	ldr	r3, [pc, #568]	@ (8013f5c <netif_add+0x280>)
 8013d22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d101      	bne.n	8013d2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013d2a:	4b8c      	ldr	r3, [pc, #560]	@ (8013f5c <netif_add+0x280>)
 8013d2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d101      	bne.n	8013d38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013d34:	4b89      	ldr	r3, [pc, #548]	@ (8013f5c <netif_add+0x280>)
 8013d36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2200      	movs	r2, #0
 8013d42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2200      	movs	r2, #0
 8013d48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	4a84      	ldr	r2, [pc, #528]	@ (8013f60 <netif_add+0x284>)
 8013d4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2200      	movs	r2, #0
 8013d54:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	2200      	movs	r2, #0
 8013d62:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	6a3a      	ldr	r2, [r7, #32]
 8013d68:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013d6a:	4b7e      	ldr	r3, [pc, #504]	@ (8013f64 <netif_add+0x288>)
 8013d6c:	781a      	ldrb	r2, [r3, #0]
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d78:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	68b9      	ldr	r1, [r7, #8]
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f000 f9f5 	bl	8014170 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d88:	68f8      	ldr	r0, [r7, #12]
 8013d8a:	4798      	blx	r3
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <netif_add+0xba>
    return NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	e102      	b.n	8013f9c <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013d9c:	2bff      	cmp	r3, #255	@ 0xff
 8013d9e:	d103      	bne.n	8013da8 <netif_add+0xcc>
        netif->num = 0;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	2200      	movs	r2, #0
 8013da4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013da8:	2300      	movs	r3, #0
 8013daa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013dac:	4b6e      	ldr	r3, [pc, #440]	@ (8013f68 <netif_add+0x28c>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	617b      	str	r3, [r7, #20]
 8013db2:	e02b      	b.n	8013e0c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013db4:	697a      	ldr	r2, [r7, #20]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d106      	bne.n	8013dca <netif_add+0xee>
 8013dbc:	4b63      	ldr	r3, [pc, #396]	@ (8013f4c <netif_add+0x270>)
 8013dbe:	f240 128b 	movw	r2, #395	@ 0x18b
 8013dc2:	496a      	ldr	r1, [pc, #424]	@ (8013f6c <netif_add+0x290>)
 8013dc4:	4863      	ldr	r0, [pc, #396]	@ (8013f54 <netif_add+0x278>)
 8013dc6:	f00c f86d 	bl	801fea4 <iprintf>
        num_netifs++;
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	2bff      	cmp	r3, #255	@ 0xff
 8013dd4:	dd06      	ble.n	8013de4 <netif_add+0x108>
 8013dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8013f4c <netif_add+0x270>)
 8013dd8:	f240 128d 	movw	r2, #397	@ 0x18d
 8013ddc:	4964      	ldr	r1, [pc, #400]	@ (8013f70 <netif_add+0x294>)
 8013dde:	485d      	ldr	r0, [pc, #372]	@ (8013f54 <netif_add+0x278>)
 8013de0:	f00c f860 	bl	801fea4 <iprintf>
        if (netif2->num == netif->num) {
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d108      	bne.n	8013e06 <netif_add+0x12a>
          netif->num++;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	b2da      	uxtb	r2, r3
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013e04:	e005      	b.n	8013e12 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	617b      	str	r3, [r7, #20]
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1d0      	bne.n	8013db4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d1be      	bne.n	8013d96 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e1e:	2bfe      	cmp	r3, #254	@ 0xfe
 8013e20:	d103      	bne.n	8013e2a <netif_add+0x14e>
    netif_num = 0;
 8013e22:	4b50      	ldr	r3, [pc, #320]	@ (8013f64 <netif_add+0x288>)
 8013e24:	2200      	movs	r2, #0
 8013e26:	701a      	strb	r2, [r3, #0]
 8013e28:	e006      	b.n	8013e38 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e30:	3301      	adds	r3, #1
 8013e32:	b2da      	uxtb	r2, r3
 8013e34:	4b4b      	ldr	r3, [pc, #300]	@ (8013f64 <netif_add+0x288>)
 8013e36:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013e38:	4b4b      	ldr	r3, [pc, #300]	@ (8013f68 <netif_add+0x28c>)
 8013e3a:	681a      	ldr	r2, [r3, #0]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013e40:	4a49      	ldr	r2, [pc, #292]	@ (8013f68 <netif_add+0x28c>)
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013e54:	461a      	mov	r2, r3
 8013e56:	4847      	ldr	r0, [pc, #284]	@ (8013f74 <netif_add+0x298>)
 8013e58:	f00c f824 	bl	801fea4 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8013e5c:	4846      	ldr	r0, [pc, #280]	@ (8013f78 <netif_add+0x29c>)
 8013e5e:	f00c f821 	bl	801fea4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d003      	beq.n	8013e70 <netif_add+0x194>
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	e000      	b.n	8013e72 <netif_add+0x196>
 8013e70:	2100      	movs	r1, #0
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d004      	beq.n	8013e82 <netif_add+0x1a6>
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	e000      	b.n	8013e84 <netif_add+0x1a8>
 8013e82:	2200      	movs	r2, #0
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d004      	beq.n	8013e94 <netif_add+0x1b8>
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	3302      	adds	r3, #2
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	4618      	mov	r0, r3
 8013e92:	e000      	b.n	8013e96 <netif_add+0x1ba>
 8013e94:	2000      	movs	r0, #0
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d003      	beq.n	8013ea4 <netif_add+0x1c8>
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	3303      	adds	r3, #3
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	e000      	b.n	8013ea6 <netif_add+0x1ca>
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	9300      	str	r3, [sp, #0]
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	4834      	ldr	r0, [pc, #208]	@ (8013f7c <netif_add+0x2a0>)
 8013eac:	f00b fffa 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8013eb0:	4833      	ldr	r0, [pc, #204]	@ (8013f80 <netif_add+0x2a4>)
 8013eb2:	f00b fff7 	bl	801fea4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d003      	beq.n	8013ec4 <netif_add+0x1e8>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	e000      	b.n	8013ec6 <netif_add+0x1ea>
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d004      	beq.n	8013ed6 <netif_add+0x1fa>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	3301      	adds	r3, #1
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	e000      	b.n	8013ed8 <netif_add+0x1fc>
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d004      	beq.n	8013ee8 <netif_add+0x20c>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	3302      	adds	r3, #2
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	e000      	b.n	8013eea <netif_add+0x20e>
 8013ee8:	2000      	movs	r0, #0
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d003      	beq.n	8013ef8 <netif_add+0x21c>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	3303      	adds	r3, #3
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	e000      	b.n	8013efa <netif_add+0x21e>
 8013ef8:	2300      	movs	r3, #0
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	4603      	mov	r3, r0
 8013efe:	481f      	ldr	r0, [pc, #124]	@ (8013f7c <netif_add+0x2a0>)
 8013f00:	f00b ffd0 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8013f04:	481f      	ldr	r0, [pc, #124]	@ (8013f84 <netif_add+0x2a8>)
 8013f06:	f00b ffcd 	bl	801fea4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d003      	beq.n	8013f18 <netif_add+0x23c>
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	4619      	mov	r1, r3
 8013f16:	e000      	b.n	8013f1a <netif_add+0x23e>
 8013f18:	2100      	movs	r1, #0
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d004      	beq.n	8013f2a <netif_add+0x24e>
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	3301      	adds	r3, #1
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	461a      	mov	r2, r3
 8013f28:	e000      	b.n	8013f2c <netif_add+0x250>
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d004      	beq.n	8013f3c <netif_add+0x260>
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	3302      	adds	r3, #2
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	4618      	mov	r0, r3
 8013f3a:	e000      	b.n	8013f3e <netif_add+0x262>
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d021      	beq.n	8013f88 <netif_add+0x2ac>
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	3303      	adds	r3, #3
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	e01e      	b.n	8013f8a <netif_add+0x2ae>
 8013f4c:	08022094 	.word	0x08022094
 8013f50:	08022128 	.word	0x08022128
 8013f54:	080220e4 	.word	0x080220e4
 8013f58:	08022144 	.word	0x08022144
 8013f5c:	08025488 	.word	0x08025488
 8013f60:	08014473 	.word	0x08014473
 8013f64:	20022798 	.word	0x20022798
 8013f68:	20022790 	.word	0x20022790
 8013f6c:	08022168 	.word	0x08022168
 8013f70:	0802217c 	.word	0x0802217c
 8013f74:	080221ac 	.word	0x080221ac
 8013f78:	080221cc 	.word	0x080221cc
 8013f7c:	080221d4 	.word	0x080221d4
 8013f80:	080221e4 	.word	0x080221e4
 8013f84:	080221f0 	.word	0x080221f0
 8013f88:	2300      	movs	r3, #0
 8013f8a:	9300      	str	r3, [sp, #0]
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	4805      	ldr	r0, [pc, #20]	@ (8013fa4 <netif_add+0x2c8>)
 8013f90:	f00b ff88 	bl	801fea4 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8013f94:	200a      	movs	r0, #10
 8013f96:	f00b ff97 	bl	801fec8 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3718      	adds	r7, #24
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}
 8013fa4:	080221d4 	.word	0x080221d4

08013fa8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013fb2:	6839      	ldr	r1, [r7, #0]
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f002 ff13 	bl	8016de0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013fba:	6839      	ldr	r1, [r7, #0]
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f008 fa5f 	bl	801c480 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013fc2:	bf00      	nop
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
	...

08013fcc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b086      	sub	sp, #24
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d106      	bne.n	8013fec <netif_do_set_ipaddr+0x20>
 8013fde:	4b1e      	ldr	r3, [pc, #120]	@ (8014058 <netif_do_set_ipaddr+0x8c>)
 8013fe0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013fe4:	491d      	ldr	r1, [pc, #116]	@ (801405c <netif_do_set_ipaddr+0x90>)
 8013fe6:	481e      	ldr	r0, [pc, #120]	@ (8014060 <netif_do_set_ipaddr+0x94>)
 8013fe8:	f00b ff5c 	bl	801fea4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d106      	bne.n	8014000 <netif_do_set_ipaddr+0x34>
 8013ff2:	4b19      	ldr	r3, [pc, #100]	@ (8014058 <netif_do_set_ipaddr+0x8c>)
 8013ff4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013ff8:	4918      	ldr	r1, [pc, #96]	@ (801405c <netif_do_set_ipaddr+0x90>)
 8013ffa:	4819      	ldr	r0, [pc, #100]	@ (8014060 <netif_do_set_ipaddr+0x94>)
 8013ffc:	f00b ff52 	bl	801fea4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	3304      	adds	r3, #4
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	429a      	cmp	r2, r3
 801400c:	d01f      	beq.n	801404e <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	3304      	adds	r3, #4
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 801401e:	4811      	ldr	r0, [pc, #68]	@ (8014064 <netif_do_set_ipaddr+0x98>)
 8014020:	f00b ffb0 	bl	801ff84 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014024:	f107 0314 	add.w	r3, r7, #20
 8014028:	4619      	mov	r1, r3
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f7ff ffbc 	bl	8013fa8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d002      	beq.n	801403c <netif_do_set_ipaddr+0x70>
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	e000      	b.n	801403e <netif_do_set_ipaddr+0x72>
 801403c:	2300      	movs	r3, #0
 801403e:	68fa      	ldr	r2, [r7, #12]
 8014040:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014042:	2101      	movs	r1, #1
 8014044:	68f8      	ldr	r0, [r7, #12]
 8014046:	f000 f92d 	bl	80142a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801404a:	2301      	movs	r3, #1
 801404c:	e000      	b.n	8014050 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	3718      	adds	r7, #24
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	08022094 	.word	0x08022094
 801405c:	080221f8 	.word	0x080221f8
 8014060:	080220e4 	.word	0x080220e4
 8014064:	08022208 	.word	0x08022208

08014068 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014068:	b5b0      	push	{r4, r5, r7, lr}
 801406a:	b088      	sub	sp, #32
 801406c:	af04      	add	r7, sp, #16
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	3308      	adds	r3, #8
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	429a      	cmp	r2, r3
 8014080:	d02d      	beq.n	80140de <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d002      	beq.n	801408e <netif_do_set_netmask+0x26>
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	e000      	b.n	8014090 <netif_do_set_netmask+0x28>
 801408e:	2300      	movs	r3, #0
 8014090:	68fa      	ldr	r2, [r7, #12]
 8014092:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801409a:	4618      	mov	r0, r3
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80140a2:	461c      	mov	r4, r3
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	3308      	adds	r3, #8
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	461d      	mov	r5, r3
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	3308      	adds	r3, #8
 80140b0:	3301      	adds	r3, #1
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	461a      	mov	r2, r3
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	3308      	adds	r3, #8
 80140ba:	3302      	adds	r3, #2
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	4619      	mov	r1, r3
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	3308      	adds	r3, #8
 80140c4:	3303      	adds	r3, #3
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	9302      	str	r3, [sp, #8]
 80140ca:	9101      	str	r1, [sp, #4]
 80140cc:	9200      	str	r2, [sp, #0]
 80140ce:	462b      	mov	r3, r5
 80140d0:	4622      	mov	r2, r4
 80140d2:	4601      	mov	r1, r0
 80140d4:	4804      	ldr	r0, [pc, #16]	@ (80140e8 <netif_do_set_netmask+0x80>)
 80140d6:	f00b fee5 	bl	801fea4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80140da:	2301      	movs	r3, #1
 80140dc:	e000      	b.n	80140e0 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 80140de:	2300      	movs	r3, #0
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3710      	adds	r7, #16
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bdb0      	pop	{r4, r5, r7, pc}
 80140e8:	08022258 	.word	0x08022258

080140ec <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80140ec:	b5b0      	push	{r4, r5, r7, lr}
 80140ee:	b088      	sub	sp, #32
 80140f0:	af04      	add	r7, sp, #16
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	330c      	adds	r3, #12
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	429a      	cmp	r2, r3
 8014104:	d02d      	beq.n	8014162 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d002      	beq.n	8014112 <netif_do_set_gw+0x26>
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	e000      	b.n	8014114 <netif_do_set_gw+0x28>
 8014112:	2300      	movs	r3, #0
 8014114:	68fa      	ldr	r2, [r7, #12]
 8014116:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801411e:	4618      	mov	r0, r3
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014126:	461c      	mov	r4, r3
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	330c      	adds	r3, #12
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	461d      	mov	r5, r3
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	330c      	adds	r3, #12
 8014134:	3301      	adds	r3, #1
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	461a      	mov	r2, r3
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	330c      	adds	r3, #12
 801413e:	3302      	adds	r3, #2
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	4619      	mov	r1, r3
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	330c      	adds	r3, #12
 8014148:	3303      	adds	r3, #3
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	9302      	str	r3, [sp, #8]
 801414e:	9101      	str	r1, [sp, #4]
 8014150:	9200      	str	r2, [sp, #0]
 8014152:	462b      	mov	r3, r5
 8014154:	4622      	mov	r2, r4
 8014156:	4601      	mov	r1, r0
 8014158:	4804      	ldr	r0, [pc, #16]	@ (801416c <netif_do_set_gw+0x80>)
 801415a:	f00b fea3 	bl	801fea4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801415e:	2301      	movs	r3, #1
 8014160:	e000      	b.n	8014164 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8014162:	2300      	movs	r3, #0
}
 8014164:	4618      	mov	r0, r3
 8014166:	3710      	adds	r7, #16
 8014168:	46bd      	mov	sp, r7
 801416a:	bdb0      	pop	{r4, r5, r7, pc}
 801416c:	080222b8 	.word	0x080222b8

08014170 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b088      	sub	sp, #32
 8014174:	af00      	add	r7, sp, #0
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
 801417c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801417e:	2300      	movs	r3, #0
 8014180:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014182:	2300      	movs	r3, #0
 8014184:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d101      	bne.n	8014190 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801418c:	4b1c      	ldr	r3, [pc, #112]	@ (8014200 <netif_set_addr+0x90>)
 801418e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d101      	bne.n	801419a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014196:	4b1a      	ldr	r3, [pc, #104]	@ (8014200 <netif_set_addr+0x90>)
 8014198:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d101      	bne.n	80141a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80141a0:	4b17      	ldr	r3, [pc, #92]	@ (8014200 <netif_set_addr+0x90>)
 80141a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d003      	beq.n	80141b2 <netif_set_addr+0x42>
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d101      	bne.n	80141b6 <netif_set_addr+0x46>
 80141b2:	2301      	movs	r3, #1
 80141b4:	e000      	b.n	80141b8 <netif_set_addr+0x48>
 80141b6:	2300      	movs	r3, #0
 80141b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d006      	beq.n	80141ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80141c0:	f107 0310 	add.w	r3, r7, #16
 80141c4:	461a      	mov	r2, r3
 80141c6:	68b9      	ldr	r1, [r7, #8]
 80141c8:	68f8      	ldr	r0, [r7, #12]
 80141ca:	f7ff feff 	bl	8013fcc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80141ce:	69fa      	ldr	r2, [r7, #28]
 80141d0:	6879      	ldr	r1, [r7, #4]
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f7ff ff48 	bl	8014068 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80141d8:	69ba      	ldr	r2, [r7, #24]
 80141da:	6839      	ldr	r1, [r7, #0]
 80141dc:	68f8      	ldr	r0, [r7, #12]
 80141de:	f7ff ff85 	bl	80140ec <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d106      	bne.n	80141f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80141e8:	f107 0310 	add.w	r3, r7, #16
 80141ec:	461a      	mov	r2, r3
 80141ee:	68b9      	ldr	r1, [r7, #8]
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	f7ff feeb 	bl	8013fcc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80141f6:	bf00      	nop
 80141f8:	3720      	adds	r7, #32
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}
 80141fe:	bf00      	nop
 8014200:	08025488 	.word	0x08025488

08014204 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801420c:	4a0d      	ldr	r2, [pc, #52]	@ (8014244 <netif_set_default+0x40>)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d004      	beq.n	8014222 <netif_set_default+0x1e>
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801421e:	4619      	mov	r1, r3
 8014220:	e000      	b.n	8014224 <netif_set_default+0x20>
 8014222:	2127      	movs	r1, #39	@ 0x27
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d003      	beq.n	8014232 <netif_set_default+0x2e>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014230:	e000      	b.n	8014234 <netif_set_default+0x30>
 8014232:	2327      	movs	r3, #39	@ 0x27
 8014234:	461a      	mov	r2, r3
 8014236:	4804      	ldr	r0, [pc, #16]	@ (8014248 <netif_set_default+0x44>)
 8014238:	f00b fe34 	bl	801fea4 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801423c:	bf00      	nop
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	20022794 	.word	0x20022794
 8014248:	0802232c 	.word	0x0802232c

0801424c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d107      	bne.n	801426a <netif_set_up+0x1e>
 801425a:	4b0f      	ldr	r3, [pc, #60]	@ (8014298 <netif_set_up+0x4c>)
 801425c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8014260:	490e      	ldr	r1, [pc, #56]	@ (801429c <netif_set_up+0x50>)
 8014262:	480f      	ldr	r0, [pc, #60]	@ (80142a0 <netif_set_up+0x54>)
 8014264:	f00b fe1e 	bl	801fea4 <iprintf>
 8014268:	e013      	b.n	8014292 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014270:	f003 0301 	and.w	r3, r3, #1
 8014274:	2b00      	cmp	r3, #0
 8014276:	d10c      	bne.n	8014292 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801427e:	f043 0301 	orr.w	r3, r3, #1
 8014282:	b2da      	uxtb	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801428a:	2103      	movs	r1, #3
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f000 f809 	bl	80142a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8014292:	3708      	adds	r7, #8
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	08022094 	.word	0x08022094
 801429c:	08022354 	.word	0x08022354
 80142a0:	080220e4 	.word	0x080220e4

080142a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	460b      	mov	r3, r1
 80142ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d106      	bne.n	80142c4 <netif_issue_reports+0x20>
 80142b6:	4b18      	ldr	r3, [pc, #96]	@ (8014318 <netif_issue_reports+0x74>)
 80142b8:	f240 326d 	movw	r2, #877	@ 0x36d
 80142bc:	4917      	ldr	r1, [pc, #92]	@ (801431c <netif_issue_reports+0x78>)
 80142be:	4818      	ldr	r0, [pc, #96]	@ (8014320 <netif_issue_reports+0x7c>)
 80142c0:	f00b fdf0 	bl	801fea4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80142ca:	f003 0304 	and.w	r3, r3, #4
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d01e      	beq.n	8014310 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80142d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d017      	beq.n	8014310 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80142e0:	78fb      	ldrb	r3, [r7, #3]
 80142e2:	f003 0301 	and.w	r3, r3, #1
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d013      	beq.n	8014312 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	3304      	adds	r3, #4
 80142ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00e      	beq.n	8014312 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80142fa:	f003 0308 	and.w	r3, r3, #8
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d007      	beq.n	8014312 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	3304      	adds	r3, #4
 8014306:	4619      	mov	r1, r3
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f009 f895 	bl	801d438 <etharp_request>
 801430e:	e000      	b.n	8014312 <netif_issue_reports+0x6e>
    return;
 8014310:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014312:	3708      	adds	r7, #8
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	08022094 	.word	0x08022094
 801431c:	08022370 	.word	0x08022370
 8014320:	080220e4 	.word	0x080220e4

08014324 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d107      	bne.n	8014342 <netif_set_down+0x1e>
 8014332:	4b12      	ldr	r3, [pc, #72]	@ (801437c <netif_set_down+0x58>)
 8014334:	f240 329b 	movw	r2, #923	@ 0x39b
 8014338:	4911      	ldr	r1, [pc, #68]	@ (8014380 <netif_set_down+0x5c>)
 801433a:	4812      	ldr	r0, [pc, #72]	@ (8014384 <netif_set_down+0x60>)
 801433c:	f00b fdb2 	bl	801fea4 <iprintf>
 8014340:	e019      	b.n	8014376 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014348:	f003 0301 	and.w	r3, r3, #1
 801434c:	2b00      	cmp	r3, #0
 801434e:	d012      	beq.n	8014376 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014356:	f023 0301 	bic.w	r3, r3, #1
 801435a:	b2da      	uxtb	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014368:	f003 0308 	and.w	r3, r3, #8
 801436c:	2b00      	cmp	r3, #0
 801436e:	d002      	beq.n	8014376 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f008 fc1f 	bl	801cbb4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	08022094 	.word	0x08022094
 8014380:	08022394 	.word	0x08022394
 8014384:	080220e4 	.word	0x080220e4

08014388 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b082      	sub	sp, #8
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d107      	bne.n	80143a6 <netif_set_link_up+0x1e>
 8014396:	4b13      	ldr	r3, [pc, #76]	@ (80143e4 <netif_set_link_up+0x5c>)
 8014398:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801439c:	4912      	ldr	r1, [pc, #72]	@ (80143e8 <netif_set_link_up+0x60>)
 801439e:	4813      	ldr	r0, [pc, #76]	@ (80143ec <netif_set_link_up+0x64>)
 80143a0:	f00b fd80 	bl	801fea4 <iprintf>
 80143a4:	e01b      	b.n	80143de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80143ac:	f003 0304 	and.w	r3, r3, #4
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d114      	bne.n	80143de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80143ba:	f043 0304 	orr.w	r3, r3, #4
 80143be:	b2da      	uxtb	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80143c6:	2103      	movs	r1, #3
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f7ff ff6b 	bl	80142a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	69db      	ldr	r3, [r3, #28]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d003      	beq.n	80143de <netif_set_link_up+0x56>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	69db      	ldr	r3, [r3, #28]
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80143de:	3708      	adds	r7, #8
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	08022094 	.word	0x08022094
 80143e8:	080223b4 	.word	0x080223b4
 80143ec:	080220e4 	.word	0x080220e4

080143f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d107      	bne.n	801440e <netif_set_link_down+0x1e>
 80143fe:	4b11      	ldr	r3, [pc, #68]	@ (8014444 <netif_set_link_down+0x54>)
 8014400:	f240 4206 	movw	r2, #1030	@ 0x406
 8014404:	4910      	ldr	r1, [pc, #64]	@ (8014448 <netif_set_link_down+0x58>)
 8014406:	4811      	ldr	r0, [pc, #68]	@ (801444c <netif_set_link_down+0x5c>)
 8014408:	f00b fd4c 	bl	801fea4 <iprintf>
 801440c:	e017      	b.n	801443e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014414:	f003 0304 	and.w	r3, r3, #4
 8014418:	2b00      	cmp	r3, #0
 801441a:	d010      	beq.n	801443e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014422:	f023 0304 	bic.w	r3, r3, #4
 8014426:	b2da      	uxtb	r2, r3
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	69db      	ldr	r3, [r3, #28]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d003      	beq.n	801443e <netif_set_link_down+0x4e>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	69db      	ldr	r3, [r3, #28]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	08022094 	.word	0x08022094
 8014448:	080223d8 	.word	0x080223d8
 801444c:	080220e4 	.word	0x080220e4

08014450 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d002      	beq.n	8014466 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	61da      	str	r2, [r3, #28]
  }
}
 8014466:	bf00      	nop
 8014468:	370c      	adds	r7, #12
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr

08014472 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014472:	b480      	push	{r7}
 8014474:	b085      	sub	sp, #20
 8014476:	af00      	add	r7, sp, #0
 8014478:	60f8      	str	r0, [r7, #12]
 801447a:	60b9      	str	r1, [r7, #8]
 801447c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801447e:	f06f 030b 	mvn.w	r3, #11
}
 8014482:	4618      	mov	r0, r3
 8014484:	3714      	adds	r7, #20
 8014486:	46bd      	mov	sp, r7
 8014488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448c:	4770      	bx	lr
	...

08014490 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014490:	b480      	push	{r7}
 8014492:	b085      	sub	sp, #20
 8014494:	af00      	add	r7, sp, #0
 8014496:	4603      	mov	r3, r0
 8014498:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801449a:	79fb      	ldrb	r3, [r7, #7]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d013      	beq.n	80144c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80144a0:	4b0d      	ldr	r3, [pc, #52]	@ (80144d8 <netif_get_by_index+0x48>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	60fb      	str	r3, [r7, #12]
 80144a6:	e00c      	b.n	80144c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80144ae:	3301      	adds	r3, #1
 80144b0:	b2db      	uxtb	r3, r3
 80144b2:	79fa      	ldrb	r2, [r7, #7]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d101      	bne.n	80144bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	e006      	b.n	80144ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	60fb      	str	r3, [r7, #12]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1ef      	bne.n	80144a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80144c8:	2300      	movs	r3, #0
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3714      	adds	r7, #20
 80144ce:	46bd      	mov	sp, r7
 80144d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d4:	4770      	bx	lr
 80144d6:	bf00      	nop
 80144d8:	20022790 	.word	0x20022790

080144dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80144e2:	f00a fd5f 	bl	801efa4 <sys_arch_protect>
 80144e6:	6038      	str	r0, [r7, #0]
 80144e8:	4b0d      	ldr	r3, [pc, #52]	@ (8014520 <pbuf_free_ooseq+0x44>)
 80144ea:	2200      	movs	r2, #0
 80144ec:	701a      	strb	r2, [r3, #0]
 80144ee:	6838      	ldr	r0, [r7, #0]
 80144f0:	f00a fd66 	bl	801efc0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80144f4:	4b0b      	ldr	r3, [pc, #44]	@ (8014524 <pbuf_free_ooseq+0x48>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	607b      	str	r3, [r7, #4]
 80144fa:	e00a      	b.n	8014512 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014500:	2b00      	cmp	r3, #0
 8014502:	d003      	beq.n	801450c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f002 fca9 	bl	8016e5c <tcp_free_ooseq>
      return;
 801450a:	e005      	b.n	8014518 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	607b      	str	r3, [r7, #4]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d1f1      	bne.n	80144fc <pbuf_free_ooseq+0x20>
    }
  }
}
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	20022799 	.word	0x20022799
 8014524:	200227a8 	.word	0x200227a8

08014528 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014530:	f7ff ffd4 	bl	80144dc <pbuf_free_ooseq>
}
 8014534:	bf00      	nop
 8014536:	3708      	adds	r7, #8
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014542:	f00a fd2f 	bl	801efa4 <sys_arch_protect>
 8014546:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014548:	4b0f      	ldr	r3, [pc, #60]	@ (8014588 <pbuf_pool_is_empty+0x4c>)
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801454e:	4b0e      	ldr	r3, [pc, #56]	@ (8014588 <pbuf_pool_is_empty+0x4c>)
 8014550:	2201      	movs	r2, #1
 8014552:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f00a fd33 	bl	801efc0 <sys_arch_unprotect>

  if (!queued) {
 801455a:	78fb      	ldrb	r3, [r7, #3]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d10f      	bne.n	8014580 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014560:	2100      	movs	r1, #0
 8014562:	480a      	ldr	r0, [pc, #40]	@ (801458c <pbuf_pool_is_empty+0x50>)
 8014564:	f7fe fd9e 	bl	80130a4 <tcpip_try_callback>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d008      	beq.n	8014580 <pbuf_pool_is_empty+0x44>
 801456e:	f00a fd19 	bl	801efa4 <sys_arch_protect>
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	4b04      	ldr	r3, [pc, #16]	@ (8014588 <pbuf_pool_is_empty+0x4c>)
 8014576:	2200      	movs	r2, #0
 8014578:	701a      	strb	r2, [r3, #0]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f00a fd20 	bl	801efc0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014580:	bf00      	nop
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	20022799 	.word	0x20022799
 801458c:	08014529 	.word	0x08014529

08014590 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014590:	b480      	push	{r7}
 8014592:	b085      	sub	sp, #20
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	4611      	mov	r1, r2
 801459c:	461a      	mov	r2, r3
 801459e:	460b      	mov	r3, r1
 80145a0:	80fb      	strh	r3, [r7, #6]
 80145a2:	4613      	mov	r3, r2
 80145a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	68ba      	ldr	r2, [r7, #8]
 80145b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	88fa      	ldrh	r2, [r7, #6]
 80145b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	88ba      	ldrh	r2, [r7, #4]
 80145bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80145be:	8b3b      	ldrh	r3, [r7, #24]
 80145c0:	b2da      	uxtb	r2, r3
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	7f3a      	ldrb	r2, [r7, #28]
 80145ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	2201      	movs	r2, #1
 80145d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	2200      	movs	r2, #0
 80145d6:	73da      	strb	r2, [r3, #15]
}
 80145d8:	bf00      	nop
 80145da:	3714      	adds	r7, #20
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr

080145e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b08c      	sub	sp, #48	@ 0x30
 80145e8:	af02      	add	r7, sp, #8
 80145ea:	4603      	mov	r3, r0
 80145ec:	71fb      	strb	r3, [r7, #7]
 80145ee:	460b      	mov	r3, r1
 80145f0:	80bb      	strh	r3, [r7, #4]
 80145f2:	4613      	mov	r3, r2
 80145f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80145f6:	79fb      	ldrb	r3, [r7, #7]
 80145f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80145fa:	887b      	ldrh	r3, [r7, #2]
 80145fc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014600:	d07f      	beq.n	8014702 <pbuf_alloc+0x11e>
 8014602:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014606:	f300 80c8 	bgt.w	801479a <pbuf_alloc+0x1b6>
 801460a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801460e:	d010      	beq.n	8014632 <pbuf_alloc+0x4e>
 8014610:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014614:	f300 80c1 	bgt.w	801479a <pbuf_alloc+0x1b6>
 8014618:	2b01      	cmp	r3, #1
 801461a:	d002      	beq.n	8014622 <pbuf_alloc+0x3e>
 801461c:	2b41      	cmp	r3, #65	@ 0x41
 801461e:	f040 80bc 	bne.w	801479a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014622:	887a      	ldrh	r2, [r7, #2]
 8014624:	88bb      	ldrh	r3, [r7, #4]
 8014626:	4619      	mov	r1, r3
 8014628:	2000      	movs	r0, #0
 801462a:	f000 f8d1 	bl	80147d0 <pbuf_alloc_reference>
 801462e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8014630:	e0bd      	b.n	80147ae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014632:	2300      	movs	r3, #0
 8014634:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8014636:	2300      	movs	r3, #0
 8014638:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801463a:	88bb      	ldrh	r3, [r7, #4]
 801463c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801463e:	200c      	movs	r0, #12
 8014640:	f7ff faa4 	bl	8013b8c <memp_malloc>
 8014644:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d109      	bne.n	8014660 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801464c:	f7ff ff76 	bl	801453c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014652:	2b00      	cmp	r3, #0
 8014654:	d002      	beq.n	801465c <pbuf_alloc+0x78>
            pbuf_free(p);
 8014656:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014658:	f000 faa8 	bl	8014bac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801465c:	2300      	movs	r3, #0
 801465e:	e0a7      	b.n	80147b0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014660:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014662:	3303      	adds	r3, #3
 8014664:	b29b      	uxth	r3, r3
 8014666:	f023 0303 	bic.w	r3, r3, #3
 801466a:	b29b      	uxth	r3, r3
 801466c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8014670:	b29b      	uxth	r3, r3
 8014672:	8b7a      	ldrh	r2, [r7, #26]
 8014674:	4293      	cmp	r3, r2
 8014676:	bf28      	it	cs
 8014678:	4613      	movcs	r3, r2
 801467a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801467c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801467e:	3310      	adds	r3, #16
 8014680:	693a      	ldr	r2, [r7, #16]
 8014682:	4413      	add	r3, r2
 8014684:	3303      	adds	r3, #3
 8014686:	f023 0303 	bic.w	r3, r3, #3
 801468a:	4618      	mov	r0, r3
 801468c:	89f9      	ldrh	r1, [r7, #14]
 801468e:	8b7a      	ldrh	r2, [r7, #26]
 8014690:	2300      	movs	r3, #0
 8014692:	9301      	str	r3, [sp, #4]
 8014694:	887b      	ldrh	r3, [r7, #2]
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	460b      	mov	r3, r1
 801469a:	4601      	mov	r1, r0
 801469c:	6938      	ldr	r0, [r7, #16]
 801469e:	f7ff ff77 	bl	8014590 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	f003 0303 	and.w	r3, r3, #3
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d006      	beq.n	80146bc <pbuf_alloc+0xd8>
 80146ae:	4b42      	ldr	r3, [pc, #264]	@ (80147b8 <pbuf_alloc+0x1d4>)
 80146b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80146b4:	4941      	ldr	r1, [pc, #260]	@ (80147bc <pbuf_alloc+0x1d8>)
 80146b6:	4842      	ldr	r0, [pc, #264]	@ (80147c0 <pbuf_alloc+0x1dc>)
 80146b8:	f00b fbf4 	bl	801fea4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80146bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146be:	3303      	adds	r3, #3
 80146c0:	f023 0303 	bic.w	r3, r3, #3
 80146c4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80146c8:	d106      	bne.n	80146d8 <pbuf_alloc+0xf4>
 80146ca:	4b3b      	ldr	r3, [pc, #236]	@ (80147b8 <pbuf_alloc+0x1d4>)
 80146cc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80146d0:	493c      	ldr	r1, [pc, #240]	@ (80147c4 <pbuf_alloc+0x1e0>)
 80146d2:	483b      	ldr	r0, [pc, #236]	@ (80147c0 <pbuf_alloc+0x1dc>)
 80146d4:	f00b fbe6 	bl	801fea4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80146d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d102      	bne.n	80146e4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80146e2:	e002      	b.n	80146ea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80146e4:	69fb      	ldr	r3, [r7, #28]
 80146e6:	693a      	ldr	r2, [r7, #16]
 80146e8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80146ee:	8b7a      	ldrh	r2, [r7, #26]
 80146f0:	89fb      	ldrh	r3, [r7, #14]
 80146f2:	1ad3      	subs	r3, r2, r3
 80146f4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80146f6:	2300      	movs	r3, #0
 80146f8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80146fa:	8b7b      	ldrh	r3, [r7, #26]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d19e      	bne.n	801463e <pbuf_alloc+0x5a>
      break;
 8014700:	e055      	b.n	80147ae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014702:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014704:	3303      	adds	r3, #3
 8014706:	b29b      	uxth	r3, r3
 8014708:	f023 0303 	bic.w	r3, r3, #3
 801470c:	b29a      	uxth	r2, r3
 801470e:	88bb      	ldrh	r3, [r7, #4]
 8014710:	3303      	adds	r3, #3
 8014712:	b29b      	uxth	r3, r3
 8014714:	f023 0303 	bic.w	r3, r3, #3
 8014718:	b29b      	uxth	r3, r3
 801471a:	4413      	add	r3, r2
 801471c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801471e:	8b3b      	ldrh	r3, [r7, #24]
 8014720:	3310      	adds	r3, #16
 8014722:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014724:	8b3a      	ldrh	r2, [r7, #24]
 8014726:	88bb      	ldrh	r3, [r7, #4]
 8014728:	3303      	adds	r3, #3
 801472a:	f023 0303 	bic.w	r3, r3, #3
 801472e:	429a      	cmp	r2, r3
 8014730:	d306      	bcc.n	8014740 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014732:	8afa      	ldrh	r2, [r7, #22]
 8014734:	88bb      	ldrh	r3, [r7, #4]
 8014736:	3303      	adds	r3, #3
 8014738:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801473c:	429a      	cmp	r2, r3
 801473e:	d201      	bcs.n	8014744 <pbuf_alloc+0x160>
        return NULL;
 8014740:	2300      	movs	r3, #0
 8014742:	e035      	b.n	80147b0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014744:	8afb      	ldrh	r3, [r7, #22]
 8014746:	4618      	mov	r0, r3
 8014748:	f7ff f87c 	bl	8013844 <mem_malloc>
 801474c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014750:	2b00      	cmp	r3, #0
 8014752:	d101      	bne.n	8014758 <pbuf_alloc+0x174>
        return NULL;
 8014754:	2300      	movs	r3, #0
 8014756:	e02b      	b.n	80147b0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014758:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801475a:	3310      	adds	r3, #16
 801475c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801475e:	4413      	add	r3, r2
 8014760:	3303      	adds	r3, #3
 8014762:	f023 0303 	bic.w	r3, r3, #3
 8014766:	4618      	mov	r0, r3
 8014768:	88b9      	ldrh	r1, [r7, #4]
 801476a:	88ba      	ldrh	r2, [r7, #4]
 801476c:	2300      	movs	r3, #0
 801476e:	9301      	str	r3, [sp, #4]
 8014770:	887b      	ldrh	r3, [r7, #2]
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	460b      	mov	r3, r1
 8014776:	4601      	mov	r1, r0
 8014778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801477a:	f7ff ff09 	bl	8014590 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	f003 0303 	and.w	r3, r3, #3
 8014786:	2b00      	cmp	r3, #0
 8014788:	d010      	beq.n	80147ac <pbuf_alloc+0x1c8>
 801478a:	4b0b      	ldr	r3, [pc, #44]	@ (80147b8 <pbuf_alloc+0x1d4>)
 801478c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8014790:	490d      	ldr	r1, [pc, #52]	@ (80147c8 <pbuf_alloc+0x1e4>)
 8014792:	480b      	ldr	r0, [pc, #44]	@ (80147c0 <pbuf_alloc+0x1dc>)
 8014794:	f00b fb86 	bl	801fea4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014798:	e008      	b.n	80147ac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801479a:	4b07      	ldr	r3, [pc, #28]	@ (80147b8 <pbuf_alloc+0x1d4>)
 801479c:	f240 1227 	movw	r2, #295	@ 0x127
 80147a0:	490a      	ldr	r1, [pc, #40]	@ (80147cc <pbuf_alloc+0x1e8>)
 80147a2:	4807      	ldr	r0, [pc, #28]	@ (80147c0 <pbuf_alloc+0x1dc>)
 80147a4:	f00b fb7e 	bl	801fea4 <iprintf>
      return NULL;
 80147a8:	2300      	movs	r3, #0
 80147aa:	e001      	b.n	80147b0 <pbuf_alloc+0x1cc>
      break;
 80147ac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80147ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3728      	adds	r7, #40	@ 0x28
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	08022434 	.word	0x08022434
 80147bc:	08022464 	.word	0x08022464
 80147c0:	08022494 	.word	0x08022494
 80147c4:	080224bc 	.word	0x080224bc
 80147c8:	080224f0 	.word	0x080224f0
 80147cc:	0802251c 	.word	0x0802251c

080147d0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b086      	sub	sp, #24
 80147d4:	af02      	add	r7, sp, #8
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	460b      	mov	r3, r1
 80147da:	807b      	strh	r3, [r7, #2]
 80147dc:	4613      	mov	r3, r2
 80147de:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80147e0:	883b      	ldrh	r3, [r7, #0]
 80147e2:	2b41      	cmp	r3, #65	@ 0x41
 80147e4:	d009      	beq.n	80147fa <pbuf_alloc_reference+0x2a>
 80147e6:	883b      	ldrh	r3, [r7, #0]
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d006      	beq.n	80147fa <pbuf_alloc_reference+0x2a>
 80147ec:	4b0f      	ldr	r3, [pc, #60]	@ (801482c <pbuf_alloc_reference+0x5c>)
 80147ee:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80147f2:	490f      	ldr	r1, [pc, #60]	@ (8014830 <pbuf_alloc_reference+0x60>)
 80147f4:	480f      	ldr	r0, [pc, #60]	@ (8014834 <pbuf_alloc_reference+0x64>)
 80147f6:	f00b fb55 	bl	801fea4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80147fa:	200b      	movs	r0, #11
 80147fc:	f7ff f9c6 	bl	8013b8c <memp_malloc>
 8014800:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d101      	bne.n	801480c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014808:	2300      	movs	r3, #0
 801480a:	e00b      	b.n	8014824 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801480c:	8879      	ldrh	r1, [r7, #2]
 801480e:	887a      	ldrh	r2, [r7, #2]
 8014810:	2300      	movs	r3, #0
 8014812:	9301      	str	r3, [sp, #4]
 8014814:	883b      	ldrh	r3, [r7, #0]
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	460b      	mov	r3, r1
 801481a:	6879      	ldr	r1, [r7, #4]
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f7ff feb7 	bl	8014590 <pbuf_init_alloced_pbuf>
  return p;
 8014822:	68fb      	ldr	r3, [r7, #12]
}
 8014824:	4618      	mov	r0, r3
 8014826:	3710      	adds	r7, #16
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}
 801482c:	08022434 	.word	0x08022434
 8014830:	08022538 	.word	0x08022538
 8014834:	08022494 	.word	0x08022494

08014838 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b088      	sub	sp, #32
 801483c:	af02      	add	r7, sp, #8
 801483e:	607b      	str	r3, [r7, #4]
 8014840:	4603      	mov	r3, r0
 8014842:	73fb      	strb	r3, [r7, #15]
 8014844:	460b      	mov	r3, r1
 8014846:	81bb      	strh	r3, [r7, #12]
 8014848:	4613      	mov	r3, r2
 801484a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801484c:	7bfb      	ldrb	r3, [r7, #15]
 801484e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014850:	8a7b      	ldrh	r3, [r7, #18]
 8014852:	3303      	adds	r3, #3
 8014854:	f023 0203 	bic.w	r2, r3, #3
 8014858:	89bb      	ldrh	r3, [r7, #12]
 801485a:	441a      	add	r2, r3
 801485c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801485e:	429a      	cmp	r2, r3
 8014860:	d901      	bls.n	8014866 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014862:	2300      	movs	r3, #0
 8014864:	e018      	b.n	8014898 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014866:	6a3b      	ldr	r3, [r7, #32]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d007      	beq.n	801487c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801486c:	8a7b      	ldrh	r3, [r7, #18]
 801486e:	3303      	adds	r3, #3
 8014870:	f023 0303 	bic.w	r3, r3, #3
 8014874:	6a3a      	ldr	r2, [r7, #32]
 8014876:	4413      	add	r3, r2
 8014878:	617b      	str	r3, [r7, #20]
 801487a:	e001      	b.n	8014880 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801487c:	2300      	movs	r3, #0
 801487e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	89b9      	ldrh	r1, [r7, #12]
 8014884:	89ba      	ldrh	r2, [r7, #12]
 8014886:	2302      	movs	r3, #2
 8014888:	9301      	str	r3, [sp, #4]
 801488a:	897b      	ldrh	r3, [r7, #10]
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	460b      	mov	r3, r1
 8014890:	6979      	ldr	r1, [r7, #20]
 8014892:	f7ff fe7d 	bl	8014590 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014896:	687b      	ldr	r3, [r7, #4]
}
 8014898:	4618      	mov	r0, r3
 801489a:	3718      	adds	r7, #24
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}

080148a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d106      	bne.n	80148c0 <pbuf_realloc+0x20>
 80148b2:	4b3a      	ldr	r3, [pc, #232]	@ (801499c <pbuf_realloc+0xfc>)
 80148b4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80148b8:	4939      	ldr	r1, [pc, #228]	@ (80149a0 <pbuf_realloc+0x100>)
 80148ba:	483a      	ldr	r0, [pc, #232]	@ (80149a4 <pbuf_realloc+0x104>)
 80148bc:	f00b faf2 	bl	801fea4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	891b      	ldrh	r3, [r3, #8]
 80148c4:	887a      	ldrh	r2, [r7, #2]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d263      	bcs.n	8014992 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	891a      	ldrh	r2, [r3, #8]
 80148ce:	887b      	ldrh	r3, [r7, #2]
 80148d0:	1ad3      	subs	r3, r2, r3
 80148d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80148d4:	887b      	ldrh	r3, [r7, #2]
 80148d6:	817b      	strh	r3, [r7, #10]
  q = p;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80148dc:	e018      	b.n	8014910 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	895b      	ldrh	r3, [r3, #10]
 80148e2:	897a      	ldrh	r2, [r7, #10]
 80148e4:	1ad3      	subs	r3, r2, r3
 80148e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	891a      	ldrh	r2, [r3, #8]
 80148ec:	893b      	ldrh	r3, [r7, #8]
 80148ee:	1ad3      	subs	r3, r2, r3
 80148f0:	b29a      	uxth	r2, r3
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d106      	bne.n	8014910 <pbuf_realloc+0x70>
 8014902:	4b26      	ldr	r3, [pc, #152]	@ (801499c <pbuf_realloc+0xfc>)
 8014904:	f240 12af 	movw	r2, #431	@ 0x1af
 8014908:	4927      	ldr	r1, [pc, #156]	@ (80149a8 <pbuf_realloc+0x108>)
 801490a:	4826      	ldr	r0, [pc, #152]	@ (80149a4 <pbuf_realloc+0x104>)
 801490c:	f00b faca 	bl	801fea4 <iprintf>
  while (rem_len > q->len) {
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	895b      	ldrh	r3, [r3, #10]
 8014914:	897a      	ldrh	r2, [r7, #10]
 8014916:	429a      	cmp	r2, r3
 8014918:	d8e1      	bhi.n	80148de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	7b1b      	ldrb	r3, [r3, #12]
 801491e:	f003 030f 	and.w	r3, r3, #15
 8014922:	2b00      	cmp	r3, #0
 8014924:	d121      	bne.n	801496a <pbuf_realloc+0xca>
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	895b      	ldrh	r3, [r3, #10]
 801492a:	897a      	ldrh	r2, [r7, #10]
 801492c:	429a      	cmp	r2, r3
 801492e:	d01c      	beq.n	801496a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	7b5b      	ldrb	r3, [r3, #13]
 8014934:	f003 0302 	and.w	r3, r3, #2
 8014938:	2b00      	cmp	r3, #0
 801493a:	d116      	bne.n	801496a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	685a      	ldr	r2, [r3, #4]
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	1ad3      	subs	r3, r2, r3
 8014944:	b29a      	uxth	r2, r3
 8014946:	897b      	ldrh	r3, [r7, #10]
 8014948:	4413      	add	r3, r2
 801494a:	b29b      	uxth	r3, r3
 801494c:	4619      	mov	r1, r3
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f7fe fe6e 	bl	8013630 <mem_trim>
 8014954:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d106      	bne.n	801496a <pbuf_realloc+0xca>
 801495c:	4b0f      	ldr	r3, [pc, #60]	@ (801499c <pbuf_realloc+0xfc>)
 801495e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014962:	4912      	ldr	r1, [pc, #72]	@ (80149ac <pbuf_realloc+0x10c>)
 8014964:	480f      	ldr	r0, [pc, #60]	@ (80149a4 <pbuf_realloc+0x104>)
 8014966:	f00b fa9d 	bl	801fea4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	897a      	ldrh	r2, [r7, #10]
 801496e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	895a      	ldrh	r2, [r3, #10]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d004      	beq.n	801498a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	4618      	mov	r0, r3
 8014986:	f000 f911 	bl	8014bac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	2200      	movs	r2, #0
 801498e:	601a      	str	r2, [r3, #0]
 8014990:	e000      	b.n	8014994 <pbuf_realloc+0xf4>
    return;
 8014992:	bf00      	nop

}
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	08022434 	.word	0x08022434
 80149a0:	0802254c 	.word	0x0802254c
 80149a4:	08022494 	.word	0x08022494
 80149a8:	08022564 	.word	0x08022564
 80149ac:	0802257c 	.word	0x0802257c

080149b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	4613      	mov	r3, r2
 80149bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d106      	bne.n	80149d2 <pbuf_add_header_impl+0x22>
 80149c4:	4b2b      	ldr	r3, [pc, #172]	@ (8014a74 <pbuf_add_header_impl+0xc4>)
 80149c6:	f240 12df 	movw	r2, #479	@ 0x1df
 80149ca:	492b      	ldr	r1, [pc, #172]	@ (8014a78 <pbuf_add_header_impl+0xc8>)
 80149cc:	482b      	ldr	r0, [pc, #172]	@ (8014a7c <pbuf_add_header_impl+0xcc>)
 80149ce:	f00b fa69 	bl	801fea4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d003      	beq.n	80149e0 <pbuf_add_header_impl+0x30>
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80149de:	d301      	bcc.n	80149e4 <pbuf_add_header_impl+0x34>
    return 1;
 80149e0:	2301      	movs	r3, #1
 80149e2:	e043      	b.n	8014a6c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d101      	bne.n	80149ee <pbuf_add_header_impl+0x3e>
    return 0;
 80149ea:	2300      	movs	r3, #0
 80149ec:	e03e      	b.n	8014a6c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	891a      	ldrh	r2, [r3, #8]
 80149f6:	8a7b      	ldrh	r3, [r7, #18]
 80149f8:	4413      	add	r3, r2
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	8a7a      	ldrh	r2, [r7, #18]
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d901      	bls.n	8014a06 <pbuf_add_header_impl+0x56>
    return 1;
 8014a02:	2301      	movs	r3, #1
 8014a04:	e032      	b.n	8014a6c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	7b1b      	ldrb	r3, [r3, #12]
 8014a0a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014a0c:	8a3b      	ldrh	r3, [r7, #16]
 8014a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d00c      	beq.n	8014a30 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	685a      	ldr	r2, [r3, #4]
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	425b      	negs	r3, r3
 8014a1e:	4413      	add	r3, r2
 8014a20:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	3310      	adds	r3, #16
 8014a26:	697a      	ldr	r2, [r7, #20]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d20d      	bcs.n	8014a48 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e01d      	b.n	8014a6c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014a30:	79fb      	ldrb	r3, [r7, #7]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d006      	beq.n	8014a44 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	685a      	ldr	r2, [r3, #4]
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	425b      	negs	r3, r3
 8014a3e:	4413      	add	r3, r2
 8014a40:	617b      	str	r3, [r7, #20]
 8014a42:	e001      	b.n	8014a48 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014a44:	2301      	movs	r3, #1
 8014a46:	e011      	b.n	8014a6c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	697a      	ldr	r2, [r7, #20]
 8014a4c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	895a      	ldrh	r2, [r3, #10]
 8014a52:	8a7b      	ldrh	r3, [r7, #18]
 8014a54:	4413      	add	r3, r2
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	891a      	ldrh	r2, [r3, #8]
 8014a60:	8a7b      	ldrh	r3, [r7, #18]
 8014a62:	4413      	add	r3, r2
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	811a      	strh	r2, [r3, #8]


  return 0;
 8014a6a:	2300      	movs	r3, #0
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3718      	adds	r7, #24
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}
 8014a74:	08022434 	.word	0x08022434
 8014a78:	08022598 	.word	0x08022598
 8014a7c:	08022494 	.word	0x08022494

08014a80 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	6839      	ldr	r1, [r7, #0]
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ff ff8e 	bl	80149b0 <pbuf_add_header_impl>
 8014a94:	4603      	mov	r3, r0
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3708      	adds	r7, #8
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
	...

08014aa0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d106      	bne.n	8014abe <pbuf_remove_header+0x1e>
 8014ab0:	4b20      	ldr	r3, [pc, #128]	@ (8014b34 <pbuf_remove_header+0x94>)
 8014ab2:	f240 224b 	movw	r2, #587	@ 0x24b
 8014ab6:	4920      	ldr	r1, [pc, #128]	@ (8014b38 <pbuf_remove_header+0x98>)
 8014ab8:	4820      	ldr	r0, [pc, #128]	@ (8014b3c <pbuf_remove_header+0x9c>)
 8014aba:	f00b f9f3 	bl	801fea4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d003      	beq.n	8014acc <pbuf_remove_header+0x2c>
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014aca:	d301      	bcc.n	8014ad0 <pbuf_remove_header+0x30>
    return 1;
 8014acc:	2301      	movs	r3, #1
 8014ace:	e02c      	b.n	8014b2a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d101      	bne.n	8014ada <pbuf_remove_header+0x3a>
    return 0;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	e027      	b.n	8014b2a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	895b      	ldrh	r3, [r3, #10]
 8014ae2:	89fa      	ldrh	r2, [r7, #14]
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d908      	bls.n	8014afa <pbuf_remove_header+0x5a>
 8014ae8:	4b12      	ldr	r3, [pc, #72]	@ (8014b34 <pbuf_remove_header+0x94>)
 8014aea:	f240 2255 	movw	r2, #597	@ 0x255
 8014aee:	4914      	ldr	r1, [pc, #80]	@ (8014b40 <pbuf_remove_header+0xa0>)
 8014af0:	4812      	ldr	r0, [pc, #72]	@ (8014b3c <pbuf_remove_header+0x9c>)
 8014af2:	f00b f9d7 	bl	801fea4 <iprintf>
 8014af6:	2301      	movs	r3, #1
 8014af8:	e017      	b.n	8014b2a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	685a      	ldr	r2, [r3, #4]
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	441a      	add	r2, r3
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	895a      	ldrh	r2, [r3, #10]
 8014b10:	89fb      	ldrh	r3, [r7, #14]
 8014b12:	1ad3      	subs	r3, r2, r3
 8014b14:	b29a      	uxth	r2, r3
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	891a      	ldrh	r2, [r3, #8]
 8014b1e:	89fb      	ldrh	r3, [r7, #14]
 8014b20:	1ad3      	subs	r3, r2, r3
 8014b22:	b29a      	uxth	r2, r3
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014b28:	2300      	movs	r3, #0
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	08022434 	.word	0x08022434
 8014b38:	08022598 	.word	0x08022598
 8014b3c:	08022494 	.word	0x08022494
 8014b40:	080225a4 	.word	0x080225a4

08014b44 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	460b      	mov	r3, r1
 8014b4e:	807b      	strh	r3, [r7, #2]
 8014b50:	4613      	mov	r3, r2
 8014b52:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014b54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	da08      	bge.n	8014b6e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b60:	425b      	negs	r3, r3
 8014b62:	4619      	mov	r1, r3
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7ff ff9b 	bl	8014aa0 <pbuf_remove_header>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	e007      	b.n	8014b7e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014b6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b72:	787a      	ldrb	r2, [r7, #1]
 8014b74:	4619      	mov	r1, r3
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f7ff ff1a 	bl	80149b0 <pbuf_add_header_impl>
 8014b7c:	4603      	mov	r3, r0
  }
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3708      	adds	r7, #8
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}

08014b86 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014b86:	b580      	push	{r7, lr}
 8014b88:	b082      	sub	sp, #8
 8014b8a:	af00      	add	r7, sp, #0
 8014b8c:	6078      	str	r0, [r7, #4]
 8014b8e:	460b      	mov	r3, r1
 8014b90:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014b92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b96:	2201      	movs	r2, #1
 8014b98:	4619      	mov	r1, r3
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f7ff ffd2 	bl	8014b44 <pbuf_header_impl>
 8014ba0:	4603      	mov	r3, r0
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3708      	adds	r7, #8
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
	...

08014bac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b088      	sub	sp, #32
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d10b      	bne.n	8014bd2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d106      	bne.n	8014bce <pbuf_free+0x22>
 8014bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8014cb0 <pbuf_free+0x104>)
 8014bc2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014bc6:	493b      	ldr	r1, [pc, #236]	@ (8014cb4 <pbuf_free+0x108>)
 8014bc8:	483b      	ldr	r0, [pc, #236]	@ (8014cb8 <pbuf_free+0x10c>)
 8014bca:	f00b f96b 	bl	801fea4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	e069      	b.n	8014ca6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014bd6:	e062      	b.n	8014c9e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014bd8:	f00a f9e4 	bl	801efa4 <sys_arch_protect>
 8014bdc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	7b9b      	ldrb	r3, [r3, #14]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d106      	bne.n	8014bf4 <pbuf_free+0x48>
 8014be6:	4b32      	ldr	r3, [pc, #200]	@ (8014cb0 <pbuf_free+0x104>)
 8014be8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014bec:	4933      	ldr	r1, [pc, #204]	@ (8014cbc <pbuf_free+0x110>)
 8014bee:	4832      	ldr	r0, [pc, #200]	@ (8014cb8 <pbuf_free+0x10c>)
 8014bf0:	f00b f958 	bl	801fea4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	7b9b      	ldrb	r3, [r3, #14]
 8014bf8:	3b01      	subs	r3, #1
 8014bfa:	b2da      	uxtb	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	739a      	strb	r2, [r3, #14]
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	7b9b      	ldrb	r3, [r3, #14]
 8014c04:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014c06:	69b8      	ldr	r0, [r7, #24]
 8014c08:	f00a f9da 	bl	801efc0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014c0c:	7dfb      	ldrb	r3, [r7, #23]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d143      	bne.n	8014c9a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	7b1b      	ldrb	r3, [r3, #12]
 8014c1c:	f003 030f 	and.w	r3, r3, #15
 8014c20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	7b5b      	ldrb	r3, [r3, #13]
 8014c26:	f003 0302 	and.w	r3, r3, #2
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d011      	beq.n	8014c52 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	691b      	ldr	r3, [r3, #16]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d106      	bne.n	8014c48 <pbuf_free+0x9c>
 8014c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8014cb0 <pbuf_free+0x104>)
 8014c3c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014c40:	491f      	ldr	r1, [pc, #124]	@ (8014cc0 <pbuf_free+0x114>)
 8014c42:	481d      	ldr	r0, [pc, #116]	@ (8014cb8 <pbuf_free+0x10c>)
 8014c44:	f00b f92e 	bl	801fea4 <iprintf>
        pc->custom_free_function(p);
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	691b      	ldr	r3, [r3, #16]
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	4798      	blx	r3
 8014c50:	e01d      	b.n	8014c8e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014c52:	7bfb      	ldrb	r3, [r7, #15]
 8014c54:	2b02      	cmp	r3, #2
 8014c56:	d104      	bne.n	8014c62 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014c58:	6879      	ldr	r1, [r7, #4]
 8014c5a:	200c      	movs	r0, #12
 8014c5c:	f7ff f80c 	bl	8013c78 <memp_free>
 8014c60:	e015      	b.n	8014c8e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014c62:	7bfb      	ldrb	r3, [r7, #15]
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d104      	bne.n	8014c72 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014c68:	6879      	ldr	r1, [r7, #4]
 8014c6a:	200b      	movs	r0, #11
 8014c6c:	f7ff f804 	bl	8013c78 <memp_free>
 8014c70:	e00d      	b.n	8014c8e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014c72:	7bfb      	ldrb	r3, [r7, #15]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d103      	bne.n	8014c80 <pbuf_free+0xd4>
          mem_free(p);
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f7fe fc49 	bl	8013510 <mem_free>
 8014c7e:	e006      	b.n	8014c8e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014c80:	4b0b      	ldr	r3, [pc, #44]	@ (8014cb0 <pbuf_free+0x104>)
 8014c82:	f240 320f 	movw	r2, #783	@ 0x30f
 8014c86:	490f      	ldr	r1, [pc, #60]	@ (8014cc4 <pbuf_free+0x118>)
 8014c88:	480b      	ldr	r0, [pc, #44]	@ (8014cb8 <pbuf_free+0x10c>)
 8014c8a:	f00b f90b 	bl	801fea4 <iprintf>
        }
      }
      count++;
 8014c8e:	7ffb      	ldrb	r3, [r7, #31]
 8014c90:	3301      	adds	r3, #1
 8014c92:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014c94:	693b      	ldr	r3, [r7, #16]
 8014c96:	607b      	str	r3, [r7, #4]
 8014c98:	e001      	b.n	8014c9e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d199      	bne.n	8014bd8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3720      	adds	r7, #32
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	08022434 	.word	0x08022434
 8014cb4:	08022598 	.word	0x08022598
 8014cb8:	08022494 	.word	0x08022494
 8014cbc:	080225c4 	.word	0x080225c4
 8014cc0:	080225dc 	.word	0x080225dc
 8014cc4:	08022600 	.word	0x08022600

08014cc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b085      	sub	sp, #20
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014cd4:	e005      	b.n	8014ce2 <pbuf_clen+0x1a>
    ++len;
 8014cd6:	89fb      	ldrh	r3, [r7, #14]
 8014cd8:	3301      	adds	r3, #1
 8014cda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d1f6      	bne.n	8014cd6 <pbuf_clen+0xe>
  }
  return len;
 8014ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3714      	adds	r7, #20
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr
	...

08014cf8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d016      	beq.n	8014d34 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014d06:	f00a f94d 	bl	801efa4 <sys_arch_protect>
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	7b9b      	ldrb	r3, [r3, #14]
 8014d10:	3301      	adds	r3, #1
 8014d12:	b2da      	uxtb	r2, r3
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	739a      	strb	r2, [r3, #14]
 8014d18:	68f8      	ldr	r0, [r7, #12]
 8014d1a:	f00a f951 	bl	801efc0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	7b9b      	ldrb	r3, [r3, #14]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d106      	bne.n	8014d34 <pbuf_ref+0x3c>
 8014d26:	4b05      	ldr	r3, [pc, #20]	@ (8014d3c <pbuf_ref+0x44>)
 8014d28:	f240 3242 	movw	r2, #834	@ 0x342
 8014d2c:	4904      	ldr	r1, [pc, #16]	@ (8014d40 <pbuf_ref+0x48>)
 8014d2e:	4805      	ldr	r0, [pc, #20]	@ (8014d44 <pbuf_ref+0x4c>)
 8014d30:	f00b f8b8 	bl	801fea4 <iprintf>
  }
}
 8014d34:	bf00      	nop
 8014d36:	3710      	adds	r7, #16
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	08022434 	.word	0x08022434
 8014d40:	08022614 	.word	0x08022614
 8014d44:	08022494 	.word	0x08022494

08014d48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d002      	beq.n	8014d5e <pbuf_cat+0x16>
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d107      	bne.n	8014d6e <pbuf_cat+0x26>
 8014d5e:	4b20      	ldr	r3, [pc, #128]	@ (8014de0 <pbuf_cat+0x98>)
 8014d60:	f240 3259 	movw	r2, #857	@ 0x359
 8014d64:	491f      	ldr	r1, [pc, #124]	@ (8014de4 <pbuf_cat+0x9c>)
 8014d66:	4820      	ldr	r0, [pc, #128]	@ (8014de8 <pbuf_cat+0xa0>)
 8014d68:	f00b f89c 	bl	801fea4 <iprintf>
 8014d6c:	e034      	b.n	8014dd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	60fb      	str	r3, [r7, #12]
 8014d72:	e00a      	b.n	8014d8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	891a      	ldrh	r2, [r3, #8]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	891b      	ldrh	r3, [r3, #8]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	b29a      	uxth	r2, r3
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	60fb      	str	r3, [r7, #12]
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d1f0      	bne.n	8014d74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	891a      	ldrh	r2, [r3, #8]
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	895b      	ldrh	r3, [r3, #10]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d006      	beq.n	8014dac <pbuf_cat+0x64>
 8014d9e:	4b10      	ldr	r3, [pc, #64]	@ (8014de0 <pbuf_cat+0x98>)
 8014da0:	f240 3262 	movw	r2, #866	@ 0x362
 8014da4:	4911      	ldr	r1, [pc, #68]	@ (8014dec <pbuf_cat+0xa4>)
 8014da6:	4810      	ldr	r0, [pc, #64]	@ (8014de8 <pbuf_cat+0xa0>)
 8014da8:	f00b f87c 	bl	801fea4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d006      	beq.n	8014dc2 <pbuf_cat+0x7a>
 8014db4:	4b0a      	ldr	r3, [pc, #40]	@ (8014de0 <pbuf_cat+0x98>)
 8014db6:	f240 3263 	movw	r2, #867	@ 0x363
 8014dba:	490d      	ldr	r1, [pc, #52]	@ (8014df0 <pbuf_cat+0xa8>)
 8014dbc:	480a      	ldr	r0, [pc, #40]	@ (8014de8 <pbuf_cat+0xa0>)
 8014dbe:	f00b f871 	bl	801fea4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	891a      	ldrh	r2, [r3, #8]
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	891b      	ldrh	r3, [r3, #8]
 8014dca:	4413      	add	r3, r2
 8014dcc:	b29a      	uxth	r2, r3
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	683a      	ldr	r2, [r7, #0]
 8014dd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014dd8:	3710      	adds	r7, #16
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	08022434 	.word	0x08022434
 8014de4:	08022628 	.word	0x08022628
 8014de8:	08022494 	.word	0x08022494
 8014dec:	08022660 	.word	0x08022660
 8014df0:	08022690 	.word	0x08022690

08014df4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014dfe:	6839      	ldr	r1, [r7, #0]
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f7ff ffa1 	bl	8014d48 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014e06:	6838      	ldr	r0, [r7, #0]
 8014e08:	f7ff ff76 	bl	8014cf8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014e0c:	bf00      	nop
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b086      	sub	sp, #24
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	617b      	str	r3, [r7, #20]
 8014e22:	2300      	movs	r3, #0
 8014e24:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d008      	beq.n	8014e3e <pbuf_copy+0x2a>
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d005      	beq.n	8014e3e <pbuf_copy+0x2a>
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	891a      	ldrh	r2, [r3, #8]
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	891b      	ldrh	r3, [r3, #8]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d209      	bcs.n	8014e52 <pbuf_copy+0x3e>
 8014e3e:	4b57      	ldr	r3, [pc, #348]	@ (8014f9c <pbuf_copy+0x188>)
 8014e40:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014e44:	4956      	ldr	r1, [pc, #344]	@ (8014fa0 <pbuf_copy+0x18c>)
 8014e46:	4857      	ldr	r0, [pc, #348]	@ (8014fa4 <pbuf_copy+0x190>)
 8014e48:	f00b f82c 	bl	801fea4 <iprintf>
 8014e4c:	f06f 030f 	mvn.w	r3, #15
 8014e50:	e09f      	b.n	8014f92 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	895b      	ldrh	r3, [r3, #10]
 8014e56:	461a      	mov	r2, r3
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	1ad2      	subs	r2, r2, r3
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	895b      	ldrh	r3, [r3, #10]
 8014e60:	4619      	mov	r1, r3
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	1acb      	subs	r3, r1, r3
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d306      	bcc.n	8014e78 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	895b      	ldrh	r3, [r3, #10]
 8014e6e:	461a      	mov	r2, r3
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	1ad3      	subs	r3, r2, r3
 8014e74:	60fb      	str	r3, [r7, #12]
 8014e76:	e005      	b.n	8014e84 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	895b      	ldrh	r3, [r3, #10]
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	1ad3      	subs	r3, r2, r3
 8014e82:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	685a      	ldr	r2, [r3, #4]
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	18d0      	adds	r0, r2, r3
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	685a      	ldr	r2, [r3, #4]
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	4413      	add	r3, r2
 8014e94:	68fa      	ldr	r2, [r7, #12]
 8014e96:	4619      	mov	r1, r3
 8014e98:	f00b f9d9 	bl	802024e <memcpy>
    offset_to += len;
 8014e9c:	697a      	ldr	r2, [r7, #20]
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014ea4:	693a      	ldr	r2, [r7, #16]
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	4413      	add	r3, r2
 8014eaa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	895b      	ldrh	r3, [r3, #10]
 8014eb0:	461a      	mov	r2, r3
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	4293      	cmp	r3, r2
 8014eb6:	d906      	bls.n	8014ec6 <pbuf_copy+0xb2>
 8014eb8:	4b38      	ldr	r3, [pc, #224]	@ (8014f9c <pbuf_copy+0x188>)
 8014eba:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8014ebe:	493a      	ldr	r1, [pc, #232]	@ (8014fa8 <pbuf_copy+0x194>)
 8014ec0:	4838      	ldr	r0, [pc, #224]	@ (8014fa4 <pbuf_copy+0x190>)
 8014ec2:	f00a ffef 	bl	801fea4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	895b      	ldrh	r3, [r3, #10]
 8014eca:	461a      	mov	r2, r3
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d906      	bls.n	8014ee0 <pbuf_copy+0xcc>
 8014ed2:	4b32      	ldr	r3, [pc, #200]	@ (8014f9c <pbuf_copy+0x188>)
 8014ed4:	f240 32da 	movw	r2, #986	@ 0x3da
 8014ed8:	4934      	ldr	r1, [pc, #208]	@ (8014fac <pbuf_copy+0x198>)
 8014eda:	4832      	ldr	r0, [pc, #200]	@ (8014fa4 <pbuf_copy+0x190>)
 8014edc:	f00a ffe2 	bl	801fea4 <iprintf>
    if (offset_from >= p_from->len) {
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	895b      	ldrh	r3, [r3, #10]
 8014ee4:	461a      	mov	r2, r3
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	d304      	bcc.n	8014ef6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014eec:	2300      	movs	r3, #0
 8014eee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	895b      	ldrh	r3, [r3, #10]
 8014efa:	461a      	mov	r2, r3
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d114      	bne.n	8014f2c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014f02:	2300      	movs	r3, #0
 8014f04:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d10c      	bne.n	8014f2c <pbuf_copy+0x118>
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d009      	beq.n	8014f2c <pbuf_copy+0x118>
 8014f18:	4b20      	ldr	r3, [pc, #128]	@ (8014f9c <pbuf_copy+0x188>)
 8014f1a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8014f1e:	4924      	ldr	r1, [pc, #144]	@ (8014fb0 <pbuf_copy+0x19c>)
 8014f20:	4820      	ldr	r0, [pc, #128]	@ (8014fa4 <pbuf_copy+0x190>)
 8014f22:	f00a ffbf 	bl	801fea4 <iprintf>
 8014f26:	f06f 030f 	mvn.w	r3, #15
 8014f2a:	e032      	b.n	8014f92 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d013      	beq.n	8014f5a <pbuf_copy+0x146>
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	895a      	ldrh	r2, [r3, #10]
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	891b      	ldrh	r3, [r3, #8]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d10d      	bne.n	8014f5a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d009      	beq.n	8014f5a <pbuf_copy+0x146>
 8014f46:	4b15      	ldr	r3, [pc, #84]	@ (8014f9c <pbuf_copy+0x188>)
 8014f48:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8014f4c:	4919      	ldr	r1, [pc, #100]	@ (8014fb4 <pbuf_copy+0x1a0>)
 8014f4e:	4815      	ldr	r0, [pc, #84]	@ (8014fa4 <pbuf_copy+0x190>)
 8014f50:	f00a ffa8 	bl	801fea4 <iprintf>
 8014f54:	f06f 0305 	mvn.w	r3, #5
 8014f58:	e01b      	b.n	8014f92 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d013      	beq.n	8014f88 <pbuf_copy+0x174>
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	895a      	ldrh	r2, [r3, #10]
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	891b      	ldrh	r3, [r3, #8]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d10d      	bne.n	8014f88 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d009      	beq.n	8014f88 <pbuf_copy+0x174>
 8014f74:	4b09      	ldr	r3, [pc, #36]	@ (8014f9c <pbuf_copy+0x188>)
 8014f76:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8014f7a:	490e      	ldr	r1, [pc, #56]	@ (8014fb4 <pbuf_copy+0x1a0>)
 8014f7c:	4809      	ldr	r0, [pc, #36]	@ (8014fa4 <pbuf_copy+0x190>)
 8014f7e:	f00a ff91 	bl	801fea4 <iprintf>
 8014f82:	f06f 0305 	mvn.w	r3, #5
 8014f86:	e004      	b.n	8014f92 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f47f af61 	bne.w	8014e52 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014f90:	2300      	movs	r3, #0
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	08022434 	.word	0x08022434
 8014fa0:	080226dc 	.word	0x080226dc
 8014fa4:	08022494 	.word	0x08022494
 8014fa8:	0802270c 	.word	0x0802270c
 8014fac:	08022724 	.word	0x08022724
 8014fb0:	08022740 	.word	0x08022740
 8014fb4:	08022750 	.word	0x08022750

08014fb8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b088      	sub	sp, #32
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	4611      	mov	r1, r2
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	460b      	mov	r3, r1
 8014fc8:	80fb      	strh	r3, [r7, #6]
 8014fca:	4613      	mov	r3, r2
 8014fcc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d108      	bne.n	8014fee <pbuf_copy_partial+0x36>
 8014fdc:	4b2b      	ldr	r3, [pc, #172]	@ (801508c <pbuf_copy_partial+0xd4>)
 8014fde:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014fe2:	492b      	ldr	r1, [pc, #172]	@ (8015090 <pbuf_copy_partial+0xd8>)
 8014fe4:	482b      	ldr	r0, [pc, #172]	@ (8015094 <pbuf_copy_partial+0xdc>)
 8014fe6:	f00a ff5d 	bl	801fea4 <iprintf>
 8014fea:	2300      	movs	r3, #0
 8014fec:	e04a      	b.n	8015084 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d108      	bne.n	8015006 <pbuf_copy_partial+0x4e>
 8014ff4:	4b25      	ldr	r3, [pc, #148]	@ (801508c <pbuf_copy_partial+0xd4>)
 8014ff6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8014ffa:	4927      	ldr	r1, [pc, #156]	@ (8015098 <pbuf_copy_partial+0xe0>)
 8014ffc:	4825      	ldr	r0, [pc, #148]	@ (8015094 <pbuf_copy_partial+0xdc>)
 8014ffe:	f00a ff51 	bl	801fea4 <iprintf>
 8015002:	2300      	movs	r3, #0
 8015004:	e03e      	b.n	8015084 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	61fb      	str	r3, [r7, #28]
 801500a:	e034      	b.n	8015076 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801500c:	88bb      	ldrh	r3, [r7, #4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d00a      	beq.n	8015028 <pbuf_copy_partial+0x70>
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	895b      	ldrh	r3, [r3, #10]
 8015016:	88ba      	ldrh	r2, [r7, #4]
 8015018:	429a      	cmp	r2, r3
 801501a:	d305      	bcc.n	8015028 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801501c:	69fb      	ldr	r3, [r7, #28]
 801501e:	895b      	ldrh	r3, [r3, #10]
 8015020:	88ba      	ldrh	r2, [r7, #4]
 8015022:	1ad3      	subs	r3, r2, r3
 8015024:	80bb      	strh	r3, [r7, #4]
 8015026:	e023      	b.n	8015070 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015028:	69fb      	ldr	r3, [r7, #28]
 801502a:	895a      	ldrh	r2, [r3, #10]
 801502c:	88bb      	ldrh	r3, [r7, #4]
 801502e:	1ad3      	subs	r3, r2, r3
 8015030:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015032:	8b3a      	ldrh	r2, [r7, #24]
 8015034:	88fb      	ldrh	r3, [r7, #6]
 8015036:	429a      	cmp	r2, r3
 8015038:	d901      	bls.n	801503e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801503a:	88fb      	ldrh	r3, [r7, #6]
 801503c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801503e:	8b7b      	ldrh	r3, [r7, #26]
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	18d0      	adds	r0, r2, r3
 8015044:	69fb      	ldr	r3, [r7, #28]
 8015046:	685a      	ldr	r2, [r3, #4]
 8015048:	88bb      	ldrh	r3, [r7, #4]
 801504a:	4413      	add	r3, r2
 801504c:	8b3a      	ldrh	r2, [r7, #24]
 801504e:	4619      	mov	r1, r3
 8015050:	f00b f8fd 	bl	802024e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015054:	8afa      	ldrh	r2, [r7, #22]
 8015056:	8b3b      	ldrh	r3, [r7, #24]
 8015058:	4413      	add	r3, r2
 801505a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801505c:	8b7a      	ldrh	r2, [r7, #26]
 801505e:	8b3b      	ldrh	r3, [r7, #24]
 8015060:	4413      	add	r3, r2
 8015062:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015064:	88fa      	ldrh	r2, [r7, #6]
 8015066:	8b3b      	ldrh	r3, [r7, #24]
 8015068:	1ad3      	subs	r3, r2, r3
 801506a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801506c:	2300      	movs	r3, #0
 801506e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015070:	69fb      	ldr	r3, [r7, #28]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	61fb      	str	r3, [r7, #28]
 8015076:	88fb      	ldrh	r3, [r7, #6]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d002      	beq.n	8015082 <pbuf_copy_partial+0xca>
 801507c:	69fb      	ldr	r3, [r7, #28]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d1c4      	bne.n	801500c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015082:	8afb      	ldrh	r3, [r7, #22]
}
 8015084:	4618      	mov	r0, r3
 8015086:	3720      	adds	r7, #32
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	08022434 	.word	0x08022434
 8015090:	0802277c 	.word	0x0802277c
 8015094:	08022494 	.word	0x08022494
 8015098:	0802279c 	.word	0x0802279c

0801509c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	4603      	mov	r3, r0
 80150a4:	603a      	str	r2, [r7, #0]
 80150a6:	71fb      	strb	r3, [r7, #7]
 80150a8:	460b      	mov	r3, r1
 80150aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	8919      	ldrh	r1, [r3, #8]
 80150b0:	88ba      	ldrh	r2, [r7, #4]
 80150b2:	79fb      	ldrb	r3, [r7, #7]
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7ff fa95 	bl	80145e4 <pbuf_alloc>
 80150ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d101      	bne.n	80150c6 <pbuf_clone+0x2a>
    return NULL;
 80150c2:	2300      	movs	r3, #0
 80150c4:	e011      	b.n	80150ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80150c6:	6839      	ldr	r1, [r7, #0]
 80150c8:	68f8      	ldr	r0, [r7, #12]
 80150ca:	f7ff fea3 	bl	8014e14 <pbuf_copy>
 80150ce:	4603      	mov	r3, r0
 80150d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80150d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d006      	beq.n	80150e8 <pbuf_clone+0x4c>
 80150da:	4b06      	ldr	r3, [pc, #24]	@ (80150f4 <pbuf_clone+0x58>)
 80150dc:	f240 5224 	movw	r2, #1316	@ 0x524
 80150e0:	4905      	ldr	r1, [pc, #20]	@ (80150f8 <pbuf_clone+0x5c>)
 80150e2:	4806      	ldr	r0, [pc, #24]	@ (80150fc <pbuf_clone+0x60>)
 80150e4:	f00a fede 	bl	801fea4 <iprintf>
  return q;
 80150e8:	68fb      	ldr	r3, [r7, #12]
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3710      	adds	r7, #16
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	bf00      	nop
 80150f4:	08022434 	.word	0x08022434
 80150f8:	080228a8 	.word	0x080228a8
 80150fc:	08022494 	.word	0x08022494

08015100 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015104:	f00a fdce 	bl	801fca4 <rand>
 8015108:	4603      	mov	r3, r0
 801510a:	b29b      	uxth	r3, r3
 801510c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015110:	b29b      	uxth	r3, r3
 8015112:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015116:	b29a      	uxth	r2, r3
 8015118:	4b01      	ldr	r3, [pc, #4]	@ (8015120 <tcp_init+0x20>)
 801511a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801511c:	bf00      	nop
 801511e:	bd80      	pop	{r7, pc}
 8015120:	20000068 	.word	0x20000068

08015124 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	7d1b      	ldrb	r3, [r3, #20]
 8015130:	2b01      	cmp	r3, #1
 8015132:	d105      	bne.n	8015140 <tcp_free+0x1c>
 8015134:	4b06      	ldr	r3, [pc, #24]	@ (8015150 <tcp_free+0x2c>)
 8015136:	22d4      	movs	r2, #212	@ 0xd4
 8015138:	4906      	ldr	r1, [pc, #24]	@ (8015154 <tcp_free+0x30>)
 801513a:	4807      	ldr	r0, [pc, #28]	@ (8015158 <tcp_free+0x34>)
 801513c:	f00a feb2 	bl	801fea4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015140:	6879      	ldr	r1, [r7, #4]
 8015142:	2001      	movs	r0, #1
 8015144:	f7fe fd98 	bl	8013c78 <memp_free>
}
 8015148:	bf00      	nop
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	08022934 	.word	0x08022934
 8015154:	08022964 	.word	0x08022964
 8015158:	08022978 	.word	0x08022978

0801515c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	7d1b      	ldrb	r3, [r3, #20]
 8015168:	2b01      	cmp	r3, #1
 801516a:	d105      	bne.n	8015178 <tcp_free_listen+0x1c>
 801516c:	4b06      	ldr	r3, [pc, #24]	@ (8015188 <tcp_free_listen+0x2c>)
 801516e:	22df      	movs	r2, #223	@ 0xdf
 8015170:	4906      	ldr	r1, [pc, #24]	@ (801518c <tcp_free_listen+0x30>)
 8015172:	4807      	ldr	r0, [pc, #28]	@ (8015190 <tcp_free_listen+0x34>)
 8015174:	f00a fe96 	bl	801fea4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015178:	6879      	ldr	r1, [r7, #4]
 801517a:	2002      	movs	r0, #2
 801517c:	f7fe fd7c 	bl	8013c78 <memp_free>
}
 8015180:	bf00      	nop
 8015182:	3708      	adds	r7, #8
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	08022934 	.word	0x08022934
 801518c:	080229a0 	.word	0x080229a0
 8015190:	08022978 	.word	0x08022978

08015194 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015198:	f001 f8f6 	bl	8016388 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801519c:	4b07      	ldr	r3, [pc, #28]	@ (80151bc <tcp_tmr+0x28>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	3301      	adds	r3, #1
 80151a2:	b2da      	uxtb	r2, r3
 80151a4:	4b05      	ldr	r3, [pc, #20]	@ (80151bc <tcp_tmr+0x28>)
 80151a6:	701a      	strb	r2, [r3, #0]
 80151a8:	4b04      	ldr	r3, [pc, #16]	@ (80151bc <tcp_tmr+0x28>)
 80151aa:	781b      	ldrb	r3, [r3, #0]
 80151ac:	f003 0301 	and.w	r3, r3, #1
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d001      	beq.n	80151b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80151b4:	f000 fda6 	bl	8015d04 <tcp_slowtmr>
  }
}
 80151b8:	bf00      	nop
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	200227b1 	.word	0x200227b1

080151c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d105      	bne.n	80151dc <tcp_remove_listener+0x1c>
 80151d0:	4b0d      	ldr	r3, [pc, #52]	@ (8015208 <tcp_remove_listener+0x48>)
 80151d2:	22ff      	movs	r2, #255	@ 0xff
 80151d4:	490d      	ldr	r1, [pc, #52]	@ (801520c <tcp_remove_listener+0x4c>)
 80151d6:	480e      	ldr	r0, [pc, #56]	@ (8015210 <tcp_remove_listener+0x50>)
 80151d8:	f00a fe64 	bl	801fea4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	60fb      	str	r3, [r7, #12]
 80151e0:	e00a      	b.n	80151f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151e6:	683a      	ldr	r2, [r7, #0]
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d102      	bne.n	80151f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	2200      	movs	r2, #0
 80151f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	68db      	ldr	r3, [r3, #12]
 80151f6:	60fb      	str	r3, [r7, #12]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d1f1      	bne.n	80151e2 <tcp_remove_listener+0x22>
    }
  }
}
 80151fe:	bf00      	nop
 8015200:	bf00      	nop
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}
 8015208:	08022934 	.word	0x08022934
 801520c:	080229bc 	.word	0x080229bc
 8015210:	08022978 	.word	0x08022978

08015214 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b084      	sub	sp, #16
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d106      	bne.n	8015230 <tcp_listen_closed+0x1c>
 8015222:	4b14      	ldr	r3, [pc, #80]	@ (8015274 <tcp_listen_closed+0x60>)
 8015224:	f240 1211 	movw	r2, #273	@ 0x111
 8015228:	4913      	ldr	r1, [pc, #76]	@ (8015278 <tcp_listen_closed+0x64>)
 801522a:	4814      	ldr	r0, [pc, #80]	@ (801527c <tcp_listen_closed+0x68>)
 801522c:	f00a fe3a 	bl	801fea4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	7d1b      	ldrb	r3, [r3, #20]
 8015234:	2b01      	cmp	r3, #1
 8015236:	d006      	beq.n	8015246 <tcp_listen_closed+0x32>
 8015238:	4b0e      	ldr	r3, [pc, #56]	@ (8015274 <tcp_listen_closed+0x60>)
 801523a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801523e:	4910      	ldr	r1, [pc, #64]	@ (8015280 <tcp_listen_closed+0x6c>)
 8015240:	480e      	ldr	r0, [pc, #56]	@ (801527c <tcp_listen_closed+0x68>)
 8015242:	f00a fe2f 	bl	801fea4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015246:	2301      	movs	r3, #1
 8015248:	60fb      	str	r3, [r7, #12]
 801524a:	e00b      	b.n	8015264 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801524c:	4a0d      	ldr	r2, [pc, #52]	@ (8015284 <tcp_listen_closed+0x70>)
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	6879      	ldr	r1, [r7, #4]
 8015258:	4618      	mov	r0, r3
 801525a:	f7ff ffb1 	bl	80151c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	3301      	adds	r3, #1
 8015262:	60fb      	str	r3, [r7, #12]
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2b03      	cmp	r3, #3
 8015268:	d9f0      	bls.n	801524c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801526a:	bf00      	nop
 801526c:	bf00      	nop
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	08022934 	.word	0x08022934
 8015278:	080229e4 	.word	0x080229e4
 801527c:	08022978 	.word	0x08022978
 8015280:	080229f0 	.word	0x080229f0
 8015284:	08025460 	.word	0x08025460

08015288 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015288:	b5b0      	push	{r4, r5, r7, lr}
 801528a:	b088      	sub	sp, #32
 801528c:	af04      	add	r7, sp, #16
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	460b      	mov	r3, r1
 8015292:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d106      	bne.n	80152a8 <tcp_close_shutdown+0x20>
 801529a:	4b63      	ldr	r3, [pc, #396]	@ (8015428 <tcp_close_shutdown+0x1a0>)
 801529c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80152a0:	4962      	ldr	r1, [pc, #392]	@ (801542c <tcp_close_shutdown+0x1a4>)
 80152a2:	4863      	ldr	r0, [pc, #396]	@ (8015430 <tcp_close_shutdown+0x1a8>)
 80152a4:	f00a fdfe 	bl	801fea4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80152a8:	78fb      	ldrb	r3, [r7, #3]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d066      	beq.n	801537c <tcp_close_shutdown+0xf4>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	7d1b      	ldrb	r3, [r3, #20]
 80152b2:	2b04      	cmp	r3, #4
 80152b4:	d003      	beq.n	80152be <tcp_close_shutdown+0x36>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	7d1b      	ldrb	r3, [r3, #20]
 80152ba:	2b07      	cmp	r3, #7
 80152bc:	d15e      	bne.n	801537c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d104      	bne.n	80152d0 <tcp_close_shutdown+0x48>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152ca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80152ce:	d055      	beq.n	801537c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	8b5b      	ldrh	r3, [r3, #26]
 80152d4:	f003 0310 	and.w	r3, r3, #16
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d106      	bne.n	80152ea <tcp_close_shutdown+0x62>
 80152dc:	4b52      	ldr	r3, [pc, #328]	@ (8015428 <tcp_close_shutdown+0x1a0>)
 80152de:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80152e2:	4954      	ldr	r1, [pc, #336]	@ (8015434 <tcp_close_shutdown+0x1ac>)
 80152e4:	4852      	ldr	r0, [pc, #328]	@ (8015430 <tcp_close_shutdown+0x1a8>)
 80152e6:	f00a fddd 	bl	801fea4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80152f2:	687d      	ldr	r5, [r7, #4]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	3304      	adds	r3, #4
 80152f8:	687a      	ldr	r2, [r7, #4]
 80152fa:	8ad2      	ldrh	r2, [r2, #22]
 80152fc:	6879      	ldr	r1, [r7, #4]
 80152fe:	8b09      	ldrh	r1, [r1, #24]
 8015300:	9102      	str	r1, [sp, #8]
 8015302:	9201      	str	r2, [sp, #4]
 8015304:	9300      	str	r3, [sp, #0]
 8015306:	462b      	mov	r3, r5
 8015308:	4622      	mov	r2, r4
 801530a:	4601      	mov	r1, r0
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f005 fe79 	bl	801b004 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f001 fbe8 	bl	8016ae8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015318:	4b47      	ldr	r3, [pc, #284]	@ (8015438 <tcp_close_shutdown+0x1b0>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	687a      	ldr	r2, [r7, #4]
 801531e:	429a      	cmp	r2, r3
 8015320:	d105      	bne.n	801532e <tcp_close_shutdown+0xa6>
 8015322:	4b45      	ldr	r3, [pc, #276]	@ (8015438 <tcp_close_shutdown+0x1b0>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	68db      	ldr	r3, [r3, #12]
 8015328:	4a43      	ldr	r2, [pc, #268]	@ (8015438 <tcp_close_shutdown+0x1b0>)
 801532a:	6013      	str	r3, [r2, #0]
 801532c:	e013      	b.n	8015356 <tcp_close_shutdown+0xce>
 801532e:	4b42      	ldr	r3, [pc, #264]	@ (8015438 <tcp_close_shutdown+0x1b0>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	60fb      	str	r3, [r7, #12]
 8015334:	e00c      	b.n	8015350 <tcp_close_shutdown+0xc8>
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	68db      	ldr	r3, [r3, #12]
 801533a:	687a      	ldr	r2, [r7, #4]
 801533c:	429a      	cmp	r2, r3
 801533e:	d104      	bne.n	801534a <tcp_close_shutdown+0xc2>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	68da      	ldr	r2, [r3, #12]
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	60da      	str	r2, [r3, #12]
 8015348:	e005      	b.n	8015356 <tcp_close_shutdown+0xce>
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	68db      	ldr	r3, [r3, #12]
 801534e:	60fb      	str	r3, [r7, #12]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d1ef      	bne.n	8015336 <tcp_close_shutdown+0xae>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	60da      	str	r2, [r3, #12]
 801535c:	4b37      	ldr	r3, [pc, #220]	@ (801543c <tcp_close_shutdown+0x1b4>)
 801535e:	2201      	movs	r2, #1
 8015360:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015362:	4b37      	ldr	r3, [pc, #220]	@ (8015440 <tcp_close_shutdown+0x1b8>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	687a      	ldr	r2, [r7, #4]
 8015368:	429a      	cmp	r2, r3
 801536a:	d102      	bne.n	8015372 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801536c:	f004 f882 	bl	8019474 <tcp_trigger_input_pcb_close>
 8015370:	e002      	b.n	8015378 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7ff fed6 	bl	8015124 <tcp_free>
      }
      return ERR_OK;
 8015378:	2300      	movs	r3, #0
 801537a:	e050      	b.n	801541e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	7d1b      	ldrb	r3, [r3, #20]
 8015380:	2b02      	cmp	r3, #2
 8015382:	d03b      	beq.n	80153fc <tcp_close_shutdown+0x174>
 8015384:	2b02      	cmp	r3, #2
 8015386:	dc44      	bgt.n	8015412 <tcp_close_shutdown+0x18a>
 8015388:	2b00      	cmp	r3, #0
 801538a:	d002      	beq.n	8015392 <tcp_close_shutdown+0x10a>
 801538c:	2b01      	cmp	r3, #1
 801538e:	d02a      	beq.n	80153e6 <tcp_close_shutdown+0x15e>
 8015390:	e03f      	b.n	8015412 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	8adb      	ldrh	r3, [r3, #22]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d021      	beq.n	80153de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801539a:	4b2a      	ldr	r3, [pc, #168]	@ (8015444 <tcp_close_shutdown+0x1bc>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d105      	bne.n	80153b0 <tcp_close_shutdown+0x128>
 80153a4:	4b27      	ldr	r3, [pc, #156]	@ (8015444 <tcp_close_shutdown+0x1bc>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	4a26      	ldr	r2, [pc, #152]	@ (8015444 <tcp_close_shutdown+0x1bc>)
 80153ac:	6013      	str	r3, [r2, #0]
 80153ae:	e013      	b.n	80153d8 <tcp_close_shutdown+0x150>
 80153b0:	4b24      	ldr	r3, [pc, #144]	@ (8015444 <tcp_close_shutdown+0x1bc>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	60bb      	str	r3, [r7, #8]
 80153b6:	e00c      	b.n	80153d2 <tcp_close_shutdown+0x14a>
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d104      	bne.n	80153cc <tcp_close_shutdown+0x144>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	68da      	ldr	r2, [r3, #12]
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	60da      	str	r2, [r3, #12]
 80153ca:	e005      	b.n	80153d8 <tcp_close_shutdown+0x150>
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	60bb      	str	r3, [r7, #8]
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d1ef      	bne.n	80153b8 <tcp_close_shutdown+0x130>
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2200      	movs	r2, #0
 80153dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f7ff fea0 	bl	8015124 <tcp_free>
      break;
 80153e4:	e01a      	b.n	801541c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f7ff ff14 	bl	8015214 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80153ec:	6879      	ldr	r1, [r7, #4]
 80153ee:	4816      	ldr	r0, [pc, #88]	@ (8015448 <tcp_close_shutdown+0x1c0>)
 80153f0:	f001 fbca 	bl	8016b88 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7ff feb1 	bl	801515c <tcp_free_listen>
      break;
 80153fa:	e00f      	b.n	801541c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80153fc:	6879      	ldr	r1, [r7, #4]
 80153fe:	480e      	ldr	r0, [pc, #56]	@ (8015438 <tcp_close_shutdown+0x1b0>)
 8015400:	f001 fbc2 	bl	8016b88 <tcp_pcb_remove>
 8015404:	4b0d      	ldr	r3, [pc, #52]	@ (801543c <tcp_close_shutdown+0x1b4>)
 8015406:	2201      	movs	r2, #1
 8015408:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801540a:	6878      	ldr	r0, [r7, #4]
 801540c:	f7ff fe8a 	bl	8015124 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015410:	e004      	b.n	801541c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f000 f81a 	bl	801544c <tcp_close_shutdown_fin>
 8015418:	4603      	mov	r3, r0
 801541a:	e000      	b.n	801541e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801541c:	2300      	movs	r3, #0
}
 801541e:	4618      	mov	r0, r3
 8015420:	3710      	adds	r7, #16
 8015422:	46bd      	mov	sp, r7
 8015424:	bdb0      	pop	{r4, r5, r7, pc}
 8015426:	bf00      	nop
 8015428:	08022934 	.word	0x08022934
 801542c:	08022a08 	.word	0x08022a08
 8015430:	08022978 	.word	0x08022978
 8015434:	08022a28 	.word	0x08022a28
 8015438:	200227a8 	.word	0x200227a8
 801543c:	200227b0 	.word	0x200227b0
 8015440:	200227ec 	.word	0x200227ec
 8015444:	200227a0 	.word	0x200227a0
 8015448:	200227a4 	.word	0x200227a4

0801544c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b084      	sub	sp, #16
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d106      	bne.n	8015468 <tcp_close_shutdown_fin+0x1c>
 801545a:	4b2e      	ldr	r3, [pc, #184]	@ (8015514 <tcp_close_shutdown_fin+0xc8>)
 801545c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8015460:	492d      	ldr	r1, [pc, #180]	@ (8015518 <tcp_close_shutdown_fin+0xcc>)
 8015462:	482e      	ldr	r0, [pc, #184]	@ (801551c <tcp_close_shutdown_fin+0xd0>)
 8015464:	f00a fd1e 	bl	801fea4 <iprintf>

  switch (pcb->state) {
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	7d1b      	ldrb	r3, [r3, #20]
 801546c:	2b07      	cmp	r3, #7
 801546e:	d020      	beq.n	80154b2 <tcp_close_shutdown_fin+0x66>
 8015470:	2b07      	cmp	r3, #7
 8015472:	dc2b      	bgt.n	80154cc <tcp_close_shutdown_fin+0x80>
 8015474:	2b03      	cmp	r3, #3
 8015476:	d002      	beq.n	801547e <tcp_close_shutdown_fin+0x32>
 8015478:	2b04      	cmp	r3, #4
 801547a:	d00d      	beq.n	8015498 <tcp_close_shutdown_fin+0x4c>
 801547c:	e026      	b.n	80154cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f004 fec2 	bl	801a208 <tcp_send_fin>
 8015484:	4603      	mov	r3, r0
 8015486:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d11f      	bne.n	80154d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2205      	movs	r2, #5
 8015494:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015496:	e01b      	b.n	80154d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f004 feb5 	bl	801a208 <tcp_send_fin>
 801549e:	4603      	mov	r3, r0
 80154a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80154a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d114      	bne.n	80154d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2205      	movs	r2, #5
 80154ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154b0:	e010      	b.n	80154d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f004 fea8 	bl	801a208 <tcp_send_fin>
 80154b8:	4603      	mov	r3, r0
 80154ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80154bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d109      	bne.n	80154d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2209      	movs	r2, #9
 80154c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154ca:	e005      	b.n	80154d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80154cc:	2300      	movs	r3, #0
 80154ce:	e01c      	b.n	801550a <tcp_close_shutdown_fin+0xbe>
      break;
 80154d0:	bf00      	nop
 80154d2:	e002      	b.n	80154da <tcp_close_shutdown_fin+0x8e>
      break;
 80154d4:	bf00      	nop
 80154d6:	e000      	b.n	80154da <tcp_close_shutdown_fin+0x8e>
      break;
 80154d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80154da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d103      	bne.n	80154ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f004 ffce 	bl	801a484 <tcp_output>
 80154e8:	e00d      	b.n	8015506 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80154ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80154f2:	d108      	bne.n	8015506 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	8b5b      	ldrh	r3, [r3, #26]
 80154f8:	f043 0308 	orr.w	r3, r3, #8
 80154fc:	b29a      	uxth	r2, r3
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015502:	2300      	movs	r3, #0
 8015504:	e001      	b.n	801550a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801550a:	4618      	mov	r0, r3
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	08022934 	.word	0x08022934
 8015518:	080229e4 	.word	0x080229e4
 801551c:	08022978 	.word	0x08022978

08015520 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d109      	bne.n	8015542 <tcp_close+0x22>
 801552e:	4b0f      	ldr	r3, [pc, #60]	@ (801556c <tcp_close+0x4c>)
 8015530:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8015534:	490e      	ldr	r1, [pc, #56]	@ (8015570 <tcp_close+0x50>)
 8015536:	480f      	ldr	r0, [pc, #60]	@ (8015574 <tcp_close+0x54>)
 8015538:	f00a fcb4 	bl	801fea4 <iprintf>
 801553c:	f06f 030f 	mvn.w	r3, #15
 8015540:	e00f      	b.n	8015562 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	7d1b      	ldrb	r3, [r3, #20]
 8015546:	2b01      	cmp	r3, #1
 8015548:	d006      	beq.n	8015558 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	8b5b      	ldrh	r3, [r3, #26]
 801554e:	f043 0310 	orr.w	r3, r3, #16
 8015552:	b29a      	uxth	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015558:	2101      	movs	r1, #1
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f7ff fe94 	bl	8015288 <tcp_close_shutdown>
 8015560:	4603      	mov	r3, r0
}
 8015562:	4618      	mov	r0, r3
 8015564:	3708      	adds	r7, #8
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	08022934 	.word	0x08022934
 8015570:	08022a44 	.word	0x08022a44
 8015574:	08022978 	.word	0x08022978

08015578 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d109      	bne.n	801559e <tcp_shutdown+0x26>
 801558a:	4b26      	ldr	r3, [pc, #152]	@ (8015624 <tcp_shutdown+0xac>)
 801558c:	f240 2207 	movw	r2, #519	@ 0x207
 8015590:	4925      	ldr	r1, [pc, #148]	@ (8015628 <tcp_shutdown+0xb0>)
 8015592:	4826      	ldr	r0, [pc, #152]	@ (801562c <tcp_shutdown+0xb4>)
 8015594:	f00a fc86 	bl	801fea4 <iprintf>
 8015598:	f06f 030f 	mvn.w	r3, #15
 801559c:	e03d      	b.n	801561a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	7d1b      	ldrb	r3, [r3, #20]
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	d102      	bne.n	80155ac <tcp_shutdown+0x34>
    return ERR_CONN;
 80155a6:	f06f 030a 	mvn.w	r3, #10
 80155aa:	e036      	b.n	801561a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d01b      	beq.n	80155ea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	8b5b      	ldrh	r3, [r3, #26]
 80155b6:	f043 0310 	orr.w	r3, r3, #16
 80155ba:	b29a      	uxth	r2, r3
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d005      	beq.n	80155d2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80155c6:	2101      	movs	r1, #1
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f7ff fe5d 	bl	8015288 <tcp_close_shutdown>
 80155ce:	4603      	mov	r3, r0
 80155d0:	e023      	b.n	801561a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d007      	beq.n	80155ea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff fae4 	bl	8014bac <pbuf_free>
      pcb->refused_data = NULL;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	2200      	movs	r2, #0
 80155e8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d013      	beq.n	8015618 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	7d1b      	ldrb	r3, [r3, #20]
 80155f4:	2b04      	cmp	r3, #4
 80155f6:	dc02      	bgt.n	80155fe <tcp_shutdown+0x86>
 80155f8:	2b03      	cmp	r3, #3
 80155fa:	da02      	bge.n	8015602 <tcp_shutdown+0x8a>
 80155fc:	e009      	b.n	8015612 <tcp_shutdown+0x9a>
 80155fe:	2b07      	cmp	r3, #7
 8015600:	d107      	bne.n	8015612 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	b2db      	uxtb	r3, r3
 8015606:	4619      	mov	r1, r3
 8015608:	68f8      	ldr	r0, [r7, #12]
 801560a:	f7ff fe3d 	bl	8015288 <tcp_close_shutdown>
 801560e:	4603      	mov	r3, r0
 8015610:	e003      	b.n	801561a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8015612:	f06f 030a 	mvn.w	r3, #10
 8015616:	e000      	b.n	801561a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015618:	2300      	movs	r3, #0
}
 801561a:	4618      	mov	r0, r3
 801561c:	3710      	adds	r7, #16
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	08022934 	.word	0x08022934
 8015628:	08022a5c 	.word	0x08022a5c
 801562c:	08022978 	.word	0x08022978

08015630 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b08e      	sub	sp, #56	@ 0x38
 8015634:	af04      	add	r7, sp, #16
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d107      	bne.n	8015650 <tcp_abandon+0x20>
 8015640:	4b52      	ldr	r3, [pc, #328]	@ (801578c <tcp_abandon+0x15c>)
 8015642:	f240 223d 	movw	r2, #573	@ 0x23d
 8015646:	4952      	ldr	r1, [pc, #328]	@ (8015790 <tcp_abandon+0x160>)
 8015648:	4852      	ldr	r0, [pc, #328]	@ (8015794 <tcp_abandon+0x164>)
 801564a:	f00a fc2b 	bl	801fea4 <iprintf>
 801564e:	e099      	b.n	8015784 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	7d1b      	ldrb	r3, [r3, #20]
 8015654:	2b01      	cmp	r3, #1
 8015656:	d106      	bne.n	8015666 <tcp_abandon+0x36>
 8015658:	4b4c      	ldr	r3, [pc, #304]	@ (801578c <tcp_abandon+0x15c>)
 801565a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801565e:	494e      	ldr	r1, [pc, #312]	@ (8015798 <tcp_abandon+0x168>)
 8015660:	484c      	ldr	r0, [pc, #304]	@ (8015794 <tcp_abandon+0x164>)
 8015662:	f00a fc1f 	bl	801fea4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	7d1b      	ldrb	r3, [r3, #20]
 801566a:	2b0a      	cmp	r3, #10
 801566c:	d107      	bne.n	801567e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801566e:	6879      	ldr	r1, [r7, #4]
 8015670:	484a      	ldr	r0, [pc, #296]	@ (801579c <tcp_abandon+0x16c>)
 8015672:	f001 fa89 	bl	8016b88 <tcp_pcb_remove>
    tcp_free(pcb);
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f7ff fd54 	bl	8015124 <tcp_free>
 801567c:	e082      	b.n	8015784 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801567e:	2300      	movs	r3, #0
 8015680:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8015682:	2300      	movs	r3, #0
 8015684:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801568a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015690:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015698:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	691b      	ldr	r3, [r3, #16]
 801569e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	7d1b      	ldrb	r3, [r3, #20]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d126      	bne.n	80156f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	8adb      	ldrh	r3, [r3, #22]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d02e      	beq.n	801570e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80156b0:	4b3b      	ldr	r3, [pc, #236]	@ (80157a0 <tcp_abandon+0x170>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d105      	bne.n	80156c6 <tcp_abandon+0x96>
 80156ba:	4b39      	ldr	r3, [pc, #228]	@ (80157a0 <tcp_abandon+0x170>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68db      	ldr	r3, [r3, #12]
 80156c0:	4a37      	ldr	r2, [pc, #220]	@ (80157a0 <tcp_abandon+0x170>)
 80156c2:	6013      	str	r3, [r2, #0]
 80156c4:	e013      	b.n	80156ee <tcp_abandon+0xbe>
 80156c6:	4b36      	ldr	r3, [pc, #216]	@ (80157a0 <tcp_abandon+0x170>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	61fb      	str	r3, [r7, #28]
 80156cc:	e00c      	b.n	80156e8 <tcp_abandon+0xb8>
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	68db      	ldr	r3, [r3, #12]
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d104      	bne.n	80156e2 <tcp_abandon+0xb2>
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	68da      	ldr	r2, [r3, #12]
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	60da      	str	r2, [r3, #12]
 80156e0:	e005      	b.n	80156ee <tcp_abandon+0xbe>
 80156e2:	69fb      	ldr	r3, [r7, #28]
 80156e4:	68db      	ldr	r3, [r3, #12]
 80156e6:	61fb      	str	r3, [r7, #28]
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d1ef      	bne.n	80156ce <tcp_abandon+0x9e>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2200      	movs	r2, #0
 80156f2:	60da      	str	r2, [r3, #12]
 80156f4:	e00b      	b.n	801570e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	8adb      	ldrh	r3, [r3, #22]
 80156fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015700:	6879      	ldr	r1, [r7, #4]
 8015702:	4828      	ldr	r0, [pc, #160]	@ (80157a4 <tcp_abandon+0x174>)
 8015704:	f001 fa40 	bl	8016b88 <tcp_pcb_remove>
 8015708:	4b27      	ldr	r3, [pc, #156]	@ (80157a8 <tcp_abandon+0x178>)
 801570a:	2201      	movs	r2, #1
 801570c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015712:	2b00      	cmp	r3, #0
 8015714:	d004      	beq.n	8015720 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801571a:	4618      	mov	r0, r3
 801571c:	f000 ff14 	bl	8016548 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015724:	2b00      	cmp	r3, #0
 8015726:	d004      	beq.n	8015732 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801572c:	4618      	mov	r0, r3
 801572e:	f000 ff0b 	bl	8016548 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015736:	2b00      	cmp	r3, #0
 8015738:	d004      	beq.n	8015744 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801573e:	4618      	mov	r0, r3
 8015740:	f000 ff02 	bl	8016548 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015746:	2b00      	cmp	r3, #0
 8015748:	d00e      	beq.n	8015768 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801574a:	6879      	ldr	r1, [r7, #4]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	3304      	adds	r3, #4
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	8b12      	ldrh	r2, [r2, #24]
 8015754:	9202      	str	r2, [sp, #8]
 8015756:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015758:	9201      	str	r2, [sp, #4]
 801575a:	9300      	str	r3, [sp, #0]
 801575c:	460b      	mov	r3, r1
 801575e:	697a      	ldr	r2, [r7, #20]
 8015760:	69b9      	ldr	r1, [r7, #24]
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	f005 fc4e 	bl	801b004 <tcp_rst>
    }
    last_state = pcb->state;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	7d1b      	ldrb	r3, [r3, #20]
 801576c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f7ff fcd8 	bl	8015124 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015774:	693b      	ldr	r3, [r7, #16]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d004      	beq.n	8015784 <tcp_abandon+0x154>
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	f06f 010c 	mvn.w	r1, #12
 8015780:	68f8      	ldr	r0, [r7, #12]
 8015782:	4798      	blx	r3
  }
}
 8015784:	3728      	adds	r7, #40	@ 0x28
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}
 801578a:	bf00      	nop
 801578c:	08022934 	.word	0x08022934
 8015790:	08022a78 	.word	0x08022a78
 8015794:	08022978 	.word	0x08022978
 8015798:	08022a94 	.word	0x08022a94
 801579c:	200227ac 	.word	0x200227ac
 80157a0:	200227a0 	.word	0x200227a0
 80157a4:	200227a8 	.word	0x200227a8
 80157a8:	200227b0 	.word	0x200227b0

080157ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80157b4:	2101      	movs	r1, #1
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f7ff ff3a 	bl	8015630 <tcp_abandon>
}
 80157bc:	bf00      	nop
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b088      	sub	sp, #32
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	4613      	mov	r3, r2
 80157d0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80157d2:	2304      	movs	r3, #4
 80157d4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80157d6:	68bb      	ldr	r3, [r7, #8]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d101      	bne.n	80157e0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80157dc:	4b3e      	ldr	r3, [pc, #248]	@ (80158d8 <tcp_bind+0x114>)
 80157de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d109      	bne.n	80157fa <tcp_bind+0x36>
 80157e6:	4b3d      	ldr	r3, [pc, #244]	@ (80158dc <tcp_bind+0x118>)
 80157e8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80157ec:	493c      	ldr	r1, [pc, #240]	@ (80158e0 <tcp_bind+0x11c>)
 80157ee:	483d      	ldr	r0, [pc, #244]	@ (80158e4 <tcp_bind+0x120>)
 80157f0:	f00a fb58 	bl	801fea4 <iprintf>
 80157f4:	f06f 030f 	mvn.w	r3, #15
 80157f8:	e06a      	b.n	80158d0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	7d1b      	ldrb	r3, [r3, #20]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d009      	beq.n	8015816 <tcp_bind+0x52>
 8015802:	4b36      	ldr	r3, [pc, #216]	@ (80158dc <tcp_bind+0x118>)
 8015804:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015808:	4937      	ldr	r1, [pc, #220]	@ (80158e8 <tcp_bind+0x124>)
 801580a:	4836      	ldr	r0, [pc, #216]	@ (80158e4 <tcp_bind+0x120>)
 801580c:	f00a fb4a 	bl	801fea4 <iprintf>
 8015810:	f06f 0305 	mvn.w	r3, #5
 8015814:	e05c      	b.n	80158d0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8015816:	88fb      	ldrh	r3, [r7, #6]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d109      	bne.n	8015830 <tcp_bind+0x6c>
    port = tcp_new_port();
 801581c:	f000 f914 	bl	8015a48 <tcp_new_port>
 8015820:	4603      	mov	r3, r0
 8015822:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015824:	88fb      	ldrh	r3, [r7, #6]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d135      	bne.n	8015896 <tcp_bind+0xd2>
      return ERR_BUF;
 801582a:	f06f 0301 	mvn.w	r3, #1
 801582e:	e04f      	b.n	80158d0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015830:	2300      	movs	r3, #0
 8015832:	61fb      	str	r3, [r7, #28]
 8015834:	e02b      	b.n	801588e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015836:	4a2d      	ldr	r2, [pc, #180]	@ (80158ec <tcp_bind+0x128>)
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	61bb      	str	r3, [r7, #24]
 8015842:	e01e      	b.n	8015882 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015844:	69bb      	ldr	r3, [r7, #24]
 8015846:	8adb      	ldrh	r3, [r3, #22]
 8015848:	88fa      	ldrh	r2, [r7, #6]
 801584a:	429a      	cmp	r2, r3
 801584c:	d116      	bne.n	801587c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801584e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015850:	2b00      	cmp	r3, #0
 8015852:	d010      	beq.n	8015876 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d00c      	beq.n	8015876 <tcp_bind+0xb2>
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d009      	beq.n	8015876 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d005      	beq.n	8015876 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801586a:	69bb      	ldr	r3, [r7, #24]
 801586c:	681a      	ldr	r2, [r3, #0]
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015872:	429a      	cmp	r2, r3
 8015874:	d102      	bne.n	801587c <tcp_bind+0xb8>
              return ERR_USE;
 8015876:	f06f 0307 	mvn.w	r3, #7
 801587a:	e029      	b.n	80158d0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801587c:	69bb      	ldr	r3, [r7, #24]
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	61bb      	str	r3, [r7, #24]
 8015882:	69bb      	ldr	r3, [r7, #24]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d1dd      	bne.n	8015844 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	3301      	adds	r3, #1
 801588c:	61fb      	str	r3, [r7, #28]
 801588e:	69fa      	ldr	r2, [r7, #28]
 8015890:	697b      	ldr	r3, [r7, #20]
 8015892:	429a      	cmp	r2, r3
 8015894:	dbcf      	blt.n	8015836 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d00c      	beq.n	80158b6 <tcp_bind+0xf2>
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d008      	beq.n	80158b6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d002      	beq.n	80158b0 <tcp_bind+0xec>
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	e000      	b.n	80158b2 <tcp_bind+0xee>
 80158b0:	2300      	movs	r3, #0
 80158b2:	68fa      	ldr	r2, [r7, #12]
 80158b4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	88fa      	ldrh	r2, [r7, #6]
 80158ba:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80158bc:	4b0c      	ldr	r3, [pc, #48]	@ (80158f0 <tcp_bind+0x12c>)
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	60da      	str	r2, [r3, #12]
 80158c4:	4a0a      	ldr	r2, [pc, #40]	@ (80158f0 <tcp_bind+0x12c>)
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	6013      	str	r3, [r2, #0]
 80158ca:	f005 fd5d 	bl	801b388 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80158ce:	2300      	movs	r3, #0
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3720      	adds	r7, #32
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	08025488 	.word	0x08025488
 80158dc:	08022934 	.word	0x08022934
 80158e0:	08022ac8 	.word	0x08022ac8
 80158e4:	08022978 	.word	0x08022978
 80158e8:	08022ae0 	.word	0x08022ae0
 80158ec:	08025460 	.word	0x08025460
 80158f0:	200227a0 	.word	0x200227a0

080158f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d106      	bne.n	8015910 <tcp_update_rcv_ann_wnd+0x1c>
 8015902:	4b25      	ldr	r3, [pc, #148]	@ (8015998 <tcp_update_rcv_ann_wnd+0xa4>)
 8015904:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015908:	4924      	ldr	r1, [pc, #144]	@ (801599c <tcp_update_rcv_ann_wnd+0xa8>)
 801590a:	4825      	ldr	r0, [pc, #148]	@ (80159a0 <tcp_update_rcv_ann_wnd+0xac>)
 801590c:	f00a faca 	bl	801fea4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015914:	687a      	ldr	r2, [r7, #4]
 8015916:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015918:	4413      	add	r3, r2
 801591a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015924:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015928:	bf28      	it	cs
 801592a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801592e:	b292      	uxth	r2, r2
 8015930:	4413      	add	r3, r2
 8015932:	68fa      	ldr	r2, [r7, #12]
 8015934:	1ad3      	subs	r3, r2, r3
 8015936:	2b00      	cmp	r3, #0
 8015938:	db08      	blt.n	801594c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015946:	68fa      	ldr	r2, [r7, #12]
 8015948:	1ad3      	subs	r3, r2, r3
 801594a:	e020      	b.n	801598e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015954:	1ad3      	subs	r3, r2, r3
 8015956:	2b00      	cmp	r3, #0
 8015958:	dd03      	ble.n	8015962 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2200      	movs	r2, #0
 801595e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015960:	e014      	b.n	801598c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801596a:	1ad3      	subs	r3, r2, r3
 801596c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015974:	d306      	bcc.n	8015984 <tcp_update_rcv_ann_wnd+0x90>
 8015976:	4b08      	ldr	r3, [pc, #32]	@ (8015998 <tcp_update_rcv_ann_wnd+0xa4>)
 8015978:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801597c:	4909      	ldr	r1, [pc, #36]	@ (80159a4 <tcp_update_rcv_ann_wnd+0xb0>)
 801597e:	4808      	ldr	r0, [pc, #32]	@ (80159a0 <tcp_update_rcv_ann_wnd+0xac>)
 8015980:	f00a fa90 	bl	801fea4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	b29a      	uxth	r2, r3
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801598c:	2300      	movs	r3, #0
  }
}
 801598e:	4618      	mov	r0, r3
 8015990:	3710      	adds	r7, #16
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}
 8015996:	bf00      	nop
 8015998:	08022934 	.word	0x08022934
 801599c:	08022b90 	.word	0x08022b90
 80159a0:	08022978 	.word	0x08022978
 80159a4:	08022bb4 	.word	0x08022bb4

080159a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	460b      	mov	r3, r1
 80159b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d107      	bne.n	80159ca <tcp_recved+0x22>
 80159ba:	4b1f      	ldr	r3, [pc, #124]	@ (8015a38 <tcp_recved+0x90>)
 80159bc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80159c0:	491e      	ldr	r1, [pc, #120]	@ (8015a3c <tcp_recved+0x94>)
 80159c2:	481f      	ldr	r0, [pc, #124]	@ (8015a40 <tcp_recved+0x98>)
 80159c4:	f00a fa6e 	bl	801fea4 <iprintf>
 80159c8:	e032      	b.n	8015a30 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	7d1b      	ldrb	r3, [r3, #20]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d106      	bne.n	80159e0 <tcp_recved+0x38>
 80159d2:	4b19      	ldr	r3, [pc, #100]	@ (8015a38 <tcp_recved+0x90>)
 80159d4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80159d8:	491a      	ldr	r1, [pc, #104]	@ (8015a44 <tcp_recved+0x9c>)
 80159da:	4819      	ldr	r0, [pc, #100]	@ (8015a40 <tcp_recved+0x98>)
 80159dc:	f00a fa62 	bl	801fea4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80159e4:	887b      	ldrh	r3, [r7, #2]
 80159e6:	4413      	add	r3, r2
 80159e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80159ea:	89fb      	ldrh	r3, [r7, #14]
 80159ec:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80159f0:	d804      	bhi.n	80159fc <tcp_recved+0x54>
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159f6:	89fa      	ldrh	r2, [r7, #14]
 80159f8:	429a      	cmp	r2, r3
 80159fa:	d204      	bcs.n	8015a06 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015a02:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015a04:	e002      	b.n	8015a0c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	89fa      	ldrh	r2, [r7, #14]
 8015a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f7ff ff71 	bl	80158f4 <tcp_update_rcv_ann_wnd>
 8015a12:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015a1a:	d309      	bcc.n	8015a30 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	8b5b      	ldrh	r3, [r3, #26]
 8015a20:	f043 0302 	orr.w	r3, r3, #2
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f004 fd2a 	bl	801a484 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015a30:	3710      	adds	r7, #16
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd80      	pop	{r7, pc}
 8015a36:	bf00      	nop
 8015a38:	08022934 	.word	0x08022934
 8015a3c:	08022bd0 	.word	0x08022bd0
 8015a40:	08022978 	.word	0x08022978
 8015a44:	08022be8 	.word	0x08022be8

08015a48 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b083      	sub	sp, #12
 8015a4c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015a52:	4b1e      	ldr	r3, [pc, #120]	@ (8015acc <tcp_new_port+0x84>)
 8015a54:	881b      	ldrh	r3, [r3, #0]
 8015a56:	3301      	adds	r3, #1
 8015a58:	b29a      	uxth	r2, r3
 8015a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8015acc <tcp_new_port+0x84>)
 8015a5c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8015acc <tcp_new_port+0x84>)
 8015a60:	881b      	ldrh	r3, [r3, #0]
 8015a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a66:	4293      	cmp	r3, r2
 8015a68:	d103      	bne.n	8015a72 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015a6a:	4b18      	ldr	r3, [pc, #96]	@ (8015acc <tcp_new_port+0x84>)
 8015a6c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015a70:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015a72:	2300      	movs	r3, #0
 8015a74:	71fb      	strb	r3, [r7, #7]
 8015a76:	e01e      	b.n	8015ab6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015a78:	79fb      	ldrb	r3, [r7, #7]
 8015a7a:	4a15      	ldr	r2, [pc, #84]	@ (8015ad0 <tcp_new_port+0x88>)
 8015a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	603b      	str	r3, [r7, #0]
 8015a84:	e011      	b.n	8015aaa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	8ada      	ldrh	r2, [r3, #22]
 8015a8a:	4b10      	ldr	r3, [pc, #64]	@ (8015acc <tcp_new_port+0x84>)
 8015a8c:	881b      	ldrh	r3, [r3, #0]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d108      	bne.n	8015aa4 <tcp_new_port+0x5c>
        n++;
 8015a92:	88bb      	ldrh	r3, [r7, #4]
 8015a94:	3301      	adds	r3, #1
 8015a96:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015a98:	88bb      	ldrh	r3, [r7, #4]
 8015a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a9e:	d3d8      	bcc.n	8015a52 <tcp_new_port+0xa>
          return 0;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	e00d      	b.n	8015ac0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	68db      	ldr	r3, [r3, #12]
 8015aa8:	603b      	str	r3, [r7, #0]
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d1ea      	bne.n	8015a86 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015ab0:	79fb      	ldrb	r3, [r7, #7]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	71fb      	strb	r3, [r7, #7]
 8015ab6:	79fb      	ldrb	r3, [r7, #7]
 8015ab8:	2b03      	cmp	r3, #3
 8015aba:	d9dd      	bls.n	8015a78 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015abc:	4b03      	ldr	r3, [pc, #12]	@ (8015acc <tcp_new_port+0x84>)
 8015abe:	881b      	ldrh	r3, [r3, #0]
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	370c      	adds	r7, #12
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aca:	4770      	bx	lr
 8015acc:	20000068 	.word	0x20000068
 8015ad0:	08025460 	.word	0x08025460

08015ad4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b08a      	sub	sp, #40	@ 0x28
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	603b      	str	r3, [r7, #0]
 8015ae0:	4613      	mov	r3, r2
 8015ae2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d109      	bne.n	8015b02 <tcp_connect+0x2e>
 8015aee:	4b7d      	ldr	r3, [pc, #500]	@ (8015ce4 <tcp_connect+0x210>)
 8015af0:	f240 4235 	movw	r2, #1077	@ 0x435
 8015af4:	497c      	ldr	r1, [pc, #496]	@ (8015ce8 <tcp_connect+0x214>)
 8015af6:	487d      	ldr	r0, [pc, #500]	@ (8015cec <tcp_connect+0x218>)
 8015af8:	f00a f9d4 	bl	801fea4 <iprintf>
 8015afc:	f06f 030f 	mvn.w	r3, #15
 8015b00:	e0ec      	b.n	8015cdc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d109      	bne.n	8015b1c <tcp_connect+0x48>
 8015b08:	4b76      	ldr	r3, [pc, #472]	@ (8015ce4 <tcp_connect+0x210>)
 8015b0a:	f240 4236 	movw	r2, #1078	@ 0x436
 8015b0e:	4978      	ldr	r1, [pc, #480]	@ (8015cf0 <tcp_connect+0x21c>)
 8015b10:	4876      	ldr	r0, [pc, #472]	@ (8015cec <tcp_connect+0x218>)
 8015b12:	f00a f9c7 	bl	801fea4 <iprintf>
 8015b16:	f06f 030f 	mvn.w	r3, #15
 8015b1a:	e0df      	b.n	8015cdc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	7d1b      	ldrb	r3, [r3, #20]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d009      	beq.n	8015b38 <tcp_connect+0x64>
 8015b24:	4b6f      	ldr	r3, [pc, #444]	@ (8015ce4 <tcp_connect+0x210>)
 8015b26:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8015b2a:	4972      	ldr	r1, [pc, #456]	@ (8015cf4 <tcp_connect+0x220>)
 8015b2c:	486f      	ldr	r0, [pc, #444]	@ (8015cec <tcp_connect+0x218>)
 8015b2e:	f00a f9b9 	bl	801fea4 <iprintf>
 8015b32:	f06f 0309 	mvn.w	r3, #9
 8015b36:	e0d1      	b.n	8015cdc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d002      	beq.n	8015b44 <tcp_connect+0x70>
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	e000      	b.n	8015b46 <tcp_connect+0x72>
 8015b44:	2300      	movs	r3, #0
 8015b46:	68fa      	ldr	r2, [r7, #12]
 8015b48:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	88fa      	ldrh	r2, [r7, #6]
 8015b4e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	7a1b      	ldrb	r3, [r3, #8]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d006      	beq.n	8015b66 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	7a1b      	ldrb	r3, [r3, #8]
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fe fc97 	bl	8014490 <netif_get_by_index>
 8015b62:	6278      	str	r0, [r7, #36]	@ 0x24
 8015b64:	e005      	b.n	8015b72 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	3304      	adds	r3, #4
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f007 fe96 	bl	801d89c <ip4_route>
 8015b70:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8015b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d102      	bne.n	8015b7e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8015b78:	f06f 0303 	mvn.w	r3, #3
 8015b7c:	e0ae      	b.n	8015cdc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d003      	beq.n	8015b8c <tcp_connect+0xb8>
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d111      	bne.n	8015bb0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8015b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d002      	beq.n	8015b98 <tcp_connect+0xc4>
 8015b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b94:	3304      	adds	r3, #4
 8015b96:	e000      	b.n	8015b9a <tcp_connect+0xc6>
 8015b98:	2300      	movs	r3, #0
 8015b9a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8015b9c:	69fb      	ldr	r3, [r7, #28]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d102      	bne.n	8015ba8 <tcp_connect+0xd4>
      return ERR_RTE;
 8015ba2:	f06f 0303 	mvn.w	r3, #3
 8015ba6:	e099      	b.n	8015cdc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015ba8:	69fb      	ldr	r3, [r7, #28]
 8015baa:	681a      	ldr	r2, [r3, #0]
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	8adb      	ldrh	r3, [r3, #22]
 8015bb4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	8adb      	ldrh	r3, [r3, #22]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d10c      	bne.n	8015bd8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8015bbe:	f7ff ff43 	bl	8015a48 <tcp_new_port>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	461a      	mov	r2, r3
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	8adb      	ldrh	r3, [r3, #22]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d102      	bne.n	8015bd8 <tcp_connect+0x104>
      return ERR_BUF;
 8015bd2:	f06f 0301 	mvn.w	r3, #1
 8015bd6:	e081      	b.n	8015cdc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8015bd8:	68f8      	ldr	r0, [r7, #12]
 8015bda:	f001 f869 	bl	8016cb0 <tcp_next_iss>
 8015bde:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	2200      	movs	r2, #0
 8015be4:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	697a      	ldr	r2, [r7, #20]
 8015bea:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	1e5a      	subs	r2, r3, #1
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	1e5a      	subs	r2, r3, #1
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	1e5a      	subs	r2, r3, #1
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015c22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015c2c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	3304      	adds	r3, #4
 8015c36:	461a      	mov	r2, r3
 8015c38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015c3a:	f001 f85f 	bl	8016cfc <tcp_eff_send_mss_netif>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	461a      	mov	r2, r3
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2201      	movs	r2, #1
 8015c4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	683a      	ldr	r2, [r7, #0]
 8015c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8015c56:	2102      	movs	r1, #2
 8015c58:	68f8      	ldr	r0, [r7, #12]
 8015c5a:	f004 fb25 	bl	801a2a8 <tcp_enqueue_flags>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8015c62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d136      	bne.n	8015cd8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	2202      	movs	r2, #2
 8015c6e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8015c70:	8b7b      	ldrh	r3, [r7, #26]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d021      	beq.n	8015cba <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015c76:	4b20      	ldr	r3, [pc, #128]	@ (8015cf8 <tcp_connect+0x224>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	68fa      	ldr	r2, [r7, #12]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d105      	bne.n	8015c8c <tcp_connect+0x1b8>
 8015c80:	4b1d      	ldr	r3, [pc, #116]	@ (8015cf8 <tcp_connect+0x224>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	68db      	ldr	r3, [r3, #12]
 8015c86:	4a1c      	ldr	r2, [pc, #112]	@ (8015cf8 <tcp_connect+0x224>)
 8015c88:	6013      	str	r3, [r2, #0]
 8015c8a:	e013      	b.n	8015cb4 <tcp_connect+0x1e0>
 8015c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8015cf8 <tcp_connect+0x224>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	623b      	str	r3, [r7, #32]
 8015c92:	e00c      	b.n	8015cae <tcp_connect+0x1da>
 8015c94:	6a3b      	ldr	r3, [r7, #32]
 8015c96:	68db      	ldr	r3, [r3, #12]
 8015c98:	68fa      	ldr	r2, [r7, #12]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d104      	bne.n	8015ca8 <tcp_connect+0x1d4>
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	68da      	ldr	r2, [r3, #12]
 8015ca2:	6a3b      	ldr	r3, [r7, #32]
 8015ca4:	60da      	str	r2, [r3, #12]
 8015ca6:	e005      	b.n	8015cb4 <tcp_connect+0x1e0>
 8015ca8:	6a3b      	ldr	r3, [r7, #32]
 8015caa:	68db      	ldr	r3, [r3, #12]
 8015cac:	623b      	str	r3, [r7, #32]
 8015cae:	6a3b      	ldr	r3, [r7, #32]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d1ef      	bne.n	8015c94 <tcp_connect+0x1c0>
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8015cba:	4b10      	ldr	r3, [pc, #64]	@ (8015cfc <tcp_connect+0x228>)
 8015cbc:	681a      	ldr	r2, [r3, #0]
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	60da      	str	r2, [r3, #12]
 8015cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8015cfc <tcp_connect+0x228>)
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	6013      	str	r3, [r2, #0]
 8015cc8:	f005 fb5e 	bl	801b388 <tcp_timer_needed>
 8015ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8015d00 <tcp_connect+0x22c>)
 8015cce:	2201      	movs	r2, #1
 8015cd0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8015cd2:	68f8      	ldr	r0, [r7, #12]
 8015cd4:	f004 fbd6 	bl	801a484 <tcp_output>
  }
  return ret;
 8015cd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3728      	adds	r7, #40	@ 0x28
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}
 8015ce4:	08022934 	.word	0x08022934
 8015ce8:	08022c10 	.word	0x08022c10
 8015cec:	08022978 	.word	0x08022978
 8015cf0:	08022c2c 	.word	0x08022c2c
 8015cf4:	08022c48 	.word	0x08022c48
 8015cf8:	200227a0 	.word	0x200227a0
 8015cfc:	200227a8 	.word	0x200227a8
 8015d00:	200227b0 	.word	0x200227b0

08015d04 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015d04:	b5b0      	push	{r4, r5, r7, lr}
 8015d06:	b090      	sub	sp, #64	@ 0x40
 8015d08:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015d10:	4b95      	ldr	r3, [pc, #596]	@ (8015f68 <tcp_slowtmr+0x264>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	3301      	adds	r3, #1
 8015d16:	4a94      	ldr	r2, [pc, #592]	@ (8015f68 <tcp_slowtmr+0x264>)
 8015d18:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015d1a:	4b94      	ldr	r3, [pc, #592]	@ (8015f6c <tcp_slowtmr+0x268>)
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	3301      	adds	r3, #1
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	4b92      	ldr	r3, [pc, #584]	@ (8015f6c <tcp_slowtmr+0x268>)
 8015d24:	701a      	strb	r2, [r3, #0]
 8015d26:	e000      	b.n	8015d2a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015d28:	bf00      	nop
  prev = NULL;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8015d2e:	4b90      	ldr	r3, [pc, #576]	@ (8015f70 <tcp_slowtmr+0x26c>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015d34:	e29d      	b.n	8016272 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d38:	7d1b      	ldrb	r3, [r3, #20]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d106      	bne.n	8015d4c <tcp_slowtmr+0x48>
 8015d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8015f74 <tcp_slowtmr+0x270>)
 8015d40:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015d44:	498c      	ldr	r1, [pc, #560]	@ (8015f78 <tcp_slowtmr+0x274>)
 8015d46:	488d      	ldr	r0, [pc, #564]	@ (8015f7c <tcp_slowtmr+0x278>)
 8015d48:	f00a f8ac 	bl	801fea4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d4e:	7d1b      	ldrb	r3, [r3, #20]
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	d106      	bne.n	8015d62 <tcp_slowtmr+0x5e>
 8015d54:	4b87      	ldr	r3, [pc, #540]	@ (8015f74 <tcp_slowtmr+0x270>)
 8015d56:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015d5a:	4989      	ldr	r1, [pc, #548]	@ (8015f80 <tcp_slowtmr+0x27c>)
 8015d5c:	4887      	ldr	r0, [pc, #540]	@ (8015f7c <tcp_slowtmr+0x278>)
 8015d5e:	f00a f8a1 	bl	801fea4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d64:	7d1b      	ldrb	r3, [r3, #20]
 8015d66:	2b0a      	cmp	r3, #10
 8015d68:	d106      	bne.n	8015d78 <tcp_slowtmr+0x74>
 8015d6a:	4b82      	ldr	r3, [pc, #520]	@ (8015f74 <tcp_slowtmr+0x270>)
 8015d6c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015d70:	4984      	ldr	r1, [pc, #528]	@ (8015f84 <tcp_slowtmr+0x280>)
 8015d72:	4882      	ldr	r0, [pc, #520]	@ (8015f7c <tcp_slowtmr+0x278>)
 8015d74:	f00a f896 	bl	801fea4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d7a:	7f9a      	ldrb	r2, [r3, #30]
 8015d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8015f6c <tcp_slowtmr+0x268>)
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d105      	bne.n	8015d90 <tcp_slowtmr+0x8c>
      prev = pcb;
 8015d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8015d8e:	e270      	b.n	8016272 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8015d90:	4b76      	ldr	r3, [pc, #472]	@ (8015f6c <tcp_slowtmr+0x268>)
 8015d92:	781a      	ldrb	r2, [r3, #0]
 8015d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d96:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da6:	7d1b      	ldrb	r3, [r3, #20]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d10a      	bne.n	8015dc2 <tcp_slowtmr+0xbe>
 8015dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015db2:	2b05      	cmp	r3, #5
 8015db4:	d905      	bls.n	8015dc2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015db6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dba:	3301      	adds	r3, #1
 8015dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8015dc0:	e11e      	b.n	8016000 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015dc8:	2b0b      	cmp	r3, #11
 8015dca:	d905      	bls.n	8015dd8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015dd6:	e113      	b.n	8016000 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dda:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d075      	beq.n	8015ece <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d006      	beq.n	8015df8 <tcp_slowtmr+0xf4>
 8015dea:	4b62      	ldr	r3, [pc, #392]	@ (8015f74 <tcp_slowtmr+0x270>)
 8015dec:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015df0:	4965      	ldr	r1, [pc, #404]	@ (8015f88 <tcp_slowtmr+0x284>)
 8015df2:	4862      	ldr	r0, [pc, #392]	@ (8015f7c <tcp_slowtmr+0x278>)
 8015df4:	f00a f856 	bl	801fea4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d106      	bne.n	8015e0e <tcp_slowtmr+0x10a>
 8015e00:	4b5c      	ldr	r3, [pc, #368]	@ (8015f74 <tcp_slowtmr+0x270>)
 8015e02:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015e06:	4961      	ldr	r1, [pc, #388]	@ (8015f8c <tcp_slowtmr+0x288>)
 8015e08:	485c      	ldr	r0, [pc, #368]	@ (8015f7c <tcp_slowtmr+0x278>)
 8015e0a:	f00a f84b 	bl	801fea4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e10:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015e14:	2b0b      	cmp	r3, #11
 8015e16:	d905      	bls.n	8015e24 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e1c:	3301      	adds	r3, #1
 8015e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015e22:	e0ed      	b.n	8016000 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e26:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015e2a:	3b01      	subs	r3, #1
 8015e2c:	4a58      	ldr	r2, [pc, #352]	@ (8015f90 <tcp_slowtmr+0x28c>)
 8015e2e:	5cd3      	ldrb	r3, [r2, r3]
 8015e30:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015e38:	7c7a      	ldrb	r2, [r7, #17]
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	d907      	bls.n	8015e4e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015e44:	3301      	adds	r3, #1
 8015e46:	b2da      	uxtb	r2, r3
 8015e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e50:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015e54:	7c7a      	ldrb	r2, [r7, #17]
 8015e56:	429a      	cmp	r2, r3
 8015e58:	f200 80d2 	bhi.w	8016000 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d108      	bne.n	8015e7c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015e6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e6c:	f005 f9be 	bl	801b1ec <tcp_zero_window_probe>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d014      	beq.n	8015ea0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015e76:	2300      	movs	r3, #0
 8015e78:	623b      	str	r3, [r7, #32]
 8015e7a:	e011      	b.n	8015ea0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015e82:	4619      	mov	r1, r3
 8015e84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e86:	f004 f873 	bl	8019f70 <tcp_split_unsent_seg>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d107      	bne.n	8015ea0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8015e90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e92:	f004 faf7 	bl	801a484 <tcp_output>
 8015e96:	4603      	mov	r3, r0
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d101      	bne.n	8015ea0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8015ea0:	6a3b      	ldr	r3, [r7, #32]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	f000 80ac 	beq.w	8016000 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eaa:	2200      	movs	r2, #0
 8015eac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015eb6:	2b06      	cmp	r3, #6
 8015eb8:	f200 80a2 	bhi.w	8016000 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ebe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	b2da      	uxtb	r2, r3
 8015ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015ecc:	e098      	b.n	8016000 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ed0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	db0f      	blt.n	8015ef8 <tcp_slowtmr+0x1f4>
 8015ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015ede:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d008      	beq.n	8015ef8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ee8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	3301      	adds	r3, #1
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	b21a      	sxth	r2, r3
 8015ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ef6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015efa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015f04:	429a      	cmp	r2, r3
 8015f06:	db7b      	blt.n	8016000 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015f08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f0a:	f004 fdb1 	bl	801aa70 <tcp_rexmit_rto_prepare>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d007      	beq.n	8015f24 <tcp_slowtmr+0x220>
 8015f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d171      	bne.n	8016000 <tcp_slowtmr+0x2fc>
 8015f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d06d      	beq.n	8016000 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f26:	7d1b      	ldrb	r3, [r3, #20]
 8015f28:	2b02      	cmp	r3, #2
 8015f2a:	d03a      	beq.n	8015fa2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015f32:	2b0c      	cmp	r3, #12
 8015f34:	bf28      	it	cs
 8015f36:	230c      	movcs	r3, #12
 8015f38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015f40:	10db      	asrs	r3, r3, #3
 8015f42:	b21b      	sxth	r3, r3
 8015f44:	461a      	mov	r2, r3
 8015f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015f4c:	4413      	add	r3, r2
 8015f4e:	7efa      	ldrb	r2, [r7, #27]
 8015f50:	4910      	ldr	r1, [pc, #64]	@ (8015f94 <tcp_slowtmr+0x290>)
 8015f52:	5c8a      	ldrb	r2, [r1, r2]
 8015f54:	4093      	lsls	r3, r2
 8015f56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8015f5e:	4293      	cmp	r3, r2
 8015f60:	dc1a      	bgt.n	8015f98 <tcp_slowtmr+0x294>
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	b21a      	sxth	r2, r3
 8015f66:	e019      	b.n	8015f9c <tcp_slowtmr+0x298>
 8015f68:	2002279c 	.word	0x2002279c
 8015f6c:	200227b2 	.word	0x200227b2
 8015f70:	200227a8 	.word	0x200227a8
 8015f74:	08022934 	.word	0x08022934
 8015f78:	08022c78 	.word	0x08022c78
 8015f7c:	08022978 	.word	0x08022978
 8015f80:	08022ca4 	.word	0x08022ca4
 8015f84:	08022cd0 	.word	0x08022cd0
 8015f88:	08022d00 	.word	0x08022d00
 8015f8c:	08022d34 	.word	0x08022d34
 8015f90:	08025458 	.word	0x08025458
 8015f94:	08025448 	.word	0x08025448
 8015f98:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8015fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015faa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015fb4:	4293      	cmp	r3, r2
 8015fb6:	bf28      	it	cs
 8015fb8:	4613      	movcs	r3, r2
 8015fba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015fbc:	8a7b      	ldrh	r3, [r7, #18]
 8015fbe:	085b      	lsrs	r3, r3, #1
 8015fc0:	b29a      	uxth	r2, r3
 8015fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fc4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015fd2:	005b      	lsls	r3, r3, #1
 8015fd4:	b29b      	uxth	r3, r3
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d206      	bcs.n	8015fe8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015fde:	005b      	lsls	r3, r3, #1
 8015fe0:	b29a      	uxth	r2, r3
 8015fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fe4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fea:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015ffa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015ffc:	f004 fdb2 	bl	801ab64 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8016000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016002:	7d1b      	ldrb	r3, [r3, #20]
 8016004:	2b06      	cmp	r3, #6
 8016006:	d111      	bne.n	801602c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8016008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801600a:	8b5b      	ldrh	r3, [r3, #26]
 801600c:	f003 0310 	and.w	r3, r3, #16
 8016010:	2b00      	cmp	r3, #0
 8016012:	d00b      	beq.n	801602c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016014:	4b9c      	ldr	r3, [pc, #624]	@ (8016288 <tcp_slowtmr+0x584>)
 8016016:	681a      	ldr	r2, [r3, #0]
 8016018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801601a:	6a1b      	ldr	r3, [r3, #32]
 801601c:	1ad3      	subs	r3, r2, r3
 801601e:	2b28      	cmp	r3, #40	@ 0x28
 8016020:	d904      	bls.n	801602c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8016022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016026:	3301      	adds	r3, #1
 8016028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801602e:	7a5b      	ldrb	r3, [r3, #9]
 8016030:	f003 0308 	and.w	r3, r3, #8
 8016034:	2b00      	cmp	r3, #0
 8016036:	d04a      	beq.n	80160ce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8016038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801603a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801603c:	2b04      	cmp	r3, #4
 801603e:	d003      	beq.n	8016048 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8016040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016042:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016044:	2b07      	cmp	r3, #7
 8016046:	d142      	bne.n	80160ce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016048:	4b8f      	ldr	r3, [pc, #572]	@ (8016288 <tcp_slowtmr+0x584>)
 801604a:	681a      	ldr	r2, [r3, #0]
 801604c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801604e:	6a1b      	ldr	r3, [r3, #32]
 8016050:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016054:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8016058:	4b8c      	ldr	r3, [pc, #560]	@ (801628c <tcp_slowtmr+0x588>)
 801605a:	440b      	add	r3, r1
 801605c:	498c      	ldr	r1, [pc, #560]	@ (8016290 <tcp_slowtmr+0x58c>)
 801605e:	fba1 1303 	umull	r1, r3, r1, r3
 8016062:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016064:	429a      	cmp	r2, r3
 8016066:	d90a      	bls.n	801607e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8016068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801606c:	3301      	adds	r3, #1
 801606e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8016072:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016076:	3301      	adds	r3, #1
 8016078:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801607c:	e027      	b.n	80160ce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801607e:	4b82      	ldr	r3, [pc, #520]	@ (8016288 <tcp_slowtmr+0x584>)
 8016080:	681a      	ldr	r2, [r3, #0]
 8016082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016084:	6a1b      	ldr	r3, [r3, #32]
 8016086:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801608a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016090:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016094:	4618      	mov	r0, r3
 8016096:	4b7f      	ldr	r3, [pc, #508]	@ (8016294 <tcp_slowtmr+0x590>)
 8016098:	fb00 f303 	mul.w	r3, r0, r3
 801609c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801609e:	497c      	ldr	r1, [pc, #496]	@ (8016290 <tcp_slowtmr+0x58c>)
 80160a0:	fba1 1303 	umull	r1, r3, r1, r3
 80160a4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80160a6:	429a      	cmp	r2, r3
 80160a8:	d911      	bls.n	80160ce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80160aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80160ac:	f005 f85e 	bl	801b16c <tcp_keepalive>
 80160b0:	4603      	mov	r3, r0
 80160b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80160b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d107      	bne.n	80160ce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80160be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160c0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80160c4:	3301      	adds	r3, #1
 80160c6:	b2da      	uxtb	r2, r3
 80160c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ca:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80160ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d011      	beq.n	80160fa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80160d6:	4b6c      	ldr	r3, [pc, #432]	@ (8016288 <tcp_slowtmr+0x584>)
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160dc:	6a1b      	ldr	r3, [r3, #32]
 80160de:	1ad2      	subs	r2, r2, r3
 80160e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80160e6:	4619      	mov	r1, r3
 80160e8:	460b      	mov	r3, r1
 80160ea:	005b      	lsls	r3, r3, #1
 80160ec:	440b      	add	r3, r1
 80160ee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80160f0:	429a      	cmp	r2, r3
 80160f2:	d302      	bcc.n	80160fa <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80160f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80160f6:	f000 feb1 	bl	8016e5c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80160fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160fc:	7d1b      	ldrb	r3, [r3, #20]
 80160fe:	2b03      	cmp	r3, #3
 8016100:	d10b      	bne.n	801611a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016102:	4b61      	ldr	r3, [pc, #388]	@ (8016288 <tcp_slowtmr+0x584>)
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016108:	6a1b      	ldr	r3, [r3, #32]
 801610a:	1ad3      	subs	r3, r2, r3
 801610c:	2b28      	cmp	r3, #40	@ 0x28
 801610e:	d904      	bls.n	801611a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8016110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016114:	3301      	adds	r3, #1
 8016116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801611c:	7d1b      	ldrb	r3, [r3, #20]
 801611e:	2b09      	cmp	r3, #9
 8016120:	d10b      	bne.n	801613a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016122:	4b59      	ldr	r3, [pc, #356]	@ (8016288 <tcp_slowtmr+0x584>)
 8016124:	681a      	ldr	r2, [r3, #0]
 8016126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016128:	6a1b      	ldr	r3, [r3, #32]
 801612a:	1ad3      	subs	r3, r2, r3
 801612c:	2bf0      	cmp	r3, #240	@ 0xf0
 801612e:	d904      	bls.n	801613a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8016130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016134:	3301      	adds	r3, #1
 8016136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801613a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801613e:	2b00      	cmp	r3, #0
 8016140:	d060      	beq.n	8016204 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8016142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016148:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801614a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801614c:	f000 fccc 	bl	8016ae8 <tcp_pcb_purge>
      if (prev != NULL) {
 8016150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016152:	2b00      	cmp	r3, #0
 8016154:	d010      	beq.n	8016178 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016156:	4b50      	ldr	r3, [pc, #320]	@ (8016298 <tcp_slowtmr+0x594>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801615c:	429a      	cmp	r2, r3
 801615e:	d106      	bne.n	801616e <tcp_slowtmr+0x46a>
 8016160:	4b4e      	ldr	r3, [pc, #312]	@ (801629c <tcp_slowtmr+0x598>)
 8016162:	f240 526d 	movw	r2, #1389	@ 0x56d
 8016166:	494e      	ldr	r1, [pc, #312]	@ (80162a0 <tcp_slowtmr+0x59c>)
 8016168:	484e      	ldr	r0, [pc, #312]	@ (80162a4 <tcp_slowtmr+0x5a0>)
 801616a:	f009 fe9b 	bl	801fea4 <iprintf>
        prev->next = pcb->next;
 801616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016170:	68da      	ldr	r2, [r3, #12]
 8016172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016174:	60da      	str	r2, [r3, #12]
 8016176:	e00f      	b.n	8016198 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016178:	4b47      	ldr	r3, [pc, #284]	@ (8016298 <tcp_slowtmr+0x594>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801617e:	429a      	cmp	r2, r3
 8016180:	d006      	beq.n	8016190 <tcp_slowtmr+0x48c>
 8016182:	4b46      	ldr	r3, [pc, #280]	@ (801629c <tcp_slowtmr+0x598>)
 8016184:	f240 5271 	movw	r2, #1393	@ 0x571
 8016188:	4947      	ldr	r1, [pc, #284]	@ (80162a8 <tcp_slowtmr+0x5a4>)
 801618a:	4846      	ldr	r0, [pc, #280]	@ (80162a4 <tcp_slowtmr+0x5a0>)
 801618c:	f009 fe8a 	bl	801fea4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	4a40      	ldr	r2, [pc, #256]	@ (8016298 <tcp_slowtmr+0x594>)
 8016196:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8016198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801619c:	2b00      	cmp	r3, #0
 801619e:	d013      	beq.n	80161c8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80161a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161a2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80161a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161a6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80161a8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80161aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ac:	3304      	adds	r3, #4
 80161ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161b0:	8ad2      	ldrh	r2, [r2, #22]
 80161b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80161b4:	8b09      	ldrh	r1, [r1, #24]
 80161b6:	9102      	str	r1, [sp, #8]
 80161b8:	9201      	str	r2, [sp, #4]
 80161ba:	9300      	str	r3, [sp, #0]
 80161bc:	462b      	mov	r3, r5
 80161be:	4622      	mov	r2, r4
 80161c0:	4601      	mov	r1, r0
 80161c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80161c4:	f004 ff1e 	bl	801b004 <tcp_rst>
      err_arg = pcb->callback_arg;
 80161c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ca:	691b      	ldr	r3, [r3, #16]
 80161cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80161ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161d0:	7d1b      	ldrb	r3, [r3, #20]
 80161d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80161d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80161d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80161de:	6838      	ldr	r0, [r7, #0]
 80161e0:	f7fe ffa0 	bl	8015124 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80161e4:	4b31      	ldr	r3, [pc, #196]	@ (80162ac <tcp_slowtmr+0x5a8>)
 80161e6:	2200      	movs	r2, #0
 80161e8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d004      	beq.n	80161fa <tcp_slowtmr+0x4f6>
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	f06f 010c 	mvn.w	r1, #12
 80161f6:	68b8      	ldr	r0, [r7, #8]
 80161f8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80161fa:	4b2c      	ldr	r3, [pc, #176]	@ (80162ac <tcp_slowtmr+0x5a8>)
 80161fc:	781b      	ldrb	r3, [r3, #0]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d037      	beq.n	8016272 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8016202:	e592      	b.n	8015d2a <tcp_slowtmr+0x26>
      prev = pcb;
 8016204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016206:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016210:	7f1b      	ldrb	r3, [r3, #28]
 8016212:	3301      	adds	r3, #1
 8016214:	b2da      	uxtb	r2, r3
 8016216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016218:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801621c:	7f1a      	ldrb	r2, [r3, #28]
 801621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016220:	7f5b      	ldrb	r3, [r3, #29]
 8016222:	429a      	cmp	r2, r3
 8016224:	d325      	bcc.n	8016272 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8016226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016228:	2200      	movs	r2, #0
 801622a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801622c:	4b1f      	ldr	r3, [pc, #124]	@ (80162ac <tcp_slowtmr+0x5a8>)
 801622e:	2200      	movs	r2, #0
 8016230:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016238:	2b00      	cmp	r3, #0
 801623a:	d00b      	beq.n	8016254 <tcp_slowtmr+0x550>
 801623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801623e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016244:	6912      	ldr	r2, [r2, #16]
 8016246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016248:	4610      	mov	r0, r2
 801624a:	4798      	blx	r3
 801624c:	4603      	mov	r3, r0
 801624e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016252:	e002      	b.n	801625a <tcp_slowtmr+0x556>
 8016254:	2300      	movs	r3, #0
 8016256:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801625a:	4b14      	ldr	r3, [pc, #80]	@ (80162ac <tcp_slowtmr+0x5a8>)
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	2b00      	cmp	r3, #0
 8016260:	f47f ad62 	bne.w	8015d28 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016264:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016268:	2b00      	cmp	r3, #0
 801626a:	d102      	bne.n	8016272 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801626c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801626e:	f004 f909 	bl	801a484 <tcp_output>
  while (pcb != NULL) {
 8016272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016274:	2b00      	cmp	r3, #0
 8016276:	f47f ad5e 	bne.w	8015d36 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801627a:	2300      	movs	r3, #0
 801627c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801627e:	4b0c      	ldr	r3, [pc, #48]	@ (80162b0 <tcp_slowtmr+0x5ac>)
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016284:	e069      	b.n	801635a <tcp_slowtmr+0x656>
 8016286:	bf00      	nop
 8016288:	2002279c 	.word	0x2002279c
 801628c:	000a4cb8 	.word	0x000a4cb8
 8016290:	10624dd3 	.word	0x10624dd3
 8016294:	000124f8 	.word	0x000124f8
 8016298:	200227a8 	.word	0x200227a8
 801629c:	08022934 	.word	0x08022934
 80162a0:	08022d6c 	.word	0x08022d6c
 80162a4:	08022978 	.word	0x08022978
 80162a8:	08022d98 	.word	0x08022d98
 80162ac:	200227b0 	.word	0x200227b0
 80162b0:	200227ac 	.word	0x200227ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80162b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162b6:	7d1b      	ldrb	r3, [r3, #20]
 80162b8:	2b0a      	cmp	r3, #10
 80162ba:	d006      	beq.n	80162ca <tcp_slowtmr+0x5c6>
 80162bc:	4b2b      	ldr	r3, [pc, #172]	@ (801636c <tcp_slowtmr+0x668>)
 80162be:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80162c2:	492b      	ldr	r1, [pc, #172]	@ (8016370 <tcp_slowtmr+0x66c>)
 80162c4:	482b      	ldr	r0, [pc, #172]	@ (8016374 <tcp_slowtmr+0x670>)
 80162c6:	f009 fded 	bl	801fea4 <iprintf>
    pcb_remove = 0;
 80162ca:	2300      	movs	r3, #0
 80162cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80162d0:	4b29      	ldr	r3, [pc, #164]	@ (8016378 <tcp_slowtmr+0x674>)
 80162d2:	681a      	ldr	r2, [r3, #0]
 80162d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d6:	6a1b      	ldr	r3, [r3, #32]
 80162d8:	1ad3      	subs	r3, r2, r3
 80162da:	2bf0      	cmp	r3, #240	@ 0xf0
 80162dc:	d904      	bls.n	80162e8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80162de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162e2:	3301      	adds	r3, #1
 80162e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80162e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d02f      	beq.n	8016350 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80162f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80162f2:	f000 fbf9 	bl	8016ae8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80162f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d010      	beq.n	801631e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80162fc:	4b1f      	ldr	r3, [pc, #124]	@ (801637c <tcp_slowtmr+0x678>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016302:	429a      	cmp	r2, r3
 8016304:	d106      	bne.n	8016314 <tcp_slowtmr+0x610>
 8016306:	4b19      	ldr	r3, [pc, #100]	@ (801636c <tcp_slowtmr+0x668>)
 8016308:	f240 52af 	movw	r2, #1455	@ 0x5af
 801630c:	491c      	ldr	r1, [pc, #112]	@ (8016380 <tcp_slowtmr+0x67c>)
 801630e:	4819      	ldr	r0, [pc, #100]	@ (8016374 <tcp_slowtmr+0x670>)
 8016310:	f009 fdc8 	bl	801fea4 <iprintf>
        prev->next = pcb->next;
 8016314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016316:	68da      	ldr	r2, [r3, #12]
 8016318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801631a:	60da      	str	r2, [r3, #12]
 801631c:	e00f      	b.n	801633e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801631e:	4b17      	ldr	r3, [pc, #92]	@ (801637c <tcp_slowtmr+0x678>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016324:	429a      	cmp	r2, r3
 8016326:	d006      	beq.n	8016336 <tcp_slowtmr+0x632>
 8016328:	4b10      	ldr	r3, [pc, #64]	@ (801636c <tcp_slowtmr+0x668>)
 801632a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801632e:	4915      	ldr	r1, [pc, #84]	@ (8016384 <tcp_slowtmr+0x680>)
 8016330:	4810      	ldr	r0, [pc, #64]	@ (8016374 <tcp_slowtmr+0x670>)
 8016332:	f009 fdb7 	bl	801fea4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016338:	68db      	ldr	r3, [r3, #12]
 801633a:	4a10      	ldr	r2, [pc, #64]	@ (801637c <tcp_slowtmr+0x678>)
 801633c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801633e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016340:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016344:	68db      	ldr	r3, [r3, #12]
 8016346:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016348:	69f8      	ldr	r0, [r7, #28]
 801634a:	f7fe feeb 	bl	8015124 <tcp_free>
 801634e:	e004      	b.n	801635a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8016350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016352:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016356:	68db      	ldr	r3, [r3, #12]
 8016358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801635a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801635c:	2b00      	cmp	r3, #0
 801635e:	d1a9      	bne.n	80162b4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8016360:	bf00      	nop
 8016362:	bf00      	nop
 8016364:	3730      	adds	r7, #48	@ 0x30
 8016366:	46bd      	mov	sp, r7
 8016368:	bdb0      	pop	{r4, r5, r7, pc}
 801636a:	bf00      	nop
 801636c:	08022934 	.word	0x08022934
 8016370:	08022dc4 	.word	0x08022dc4
 8016374:	08022978 	.word	0x08022978
 8016378:	2002279c 	.word	0x2002279c
 801637c:	200227ac 	.word	0x200227ac
 8016380:	08022df4 	.word	0x08022df4
 8016384:	08022e1c 	.word	0x08022e1c

08016388 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b082      	sub	sp, #8
 801638c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801638e:	4b2d      	ldr	r3, [pc, #180]	@ (8016444 <tcp_fasttmr+0xbc>)
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	3301      	adds	r3, #1
 8016394:	b2da      	uxtb	r2, r3
 8016396:	4b2b      	ldr	r3, [pc, #172]	@ (8016444 <tcp_fasttmr+0xbc>)
 8016398:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801639a:	4b2b      	ldr	r3, [pc, #172]	@ (8016448 <tcp_fasttmr+0xc0>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80163a0:	e048      	b.n	8016434 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	7f9a      	ldrb	r2, [r3, #30]
 80163a6:	4b27      	ldr	r3, [pc, #156]	@ (8016444 <tcp_fasttmr+0xbc>)
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	429a      	cmp	r2, r3
 80163ac:	d03f      	beq.n	801642e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80163ae:	4b25      	ldr	r3, [pc, #148]	@ (8016444 <tcp_fasttmr+0xbc>)
 80163b0:	781a      	ldrb	r2, [r3, #0]
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	8b5b      	ldrh	r3, [r3, #26]
 80163ba:	f003 0301 	and.w	r3, r3, #1
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d010      	beq.n	80163e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	8b5b      	ldrh	r3, [r3, #26]
 80163c6:	f043 0302 	orr.w	r3, r3, #2
 80163ca:	b29a      	uxth	r2, r3
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f004 f857 	bl	801a484 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	8b5b      	ldrh	r3, [r3, #26]
 80163da:	f023 0303 	bic.w	r3, r3, #3
 80163de:	b29a      	uxth	r2, r3
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	8b5b      	ldrh	r3, [r3, #26]
 80163e8:	f003 0308 	and.w	r3, r3, #8
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d009      	beq.n	8016404 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	8b5b      	ldrh	r3, [r3, #26]
 80163f4:	f023 0308 	bic.w	r3, r3, #8
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f7ff f824 	bl	801544c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801640e:	2b00      	cmp	r3, #0
 8016410:	d00a      	beq.n	8016428 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016412:	4b0e      	ldr	r3, [pc, #56]	@ (801644c <tcp_fasttmr+0xc4>)
 8016414:	2200      	movs	r2, #0
 8016416:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f000 f819 	bl	8016450 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801641e:	4b0b      	ldr	r3, [pc, #44]	@ (801644c <tcp_fasttmr+0xc4>)
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d000      	beq.n	8016428 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016426:	e7b8      	b.n	801639a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	607b      	str	r3, [r7, #4]
 801642c:	e002      	b.n	8016434 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	68db      	ldr	r3, [r3, #12]
 8016432:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d1b3      	bne.n	80163a2 <tcp_fasttmr+0x1a>
    }
  }
}
 801643a:	bf00      	nop
 801643c:	bf00      	nop
 801643e:	3708      	adds	r7, #8
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	200227b2 	.word	0x200227b2
 8016448:	200227a8 	.word	0x200227a8
 801644c:	200227b0 	.word	0x200227b0

08016450 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016450:	b590      	push	{r4, r7, lr}
 8016452:	b085      	sub	sp, #20
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d109      	bne.n	8016472 <tcp_process_refused_data+0x22>
 801645e:	4b37      	ldr	r3, [pc, #220]	@ (801653c <tcp_process_refused_data+0xec>)
 8016460:	f240 6209 	movw	r2, #1545	@ 0x609
 8016464:	4936      	ldr	r1, [pc, #216]	@ (8016540 <tcp_process_refused_data+0xf0>)
 8016466:	4837      	ldr	r0, [pc, #220]	@ (8016544 <tcp_process_refused_data+0xf4>)
 8016468:	f009 fd1c 	bl	801fea4 <iprintf>
 801646c:	f06f 030f 	mvn.w	r3, #15
 8016470:	e060      	b.n	8016534 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016476:	7b5b      	ldrb	r3, [r3, #13]
 8016478:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801647e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2200      	movs	r2, #0
 8016484:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00b      	beq.n	80164a8 <tcp_process_refused_data+0x58>
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6918      	ldr	r0, [r3, #16]
 801649a:	2300      	movs	r3, #0
 801649c:	68ba      	ldr	r2, [r7, #8]
 801649e:	6879      	ldr	r1, [r7, #4]
 80164a0:	47a0      	blx	r4
 80164a2:	4603      	mov	r3, r0
 80164a4:	73fb      	strb	r3, [r7, #15]
 80164a6:	e007      	b.n	80164b8 <tcp_process_refused_data+0x68>
 80164a8:	2300      	movs	r3, #0
 80164aa:	68ba      	ldr	r2, [r7, #8]
 80164ac:	6879      	ldr	r1, [r7, #4]
 80164ae:	2000      	movs	r0, #0
 80164b0:	f000 f8a4 	bl	80165fc <tcp_recv_null>
 80164b4:	4603      	mov	r3, r0
 80164b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80164b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d12a      	bne.n	8016516 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80164c0:	7bbb      	ldrb	r3, [r7, #14]
 80164c2:	f003 0320 	and.w	r3, r3, #32
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d033      	beq.n	8016532 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164ce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80164d2:	d005      	beq.n	80164e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164d8:	3301      	adds	r3, #1
 80164da:	b29a      	uxth	r2, r3
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d00b      	beq.n	8016502 <tcp_process_refused_data+0xb2>
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6918      	ldr	r0, [r3, #16]
 80164f4:	2300      	movs	r3, #0
 80164f6:	2200      	movs	r2, #0
 80164f8:	6879      	ldr	r1, [r7, #4]
 80164fa:	47a0      	blx	r4
 80164fc:	4603      	mov	r3, r0
 80164fe:	73fb      	strb	r3, [r7, #15]
 8016500:	e001      	b.n	8016506 <tcp_process_refused_data+0xb6>
 8016502:	2300      	movs	r3, #0
 8016504:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801650a:	f113 0f0d 	cmn.w	r3, #13
 801650e:	d110      	bne.n	8016532 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016510:	f06f 030c 	mvn.w	r3, #12
 8016514:	e00e      	b.n	8016534 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801651a:	f113 0f0d 	cmn.w	r3, #13
 801651e:	d102      	bne.n	8016526 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016520:	f06f 030c 	mvn.w	r3, #12
 8016524:	e006      	b.n	8016534 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	68ba      	ldr	r2, [r7, #8]
 801652a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801652c:	f06f 0304 	mvn.w	r3, #4
 8016530:	e000      	b.n	8016534 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016532:	2300      	movs	r3, #0
}
 8016534:	4618      	mov	r0, r3
 8016536:	3714      	adds	r7, #20
 8016538:	46bd      	mov	sp, r7
 801653a:	bd90      	pop	{r4, r7, pc}
 801653c:	08022934 	.word	0x08022934
 8016540:	08022e44 	.word	0x08022e44
 8016544:	08022978 	.word	0x08022978

08016548 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b084      	sub	sp, #16
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016550:	e007      	b.n	8016562 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f000 f80a 	bl	8016572 <tcp_seg_free>
    seg = next;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d1f4      	bne.n	8016552 <tcp_segs_free+0xa>
  }
}
 8016568:	bf00      	nop
 801656a:	bf00      	nop
 801656c:	3710      	adds	r7, #16
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}

08016572 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016572:	b580      	push	{r7, lr}
 8016574:	b082      	sub	sp, #8
 8016576:	af00      	add	r7, sp, #0
 8016578:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d00c      	beq.n	801659a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d004      	beq.n	8016592 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	685b      	ldr	r3, [r3, #4]
 801658c:	4618      	mov	r0, r3
 801658e:	f7fe fb0d 	bl	8014bac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016592:	6879      	ldr	r1, [r7, #4]
 8016594:	2003      	movs	r0, #3
 8016596:	f7fd fb6f 	bl	8013c78 <memp_free>
  }
}
 801659a:	bf00      	nop
 801659c:	3708      	adds	r7, #8
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
	...

080165a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b084      	sub	sp, #16
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d106      	bne.n	80165c0 <tcp_seg_copy+0x1c>
 80165b2:	4b0f      	ldr	r3, [pc, #60]	@ (80165f0 <tcp_seg_copy+0x4c>)
 80165b4:	f240 6282 	movw	r2, #1666	@ 0x682
 80165b8:	490e      	ldr	r1, [pc, #56]	@ (80165f4 <tcp_seg_copy+0x50>)
 80165ba:	480f      	ldr	r0, [pc, #60]	@ (80165f8 <tcp_seg_copy+0x54>)
 80165bc:	f009 fc72 	bl	801fea4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80165c0:	2003      	movs	r0, #3
 80165c2:	f7fd fae3 	bl	8013b8c <memp_malloc>
 80165c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d101      	bne.n	80165d2 <tcp_seg_copy+0x2e>
    return NULL;
 80165ce:	2300      	movs	r3, #0
 80165d0:	e00a      	b.n	80165e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80165d2:	2214      	movs	r2, #20
 80165d4:	6879      	ldr	r1, [r7, #4]
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	f009 fe39 	bl	802024e <memcpy>
  pbuf_ref(cseg->p);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	4618      	mov	r0, r3
 80165e2:	f7fe fb89 	bl	8014cf8 <pbuf_ref>
  return cseg;
 80165e6:	68fb      	ldr	r3, [r7, #12]
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3710      	adds	r7, #16
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}
 80165f0:	08022934 	.word	0x08022934
 80165f4:	08022e88 	.word	0x08022e88
 80165f8:	08022978 	.word	0x08022978

080165fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b084      	sub	sp, #16
 8016600:	af00      	add	r7, sp, #0
 8016602:	60f8      	str	r0, [r7, #12]
 8016604:	60b9      	str	r1, [r7, #8]
 8016606:	607a      	str	r2, [r7, #4]
 8016608:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d109      	bne.n	8016624 <tcp_recv_null+0x28>
 8016610:	4b12      	ldr	r3, [pc, #72]	@ (801665c <tcp_recv_null+0x60>)
 8016612:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016616:	4912      	ldr	r1, [pc, #72]	@ (8016660 <tcp_recv_null+0x64>)
 8016618:	4812      	ldr	r0, [pc, #72]	@ (8016664 <tcp_recv_null+0x68>)
 801661a:	f009 fc43 	bl	801fea4 <iprintf>
 801661e:	f06f 030f 	mvn.w	r3, #15
 8016622:	e016      	b.n	8016652 <tcp_recv_null+0x56>

  if (p != NULL) {
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d009      	beq.n	801663e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	891b      	ldrh	r3, [r3, #8]
 801662e:	4619      	mov	r1, r3
 8016630:	68b8      	ldr	r0, [r7, #8]
 8016632:	f7ff f9b9 	bl	80159a8 <tcp_recved>
    pbuf_free(p);
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f7fe fab8 	bl	8014bac <pbuf_free>
 801663c:	e008      	b.n	8016650 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801663e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d104      	bne.n	8016650 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016646:	68b8      	ldr	r0, [r7, #8]
 8016648:	f7fe ff6a 	bl	8015520 <tcp_close>
 801664c:	4603      	mov	r3, r0
 801664e:	e000      	b.n	8016652 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016650:	2300      	movs	r3, #0
}
 8016652:	4618      	mov	r0, r3
 8016654:	3710      	adds	r7, #16
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	08022934 	.word	0x08022934
 8016660:	08022ea4 	.word	0x08022ea4
 8016664:	08022978 	.word	0x08022978

08016668 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b086      	sub	sp, #24
 801666c:	af00      	add	r7, sp, #0
 801666e:	4603      	mov	r3, r0
 8016670:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016676:	2b00      	cmp	r3, #0
 8016678:	db01      	blt.n	801667e <tcp_kill_prio+0x16>
 801667a:	79fb      	ldrb	r3, [r7, #7]
 801667c:	e000      	b.n	8016680 <tcp_kill_prio+0x18>
 801667e:	237f      	movs	r3, #127	@ 0x7f
 8016680:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016682:	7afb      	ldrb	r3, [r7, #11]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d034      	beq.n	80166f2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016688:	7afb      	ldrb	r3, [r7, #11]
 801668a:	3b01      	subs	r3, #1
 801668c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801668e:	2300      	movs	r3, #0
 8016690:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016692:	2300      	movs	r3, #0
 8016694:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016696:	4b19      	ldr	r3, [pc, #100]	@ (80166fc <tcp_kill_prio+0x94>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	617b      	str	r3, [r7, #20]
 801669c:	e01f      	b.n	80166de <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	7d5b      	ldrb	r3, [r3, #21]
 80166a2:	7afa      	ldrb	r2, [r7, #11]
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d80c      	bhi.n	80166c2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80166ac:	7afa      	ldrb	r2, [r7, #11]
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d112      	bne.n	80166d8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80166b2:	4b13      	ldr	r3, [pc, #76]	@ (8016700 <tcp_kill_prio+0x98>)
 80166b4:	681a      	ldr	r2, [r3, #0]
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	6a1b      	ldr	r3, [r3, #32]
 80166ba:	1ad3      	subs	r3, r2, r3
 80166bc:	68fa      	ldr	r2, [r7, #12]
 80166be:	429a      	cmp	r2, r3
 80166c0:	d80a      	bhi.n	80166d8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80166c2:	4b0f      	ldr	r3, [pc, #60]	@ (8016700 <tcp_kill_prio+0x98>)
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	6a1b      	ldr	r3, [r3, #32]
 80166ca:	1ad3      	subs	r3, r2, r3
 80166cc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	7d5b      	ldrb	r3, [r3, #21]
 80166d6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	68db      	ldr	r3, [r3, #12]
 80166dc:	617b      	str	r3, [r7, #20]
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d1dc      	bne.n	801669e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d004      	beq.n	80166f4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80166ea:	6938      	ldr	r0, [r7, #16]
 80166ec:	f7ff f85e 	bl	80157ac <tcp_abort>
 80166f0:	e000      	b.n	80166f4 <tcp_kill_prio+0x8c>
    return;
 80166f2:	bf00      	nop
  }
}
 80166f4:	3718      	adds	r7, #24
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	200227a8 	.word	0x200227a8
 8016700:	2002279c 	.word	0x2002279c

08016704 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af00      	add	r7, sp, #0
 801670a:	4603      	mov	r3, r0
 801670c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801670e:	79fb      	ldrb	r3, [r7, #7]
 8016710:	2b08      	cmp	r3, #8
 8016712:	d009      	beq.n	8016728 <tcp_kill_state+0x24>
 8016714:	79fb      	ldrb	r3, [r7, #7]
 8016716:	2b09      	cmp	r3, #9
 8016718:	d006      	beq.n	8016728 <tcp_kill_state+0x24>
 801671a:	4b1a      	ldr	r3, [pc, #104]	@ (8016784 <tcp_kill_state+0x80>)
 801671c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8016720:	4919      	ldr	r1, [pc, #100]	@ (8016788 <tcp_kill_state+0x84>)
 8016722:	481a      	ldr	r0, [pc, #104]	@ (801678c <tcp_kill_state+0x88>)
 8016724:	f009 fbbe 	bl	801fea4 <iprintf>

  inactivity = 0;
 8016728:	2300      	movs	r3, #0
 801672a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801672c:	2300      	movs	r3, #0
 801672e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016730:	4b17      	ldr	r3, [pc, #92]	@ (8016790 <tcp_kill_state+0x8c>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	617b      	str	r3, [r7, #20]
 8016736:	e017      	b.n	8016768 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	7d1b      	ldrb	r3, [r3, #20]
 801673c:	79fa      	ldrb	r2, [r7, #7]
 801673e:	429a      	cmp	r2, r3
 8016740:	d10f      	bne.n	8016762 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016742:	4b14      	ldr	r3, [pc, #80]	@ (8016794 <tcp_kill_state+0x90>)
 8016744:	681a      	ldr	r2, [r3, #0]
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	6a1b      	ldr	r3, [r3, #32]
 801674a:	1ad3      	subs	r3, r2, r3
 801674c:	68fa      	ldr	r2, [r7, #12]
 801674e:	429a      	cmp	r2, r3
 8016750:	d807      	bhi.n	8016762 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016752:	4b10      	ldr	r3, [pc, #64]	@ (8016794 <tcp_kill_state+0x90>)
 8016754:	681a      	ldr	r2, [r3, #0]
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	6a1b      	ldr	r3, [r3, #32]
 801675a:	1ad3      	subs	r3, r2, r3
 801675c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	68db      	ldr	r3, [r3, #12]
 8016766:	617b      	str	r3, [r7, #20]
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d1e4      	bne.n	8016738 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d003      	beq.n	801677c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016774:	2100      	movs	r1, #0
 8016776:	6938      	ldr	r0, [r7, #16]
 8016778:	f7fe ff5a 	bl	8015630 <tcp_abandon>
  }
}
 801677c:	bf00      	nop
 801677e:	3718      	adds	r7, #24
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}
 8016784:	08022934 	.word	0x08022934
 8016788:	08022ec0 	.word	0x08022ec0
 801678c:	08022978 	.word	0x08022978
 8016790:	200227a8 	.word	0x200227a8
 8016794:	2002279c 	.word	0x2002279c

08016798 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b084      	sub	sp, #16
 801679c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801679e:	2300      	movs	r3, #0
 80167a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80167a2:	2300      	movs	r3, #0
 80167a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80167a6:	4b12      	ldr	r3, [pc, #72]	@ (80167f0 <tcp_kill_timewait+0x58>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	60fb      	str	r3, [r7, #12]
 80167ac:	e012      	b.n	80167d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80167ae:	4b11      	ldr	r3, [pc, #68]	@ (80167f4 <tcp_kill_timewait+0x5c>)
 80167b0:	681a      	ldr	r2, [r3, #0]
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	6a1b      	ldr	r3, [r3, #32]
 80167b6:	1ad3      	subs	r3, r2, r3
 80167b8:	687a      	ldr	r2, [r7, #4]
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d807      	bhi.n	80167ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80167be:	4b0d      	ldr	r3, [pc, #52]	@ (80167f4 <tcp_kill_timewait+0x5c>)
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	6a1b      	ldr	r3, [r3, #32]
 80167c6:	1ad3      	subs	r3, r2, r3
 80167c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	60fb      	str	r3, [r7, #12]
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d1e9      	bne.n	80167ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d002      	beq.n	80167e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80167e0:	68b8      	ldr	r0, [r7, #8]
 80167e2:	f7fe ffe3 	bl	80157ac <tcp_abort>
  }
}
 80167e6:	bf00      	nop
 80167e8:	3710      	adds	r7, #16
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}
 80167ee:	bf00      	nop
 80167f0:	200227ac 	.word	0x200227ac
 80167f4:	2002279c 	.word	0x2002279c

080167f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80167fe:	4b10      	ldr	r3, [pc, #64]	@ (8016840 <tcp_handle_closepend+0x48>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016804:	e014      	b.n	8016830 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	68db      	ldr	r3, [r3, #12]
 801680a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	8b5b      	ldrh	r3, [r3, #26]
 8016810:	f003 0308 	and.w	r3, r3, #8
 8016814:	2b00      	cmp	r3, #0
 8016816:	d009      	beq.n	801682c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	8b5b      	ldrh	r3, [r3, #26]
 801681c:	f023 0308 	bic.w	r3, r3, #8
 8016820:	b29a      	uxth	r2, r3
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f7fe fe10 	bl	801544c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d1e7      	bne.n	8016806 <tcp_handle_closepend+0xe>
  }
}
 8016836:	bf00      	nop
 8016838:	bf00      	nop
 801683a:	3708      	adds	r7, #8
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}
 8016840:	200227a8 	.word	0x200227a8

08016844 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b084      	sub	sp, #16
 8016848:	af00      	add	r7, sp, #0
 801684a:	4603      	mov	r3, r0
 801684c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801684e:	2001      	movs	r0, #1
 8016850:	f7fd f99c 	bl	8013b8c <memp_malloc>
 8016854:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d126      	bne.n	80168aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801685c:	f7ff ffcc 	bl	80167f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016860:	f7ff ff9a 	bl	8016798 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016864:	2001      	movs	r0, #1
 8016866:	f7fd f991 	bl	8013b8c <memp_malloc>
 801686a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d11b      	bne.n	80168aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016872:	2009      	movs	r0, #9
 8016874:	f7ff ff46 	bl	8016704 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016878:	2001      	movs	r0, #1
 801687a:	f7fd f987 	bl	8013b8c <memp_malloc>
 801687e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d111      	bne.n	80168aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016886:	2008      	movs	r0, #8
 8016888:	f7ff ff3c 	bl	8016704 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801688c:	2001      	movs	r0, #1
 801688e:	f7fd f97d 	bl	8013b8c <memp_malloc>
 8016892:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d107      	bne.n	80168aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801689a:	79fb      	ldrb	r3, [r7, #7]
 801689c:	4618      	mov	r0, r3
 801689e:	f7ff fee3 	bl	8016668 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80168a2:	2001      	movs	r0, #1
 80168a4:	f7fd f972 	bl	8013b8c <memp_malloc>
 80168a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d03f      	beq.n	8016930 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80168b0:	229c      	movs	r2, #156	@ 0x9c
 80168b2:	2100      	movs	r1, #0
 80168b4:	68f8      	ldr	r0, [r7, #12]
 80168b6:	f009 fc55 	bl	8020164 <memset>
    pcb->prio = prio;
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	79fa      	ldrb	r2, [r7, #7]
 80168be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80168c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80168d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	22ff      	movs	r2, #255	@ 0xff
 80168de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80168e6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	2206      	movs	r2, #6
 80168ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	2206      	movs	r2, #6
 80168f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168fc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	2201      	movs	r2, #1
 8016902:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8016906:	4b0d      	ldr	r3, [pc, #52]	@ (801693c <tcp_alloc+0xf8>)
 8016908:	681a      	ldr	r2, [r3, #0]
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801690e:	4b0c      	ldr	r3, [pc, #48]	@ (8016940 <tcp_alloc+0xfc>)
 8016910:	781a      	ldrb	r2, [r3, #0]
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801691c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	4a08      	ldr	r2, [pc, #32]	@ (8016944 <tcp_alloc+0x100>)
 8016924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	4a07      	ldr	r2, [pc, #28]	@ (8016948 <tcp_alloc+0x104>)
 801692c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016930:	68fb      	ldr	r3, [r7, #12]
}
 8016932:	4618      	mov	r0, r3
 8016934:	3710      	adds	r7, #16
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
 801693a:	bf00      	nop
 801693c:	2002279c 	.word	0x2002279c
 8016940:	200227b2 	.word	0x200227b2
 8016944:	080165fd 	.word	0x080165fd
 8016948:	006ddd00 	.word	0x006ddd00

0801694c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b084      	sub	sp, #16
 8016950:	af00      	add	r7, sp, #0
 8016952:	4603      	mov	r3, r0
 8016954:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016956:	2040      	movs	r0, #64	@ 0x40
 8016958:	f7ff ff74 	bl	8016844 <tcp_alloc>
 801695c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801695e:	68fb      	ldr	r3, [r7, #12]
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016968:	b480      	push	{r7}
 801696a:	b083      	sub	sp, #12
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d002      	beq.n	801697e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	683a      	ldr	r2, [r7, #0]
 801697c:	611a      	str	r2, [r3, #16]
  }
}
 801697e:	bf00      	nop
 8016980:	370c      	adds	r7, #12
 8016982:	46bd      	mov	sp, r7
 8016984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016988:	4770      	bx	lr
	...

0801698c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d00e      	beq.n	80169ba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	7d1b      	ldrb	r3, [r3, #20]
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d106      	bne.n	80169b2 <tcp_recv+0x26>
 80169a4:	4b07      	ldr	r3, [pc, #28]	@ (80169c4 <tcp_recv+0x38>)
 80169a6:	f240 72df 	movw	r2, #2015	@ 0x7df
 80169aa:	4907      	ldr	r1, [pc, #28]	@ (80169c8 <tcp_recv+0x3c>)
 80169ac:	4807      	ldr	r0, [pc, #28]	@ (80169cc <tcp_recv+0x40>)
 80169ae:	f009 fa79 	bl	801fea4 <iprintf>
    pcb->recv = recv;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	683a      	ldr	r2, [r7, #0]
 80169b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80169ba:	bf00      	nop
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	08022934 	.word	0x08022934
 80169c8:	08022ed0 	.word	0x08022ed0
 80169cc:	08022978 	.word	0x08022978

080169d0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b082      	sub	sp, #8
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
 80169d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d00e      	beq.n	80169fe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	7d1b      	ldrb	r3, [r3, #20]
 80169e4:	2b01      	cmp	r3, #1
 80169e6:	d106      	bne.n	80169f6 <tcp_sent+0x26>
 80169e8:	4b07      	ldr	r3, [pc, #28]	@ (8016a08 <tcp_sent+0x38>)
 80169ea:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80169ee:	4907      	ldr	r1, [pc, #28]	@ (8016a0c <tcp_sent+0x3c>)
 80169f0:	4807      	ldr	r0, [pc, #28]	@ (8016a10 <tcp_sent+0x40>)
 80169f2:	f009 fa57 	bl	801fea4 <iprintf>
    pcb->sent = sent;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	683a      	ldr	r2, [r7, #0]
 80169fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80169fe:	bf00      	nop
 8016a00:	3708      	adds	r7, #8
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	08022934 	.word	0x08022934
 8016a0c:	08022ef8 	.word	0x08022ef8
 8016a10:	08022978 	.word	0x08022978

08016a14 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d00e      	beq.n	8016a42 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	7d1b      	ldrb	r3, [r3, #20]
 8016a28:	2b01      	cmp	r3, #1
 8016a2a:	d106      	bne.n	8016a3a <tcp_err+0x26>
 8016a2c:	4b07      	ldr	r3, [pc, #28]	@ (8016a4c <tcp_err+0x38>)
 8016a2e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8016a32:	4907      	ldr	r1, [pc, #28]	@ (8016a50 <tcp_err+0x3c>)
 8016a34:	4807      	ldr	r0, [pc, #28]	@ (8016a54 <tcp_err+0x40>)
 8016a36:	f009 fa35 	bl	801fea4 <iprintf>
    pcb->errf = err;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	683a      	ldr	r2, [r7, #0]
 8016a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8016a42:	bf00      	nop
 8016a44:	3708      	adds	r7, #8
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	08022934 	.word	0x08022934
 8016a50:	08022f20 	.word	0x08022f20
 8016a54:	08022978 	.word	0x08022978

08016a58 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d008      	beq.n	8016a7a <tcp_accept+0x22>
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	7d1b      	ldrb	r3, [r3, #20]
 8016a6c:	2b01      	cmp	r3, #1
 8016a6e:	d104      	bne.n	8016a7a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	683a      	ldr	r2, [r7, #0]
 8016a78:	619a      	str	r2, [r3, #24]
  }
}
 8016a7a:	bf00      	nop
 8016a7c:	3714      	adds	r7, #20
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a84:	4770      	bx	lr
	...

08016a88 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b084      	sub	sp, #16
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	60b9      	str	r1, [r7, #8]
 8016a92:	4613      	mov	r3, r2
 8016a94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d107      	bne.n	8016aac <tcp_poll+0x24>
 8016a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8016ad8 <tcp_poll+0x50>)
 8016a9e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8016aa2:	490e      	ldr	r1, [pc, #56]	@ (8016adc <tcp_poll+0x54>)
 8016aa4:	480e      	ldr	r0, [pc, #56]	@ (8016ae0 <tcp_poll+0x58>)
 8016aa6:	f009 f9fd 	bl	801fea4 <iprintf>
 8016aaa:	e011      	b.n	8016ad0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	7d1b      	ldrb	r3, [r3, #20]
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d106      	bne.n	8016ac2 <tcp_poll+0x3a>
 8016ab4:	4b08      	ldr	r3, [pc, #32]	@ (8016ad8 <tcp_poll+0x50>)
 8016ab6:	f640 023e 	movw	r2, #2110	@ 0x83e
 8016aba:	490a      	ldr	r1, [pc, #40]	@ (8016ae4 <tcp_poll+0x5c>)
 8016abc:	4808      	ldr	r0, [pc, #32]	@ (8016ae0 <tcp_poll+0x58>)
 8016abe:	f009 f9f1 	bl	801fea4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	68ba      	ldr	r2, [r7, #8]
 8016ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	79fa      	ldrb	r2, [r7, #7]
 8016ace:	775a      	strb	r2, [r3, #29]
}
 8016ad0:	3710      	adds	r7, #16
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop
 8016ad8:	08022934 	.word	0x08022934
 8016adc:	08022f48 	.word	0x08022f48
 8016ae0:	08022978 	.word	0x08022978
 8016ae4:	08022f60 	.word	0x08022f60

08016ae8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d107      	bne.n	8016b06 <tcp_pcb_purge+0x1e>
 8016af6:	4b21      	ldr	r3, [pc, #132]	@ (8016b7c <tcp_pcb_purge+0x94>)
 8016af8:	f640 0251 	movw	r2, #2129	@ 0x851
 8016afc:	4920      	ldr	r1, [pc, #128]	@ (8016b80 <tcp_pcb_purge+0x98>)
 8016afe:	4821      	ldr	r0, [pc, #132]	@ (8016b84 <tcp_pcb_purge+0x9c>)
 8016b00:	f009 f9d0 	bl	801fea4 <iprintf>
 8016b04:	e037      	b.n	8016b76 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	7d1b      	ldrb	r3, [r3, #20]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d033      	beq.n	8016b76 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016b12:	2b0a      	cmp	r3, #10
 8016b14:	d02f      	beq.n	8016b76 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016b1a:	2b01      	cmp	r3, #1
 8016b1c:	d02b      	beq.n	8016b76 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d007      	beq.n	8016b36 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7fe f83e 	bl	8014bac <pbuf_free>
      pcb->refused_data = NULL;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2200      	movs	r2, #0
 8016b34:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d002      	beq.n	8016b44 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 f98c 	bl	8016e5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b4a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7ff fcf9 	bl	8016548 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7ff fcf4 	bl	8016548 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2200      	movs	r2, #0
 8016b64:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2200      	movs	r2, #0
 8016b72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}
 8016b7c:	08022934 	.word	0x08022934
 8016b80:	08022f80 	.word	0x08022f80
 8016b84:	08022978 	.word	0x08022978

08016b88 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d106      	bne.n	8016ba6 <tcp_pcb_remove+0x1e>
 8016b98:	4b3e      	ldr	r3, [pc, #248]	@ (8016c94 <tcp_pcb_remove+0x10c>)
 8016b9a:	f640 0283 	movw	r2, #2179	@ 0x883
 8016b9e:	493e      	ldr	r1, [pc, #248]	@ (8016c98 <tcp_pcb_remove+0x110>)
 8016ba0:	483e      	ldr	r0, [pc, #248]	@ (8016c9c <tcp_pcb_remove+0x114>)
 8016ba2:	f009 f97f 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d106      	bne.n	8016bba <tcp_pcb_remove+0x32>
 8016bac:	4b39      	ldr	r3, [pc, #228]	@ (8016c94 <tcp_pcb_remove+0x10c>)
 8016bae:	f640 0284 	movw	r2, #2180	@ 0x884
 8016bb2:	493b      	ldr	r1, [pc, #236]	@ (8016ca0 <tcp_pcb_remove+0x118>)
 8016bb4:	4839      	ldr	r0, [pc, #228]	@ (8016c9c <tcp_pcb_remove+0x114>)
 8016bb6:	f009 f975 	bl	801fea4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	683a      	ldr	r2, [r7, #0]
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d105      	bne.n	8016bd0 <tcp_pcb_remove+0x48>
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	68da      	ldr	r2, [r3, #12]
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	601a      	str	r2, [r3, #0]
 8016bce:	e013      	b.n	8016bf8 <tcp_pcb_remove+0x70>
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	60fb      	str	r3, [r7, #12]
 8016bd6:	e00c      	b.n	8016bf2 <tcp_pcb_remove+0x6a>
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	68db      	ldr	r3, [r3, #12]
 8016bdc:	683a      	ldr	r2, [r7, #0]
 8016bde:	429a      	cmp	r2, r3
 8016be0:	d104      	bne.n	8016bec <tcp_pcb_remove+0x64>
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	68da      	ldr	r2, [r3, #12]
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	60da      	str	r2, [r3, #12]
 8016bea:	e005      	b.n	8016bf8 <tcp_pcb_remove+0x70>
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	68db      	ldr	r3, [r3, #12]
 8016bf0:	60fb      	str	r3, [r7, #12]
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d1ef      	bne.n	8016bd8 <tcp_pcb_remove+0x50>
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016bfe:	6838      	ldr	r0, [r7, #0]
 8016c00:	f7ff ff72 	bl	8016ae8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	7d1b      	ldrb	r3, [r3, #20]
 8016c08:	2b0a      	cmp	r3, #10
 8016c0a:	d013      	beq.n	8016c34 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016c10:	2b01      	cmp	r3, #1
 8016c12:	d00f      	beq.n	8016c34 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	8b5b      	ldrh	r3, [r3, #26]
 8016c18:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d009      	beq.n	8016c34 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	8b5b      	ldrh	r3, [r3, #26]
 8016c24:	f043 0302 	orr.w	r3, r3, #2
 8016c28:	b29a      	uxth	r2, r3
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016c2e:	6838      	ldr	r0, [r7, #0]
 8016c30:	f003 fc28 	bl	801a484 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	7d1b      	ldrb	r3, [r3, #20]
 8016c38:	2b01      	cmp	r3, #1
 8016c3a:	d020      	beq.n	8016c7e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016c3c:	683b      	ldr	r3, [r7, #0]
 8016c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d006      	beq.n	8016c52 <tcp_pcb_remove+0xca>
 8016c44:	4b13      	ldr	r3, [pc, #76]	@ (8016c94 <tcp_pcb_remove+0x10c>)
 8016c46:	f640 0293 	movw	r2, #2195	@ 0x893
 8016c4a:	4916      	ldr	r1, [pc, #88]	@ (8016ca4 <tcp_pcb_remove+0x11c>)
 8016c4c:	4813      	ldr	r0, [pc, #76]	@ (8016c9c <tcp_pcb_remove+0x114>)
 8016c4e:	f009 f929 	bl	801fea4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d006      	beq.n	8016c68 <tcp_pcb_remove+0xe0>
 8016c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8016c94 <tcp_pcb_remove+0x10c>)
 8016c5c:	f640 0294 	movw	r2, #2196	@ 0x894
 8016c60:	4911      	ldr	r1, [pc, #68]	@ (8016ca8 <tcp_pcb_remove+0x120>)
 8016c62:	480e      	ldr	r0, [pc, #56]	@ (8016c9c <tcp_pcb_remove+0x114>)
 8016c64:	f009 f91e 	bl	801fea4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d006      	beq.n	8016c7e <tcp_pcb_remove+0xf6>
 8016c70:	4b08      	ldr	r3, [pc, #32]	@ (8016c94 <tcp_pcb_remove+0x10c>)
 8016c72:	f640 0296 	movw	r2, #2198	@ 0x896
 8016c76:	490d      	ldr	r1, [pc, #52]	@ (8016cac <tcp_pcb_remove+0x124>)
 8016c78:	4808      	ldr	r0, [pc, #32]	@ (8016c9c <tcp_pcb_remove+0x114>)
 8016c7a:	f009 f913 	bl	801fea4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	2200      	movs	r2, #0
 8016c82:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	2200      	movs	r2, #0
 8016c88:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016c8a:	bf00      	nop
 8016c8c:	3710      	adds	r7, #16
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	08022934 	.word	0x08022934
 8016c98:	08022f9c 	.word	0x08022f9c
 8016c9c:	08022978 	.word	0x08022978
 8016ca0:	08022fb8 	.word	0x08022fb8
 8016ca4:	08022fd8 	.word	0x08022fd8
 8016ca8:	08022ff0 	.word	0x08022ff0
 8016cac:	0802300c 	.word	0x0802300c

08016cb0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b082      	sub	sp, #8
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d106      	bne.n	8016ccc <tcp_next_iss+0x1c>
 8016cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8016ce8 <tcp_next_iss+0x38>)
 8016cc0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016cc4:	4909      	ldr	r1, [pc, #36]	@ (8016cec <tcp_next_iss+0x3c>)
 8016cc6:	480a      	ldr	r0, [pc, #40]	@ (8016cf0 <tcp_next_iss+0x40>)
 8016cc8:	f009 f8ec 	bl	801fea4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016ccc:	4b09      	ldr	r3, [pc, #36]	@ (8016cf4 <tcp_next_iss+0x44>)
 8016cce:	681a      	ldr	r2, [r3, #0]
 8016cd0:	4b09      	ldr	r3, [pc, #36]	@ (8016cf8 <tcp_next_iss+0x48>)
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	4a07      	ldr	r2, [pc, #28]	@ (8016cf4 <tcp_next_iss+0x44>)
 8016cd8:	6013      	str	r3, [r2, #0]
  return iss;
 8016cda:	4b06      	ldr	r3, [pc, #24]	@ (8016cf4 <tcp_next_iss+0x44>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3708      	adds	r7, #8
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	08022934 	.word	0x08022934
 8016cec:	08023024 	.word	0x08023024
 8016cf0:	08022978 	.word	0x08022978
 8016cf4:	2000006c 	.word	0x2000006c
 8016cf8:	2002279c 	.word	0x2002279c

08016cfc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b086      	sub	sp, #24
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	4603      	mov	r3, r0
 8016d04:	60b9      	str	r1, [r7, #8]
 8016d06:	607a      	str	r2, [r7, #4]
 8016d08:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d106      	bne.n	8016d1e <tcp_eff_send_mss_netif+0x22>
 8016d10:	4b14      	ldr	r3, [pc, #80]	@ (8016d64 <tcp_eff_send_mss_netif+0x68>)
 8016d12:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016d16:	4914      	ldr	r1, [pc, #80]	@ (8016d68 <tcp_eff_send_mss_netif+0x6c>)
 8016d18:	4814      	ldr	r0, [pc, #80]	@ (8016d6c <tcp_eff_send_mss_netif+0x70>)
 8016d1a:	f009 f8c3 	bl	801fea4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016d1e:	68bb      	ldr	r3, [r7, #8]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d101      	bne.n	8016d28 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016d24:	89fb      	ldrh	r3, [r7, #14]
 8016d26:	e019      	b.n	8016d5c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016d2c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016d2e:	8afb      	ldrh	r3, [r7, #22]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d012      	beq.n	8016d5a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016d34:	2328      	movs	r3, #40	@ 0x28
 8016d36:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016d38:	8afa      	ldrh	r2, [r7, #22]
 8016d3a:	8abb      	ldrh	r3, [r7, #20]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d904      	bls.n	8016d4a <tcp_eff_send_mss_netif+0x4e>
 8016d40:	8afa      	ldrh	r2, [r7, #22]
 8016d42:	8abb      	ldrh	r3, [r7, #20]
 8016d44:	1ad3      	subs	r3, r2, r3
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	e000      	b.n	8016d4c <tcp_eff_send_mss_netif+0x50>
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016d4e:	8a7a      	ldrh	r2, [r7, #18]
 8016d50:	89fb      	ldrh	r3, [r7, #14]
 8016d52:	4293      	cmp	r3, r2
 8016d54:	bf28      	it	cs
 8016d56:	4613      	movcs	r3, r2
 8016d58:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016d5a:	89fb      	ldrh	r3, [r7, #14]
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	3718      	adds	r7, #24
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}
 8016d64:	08022934 	.word	0x08022934
 8016d68:	08023040 	.word	0x08023040
 8016d6c:	08022978 	.word	0x08022978

08016d70 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d11d      	bne.n	8016dc0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8016d84:	4b12      	ldr	r3, [pc, #72]	@ (8016dd0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016d86:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016d8a:	4912      	ldr	r1, [pc, #72]	@ (8016dd4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8016d8c:	4812      	ldr	r0, [pc, #72]	@ (8016dd8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8016d8e:	f009 f889 	bl	801fea4 <iprintf>

  while (pcb != NULL) {
 8016d92:	e015      	b.n	8016dc0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d10c      	bne.n	8016dba <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	68db      	ldr	r3, [r3, #12]
 8016da4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8016da6:	68f9      	ldr	r1, [r7, #12]
 8016da8:	480c      	ldr	r0, [pc, #48]	@ (8016ddc <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8016daa:	f009 f87b 	bl	801fea4 <iprintf>
      tcp_abort(pcb);
 8016dae:	68f8      	ldr	r0, [r7, #12]
 8016db0:	f7fe fcfc 	bl	80157ac <tcp_abort>
      pcb = next;
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	60fb      	str	r3, [r7, #12]
 8016db8:	e002      	b.n	8016dc0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	68db      	ldr	r3, [r3, #12]
 8016dbe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d1e6      	bne.n	8016d94 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016dc6:	bf00      	nop
 8016dc8:	bf00      	nop
 8016dca:	3710      	adds	r7, #16
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}
 8016dd0:	08022934 	.word	0x08022934
 8016dd4:	08023068 	.word	0x08023068
 8016dd8:	08022978 	.word	0x08022978
 8016ddc:	0802309c 	.word	0x0802309c

08016de0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b084      	sub	sp, #16
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
 8016de8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d02a      	beq.n	8016e46 <tcp_netif_ip_addr_changed+0x66>
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d026      	beq.n	8016e46 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016df8:	4b15      	ldr	r3, [pc, #84]	@ (8016e50 <tcp_netif_ip_addr_changed+0x70>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f7ff ffb6 	bl	8016d70 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016e04:	4b13      	ldr	r3, [pc, #76]	@ (8016e54 <tcp_netif_ip_addr_changed+0x74>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	4619      	mov	r1, r3
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f7ff ffb0 	bl	8016d70 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016e10:	683b      	ldr	r3, [r7, #0]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d017      	beq.n	8016e46 <tcp_netif_ip_addr_changed+0x66>
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d013      	beq.n	8016e46 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8016e58 <tcp_netif_ip_addr_changed+0x78>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	60fb      	str	r3, [r7, #12]
 8016e24:	e00c      	b.n	8016e40 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681a      	ldr	r2, [r3, #0]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	429a      	cmp	r2, r3
 8016e30:	d103      	bne.n	8016e3a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	681a      	ldr	r2, [r3, #0]
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	68db      	ldr	r3, [r3, #12]
 8016e3e:	60fb      	str	r3, [r7, #12]
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d1ef      	bne.n	8016e26 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016e46:	bf00      	nop
 8016e48:	3710      	adds	r7, #16
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	bf00      	nop
 8016e50:	200227a8 	.word	0x200227a8
 8016e54:	200227a0 	.word	0x200227a0
 8016e58:	200227a4 	.word	0x200227a4

08016e5c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b082      	sub	sp, #8
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d007      	beq.n	8016e7c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7ff fb69 	bl	8016548 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2200      	movs	r2, #0
 8016e7a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016e7c:	bf00      	nop
 8016e7e:	3708      	adds	r7, #8
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}

08016e84 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016e84:	b590      	push	{r4, r7, lr}
 8016e86:	b08d      	sub	sp, #52	@ 0x34
 8016e88:	af04      	add	r7, sp, #16
 8016e8a:	6078      	str	r0, [r7, #4]
 8016e8c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d105      	bne.n	8016ea0 <tcp_input+0x1c>
 8016e94:	4b9b      	ldr	r3, [pc, #620]	@ (8017104 <tcp_input+0x280>)
 8016e96:	2283      	movs	r2, #131	@ 0x83
 8016e98:	499b      	ldr	r1, [pc, #620]	@ (8017108 <tcp_input+0x284>)
 8016e9a:	489c      	ldr	r0, [pc, #624]	@ (801710c <tcp_input+0x288>)
 8016e9c:	f009 f802 	bl	801fea4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	685b      	ldr	r3, [r3, #4]
 8016ea4:	4a9a      	ldr	r2, [pc, #616]	@ (8017110 <tcp_input+0x28c>)
 8016ea6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	895b      	ldrh	r3, [r3, #10]
 8016eac:	2b13      	cmp	r3, #19
 8016eae:	f240 83d1 	bls.w	8017654 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016eb2:	4b98      	ldr	r3, [pc, #608]	@ (8017114 <tcp_input+0x290>)
 8016eb4:	695b      	ldr	r3, [r3, #20]
 8016eb6:	4a97      	ldr	r2, [pc, #604]	@ (8017114 <tcp_input+0x290>)
 8016eb8:	6812      	ldr	r2, [r2, #0]
 8016eba:	4611      	mov	r1, r2
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f006 ff83 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	f040 83c7 	bne.w	8017658 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016eca:	4b92      	ldr	r3, [pc, #584]	@ (8017114 <tcp_input+0x290>)
 8016ecc:	695b      	ldr	r3, [r3, #20]
 8016ece:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016ed2:	2be0      	cmp	r3, #224	@ 0xe0
 8016ed4:	f000 83c0 	beq.w	8017658 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016ed8:	4b8d      	ldr	r3, [pc, #564]	@ (8017110 <tcp_input+0x28c>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	899b      	ldrh	r3, [r3, #12]
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7fc f97f 	bl	80131e4 <lwip_htons>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	0b1b      	lsrs	r3, r3, #12
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	b2db      	uxtb	r3, r3
 8016eee:	009b      	lsls	r3, r3, #2
 8016ef0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016ef2:	7cbb      	ldrb	r3, [r7, #18]
 8016ef4:	2b13      	cmp	r3, #19
 8016ef6:	f240 83b1 	bls.w	801765c <tcp_input+0x7d8>
 8016efa:	7cbb      	ldrb	r3, [r7, #18]
 8016efc:	b29a      	uxth	r2, r3
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	891b      	ldrh	r3, [r3, #8]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	f200 83aa 	bhi.w	801765c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016f08:	7cbb      	ldrb	r3, [r7, #18]
 8016f0a:	b29b      	uxth	r3, r3
 8016f0c:	3b14      	subs	r3, #20
 8016f0e:	b29a      	uxth	r2, r3
 8016f10:	4b81      	ldr	r3, [pc, #516]	@ (8017118 <tcp_input+0x294>)
 8016f12:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016f14:	4b81      	ldr	r3, [pc, #516]	@ (801711c <tcp_input+0x298>)
 8016f16:	2200      	movs	r2, #0
 8016f18:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	895a      	ldrh	r2, [r3, #10]
 8016f1e:	7cbb      	ldrb	r3, [r7, #18]
 8016f20:	b29b      	uxth	r3, r3
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d309      	bcc.n	8016f3a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016f26:	4b7c      	ldr	r3, [pc, #496]	@ (8017118 <tcp_input+0x294>)
 8016f28:	881a      	ldrh	r2, [r3, #0]
 8016f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8017120 <tcp_input+0x29c>)
 8016f2c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016f2e:	7cbb      	ldrb	r3, [r7, #18]
 8016f30:	4619      	mov	r1, r3
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f7fd fdb4 	bl	8014aa0 <pbuf_remove_header>
 8016f38:	e04e      	b.n	8016fd8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d105      	bne.n	8016f4e <tcp_input+0xca>
 8016f42:	4b70      	ldr	r3, [pc, #448]	@ (8017104 <tcp_input+0x280>)
 8016f44:	22c2      	movs	r2, #194	@ 0xc2
 8016f46:	4977      	ldr	r1, [pc, #476]	@ (8017124 <tcp_input+0x2a0>)
 8016f48:	4870      	ldr	r0, [pc, #448]	@ (801710c <tcp_input+0x288>)
 8016f4a:	f008 ffab 	bl	801fea4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016f4e:	2114      	movs	r1, #20
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f7fd fda5 	bl	8014aa0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	895a      	ldrh	r2, [r3, #10]
 8016f5a:	4b71      	ldr	r3, [pc, #452]	@ (8017120 <tcp_input+0x29c>)
 8016f5c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8017118 <tcp_input+0x294>)
 8016f60:	881a      	ldrh	r2, [r3, #0]
 8016f62:	4b6f      	ldr	r3, [pc, #444]	@ (8017120 <tcp_input+0x29c>)
 8016f64:	881b      	ldrh	r3, [r3, #0]
 8016f66:	1ad3      	subs	r3, r2, r3
 8016f68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8017120 <tcp_input+0x29c>)
 8016f6c:	881b      	ldrh	r3, [r3, #0]
 8016f6e:	4619      	mov	r1, r3
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f7fd fd95 	bl	8014aa0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	895b      	ldrh	r3, [r3, #10]
 8016f7c:	8a3a      	ldrh	r2, [r7, #16]
 8016f7e:	429a      	cmp	r2, r3
 8016f80:	f200 836e 	bhi.w	8017660 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	4a64      	ldr	r2, [pc, #400]	@ (801711c <tcp_input+0x298>)
 8016f8c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	8a3a      	ldrh	r2, [r7, #16]
 8016f94:	4611      	mov	r1, r2
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7fd fd82 	bl	8014aa0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	891a      	ldrh	r2, [r3, #8]
 8016fa0:	8a3b      	ldrh	r3, [r7, #16]
 8016fa2:	1ad3      	subs	r3, r2, r3
 8016fa4:	b29a      	uxth	r2, r3
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	895b      	ldrh	r3, [r3, #10]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d005      	beq.n	8016fbe <tcp_input+0x13a>
 8016fb2:	4b54      	ldr	r3, [pc, #336]	@ (8017104 <tcp_input+0x280>)
 8016fb4:	22df      	movs	r2, #223	@ 0xdf
 8016fb6:	495c      	ldr	r1, [pc, #368]	@ (8017128 <tcp_input+0x2a4>)
 8016fb8:	4854      	ldr	r0, [pc, #336]	@ (801710c <tcp_input+0x288>)
 8016fba:	f008 ff73 	bl	801fea4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	891a      	ldrh	r2, [r3, #8]
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	891b      	ldrh	r3, [r3, #8]
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	d005      	beq.n	8016fd8 <tcp_input+0x154>
 8016fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8017104 <tcp_input+0x280>)
 8016fce:	22e0      	movs	r2, #224	@ 0xe0
 8016fd0:	4956      	ldr	r1, [pc, #344]	@ (801712c <tcp_input+0x2a8>)
 8016fd2:	484e      	ldr	r0, [pc, #312]	@ (801710c <tcp_input+0x288>)
 8016fd4:	f008 ff66 	bl	801fea4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8017110 <tcp_input+0x28c>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	881b      	ldrh	r3, [r3, #0]
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8017110 <tcp_input+0x28c>)
 8016fe2:	6814      	ldr	r4, [r2, #0]
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7fc f8fd 	bl	80131e4 <lwip_htons>
 8016fea:	4603      	mov	r3, r0
 8016fec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016fee:	4b48      	ldr	r3, [pc, #288]	@ (8017110 <tcp_input+0x28c>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	885b      	ldrh	r3, [r3, #2]
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	4a46      	ldr	r2, [pc, #280]	@ (8017110 <tcp_input+0x28c>)
 8016ff8:	6814      	ldr	r4, [r2, #0]
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f7fc f8f2 	bl	80131e4 <lwip_htons>
 8017000:	4603      	mov	r3, r0
 8017002:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017004:	4b42      	ldr	r3, [pc, #264]	@ (8017110 <tcp_input+0x28c>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	685b      	ldr	r3, [r3, #4]
 801700a:	4a41      	ldr	r2, [pc, #260]	@ (8017110 <tcp_input+0x28c>)
 801700c:	6814      	ldr	r4, [r2, #0]
 801700e:	4618      	mov	r0, r3
 8017010:	f7fc f8fe 	bl	8013210 <lwip_htonl>
 8017014:	4603      	mov	r3, r0
 8017016:	6063      	str	r3, [r4, #4]
 8017018:	6863      	ldr	r3, [r4, #4]
 801701a:	4a45      	ldr	r2, [pc, #276]	@ (8017130 <tcp_input+0x2ac>)
 801701c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801701e:	4b3c      	ldr	r3, [pc, #240]	@ (8017110 <tcp_input+0x28c>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	689b      	ldr	r3, [r3, #8]
 8017024:	4a3a      	ldr	r2, [pc, #232]	@ (8017110 <tcp_input+0x28c>)
 8017026:	6814      	ldr	r4, [r2, #0]
 8017028:	4618      	mov	r0, r3
 801702a:	f7fc f8f1 	bl	8013210 <lwip_htonl>
 801702e:	4603      	mov	r3, r0
 8017030:	60a3      	str	r3, [r4, #8]
 8017032:	68a3      	ldr	r3, [r4, #8]
 8017034:	4a3f      	ldr	r2, [pc, #252]	@ (8017134 <tcp_input+0x2b0>)
 8017036:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017038:	4b35      	ldr	r3, [pc, #212]	@ (8017110 <tcp_input+0x28c>)
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	89db      	ldrh	r3, [r3, #14]
 801703e:	b29b      	uxth	r3, r3
 8017040:	4a33      	ldr	r2, [pc, #204]	@ (8017110 <tcp_input+0x28c>)
 8017042:	6814      	ldr	r4, [r2, #0]
 8017044:	4618      	mov	r0, r3
 8017046:	f7fc f8cd 	bl	80131e4 <lwip_htons>
 801704a:	4603      	mov	r3, r0
 801704c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801704e:	4b30      	ldr	r3, [pc, #192]	@ (8017110 <tcp_input+0x28c>)
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	899b      	ldrh	r3, [r3, #12]
 8017054:	b29b      	uxth	r3, r3
 8017056:	4618      	mov	r0, r3
 8017058:	f7fc f8c4 	bl	80131e4 <lwip_htons>
 801705c:	4603      	mov	r3, r0
 801705e:	b2db      	uxtb	r3, r3
 8017060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017064:	b2da      	uxtb	r2, r3
 8017066:	4b34      	ldr	r3, [pc, #208]	@ (8017138 <tcp_input+0x2b4>)
 8017068:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	891a      	ldrh	r2, [r3, #8]
 801706e:	4b33      	ldr	r3, [pc, #204]	@ (801713c <tcp_input+0x2b8>)
 8017070:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017072:	4b31      	ldr	r3, [pc, #196]	@ (8017138 <tcp_input+0x2b4>)
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	f003 0303 	and.w	r3, r3, #3
 801707a:	2b00      	cmp	r3, #0
 801707c:	d00c      	beq.n	8017098 <tcp_input+0x214>
    tcplen++;
 801707e:	4b2f      	ldr	r3, [pc, #188]	@ (801713c <tcp_input+0x2b8>)
 8017080:	881b      	ldrh	r3, [r3, #0]
 8017082:	3301      	adds	r3, #1
 8017084:	b29a      	uxth	r2, r3
 8017086:	4b2d      	ldr	r3, [pc, #180]	@ (801713c <tcp_input+0x2b8>)
 8017088:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	891a      	ldrh	r2, [r3, #8]
 801708e:	4b2b      	ldr	r3, [pc, #172]	@ (801713c <tcp_input+0x2b8>)
 8017090:	881b      	ldrh	r3, [r3, #0]
 8017092:	429a      	cmp	r2, r3
 8017094:	f200 82e6 	bhi.w	8017664 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017098:	2300      	movs	r3, #0
 801709a:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801709c:	4b28      	ldr	r3, [pc, #160]	@ (8017140 <tcp_input+0x2bc>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	61bb      	str	r3, [r7, #24]
 80170a2:	e09d      	b.n	80171e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80170a4:	69bb      	ldr	r3, [r7, #24]
 80170a6:	7d1b      	ldrb	r3, [r3, #20]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d105      	bne.n	80170b8 <tcp_input+0x234>
 80170ac:	4b15      	ldr	r3, [pc, #84]	@ (8017104 <tcp_input+0x280>)
 80170ae:	22fb      	movs	r2, #251	@ 0xfb
 80170b0:	4924      	ldr	r1, [pc, #144]	@ (8017144 <tcp_input+0x2c0>)
 80170b2:	4816      	ldr	r0, [pc, #88]	@ (801710c <tcp_input+0x288>)
 80170b4:	f008 fef6 	bl	801fea4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80170b8:	69bb      	ldr	r3, [r7, #24]
 80170ba:	7d1b      	ldrb	r3, [r3, #20]
 80170bc:	2b0a      	cmp	r3, #10
 80170be:	d105      	bne.n	80170cc <tcp_input+0x248>
 80170c0:	4b10      	ldr	r3, [pc, #64]	@ (8017104 <tcp_input+0x280>)
 80170c2:	22fc      	movs	r2, #252	@ 0xfc
 80170c4:	4920      	ldr	r1, [pc, #128]	@ (8017148 <tcp_input+0x2c4>)
 80170c6:	4811      	ldr	r0, [pc, #68]	@ (801710c <tcp_input+0x288>)
 80170c8:	f008 feec 	bl	801fea4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80170cc:	69bb      	ldr	r3, [r7, #24]
 80170ce:	7d1b      	ldrb	r3, [r3, #20]
 80170d0:	2b01      	cmp	r3, #1
 80170d2:	d105      	bne.n	80170e0 <tcp_input+0x25c>
 80170d4:	4b0b      	ldr	r3, [pc, #44]	@ (8017104 <tcp_input+0x280>)
 80170d6:	22fd      	movs	r2, #253	@ 0xfd
 80170d8:	491c      	ldr	r1, [pc, #112]	@ (801714c <tcp_input+0x2c8>)
 80170da:	480c      	ldr	r0, [pc, #48]	@ (801710c <tcp_input+0x288>)
 80170dc:	f008 fee2 	bl	801fea4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80170e0:	69bb      	ldr	r3, [r7, #24]
 80170e2:	7a1b      	ldrb	r3, [r3, #8]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d033      	beq.n	8017150 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80170e8:	69bb      	ldr	r3, [r7, #24]
 80170ea:	7a1a      	ldrb	r2, [r3, #8]
 80170ec:	4b09      	ldr	r3, [pc, #36]	@ (8017114 <tcp_input+0x290>)
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80170f4:	3301      	adds	r3, #1
 80170f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d029      	beq.n	8017150 <tcp_input+0x2cc>
      prev = pcb;
 80170fc:	69bb      	ldr	r3, [r7, #24]
 80170fe:	61fb      	str	r3, [r7, #28]
      continue;
 8017100:	e06b      	b.n	80171da <tcp_input+0x356>
 8017102:	bf00      	nop
 8017104:	080230c4 	.word	0x080230c4
 8017108:	080230f8 	.word	0x080230f8
 801710c:	08023110 	.word	0x08023110
 8017110:	200227c8 	.word	0x200227c8
 8017114:	2001f65c 	.word	0x2001f65c
 8017118:	200227cc 	.word	0x200227cc
 801711c:	200227d0 	.word	0x200227d0
 8017120:	200227ce 	.word	0x200227ce
 8017124:	08023138 	.word	0x08023138
 8017128:	08023148 	.word	0x08023148
 801712c:	08023154 	.word	0x08023154
 8017130:	200227d8 	.word	0x200227d8
 8017134:	200227dc 	.word	0x200227dc
 8017138:	200227e4 	.word	0x200227e4
 801713c:	200227e2 	.word	0x200227e2
 8017140:	200227a8 	.word	0x200227a8
 8017144:	08023174 	.word	0x08023174
 8017148:	0802319c 	.word	0x0802319c
 801714c:	080231c8 	.word	0x080231c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8017150:	69bb      	ldr	r3, [r7, #24]
 8017152:	8b1a      	ldrh	r2, [r3, #24]
 8017154:	4b72      	ldr	r3, [pc, #456]	@ (8017320 <tcp_input+0x49c>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	881b      	ldrh	r3, [r3, #0]
 801715a:	b29b      	uxth	r3, r3
 801715c:	429a      	cmp	r2, r3
 801715e:	d13a      	bne.n	80171d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017160:	69bb      	ldr	r3, [r7, #24]
 8017162:	8ada      	ldrh	r2, [r3, #22]
 8017164:	4b6e      	ldr	r3, [pc, #440]	@ (8017320 <tcp_input+0x49c>)
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	885b      	ldrh	r3, [r3, #2]
 801716a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801716c:	429a      	cmp	r2, r3
 801716e:	d132      	bne.n	80171d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017170:	69bb      	ldr	r3, [r7, #24]
 8017172:	685a      	ldr	r2, [r3, #4]
 8017174:	4b6b      	ldr	r3, [pc, #428]	@ (8017324 <tcp_input+0x4a0>)
 8017176:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017178:	429a      	cmp	r2, r3
 801717a:	d12c      	bne.n	80171d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	681a      	ldr	r2, [r3, #0]
 8017180:	4b68      	ldr	r3, [pc, #416]	@ (8017324 <tcp_input+0x4a0>)
 8017182:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017184:	429a      	cmp	r2, r3
 8017186:	d126      	bne.n	80171d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017188:	69bb      	ldr	r3, [r7, #24]
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	69ba      	ldr	r2, [r7, #24]
 801718e:	429a      	cmp	r2, r3
 8017190:	d106      	bne.n	80171a0 <tcp_input+0x31c>
 8017192:	4b65      	ldr	r3, [pc, #404]	@ (8017328 <tcp_input+0x4a4>)
 8017194:	f240 120d 	movw	r2, #269	@ 0x10d
 8017198:	4964      	ldr	r1, [pc, #400]	@ (801732c <tcp_input+0x4a8>)
 801719a:	4865      	ldr	r0, [pc, #404]	@ (8017330 <tcp_input+0x4ac>)
 801719c:	f008 fe82 	bl	801fea4 <iprintf>
      if (prev != NULL) {
 80171a0:	69fb      	ldr	r3, [r7, #28]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d00a      	beq.n	80171bc <tcp_input+0x338>
        prev->next = pcb->next;
 80171a6:	69bb      	ldr	r3, [r7, #24]
 80171a8:	68da      	ldr	r2, [r3, #12]
 80171aa:	69fb      	ldr	r3, [r7, #28]
 80171ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80171ae:	4b61      	ldr	r3, [pc, #388]	@ (8017334 <tcp_input+0x4b0>)
 80171b0:	681a      	ldr	r2, [r3, #0]
 80171b2:	69bb      	ldr	r3, [r7, #24]
 80171b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80171b6:	4a5f      	ldr	r2, [pc, #380]	@ (8017334 <tcp_input+0x4b0>)
 80171b8:	69bb      	ldr	r3, [r7, #24]
 80171ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80171bc:	69bb      	ldr	r3, [r7, #24]
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	69ba      	ldr	r2, [r7, #24]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d111      	bne.n	80171ea <tcp_input+0x366>
 80171c6:	4b58      	ldr	r3, [pc, #352]	@ (8017328 <tcp_input+0x4a4>)
 80171c8:	f240 1215 	movw	r2, #277	@ 0x115
 80171cc:	495a      	ldr	r1, [pc, #360]	@ (8017338 <tcp_input+0x4b4>)
 80171ce:	4858      	ldr	r0, [pc, #352]	@ (8017330 <tcp_input+0x4ac>)
 80171d0:	f008 fe68 	bl	801fea4 <iprintf>
      break;
 80171d4:	e009      	b.n	80171ea <tcp_input+0x366>
    }
    prev = pcb;
 80171d6:	69bb      	ldr	r3, [r7, #24]
 80171d8:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80171da:	69bb      	ldr	r3, [r7, #24]
 80171dc:	68db      	ldr	r3, [r3, #12]
 80171de:	61bb      	str	r3, [r7, #24]
 80171e0:	69bb      	ldr	r3, [r7, #24]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	f47f af5e 	bne.w	80170a4 <tcp_input+0x220>
 80171e8:	e000      	b.n	80171ec <tcp_input+0x368>
      break;
 80171ea:	bf00      	nop
  }

  if (pcb == NULL) {
 80171ec:	69bb      	ldr	r3, [r7, #24]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	f040 80aa 	bne.w	8017348 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80171f4:	4b51      	ldr	r3, [pc, #324]	@ (801733c <tcp_input+0x4b8>)
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	61bb      	str	r3, [r7, #24]
 80171fa:	e03f      	b.n	801727c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80171fc:	69bb      	ldr	r3, [r7, #24]
 80171fe:	7d1b      	ldrb	r3, [r3, #20]
 8017200:	2b0a      	cmp	r3, #10
 8017202:	d006      	beq.n	8017212 <tcp_input+0x38e>
 8017204:	4b48      	ldr	r3, [pc, #288]	@ (8017328 <tcp_input+0x4a4>)
 8017206:	f240 121f 	movw	r2, #287	@ 0x11f
 801720a:	494d      	ldr	r1, [pc, #308]	@ (8017340 <tcp_input+0x4bc>)
 801720c:	4848      	ldr	r0, [pc, #288]	@ (8017330 <tcp_input+0x4ac>)
 801720e:	f008 fe49 	bl	801fea4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017212:	69bb      	ldr	r3, [r7, #24]
 8017214:	7a1b      	ldrb	r3, [r3, #8]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d009      	beq.n	801722e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801721a:	69bb      	ldr	r3, [r7, #24]
 801721c:	7a1a      	ldrb	r2, [r3, #8]
 801721e:	4b41      	ldr	r3, [pc, #260]	@ (8017324 <tcp_input+0x4a0>)
 8017220:	685b      	ldr	r3, [r3, #4]
 8017222:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017226:	3301      	adds	r3, #1
 8017228:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801722a:	429a      	cmp	r2, r3
 801722c:	d122      	bne.n	8017274 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801722e:	69bb      	ldr	r3, [r7, #24]
 8017230:	8b1a      	ldrh	r2, [r3, #24]
 8017232:	4b3b      	ldr	r3, [pc, #236]	@ (8017320 <tcp_input+0x49c>)
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	881b      	ldrh	r3, [r3, #0]
 8017238:	b29b      	uxth	r3, r3
 801723a:	429a      	cmp	r2, r3
 801723c:	d11b      	bne.n	8017276 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801723e:	69bb      	ldr	r3, [r7, #24]
 8017240:	8ada      	ldrh	r2, [r3, #22]
 8017242:	4b37      	ldr	r3, [pc, #220]	@ (8017320 <tcp_input+0x49c>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	885b      	ldrh	r3, [r3, #2]
 8017248:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801724a:	429a      	cmp	r2, r3
 801724c:	d113      	bne.n	8017276 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801724e:	69bb      	ldr	r3, [r7, #24]
 8017250:	685a      	ldr	r2, [r3, #4]
 8017252:	4b34      	ldr	r3, [pc, #208]	@ (8017324 <tcp_input+0x4a0>)
 8017254:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017256:	429a      	cmp	r2, r3
 8017258:	d10d      	bne.n	8017276 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801725a:	69bb      	ldr	r3, [r7, #24]
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	4b31      	ldr	r3, [pc, #196]	@ (8017324 <tcp_input+0x4a0>)
 8017260:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017262:	429a      	cmp	r2, r3
 8017264:	d107      	bne.n	8017276 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017266:	69b8      	ldr	r0, [r7, #24]
 8017268:	f000 fb56 	bl	8017918 <tcp_timewait_input>
        }
        pbuf_free(p);
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f7fd fc9d 	bl	8014bac <pbuf_free>
        return;
 8017272:	e1fd      	b.n	8017670 <tcp_input+0x7ec>
        continue;
 8017274:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017276:	69bb      	ldr	r3, [r7, #24]
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	61bb      	str	r3, [r7, #24]
 801727c:	69bb      	ldr	r3, [r7, #24]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d1bc      	bne.n	80171fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017282:	2300      	movs	r3, #0
 8017284:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017286:	4b2f      	ldr	r3, [pc, #188]	@ (8017344 <tcp_input+0x4c0>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	617b      	str	r3, [r7, #20]
 801728c:	e02a      	b.n	80172e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801728e:	697b      	ldr	r3, [r7, #20]
 8017290:	7a1b      	ldrb	r3, [r3, #8]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d00c      	beq.n	80172b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017296:	697b      	ldr	r3, [r7, #20]
 8017298:	7a1a      	ldrb	r2, [r3, #8]
 801729a:	4b22      	ldr	r3, [pc, #136]	@ (8017324 <tcp_input+0x4a0>)
 801729c:	685b      	ldr	r3, [r3, #4]
 801729e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80172a2:	3301      	adds	r3, #1
 80172a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80172a6:	429a      	cmp	r2, r3
 80172a8:	d002      	beq.n	80172b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	61fb      	str	r3, [r7, #28]
        continue;
 80172ae:	e016      	b.n	80172de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	8ada      	ldrh	r2, [r3, #22]
 80172b4:	4b1a      	ldr	r3, [pc, #104]	@ (8017320 <tcp_input+0x49c>)
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	885b      	ldrh	r3, [r3, #2]
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	429a      	cmp	r2, r3
 80172be:	d10c      	bne.n	80172da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	4b17      	ldr	r3, [pc, #92]	@ (8017324 <tcp_input+0x4a0>)
 80172c6:	695b      	ldr	r3, [r3, #20]
 80172c8:	429a      	cmp	r2, r3
 80172ca:	d00f      	beq.n	80172ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d00d      	beq.n	80172ee <tcp_input+0x46a>
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d009      	beq.n	80172ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80172da:	697b      	ldr	r3, [r7, #20]
 80172dc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	68db      	ldr	r3, [r3, #12]
 80172e2:	617b      	str	r3, [r7, #20]
 80172e4:	697b      	ldr	r3, [r7, #20]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d1d1      	bne.n	801728e <tcp_input+0x40a>
 80172ea:	e000      	b.n	80172ee <tcp_input+0x46a>
            break;
 80172ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d029      	beq.n	8017348 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80172f4:	69fb      	ldr	r3, [r7, #28]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d00a      	beq.n	8017310 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	68da      	ldr	r2, [r3, #12]
 80172fe:	69fb      	ldr	r3, [r7, #28]
 8017300:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017302:	4b10      	ldr	r3, [pc, #64]	@ (8017344 <tcp_input+0x4c0>)
 8017304:	681a      	ldr	r2, [r3, #0]
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801730a:	4a0e      	ldr	r2, [pc, #56]	@ (8017344 <tcp_input+0x4c0>)
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017310:	6978      	ldr	r0, [r7, #20]
 8017312:	f000 fa03 	bl	801771c <tcp_listen_input>
      }
      pbuf_free(p);
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f7fd fc48 	bl	8014bac <pbuf_free>
      return;
 801731c:	e1a8      	b.n	8017670 <tcp_input+0x7ec>
 801731e:	bf00      	nop
 8017320:	200227c8 	.word	0x200227c8
 8017324:	2001f65c 	.word	0x2001f65c
 8017328:	080230c4 	.word	0x080230c4
 801732c:	080231f0 	.word	0x080231f0
 8017330:	08023110 	.word	0x08023110
 8017334:	200227a8 	.word	0x200227a8
 8017338:	0802321c 	.word	0x0802321c
 801733c:	200227ac 	.word	0x200227ac
 8017340:	08023248 	.word	0x08023248
 8017344:	200227a4 	.word	0x200227a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017348:	69bb      	ldr	r3, [r7, #24]
 801734a:	2b00      	cmp	r3, #0
 801734c:	f000 8158 	beq.w	8017600 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017350:	4b95      	ldr	r3, [pc, #596]	@ (80175a8 <tcp_input+0x724>)
 8017352:	2200      	movs	r2, #0
 8017354:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	891a      	ldrh	r2, [r3, #8]
 801735a:	4b93      	ldr	r3, [pc, #588]	@ (80175a8 <tcp_input+0x724>)
 801735c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801735e:	4a92      	ldr	r2, [pc, #584]	@ (80175a8 <tcp_input+0x724>)
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017364:	4b91      	ldr	r3, [pc, #580]	@ (80175ac <tcp_input+0x728>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	4a8f      	ldr	r2, [pc, #572]	@ (80175a8 <tcp_input+0x724>)
 801736a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801736c:	4b90      	ldr	r3, [pc, #576]	@ (80175b0 <tcp_input+0x72c>)
 801736e:	2200      	movs	r2, #0
 8017370:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017372:	4b90      	ldr	r3, [pc, #576]	@ (80175b4 <tcp_input+0x730>)
 8017374:	2200      	movs	r2, #0
 8017376:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017378:	4b8f      	ldr	r3, [pc, #572]	@ (80175b8 <tcp_input+0x734>)
 801737a:	2200      	movs	r2, #0
 801737c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801737e:	4b8f      	ldr	r3, [pc, #572]	@ (80175bc <tcp_input+0x738>)
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	f003 0308 	and.w	r3, r3, #8
 8017386:	2b00      	cmp	r3, #0
 8017388:	d006      	beq.n	8017398 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	7b5b      	ldrb	r3, [r3, #13]
 801738e:	f043 0301 	orr.w	r3, r3, #1
 8017392:	b2da      	uxtb	r2, r3
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017398:	69bb      	ldr	r3, [r7, #24]
 801739a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801739c:	2b00      	cmp	r3, #0
 801739e:	d017      	beq.n	80173d0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80173a0:	69b8      	ldr	r0, [r7, #24]
 80173a2:	f7ff f855 	bl	8016450 <tcp_process_refused_data>
 80173a6:	4603      	mov	r3, r0
 80173a8:	f113 0f0d 	cmn.w	r3, #13
 80173ac:	d007      	beq.n	80173be <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80173ae:	69bb      	ldr	r3, [r7, #24]
 80173b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d00c      	beq.n	80173d0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80173b6:	4b82      	ldr	r3, [pc, #520]	@ (80175c0 <tcp_input+0x73c>)
 80173b8:	881b      	ldrh	r3, [r3, #0]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d008      	beq.n	80173d0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80173be:	69bb      	ldr	r3, [r7, #24]
 80173c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	f040 80e3 	bne.w	801758e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80173c8:	69b8      	ldr	r0, [r7, #24]
 80173ca:	f003 fe6d 	bl	801b0a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80173ce:	e0de      	b.n	801758e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80173d0:	4a7c      	ldr	r2, [pc, #496]	@ (80175c4 <tcp_input+0x740>)
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80173d6:	69b8      	ldr	r0, [r7, #24]
 80173d8:	f000 fb18 	bl	8017a0c <tcp_process>
 80173dc:	4603      	mov	r3, r0
 80173de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80173e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80173e4:	f113 0f0d 	cmn.w	r3, #13
 80173e8:	f000 80d3 	beq.w	8017592 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80173ec:	4b71      	ldr	r3, [pc, #452]	@ (80175b4 <tcp_input+0x730>)
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	f003 0308 	and.w	r3, r3, #8
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d015      	beq.n	8017424 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80173f8:	69bb      	ldr	r3, [r7, #24]
 80173fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d008      	beq.n	8017414 <tcp_input+0x590>
 8017402:	69bb      	ldr	r3, [r7, #24]
 8017404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017408:	69ba      	ldr	r2, [r7, #24]
 801740a:	6912      	ldr	r2, [r2, #16]
 801740c:	f06f 010d 	mvn.w	r1, #13
 8017410:	4610      	mov	r0, r2
 8017412:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017414:	69b9      	ldr	r1, [r7, #24]
 8017416:	486c      	ldr	r0, [pc, #432]	@ (80175c8 <tcp_input+0x744>)
 8017418:	f7ff fbb6 	bl	8016b88 <tcp_pcb_remove>
        tcp_free(pcb);
 801741c:	69b8      	ldr	r0, [r7, #24]
 801741e:	f7fd fe81 	bl	8015124 <tcp_free>
 8017422:	e0da      	b.n	80175da <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8017424:	2300      	movs	r3, #0
 8017426:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017428:	4b63      	ldr	r3, [pc, #396]	@ (80175b8 <tcp_input+0x734>)
 801742a:	881b      	ldrh	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d01d      	beq.n	801746c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017430:	4b61      	ldr	r3, [pc, #388]	@ (80175b8 <tcp_input+0x734>)
 8017432:	881b      	ldrh	r3, [r3, #0]
 8017434:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017436:	69bb      	ldr	r3, [r7, #24]
 8017438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801743c:	2b00      	cmp	r3, #0
 801743e:	d00a      	beq.n	8017456 <tcp_input+0x5d2>
 8017440:	69bb      	ldr	r3, [r7, #24]
 8017442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017446:	69ba      	ldr	r2, [r7, #24]
 8017448:	6910      	ldr	r0, [r2, #16]
 801744a:	89fa      	ldrh	r2, [r7, #14]
 801744c:	69b9      	ldr	r1, [r7, #24]
 801744e:	4798      	blx	r3
 8017450:	4603      	mov	r3, r0
 8017452:	74fb      	strb	r3, [r7, #19]
 8017454:	e001      	b.n	801745a <tcp_input+0x5d6>
 8017456:	2300      	movs	r3, #0
 8017458:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801745a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801745e:	f113 0f0d 	cmn.w	r3, #13
 8017462:	f000 8098 	beq.w	8017596 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017466:	4b54      	ldr	r3, [pc, #336]	@ (80175b8 <tcp_input+0x734>)
 8017468:	2200      	movs	r2, #0
 801746a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801746c:	69b8      	ldr	r0, [r7, #24]
 801746e:	f000 f915 	bl	801769c <tcp_input_delayed_close>
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	f040 8090 	bne.w	801759a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801747a:	4b4d      	ldr	r3, [pc, #308]	@ (80175b0 <tcp_input+0x72c>)
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d041      	beq.n	8017506 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017482:	69bb      	ldr	r3, [r7, #24]
 8017484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017486:	2b00      	cmp	r3, #0
 8017488:	d006      	beq.n	8017498 <tcp_input+0x614>
 801748a:	4b50      	ldr	r3, [pc, #320]	@ (80175cc <tcp_input+0x748>)
 801748c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017490:	494f      	ldr	r1, [pc, #316]	@ (80175d0 <tcp_input+0x74c>)
 8017492:	4850      	ldr	r0, [pc, #320]	@ (80175d4 <tcp_input+0x750>)
 8017494:	f008 fd06 	bl	801fea4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017498:	69bb      	ldr	r3, [r7, #24]
 801749a:	8b5b      	ldrh	r3, [r3, #26]
 801749c:	f003 0310 	and.w	r3, r3, #16
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d008      	beq.n	80174b6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80174a4:	4b42      	ldr	r3, [pc, #264]	@ (80175b0 <tcp_input+0x72c>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7fd fb7f 	bl	8014bac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80174ae:	69b8      	ldr	r0, [r7, #24]
 80174b0:	f7fe f97c 	bl	80157ac <tcp_abort>
            goto aborted;
 80174b4:	e091      	b.n	80175da <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80174b6:	69bb      	ldr	r3, [r7, #24]
 80174b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d00c      	beq.n	80174da <tcp_input+0x656>
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80174c6:	69bb      	ldr	r3, [r7, #24]
 80174c8:	6918      	ldr	r0, [r3, #16]
 80174ca:	4b39      	ldr	r3, [pc, #228]	@ (80175b0 <tcp_input+0x72c>)
 80174cc:	681a      	ldr	r2, [r3, #0]
 80174ce:	2300      	movs	r3, #0
 80174d0:	69b9      	ldr	r1, [r7, #24]
 80174d2:	47a0      	blx	r4
 80174d4:	4603      	mov	r3, r0
 80174d6:	74fb      	strb	r3, [r7, #19]
 80174d8:	e008      	b.n	80174ec <tcp_input+0x668>
 80174da:	4b35      	ldr	r3, [pc, #212]	@ (80175b0 <tcp_input+0x72c>)
 80174dc:	681a      	ldr	r2, [r3, #0]
 80174de:	2300      	movs	r3, #0
 80174e0:	69b9      	ldr	r1, [r7, #24]
 80174e2:	2000      	movs	r0, #0
 80174e4:	f7ff f88a 	bl	80165fc <tcp_recv_null>
 80174e8:	4603      	mov	r3, r0
 80174ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80174ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174f0:	f113 0f0d 	cmn.w	r3, #13
 80174f4:	d053      	beq.n	801759e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80174f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d003      	beq.n	8017506 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80174fe:	4b2c      	ldr	r3, [pc, #176]	@ (80175b0 <tcp_input+0x72c>)
 8017500:	681a      	ldr	r2, [r3, #0]
 8017502:	69bb      	ldr	r3, [r7, #24]
 8017504:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017506:	4b2b      	ldr	r3, [pc, #172]	@ (80175b4 <tcp_input+0x730>)
 8017508:	781b      	ldrb	r3, [r3, #0]
 801750a:	f003 0320 	and.w	r3, r3, #32
 801750e:	2b00      	cmp	r3, #0
 8017510:	d030      	beq.n	8017574 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8017512:	69bb      	ldr	r3, [r7, #24]
 8017514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017516:	2b00      	cmp	r3, #0
 8017518:	d009      	beq.n	801752e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801751a:	69bb      	ldr	r3, [r7, #24]
 801751c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801751e:	7b5a      	ldrb	r2, [r3, #13]
 8017520:	69bb      	ldr	r3, [r7, #24]
 8017522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017524:	f042 0220 	orr.w	r2, r2, #32
 8017528:	b2d2      	uxtb	r2, r2
 801752a:	735a      	strb	r2, [r3, #13]
 801752c:	e022      	b.n	8017574 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801752e:	69bb      	ldr	r3, [r7, #24]
 8017530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017532:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017536:	d005      	beq.n	8017544 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801753c:	3301      	adds	r3, #1
 801753e:	b29a      	uxth	r2, r3
 8017540:	69bb      	ldr	r3, [r7, #24]
 8017542:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017544:	69bb      	ldr	r3, [r7, #24]
 8017546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801754a:	2b00      	cmp	r3, #0
 801754c:	d00b      	beq.n	8017566 <tcp_input+0x6e2>
 801754e:	69bb      	ldr	r3, [r7, #24]
 8017550:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017554:	69bb      	ldr	r3, [r7, #24]
 8017556:	6918      	ldr	r0, [r3, #16]
 8017558:	2300      	movs	r3, #0
 801755a:	2200      	movs	r2, #0
 801755c:	69b9      	ldr	r1, [r7, #24]
 801755e:	47a0      	blx	r4
 8017560:	4603      	mov	r3, r0
 8017562:	74fb      	strb	r3, [r7, #19]
 8017564:	e001      	b.n	801756a <tcp_input+0x6e6>
 8017566:	2300      	movs	r3, #0
 8017568:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801756a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801756e:	f113 0f0d 	cmn.w	r3, #13
 8017572:	d016      	beq.n	80175a2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017574:	4b13      	ldr	r3, [pc, #76]	@ (80175c4 <tcp_input+0x740>)
 8017576:	2200      	movs	r2, #0
 8017578:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801757a:	69b8      	ldr	r0, [r7, #24]
 801757c:	f000 f88e 	bl	801769c <tcp_input_delayed_close>
 8017580:	4603      	mov	r3, r0
 8017582:	2b00      	cmp	r3, #0
 8017584:	d128      	bne.n	80175d8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017586:	69b8      	ldr	r0, [r7, #24]
 8017588:	f002 ff7c 	bl	801a484 <tcp_output>
 801758c:	e025      	b.n	80175da <tcp_input+0x756>
        goto aborted;
 801758e:	bf00      	nop
 8017590:	e023      	b.n	80175da <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017592:	bf00      	nop
 8017594:	e021      	b.n	80175da <tcp_input+0x756>
              goto aborted;
 8017596:	bf00      	nop
 8017598:	e01f      	b.n	80175da <tcp_input+0x756>
          goto aborted;
 801759a:	bf00      	nop
 801759c:	e01d      	b.n	80175da <tcp_input+0x756>
            goto aborted;
 801759e:	bf00      	nop
 80175a0:	e01b      	b.n	80175da <tcp_input+0x756>
              goto aborted;
 80175a2:	bf00      	nop
 80175a4:	e019      	b.n	80175da <tcp_input+0x756>
 80175a6:	bf00      	nop
 80175a8:	200227b4 	.word	0x200227b4
 80175ac:	200227c8 	.word	0x200227c8
 80175b0:	200227e8 	.word	0x200227e8
 80175b4:	200227e5 	.word	0x200227e5
 80175b8:	200227e0 	.word	0x200227e0
 80175bc:	200227e4 	.word	0x200227e4
 80175c0:	200227e2 	.word	0x200227e2
 80175c4:	200227ec 	.word	0x200227ec
 80175c8:	200227a8 	.word	0x200227a8
 80175cc:	080230c4 	.word	0x080230c4
 80175d0:	08023278 	.word	0x08023278
 80175d4:	08023110 	.word	0x08023110
          goto aborted;
 80175d8:	bf00      	nop
    tcp_input_pcb = NULL;
 80175da:	4b27      	ldr	r3, [pc, #156]	@ (8017678 <tcp_input+0x7f4>)
 80175dc:	2200      	movs	r2, #0
 80175de:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80175e0:	4b26      	ldr	r3, [pc, #152]	@ (801767c <tcp_input+0x7f8>)
 80175e2:	2200      	movs	r2, #0
 80175e4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80175e6:	4b26      	ldr	r3, [pc, #152]	@ (8017680 <tcp_input+0x7fc>)
 80175e8:	685b      	ldr	r3, [r3, #4]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d03f      	beq.n	801766e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80175ee:	4b24      	ldr	r3, [pc, #144]	@ (8017680 <tcp_input+0x7fc>)
 80175f0:	685b      	ldr	r3, [r3, #4]
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7fd fada 	bl	8014bac <pbuf_free>
      inseg.p = NULL;
 80175f8:	4b21      	ldr	r3, [pc, #132]	@ (8017680 <tcp_input+0x7fc>)
 80175fa:	2200      	movs	r2, #0
 80175fc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80175fe:	e036      	b.n	801766e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017600:	4b20      	ldr	r3, [pc, #128]	@ (8017684 <tcp_input+0x800>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	899b      	ldrh	r3, [r3, #12]
 8017606:	b29b      	uxth	r3, r3
 8017608:	4618      	mov	r0, r3
 801760a:	f7fb fdeb 	bl	80131e4 <lwip_htons>
 801760e:	4603      	mov	r3, r0
 8017610:	b2db      	uxtb	r3, r3
 8017612:	f003 0304 	and.w	r3, r3, #4
 8017616:	2b00      	cmp	r3, #0
 8017618:	d118      	bne.n	801764c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801761a:	4b1b      	ldr	r3, [pc, #108]	@ (8017688 <tcp_input+0x804>)
 801761c:	6819      	ldr	r1, [r3, #0]
 801761e:	4b1b      	ldr	r3, [pc, #108]	@ (801768c <tcp_input+0x808>)
 8017620:	881b      	ldrh	r3, [r3, #0]
 8017622:	461a      	mov	r2, r3
 8017624:	4b1a      	ldr	r3, [pc, #104]	@ (8017690 <tcp_input+0x80c>)
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801762a:	4b16      	ldr	r3, [pc, #88]	@ (8017684 <tcp_input+0x800>)
 801762c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801762e:	885b      	ldrh	r3, [r3, #2]
 8017630:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017632:	4a14      	ldr	r2, [pc, #80]	@ (8017684 <tcp_input+0x800>)
 8017634:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017636:	8812      	ldrh	r2, [r2, #0]
 8017638:	b292      	uxth	r2, r2
 801763a:	9202      	str	r2, [sp, #8]
 801763c:	9301      	str	r3, [sp, #4]
 801763e:	4b15      	ldr	r3, [pc, #84]	@ (8017694 <tcp_input+0x810>)
 8017640:	9300      	str	r3, [sp, #0]
 8017642:	4b15      	ldr	r3, [pc, #84]	@ (8017698 <tcp_input+0x814>)
 8017644:	4602      	mov	r2, r0
 8017646:	2000      	movs	r0, #0
 8017648:	f003 fcdc 	bl	801b004 <tcp_rst>
    pbuf_free(p);
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7fd faad 	bl	8014bac <pbuf_free>
  return;
 8017652:	e00c      	b.n	801766e <tcp_input+0x7ea>
    goto dropped;
 8017654:	bf00      	nop
 8017656:	e006      	b.n	8017666 <tcp_input+0x7e2>
    goto dropped;
 8017658:	bf00      	nop
 801765a:	e004      	b.n	8017666 <tcp_input+0x7e2>
    goto dropped;
 801765c:	bf00      	nop
 801765e:	e002      	b.n	8017666 <tcp_input+0x7e2>
      goto dropped;
 8017660:	bf00      	nop
 8017662:	e000      	b.n	8017666 <tcp_input+0x7e2>
      goto dropped;
 8017664:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f7fd faa0 	bl	8014bac <pbuf_free>
 801766c:	e000      	b.n	8017670 <tcp_input+0x7ec>
  return;
 801766e:	bf00      	nop
}
 8017670:	3724      	adds	r7, #36	@ 0x24
 8017672:	46bd      	mov	sp, r7
 8017674:	bd90      	pop	{r4, r7, pc}
 8017676:	bf00      	nop
 8017678:	200227ec 	.word	0x200227ec
 801767c:	200227e8 	.word	0x200227e8
 8017680:	200227b4 	.word	0x200227b4
 8017684:	200227c8 	.word	0x200227c8
 8017688:	200227dc 	.word	0x200227dc
 801768c:	200227e2 	.word	0x200227e2
 8017690:	200227d8 	.word	0x200227d8
 8017694:	2001f66c 	.word	0x2001f66c
 8017698:	2001f670 	.word	0x2001f670

0801769c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d106      	bne.n	80176b8 <tcp_input_delayed_close+0x1c>
 80176aa:	4b17      	ldr	r3, [pc, #92]	@ (8017708 <tcp_input_delayed_close+0x6c>)
 80176ac:	f240 225a 	movw	r2, #602	@ 0x25a
 80176b0:	4916      	ldr	r1, [pc, #88]	@ (801770c <tcp_input_delayed_close+0x70>)
 80176b2:	4817      	ldr	r0, [pc, #92]	@ (8017710 <tcp_input_delayed_close+0x74>)
 80176b4:	f008 fbf6 	bl	801fea4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80176b8:	4b16      	ldr	r3, [pc, #88]	@ (8017714 <tcp_input_delayed_close+0x78>)
 80176ba:	781b      	ldrb	r3, [r3, #0]
 80176bc:	f003 0310 	and.w	r3, r3, #16
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d01c      	beq.n	80176fe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	8b5b      	ldrh	r3, [r3, #26]
 80176c8:	f003 0310 	and.w	r3, r3, #16
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d10d      	bne.n	80176ec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d008      	beq.n	80176ec <tcp_input_delayed_close+0x50>
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	6912      	ldr	r2, [r2, #16]
 80176e4:	f06f 010e 	mvn.w	r1, #14
 80176e8:	4610      	mov	r0, r2
 80176ea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80176ec:	6879      	ldr	r1, [r7, #4]
 80176ee:	480a      	ldr	r0, [pc, #40]	@ (8017718 <tcp_input_delayed_close+0x7c>)
 80176f0:	f7ff fa4a 	bl	8016b88 <tcp_pcb_remove>
    tcp_free(pcb);
 80176f4:	6878      	ldr	r0, [r7, #4]
 80176f6:	f7fd fd15 	bl	8015124 <tcp_free>
    return 1;
 80176fa:	2301      	movs	r3, #1
 80176fc:	e000      	b.n	8017700 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80176fe:	2300      	movs	r3, #0
}
 8017700:	4618      	mov	r0, r3
 8017702:	3708      	adds	r7, #8
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}
 8017708:	080230c4 	.word	0x080230c4
 801770c:	08023294 	.word	0x08023294
 8017710:	08023110 	.word	0x08023110
 8017714:	200227e5 	.word	0x200227e5
 8017718:	200227a8 	.word	0x200227a8

0801771c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801771c:	b590      	push	{r4, r7, lr}
 801771e:	b08b      	sub	sp, #44	@ 0x2c
 8017720:	af04      	add	r7, sp, #16
 8017722:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017724:	4b6f      	ldr	r3, [pc, #444]	@ (80178e4 <tcp_listen_input+0x1c8>)
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	f003 0304 	and.w	r3, r3, #4
 801772c:	2b00      	cmp	r3, #0
 801772e:	f040 80d2 	bne.w	80178d6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d106      	bne.n	8017746 <tcp_listen_input+0x2a>
 8017738:	4b6b      	ldr	r3, [pc, #428]	@ (80178e8 <tcp_listen_input+0x1cc>)
 801773a:	f240 2281 	movw	r2, #641	@ 0x281
 801773e:	496b      	ldr	r1, [pc, #428]	@ (80178ec <tcp_listen_input+0x1d0>)
 8017740:	486b      	ldr	r0, [pc, #428]	@ (80178f0 <tcp_listen_input+0x1d4>)
 8017742:	f008 fbaf 	bl	801fea4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017746:	4b67      	ldr	r3, [pc, #412]	@ (80178e4 <tcp_listen_input+0x1c8>)
 8017748:	781b      	ldrb	r3, [r3, #0]
 801774a:	f003 0310 	and.w	r3, r3, #16
 801774e:	2b00      	cmp	r3, #0
 8017750:	d019      	beq.n	8017786 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017752:	4b68      	ldr	r3, [pc, #416]	@ (80178f4 <tcp_listen_input+0x1d8>)
 8017754:	6819      	ldr	r1, [r3, #0]
 8017756:	4b68      	ldr	r3, [pc, #416]	@ (80178f8 <tcp_listen_input+0x1dc>)
 8017758:	881b      	ldrh	r3, [r3, #0]
 801775a:	461a      	mov	r2, r3
 801775c:	4b67      	ldr	r3, [pc, #412]	@ (80178fc <tcp_listen_input+0x1e0>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017762:	4b67      	ldr	r3, [pc, #412]	@ (8017900 <tcp_listen_input+0x1e4>)
 8017764:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017766:	885b      	ldrh	r3, [r3, #2]
 8017768:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801776a:	4a65      	ldr	r2, [pc, #404]	@ (8017900 <tcp_listen_input+0x1e4>)
 801776c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801776e:	8812      	ldrh	r2, [r2, #0]
 8017770:	b292      	uxth	r2, r2
 8017772:	9202      	str	r2, [sp, #8]
 8017774:	9301      	str	r3, [sp, #4]
 8017776:	4b63      	ldr	r3, [pc, #396]	@ (8017904 <tcp_listen_input+0x1e8>)
 8017778:	9300      	str	r3, [sp, #0]
 801777a:	4b63      	ldr	r3, [pc, #396]	@ (8017908 <tcp_listen_input+0x1ec>)
 801777c:	4602      	mov	r2, r0
 801777e:	6878      	ldr	r0, [r7, #4]
 8017780:	f003 fc40 	bl	801b004 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017784:	e0a9      	b.n	80178da <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8017786:	4b57      	ldr	r3, [pc, #348]	@ (80178e4 <tcp_listen_input+0x1c8>)
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	f003 0302 	and.w	r3, r3, #2
 801778e:	2b00      	cmp	r3, #0
 8017790:	f000 80a3 	beq.w	80178da <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	7d5b      	ldrb	r3, [r3, #21]
 8017798:	4618      	mov	r0, r3
 801779a:	f7ff f853 	bl	8016844 <tcp_alloc>
 801779e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d111      	bne.n	80177ca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	699b      	ldr	r3, [r3, #24]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d00a      	beq.n	80177c4 <tcp_listen_input+0xa8>
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	699b      	ldr	r3, [r3, #24]
 80177b2:	687a      	ldr	r2, [r7, #4]
 80177b4:	6910      	ldr	r0, [r2, #16]
 80177b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80177ba:	2100      	movs	r1, #0
 80177bc:	4798      	blx	r3
 80177be:	4603      	mov	r3, r0
 80177c0:	73bb      	strb	r3, [r7, #14]
      return;
 80177c2:	e08b      	b.n	80178dc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80177c4:	23f0      	movs	r3, #240	@ 0xf0
 80177c6:	73bb      	strb	r3, [r7, #14]
      return;
 80177c8:	e088      	b.n	80178dc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80177ca:	4b50      	ldr	r3, [pc, #320]	@ (801790c <tcp_listen_input+0x1f0>)
 80177cc:	695a      	ldr	r2, [r3, #20]
 80177ce:	697b      	ldr	r3, [r7, #20]
 80177d0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80177d2:	4b4e      	ldr	r3, [pc, #312]	@ (801790c <tcp_listen_input+0x1f0>)
 80177d4:	691a      	ldr	r2, [r3, #16]
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	8ada      	ldrh	r2, [r3, #22]
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80177e2:	4b47      	ldr	r3, [pc, #284]	@ (8017900 <tcp_listen_input+0x1e4>)
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	881b      	ldrh	r3, [r3, #0]
 80177e8:	b29a      	uxth	r2, r3
 80177ea:	697b      	ldr	r3, [r7, #20]
 80177ec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2203      	movs	r2, #3
 80177f2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80177f4:	4b41      	ldr	r3, [pc, #260]	@ (80178fc <tcp_listen_input+0x1e0>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	1c5a      	adds	r2, r3, #1
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8017806:	6978      	ldr	r0, [r7, #20]
 8017808:	f7ff fa52 	bl	8016cb0 <tcp_next_iss>
 801780c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	693a      	ldr	r2, [r7, #16]
 8017812:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8017814:	697b      	ldr	r3, [r7, #20]
 8017816:	693a      	ldr	r2, [r7, #16]
 8017818:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	693a      	ldr	r2, [r7, #16]
 801781e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	693a      	ldr	r2, [r7, #16]
 8017824:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017826:	4b35      	ldr	r3, [pc, #212]	@ (80178fc <tcp_listen_input+0x1e0>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	1e5a      	subs	r2, r3, #1
 801782c:	697b      	ldr	r3, [r7, #20]
 801782e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	691a      	ldr	r2, [r3, #16]
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	687a      	ldr	r2, [r7, #4]
 801783c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	7a5b      	ldrb	r3, [r3, #9]
 8017842:	f003 030c 	and.w	r3, r3, #12
 8017846:	b2da      	uxtb	r2, r3
 8017848:	697b      	ldr	r3, [r7, #20]
 801784a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	7a1a      	ldrb	r2, [r3, #8]
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017854:	4b2e      	ldr	r3, [pc, #184]	@ (8017910 <tcp_listen_input+0x1f4>)
 8017856:	681a      	ldr	r2, [r3, #0]
 8017858:	697b      	ldr	r3, [r7, #20]
 801785a:	60da      	str	r2, [r3, #12]
 801785c:	4a2c      	ldr	r2, [pc, #176]	@ (8017910 <tcp_listen_input+0x1f4>)
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	6013      	str	r3, [r2, #0]
 8017862:	f003 fd91 	bl	801b388 <tcp_timer_needed>
 8017866:	4b2b      	ldr	r3, [pc, #172]	@ (8017914 <tcp_listen_input+0x1f8>)
 8017868:	2201      	movs	r2, #1
 801786a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801786c:	6978      	ldr	r0, [r7, #20]
 801786e:	f001 fd8b 	bl	8019388 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017872:	4b23      	ldr	r3, [pc, #140]	@ (8017900 <tcp_listen_input+0x1e4>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	89db      	ldrh	r3, [r3, #14]
 8017878:	b29a      	uxth	r2, r3
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017880:	697b      	ldr	r3, [r7, #20]
 8017882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017890:	697b      	ldr	r3, [r7, #20]
 8017892:	3304      	adds	r3, #4
 8017894:	4618      	mov	r0, r3
 8017896:	f006 f801 	bl	801d89c <ip4_route>
 801789a:	4601      	mov	r1, r0
 801789c:	697b      	ldr	r3, [r7, #20]
 801789e:	3304      	adds	r3, #4
 80178a0:	461a      	mov	r2, r3
 80178a2:	4620      	mov	r0, r4
 80178a4:	f7ff fa2a 	bl	8016cfc <tcp_eff_send_mss_netif>
 80178a8:	4603      	mov	r3, r0
 80178aa:	461a      	mov	r2, r3
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80178b0:	2112      	movs	r1, #18
 80178b2:	6978      	ldr	r0, [r7, #20]
 80178b4:	f002 fcf8 	bl	801a2a8 <tcp_enqueue_flags>
 80178b8:	4603      	mov	r3, r0
 80178ba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80178bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d004      	beq.n	80178ce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80178c4:	2100      	movs	r1, #0
 80178c6:	6978      	ldr	r0, [r7, #20]
 80178c8:	f7fd feb2 	bl	8015630 <tcp_abandon>
      return;
 80178cc:	e006      	b.n	80178dc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80178ce:	6978      	ldr	r0, [r7, #20]
 80178d0:	f002 fdd8 	bl	801a484 <tcp_output>
  return;
 80178d4:	e001      	b.n	80178da <tcp_listen_input+0x1be>
    return;
 80178d6:	bf00      	nop
 80178d8:	e000      	b.n	80178dc <tcp_listen_input+0x1c0>
  return;
 80178da:	bf00      	nop
}
 80178dc:	371c      	adds	r7, #28
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd90      	pop	{r4, r7, pc}
 80178e2:	bf00      	nop
 80178e4:	200227e4 	.word	0x200227e4
 80178e8:	080230c4 	.word	0x080230c4
 80178ec:	080232bc 	.word	0x080232bc
 80178f0:	08023110 	.word	0x08023110
 80178f4:	200227dc 	.word	0x200227dc
 80178f8:	200227e2 	.word	0x200227e2
 80178fc:	200227d8 	.word	0x200227d8
 8017900:	200227c8 	.word	0x200227c8
 8017904:	2001f66c 	.word	0x2001f66c
 8017908:	2001f670 	.word	0x2001f670
 801790c:	2001f65c 	.word	0x2001f65c
 8017910:	200227a8 	.word	0x200227a8
 8017914:	200227b0 	.word	0x200227b0

08017918 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b086      	sub	sp, #24
 801791c:	af04      	add	r7, sp, #16
 801791e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017920:	4b2f      	ldr	r3, [pc, #188]	@ (80179e0 <tcp_timewait_input+0xc8>)
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	f003 0304 	and.w	r3, r3, #4
 8017928:	2b00      	cmp	r3, #0
 801792a:	d153      	bne.n	80179d4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d106      	bne.n	8017940 <tcp_timewait_input+0x28>
 8017932:	4b2c      	ldr	r3, [pc, #176]	@ (80179e4 <tcp_timewait_input+0xcc>)
 8017934:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017938:	492b      	ldr	r1, [pc, #172]	@ (80179e8 <tcp_timewait_input+0xd0>)
 801793a:	482c      	ldr	r0, [pc, #176]	@ (80179ec <tcp_timewait_input+0xd4>)
 801793c:	f008 fab2 	bl	801fea4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017940:	4b27      	ldr	r3, [pc, #156]	@ (80179e0 <tcp_timewait_input+0xc8>)
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	f003 0302 	and.w	r3, r3, #2
 8017948:	2b00      	cmp	r3, #0
 801794a:	d02a      	beq.n	80179a2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801794c:	4b28      	ldr	r3, [pc, #160]	@ (80179f0 <tcp_timewait_input+0xd8>)
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017954:	1ad3      	subs	r3, r2, r3
 8017956:	2b00      	cmp	r3, #0
 8017958:	db2d      	blt.n	80179b6 <tcp_timewait_input+0x9e>
 801795a:	4b25      	ldr	r3, [pc, #148]	@ (80179f0 <tcp_timewait_input+0xd8>)
 801795c:	681a      	ldr	r2, [r3, #0]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017962:	6879      	ldr	r1, [r7, #4]
 8017964:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017966:	440b      	add	r3, r1
 8017968:	1ad3      	subs	r3, r2, r3
 801796a:	2b00      	cmp	r3, #0
 801796c:	dc23      	bgt.n	80179b6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801796e:	4b21      	ldr	r3, [pc, #132]	@ (80179f4 <tcp_timewait_input+0xdc>)
 8017970:	6819      	ldr	r1, [r3, #0]
 8017972:	4b21      	ldr	r3, [pc, #132]	@ (80179f8 <tcp_timewait_input+0xe0>)
 8017974:	881b      	ldrh	r3, [r3, #0]
 8017976:	461a      	mov	r2, r3
 8017978:	4b1d      	ldr	r3, [pc, #116]	@ (80179f0 <tcp_timewait_input+0xd8>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801797e:	4b1f      	ldr	r3, [pc, #124]	@ (80179fc <tcp_timewait_input+0xe4>)
 8017980:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017982:	885b      	ldrh	r3, [r3, #2]
 8017984:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017986:	4a1d      	ldr	r2, [pc, #116]	@ (80179fc <tcp_timewait_input+0xe4>)
 8017988:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801798a:	8812      	ldrh	r2, [r2, #0]
 801798c:	b292      	uxth	r2, r2
 801798e:	9202      	str	r2, [sp, #8]
 8017990:	9301      	str	r3, [sp, #4]
 8017992:	4b1b      	ldr	r3, [pc, #108]	@ (8017a00 <tcp_timewait_input+0xe8>)
 8017994:	9300      	str	r3, [sp, #0]
 8017996:	4b1b      	ldr	r3, [pc, #108]	@ (8017a04 <tcp_timewait_input+0xec>)
 8017998:	4602      	mov	r2, r0
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f003 fb32 	bl	801b004 <tcp_rst>
      return;
 80179a0:	e01b      	b.n	80179da <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80179a2:	4b0f      	ldr	r3, [pc, #60]	@ (80179e0 <tcp_timewait_input+0xc8>)
 80179a4:	781b      	ldrb	r3, [r3, #0]
 80179a6:	f003 0301 	and.w	r3, r3, #1
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d003      	beq.n	80179b6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80179ae:	4b16      	ldr	r3, [pc, #88]	@ (8017a08 <tcp_timewait_input+0xf0>)
 80179b0:	681a      	ldr	r2, [r3, #0]
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80179b6:	4b10      	ldr	r3, [pc, #64]	@ (80179f8 <tcp_timewait_input+0xe0>)
 80179b8:	881b      	ldrh	r3, [r3, #0]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d00c      	beq.n	80179d8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	8b5b      	ldrh	r3, [r3, #26]
 80179c2:	f043 0302 	orr.w	r3, r3, #2
 80179c6:	b29a      	uxth	r2, r3
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f002 fd59 	bl	801a484 <tcp_output>
  }
  return;
 80179d2:	e001      	b.n	80179d8 <tcp_timewait_input+0xc0>
    return;
 80179d4:	bf00      	nop
 80179d6:	e000      	b.n	80179da <tcp_timewait_input+0xc2>
  return;
 80179d8:	bf00      	nop
}
 80179da:	3708      	adds	r7, #8
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}
 80179e0:	200227e4 	.word	0x200227e4
 80179e4:	080230c4 	.word	0x080230c4
 80179e8:	080232dc 	.word	0x080232dc
 80179ec:	08023110 	.word	0x08023110
 80179f0:	200227d8 	.word	0x200227d8
 80179f4:	200227dc 	.word	0x200227dc
 80179f8:	200227e2 	.word	0x200227e2
 80179fc:	200227c8 	.word	0x200227c8
 8017a00:	2001f66c 	.word	0x2001f66c
 8017a04:	2001f670 	.word	0x2001f670
 8017a08:	2002279c 	.word	0x2002279c

08017a0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017a0c:	b590      	push	{r4, r7, lr}
 8017a0e:	b08d      	sub	sp, #52	@ 0x34
 8017a10:	af04      	add	r7, sp, #16
 8017a12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d106      	bne.n	8017a30 <tcp_process+0x24>
 8017a22:	4b9d      	ldr	r3, [pc, #628]	@ (8017c98 <tcp_process+0x28c>)
 8017a24:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8017a28:	499c      	ldr	r1, [pc, #624]	@ (8017c9c <tcp_process+0x290>)
 8017a2a:	489d      	ldr	r0, [pc, #628]	@ (8017ca0 <tcp_process+0x294>)
 8017a2c:	f008 fa3a 	bl	801fea4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017a30:	4b9c      	ldr	r3, [pc, #624]	@ (8017ca4 <tcp_process+0x298>)
 8017a32:	781b      	ldrb	r3, [r3, #0]
 8017a34:	f003 0304 	and.w	r3, r3, #4
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d04e      	beq.n	8017ada <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	7d1b      	ldrb	r3, [r3, #20]
 8017a40:	2b02      	cmp	r3, #2
 8017a42:	d108      	bne.n	8017a56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017a48:	4b97      	ldr	r3, [pc, #604]	@ (8017ca8 <tcp_process+0x29c>)
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	429a      	cmp	r2, r3
 8017a4e:	d123      	bne.n	8017a98 <tcp_process+0x8c>
        acceptable = 1;
 8017a50:	2301      	movs	r3, #1
 8017a52:	77fb      	strb	r3, [r7, #31]
 8017a54:	e020      	b.n	8017a98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a5a:	4b94      	ldr	r3, [pc, #592]	@ (8017cac <tcp_process+0x2a0>)
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	429a      	cmp	r2, r3
 8017a60:	d102      	bne.n	8017a68 <tcp_process+0x5c>
        acceptable = 1;
 8017a62:	2301      	movs	r3, #1
 8017a64:	77fb      	strb	r3, [r7, #31]
 8017a66:	e017      	b.n	8017a98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017a68:	4b90      	ldr	r3, [pc, #576]	@ (8017cac <tcp_process+0x2a0>)
 8017a6a:	681a      	ldr	r2, [r3, #0]
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a70:	1ad3      	subs	r3, r2, r3
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	db10      	blt.n	8017a98 <tcp_process+0x8c>
 8017a76:	4b8d      	ldr	r3, [pc, #564]	@ (8017cac <tcp_process+0x2a0>)
 8017a78:	681a      	ldr	r2, [r3, #0]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a7e:	6879      	ldr	r1, [r7, #4]
 8017a80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017a82:	440b      	add	r3, r1
 8017a84:	1ad3      	subs	r3, r2, r3
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	dc06      	bgt.n	8017a98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	8b5b      	ldrh	r3, [r3, #26]
 8017a8e:	f043 0302 	orr.w	r3, r3, #2
 8017a92:	b29a      	uxth	r2, r3
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017a98:	7ffb      	ldrb	r3, [r7, #31]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d01b      	beq.n	8017ad6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	7d1b      	ldrb	r3, [r3, #20]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d106      	bne.n	8017ab4 <tcp_process+0xa8>
 8017aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8017c98 <tcp_process+0x28c>)
 8017aa8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8017aac:	4980      	ldr	r1, [pc, #512]	@ (8017cb0 <tcp_process+0x2a4>)
 8017aae:	487c      	ldr	r0, [pc, #496]	@ (8017ca0 <tcp_process+0x294>)
 8017ab0:	f008 f9f8 	bl	801fea4 <iprintf>
      recv_flags |= TF_RESET;
 8017ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8017cb4 <tcp_process+0x2a8>)
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	f043 0308 	orr.w	r3, r3, #8
 8017abc:	b2da      	uxtb	r2, r3
 8017abe:	4b7d      	ldr	r3, [pc, #500]	@ (8017cb4 <tcp_process+0x2a8>)
 8017ac0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	8b5b      	ldrh	r3, [r3, #26]
 8017ac6:	f023 0301 	bic.w	r3, r3, #1
 8017aca:	b29a      	uxth	r2, r3
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017ad0:	f06f 030d 	mvn.w	r3, #13
 8017ad4:	e37a      	b.n	80181cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	e378      	b.n	80181cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017ada:	4b72      	ldr	r3, [pc, #456]	@ (8017ca4 <tcp_process+0x298>)
 8017adc:	781b      	ldrb	r3, [r3, #0]
 8017ade:	f003 0302 	and.w	r3, r3, #2
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d010      	beq.n	8017b08 <tcp_process+0xfc>
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	7d1b      	ldrb	r3, [r3, #20]
 8017aea:	2b02      	cmp	r3, #2
 8017aec:	d00c      	beq.n	8017b08 <tcp_process+0xfc>
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	7d1b      	ldrb	r3, [r3, #20]
 8017af2:	2b03      	cmp	r3, #3
 8017af4:	d008      	beq.n	8017b08 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	8b5b      	ldrh	r3, [r3, #26]
 8017afa:	f043 0302 	orr.w	r3, r3, #2
 8017afe:	b29a      	uxth	r2, r3
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017b04:	2300      	movs	r3, #0
 8017b06:	e361      	b.n	80181cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	8b5b      	ldrh	r3, [r3, #26]
 8017b0c:	f003 0310 	and.w	r3, r3, #16
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d103      	bne.n	8017b1c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017b14:	4b68      	ldr	r3, [pc, #416]	@ (8017cb8 <tcp_process+0x2ac>)
 8017b16:	681a      	ldr	r2, [r3, #0]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2200      	movs	r2, #0
 8017b28:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8017b2c:	6878      	ldr	r0, [r7, #4]
 8017b2e:	f001 fc2b 	bl	8019388 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	7d1b      	ldrb	r3, [r3, #20]
 8017b36:	3b02      	subs	r3, #2
 8017b38:	2b07      	cmp	r3, #7
 8017b3a:	f200 8337 	bhi.w	80181ac <tcp_process+0x7a0>
 8017b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8017b44 <tcp_process+0x138>)
 8017b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b44:	08017b65 	.word	0x08017b65
 8017b48:	08017d95 	.word	0x08017d95
 8017b4c:	08017f0d 	.word	0x08017f0d
 8017b50:	08017f37 	.word	0x08017f37
 8017b54:	0801805b 	.word	0x0801805b
 8017b58:	08017f0d 	.word	0x08017f0d
 8017b5c:	080180e7 	.word	0x080180e7
 8017b60:	08018177 	.word	0x08018177
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017b64:	4b4f      	ldr	r3, [pc, #316]	@ (8017ca4 <tcp_process+0x298>)
 8017b66:	781b      	ldrb	r3, [r3, #0]
 8017b68:	f003 0310 	and.w	r3, r3, #16
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	f000 80e4 	beq.w	8017d3a <tcp_process+0x32e>
 8017b72:	4b4c      	ldr	r3, [pc, #304]	@ (8017ca4 <tcp_process+0x298>)
 8017b74:	781b      	ldrb	r3, [r3, #0]
 8017b76:	f003 0302 	and.w	r3, r3, #2
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f000 80dd 	beq.w	8017d3a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b84:	1c5a      	adds	r2, r3, #1
 8017b86:	4b48      	ldr	r3, [pc, #288]	@ (8017ca8 <tcp_process+0x29c>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	f040 80d5 	bne.w	8017d3a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017b90:	4b46      	ldr	r3, [pc, #280]	@ (8017cac <tcp_process+0x2a0>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	1c5a      	adds	r2, r3, #1
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8017ba2:	4b41      	ldr	r3, [pc, #260]	@ (8017ca8 <tcp_process+0x29c>)
 8017ba4:	681a      	ldr	r2, [r3, #0]
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017baa:	4b44      	ldr	r3, [pc, #272]	@ (8017cbc <tcp_process+0x2b0>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	89db      	ldrh	r3, [r3, #14]
 8017bb0:	b29a      	uxth	r2, r3
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017bc4:	4b39      	ldr	r3, [pc, #228]	@ (8017cac <tcp_process+0x2a0>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	1e5a      	subs	r2, r3, #1
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2204      	movs	r2, #4
 8017bd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	3304      	adds	r3, #4
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f005 fe5d 	bl	801d89c <ip4_route>
 8017be2:	4601      	mov	r1, r0
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	3304      	adds	r3, #4
 8017be8:	461a      	mov	r2, r3
 8017bea:	4620      	mov	r0, r4
 8017bec:	f7ff f886 	bl	8016cfc <tcp_eff_send_mss_netif>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	461a      	mov	r2, r3
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017bfc:	009a      	lsls	r2, r3, #2
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c02:	005b      	lsls	r3, r3, #1
 8017c04:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017c08:	428b      	cmp	r3, r1
 8017c0a:	bf38      	it	cc
 8017c0c:	460b      	movcc	r3, r1
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d204      	bcs.n	8017c1c <tcp_process+0x210>
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c16:	009b      	lsls	r3, r3, #2
 8017c18:	b29b      	uxth	r3, r3
 8017c1a:	e00d      	b.n	8017c38 <tcp_process+0x22c>
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c20:	005b      	lsls	r3, r3, #1
 8017c22:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017c26:	4293      	cmp	r3, r2
 8017c28:	d904      	bls.n	8017c34 <tcp_process+0x228>
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c2e:	005b      	lsls	r3, r3, #1
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	e001      	b.n	8017c38 <tcp_process+0x22c>
 8017c34:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d106      	bne.n	8017c56 <tcp_process+0x24a>
 8017c48:	4b13      	ldr	r3, [pc, #76]	@ (8017c98 <tcp_process+0x28c>)
 8017c4a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8017c4e:	491c      	ldr	r1, [pc, #112]	@ (8017cc0 <tcp_process+0x2b4>)
 8017c50:	4813      	ldr	r0, [pc, #76]	@ (8017ca0 <tcp_process+0x294>)
 8017c52:	f008 f927 	bl	801fea4 <iprintf>
        --pcb->snd_queuelen;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017c5c:	3b01      	subs	r3, #1
 8017c5e:	b29a      	uxth	r2, r3
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017c6a:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8017c6c:	697b      	ldr	r3, [r7, #20]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d12a      	bne.n	8017cc8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c76:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d106      	bne.n	8017c8c <tcp_process+0x280>
 8017c7e:	4b06      	ldr	r3, [pc, #24]	@ (8017c98 <tcp_process+0x28c>)
 8017c80:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017c84:	490f      	ldr	r1, [pc, #60]	@ (8017cc4 <tcp_process+0x2b8>)
 8017c86:	4806      	ldr	r0, [pc, #24]	@ (8017ca0 <tcp_process+0x294>)
 8017c88:	f008 f90c 	bl	801fea4 <iprintf>
          pcb->unsent = rseg->next;
 8017c8c:	697b      	ldr	r3, [r7, #20]
 8017c8e:	681a      	ldr	r2, [r3, #0]
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017c94:	e01c      	b.n	8017cd0 <tcp_process+0x2c4>
 8017c96:	bf00      	nop
 8017c98:	080230c4 	.word	0x080230c4
 8017c9c:	080232fc 	.word	0x080232fc
 8017ca0:	08023110 	.word	0x08023110
 8017ca4:	200227e4 	.word	0x200227e4
 8017ca8:	200227dc 	.word	0x200227dc
 8017cac:	200227d8 	.word	0x200227d8
 8017cb0:	08023318 	.word	0x08023318
 8017cb4:	200227e5 	.word	0x200227e5
 8017cb8:	2002279c 	.word	0x2002279c
 8017cbc:	200227c8 	.word	0x200227c8
 8017cc0:	08023338 	.word	0x08023338
 8017cc4:	08023350 	.word	0x08023350
        } else {
          pcb->unacked = rseg->next;
 8017cc8:	697b      	ldr	r3, [r7, #20]
 8017cca:	681a      	ldr	r2, [r3, #0]
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017cd0:	6978      	ldr	r0, [r7, #20]
 8017cd2:	f7fe fc4e 	bl	8016572 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d104      	bne.n	8017ce8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ce4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017ce6:	e006      	b.n	8017cf6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	2200      	movs	r2, #0
 8017cec:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d00a      	beq.n	8017d16 <tcp_process+0x30a>
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d06:	687a      	ldr	r2, [r7, #4]
 8017d08:	6910      	ldr	r0, [r2, #16]
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	6879      	ldr	r1, [r7, #4]
 8017d0e:	4798      	blx	r3
 8017d10:	4603      	mov	r3, r0
 8017d12:	77bb      	strb	r3, [r7, #30]
 8017d14:	e001      	b.n	8017d1a <tcp_process+0x30e>
 8017d16:	2300      	movs	r3, #0
 8017d18:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8017d1a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017d1e:	f113 0f0d 	cmn.w	r3, #13
 8017d22:	d102      	bne.n	8017d2a <tcp_process+0x31e>
          return ERR_ABRT;
 8017d24:	f06f 030c 	mvn.w	r3, #12
 8017d28:	e250      	b.n	80181cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	8b5b      	ldrh	r3, [r3, #26]
 8017d2e:	f043 0302 	orr.w	r3, r3, #2
 8017d32:	b29a      	uxth	r2, r3
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017d38:	e23a      	b.n	80181b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017d3a:	4b98      	ldr	r3, [pc, #608]	@ (8017f9c <tcp_process+0x590>)
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	f003 0310 	and.w	r3, r3, #16
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	f000 8234 	beq.w	80181b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d48:	4b95      	ldr	r3, [pc, #596]	@ (8017fa0 <tcp_process+0x594>)
 8017d4a:	6819      	ldr	r1, [r3, #0]
 8017d4c:	4b95      	ldr	r3, [pc, #596]	@ (8017fa4 <tcp_process+0x598>)
 8017d4e:	881b      	ldrh	r3, [r3, #0]
 8017d50:	461a      	mov	r2, r3
 8017d52:	4b95      	ldr	r3, [pc, #596]	@ (8017fa8 <tcp_process+0x59c>)
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d58:	4b94      	ldr	r3, [pc, #592]	@ (8017fac <tcp_process+0x5a0>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d5c:	885b      	ldrh	r3, [r3, #2]
 8017d5e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d60:	4a92      	ldr	r2, [pc, #584]	@ (8017fac <tcp_process+0x5a0>)
 8017d62:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d64:	8812      	ldrh	r2, [r2, #0]
 8017d66:	b292      	uxth	r2, r2
 8017d68:	9202      	str	r2, [sp, #8]
 8017d6a:	9301      	str	r3, [sp, #4]
 8017d6c:	4b90      	ldr	r3, [pc, #576]	@ (8017fb0 <tcp_process+0x5a4>)
 8017d6e:	9300      	str	r3, [sp, #0]
 8017d70:	4b90      	ldr	r3, [pc, #576]	@ (8017fb4 <tcp_process+0x5a8>)
 8017d72:	4602      	mov	r2, r0
 8017d74:	6878      	ldr	r0, [r7, #4]
 8017d76:	f003 f945 	bl	801b004 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017d80:	2b05      	cmp	r3, #5
 8017d82:	f200 8215 	bhi.w	80181b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	2200      	movs	r2, #0
 8017d8a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f002 ff11 	bl	801abb4 <tcp_rexmit_rto>
      break;
 8017d92:	e20d      	b.n	80181b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017d94:	4b81      	ldr	r3, [pc, #516]	@ (8017f9c <tcp_process+0x590>)
 8017d96:	781b      	ldrb	r3, [r3, #0]
 8017d98:	f003 0310 	and.w	r3, r3, #16
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	f000 80a1 	beq.w	8017ee4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017da2:	4b7f      	ldr	r3, [pc, #508]	@ (8017fa0 <tcp_process+0x594>)
 8017da4:	681a      	ldr	r2, [r3, #0]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017daa:	1ad3      	subs	r3, r2, r3
 8017dac:	3b01      	subs	r3, #1
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	db7e      	blt.n	8017eb0 <tcp_process+0x4a4>
 8017db2:	4b7b      	ldr	r3, [pc, #492]	@ (8017fa0 <tcp_process+0x594>)
 8017db4:	681a      	ldr	r2, [r3, #0]
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017dba:	1ad3      	subs	r3, r2, r3
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	dc77      	bgt.n	8017eb0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	2204      	movs	r2, #4
 8017dc4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d102      	bne.n	8017dd4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017dce:	23fa      	movs	r3, #250	@ 0xfa
 8017dd0:	77bb      	strb	r3, [r7, #30]
 8017dd2:	e01d      	b.n	8017e10 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017dd8:	699b      	ldr	r3, [r3, #24]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d106      	bne.n	8017dec <tcp_process+0x3e0>
 8017dde:	4b76      	ldr	r3, [pc, #472]	@ (8017fb8 <tcp_process+0x5ac>)
 8017de0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017de4:	4975      	ldr	r1, [pc, #468]	@ (8017fbc <tcp_process+0x5b0>)
 8017de6:	4876      	ldr	r0, [pc, #472]	@ (8017fc0 <tcp_process+0x5b4>)
 8017de8:	f008 f85c 	bl	801fea4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017df0:	699b      	ldr	r3, [r3, #24]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d00a      	beq.n	8017e0c <tcp_process+0x400>
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017dfa:	699b      	ldr	r3, [r3, #24]
 8017dfc:	687a      	ldr	r2, [r7, #4]
 8017dfe:	6910      	ldr	r0, [r2, #16]
 8017e00:	2200      	movs	r2, #0
 8017e02:	6879      	ldr	r1, [r7, #4]
 8017e04:	4798      	blx	r3
 8017e06:	4603      	mov	r3, r0
 8017e08:	77bb      	strb	r3, [r7, #30]
 8017e0a:	e001      	b.n	8017e10 <tcp_process+0x404>
 8017e0c:	23f0      	movs	r3, #240	@ 0xf0
 8017e0e:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8017e10:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d00a      	beq.n	8017e2e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017e18:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017e1c:	f113 0f0d 	cmn.w	r3, #13
 8017e20:	d002      	beq.n	8017e28 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017e22:	6878      	ldr	r0, [r7, #4]
 8017e24:	f7fd fcc2 	bl	80157ac <tcp_abort>
            }
            return ERR_ABRT;
 8017e28:	f06f 030c 	mvn.w	r3, #12
 8017e2c:	e1ce      	b.n	80181cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	f000 fae0 	bl	80183f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017e34:	4b63      	ldr	r3, [pc, #396]	@ (8017fc4 <tcp_process+0x5b8>)
 8017e36:	881b      	ldrh	r3, [r3, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d005      	beq.n	8017e48 <tcp_process+0x43c>
            recv_acked--;
 8017e3c:	4b61      	ldr	r3, [pc, #388]	@ (8017fc4 <tcp_process+0x5b8>)
 8017e3e:	881b      	ldrh	r3, [r3, #0]
 8017e40:	3b01      	subs	r3, #1
 8017e42:	b29a      	uxth	r2, r3
 8017e44:	4b5f      	ldr	r3, [pc, #380]	@ (8017fc4 <tcp_process+0x5b8>)
 8017e46:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017e4c:	009a      	lsls	r2, r3, #2
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017e52:	005b      	lsls	r3, r3, #1
 8017e54:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017e58:	428b      	cmp	r3, r1
 8017e5a:	bf38      	it	cc
 8017e5c:	460b      	movcc	r3, r1
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d204      	bcs.n	8017e6c <tcp_process+0x460>
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017e66:	009b      	lsls	r3, r3, #2
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	e00d      	b.n	8017e88 <tcp_process+0x47c>
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017e70:	005b      	lsls	r3, r3, #1
 8017e72:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017e76:	4293      	cmp	r3, r2
 8017e78:	d904      	bls.n	8017e84 <tcp_process+0x478>
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017e7e:	005b      	lsls	r3, r3, #1
 8017e80:	b29b      	uxth	r3, r3
 8017e82:	e001      	b.n	8017e88 <tcp_process+0x47c>
 8017e84:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017e88:	687a      	ldr	r2, [r7, #4]
 8017e8a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8017fc8 <tcp_process+0x5bc>)
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	f003 0320 	and.w	r3, r3, #32
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d037      	beq.n	8017f0a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	8b5b      	ldrh	r3, [r3, #26]
 8017e9e:	f043 0302 	orr.w	r3, r3, #2
 8017ea2:	b29a      	uxth	r2, r3
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2207      	movs	r2, #7
 8017eac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017eae:	e02c      	b.n	8017f0a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8017fa0 <tcp_process+0x594>)
 8017eb2:	6819      	ldr	r1, [r3, #0]
 8017eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8017fa4 <tcp_process+0x598>)
 8017eb6:	881b      	ldrh	r3, [r3, #0]
 8017eb8:	461a      	mov	r2, r3
 8017eba:	4b3b      	ldr	r3, [pc, #236]	@ (8017fa8 <tcp_process+0x59c>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8017fac <tcp_process+0x5a0>)
 8017ec2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ec4:	885b      	ldrh	r3, [r3, #2]
 8017ec6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017ec8:	4a38      	ldr	r2, [pc, #224]	@ (8017fac <tcp_process+0x5a0>)
 8017eca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ecc:	8812      	ldrh	r2, [r2, #0]
 8017ece:	b292      	uxth	r2, r2
 8017ed0:	9202      	str	r2, [sp, #8]
 8017ed2:	9301      	str	r3, [sp, #4]
 8017ed4:	4b36      	ldr	r3, [pc, #216]	@ (8017fb0 <tcp_process+0x5a4>)
 8017ed6:	9300      	str	r3, [sp, #0]
 8017ed8:	4b36      	ldr	r3, [pc, #216]	@ (8017fb4 <tcp_process+0x5a8>)
 8017eda:	4602      	mov	r2, r0
 8017edc:	6878      	ldr	r0, [r7, #4]
 8017ede:	f003 f891 	bl	801b004 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017ee2:	e167      	b.n	80181b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8017f9c <tcp_process+0x590>)
 8017ee6:	781b      	ldrb	r3, [r3, #0]
 8017ee8:	f003 0302 	and.w	r3, r3, #2
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	f000 8161 	beq.w	80181b4 <tcp_process+0x7a8>
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ef6:	1e5a      	subs	r2, r3, #1
 8017ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8017fa8 <tcp_process+0x59c>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	f040 8159 	bne.w	80181b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f002 fe78 	bl	801abf8 <tcp_rexmit>
      break;
 8017f08:	e154      	b.n	80181b4 <tcp_process+0x7a8>
 8017f0a:	e153      	b.n	80181b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f000 fa71 	bl	80183f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017f12:	4b2d      	ldr	r3, [pc, #180]	@ (8017fc8 <tcp_process+0x5bc>)
 8017f14:	781b      	ldrb	r3, [r3, #0]
 8017f16:	f003 0320 	and.w	r3, r3, #32
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	f000 814c 	beq.w	80181b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	8b5b      	ldrh	r3, [r3, #26]
 8017f24:	f043 0302 	orr.w	r3, r3, #2
 8017f28:	b29a      	uxth	r2, r3
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2207      	movs	r2, #7
 8017f32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017f34:	e140      	b.n	80181b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017f36:	6878      	ldr	r0, [r7, #4]
 8017f38:	f000 fa5c 	bl	80183f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017f3c:	4b22      	ldr	r3, [pc, #136]	@ (8017fc8 <tcp_process+0x5bc>)
 8017f3e:	781b      	ldrb	r3, [r3, #0]
 8017f40:	f003 0320 	and.w	r3, r3, #32
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d071      	beq.n	801802c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017f48:	4b14      	ldr	r3, [pc, #80]	@ (8017f9c <tcp_process+0x590>)
 8017f4a:	781b      	ldrb	r3, [r3, #0]
 8017f4c:	f003 0310 	and.w	r3, r3, #16
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d060      	beq.n	8018016 <tcp_process+0x60a>
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f58:	4b11      	ldr	r3, [pc, #68]	@ (8017fa0 <tcp_process+0x594>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d15a      	bne.n	8018016 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d156      	bne.n	8018016 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	8b5b      	ldrh	r3, [r3, #26]
 8017f6c:	f043 0302 	orr.w	r3, r3, #2
 8017f70:	b29a      	uxth	r2, r3
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017f76:	6878      	ldr	r0, [r7, #4]
 8017f78:	f7fe fdb6 	bl	8016ae8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017f7c:	4b13      	ldr	r3, [pc, #76]	@ (8017fcc <tcp_process+0x5c0>)
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	687a      	ldr	r2, [r7, #4]
 8017f82:	429a      	cmp	r2, r3
 8017f84:	d105      	bne.n	8017f92 <tcp_process+0x586>
 8017f86:	4b11      	ldr	r3, [pc, #68]	@ (8017fcc <tcp_process+0x5c0>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	68db      	ldr	r3, [r3, #12]
 8017f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8017fcc <tcp_process+0x5c0>)
 8017f8e:	6013      	str	r3, [r2, #0]
 8017f90:	e02e      	b.n	8017ff0 <tcp_process+0x5e4>
 8017f92:	4b0e      	ldr	r3, [pc, #56]	@ (8017fcc <tcp_process+0x5c0>)
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	613b      	str	r3, [r7, #16]
 8017f98:	e027      	b.n	8017fea <tcp_process+0x5de>
 8017f9a:	bf00      	nop
 8017f9c:	200227e4 	.word	0x200227e4
 8017fa0:	200227dc 	.word	0x200227dc
 8017fa4:	200227e2 	.word	0x200227e2
 8017fa8:	200227d8 	.word	0x200227d8
 8017fac:	200227c8 	.word	0x200227c8
 8017fb0:	2001f66c 	.word	0x2001f66c
 8017fb4:	2001f670 	.word	0x2001f670
 8017fb8:	080230c4 	.word	0x080230c4
 8017fbc:	08023364 	.word	0x08023364
 8017fc0:	08023110 	.word	0x08023110
 8017fc4:	200227e0 	.word	0x200227e0
 8017fc8:	200227e5 	.word	0x200227e5
 8017fcc:	200227a8 	.word	0x200227a8
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	68db      	ldr	r3, [r3, #12]
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d104      	bne.n	8017fe4 <tcp_process+0x5d8>
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	68da      	ldr	r2, [r3, #12]
 8017fde:	693b      	ldr	r3, [r7, #16]
 8017fe0:	60da      	str	r2, [r3, #12]
 8017fe2:	e005      	b.n	8017ff0 <tcp_process+0x5e4>
 8017fe4:	693b      	ldr	r3, [r7, #16]
 8017fe6:	68db      	ldr	r3, [r3, #12]
 8017fe8:	613b      	str	r3, [r7, #16]
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d1ef      	bne.n	8017fd0 <tcp_process+0x5c4>
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	60da      	str	r2, [r3, #12]
 8017ff6:	4b77      	ldr	r3, [pc, #476]	@ (80181d4 <tcp_process+0x7c8>)
 8017ff8:	2201      	movs	r2, #1
 8017ffa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	220a      	movs	r2, #10
 8018000:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018002:	4b75      	ldr	r3, [pc, #468]	@ (80181d8 <tcp_process+0x7cc>)
 8018004:	681a      	ldr	r2, [r3, #0]
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	60da      	str	r2, [r3, #12]
 801800a:	4a73      	ldr	r2, [pc, #460]	@ (80181d8 <tcp_process+0x7cc>)
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6013      	str	r3, [r2, #0]
 8018010:	f003 f9ba 	bl	801b388 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018014:	e0d2      	b.n	80181bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	8b5b      	ldrh	r3, [r3, #26]
 801801a:	f043 0302 	orr.w	r3, r3, #2
 801801e:	b29a      	uxth	r2, r3
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2208      	movs	r2, #8
 8018028:	751a      	strb	r2, [r3, #20]
      break;
 801802a:	e0c7      	b.n	80181bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801802c:	4b6b      	ldr	r3, [pc, #428]	@ (80181dc <tcp_process+0x7d0>)
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	f003 0310 	and.w	r3, r3, #16
 8018034:	2b00      	cmp	r3, #0
 8018036:	f000 80c1 	beq.w	80181bc <tcp_process+0x7b0>
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801803e:	4b68      	ldr	r3, [pc, #416]	@ (80181e0 <tcp_process+0x7d4>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	429a      	cmp	r2, r3
 8018044:	f040 80ba 	bne.w	80181bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801804c:	2b00      	cmp	r3, #0
 801804e:	f040 80b5 	bne.w	80181bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	2206      	movs	r2, #6
 8018056:	751a      	strb	r2, [r3, #20]
      break;
 8018058:	e0b0      	b.n	80181bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801805a:	6878      	ldr	r0, [r7, #4]
 801805c:	f000 f9ca 	bl	80183f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018060:	4b60      	ldr	r3, [pc, #384]	@ (80181e4 <tcp_process+0x7d8>)
 8018062:	781b      	ldrb	r3, [r3, #0]
 8018064:	f003 0320 	and.w	r3, r3, #32
 8018068:	2b00      	cmp	r3, #0
 801806a:	f000 80a9 	beq.w	80181c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	8b5b      	ldrh	r3, [r3, #26]
 8018072:	f043 0302 	orr.w	r3, r3, #2
 8018076:	b29a      	uxth	r2, r3
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7fe fd33 	bl	8016ae8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018082:	4b59      	ldr	r3, [pc, #356]	@ (80181e8 <tcp_process+0x7dc>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	687a      	ldr	r2, [r7, #4]
 8018088:	429a      	cmp	r2, r3
 801808a:	d105      	bne.n	8018098 <tcp_process+0x68c>
 801808c:	4b56      	ldr	r3, [pc, #344]	@ (80181e8 <tcp_process+0x7dc>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	4a55      	ldr	r2, [pc, #340]	@ (80181e8 <tcp_process+0x7dc>)
 8018094:	6013      	str	r3, [r2, #0]
 8018096:	e013      	b.n	80180c0 <tcp_process+0x6b4>
 8018098:	4b53      	ldr	r3, [pc, #332]	@ (80181e8 <tcp_process+0x7dc>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	60fb      	str	r3, [r7, #12]
 801809e:	e00c      	b.n	80180ba <tcp_process+0x6ae>
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	68db      	ldr	r3, [r3, #12]
 80180a4:	687a      	ldr	r2, [r7, #4]
 80180a6:	429a      	cmp	r2, r3
 80180a8:	d104      	bne.n	80180b4 <tcp_process+0x6a8>
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	68da      	ldr	r2, [r3, #12]
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	60da      	str	r2, [r3, #12]
 80180b2:	e005      	b.n	80180c0 <tcp_process+0x6b4>
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	68db      	ldr	r3, [r3, #12]
 80180b8:	60fb      	str	r3, [r7, #12]
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d1ef      	bne.n	80180a0 <tcp_process+0x694>
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	2200      	movs	r2, #0
 80180c4:	60da      	str	r2, [r3, #12]
 80180c6:	4b43      	ldr	r3, [pc, #268]	@ (80181d4 <tcp_process+0x7c8>)
 80180c8:	2201      	movs	r2, #1
 80180ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	220a      	movs	r2, #10
 80180d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80180d2:	4b41      	ldr	r3, [pc, #260]	@ (80181d8 <tcp_process+0x7cc>)
 80180d4:	681a      	ldr	r2, [r3, #0]
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	60da      	str	r2, [r3, #12]
 80180da:	4a3f      	ldr	r2, [pc, #252]	@ (80181d8 <tcp_process+0x7cc>)
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6013      	str	r3, [r2, #0]
 80180e0:	f003 f952 	bl	801b388 <tcp_timer_needed>
      }
      break;
 80180e4:	e06c      	b.n	80181c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80180e6:	6878      	ldr	r0, [r7, #4]
 80180e8:	f000 f984 	bl	80183f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80180ec:	4b3b      	ldr	r3, [pc, #236]	@ (80181dc <tcp_process+0x7d0>)
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	f003 0310 	and.w	r3, r3, #16
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d065      	beq.n	80181c4 <tcp_process+0x7b8>
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180fc:	4b38      	ldr	r3, [pc, #224]	@ (80181e0 <tcp_process+0x7d4>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	429a      	cmp	r2, r3
 8018102:	d15f      	bne.n	80181c4 <tcp_process+0x7b8>
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018108:	2b00      	cmp	r3, #0
 801810a:	d15b      	bne.n	80181c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f7fe fceb 	bl	8016ae8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018112:	4b35      	ldr	r3, [pc, #212]	@ (80181e8 <tcp_process+0x7dc>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	687a      	ldr	r2, [r7, #4]
 8018118:	429a      	cmp	r2, r3
 801811a:	d105      	bne.n	8018128 <tcp_process+0x71c>
 801811c:	4b32      	ldr	r3, [pc, #200]	@ (80181e8 <tcp_process+0x7dc>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	68db      	ldr	r3, [r3, #12]
 8018122:	4a31      	ldr	r2, [pc, #196]	@ (80181e8 <tcp_process+0x7dc>)
 8018124:	6013      	str	r3, [r2, #0]
 8018126:	e013      	b.n	8018150 <tcp_process+0x744>
 8018128:	4b2f      	ldr	r3, [pc, #188]	@ (80181e8 <tcp_process+0x7dc>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	61bb      	str	r3, [r7, #24]
 801812e:	e00c      	b.n	801814a <tcp_process+0x73e>
 8018130:	69bb      	ldr	r3, [r7, #24]
 8018132:	68db      	ldr	r3, [r3, #12]
 8018134:	687a      	ldr	r2, [r7, #4]
 8018136:	429a      	cmp	r2, r3
 8018138:	d104      	bne.n	8018144 <tcp_process+0x738>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	68da      	ldr	r2, [r3, #12]
 801813e:	69bb      	ldr	r3, [r7, #24]
 8018140:	60da      	str	r2, [r3, #12]
 8018142:	e005      	b.n	8018150 <tcp_process+0x744>
 8018144:	69bb      	ldr	r3, [r7, #24]
 8018146:	68db      	ldr	r3, [r3, #12]
 8018148:	61bb      	str	r3, [r7, #24]
 801814a:	69bb      	ldr	r3, [r7, #24]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d1ef      	bne.n	8018130 <tcp_process+0x724>
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2200      	movs	r2, #0
 8018154:	60da      	str	r2, [r3, #12]
 8018156:	4b1f      	ldr	r3, [pc, #124]	@ (80181d4 <tcp_process+0x7c8>)
 8018158:	2201      	movs	r2, #1
 801815a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	220a      	movs	r2, #10
 8018160:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018162:	4b1d      	ldr	r3, [pc, #116]	@ (80181d8 <tcp_process+0x7cc>)
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	60da      	str	r2, [r3, #12]
 801816a:	4a1b      	ldr	r2, [pc, #108]	@ (80181d8 <tcp_process+0x7cc>)
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6013      	str	r3, [r2, #0]
 8018170:	f003 f90a 	bl	801b388 <tcp_timer_needed>
      }
      break;
 8018174:	e026      	b.n	80181c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f000 f93c 	bl	80183f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801817c:	4b17      	ldr	r3, [pc, #92]	@ (80181dc <tcp_process+0x7d0>)
 801817e:	781b      	ldrb	r3, [r3, #0]
 8018180:	f003 0310 	and.w	r3, r3, #16
 8018184:	2b00      	cmp	r3, #0
 8018186:	d01f      	beq.n	80181c8 <tcp_process+0x7bc>
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801818c:	4b14      	ldr	r3, [pc, #80]	@ (80181e0 <tcp_process+0x7d4>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	429a      	cmp	r2, r3
 8018192:	d119      	bne.n	80181c8 <tcp_process+0x7bc>
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018198:	2b00      	cmp	r3, #0
 801819a:	d115      	bne.n	80181c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801819c:	4b11      	ldr	r3, [pc, #68]	@ (80181e4 <tcp_process+0x7d8>)
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	f043 0310 	orr.w	r3, r3, #16
 80181a4:	b2da      	uxtb	r2, r3
 80181a6:	4b0f      	ldr	r3, [pc, #60]	@ (80181e4 <tcp_process+0x7d8>)
 80181a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80181aa:	e00d      	b.n	80181c8 <tcp_process+0x7bc>
    default:
      break;
 80181ac:	bf00      	nop
 80181ae:	e00c      	b.n	80181ca <tcp_process+0x7be>
      break;
 80181b0:	bf00      	nop
 80181b2:	e00a      	b.n	80181ca <tcp_process+0x7be>
      break;
 80181b4:	bf00      	nop
 80181b6:	e008      	b.n	80181ca <tcp_process+0x7be>
      break;
 80181b8:	bf00      	nop
 80181ba:	e006      	b.n	80181ca <tcp_process+0x7be>
      break;
 80181bc:	bf00      	nop
 80181be:	e004      	b.n	80181ca <tcp_process+0x7be>
      break;
 80181c0:	bf00      	nop
 80181c2:	e002      	b.n	80181ca <tcp_process+0x7be>
      break;
 80181c4:	bf00      	nop
 80181c6:	e000      	b.n	80181ca <tcp_process+0x7be>
      break;
 80181c8:	bf00      	nop
  }
  return ERR_OK;
 80181ca:	2300      	movs	r3, #0
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	3724      	adds	r7, #36	@ 0x24
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd90      	pop	{r4, r7, pc}
 80181d4:	200227b0 	.word	0x200227b0
 80181d8:	200227ac 	.word	0x200227ac
 80181dc:	200227e4 	.word	0x200227e4
 80181e0:	200227dc 	.word	0x200227dc
 80181e4:	200227e5 	.word	0x200227e5
 80181e8:	200227a8 	.word	0x200227a8

080181ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80181ec:	b590      	push	{r4, r7, lr}
 80181ee:	b085      	sub	sp, #20
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
 80181f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d106      	bne.n	801820a <tcp_oos_insert_segment+0x1e>
 80181fc:	4b3b      	ldr	r3, [pc, #236]	@ (80182ec <tcp_oos_insert_segment+0x100>)
 80181fe:	f240 421f 	movw	r2, #1055	@ 0x41f
 8018202:	493b      	ldr	r1, [pc, #236]	@ (80182f0 <tcp_oos_insert_segment+0x104>)
 8018204:	483b      	ldr	r0, [pc, #236]	@ (80182f4 <tcp_oos_insert_segment+0x108>)
 8018206:	f007 fe4d 	bl	801fea4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	691b      	ldr	r3, [r3, #16]
 801820e:	899b      	ldrh	r3, [r3, #12]
 8018210:	b29b      	uxth	r3, r3
 8018212:	4618      	mov	r0, r3
 8018214:	f7fa ffe6 	bl	80131e4 <lwip_htons>
 8018218:	4603      	mov	r3, r0
 801821a:	b2db      	uxtb	r3, r3
 801821c:	f003 0301 	and.w	r3, r3, #1
 8018220:	2b00      	cmp	r3, #0
 8018222:	d028      	beq.n	8018276 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018224:	6838      	ldr	r0, [r7, #0]
 8018226:	f7fe f98f 	bl	8016548 <tcp_segs_free>
    next = NULL;
 801822a:	2300      	movs	r3, #0
 801822c:	603b      	str	r3, [r7, #0]
 801822e:	e056      	b.n	80182de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	691b      	ldr	r3, [r3, #16]
 8018234:	899b      	ldrh	r3, [r3, #12]
 8018236:	b29b      	uxth	r3, r3
 8018238:	4618      	mov	r0, r3
 801823a:	f7fa ffd3 	bl	80131e4 <lwip_htons>
 801823e:	4603      	mov	r3, r0
 8018240:	b2db      	uxtb	r3, r3
 8018242:	f003 0301 	and.w	r3, r3, #1
 8018246:	2b00      	cmp	r3, #0
 8018248:	d00d      	beq.n	8018266 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	691b      	ldr	r3, [r3, #16]
 801824e:	899b      	ldrh	r3, [r3, #12]
 8018250:	b29c      	uxth	r4, r3
 8018252:	2001      	movs	r0, #1
 8018254:	f7fa ffc6 	bl	80131e4 <lwip_htons>
 8018258:	4603      	mov	r3, r0
 801825a:	461a      	mov	r2, r3
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	691b      	ldr	r3, [r3, #16]
 8018260:	4322      	orrs	r2, r4
 8018262:	b292      	uxth	r2, r2
 8018264:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018270:	68f8      	ldr	r0, [r7, #12]
 8018272:	f7fe f97e 	bl	8016572 <tcp_seg_free>
    while (next &&
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d00e      	beq.n	801829a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	891b      	ldrh	r3, [r3, #8]
 8018280:	461a      	mov	r2, r3
 8018282:	4b1d      	ldr	r3, [pc, #116]	@ (80182f8 <tcp_oos_insert_segment+0x10c>)
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	441a      	add	r2, r3
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	691b      	ldr	r3, [r3, #16]
 801828c:	685b      	ldr	r3, [r3, #4]
 801828e:	6839      	ldr	r1, [r7, #0]
 8018290:	8909      	ldrh	r1, [r1, #8]
 8018292:	440b      	add	r3, r1
 8018294:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018296:	2b00      	cmp	r3, #0
 8018298:	daca      	bge.n	8018230 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d01e      	beq.n	80182de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	891b      	ldrh	r3, [r3, #8]
 80182a4:	461a      	mov	r2, r3
 80182a6:	4b14      	ldr	r3, [pc, #80]	@ (80182f8 <tcp_oos_insert_segment+0x10c>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	441a      	add	r2, r3
 80182ac:	683b      	ldr	r3, [r7, #0]
 80182ae:	691b      	ldr	r3, [r3, #16]
 80182b0:	685b      	ldr	r3, [r3, #4]
 80182b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	dd12      	ble.n	80182de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	691b      	ldr	r3, [r3, #16]
 80182bc:	685b      	ldr	r3, [r3, #4]
 80182be:	b29a      	uxth	r2, r3
 80182c0:	4b0d      	ldr	r3, [pc, #52]	@ (80182f8 <tcp_oos_insert_segment+0x10c>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	b29b      	uxth	r3, r3
 80182c6:	1ad3      	subs	r3, r2, r3
 80182c8:	b29a      	uxth	r2, r3
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	685a      	ldr	r2, [r3, #4]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	891b      	ldrh	r3, [r3, #8]
 80182d6:	4619      	mov	r1, r3
 80182d8:	4610      	mov	r0, r2
 80182da:	f7fc fae1 	bl	80148a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	683a      	ldr	r2, [r7, #0]
 80182e2:	601a      	str	r2, [r3, #0]
}
 80182e4:	bf00      	nop
 80182e6:	3714      	adds	r7, #20
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd90      	pop	{r4, r7, pc}
 80182ec:	080230c4 	.word	0x080230c4
 80182f0:	08023384 	.word	0x08023384
 80182f4:	08023110 	.word	0x08023110
 80182f8:	200227d8 	.word	0x200227d8

080182fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80182fc:	b5b0      	push	{r4, r5, r7, lr}
 80182fe:	b086      	sub	sp, #24
 8018300:	af00      	add	r7, sp, #0
 8018302:	60f8      	str	r0, [r7, #12]
 8018304:	60b9      	str	r1, [r7, #8]
 8018306:	607a      	str	r2, [r7, #4]
 8018308:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801830a:	e03e      	b.n	801838a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801830c:	68bb      	ldr	r3, [r7, #8]
 801830e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018316:	697b      	ldr	r3, [r7, #20]
 8018318:	685b      	ldr	r3, [r3, #4]
 801831a:	4618      	mov	r0, r3
 801831c:	f7fc fcd4 	bl	8014cc8 <pbuf_clen>
 8018320:	4603      	mov	r3, r0
 8018322:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801832a:	8a7a      	ldrh	r2, [r7, #18]
 801832c:	429a      	cmp	r2, r3
 801832e:	d906      	bls.n	801833e <tcp_free_acked_segments+0x42>
 8018330:	4b2a      	ldr	r3, [pc, #168]	@ (80183dc <tcp_free_acked_segments+0xe0>)
 8018332:	f240 4257 	movw	r2, #1111	@ 0x457
 8018336:	492a      	ldr	r1, [pc, #168]	@ (80183e0 <tcp_free_acked_segments+0xe4>)
 8018338:	482a      	ldr	r0, [pc, #168]	@ (80183e4 <tcp_free_acked_segments+0xe8>)
 801833a:	f007 fdb3 	bl	801fea4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8018344:	8a7b      	ldrh	r3, [r7, #18]
 8018346:	1ad3      	subs	r3, r2, r3
 8018348:	b29a      	uxth	r2, r3
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018350:	697b      	ldr	r3, [r7, #20]
 8018352:	891a      	ldrh	r2, [r3, #8]
 8018354:	4b24      	ldr	r3, [pc, #144]	@ (80183e8 <tcp_free_acked_segments+0xec>)
 8018356:	881b      	ldrh	r3, [r3, #0]
 8018358:	4413      	add	r3, r2
 801835a:	b29a      	uxth	r2, r3
 801835c:	4b22      	ldr	r3, [pc, #136]	@ (80183e8 <tcp_free_acked_segments+0xec>)
 801835e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018360:	6978      	ldr	r0, [r7, #20]
 8018362:	f7fe f906 	bl	8016572 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801836c:	2b00      	cmp	r3, #0
 801836e:	d00c      	beq.n	801838a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018370:	68bb      	ldr	r3, [r7, #8]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d109      	bne.n	801838a <tcp_free_acked_segments+0x8e>
 8018376:	683b      	ldr	r3, [r7, #0]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d106      	bne.n	801838a <tcp_free_acked_segments+0x8e>
 801837c:	4b17      	ldr	r3, [pc, #92]	@ (80183dc <tcp_free_acked_segments+0xe0>)
 801837e:	f240 4261 	movw	r2, #1121	@ 0x461
 8018382:	491a      	ldr	r1, [pc, #104]	@ (80183ec <tcp_free_acked_segments+0xf0>)
 8018384:	4817      	ldr	r0, [pc, #92]	@ (80183e4 <tcp_free_acked_segments+0xe8>)
 8018386:	f007 fd8d 	bl	801fea4 <iprintf>
  while (seg_list != NULL &&
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d020      	beq.n	80183d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	691b      	ldr	r3, [r3, #16]
 8018394:	685b      	ldr	r3, [r3, #4]
 8018396:	4618      	mov	r0, r3
 8018398:	f7fa ff3a 	bl	8013210 <lwip_htonl>
 801839c:	4604      	mov	r4, r0
 801839e:	68bb      	ldr	r3, [r7, #8]
 80183a0:	891b      	ldrh	r3, [r3, #8]
 80183a2:	461d      	mov	r5, r3
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	691b      	ldr	r3, [r3, #16]
 80183a8:	899b      	ldrh	r3, [r3, #12]
 80183aa:	b29b      	uxth	r3, r3
 80183ac:	4618      	mov	r0, r3
 80183ae:	f7fa ff19 	bl	80131e4 <lwip_htons>
 80183b2:	4603      	mov	r3, r0
 80183b4:	b2db      	uxtb	r3, r3
 80183b6:	f003 0303 	and.w	r3, r3, #3
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d001      	beq.n	80183c2 <tcp_free_acked_segments+0xc6>
 80183be:	2301      	movs	r3, #1
 80183c0:	e000      	b.n	80183c4 <tcp_free_acked_segments+0xc8>
 80183c2:	2300      	movs	r3, #0
 80183c4:	442b      	add	r3, r5
 80183c6:	18e2      	adds	r2, r4, r3
 80183c8:	4b09      	ldr	r3, [pc, #36]	@ (80183f0 <tcp_free_acked_segments+0xf4>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	dd9c      	ble.n	801830c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80183d2:	68bb      	ldr	r3, [r7, #8]
}
 80183d4:	4618      	mov	r0, r3
 80183d6:	3718      	adds	r7, #24
 80183d8:	46bd      	mov	sp, r7
 80183da:	bdb0      	pop	{r4, r5, r7, pc}
 80183dc:	080230c4 	.word	0x080230c4
 80183e0:	080233ac 	.word	0x080233ac
 80183e4:	08023110 	.word	0x08023110
 80183e8:	200227e0 	.word	0x200227e0
 80183ec:	080233d4 	.word	0x080233d4
 80183f0:	200227dc 	.word	0x200227dc

080183f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80183f4:	b5b0      	push	{r4, r5, r7, lr}
 80183f6:	b094      	sub	sp, #80	@ 0x50
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80183fc:	2300      	movs	r3, #0
 80183fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d106      	bne.n	8018414 <tcp_receive+0x20>
 8018406:	4b91      	ldr	r3, [pc, #580]	@ (801864c <tcp_receive+0x258>)
 8018408:	f240 427b 	movw	r2, #1147	@ 0x47b
 801840c:	4990      	ldr	r1, [pc, #576]	@ (8018650 <tcp_receive+0x25c>)
 801840e:	4891      	ldr	r0, [pc, #580]	@ (8018654 <tcp_receive+0x260>)
 8018410:	f007 fd48 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	7d1b      	ldrb	r3, [r3, #20]
 8018418:	2b03      	cmp	r3, #3
 801841a:	d806      	bhi.n	801842a <tcp_receive+0x36>
 801841c:	4b8b      	ldr	r3, [pc, #556]	@ (801864c <tcp_receive+0x258>)
 801841e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8018422:	498d      	ldr	r1, [pc, #564]	@ (8018658 <tcp_receive+0x264>)
 8018424:	488b      	ldr	r0, [pc, #556]	@ (8018654 <tcp_receive+0x260>)
 8018426:	f007 fd3d 	bl	801fea4 <iprintf>

  if (flags & TCP_ACK) {
 801842a:	4b8c      	ldr	r3, [pc, #560]	@ (801865c <tcp_receive+0x268>)
 801842c:	781b      	ldrb	r3, [r3, #0]
 801842e:	f003 0310 	and.w	r3, r3, #16
 8018432:	2b00      	cmp	r3, #0
 8018434:	f000 8264 	beq.w	8018900 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801843e:	461a      	mov	r2, r3
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018444:	4413      	add	r3, r2
 8018446:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801844c:	4b84      	ldr	r3, [pc, #528]	@ (8018660 <tcp_receive+0x26c>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	1ad3      	subs	r3, r2, r3
 8018452:	2b00      	cmp	r3, #0
 8018454:	db1b      	blt.n	801848e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801845a:	4b81      	ldr	r3, [pc, #516]	@ (8018660 <tcp_receive+0x26c>)
 801845c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801845e:	429a      	cmp	r2, r3
 8018460:	d106      	bne.n	8018470 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018466:	4b7f      	ldr	r3, [pc, #508]	@ (8018664 <tcp_receive+0x270>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	1ad3      	subs	r3, r2, r3
 801846c:	2b00      	cmp	r3, #0
 801846e:	db0e      	blt.n	801848e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018474:	4b7b      	ldr	r3, [pc, #492]	@ (8018664 <tcp_receive+0x270>)
 8018476:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018478:	429a      	cmp	r2, r3
 801847a:	d125      	bne.n	80184c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801847c:	4b7a      	ldr	r3, [pc, #488]	@ (8018668 <tcp_receive+0x274>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	89db      	ldrh	r3, [r3, #14]
 8018482:	b29a      	uxth	r2, r3
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801848a:	429a      	cmp	r2, r3
 801848c:	d91c      	bls.n	80184c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801848e:	4b76      	ldr	r3, [pc, #472]	@ (8018668 <tcp_receive+0x274>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	89db      	ldrh	r3, [r3, #14]
 8018494:	b29a      	uxth	r2, r3
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d205      	bcs.n	80184b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80184b8:	4b69      	ldr	r3, [pc, #420]	@ (8018660 <tcp_receive+0x26c>)
 80184ba:	681a      	ldr	r2, [r3, #0]
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80184c0:	4b68      	ldr	r3, [pc, #416]	@ (8018664 <tcp_receive+0x270>)
 80184c2:	681a      	ldr	r2, [r3, #0]
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80184c8:	4b66      	ldr	r3, [pc, #408]	@ (8018664 <tcp_receive+0x270>)
 80184ca:	681a      	ldr	r2, [r3, #0]
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80184d0:	1ad3      	subs	r3, r2, r3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	dc58      	bgt.n	8018588 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80184d6:	4b65      	ldr	r3, [pc, #404]	@ (801866c <tcp_receive+0x278>)
 80184d8:	881b      	ldrh	r3, [r3, #0]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d14b      	bne.n	8018576 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80184e8:	4413      	add	r3, r2
 80184ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d142      	bne.n	8018576 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	db3d      	blt.n	8018576 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80184fe:	4b59      	ldr	r3, [pc, #356]	@ (8018664 <tcp_receive+0x270>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	429a      	cmp	r2, r3
 8018504:	d137      	bne.n	8018576 <tcp_receive+0x182>
              found_dupack = 1;
 8018506:	2301      	movs	r3, #1
 8018508:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018510:	2bff      	cmp	r3, #255	@ 0xff
 8018512:	d007      	beq.n	8018524 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801851a:	3301      	adds	r3, #1
 801851c:	b2da      	uxtb	r2, r3
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801852a:	2b03      	cmp	r3, #3
 801852c:	d91b      	bls.n	8018566 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018538:	4413      	add	r3, r2
 801853a:	b29a      	uxth	r2, r3
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018542:	429a      	cmp	r2, r3
 8018544:	d30a      	bcc.n	801855c <tcp_receive+0x168>
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018550:	4413      	add	r3, r2
 8018552:	b29a      	uxth	r2, r3
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801855a:	e004      	b.n	8018566 <tcp_receive+0x172>
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018562:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801856c:	2b02      	cmp	r3, #2
 801856e:	d902      	bls.n	8018576 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018570:	6878      	ldr	r0, [r7, #4]
 8018572:	f002 fbad 	bl	801acd0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018578:	2b00      	cmp	r3, #0
 801857a:	f040 8161 	bne.w	8018840 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	2200      	movs	r2, #0
 8018582:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018586:	e15b      	b.n	8018840 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018588:	4b36      	ldr	r3, [pc, #216]	@ (8018664 <tcp_receive+0x270>)
 801858a:	681a      	ldr	r2, [r3, #0]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018590:	1ad3      	subs	r3, r2, r3
 8018592:	3b01      	subs	r3, #1
 8018594:	2b00      	cmp	r3, #0
 8018596:	f2c0 814e 	blt.w	8018836 <tcp_receive+0x442>
 801859a:	4b32      	ldr	r3, [pc, #200]	@ (8018664 <tcp_receive+0x270>)
 801859c:	681a      	ldr	r2, [r3, #0]
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80185a2:	1ad3      	subs	r3, r2, r3
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	f300 8146 	bgt.w	8018836 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	8b5b      	ldrh	r3, [r3, #26]
 80185ae:	f003 0304 	and.w	r3, r3, #4
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d010      	beq.n	80185d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	8b5b      	ldrh	r3, [r3, #26]
 80185ba:	f023 0304 	bic.w	r3, r3, #4
 80185be:	b29a      	uxth	r2, r3
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2200      	movs	r2, #0
 80185d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	2200      	movs	r2, #0
 80185dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80185e6:	10db      	asrs	r3, r3, #3
 80185e8:	b21b      	sxth	r3, r3
 80185ea:	b29a      	uxth	r2, r3
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	4413      	add	r3, r2
 80185f6:	b29b      	uxth	r3, r3
 80185f8:	b21a      	sxth	r2, r3
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018600:	4b18      	ldr	r3, [pc, #96]	@ (8018664 <tcp_receive+0x270>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	b29a      	uxth	r2, r3
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801860a:	b29b      	uxth	r3, r3
 801860c:	1ad3      	subs	r3, r2, r3
 801860e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	2200      	movs	r2, #0
 8018614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8018618:	4b12      	ldr	r3, [pc, #72]	@ (8018664 <tcp_receive+0x270>)
 801861a:	681a      	ldr	r2, [r3, #0]
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	7d1b      	ldrb	r3, [r3, #20]
 8018624:	2b03      	cmp	r3, #3
 8018626:	f240 8097 	bls.w	8018758 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018636:	429a      	cmp	r2, r3
 8018638:	d245      	bcs.n	80186c6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	8b5b      	ldrh	r3, [r3, #26]
 801863e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018642:	2b00      	cmp	r3, #0
 8018644:	d014      	beq.n	8018670 <tcp_receive+0x27c>
 8018646:	2301      	movs	r3, #1
 8018648:	e013      	b.n	8018672 <tcp_receive+0x27e>
 801864a:	bf00      	nop
 801864c:	080230c4 	.word	0x080230c4
 8018650:	080233f4 	.word	0x080233f4
 8018654:	08023110 	.word	0x08023110
 8018658:	08023410 	.word	0x08023410
 801865c:	200227e4 	.word	0x200227e4
 8018660:	200227d8 	.word	0x200227d8
 8018664:	200227dc 	.word	0x200227dc
 8018668:	200227c8 	.word	0x200227c8
 801866c:	200227e2 	.word	0x200227e2
 8018670:	2302      	movs	r3, #2
 8018672:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018676:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801867a:	b29a      	uxth	r2, r3
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018680:	fb12 f303 	smulbb	r3, r2, r3
 8018684:	b29b      	uxth	r3, r3
 8018686:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018688:	4293      	cmp	r3, r2
 801868a:	bf28      	it	cs
 801868c:	4613      	movcs	r3, r2
 801868e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018696:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018698:	4413      	add	r3, r2
 801869a:	b29a      	uxth	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d309      	bcc.n	80186ba <tcp_receive+0x2c6>
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80186ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80186ae:	4413      	add	r3, r2
 80186b0:	b29a      	uxth	r2, r3
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80186b8:	e04e      	b.n	8018758 <tcp_receive+0x364>
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80186c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80186c4:	e048      	b.n	8018758 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80186cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80186ce:	4413      	add	r3, r2
 80186d0:	b29a      	uxth	r2, r3
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80186d8:	429a      	cmp	r2, r3
 80186da:	d309      	bcc.n	80186f0 <tcp_receive+0x2fc>
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80186e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80186e4:	4413      	add	r3, r2
 80186e6:	b29a      	uxth	r2, r3
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80186ee:	e004      	b.n	80186fa <tcp_receive+0x306>
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80186f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018706:	429a      	cmp	r2, r3
 8018708:	d326      	bcc.n	8018758 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018716:	1ad3      	subs	r3, r2, r3
 8018718:	b29a      	uxth	r2, r3
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801872a:	4413      	add	r3, r2
 801872c:	b29a      	uxth	r2, r3
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018734:	429a      	cmp	r2, r3
 8018736:	d30a      	bcc.n	801874e <tcp_receive+0x35a>
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018742:	4413      	add	r3, r2
 8018744:	b29a      	uxth	r2, r3
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801874c:	e004      	b.n	8018758 <tcp_receive+0x364>
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018754:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018760:	4a98      	ldr	r2, [pc, #608]	@ (80189c4 <tcp_receive+0x5d0>)
 8018762:	6878      	ldr	r0, [r7, #4]
 8018764:	f7ff fdca 	bl	80182fc <tcp_free_acked_segments>
 8018768:	4602      	mov	r2, r0
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018776:	4a94      	ldr	r2, [pc, #592]	@ (80189c8 <tcp_receive+0x5d4>)
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f7ff fdbf 	bl	80182fc <tcp_free_acked_segments>
 801877e:	4602      	mov	r2, r0
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018788:	2b00      	cmp	r3, #0
 801878a:	d104      	bne.n	8018796 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018792:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018794:	e002      	b.n	801879c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2200      	movs	r2, #0
 801879a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2200      	movs	r2, #0
 80187a0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d103      	bne.n	80187b2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	2200      	movs	r2, #0
 80187ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80187b8:	4b84      	ldr	r3, [pc, #528]	@ (80189cc <tcp_receive+0x5d8>)
 80187ba:	881b      	ldrh	r3, [r3, #0]
 80187bc:	4413      	add	r3, r2
 80187be:	b29a      	uxth	r2, r3
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	8b5b      	ldrh	r3, [r3, #26]
 80187ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d035      	beq.n	801883e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d118      	bne.n	801880c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d00c      	beq.n	80187fc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80187ea:	691b      	ldr	r3, [r3, #16]
 80187ec:	685b      	ldr	r3, [r3, #4]
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7fa fd0e 	bl	8013210 <lwip_htonl>
 80187f4:	4603      	mov	r3, r0
 80187f6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	dc20      	bgt.n	801883e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	8b5b      	ldrh	r3, [r3, #26]
 8018800:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018804:	b29a      	uxth	r2, r3
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801880a:	e018      	b.n	801883e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018814:	691b      	ldr	r3, [r3, #16]
 8018816:	685b      	ldr	r3, [r3, #4]
 8018818:	4618      	mov	r0, r3
 801881a:	f7fa fcf9 	bl	8013210 <lwip_htonl>
 801881e:	4603      	mov	r3, r0
 8018820:	1ae3      	subs	r3, r4, r3
 8018822:	2b00      	cmp	r3, #0
 8018824:	dc0b      	bgt.n	801883e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	8b5b      	ldrh	r3, [r3, #26]
 801882a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801882e:	b29a      	uxth	r2, r3
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018834:	e003      	b.n	801883e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018836:	6878      	ldr	r0, [r7, #4]
 8018838:	f002 fc36 	bl	801b0a8 <tcp_send_empty_ack>
 801883c:	e000      	b.n	8018840 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801883e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018844:	2b00      	cmp	r3, #0
 8018846:	d05b      	beq.n	8018900 <tcp_receive+0x50c>
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801884c:	4b60      	ldr	r3, [pc, #384]	@ (80189d0 <tcp_receive+0x5dc>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	1ad3      	subs	r3, r2, r3
 8018852:	2b00      	cmp	r3, #0
 8018854:	da54      	bge.n	8018900 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018856:	4b5f      	ldr	r3, [pc, #380]	@ (80189d4 <tcp_receive+0x5e0>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	b29a      	uxth	r2, r3
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018860:	b29b      	uxth	r3, r3
 8018862:	1ad3      	subs	r3, r2, r3
 8018864:	b29b      	uxth	r3, r3
 8018866:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801886a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018874:	10db      	asrs	r3, r3, #3
 8018876:	b21b      	sxth	r3, r3
 8018878:	b29b      	uxth	r3, r3
 801887a:	1ad3      	subs	r3, r2, r3
 801887c:	b29b      	uxth	r3, r3
 801887e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018888:	b29a      	uxth	r2, r3
 801888a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801888e:	4413      	add	r3, r2
 8018890:	b29b      	uxth	r3, r3
 8018892:	b21a      	sxth	r2, r3
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018898:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801889c:	2b00      	cmp	r3, #0
 801889e:	da05      	bge.n	80188ac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80188a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80188a4:	425b      	negs	r3, r3
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80188ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80188b6:	109b      	asrs	r3, r3, #2
 80188b8:	b21b      	sxth	r3, r3
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	1ad3      	subs	r3, r2, r3
 80188be:	b29b      	uxth	r3, r3
 80188c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80188ca:	b29a      	uxth	r2, r3
 80188cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80188d0:	4413      	add	r3, r2
 80188d2:	b29b      	uxth	r3, r3
 80188d4:	b21a      	sxth	r2, r3
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80188e0:	10db      	asrs	r3, r3, #3
 80188e2:	b21b      	sxth	r3, r3
 80188e4:	b29a      	uxth	r2, r3
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80188ec:	b29b      	uxth	r3, r3
 80188ee:	4413      	add	r3, r2
 80188f0:	b29b      	uxth	r3, r3
 80188f2:	b21a      	sxth	r2, r3
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	2200      	movs	r2, #0
 80188fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018900:	4b35      	ldr	r3, [pc, #212]	@ (80189d8 <tcp_receive+0x5e4>)
 8018902:	881b      	ldrh	r3, [r3, #0]
 8018904:	2b00      	cmp	r3, #0
 8018906:	f000 84df 	beq.w	80192c8 <tcp_receive+0xed4>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	7d1b      	ldrb	r3, [r3, #20]
 801890e:	2b06      	cmp	r3, #6
 8018910:	f200 84da 	bhi.w	80192c8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018918:	4b30      	ldr	r3, [pc, #192]	@ (80189dc <tcp_receive+0x5e8>)
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	1ad3      	subs	r3, r2, r3
 801891e:	3b01      	subs	r3, #1
 8018920:	2b00      	cmp	r3, #0
 8018922:	f2c0 808f 	blt.w	8018a44 <tcp_receive+0x650>
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801892a:	4b2b      	ldr	r3, [pc, #172]	@ (80189d8 <tcp_receive+0x5e4>)
 801892c:	881b      	ldrh	r3, [r3, #0]
 801892e:	4619      	mov	r1, r3
 8018930:	4b2a      	ldr	r3, [pc, #168]	@ (80189dc <tcp_receive+0x5e8>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	440b      	add	r3, r1
 8018936:	1ad3      	subs	r3, r2, r3
 8018938:	3301      	adds	r3, #1
 801893a:	2b00      	cmp	r3, #0
 801893c:	f300 8082 	bgt.w	8018a44 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018940:	4b27      	ldr	r3, [pc, #156]	@ (80189e0 <tcp_receive+0x5ec>)
 8018942:	685b      	ldr	r3, [r3, #4]
 8018944:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801894a:	4b24      	ldr	r3, [pc, #144]	@ (80189dc <tcp_receive+0x5e8>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	1ad3      	subs	r3, r2, r3
 8018950:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018952:	4b23      	ldr	r3, [pc, #140]	@ (80189e0 <tcp_receive+0x5ec>)
 8018954:	685b      	ldr	r3, [r3, #4]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d106      	bne.n	8018968 <tcp_receive+0x574>
 801895a:	4b22      	ldr	r3, [pc, #136]	@ (80189e4 <tcp_receive+0x5f0>)
 801895c:	f240 5294 	movw	r2, #1428	@ 0x594
 8018960:	4921      	ldr	r1, [pc, #132]	@ (80189e8 <tcp_receive+0x5f4>)
 8018962:	4822      	ldr	r0, [pc, #136]	@ (80189ec <tcp_receive+0x5f8>)
 8018964:	f007 fa9e 	bl	801fea4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801896a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801896e:	4293      	cmp	r3, r2
 8018970:	d906      	bls.n	8018980 <tcp_receive+0x58c>
 8018972:	4b1c      	ldr	r3, [pc, #112]	@ (80189e4 <tcp_receive+0x5f0>)
 8018974:	f240 5295 	movw	r2, #1429	@ 0x595
 8018978:	491d      	ldr	r1, [pc, #116]	@ (80189f0 <tcp_receive+0x5fc>)
 801897a:	481c      	ldr	r0, [pc, #112]	@ (80189ec <tcp_receive+0x5f8>)
 801897c:	f007 fa92 	bl	801fea4 <iprintf>
      off = (u16_t)off32;
 8018980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018982:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018986:	4b16      	ldr	r3, [pc, #88]	@ (80189e0 <tcp_receive+0x5ec>)
 8018988:	685b      	ldr	r3, [r3, #4]
 801898a:	891b      	ldrh	r3, [r3, #8]
 801898c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018990:	429a      	cmp	r2, r3
 8018992:	d906      	bls.n	80189a2 <tcp_receive+0x5ae>
 8018994:	4b13      	ldr	r3, [pc, #76]	@ (80189e4 <tcp_receive+0x5f0>)
 8018996:	f240 5297 	movw	r2, #1431	@ 0x597
 801899a:	4916      	ldr	r1, [pc, #88]	@ (80189f4 <tcp_receive+0x600>)
 801899c:	4813      	ldr	r0, [pc, #76]	@ (80189ec <tcp_receive+0x5f8>)
 801899e:	f007 fa81 	bl	801fea4 <iprintf>
      inseg.len -= off;
 80189a2:	4b0f      	ldr	r3, [pc, #60]	@ (80189e0 <tcp_receive+0x5ec>)
 80189a4:	891a      	ldrh	r2, [r3, #8]
 80189a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80189aa:	1ad3      	subs	r3, r2, r3
 80189ac:	b29a      	uxth	r2, r3
 80189ae:	4b0c      	ldr	r3, [pc, #48]	@ (80189e0 <tcp_receive+0x5ec>)
 80189b0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80189b2:	4b0b      	ldr	r3, [pc, #44]	@ (80189e0 <tcp_receive+0x5ec>)
 80189b4:	685b      	ldr	r3, [r3, #4]
 80189b6:	891a      	ldrh	r2, [r3, #8]
 80189b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80189bc:	1ad3      	subs	r3, r2, r3
 80189be:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80189c0:	e02a      	b.n	8018a18 <tcp_receive+0x624>
 80189c2:	bf00      	nop
 80189c4:	0802342c 	.word	0x0802342c
 80189c8:	08023434 	.word	0x08023434
 80189cc:	200227e0 	.word	0x200227e0
 80189d0:	200227dc 	.word	0x200227dc
 80189d4:	2002279c 	.word	0x2002279c
 80189d8:	200227e2 	.word	0x200227e2
 80189dc:	200227d8 	.word	0x200227d8
 80189e0:	200227b4 	.word	0x200227b4
 80189e4:	080230c4 	.word	0x080230c4
 80189e8:	0802343c 	.word	0x0802343c
 80189ec:	08023110 	.word	0x08023110
 80189f0:	0802344c 	.word	0x0802344c
 80189f4:	0802345c 	.word	0x0802345c
        off -= p->len;
 80189f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80189fa:	895b      	ldrh	r3, [r3, #10]
 80189fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a00:	1ad3      	subs	r3, r2, r3
 8018a02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a08:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018a0a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a0e:	2200      	movs	r2, #0
 8018a10:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8018a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a1a:	895b      	ldrh	r3, [r3, #10]
 8018a1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d8e9      	bhi.n	80189f8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018a24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018a28:	4619      	mov	r1, r3
 8018a2a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018a2c:	f7fc f838 	bl	8014aa0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a34:	4a90      	ldr	r2, [pc, #576]	@ (8018c78 <tcp_receive+0x884>)
 8018a36:	6013      	str	r3, [r2, #0]
 8018a38:	4b90      	ldr	r3, [pc, #576]	@ (8018c7c <tcp_receive+0x888>)
 8018a3a:	691b      	ldr	r3, [r3, #16]
 8018a3c:	4a8e      	ldr	r2, [pc, #568]	@ (8018c78 <tcp_receive+0x884>)
 8018a3e:	6812      	ldr	r2, [r2, #0]
 8018a40:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018a42:	e00d      	b.n	8018a60 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018a44:	4b8c      	ldr	r3, [pc, #560]	@ (8018c78 <tcp_receive+0x884>)
 8018a46:	681a      	ldr	r2, [r3, #0]
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a4c:	1ad3      	subs	r3, r2, r3
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	da06      	bge.n	8018a60 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	8b5b      	ldrh	r3, [r3, #26]
 8018a56:	f043 0302 	orr.w	r3, r3, #2
 8018a5a:	b29a      	uxth	r2, r3
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018a60:	4b85      	ldr	r3, [pc, #532]	@ (8018c78 <tcp_receive+0x884>)
 8018a62:	681a      	ldr	r2, [r3, #0]
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a68:	1ad3      	subs	r3, r2, r3
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	f2c0 8427 	blt.w	80192be <tcp_receive+0xeca>
 8018a70:	4b81      	ldr	r3, [pc, #516]	@ (8018c78 <tcp_receive+0x884>)
 8018a72:	681a      	ldr	r2, [r3, #0]
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a78:	6879      	ldr	r1, [r7, #4]
 8018a7a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018a7c:	440b      	add	r3, r1
 8018a7e:	1ad3      	subs	r3, r2, r3
 8018a80:	3301      	adds	r3, #1
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	f300 841b 	bgt.w	80192be <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018a8c:	4b7a      	ldr	r3, [pc, #488]	@ (8018c78 <tcp_receive+0x884>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	429a      	cmp	r2, r3
 8018a92:	f040 8298 	bne.w	8018fc6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018a96:	4b79      	ldr	r3, [pc, #484]	@ (8018c7c <tcp_receive+0x888>)
 8018a98:	891c      	ldrh	r4, [r3, #8]
 8018a9a:	4b78      	ldr	r3, [pc, #480]	@ (8018c7c <tcp_receive+0x888>)
 8018a9c:	691b      	ldr	r3, [r3, #16]
 8018a9e:	899b      	ldrh	r3, [r3, #12]
 8018aa0:	b29b      	uxth	r3, r3
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7fa fb9e 	bl	80131e4 <lwip_htons>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	b2db      	uxtb	r3, r3
 8018aac:	f003 0303 	and.w	r3, r3, #3
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d001      	beq.n	8018ab8 <tcp_receive+0x6c4>
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	e000      	b.n	8018aba <tcp_receive+0x6c6>
 8018ab8:	2300      	movs	r3, #0
 8018aba:	4423      	add	r3, r4
 8018abc:	b29a      	uxth	r2, r3
 8018abe:	4b70      	ldr	r3, [pc, #448]	@ (8018c80 <tcp_receive+0x88c>)
 8018ac0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8018c80 <tcp_receive+0x88c>)
 8018ac8:	881b      	ldrh	r3, [r3, #0]
 8018aca:	429a      	cmp	r2, r3
 8018acc:	d274      	bcs.n	8018bb8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018ace:	4b6b      	ldr	r3, [pc, #428]	@ (8018c7c <tcp_receive+0x888>)
 8018ad0:	691b      	ldr	r3, [r3, #16]
 8018ad2:	899b      	ldrh	r3, [r3, #12]
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7fa fb84 	bl	80131e4 <lwip_htons>
 8018adc:	4603      	mov	r3, r0
 8018ade:	b2db      	uxtb	r3, r3
 8018ae0:	f003 0301 	and.w	r3, r3, #1
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d01e      	beq.n	8018b26 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018ae8:	4b64      	ldr	r3, [pc, #400]	@ (8018c7c <tcp_receive+0x888>)
 8018aea:	691b      	ldr	r3, [r3, #16]
 8018aec:	899b      	ldrh	r3, [r3, #12]
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	b21b      	sxth	r3, r3
 8018af2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018af6:	b21c      	sxth	r4, r3
 8018af8:	4b60      	ldr	r3, [pc, #384]	@ (8018c7c <tcp_receive+0x888>)
 8018afa:	691b      	ldr	r3, [r3, #16]
 8018afc:	899b      	ldrh	r3, [r3, #12]
 8018afe:	b29b      	uxth	r3, r3
 8018b00:	4618      	mov	r0, r3
 8018b02:	f7fa fb6f 	bl	80131e4 <lwip_htons>
 8018b06:	4603      	mov	r3, r0
 8018b08:	b2db      	uxtb	r3, r3
 8018b0a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018b0e:	b29b      	uxth	r3, r3
 8018b10:	4618      	mov	r0, r3
 8018b12:	f7fa fb67 	bl	80131e4 <lwip_htons>
 8018b16:	4603      	mov	r3, r0
 8018b18:	b21b      	sxth	r3, r3
 8018b1a:	4323      	orrs	r3, r4
 8018b1c:	b21a      	sxth	r2, r3
 8018b1e:	4b57      	ldr	r3, [pc, #348]	@ (8018c7c <tcp_receive+0x888>)
 8018b20:	691b      	ldr	r3, [r3, #16]
 8018b22:	b292      	uxth	r2, r2
 8018b24:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018b2a:	4b54      	ldr	r3, [pc, #336]	@ (8018c7c <tcp_receive+0x888>)
 8018b2c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018b2e:	4b53      	ldr	r3, [pc, #332]	@ (8018c7c <tcp_receive+0x888>)
 8018b30:	691b      	ldr	r3, [r3, #16]
 8018b32:	899b      	ldrh	r3, [r3, #12]
 8018b34:	b29b      	uxth	r3, r3
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7fa fb54 	bl	80131e4 <lwip_htons>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	b2db      	uxtb	r3, r3
 8018b40:	f003 0302 	and.w	r3, r3, #2
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d005      	beq.n	8018b54 <tcp_receive+0x760>
            inseg.len -= 1;
 8018b48:	4b4c      	ldr	r3, [pc, #304]	@ (8018c7c <tcp_receive+0x888>)
 8018b4a:	891b      	ldrh	r3, [r3, #8]
 8018b4c:	3b01      	subs	r3, #1
 8018b4e:	b29a      	uxth	r2, r3
 8018b50:	4b4a      	ldr	r3, [pc, #296]	@ (8018c7c <tcp_receive+0x888>)
 8018b52:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018b54:	4b49      	ldr	r3, [pc, #292]	@ (8018c7c <tcp_receive+0x888>)
 8018b56:	685b      	ldr	r3, [r3, #4]
 8018b58:	4a48      	ldr	r2, [pc, #288]	@ (8018c7c <tcp_receive+0x888>)
 8018b5a:	8912      	ldrh	r2, [r2, #8]
 8018b5c:	4611      	mov	r1, r2
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7fb fe9e 	bl	80148a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018b64:	4b45      	ldr	r3, [pc, #276]	@ (8018c7c <tcp_receive+0x888>)
 8018b66:	891c      	ldrh	r4, [r3, #8]
 8018b68:	4b44      	ldr	r3, [pc, #272]	@ (8018c7c <tcp_receive+0x888>)
 8018b6a:	691b      	ldr	r3, [r3, #16]
 8018b6c:	899b      	ldrh	r3, [r3, #12]
 8018b6e:	b29b      	uxth	r3, r3
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7fa fb37 	bl	80131e4 <lwip_htons>
 8018b76:	4603      	mov	r3, r0
 8018b78:	b2db      	uxtb	r3, r3
 8018b7a:	f003 0303 	and.w	r3, r3, #3
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d001      	beq.n	8018b86 <tcp_receive+0x792>
 8018b82:	2301      	movs	r3, #1
 8018b84:	e000      	b.n	8018b88 <tcp_receive+0x794>
 8018b86:	2300      	movs	r3, #0
 8018b88:	4423      	add	r3, r4
 8018b8a:	b29a      	uxth	r2, r3
 8018b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8018c80 <tcp_receive+0x88c>)
 8018b8e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b90:	4b3b      	ldr	r3, [pc, #236]	@ (8018c80 <tcp_receive+0x88c>)
 8018b92:	881b      	ldrh	r3, [r3, #0]
 8018b94:	461a      	mov	r2, r3
 8018b96:	4b38      	ldr	r3, [pc, #224]	@ (8018c78 <tcp_receive+0x884>)
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	441a      	add	r2, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ba0:	6879      	ldr	r1, [r7, #4]
 8018ba2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018ba4:	440b      	add	r3, r1
 8018ba6:	429a      	cmp	r2, r3
 8018ba8:	d006      	beq.n	8018bb8 <tcp_receive+0x7c4>
 8018baa:	4b36      	ldr	r3, [pc, #216]	@ (8018c84 <tcp_receive+0x890>)
 8018bac:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018bb0:	4935      	ldr	r1, [pc, #212]	@ (8018c88 <tcp_receive+0x894>)
 8018bb2:	4836      	ldr	r0, [pc, #216]	@ (8018c8c <tcp_receive+0x898>)
 8018bb4:	f007 f976 	bl	801fea4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	f000 80e6 	beq.w	8018d8e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8018c7c <tcp_receive+0x888>)
 8018bc4:	691b      	ldr	r3, [r3, #16]
 8018bc6:	899b      	ldrh	r3, [r3, #12]
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f7fa fb0a 	bl	80131e4 <lwip_htons>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	f003 0301 	and.w	r3, r3, #1
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d010      	beq.n	8018bfe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018bdc:	e00a      	b.n	8018bf4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018be2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018bee:	68f8      	ldr	r0, [r7, #12]
 8018bf0:	f7fd fcbf 	bl	8016572 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d1f0      	bne.n	8018bde <tcp_receive+0x7ea>
 8018bfc:	e0c7      	b.n	8018d8e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018c04:	e051      	b.n	8018caa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c08:	691b      	ldr	r3, [r3, #16]
 8018c0a:	899b      	ldrh	r3, [r3, #12]
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7fa fae8 	bl	80131e4 <lwip_htons>
 8018c14:	4603      	mov	r3, r0
 8018c16:	b2db      	uxtb	r3, r3
 8018c18:	f003 0301 	and.w	r3, r3, #1
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d03c      	beq.n	8018c9a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018c20:	4b16      	ldr	r3, [pc, #88]	@ (8018c7c <tcp_receive+0x888>)
 8018c22:	691b      	ldr	r3, [r3, #16]
 8018c24:	899b      	ldrh	r3, [r3, #12]
 8018c26:	b29b      	uxth	r3, r3
 8018c28:	4618      	mov	r0, r3
 8018c2a:	f7fa fadb 	bl	80131e4 <lwip_htons>
 8018c2e:	4603      	mov	r3, r0
 8018c30:	b2db      	uxtb	r3, r3
 8018c32:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d12f      	bne.n	8018c9a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018c3a:	4b10      	ldr	r3, [pc, #64]	@ (8018c7c <tcp_receive+0x888>)
 8018c3c:	691b      	ldr	r3, [r3, #16]
 8018c3e:	899b      	ldrh	r3, [r3, #12]
 8018c40:	b29c      	uxth	r4, r3
 8018c42:	2001      	movs	r0, #1
 8018c44:	f7fa face 	bl	80131e4 <lwip_htons>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	461a      	mov	r2, r3
 8018c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8018c7c <tcp_receive+0x888>)
 8018c4e:	691b      	ldr	r3, [r3, #16]
 8018c50:	4322      	orrs	r2, r4
 8018c52:	b292      	uxth	r2, r2
 8018c54:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018c56:	4b09      	ldr	r3, [pc, #36]	@ (8018c7c <tcp_receive+0x888>)
 8018c58:	891c      	ldrh	r4, [r3, #8]
 8018c5a:	4b08      	ldr	r3, [pc, #32]	@ (8018c7c <tcp_receive+0x888>)
 8018c5c:	691b      	ldr	r3, [r3, #16]
 8018c5e:	899b      	ldrh	r3, [r3, #12]
 8018c60:	b29b      	uxth	r3, r3
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7fa fabe 	bl	80131e4 <lwip_htons>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	b2db      	uxtb	r3, r3
 8018c6c:	f003 0303 	and.w	r3, r3, #3
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d00d      	beq.n	8018c90 <tcp_receive+0x89c>
 8018c74:	2301      	movs	r3, #1
 8018c76:	e00c      	b.n	8018c92 <tcp_receive+0x89e>
 8018c78:	200227d8 	.word	0x200227d8
 8018c7c:	200227b4 	.word	0x200227b4
 8018c80:	200227e2 	.word	0x200227e2
 8018c84:	080230c4 	.word	0x080230c4
 8018c88:	0802346c 	.word	0x0802346c
 8018c8c:	08023110 	.word	0x08023110
 8018c90:	2300      	movs	r3, #0
 8018c92:	4423      	add	r3, r4
 8018c94:	b29a      	uxth	r2, r3
 8018c96:	4b98      	ldr	r3, [pc, #608]	@ (8018ef8 <tcp_receive+0xb04>)
 8018c98:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c9c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018ca4:	6938      	ldr	r0, [r7, #16]
 8018ca6:	f7fd fc64 	bl	8016572 <tcp_seg_free>
            while (next &&
 8018caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d00e      	beq.n	8018cce <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018cb0:	4b91      	ldr	r3, [pc, #580]	@ (8018ef8 <tcp_receive+0xb04>)
 8018cb2:	881b      	ldrh	r3, [r3, #0]
 8018cb4:	461a      	mov	r2, r3
 8018cb6:	4b91      	ldr	r3, [pc, #580]	@ (8018efc <tcp_receive+0xb08>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	441a      	add	r2, r3
 8018cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cbe:	691b      	ldr	r3, [r3, #16]
 8018cc0:	685b      	ldr	r3, [r3, #4]
 8018cc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018cc4:	8909      	ldrh	r1, [r1, #8]
 8018cc6:	440b      	add	r3, r1
 8018cc8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	da9b      	bge.n	8018c06 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d059      	beq.n	8018d88 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018cd4:	4b88      	ldr	r3, [pc, #544]	@ (8018ef8 <tcp_receive+0xb04>)
 8018cd6:	881b      	ldrh	r3, [r3, #0]
 8018cd8:	461a      	mov	r2, r3
 8018cda:	4b88      	ldr	r3, [pc, #544]	@ (8018efc <tcp_receive+0xb08>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	441a      	add	r2, r3
 8018ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ce2:	691b      	ldr	r3, [r3, #16]
 8018ce4:	685b      	ldr	r3, [r3, #4]
 8018ce6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	dd4d      	ble.n	8018d88 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018cee:	691b      	ldr	r3, [r3, #16]
 8018cf0:	685b      	ldr	r3, [r3, #4]
 8018cf2:	b29a      	uxth	r2, r3
 8018cf4:	4b81      	ldr	r3, [pc, #516]	@ (8018efc <tcp_receive+0xb08>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	b29b      	uxth	r3, r3
 8018cfa:	1ad3      	subs	r3, r2, r3
 8018cfc:	b29a      	uxth	r2, r3
 8018cfe:	4b80      	ldr	r3, [pc, #512]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d00:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018d02:	4b7f      	ldr	r3, [pc, #508]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d04:	691b      	ldr	r3, [r3, #16]
 8018d06:	899b      	ldrh	r3, [r3, #12]
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7fa fa6a 	bl	80131e4 <lwip_htons>
 8018d10:	4603      	mov	r3, r0
 8018d12:	b2db      	uxtb	r3, r3
 8018d14:	f003 0302 	and.w	r3, r3, #2
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d005      	beq.n	8018d28 <tcp_receive+0x934>
                inseg.len -= 1;
 8018d1c:	4b78      	ldr	r3, [pc, #480]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d1e:	891b      	ldrh	r3, [r3, #8]
 8018d20:	3b01      	subs	r3, #1
 8018d22:	b29a      	uxth	r2, r3
 8018d24:	4b76      	ldr	r3, [pc, #472]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d26:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018d28:	4b75      	ldr	r3, [pc, #468]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d2a:	685b      	ldr	r3, [r3, #4]
 8018d2c:	4a74      	ldr	r2, [pc, #464]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d2e:	8912      	ldrh	r2, [r2, #8]
 8018d30:	4611      	mov	r1, r2
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7fb fdb4 	bl	80148a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018d38:	4b71      	ldr	r3, [pc, #452]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d3a:	891c      	ldrh	r4, [r3, #8]
 8018d3c:	4b70      	ldr	r3, [pc, #448]	@ (8018f00 <tcp_receive+0xb0c>)
 8018d3e:	691b      	ldr	r3, [r3, #16]
 8018d40:	899b      	ldrh	r3, [r3, #12]
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	4618      	mov	r0, r3
 8018d46:	f7fa fa4d 	bl	80131e4 <lwip_htons>
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	b2db      	uxtb	r3, r3
 8018d4e:	f003 0303 	and.w	r3, r3, #3
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d001      	beq.n	8018d5a <tcp_receive+0x966>
 8018d56:	2301      	movs	r3, #1
 8018d58:	e000      	b.n	8018d5c <tcp_receive+0x968>
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	4423      	add	r3, r4
 8018d5e:	b29a      	uxth	r2, r3
 8018d60:	4b65      	ldr	r3, [pc, #404]	@ (8018ef8 <tcp_receive+0xb04>)
 8018d62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018d64:	4b64      	ldr	r3, [pc, #400]	@ (8018ef8 <tcp_receive+0xb04>)
 8018d66:	881b      	ldrh	r3, [r3, #0]
 8018d68:	461a      	mov	r2, r3
 8018d6a:	4b64      	ldr	r3, [pc, #400]	@ (8018efc <tcp_receive+0xb08>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	441a      	add	r2, r3
 8018d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d72:	691b      	ldr	r3, [r3, #16]
 8018d74:	685b      	ldr	r3, [r3, #4]
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d006      	beq.n	8018d88 <tcp_receive+0x994>
 8018d7a:	4b62      	ldr	r3, [pc, #392]	@ (8018f04 <tcp_receive+0xb10>)
 8018d7c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018d80:	4961      	ldr	r1, [pc, #388]	@ (8018f08 <tcp_receive+0xb14>)
 8018d82:	4862      	ldr	r0, [pc, #392]	@ (8018f0c <tcp_receive+0xb18>)
 8018d84:	f007 f88e 	bl	801fea4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018d8c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8018ef8 <tcp_receive+0xb04>)
 8018d90:	881b      	ldrh	r3, [r3, #0]
 8018d92:	461a      	mov	r2, r3
 8018d94:	4b59      	ldr	r3, [pc, #356]	@ (8018efc <tcp_receive+0xb08>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	441a      	add	r2, r3
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018da2:	4b55      	ldr	r3, [pc, #340]	@ (8018ef8 <tcp_receive+0xb04>)
 8018da4:	881b      	ldrh	r3, [r3, #0]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d206      	bcs.n	8018db8 <tcp_receive+0x9c4>
 8018daa:	4b56      	ldr	r3, [pc, #344]	@ (8018f04 <tcp_receive+0xb10>)
 8018dac:	f240 6207 	movw	r2, #1543	@ 0x607
 8018db0:	4957      	ldr	r1, [pc, #348]	@ (8018f10 <tcp_receive+0xb1c>)
 8018db2:	4856      	ldr	r0, [pc, #344]	@ (8018f0c <tcp_receive+0xb18>)
 8018db4:	f007 f876 	bl	801fea4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018dbc:	4b4e      	ldr	r3, [pc, #312]	@ (8018ef8 <tcp_receive+0xb04>)
 8018dbe:	881b      	ldrh	r3, [r3, #0]
 8018dc0:	1ad3      	subs	r3, r2, r3
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7fc fd93 	bl	80158f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018dce:	4b4c      	ldr	r3, [pc, #304]	@ (8018f00 <tcp_receive+0xb0c>)
 8018dd0:	685b      	ldr	r3, [r3, #4]
 8018dd2:	891b      	ldrh	r3, [r3, #8]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d006      	beq.n	8018de6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018dd8:	4b49      	ldr	r3, [pc, #292]	@ (8018f00 <tcp_receive+0xb0c>)
 8018dda:	685b      	ldr	r3, [r3, #4]
 8018ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8018f14 <tcp_receive+0xb20>)
 8018dde:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018de0:	4b47      	ldr	r3, [pc, #284]	@ (8018f00 <tcp_receive+0xb0c>)
 8018de2:	2200      	movs	r2, #0
 8018de4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018de6:	4b46      	ldr	r3, [pc, #280]	@ (8018f00 <tcp_receive+0xb0c>)
 8018de8:	691b      	ldr	r3, [r3, #16]
 8018dea:	899b      	ldrh	r3, [r3, #12]
 8018dec:	b29b      	uxth	r3, r3
 8018dee:	4618      	mov	r0, r3
 8018df0:	f7fa f9f8 	bl	80131e4 <lwip_htons>
 8018df4:	4603      	mov	r3, r0
 8018df6:	b2db      	uxtb	r3, r3
 8018df8:	f003 0301 	and.w	r3, r3, #1
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	f000 80b8 	beq.w	8018f72 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018e02:	4b45      	ldr	r3, [pc, #276]	@ (8018f18 <tcp_receive+0xb24>)
 8018e04:	781b      	ldrb	r3, [r3, #0]
 8018e06:	f043 0320 	orr.w	r3, r3, #32
 8018e0a:	b2da      	uxtb	r2, r3
 8018e0c:	4b42      	ldr	r3, [pc, #264]	@ (8018f18 <tcp_receive+0xb24>)
 8018e0e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018e10:	e0af      	b.n	8018f72 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e16:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e1c:	691b      	ldr	r3, [r3, #16]
 8018e1e:	685b      	ldr	r3, [r3, #4]
 8018e20:	4a36      	ldr	r2, [pc, #216]	@ (8018efc <tcp_receive+0xb08>)
 8018e22:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018e24:	68bb      	ldr	r3, [r7, #8]
 8018e26:	891b      	ldrh	r3, [r3, #8]
 8018e28:	461c      	mov	r4, r3
 8018e2a:	68bb      	ldr	r3, [r7, #8]
 8018e2c:	691b      	ldr	r3, [r3, #16]
 8018e2e:	899b      	ldrh	r3, [r3, #12]
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	4618      	mov	r0, r3
 8018e34:	f7fa f9d6 	bl	80131e4 <lwip_htons>
 8018e38:	4603      	mov	r3, r0
 8018e3a:	b2db      	uxtb	r3, r3
 8018e3c:	f003 0303 	and.w	r3, r3, #3
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d001      	beq.n	8018e48 <tcp_receive+0xa54>
 8018e44:	2301      	movs	r3, #1
 8018e46:	e000      	b.n	8018e4a <tcp_receive+0xa56>
 8018e48:	2300      	movs	r3, #0
 8018e4a:	191a      	adds	r2, r3, r4
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e50:	441a      	add	r2, r3
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018e5a:	461c      	mov	r4, r3
 8018e5c:	68bb      	ldr	r3, [r7, #8]
 8018e5e:	891b      	ldrh	r3, [r3, #8]
 8018e60:	461d      	mov	r5, r3
 8018e62:	68bb      	ldr	r3, [r7, #8]
 8018e64:	691b      	ldr	r3, [r3, #16]
 8018e66:	899b      	ldrh	r3, [r3, #12]
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7fa f9ba 	bl	80131e4 <lwip_htons>
 8018e70:	4603      	mov	r3, r0
 8018e72:	b2db      	uxtb	r3, r3
 8018e74:	f003 0303 	and.w	r3, r3, #3
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d001      	beq.n	8018e80 <tcp_receive+0xa8c>
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	e000      	b.n	8018e82 <tcp_receive+0xa8e>
 8018e80:	2300      	movs	r3, #0
 8018e82:	442b      	add	r3, r5
 8018e84:	429c      	cmp	r4, r3
 8018e86:	d206      	bcs.n	8018e96 <tcp_receive+0xaa2>
 8018e88:	4b1e      	ldr	r3, [pc, #120]	@ (8018f04 <tcp_receive+0xb10>)
 8018e8a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018e8e:	4923      	ldr	r1, [pc, #140]	@ (8018f1c <tcp_receive+0xb28>)
 8018e90:	481e      	ldr	r0, [pc, #120]	@ (8018f0c <tcp_receive+0xb18>)
 8018e92:	f007 f807 	bl	801fea4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018e96:	68bb      	ldr	r3, [r7, #8]
 8018e98:	891b      	ldrh	r3, [r3, #8]
 8018e9a:	461c      	mov	r4, r3
 8018e9c:	68bb      	ldr	r3, [r7, #8]
 8018e9e:	691b      	ldr	r3, [r3, #16]
 8018ea0:	899b      	ldrh	r3, [r3, #12]
 8018ea2:	b29b      	uxth	r3, r3
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f7fa f99d 	bl	80131e4 <lwip_htons>
 8018eaa:	4603      	mov	r3, r0
 8018eac:	b2db      	uxtb	r3, r3
 8018eae:	f003 0303 	and.w	r3, r3, #3
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d001      	beq.n	8018eba <tcp_receive+0xac6>
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	e000      	b.n	8018ebc <tcp_receive+0xac8>
 8018eba:	2300      	movs	r3, #0
 8018ebc:	1919      	adds	r1, r3, r4
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018ec2:	b28b      	uxth	r3, r1
 8018ec4:	1ad3      	subs	r3, r2, r3
 8018ec6:	b29a      	uxth	r2, r3
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018ecc:	6878      	ldr	r0, [r7, #4]
 8018ece:	f7fc fd11 	bl	80158f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	685b      	ldr	r3, [r3, #4]
 8018ed6:	891b      	ldrh	r3, [r3, #8]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d028      	beq.n	8018f2e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018edc:	4b0d      	ldr	r3, [pc, #52]	@ (8018f14 <tcp_receive+0xb20>)
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d01d      	beq.n	8018f20 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8018f14 <tcp_receive+0xb20>)
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	68bb      	ldr	r3, [r7, #8]
 8018eea:	685b      	ldr	r3, [r3, #4]
 8018eec:	4619      	mov	r1, r3
 8018eee:	4610      	mov	r0, r2
 8018ef0:	f7fb ff2a 	bl	8014d48 <pbuf_cat>
 8018ef4:	e018      	b.n	8018f28 <tcp_receive+0xb34>
 8018ef6:	bf00      	nop
 8018ef8:	200227e2 	.word	0x200227e2
 8018efc:	200227d8 	.word	0x200227d8
 8018f00:	200227b4 	.word	0x200227b4
 8018f04:	080230c4 	.word	0x080230c4
 8018f08:	080234a4 	.word	0x080234a4
 8018f0c:	08023110 	.word	0x08023110
 8018f10:	080234e0 	.word	0x080234e0
 8018f14:	200227e8 	.word	0x200227e8
 8018f18:	200227e5 	.word	0x200227e5
 8018f1c:	08023500 	.word	0x08023500
            } else {
              recv_data = cseg->p;
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	685b      	ldr	r3, [r3, #4]
 8018f24:	4a70      	ldr	r2, [pc, #448]	@ (80190e8 <tcp_receive+0xcf4>)
 8018f26:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018f2e:	68bb      	ldr	r3, [r7, #8]
 8018f30:	691b      	ldr	r3, [r3, #16]
 8018f32:	899b      	ldrh	r3, [r3, #12]
 8018f34:	b29b      	uxth	r3, r3
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7fa f954 	bl	80131e4 <lwip_htons>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	f003 0301 	and.w	r3, r3, #1
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d00d      	beq.n	8018f64 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018f48:	4b68      	ldr	r3, [pc, #416]	@ (80190ec <tcp_receive+0xcf8>)
 8018f4a:	781b      	ldrb	r3, [r3, #0]
 8018f4c:	f043 0320 	orr.w	r3, r3, #32
 8018f50:	b2da      	uxtb	r2, r3
 8018f52:	4b66      	ldr	r3, [pc, #408]	@ (80190ec <tcp_receive+0xcf8>)
 8018f54:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	7d1b      	ldrb	r3, [r3, #20]
 8018f5a:	2b04      	cmp	r3, #4
 8018f5c:	d102      	bne.n	8018f64 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	2207      	movs	r2, #7
 8018f62:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018f64:	68bb      	ldr	r3, [r7, #8]
 8018f66:	681a      	ldr	r2, [r3, #0]
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018f6c:	68b8      	ldr	r0, [r7, #8]
 8018f6e:	f7fd fb00 	bl	8016572 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d008      	beq.n	8018f8c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018f7e:	691b      	ldr	r3, [r3, #16]
 8018f80:	685a      	ldr	r2, [r3, #4]
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018f86:	429a      	cmp	r2, r3
 8018f88:	f43f af43 	beq.w	8018e12 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	8b5b      	ldrh	r3, [r3, #26]
 8018f90:	f003 0301 	and.w	r3, r3, #1
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d00e      	beq.n	8018fb6 <tcp_receive+0xbc2>
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	8b5b      	ldrh	r3, [r3, #26]
 8018f9c:	f023 0301 	bic.w	r3, r3, #1
 8018fa0:	b29a      	uxth	r2, r3
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	835a      	strh	r2, [r3, #26]
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	8b5b      	ldrh	r3, [r3, #26]
 8018faa:	f043 0302 	orr.w	r3, r3, #2
 8018fae:	b29a      	uxth	r2, r3
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018fb4:	e187      	b.n	80192c6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	8b5b      	ldrh	r3, [r3, #26]
 8018fba:	f043 0301 	orr.w	r3, r3, #1
 8018fbe:	b29a      	uxth	r2, r3
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018fc4:	e17f      	b.n	80192c6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d106      	bne.n	8018fdc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018fce:	4848      	ldr	r0, [pc, #288]	@ (80190f0 <tcp_receive+0xcfc>)
 8018fd0:	f7fd fae8 	bl	80165a4 <tcp_seg_copy>
 8018fd4:	4602      	mov	r2, r0
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	675a      	str	r2, [r3, #116]	@ 0x74
 8018fda:	e16c      	b.n	80192b6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018fdc:	2300      	movs	r3, #0
 8018fde:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018fe6:	e156      	b.n	8019296 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8018fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fea:	691b      	ldr	r3, [r3, #16]
 8018fec:	685a      	ldr	r2, [r3, #4]
 8018fee:	4b41      	ldr	r3, [pc, #260]	@ (80190f4 <tcp_receive+0xd00>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	429a      	cmp	r2, r3
 8018ff4:	d11d      	bne.n	8019032 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80190f0 <tcp_receive+0xcfc>)
 8018ff8:	891a      	ldrh	r2, [r3, #8]
 8018ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ffc:	891b      	ldrh	r3, [r3, #8]
 8018ffe:	429a      	cmp	r2, r3
 8019000:	f240 814e 	bls.w	80192a0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019004:	483a      	ldr	r0, [pc, #232]	@ (80190f0 <tcp_receive+0xcfc>)
 8019006:	f7fd facd 	bl	80165a4 <tcp_seg_copy>
 801900a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801900c:	697b      	ldr	r3, [r7, #20]
 801900e:	2b00      	cmp	r3, #0
 8019010:	f000 8148 	beq.w	80192a4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8019014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019016:	2b00      	cmp	r3, #0
 8019018:	d003      	beq.n	8019022 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801901a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801901c:	697a      	ldr	r2, [r7, #20]
 801901e:	601a      	str	r2, [r3, #0]
 8019020:	e002      	b.n	8019028 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	697a      	ldr	r2, [r7, #20]
 8019026:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019028:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801902a:	6978      	ldr	r0, [r7, #20]
 801902c:	f7ff f8de 	bl	80181ec <tcp_oos_insert_segment>
                }
                break;
 8019030:	e138      	b.n	80192a4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019034:	2b00      	cmp	r3, #0
 8019036:	d117      	bne.n	8019068 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019038:	4b2e      	ldr	r3, [pc, #184]	@ (80190f4 <tcp_receive+0xd00>)
 801903a:	681a      	ldr	r2, [r3, #0]
 801903c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801903e:	691b      	ldr	r3, [r3, #16]
 8019040:	685b      	ldr	r3, [r3, #4]
 8019042:	1ad3      	subs	r3, r2, r3
 8019044:	2b00      	cmp	r3, #0
 8019046:	da57      	bge.n	80190f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019048:	4829      	ldr	r0, [pc, #164]	@ (80190f0 <tcp_receive+0xcfc>)
 801904a:	f7fd faab 	bl	80165a4 <tcp_seg_copy>
 801904e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019050:	69bb      	ldr	r3, [r7, #24]
 8019052:	2b00      	cmp	r3, #0
 8019054:	f000 8128 	beq.w	80192a8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	69ba      	ldr	r2, [r7, #24]
 801905c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801905e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019060:	69b8      	ldr	r0, [r7, #24]
 8019062:	f7ff f8c3 	bl	80181ec <tcp_oos_insert_segment>
                  }
                  break;
 8019066:	e11f      	b.n	80192a8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019068:	4b22      	ldr	r3, [pc, #136]	@ (80190f4 <tcp_receive+0xd00>)
 801906a:	681a      	ldr	r2, [r3, #0]
 801906c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801906e:	691b      	ldr	r3, [r3, #16]
 8019070:	685b      	ldr	r3, [r3, #4]
 8019072:	1ad3      	subs	r3, r2, r3
 8019074:	3b01      	subs	r3, #1
 8019076:	2b00      	cmp	r3, #0
 8019078:	db3e      	blt.n	80190f8 <tcp_receive+0xd04>
 801907a:	4b1e      	ldr	r3, [pc, #120]	@ (80190f4 <tcp_receive+0xd00>)
 801907c:	681a      	ldr	r2, [r3, #0]
 801907e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019080:	691b      	ldr	r3, [r3, #16]
 8019082:	685b      	ldr	r3, [r3, #4]
 8019084:	1ad3      	subs	r3, r2, r3
 8019086:	3301      	adds	r3, #1
 8019088:	2b00      	cmp	r3, #0
 801908a:	dc35      	bgt.n	80190f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801908c:	4818      	ldr	r0, [pc, #96]	@ (80190f0 <tcp_receive+0xcfc>)
 801908e:	f7fd fa89 	bl	80165a4 <tcp_seg_copy>
 8019092:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019094:	69fb      	ldr	r3, [r7, #28]
 8019096:	2b00      	cmp	r3, #0
 8019098:	f000 8108 	beq.w	80192ac <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801909c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801909e:	691b      	ldr	r3, [r3, #16]
 80190a0:	685b      	ldr	r3, [r3, #4]
 80190a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80190a4:	8912      	ldrh	r2, [r2, #8]
 80190a6:	441a      	add	r2, r3
 80190a8:	4b12      	ldr	r3, [pc, #72]	@ (80190f4 <tcp_receive+0xd00>)
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	1ad3      	subs	r3, r2, r3
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	dd12      	ble.n	80190d8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80190b2:	4b10      	ldr	r3, [pc, #64]	@ (80190f4 <tcp_receive+0xd00>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	b29a      	uxth	r2, r3
 80190b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190ba:	691b      	ldr	r3, [r3, #16]
 80190bc:	685b      	ldr	r3, [r3, #4]
 80190be:	b29b      	uxth	r3, r3
 80190c0:	1ad3      	subs	r3, r2, r3
 80190c2:	b29a      	uxth	r2, r3
 80190c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80190c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190ca:	685a      	ldr	r2, [r3, #4]
 80190cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190ce:	891b      	ldrh	r3, [r3, #8]
 80190d0:	4619      	mov	r1, r3
 80190d2:	4610      	mov	r0, r2
 80190d4:	f7fb fbe4 	bl	80148a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80190d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190da:	69fa      	ldr	r2, [r7, #28]
 80190dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80190de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80190e0:	69f8      	ldr	r0, [r7, #28]
 80190e2:	f7ff f883 	bl	80181ec <tcp_oos_insert_segment>
                  }
                  break;
 80190e6:	e0e1      	b.n	80192ac <tcp_receive+0xeb8>
 80190e8:	200227e8 	.word	0x200227e8
 80190ec:	200227e5 	.word	0x200227e5
 80190f0:	200227b4 	.word	0x200227b4
 80190f4:	200227d8 	.word	0x200227d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80190f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190fa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80190fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	2b00      	cmp	r3, #0
 8019102:	f040 80c5 	bne.w	8019290 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019106:	4b7f      	ldr	r3, [pc, #508]	@ (8019304 <tcp_receive+0xf10>)
 8019108:	681a      	ldr	r2, [r3, #0]
 801910a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801910c:	691b      	ldr	r3, [r3, #16]
 801910e:	685b      	ldr	r3, [r3, #4]
 8019110:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019112:	2b00      	cmp	r3, #0
 8019114:	f340 80bc 	ble.w	8019290 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801911a:	691b      	ldr	r3, [r3, #16]
 801911c:	899b      	ldrh	r3, [r3, #12]
 801911e:	b29b      	uxth	r3, r3
 8019120:	4618      	mov	r0, r3
 8019122:	f7fa f85f 	bl	80131e4 <lwip_htons>
 8019126:	4603      	mov	r3, r0
 8019128:	b2db      	uxtb	r3, r3
 801912a:	f003 0301 	and.w	r3, r3, #1
 801912e:	2b00      	cmp	r3, #0
 8019130:	f040 80be 	bne.w	80192b0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019134:	4874      	ldr	r0, [pc, #464]	@ (8019308 <tcp_receive+0xf14>)
 8019136:	f7fd fa35 	bl	80165a4 <tcp_seg_copy>
 801913a:	4602      	mov	r2, r0
 801913c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801913e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	2b00      	cmp	r3, #0
 8019146:	f000 80b5 	beq.w	80192b4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801914c:	691b      	ldr	r3, [r3, #16]
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019152:	8912      	ldrh	r2, [r2, #8]
 8019154:	441a      	add	r2, r3
 8019156:	4b6b      	ldr	r3, [pc, #428]	@ (8019304 <tcp_receive+0xf10>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	1ad3      	subs	r3, r2, r3
 801915c:	2b00      	cmp	r3, #0
 801915e:	dd12      	ble.n	8019186 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019160:	4b68      	ldr	r3, [pc, #416]	@ (8019304 <tcp_receive+0xf10>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	b29a      	uxth	r2, r3
 8019166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019168:	691b      	ldr	r3, [r3, #16]
 801916a:	685b      	ldr	r3, [r3, #4]
 801916c:	b29b      	uxth	r3, r3
 801916e:	1ad3      	subs	r3, r2, r3
 8019170:	b29a      	uxth	r2, r3
 8019172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019174:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019178:	685a      	ldr	r2, [r3, #4]
 801917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801917c:	891b      	ldrh	r3, [r3, #8]
 801917e:	4619      	mov	r1, r3
 8019180:	4610      	mov	r0, r2
 8019182:	f7fb fb8d 	bl	80148a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019186:	4b61      	ldr	r3, [pc, #388]	@ (801930c <tcp_receive+0xf18>)
 8019188:	881b      	ldrh	r3, [r3, #0]
 801918a:	461a      	mov	r2, r3
 801918c:	4b5d      	ldr	r3, [pc, #372]	@ (8019304 <tcp_receive+0xf10>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	441a      	add	r2, r3
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019196:	6879      	ldr	r1, [r7, #4]
 8019198:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801919a:	440b      	add	r3, r1
 801919c:	1ad3      	subs	r3, r2, r3
 801919e:	2b00      	cmp	r3, #0
 80191a0:	f340 8088 	ble.w	80192b4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80191a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	691b      	ldr	r3, [r3, #16]
 80191aa:	899b      	ldrh	r3, [r3, #12]
 80191ac:	b29b      	uxth	r3, r3
 80191ae:	4618      	mov	r0, r3
 80191b0:	f7fa f818 	bl	80131e4 <lwip_htons>
 80191b4:	4603      	mov	r3, r0
 80191b6:	b2db      	uxtb	r3, r3
 80191b8:	f003 0301 	and.w	r3, r3, #1
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d021      	beq.n	8019204 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80191c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	691b      	ldr	r3, [r3, #16]
 80191c6:	899b      	ldrh	r3, [r3, #12]
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	b21b      	sxth	r3, r3
 80191cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80191d0:	b21c      	sxth	r4, r3
 80191d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	691b      	ldr	r3, [r3, #16]
 80191d8:	899b      	ldrh	r3, [r3, #12]
 80191da:	b29b      	uxth	r3, r3
 80191dc:	4618      	mov	r0, r3
 80191de:	f7fa f801 	bl	80131e4 <lwip_htons>
 80191e2:	4603      	mov	r3, r0
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80191ea:	b29b      	uxth	r3, r3
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7f9 fff9 	bl	80131e4 <lwip_htons>
 80191f2:	4603      	mov	r3, r0
 80191f4:	b21b      	sxth	r3, r3
 80191f6:	4323      	orrs	r3, r4
 80191f8:	b21a      	sxth	r2, r3
 80191fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	691b      	ldr	r3, [r3, #16]
 8019200:	b292      	uxth	r2, r2
 8019202:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019208:	b29a      	uxth	r2, r3
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801920e:	4413      	add	r3, r2
 8019210:	b299      	uxth	r1, r3
 8019212:	4b3c      	ldr	r3, [pc, #240]	@ (8019304 <tcp_receive+0xf10>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	b29a      	uxth	r2, r3
 8019218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	1a8a      	subs	r2, r1, r2
 801921e:	b292      	uxth	r2, r2
 8019220:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	685a      	ldr	r2, [r3, #4]
 8019228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	891b      	ldrh	r3, [r3, #8]
 801922e:	4619      	mov	r1, r3
 8019230:	4610      	mov	r0, r2
 8019232:	f7fb fb35 	bl	80148a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	891c      	ldrh	r4, [r3, #8]
 801923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	691b      	ldr	r3, [r3, #16]
 8019242:	899b      	ldrh	r3, [r3, #12]
 8019244:	b29b      	uxth	r3, r3
 8019246:	4618      	mov	r0, r3
 8019248:	f7f9 ffcc 	bl	80131e4 <lwip_htons>
 801924c:	4603      	mov	r3, r0
 801924e:	b2db      	uxtb	r3, r3
 8019250:	f003 0303 	and.w	r3, r3, #3
 8019254:	2b00      	cmp	r3, #0
 8019256:	d001      	beq.n	801925c <tcp_receive+0xe68>
 8019258:	2301      	movs	r3, #1
 801925a:	e000      	b.n	801925e <tcp_receive+0xe6a>
 801925c:	2300      	movs	r3, #0
 801925e:	4423      	add	r3, r4
 8019260:	b29a      	uxth	r2, r3
 8019262:	4b2a      	ldr	r3, [pc, #168]	@ (801930c <tcp_receive+0xf18>)
 8019264:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019266:	4b29      	ldr	r3, [pc, #164]	@ (801930c <tcp_receive+0xf18>)
 8019268:	881b      	ldrh	r3, [r3, #0]
 801926a:	461a      	mov	r2, r3
 801926c:	4b25      	ldr	r3, [pc, #148]	@ (8019304 <tcp_receive+0xf10>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	441a      	add	r2, r3
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019276:	6879      	ldr	r1, [r7, #4]
 8019278:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801927a:	440b      	add	r3, r1
 801927c:	429a      	cmp	r2, r3
 801927e:	d019      	beq.n	80192b4 <tcp_receive+0xec0>
 8019280:	4b23      	ldr	r3, [pc, #140]	@ (8019310 <tcp_receive+0xf1c>)
 8019282:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8019286:	4923      	ldr	r1, [pc, #140]	@ (8019314 <tcp_receive+0xf20>)
 8019288:	4823      	ldr	r0, [pc, #140]	@ (8019318 <tcp_receive+0xf24>)
 801928a:	f006 fe0b 	bl	801fea4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801928e:	e011      	b.n	80192b4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019298:	2b00      	cmp	r3, #0
 801929a:	f47f aea5 	bne.w	8018fe8 <tcp_receive+0xbf4>
 801929e:	e00a      	b.n	80192b6 <tcp_receive+0xec2>
                break;
 80192a0:	bf00      	nop
 80192a2:	e008      	b.n	80192b6 <tcp_receive+0xec2>
                break;
 80192a4:	bf00      	nop
 80192a6:	e006      	b.n	80192b6 <tcp_receive+0xec2>
                  break;
 80192a8:	bf00      	nop
 80192aa:	e004      	b.n	80192b6 <tcp_receive+0xec2>
                  break;
 80192ac:	bf00      	nop
 80192ae:	e002      	b.n	80192b6 <tcp_receive+0xec2>
                  break;
 80192b0:	bf00      	nop
 80192b2:	e000      	b.n	80192b6 <tcp_receive+0xec2>
                break;
 80192b4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f001 fef6 	bl	801b0a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80192bc:	e003      	b.n	80192c6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80192be:	6878      	ldr	r0, [r7, #4]
 80192c0:	f001 fef2 	bl	801b0a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80192c4:	e01a      	b.n	80192fc <tcp_receive+0xf08>
 80192c6:	e019      	b.n	80192fc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80192c8:	4b0e      	ldr	r3, [pc, #56]	@ (8019304 <tcp_receive+0xf10>)
 80192ca:	681a      	ldr	r2, [r3, #0]
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192d0:	1ad3      	subs	r3, r2, r3
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	db0a      	blt.n	80192ec <tcp_receive+0xef8>
 80192d6:	4b0b      	ldr	r3, [pc, #44]	@ (8019304 <tcp_receive+0xf10>)
 80192d8:	681a      	ldr	r2, [r3, #0]
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192de:	6879      	ldr	r1, [r7, #4]
 80192e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80192e2:	440b      	add	r3, r1
 80192e4:	1ad3      	subs	r3, r2, r3
 80192e6:	3301      	adds	r3, #1
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	dd07      	ble.n	80192fc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	8b5b      	ldrh	r3, [r3, #26]
 80192f0:	f043 0302 	orr.w	r3, r3, #2
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80192fa:	e7ff      	b.n	80192fc <tcp_receive+0xf08>
 80192fc:	bf00      	nop
 80192fe:	3750      	adds	r7, #80	@ 0x50
 8019300:	46bd      	mov	sp, r7
 8019302:	bdb0      	pop	{r4, r5, r7, pc}
 8019304:	200227d8 	.word	0x200227d8
 8019308:	200227b4 	.word	0x200227b4
 801930c:	200227e2 	.word	0x200227e2
 8019310:	080230c4 	.word	0x080230c4
 8019314:	0802346c 	.word	0x0802346c
 8019318:	08023110 	.word	0x08023110

0801931c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801931c:	b480      	push	{r7}
 801931e:	b083      	sub	sp, #12
 8019320:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019322:	4b15      	ldr	r3, [pc, #84]	@ (8019378 <tcp_get_next_optbyte+0x5c>)
 8019324:	881b      	ldrh	r3, [r3, #0]
 8019326:	1c5a      	adds	r2, r3, #1
 8019328:	b291      	uxth	r1, r2
 801932a:	4a13      	ldr	r2, [pc, #76]	@ (8019378 <tcp_get_next_optbyte+0x5c>)
 801932c:	8011      	strh	r1, [r2, #0]
 801932e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019330:	4b12      	ldr	r3, [pc, #72]	@ (801937c <tcp_get_next_optbyte+0x60>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d004      	beq.n	8019342 <tcp_get_next_optbyte+0x26>
 8019338:	4b11      	ldr	r3, [pc, #68]	@ (8019380 <tcp_get_next_optbyte+0x64>)
 801933a:	881b      	ldrh	r3, [r3, #0]
 801933c:	88fa      	ldrh	r2, [r7, #6]
 801933e:	429a      	cmp	r2, r3
 8019340:	d208      	bcs.n	8019354 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019342:	4b10      	ldr	r3, [pc, #64]	@ (8019384 <tcp_get_next_optbyte+0x68>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	3314      	adds	r3, #20
 8019348:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801934a:	88fb      	ldrh	r3, [r7, #6]
 801934c:	683a      	ldr	r2, [r7, #0]
 801934e:	4413      	add	r3, r2
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	e00b      	b.n	801936c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019354:	88fb      	ldrh	r3, [r7, #6]
 8019356:	b2da      	uxtb	r2, r3
 8019358:	4b09      	ldr	r3, [pc, #36]	@ (8019380 <tcp_get_next_optbyte+0x64>)
 801935a:	881b      	ldrh	r3, [r3, #0]
 801935c:	b2db      	uxtb	r3, r3
 801935e:	1ad3      	subs	r3, r2, r3
 8019360:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019362:	4b06      	ldr	r3, [pc, #24]	@ (801937c <tcp_get_next_optbyte+0x60>)
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	797b      	ldrb	r3, [r7, #5]
 8019368:	4413      	add	r3, r2
 801936a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801936c:	4618      	mov	r0, r3
 801936e:	370c      	adds	r7, #12
 8019370:	46bd      	mov	sp, r7
 8019372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019376:	4770      	bx	lr
 8019378:	200227d4 	.word	0x200227d4
 801937c:	200227d0 	.word	0x200227d0
 8019380:	200227ce 	.word	0x200227ce
 8019384:	200227c8 	.word	0x200227c8

08019388 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b084      	sub	sp, #16
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d106      	bne.n	80193a4 <tcp_parseopt+0x1c>
 8019396:	4b32      	ldr	r3, [pc, #200]	@ (8019460 <tcp_parseopt+0xd8>)
 8019398:	f240 727d 	movw	r2, #1917	@ 0x77d
 801939c:	4931      	ldr	r1, [pc, #196]	@ (8019464 <tcp_parseopt+0xdc>)
 801939e:	4832      	ldr	r0, [pc, #200]	@ (8019468 <tcp_parseopt+0xe0>)
 80193a0:	f006 fd80 	bl	801fea4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80193a4:	4b31      	ldr	r3, [pc, #196]	@ (801946c <tcp_parseopt+0xe4>)
 80193a6:	881b      	ldrh	r3, [r3, #0]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d056      	beq.n	801945a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80193ac:	4b30      	ldr	r3, [pc, #192]	@ (8019470 <tcp_parseopt+0xe8>)
 80193ae:	2200      	movs	r2, #0
 80193b0:	801a      	strh	r2, [r3, #0]
 80193b2:	e046      	b.n	8019442 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80193b4:	f7ff ffb2 	bl	801931c <tcp_get_next_optbyte>
 80193b8:	4603      	mov	r3, r0
 80193ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80193bc:	7bfb      	ldrb	r3, [r7, #15]
 80193be:	2b02      	cmp	r3, #2
 80193c0:	d006      	beq.n	80193d0 <tcp_parseopt+0x48>
 80193c2:	2b02      	cmp	r3, #2
 80193c4:	dc2a      	bgt.n	801941c <tcp_parseopt+0x94>
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d042      	beq.n	8019450 <tcp_parseopt+0xc8>
 80193ca:	2b01      	cmp	r3, #1
 80193cc:	d038      	beq.n	8019440 <tcp_parseopt+0xb8>
 80193ce:	e025      	b.n	801941c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80193d0:	f7ff ffa4 	bl	801931c <tcp_get_next_optbyte>
 80193d4:	4603      	mov	r3, r0
 80193d6:	2b04      	cmp	r3, #4
 80193d8:	d13c      	bne.n	8019454 <tcp_parseopt+0xcc>
 80193da:	4b25      	ldr	r3, [pc, #148]	@ (8019470 <tcp_parseopt+0xe8>)
 80193dc:	881b      	ldrh	r3, [r3, #0]
 80193de:	3301      	adds	r3, #1
 80193e0:	4a22      	ldr	r2, [pc, #136]	@ (801946c <tcp_parseopt+0xe4>)
 80193e2:	8812      	ldrh	r2, [r2, #0]
 80193e4:	4293      	cmp	r3, r2
 80193e6:	da35      	bge.n	8019454 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80193e8:	f7ff ff98 	bl	801931c <tcp_get_next_optbyte>
 80193ec:	4603      	mov	r3, r0
 80193ee:	021b      	lsls	r3, r3, #8
 80193f0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80193f2:	f7ff ff93 	bl	801931c <tcp_get_next_optbyte>
 80193f6:	4603      	mov	r3, r0
 80193f8:	461a      	mov	r2, r3
 80193fa:	89bb      	ldrh	r3, [r7, #12]
 80193fc:	4313      	orrs	r3, r2
 80193fe:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019400:	89bb      	ldrh	r3, [r7, #12]
 8019402:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8019406:	d804      	bhi.n	8019412 <tcp_parseopt+0x8a>
 8019408:	89bb      	ldrh	r3, [r7, #12]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d001      	beq.n	8019412 <tcp_parseopt+0x8a>
 801940e:	89ba      	ldrh	r2, [r7, #12]
 8019410:	e001      	b.n	8019416 <tcp_parseopt+0x8e>
 8019412:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801941a:	e012      	b.n	8019442 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801941c:	f7ff ff7e 	bl	801931c <tcp_get_next_optbyte>
 8019420:	4603      	mov	r3, r0
 8019422:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019424:	7afb      	ldrb	r3, [r7, #11]
 8019426:	2b01      	cmp	r3, #1
 8019428:	d916      	bls.n	8019458 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801942a:	7afb      	ldrb	r3, [r7, #11]
 801942c:	b29a      	uxth	r2, r3
 801942e:	4b10      	ldr	r3, [pc, #64]	@ (8019470 <tcp_parseopt+0xe8>)
 8019430:	881b      	ldrh	r3, [r3, #0]
 8019432:	4413      	add	r3, r2
 8019434:	b29b      	uxth	r3, r3
 8019436:	3b02      	subs	r3, #2
 8019438:	b29a      	uxth	r2, r3
 801943a:	4b0d      	ldr	r3, [pc, #52]	@ (8019470 <tcp_parseopt+0xe8>)
 801943c:	801a      	strh	r2, [r3, #0]
 801943e:	e000      	b.n	8019442 <tcp_parseopt+0xba>
          break;
 8019440:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019442:	4b0b      	ldr	r3, [pc, #44]	@ (8019470 <tcp_parseopt+0xe8>)
 8019444:	881a      	ldrh	r2, [r3, #0]
 8019446:	4b09      	ldr	r3, [pc, #36]	@ (801946c <tcp_parseopt+0xe4>)
 8019448:	881b      	ldrh	r3, [r3, #0]
 801944a:	429a      	cmp	r2, r3
 801944c:	d3b2      	bcc.n	80193b4 <tcp_parseopt+0x2c>
 801944e:	e004      	b.n	801945a <tcp_parseopt+0xd2>
          return;
 8019450:	bf00      	nop
 8019452:	e002      	b.n	801945a <tcp_parseopt+0xd2>
            return;
 8019454:	bf00      	nop
 8019456:	e000      	b.n	801945a <tcp_parseopt+0xd2>
            return;
 8019458:	bf00      	nop
      }
    }
  }
}
 801945a:	3710      	adds	r7, #16
 801945c:	46bd      	mov	sp, r7
 801945e:	bd80      	pop	{r7, pc}
 8019460:	080230c4 	.word	0x080230c4
 8019464:	08023528 	.word	0x08023528
 8019468:	08023110 	.word	0x08023110
 801946c:	200227cc 	.word	0x200227cc
 8019470:	200227d4 	.word	0x200227d4

08019474 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019474:	b480      	push	{r7}
 8019476:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019478:	4b05      	ldr	r3, [pc, #20]	@ (8019490 <tcp_trigger_input_pcb_close+0x1c>)
 801947a:	781b      	ldrb	r3, [r3, #0]
 801947c:	f043 0310 	orr.w	r3, r3, #16
 8019480:	b2da      	uxtb	r2, r3
 8019482:	4b03      	ldr	r3, [pc, #12]	@ (8019490 <tcp_trigger_input_pcb_close+0x1c>)
 8019484:	701a      	strb	r2, [r3, #0]
}
 8019486:	bf00      	nop
 8019488:	46bd      	mov	sp, r7
 801948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948e:	4770      	bx	lr
 8019490:	200227e5 	.word	0x200227e5

08019494 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	60f8      	str	r0, [r7, #12]
 801949c:	60b9      	str	r1, [r7, #8]
 801949e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d00a      	beq.n	80194bc <tcp_route+0x28>
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	7a1b      	ldrb	r3, [r3, #8]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d006      	beq.n	80194bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	7a1b      	ldrb	r3, [r3, #8]
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7fa ffec 	bl	8014490 <netif_get_by_index>
 80194b8:	4603      	mov	r3, r0
 80194ba:	e003      	b.n	80194c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80194bc:	6878      	ldr	r0, [r7, #4]
 80194be:	f004 f9ed 	bl	801d89c <ip4_route>
 80194c2:	4603      	mov	r3, r0
  }
}
 80194c4:	4618      	mov	r0, r3
 80194c6:	3710      	adds	r7, #16
 80194c8:	46bd      	mov	sp, r7
 80194ca:	bd80      	pop	{r7, pc}

080194cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80194cc:	b590      	push	{r4, r7, lr}
 80194ce:	b087      	sub	sp, #28
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	60f8      	str	r0, [r7, #12]
 80194d4:	60b9      	str	r1, [r7, #8]
 80194d6:	603b      	str	r3, [r7, #0]
 80194d8:	4613      	mov	r3, r2
 80194da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d105      	bne.n	80194ee <tcp_create_segment+0x22>
 80194e2:	4b45      	ldr	r3, [pc, #276]	@ (80195f8 <tcp_create_segment+0x12c>)
 80194e4:	22a3      	movs	r2, #163	@ 0xa3
 80194e6:	4945      	ldr	r1, [pc, #276]	@ (80195fc <tcp_create_segment+0x130>)
 80194e8:	4845      	ldr	r0, [pc, #276]	@ (8019600 <tcp_create_segment+0x134>)
 80194ea:	f006 fcdb 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80194ee:	68bb      	ldr	r3, [r7, #8]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d105      	bne.n	8019500 <tcp_create_segment+0x34>
 80194f4:	4b40      	ldr	r3, [pc, #256]	@ (80195f8 <tcp_create_segment+0x12c>)
 80194f6:	22a4      	movs	r2, #164	@ 0xa4
 80194f8:	4942      	ldr	r1, [pc, #264]	@ (8019604 <tcp_create_segment+0x138>)
 80194fa:	4841      	ldr	r0, [pc, #260]	@ (8019600 <tcp_create_segment+0x134>)
 80194fc:	f006 fcd2 	bl	801fea4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019500:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019504:	009b      	lsls	r3, r3, #2
 8019506:	b2db      	uxtb	r3, r3
 8019508:	f003 0304 	and.w	r3, r3, #4
 801950c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801950e:	2003      	movs	r0, #3
 8019510:	f7fa fb3c 	bl	8013b8c <memp_malloc>
 8019514:	6138      	str	r0, [r7, #16]
 8019516:	693b      	ldr	r3, [r7, #16]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d104      	bne.n	8019526 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801951c:	68b8      	ldr	r0, [r7, #8]
 801951e:	f7fb fb45 	bl	8014bac <pbuf_free>
    return NULL;
 8019522:	2300      	movs	r3, #0
 8019524:	e063      	b.n	80195ee <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8019526:	693b      	ldr	r3, [r7, #16]
 8019528:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801952c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801952e:	693b      	ldr	r3, [r7, #16]
 8019530:	2200      	movs	r2, #0
 8019532:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	68ba      	ldr	r2, [r7, #8]
 8019538:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801953a:	68bb      	ldr	r3, [r7, #8]
 801953c:	891a      	ldrh	r2, [r3, #8]
 801953e:	7dfb      	ldrb	r3, [r7, #23]
 8019540:	b29b      	uxth	r3, r3
 8019542:	429a      	cmp	r2, r3
 8019544:	d205      	bcs.n	8019552 <tcp_create_segment+0x86>
 8019546:	4b2c      	ldr	r3, [pc, #176]	@ (80195f8 <tcp_create_segment+0x12c>)
 8019548:	22b0      	movs	r2, #176	@ 0xb0
 801954a:	492f      	ldr	r1, [pc, #188]	@ (8019608 <tcp_create_segment+0x13c>)
 801954c:	482c      	ldr	r0, [pc, #176]	@ (8019600 <tcp_create_segment+0x134>)
 801954e:	f006 fca9 	bl	801fea4 <iprintf>
  seg->len = p->tot_len - optlen;
 8019552:	68bb      	ldr	r3, [r7, #8]
 8019554:	891a      	ldrh	r2, [r3, #8]
 8019556:	7dfb      	ldrb	r3, [r7, #23]
 8019558:	b29b      	uxth	r3, r3
 801955a:	1ad3      	subs	r3, r2, r3
 801955c:	b29a      	uxth	r2, r3
 801955e:	693b      	ldr	r3, [r7, #16]
 8019560:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8019562:	693b      	ldr	r3, [r7, #16]
 8019564:	2200      	movs	r2, #0
 8019566:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019568:	2114      	movs	r1, #20
 801956a:	68b8      	ldr	r0, [r7, #8]
 801956c:	f7fb fa88 	bl	8014a80 <pbuf_add_header>
 8019570:	4603      	mov	r3, r0
 8019572:	2b00      	cmp	r3, #0
 8019574:	d004      	beq.n	8019580 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019576:	6938      	ldr	r0, [r7, #16]
 8019578:	f7fc fffb 	bl	8016572 <tcp_seg_free>
    return NULL;
 801957c:	2300      	movs	r3, #0
 801957e:	e036      	b.n	80195ee <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019580:	693b      	ldr	r3, [r7, #16]
 8019582:	685b      	ldr	r3, [r3, #4]
 8019584:	685a      	ldr	r2, [r3, #4]
 8019586:	693b      	ldr	r3, [r7, #16]
 8019588:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	8ada      	ldrh	r2, [r3, #22]
 801958e:	693b      	ldr	r3, [r7, #16]
 8019590:	691c      	ldr	r4, [r3, #16]
 8019592:	4610      	mov	r0, r2
 8019594:	f7f9 fe26 	bl	80131e4 <lwip_htons>
 8019598:	4603      	mov	r3, r0
 801959a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	8b1a      	ldrh	r2, [r3, #24]
 80195a0:	693b      	ldr	r3, [r7, #16]
 80195a2:	691c      	ldr	r4, [r3, #16]
 80195a4:	4610      	mov	r0, r2
 80195a6:	f7f9 fe1d 	bl	80131e4 <lwip_htons>
 80195aa:	4603      	mov	r3, r0
 80195ac:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	691c      	ldr	r4, [r3, #16]
 80195b2:	6838      	ldr	r0, [r7, #0]
 80195b4:	f7f9 fe2c 	bl	8013210 <lwip_htonl>
 80195b8:	4603      	mov	r3, r0
 80195ba:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80195bc:	7dfb      	ldrb	r3, [r7, #23]
 80195be:	089b      	lsrs	r3, r3, #2
 80195c0:	b2db      	uxtb	r3, r3
 80195c2:	3305      	adds	r3, #5
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	031b      	lsls	r3, r3, #12
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	79fb      	ldrb	r3, [r7, #7]
 80195cc:	b29b      	uxth	r3, r3
 80195ce:	4313      	orrs	r3, r2
 80195d0:	b29a      	uxth	r2, r3
 80195d2:	693b      	ldr	r3, [r7, #16]
 80195d4:	691c      	ldr	r4, [r3, #16]
 80195d6:	4610      	mov	r0, r2
 80195d8:	f7f9 fe04 	bl	80131e4 <lwip_htons>
 80195dc:	4603      	mov	r3, r0
 80195de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80195e0:	693b      	ldr	r3, [r7, #16]
 80195e2:	691b      	ldr	r3, [r3, #16]
 80195e4:	2200      	movs	r2, #0
 80195e6:	749a      	strb	r2, [r3, #18]
 80195e8:	2200      	movs	r2, #0
 80195ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80195ec:	693b      	ldr	r3, [r7, #16]
}
 80195ee:	4618      	mov	r0, r3
 80195f0:	371c      	adds	r7, #28
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd90      	pop	{r4, r7, pc}
 80195f6:	bf00      	nop
 80195f8:	08023544 	.word	0x08023544
 80195fc:	08023578 	.word	0x08023578
 8019600:	08023598 	.word	0x08023598
 8019604:	080235c0 	.word	0x080235c0
 8019608:	080235e4 	.word	0x080235e4

0801960c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b086      	sub	sp, #24
 8019610:	af00      	add	r7, sp, #0
 8019612:	607b      	str	r3, [r7, #4]
 8019614:	4603      	mov	r3, r0
 8019616:	73fb      	strb	r3, [r7, #15]
 8019618:	460b      	mov	r3, r1
 801961a:	81bb      	strh	r3, [r7, #12]
 801961c:	4613      	mov	r3, r2
 801961e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019620:	89bb      	ldrh	r3, [r7, #12]
 8019622:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d105      	bne.n	8019636 <tcp_pbuf_prealloc+0x2a>
 801962a:	4b30      	ldr	r3, [pc, #192]	@ (80196ec <tcp_pbuf_prealloc+0xe0>)
 801962c:	22e8      	movs	r2, #232	@ 0xe8
 801962e:	4930      	ldr	r1, [pc, #192]	@ (80196f0 <tcp_pbuf_prealloc+0xe4>)
 8019630:	4830      	ldr	r0, [pc, #192]	@ (80196f4 <tcp_pbuf_prealloc+0xe8>)
 8019632:	f006 fc37 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019636:	6a3b      	ldr	r3, [r7, #32]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d105      	bne.n	8019648 <tcp_pbuf_prealloc+0x3c>
 801963c:	4b2b      	ldr	r3, [pc, #172]	@ (80196ec <tcp_pbuf_prealloc+0xe0>)
 801963e:	22e9      	movs	r2, #233	@ 0xe9
 8019640:	492d      	ldr	r1, [pc, #180]	@ (80196f8 <tcp_pbuf_prealloc+0xec>)
 8019642:	482c      	ldr	r0, [pc, #176]	@ (80196f4 <tcp_pbuf_prealloc+0xe8>)
 8019644:	f006 fc2e 	bl	801fea4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019648:	89ba      	ldrh	r2, [r7, #12]
 801964a:	897b      	ldrh	r3, [r7, #10]
 801964c:	429a      	cmp	r2, r3
 801964e:	d221      	bcs.n	8019694 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019654:	f003 0302 	and.w	r3, r3, #2
 8019658:	2b00      	cmp	r3, #0
 801965a:	d111      	bne.n	8019680 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801965c:	6a3b      	ldr	r3, [r7, #32]
 801965e:	8b5b      	ldrh	r3, [r3, #26]
 8019660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019664:	2b00      	cmp	r3, #0
 8019666:	d115      	bne.n	8019694 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019668:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801966c:	2b00      	cmp	r3, #0
 801966e:	d007      	beq.n	8019680 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019670:	6a3b      	ldr	r3, [r7, #32]
 8019672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019674:	2b00      	cmp	r3, #0
 8019676:	d103      	bne.n	8019680 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019678:	6a3b      	ldr	r3, [r7, #32]
 801967a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801967c:	2b00      	cmp	r3, #0
 801967e:	d009      	beq.n	8019694 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019680:	89bb      	ldrh	r3, [r7, #12]
 8019682:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019686:	f023 0203 	bic.w	r2, r3, #3
 801968a:	897b      	ldrh	r3, [r7, #10]
 801968c:	4293      	cmp	r3, r2
 801968e:	bf28      	it	cs
 8019690:	4613      	movcs	r3, r2
 8019692:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019694:	8af9      	ldrh	r1, [r7, #22]
 8019696:	7bfb      	ldrb	r3, [r7, #15]
 8019698:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801969c:	4618      	mov	r0, r3
 801969e:	f7fa ffa1 	bl	80145e4 <pbuf_alloc>
 80196a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80196a4:	693b      	ldr	r3, [r7, #16]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d101      	bne.n	80196ae <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80196aa:	2300      	movs	r3, #0
 80196ac:	e019      	b.n	80196e2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80196ae:	693b      	ldr	r3, [r7, #16]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d006      	beq.n	80196c4 <tcp_pbuf_prealloc+0xb8>
 80196b6:	4b0d      	ldr	r3, [pc, #52]	@ (80196ec <tcp_pbuf_prealloc+0xe0>)
 80196b8:	f240 120b 	movw	r2, #267	@ 0x10b
 80196bc:	490f      	ldr	r1, [pc, #60]	@ (80196fc <tcp_pbuf_prealloc+0xf0>)
 80196be:	480d      	ldr	r0, [pc, #52]	@ (80196f4 <tcp_pbuf_prealloc+0xe8>)
 80196c0:	f006 fbf0 	bl	801fea4 <iprintf>
  *oversize = p->len - length;
 80196c4:	693b      	ldr	r3, [r7, #16]
 80196c6:	895a      	ldrh	r2, [r3, #10]
 80196c8:	89bb      	ldrh	r3, [r7, #12]
 80196ca:	1ad3      	subs	r3, r2, r3
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80196d2:	693b      	ldr	r3, [r7, #16]
 80196d4:	89ba      	ldrh	r2, [r7, #12]
 80196d6:	811a      	strh	r2, [r3, #8]
 80196d8:	693b      	ldr	r3, [r7, #16]
 80196da:	891a      	ldrh	r2, [r3, #8]
 80196dc:	693b      	ldr	r3, [r7, #16]
 80196de:	815a      	strh	r2, [r3, #10]
  return p;
 80196e0:	693b      	ldr	r3, [r7, #16]
}
 80196e2:	4618      	mov	r0, r3
 80196e4:	3718      	adds	r7, #24
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd80      	pop	{r7, pc}
 80196ea:	bf00      	nop
 80196ec:	08023544 	.word	0x08023544
 80196f0:	080235fc 	.word	0x080235fc
 80196f4:	08023598 	.word	0x08023598
 80196f8:	08023620 	.word	0x08023620
 80196fc:	08023640 	.word	0x08023640

08019700 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
 8019708:	460b      	mov	r3, r1
 801970a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d106      	bne.n	8019720 <tcp_write_checks+0x20>
 8019712:	4b33      	ldr	r3, [pc, #204]	@ (80197e0 <tcp_write_checks+0xe0>)
 8019714:	f240 1233 	movw	r2, #307	@ 0x133
 8019718:	4932      	ldr	r1, [pc, #200]	@ (80197e4 <tcp_write_checks+0xe4>)
 801971a:	4833      	ldr	r0, [pc, #204]	@ (80197e8 <tcp_write_checks+0xe8>)
 801971c:	f006 fbc2 	bl	801fea4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	7d1b      	ldrb	r3, [r3, #20]
 8019724:	2b04      	cmp	r3, #4
 8019726:	d00e      	beq.n	8019746 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801972c:	2b07      	cmp	r3, #7
 801972e:	d00a      	beq.n	8019746 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019734:	2b02      	cmp	r3, #2
 8019736:	d006      	beq.n	8019746 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801973c:	2b03      	cmp	r3, #3
 801973e:	d002      	beq.n	8019746 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019740:	f06f 030a 	mvn.w	r3, #10
 8019744:	e048      	b.n	80197d8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019746:	887b      	ldrh	r3, [r7, #2]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d101      	bne.n	8019750 <tcp_write_checks+0x50>
    return ERR_OK;
 801974c:	2300      	movs	r3, #0
 801974e:	e043      	b.n	80197d8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019756:	887a      	ldrh	r2, [r7, #2]
 8019758:	429a      	cmp	r2, r3
 801975a:	d909      	bls.n	8019770 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	8b5b      	ldrh	r3, [r3, #26]
 8019760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019764:	b29a      	uxth	r2, r3
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801976a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801976e:	e033      	b.n	80197d8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019776:	2b08      	cmp	r3, #8
 8019778:	d909      	bls.n	801978e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	8b5b      	ldrh	r3, [r3, #26]
 801977e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019782:	b29a      	uxth	r2, r3
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801978c:	e024      	b.n	80197d8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019794:	2b00      	cmp	r3, #0
 8019796:	d00f      	beq.n	80197b8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801979c:	2b00      	cmp	r3, #0
 801979e:	d11a      	bne.n	80197d6 <tcp_write_checks+0xd6>
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d116      	bne.n	80197d6 <tcp_write_checks+0xd6>
 80197a8:	4b0d      	ldr	r3, [pc, #52]	@ (80197e0 <tcp_write_checks+0xe0>)
 80197aa:	f240 1255 	movw	r2, #341	@ 0x155
 80197ae:	490f      	ldr	r1, [pc, #60]	@ (80197ec <tcp_write_checks+0xec>)
 80197b0:	480d      	ldr	r0, [pc, #52]	@ (80197e8 <tcp_write_checks+0xe8>)
 80197b2:	f006 fb77 	bl	801fea4 <iprintf>
 80197b6:	e00e      	b.n	80197d6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d103      	bne.n	80197c8 <tcp_write_checks+0xc8>
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d006      	beq.n	80197d6 <tcp_write_checks+0xd6>
 80197c8:	4b05      	ldr	r3, [pc, #20]	@ (80197e0 <tcp_write_checks+0xe0>)
 80197ca:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80197ce:	4908      	ldr	r1, [pc, #32]	@ (80197f0 <tcp_write_checks+0xf0>)
 80197d0:	4805      	ldr	r0, [pc, #20]	@ (80197e8 <tcp_write_checks+0xe8>)
 80197d2:	f006 fb67 	bl	801fea4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80197d6:	2300      	movs	r3, #0
}
 80197d8:	4618      	mov	r0, r3
 80197da:	3708      	adds	r7, #8
 80197dc:	46bd      	mov	sp, r7
 80197de:	bd80      	pop	{r7, pc}
 80197e0:	08023544 	.word	0x08023544
 80197e4:	08023654 	.word	0x08023654
 80197e8:	08023598 	.word	0x08023598
 80197ec:	08023674 	.word	0x08023674
 80197f0:	080236b0 	.word	0x080236b0

080197f4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80197f4:	b590      	push	{r4, r7, lr}
 80197f6:	b09d      	sub	sp, #116	@ 0x74
 80197f8:	af04      	add	r7, sp, #16
 80197fa:	60f8      	str	r0, [r7, #12]
 80197fc:	60b9      	str	r1, [r7, #8]
 80197fe:	4611      	mov	r1, r2
 8019800:	461a      	mov	r2, r3
 8019802:	460b      	mov	r3, r1
 8019804:	80fb      	strh	r3, [r7, #6]
 8019806:	4613      	mov	r3, r2
 8019808:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801980a:	2300      	movs	r3, #0
 801980c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801980e:	2300      	movs	r3, #0
 8019810:	643b      	str	r3, [r7, #64]	@ 0x40
 8019812:	2300      	movs	r3, #0
 8019814:	657b      	str	r3, [r7, #84]	@ 0x54
 8019816:	2300      	movs	r3, #0
 8019818:	653b      	str	r3, [r7, #80]	@ 0x50
 801981a:	2300      	movs	r3, #0
 801981c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 801981e:	2300      	movs	r3, #0
 8019820:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019824:	2300      	movs	r3, #0
 8019826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801982a:	2300      	movs	r3, #0
 801982c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 801982e:	2300      	movs	r3, #0
 8019830:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8019834:	2300      	movs	r3, #0
 8019836:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801983a:	2300      	movs	r3, #0
 801983c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d109      	bne.n	801985a <tcp_write+0x66>
 8019846:	4b9c      	ldr	r3, [pc, #624]	@ (8019ab8 <tcp_write+0x2c4>)
 8019848:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801984c:	499b      	ldr	r1, [pc, #620]	@ (8019abc <tcp_write+0x2c8>)
 801984e:	489c      	ldr	r0, [pc, #624]	@ (8019ac0 <tcp_write+0x2cc>)
 8019850:	f006 fb28 	bl	801fea4 <iprintf>
 8019854:	f06f 030f 	mvn.w	r3, #15
 8019858:	e379      	b.n	8019f4e <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019860:	085b      	lsrs	r3, r3, #1
 8019862:	b29a      	uxth	r2, r3
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019868:	4293      	cmp	r3, r2
 801986a:	bf28      	it	cs
 801986c:	4613      	movcs	r3, r2
 801986e:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8019870:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019872:	2b00      	cmp	r3, #0
 8019874:	d102      	bne.n	801987c <tcp_write+0x88>
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801987a:	e000      	b.n	801987e <tcp_write+0x8a>
 801987c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801987e:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019880:	68bb      	ldr	r3, [r7, #8]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d109      	bne.n	801989a <tcp_write+0xa6>
 8019886:	4b8c      	ldr	r3, [pc, #560]	@ (8019ab8 <tcp_write+0x2c4>)
 8019888:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801988c:	498d      	ldr	r1, [pc, #564]	@ (8019ac4 <tcp_write+0x2d0>)
 801988e:	488c      	ldr	r0, [pc, #560]	@ (8019ac0 <tcp_write+0x2cc>)
 8019890:	f006 fb08 	bl	801fea4 <iprintf>
 8019894:	f06f 030f 	mvn.w	r3, #15
 8019898:	e359      	b.n	8019f4e <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801989a:	88fb      	ldrh	r3, [r7, #6]
 801989c:	4619      	mov	r1, r3
 801989e:	68f8      	ldr	r0, [r7, #12]
 80198a0:	f7ff ff2e 	bl	8019700 <tcp_write_checks>
 80198a4:	4603      	mov	r3, r0
 80198a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 80198aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d002      	beq.n	80198b8 <tcp_write+0xc4>
    return err;
 80198b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80198b6:	e34a      	b.n	8019f4e <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80198be:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80198c2:	2300      	movs	r3, #0
 80198c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	f000 8127 	beq.w	8019b20 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80198d8:	e002      	b.n	80198e0 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 80198da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80198e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d1f8      	bne.n	80198da <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80198e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198ea:	7b1b      	ldrb	r3, [r3, #12]
 80198ec:	009b      	lsls	r3, r3, #2
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	f003 0304 	and.w	r3, r3, #4
 80198f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80198f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80198f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198fa:	891b      	ldrh	r3, [r3, #8]
 80198fc:	4619      	mov	r1, r3
 80198fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019900:	440b      	add	r3, r1
 8019902:	429a      	cmp	r2, r3
 8019904:	da06      	bge.n	8019914 <tcp_write+0x120>
 8019906:	4b6c      	ldr	r3, [pc, #432]	@ (8019ab8 <tcp_write+0x2c4>)
 8019908:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801990c:	496e      	ldr	r1, [pc, #440]	@ (8019ac8 <tcp_write+0x2d4>)
 801990e:	486c      	ldr	r0, [pc, #432]	@ (8019ac0 <tcp_write+0x2cc>)
 8019910:	f006 fac8 	bl	801fea4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019916:	891a      	ldrh	r2, [r3, #8]
 8019918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801991a:	4413      	add	r3, r2
 801991c:	b29b      	uxth	r3, r3
 801991e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019920:	1ad3      	subs	r3, r2, r3
 8019922:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 801992c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801992e:	895b      	ldrh	r3, [r3, #10]
 8019930:	429a      	cmp	r2, r3
 8019932:	d006      	beq.n	8019942 <tcp_write+0x14e>
 8019934:	4b60      	ldr	r3, [pc, #384]	@ (8019ab8 <tcp_write+0x2c4>)
 8019936:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801993a:	4964      	ldr	r1, [pc, #400]	@ (8019acc <tcp_write+0x2d8>)
 801993c:	4860      	ldr	r0, [pc, #384]	@ (8019ac0 <tcp_write+0x2cc>)
 801993e:	f006 fab1 	bl	801fea4 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019948:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801994a:	8afb      	ldrh	r3, [r7, #22]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d02e      	beq.n	80199ae <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019950:	8afb      	ldrh	r3, [r7, #22]
 8019952:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8019956:	429a      	cmp	r2, r3
 8019958:	d206      	bcs.n	8019968 <tcp_write+0x174>
 801995a:	4b57      	ldr	r3, [pc, #348]	@ (8019ab8 <tcp_write+0x2c4>)
 801995c:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8019960:	495b      	ldr	r1, [pc, #364]	@ (8019ad0 <tcp_write+0x2dc>)
 8019962:	4857      	ldr	r0, [pc, #348]	@ (8019ac0 <tcp_write+0x2cc>)
 8019964:	f006 fa9e 	bl	801fea4 <iprintf>
      seg = last_unsent;
 8019968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801996a:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801996c:	8afb      	ldrh	r3, [r7, #22]
 801996e:	88fa      	ldrh	r2, [r7, #6]
 8019970:	4293      	cmp	r3, r2
 8019972:	bf28      	it	cs
 8019974:	4613      	movcs	r3, r2
 8019976:	b29b      	uxth	r3, r3
 8019978:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801997c:	4293      	cmp	r3, r2
 801997e:	bf28      	it	cs
 8019980:	4613      	movcs	r3, r2
 8019982:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 8019986:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801998a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801998e:	4413      	add	r3, r2
 8019990:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 8019994:	8afa      	ldrh	r2, [r7, #22]
 8019996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801999a:	1ad3      	subs	r3, r2, r3
 801999c:	b29b      	uxth	r3, r3
 801999e:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 80199a0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80199a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80199a8:	1ad3      	subs	r3, r2, r3
 80199aa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80199ae:	8afb      	ldrh	r3, [r7, #22]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d00b      	beq.n	80199cc <tcp_write+0x1d8>
 80199b4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80199b8:	88fb      	ldrh	r3, [r7, #6]
 80199ba:	429a      	cmp	r2, r3
 80199bc:	d006      	beq.n	80199cc <tcp_write+0x1d8>
 80199be:	4b3e      	ldr	r3, [pc, #248]	@ (8019ab8 <tcp_write+0x2c4>)
 80199c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80199c4:	4943      	ldr	r1, [pc, #268]	@ (8019ad4 <tcp_write+0x2e0>)
 80199c6:	483e      	ldr	r0, [pc, #248]	@ (8019ac0 <tcp_write+0x2cc>)
 80199c8:	f006 fa6c 	bl	801fea4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80199cc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80199d0:	88fb      	ldrh	r3, [r7, #6]
 80199d2:	429a      	cmp	r2, r3
 80199d4:	f080 8172 	bcs.w	8019cbc <tcp_write+0x4c8>
 80199d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80199dc:	2b00      	cmp	r3, #0
 80199de:	f000 816d 	beq.w	8019cbc <tcp_write+0x4c8>
 80199e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80199e4:	891b      	ldrh	r3, [r3, #8]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	f000 8168 	beq.w	8019cbc <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80199ec:	88fa      	ldrh	r2, [r7, #6]
 80199ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80199f2:	1ad2      	subs	r2, r2, r3
 80199f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80199f8:	4293      	cmp	r3, r2
 80199fa:	bfa8      	it	ge
 80199fc:	4613      	movge	r3, r2
 80199fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 8019a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a02:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a04:	797b      	ldrb	r3, [r7, #5]
 8019a06:	f003 0301 	and.w	r3, r3, #1
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d02b      	beq.n	8019a66 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019a0e:	f107 0016 	add.w	r0, r7, #22
 8019a12:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8019a16:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8019a18:	2301      	movs	r3, #1
 8019a1a:	9302      	str	r3, [sp, #8]
 8019a1c:	797b      	ldrb	r3, [r7, #5]
 8019a1e:	9301      	str	r3, [sp, #4]
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	9300      	str	r3, [sp, #0]
 8019a24:	4603      	mov	r3, r0
 8019a26:	2000      	movs	r0, #0
 8019a28:	f7ff fdf0 	bl	801960c <tcp_pbuf_prealloc>
 8019a2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8019a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	f000 825a 	beq.w	8019eea <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8019a36:	8afb      	ldrh	r3, [r7, #22]
 8019a38:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a3e:	6858      	ldr	r0, [r3, #4]
 8019a40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019a44:	68ba      	ldr	r2, [r7, #8]
 8019a46:	4413      	add	r3, r2
 8019a48:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019a4a:	4619      	mov	r1, r3
 8019a4c:	f006 fbff 	bl	802024e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019a50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019a52:	f7fb f939 	bl	8014cc8 <pbuf_clen>
 8019a56:	4603      	mov	r3, r0
 8019a58:	461a      	mov	r2, r3
 8019a5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019a5e:	4413      	add	r3, r2
 8019a60:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8019a64:	e055      	b.n	8019b12 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a68:	685b      	ldr	r3, [r3, #4]
 8019a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a6c:	e002      	b.n	8019a74 <tcp_write+0x280>
 8019a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d1f8      	bne.n	8019a6e <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a7e:	7b1b      	ldrb	r3, [r3, #12]
 8019a80:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d129      	bne.n	8019adc <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a8a:	685b      	ldr	r3, [r3, #4]
 8019a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019a8e:	8952      	ldrh	r2, [r2, #10]
 8019a90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019a92:	68ba      	ldr	r2, [r7, #8]
 8019a94:	429a      	cmp	r2, r3
 8019a96:	d121      	bne.n	8019adc <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019a98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d006      	beq.n	8019aae <tcp_write+0x2ba>
 8019aa0:	4b05      	ldr	r3, [pc, #20]	@ (8019ab8 <tcp_write+0x2c4>)
 8019aa2:	f240 2231 	movw	r2, #561	@ 0x231
 8019aa6:	490c      	ldr	r1, [pc, #48]	@ (8019ad8 <tcp_write+0x2e4>)
 8019aa8:	4805      	ldr	r0, [pc, #20]	@ (8019ac0 <tcp_write+0x2cc>)
 8019aaa:	f006 f9fb 	bl	801fea4 <iprintf>
          extendlen = seglen;
 8019aae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019ab0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8019ab4:	e02d      	b.n	8019b12 <tcp_write+0x31e>
 8019ab6:	bf00      	nop
 8019ab8:	08023544 	.word	0x08023544
 8019abc:	080236e4 	.word	0x080236e4
 8019ac0:	08023598 	.word	0x08023598
 8019ac4:	080236fc 	.word	0x080236fc
 8019ac8:	08023730 	.word	0x08023730
 8019acc:	08023748 	.word	0x08023748
 8019ad0:	08023778 	.word	0x08023778
 8019ad4:	08023798 	.word	0x08023798
 8019ad8:	080237b8 	.word	0x080237b8
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019adc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019ade:	2201      	movs	r2, #1
 8019ae0:	4619      	mov	r1, r3
 8019ae2:	2000      	movs	r0, #0
 8019ae4:	f7fa fd7e 	bl	80145e4 <pbuf_alloc>
 8019ae8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8019aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	f000 81fe 	beq.w	8019eee <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019af2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019af6:	68ba      	ldr	r2, [r7, #8]
 8019af8:	441a      	add	r2, r3
 8019afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019afc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019afe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019b00:	f7fb f8e2 	bl	8014cc8 <pbuf_clen>
 8019b04:	4603      	mov	r3, r0
 8019b06:	461a      	mov	r2, r3
 8019b08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019b0c:	4413      	add	r3, r2
 8019b0e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019b12:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019b16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b18:	4413      	add	r3, r2
 8019b1a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8019b1e:	e0cd      	b.n	8019cbc <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	f000 80c8 	beq.w	8019cbc <tcp_write+0x4c8>
 8019b2c:	4b72      	ldr	r3, [pc, #456]	@ (8019cf8 <tcp_write+0x504>)
 8019b2e:	f240 224a 	movw	r2, #586	@ 0x24a
 8019b32:	4972      	ldr	r1, [pc, #456]	@ (8019cfc <tcp_write+0x508>)
 8019b34:	4872      	ldr	r0, [pc, #456]	@ (8019d00 <tcp_write+0x50c>)
 8019b36:	f006 f9b5 	bl	801fea4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019b3a:	e0bf      	b.n	8019cbc <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8019b3c:	88fa      	ldrh	r2, [r7, #6]
 8019b3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019b42:	1ad3      	subs	r3, r2, r3
 8019b44:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8019b46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b4a:	b29b      	uxth	r3, r3
 8019b4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019b4e:	1ad3      	subs	r3, r2, r3
 8019b50:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019b52:	8bfa      	ldrh	r2, [r7, #30]
 8019b54:	8c3b      	ldrh	r3, [r7, #32]
 8019b56:	4293      	cmp	r3, r2
 8019b58:	bf28      	it	cs
 8019b5a:	4613      	movcs	r3, r2
 8019b5c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019b5e:	797b      	ldrb	r3, [r7, #5]
 8019b60:	f003 0301 	and.w	r3, r3, #1
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d036      	beq.n	8019bd6 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019b68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b6c:	b29a      	uxth	r2, r3
 8019b6e:	8bbb      	ldrh	r3, [r7, #28]
 8019b70:	4413      	add	r3, r2
 8019b72:	b299      	uxth	r1, r3
 8019b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	bf0c      	ite	eq
 8019b7a:	2301      	moveq	r3, #1
 8019b7c:	2300      	movne	r3, #0
 8019b7e:	b2db      	uxtb	r3, r3
 8019b80:	f107 0016 	add.w	r0, r7, #22
 8019b84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019b86:	9302      	str	r3, [sp, #8]
 8019b88:	797b      	ldrb	r3, [r7, #5]
 8019b8a:	9301      	str	r3, [sp, #4]
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	9300      	str	r3, [sp, #0]
 8019b90:	4603      	mov	r3, r0
 8019b92:	2036      	movs	r0, #54	@ 0x36
 8019b94:	f7ff fd3a 	bl	801960c <tcp_pbuf_prealloc>
 8019b98:	6378      	str	r0, [r7, #52]	@ 0x34
 8019b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	f000 81a8 	beq.w	8019ef2 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ba4:	895b      	ldrh	r3, [r3, #10]
 8019ba6:	8bba      	ldrh	r2, [r7, #28]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d906      	bls.n	8019bba <tcp_write+0x3c6>
 8019bac:	4b52      	ldr	r3, [pc, #328]	@ (8019cf8 <tcp_write+0x504>)
 8019bae:	f240 2266 	movw	r2, #614	@ 0x266
 8019bb2:	4954      	ldr	r1, [pc, #336]	@ (8019d04 <tcp_write+0x510>)
 8019bb4:	4852      	ldr	r0, [pc, #328]	@ (8019d00 <tcp_write+0x50c>)
 8019bb6:	f006 f975 	bl	801fea4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019bbc:	685a      	ldr	r2, [r3, #4]
 8019bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bc2:	18d0      	adds	r0, r2, r3
 8019bc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019bc8:	68ba      	ldr	r2, [r7, #8]
 8019bca:	4413      	add	r3, r2
 8019bcc:	8bba      	ldrh	r2, [r7, #28]
 8019bce:	4619      	mov	r1, r3
 8019bd0:	f006 fb3d 	bl	802024e <memcpy>
 8019bd4:	e02f      	b.n	8019c36 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019bd6:	8afb      	ldrh	r3, [r7, #22]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d006      	beq.n	8019bea <tcp_write+0x3f6>
 8019bdc:	4b46      	ldr	r3, [pc, #280]	@ (8019cf8 <tcp_write+0x504>)
 8019bde:	f240 2271 	movw	r2, #625	@ 0x271
 8019be2:	4949      	ldr	r1, [pc, #292]	@ (8019d08 <tcp_write+0x514>)
 8019be4:	4846      	ldr	r0, [pc, #280]	@ (8019d00 <tcp_write+0x50c>)
 8019be6:	f006 f95d 	bl	801fea4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019bea:	8bbb      	ldrh	r3, [r7, #28]
 8019bec:	2201      	movs	r2, #1
 8019bee:	4619      	mov	r1, r3
 8019bf0:	2036      	movs	r0, #54	@ 0x36
 8019bf2:	f7fa fcf7 	bl	80145e4 <pbuf_alloc>
 8019bf6:	61b8      	str	r0, [r7, #24]
 8019bf8:	69bb      	ldr	r3, [r7, #24]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	f000 817b 	beq.w	8019ef6 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019c00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019c04:	68ba      	ldr	r2, [r7, #8]
 8019c06:	441a      	add	r2, r3
 8019c08:	69bb      	ldr	r3, [r7, #24]
 8019c0a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019c10:	b29b      	uxth	r3, r3
 8019c12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019c16:	4619      	mov	r1, r3
 8019c18:	2036      	movs	r0, #54	@ 0x36
 8019c1a:	f7fa fce3 	bl	80145e4 <pbuf_alloc>
 8019c1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8019c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d103      	bne.n	8019c2e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019c26:	69b8      	ldr	r0, [r7, #24]
 8019c28:	f7fa ffc0 	bl	8014bac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019c2c:	e166      	b.n	8019efc <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019c2e:	69b9      	ldr	r1, [r7, #24]
 8019c30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019c32:	f7fb f889 	bl	8014d48 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019c36:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019c38:	f7fb f846 	bl	8014cc8 <pbuf_clen>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	461a      	mov	r2, r3
 8019c40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019c44:	4413      	add	r3, r2
 8019c46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019c4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019c4e:	2b09      	cmp	r3, #9
 8019c50:	d903      	bls.n	8019c5a <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019c52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019c54:	f7fa ffaa 	bl	8014bac <pbuf_free>
      goto memerr;
 8019c58:	e150      	b.n	8019efc <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019c5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019c62:	441a      	add	r2, r3
 8019c64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019c68:	9300      	str	r3, [sp, #0]
 8019c6a:	4613      	mov	r3, r2
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019c70:	68f8      	ldr	r0, [r7, #12]
 8019c72:	f7ff fc2b 	bl	80194cc <tcp_create_segment>
 8019c76:	6578      	str	r0, [r7, #84]	@ 0x54
 8019c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	f000 813d 	beq.w	8019efa <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8019c80:	8afa      	ldrh	r2, [r7, #22]
 8019c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c84:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d102      	bne.n	8019c92 <tcp_write+0x49e>
      queue = seg;
 8019c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019c90:	e00c      	b.n	8019cac <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d106      	bne.n	8019ca6 <tcp_write+0x4b2>
 8019c98:	4b17      	ldr	r3, [pc, #92]	@ (8019cf8 <tcp_write+0x504>)
 8019c9a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019c9e:	491b      	ldr	r1, [pc, #108]	@ (8019d0c <tcp_write+0x518>)
 8019ca0:	4817      	ldr	r0, [pc, #92]	@ (8019d00 <tcp_write+0x50c>)
 8019ca2:	f006 f8ff 	bl	801fea4 <iprintf>
      prev_seg->next = seg;
 8019ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ca8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019caa:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019cae:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019cb0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019cb4:	8bbb      	ldrh	r3, [r7, #28]
 8019cb6:	4413      	add	r3, r2
 8019cb8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8019cbc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019cc0:	88fb      	ldrh	r3, [r7, #6]
 8019cc2:	429a      	cmp	r2, r3
 8019cc4:	f4ff af3a 	bcc.w	8019b3c <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8019cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d00b      	beq.n	8019ce6 <tcp_write+0x4f2>
 8019cce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d007      	beq.n	8019ce6 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8019cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cd8:	895a      	ldrh	r2, [r3, #10]
 8019cda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8019cde:	4413      	add	r3, r2
 8019ce0:	b29a      	uxth	r2, r3
 8019ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ce4:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019ce6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d052      	beq.n	8019d94 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8019cf4:	e02e      	b.n	8019d54 <tcp_write+0x560>
 8019cf6:	bf00      	nop
 8019cf8:	08023544 	.word	0x08023544
 8019cfc:	080237e4 	.word	0x080237e4
 8019d00:	08023598 	.word	0x08023598
 8019d04:	08023814 	.word	0x08023814
 8019d08:	08023854 	.word	0x08023854
 8019d0c:	08023864 	.word	0x08023864
      p->tot_len += oversize_used;
 8019d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d12:	891a      	ldrh	r2, [r3, #8]
 8019d14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019d18:	4413      	add	r3, r2
 8019d1a:	b29a      	uxth	r2, r3
 8019d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d1e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d112      	bne.n	8019d4e <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d2a:	685b      	ldr	r3, [r3, #4]
 8019d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019d2e:	8952      	ldrh	r2, [r2, #10]
 8019d30:	4413      	add	r3, r2
 8019d32:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019d36:	68b9      	ldr	r1, [r7, #8]
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f006 fa88 	bl	802024e <memcpy>
        p->len += oversize_used;
 8019d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d40:	895a      	ldrh	r2, [r3, #10]
 8019d42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019d46:	4413      	add	r3, r2
 8019d48:	b29a      	uxth	r2, r3
 8019d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d4c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d1da      	bne.n	8019d10 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 8019d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019d5c:	891a      	ldrh	r2, [r3, #8]
 8019d5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019d62:	4413      	add	r3, r2
 8019d64:	b29a      	uxth	r2, r3
 8019d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019d68:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8019d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019d6c:	895b      	ldrh	r3, [r3, #10]
 8019d6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d906      	bls.n	8019d84 <tcp_write+0x590>
 8019d76:	4b78      	ldr	r3, [pc, #480]	@ (8019f58 <tcp_write+0x764>)
 8019d78:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019d7c:	4977      	ldr	r1, [pc, #476]	@ (8019f5c <tcp_write+0x768>)
 8019d7e:	4878      	ldr	r0, [pc, #480]	@ (8019f60 <tcp_write+0x76c>)
 8019d80:	f006 f890 	bl	801fea4 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8019d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019d86:	895a      	ldrh	r2, [r3, #10]
 8019d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019d8c:	1ad3      	subs	r3, r2, r3
 8019d8e:	b29a      	uxth	r2, r3
 8019d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019d92:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019d94:	8afa      	ldrh	r2, [r7, #22]
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d018      	beq.n	8019dd4 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d106      	bne.n	8019db6 <tcp_write+0x5c2>
 8019da8:	4b6b      	ldr	r3, [pc, #428]	@ (8019f58 <tcp_write+0x764>)
 8019daa:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019dae:	496d      	ldr	r1, [pc, #436]	@ (8019f64 <tcp_write+0x770>)
 8019db0:	486b      	ldr	r0, [pc, #428]	@ (8019f60 <tcp_write+0x76c>)
 8019db2:	f006 f877 	bl	801fea4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019db8:	685b      	ldr	r3, [r3, #4]
 8019dba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f7fa ffc3 	bl	8014d48 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019dc4:	891a      	ldrh	r2, [r3, #8]
 8019dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019dc8:	891b      	ldrh	r3, [r3, #8]
 8019dca:	4413      	add	r3, r2
 8019dcc:	b29a      	uxth	r2, r3
 8019dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019dd0:	811a      	strh	r2, [r3, #8]
 8019dd2:	e03c      	b.n	8019e4e <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8019dd4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d038      	beq.n	8019e4e <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d003      	beq.n	8019dea <tcp_write+0x5f6>
 8019de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019de4:	685b      	ldr	r3, [r3, #4]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d106      	bne.n	8019df8 <tcp_write+0x604>
 8019dea:	4b5b      	ldr	r3, [pc, #364]	@ (8019f58 <tcp_write+0x764>)
 8019dec:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019df0:	495d      	ldr	r1, [pc, #372]	@ (8019f68 <tcp_write+0x774>)
 8019df2:	485b      	ldr	r0, [pc, #364]	@ (8019f60 <tcp_write+0x76c>)
 8019df4:	f006 f856 	bl	801fea4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019dfa:	685b      	ldr	r3, [r3, #4]
 8019dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019dfe:	e00a      	b.n	8019e16 <tcp_write+0x622>
      p->tot_len += extendlen;
 8019e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e02:	891a      	ldrh	r2, [r3, #8]
 8019e04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019e08:	4413      	add	r3, r2
 8019e0a:	b29a      	uxth	r2, r3
 8019e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e0e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d1f0      	bne.n	8019e00 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 8019e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e20:	891a      	ldrh	r2, [r3, #8]
 8019e22:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019e26:	4413      	add	r3, r2
 8019e28:	b29a      	uxth	r2, r3
 8019e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e2c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e30:	895a      	ldrh	r2, [r3, #10]
 8019e32:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019e36:	4413      	add	r3, r2
 8019e38:	b29a      	uxth	r2, r3
 8019e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e3c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019e40:	891a      	ldrh	r2, [r3, #8]
 8019e42:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019e46:	4413      	add	r3, r2
 8019e48:	b29a      	uxth	r2, r3
 8019e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019e4c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d103      	bne.n	8019e5c <tcp_write+0x668>
    pcb->unsent = queue;
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019e58:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019e5a:	e002      	b.n	8019e62 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 8019e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019e5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019e60:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019e66:	88fb      	ldrh	r3, [r7, #6]
 8019e68:	441a      	add	r2, r3
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019e74:	88fb      	ldrh	r3, [r7, #6]
 8019e76:	1ad3      	subs	r3, r2, r3
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8019e86:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d00e      	beq.n	8019eb2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d10a      	bne.n	8019eb2 <tcp_write+0x6be>
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d106      	bne.n	8019eb2 <tcp_write+0x6be>
 8019ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8019f58 <tcp_write+0x764>)
 8019ea6:	f240 3212 	movw	r2, #786	@ 0x312
 8019eaa:	4930      	ldr	r1, [pc, #192]	@ (8019f6c <tcp_write+0x778>)
 8019eac:	482c      	ldr	r0, [pc, #176]	@ (8019f60 <tcp_write+0x76c>)
 8019eae:	f005 fff9 	bl	801fea4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d016      	beq.n	8019ee6 <tcp_write+0x6f2>
 8019eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019eba:	691b      	ldr	r3, [r3, #16]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d012      	beq.n	8019ee6 <tcp_write+0x6f2>
 8019ec0:	797b      	ldrb	r3, [r7, #5]
 8019ec2:	f003 0302 	and.w	r3, r3, #2
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d10d      	bne.n	8019ee6 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ecc:	691b      	ldr	r3, [r3, #16]
 8019ece:	899b      	ldrh	r3, [r3, #12]
 8019ed0:	b29c      	uxth	r4, r3
 8019ed2:	2008      	movs	r0, #8
 8019ed4:	f7f9 f986 	bl	80131e4 <lwip_htons>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	461a      	mov	r2, r3
 8019edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ede:	691b      	ldr	r3, [r3, #16]
 8019ee0:	4322      	orrs	r2, r4
 8019ee2:	b292      	uxth	r2, r2
 8019ee4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	e031      	b.n	8019f4e <tcp_write+0x75a>
          goto memerr;
 8019eea:	bf00      	nop
 8019eec:	e006      	b.n	8019efc <tcp_write+0x708>
            goto memerr;
 8019eee:	bf00      	nop
 8019ef0:	e004      	b.n	8019efc <tcp_write+0x708>
        goto memerr;
 8019ef2:	bf00      	nop
 8019ef4:	e002      	b.n	8019efc <tcp_write+0x708>
        goto memerr;
 8019ef6:	bf00      	nop
 8019ef8:	e000      	b.n	8019efc <tcp_write+0x708>
      goto memerr;
 8019efa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	8b5b      	ldrh	r3, [r3, #26]
 8019f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f04:	b29a      	uxth	r2, r3
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d002      	beq.n	8019f16 <tcp_write+0x722>
    pbuf_free(concat_p);
 8019f10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019f12:	f7fa fe4b 	bl	8014bac <pbuf_free>
  }
  if (queue != NULL) {
 8019f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d002      	beq.n	8019f22 <tcp_write+0x72e>
    tcp_segs_free(queue);
 8019f1c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019f1e:	f7fc fb13 	bl	8016548 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d00e      	beq.n	8019f4a <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d10a      	bne.n	8019f4a <tcp_write+0x756>
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d106      	bne.n	8019f4a <tcp_write+0x756>
 8019f3c:	4b06      	ldr	r3, [pc, #24]	@ (8019f58 <tcp_write+0x764>)
 8019f3e:	f240 3227 	movw	r2, #807	@ 0x327
 8019f42:	490a      	ldr	r1, [pc, #40]	@ (8019f6c <tcp_write+0x778>)
 8019f44:	4806      	ldr	r0, [pc, #24]	@ (8019f60 <tcp_write+0x76c>)
 8019f46:	f005 ffad 	bl	801fea4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019f4e:	4618      	mov	r0, r3
 8019f50:	3764      	adds	r7, #100	@ 0x64
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bd90      	pop	{r4, r7, pc}
 8019f56:	bf00      	nop
 8019f58:	08023544 	.word	0x08023544
 8019f5c:	08023878 	.word	0x08023878
 8019f60:	08023598 	.word	0x08023598
 8019f64:	080238a4 	.word	0x080238a4
 8019f68:	080238dc 	.word	0x080238dc
 8019f6c:	08023914 	.word	0x08023914

08019f70 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019f70:	b590      	push	{r4, r7, lr}
 8019f72:	b08b      	sub	sp, #44	@ 0x2c
 8019f74:	af02      	add	r7, sp, #8
 8019f76:	6078      	str	r0, [r7, #4]
 8019f78:	460b      	mov	r3, r1
 8019f7a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	61bb      	str	r3, [r7, #24]
 8019f80:	2300      	movs	r3, #0
 8019f82:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019f84:	2300      	movs	r3, #0
 8019f86:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d106      	bne.n	8019f9c <tcp_split_unsent_seg+0x2c>
 8019f8e:	4b97      	ldr	r3, [pc, #604]	@ (801a1ec <tcp_split_unsent_seg+0x27c>)
 8019f90:	f240 324b 	movw	r2, #843	@ 0x34b
 8019f94:	4996      	ldr	r1, [pc, #600]	@ (801a1f0 <tcp_split_unsent_seg+0x280>)
 8019f96:	4897      	ldr	r0, [pc, #604]	@ (801a1f4 <tcp_split_unsent_seg+0x284>)
 8019f98:	f005 ff84 	bl	801fea4 <iprintf>

  useg = pcb->unsent;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fa0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019fa2:	697b      	ldr	r3, [r7, #20]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d102      	bne.n	8019fae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fac:	e119      	b.n	801a1e2 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 8019fae:	887b      	ldrh	r3, [r7, #2]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d109      	bne.n	8019fc8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019fb4:	4b8d      	ldr	r3, [pc, #564]	@ (801a1ec <tcp_split_unsent_seg+0x27c>)
 8019fb6:	f240 3253 	movw	r2, #851	@ 0x353
 8019fba:	498f      	ldr	r1, [pc, #572]	@ (801a1f8 <tcp_split_unsent_seg+0x288>)
 8019fbc:	488d      	ldr	r0, [pc, #564]	@ (801a1f4 <tcp_split_unsent_seg+0x284>)
 8019fbe:	f005 ff71 	bl	801fea4 <iprintf>
    return ERR_VAL;
 8019fc2:	f06f 0305 	mvn.w	r3, #5
 8019fc6:	e10c      	b.n	801a1e2 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8019fc8:	697b      	ldr	r3, [r7, #20]
 8019fca:	891b      	ldrh	r3, [r3, #8]
 8019fcc:	887a      	ldrh	r2, [r7, #2]
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	d301      	bcc.n	8019fd6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	e105      	b.n	801a1e2 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019fda:	887a      	ldrh	r2, [r7, #2]
 8019fdc:	429a      	cmp	r2, r3
 8019fde:	d906      	bls.n	8019fee <tcp_split_unsent_seg+0x7e>
 8019fe0:	4b82      	ldr	r3, [pc, #520]	@ (801a1ec <tcp_split_unsent_seg+0x27c>)
 8019fe2:	f240 325b 	movw	r2, #859	@ 0x35b
 8019fe6:	4985      	ldr	r1, [pc, #532]	@ (801a1fc <tcp_split_unsent_seg+0x28c>)
 8019fe8:	4882      	ldr	r0, [pc, #520]	@ (801a1f4 <tcp_split_unsent_seg+0x284>)
 8019fea:	f005 ff5b 	bl	801fea4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019fee:	697b      	ldr	r3, [r7, #20]
 8019ff0:	891b      	ldrh	r3, [r3, #8]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d106      	bne.n	801a004 <tcp_split_unsent_seg+0x94>
 8019ff6:	4b7d      	ldr	r3, [pc, #500]	@ (801a1ec <tcp_split_unsent_seg+0x27c>)
 8019ff8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019ffc:	4980      	ldr	r1, [pc, #512]	@ (801a200 <tcp_split_unsent_seg+0x290>)
 8019ffe:	487d      	ldr	r0, [pc, #500]	@ (801a1f4 <tcp_split_unsent_seg+0x284>)
 801a000:	f005 ff50 	bl	801fea4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a004:	697b      	ldr	r3, [r7, #20]
 801a006:	7b1b      	ldrb	r3, [r3, #12]
 801a008:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a00a:	7bfb      	ldrb	r3, [r7, #15]
 801a00c:	009b      	lsls	r3, r3, #2
 801a00e:	b2db      	uxtb	r3, r3
 801a010:	f003 0304 	and.w	r3, r3, #4
 801a014:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a016:	697b      	ldr	r3, [r7, #20]
 801a018:	891a      	ldrh	r2, [r3, #8]
 801a01a:	887b      	ldrh	r3, [r7, #2]
 801a01c:	1ad3      	subs	r3, r2, r3
 801a01e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a020:	7bbb      	ldrb	r3, [r7, #14]
 801a022:	b29a      	uxth	r2, r3
 801a024:	89bb      	ldrh	r3, [r7, #12]
 801a026:	4413      	add	r3, r2
 801a028:	b29b      	uxth	r3, r3
 801a02a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a02e:	4619      	mov	r1, r3
 801a030:	2036      	movs	r0, #54	@ 0x36
 801a032:	f7fa fad7 	bl	80145e4 <pbuf_alloc>
 801a036:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a038:	693b      	ldr	r3, [r7, #16]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	f000 80ba 	beq.w	801a1b4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a040:	697b      	ldr	r3, [r7, #20]
 801a042:	685b      	ldr	r3, [r3, #4]
 801a044:	891a      	ldrh	r2, [r3, #8]
 801a046:	697b      	ldr	r3, [r7, #20]
 801a048:	891b      	ldrh	r3, [r3, #8]
 801a04a:	1ad3      	subs	r3, r2, r3
 801a04c:	b29a      	uxth	r2, r3
 801a04e:	887b      	ldrh	r3, [r7, #2]
 801a050:	4413      	add	r3, r2
 801a052:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	6858      	ldr	r0, [r3, #4]
 801a058:	693b      	ldr	r3, [r7, #16]
 801a05a:	685a      	ldr	r2, [r3, #4]
 801a05c:	7bbb      	ldrb	r3, [r7, #14]
 801a05e:	18d1      	adds	r1, r2, r3
 801a060:	897b      	ldrh	r3, [r7, #10]
 801a062:	89ba      	ldrh	r2, [r7, #12]
 801a064:	f7fa ffa8 	bl	8014fb8 <pbuf_copy_partial>
 801a068:	4603      	mov	r3, r0
 801a06a:	461a      	mov	r2, r3
 801a06c:	89bb      	ldrh	r3, [r7, #12]
 801a06e:	4293      	cmp	r3, r2
 801a070:	f040 80a2 	bne.w	801a1b8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a074:	697b      	ldr	r3, [r7, #20]
 801a076:	691b      	ldr	r3, [r3, #16]
 801a078:	899b      	ldrh	r3, [r3, #12]
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	4618      	mov	r0, r3
 801a07e:	f7f9 f8b1 	bl	80131e4 <lwip_htons>
 801a082:	4603      	mov	r3, r0
 801a084:	b2db      	uxtb	r3, r3
 801a086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a08a:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a08c:	2300      	movs	r3, #0
 801a08e:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801a090:	7ffb      	ldrb	r3, [r7, #31]
 801a092:	f003 0308 	and.w	r3, r3, #8
 801a096:	2b00      	cmp	r3, #0
 801a098:	d007      	beq.n	801a0aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a09a:	7ffb      	ldrb	r3, [r7, #31]
 801a09c:	f023 0308 	bic.w	r3, r3, #8
 801a0a0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801a0a2:	7fbb      	ldrb	r3, [r7, #30]
 801a0a4:	f043 0308 	orr.w	r3, r3, #8
 801a0a8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801a0aa:	7ffb      	ldrb	r3, [r7, #31]
 801a0ac:	f003 0301 	and.w	r3, r3, #1
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d007      	beq.n	801a0c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a0b4:	7ffb      	ldrb	r3, [r7, #31]
 801a0b6:	f023 0301 	bic.w	r3, r3, #1
 801a0ba:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801a0bc:	7fbb      	ldrb	r3, [r7, #30]
 801a0be:	f043 0301 	orr.w	r3, r3, #1
 801a0c2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a0c4:	697b      	ldr	r3, [r7, #20]
 801a0c6:	691b      	ldr	r3, [r3, #16]
 801a0c8:	685b      	ldr	r3, [r3, #4]
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	f7f9 f8a0 	bl	8013210 <lwip_htonl>
 801a0d0:	4602      	mov	r2, r0
 801a0d2:	887b      	ldrh	r3, [r7, #2]
 801a0d4:	18d1      	adds	r1, r2, r3
 801a0d6:	7fba      	ldrb	r2, [r7, #30]
 801a0d8:	7bfb      	ldrb	r3, [r7, #15]
 801a0da:	9300      	str	r3, [sp, #0]
 801a0dc:	460b      	mov	r3, r1
 801a0de:	6939      	ldr	r1, [r7, #16]
 801a0e0:	6878      	ldr	r0, [r7, #4]
 801a0e2:	f7ff f9f3 	bl	80194cc <tcp_create_segment>
 801a0e6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801a0e8:	69bb      	ldr	r3, [r7, #24]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d066      	beq.n	801a1bc <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a0ee:	697b      	ldr	r3, [r7, #20]
 801a0f0:	685b      	ldr	r3, [r3, #4]
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f7fa fde8 	bl	8014cc8 <pbuf_clen>
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	461a      	mov	r2, r3
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a102:	1a9b      	subs	r3, r3, r2
 801a104:	b29a      	uxth	r2, r3
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a10c:	697b      	ldr	r3, [r7, #20]
 801a10e:	6858      	ldr	r0, [r3, #4]
 801a110:	697b      	ldr	r3, [r7, #20]
 801a112:	685b      	ldr	r3, [r3, #4]
 801a114:	891a      	ldrh	r2, [r3, #8]
 801a116:	89bb      	ldrh	r3, [r7, #12]
 801a118:	1ad3      	subs	r3, r2, r3
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	4619      	mov	r1, r3
 801a11e:	f7fa fbbf 	bl	80148a0 <pbuf_realloc>
  useg->len -= remainder;
 801a122:	697b      	ldr	r3, [r7, #20]
 801a124:	891a      	ldrh	r2, [r3, #8]
 801a126:	89bb      	ldrh	r3, [r7, #12]
 801a128:	1ad3      	subs	r3, r2, r3
 801a12a:	b29a      	uxth	r2, r3
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a130:	697b      	ldr	r3, [r7, #20]
 801a132:	691b      	ldr	r3, [r3, #16]
 801a134:	899b      	ldrh	r3, [r3, #12]
 801a136:	b29c      	uxth	r4, r3
 801a138:	7ffb      	ldrb	r3, [r7, #31]
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7f9 f851 	bl	80131e4 <lwip_htons>
 801a142:	4603      	mov	r3, r0
 801a144:	461a      	mov	r2, r3
 801a146:	697b      	ldr	r3, [r7, #20]
 801a148:	691b      	ldr	r3, [r3, #16]
 801a14a:	4322      	orrs	r2, r4
 801a14c:	b292      	uxth	r2, r2
 801a14e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	2200      	movs	r2, #0
 801a154:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a156:	697b      	ldr	r3, [r7, #20]
 801a158:	685b      	ldr	r3, [r3, #4]
 801a15a:	4618      	mov	r0, r3
 801a15c:	f7fa fdb4 	bl	8014cc8 <pbuf_clen>
 801a160:	4603      	mov	r3, r0
 801a162:	461a      	mov	r2, r3
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a16a:	4413      	add	r3, r2
 801a16c:	b29a      	uxth	r2, r3
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a174:	69bb      	ldr	r3, [r7, #24]
 801a176:	685b      	ldr	r3, [r3, #4]
 801a178:	4618      	mov	r0, r3
 801a17a:	f7fa fda5 	bl	8014cc8 <pbuf_clen>
 801a17e:	4603      	mov	r3, r0
 801a180:	461a      	mov	r2, r3
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a188:	4413      	add	r3, r2
 801a18a:	b29a      	uxth	r2, r3
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a192:	697b      	ldr	r3, [r7, #20]
 801a194:	681a      	ldr	r2, [r3, #0]
 801a196:	69bb      	ldr	r3, [r7, #24]
 801a198:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a19a:	697b      	ldr	r3, [r7, #20]
 801a19c:	69ba      	ldr	r2, [r7, #24]
 801a19e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a1a0:	69bb      	ldr	r3, [r7, #24]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d103      	bne.n	801a1b0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	e016      	b.n	801a1e2 <tcp_split_unsent_seg+0x272>
    goto memerr;
 801a1b4:	bf00      	nop
 801a1b6:	e002      	b.n	801a1be <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a1b8:	bf00      	nop
 801a1ba:	e000      	b.n	801a1be <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a1bc:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a1be:	69bb      	ldr	r3, [r7, #24]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d006      	beq.n	801a1d2 <tcp_split_unsent_seg+0x262>
 801a1c4:	4b09      	ldr	r3, [pc, #36]	@ (801a1ec <tcp_split_unsent_seg+0x27c>)
 801a1c6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a1ca:	490e      	ldr	r1, [pc, #56]	@ (801a204 <tcp_split_unsent_seg+0x294>)
 801a1cc:	4809      	ldr	r0, [pc, #36]	@ (801a1f4 <tcp_split_unsent_seg+0x284>)
 801a1ce:	f005 fe69 	bl	801fea4 <iprintf>
  if (p != NULL) {
 801a1d2:	693b      	ldr	r3, [r7, #16]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d002      	beq.n	801a1de <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 801a1d8:	6938      	ldr	r0, [r7, #16]
 801a1da:	f7fa fce7 	bl	8014bac <pbuf_free>
  }

  return ERR_MEM;
 801a1de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3724      	adds	r7, #36	@ 0x24
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd90      	pop	{r4, r7, pc}
 801a1ea:	bf00      	nop
 801a1ec:	08023544 	.word	0x08023544
 801a1f0:	08023934 	.word	0x08023934
 801a1f4:	08023598 	.word	0x08023598
 801a1f8:	08023958 	.word	0x08023958
 801a1fc:	0802397c 	.word	0x0802397c
 801a200:	0802398c 	.word	0x0802398c
 801a204:	0802399c 	.word	0x0802399c

0801a208 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a208:	b590      	push	{r4, r7, lr}
 801a20a:	b085      	sub	sp, #20
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d106      	bne.n	801a224 <tcp_send_fin+0x1c>
 801a216:	4b21      	ldr	r3, [pc, #132]	@ (801a29c <tcp_send_fin+0x94>)
 801a218:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a21c:	4920      	ldr	r1, [pc, #128]	@ (801a2a0 <tcp_send_fin+0x98>)
 801a21e:	4821      	ldr	r0, [pc, #132]	@ (801a2a4 <tcp_send_fin+0x9c>)
 801a220:	f005 fe40 	bl	801fea4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d02e      	beq.n	801a28a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a230:	60fb      	str	r3, [r7, #12]
 801a232:	e002      	b.n	801a23a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d1f8      	bne.n	801a234 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	691b      	ldr	r3, [r3, #16]
 801a246:	899b      	ldrh	r3, [r3, #12]
 801a248:	b29b      	uxth	r3, r3
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7f8 ffca 	bl	80131e4 <lwip_htons>
 801a250:	4603      	mov	r3, r0
 801a252:	b2db      	uxtb	r3, r3
 801a254:	f003 0307 	and.w	r3, r3, #7
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d116      	bne.n	801a28a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	691b      	ldr	r3, [r3, #16]
 801a260:	899b      	ldrh	r3, [r3, #12]
 801a262:	b29c      	uxth	r4, r3
 801a264:	2001      	movs	r0, #1
 801a266:	f7f8 ffbd 	bl	80131e4 <lwip_htons>
 801a26a:	4603      	mov	r3, r0
 801a26c:	461a      	mov	r2, r3
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	691b      	ldr	r3, [r3, #16]
 801a272:	4322      	orrs	r2, r4
 801a274:	b292      	uxth	r2, r2
 801a276:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	8b5b      	ldrh	r3, [r3, #26]
 801a27c:	f043 0320 	orr.w	r3, r3, #32
 801a280:	b29a      	uxth	r2, r3
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a286:	2300      	movs	r3, #0
 801a288:	e004      	b.n	801a294 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a28a:	2101      	movs	r1, #1
 801a28c:	6878      	ldr	r0, [r7, #4]
 801a28e:	f000 f80b 	bl	801a2a8 <tcp_enqueue_flags>
 801a292:	4603      	mov	r3, r0
}
 801a294:	4618      	mov	r0, r3
 801a296:	3714      	adds	r7, #20
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd90      	pop	{r4, r7, pc}
 801a29c:	08023544 	.word	0x08023544
 801a2a0:	080239a8 	.word	0x080239a8
 801a2a4:	08023598 	.word	0x08023598

0801a2a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b088      	sub	sp, #32
 801a2ac:	af02      	add	r7, sp, #8
 801a2ae:	6078      	str	r0, [r7, #4]
 801a2b0:	460b      	mov	r3, r1
 801a2b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a2bc:	78fb      	ldrb	r3, [r7, #3]
 801a2be:	f003 0303 	and.w	r3, r3, #3
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d106      	bne.n	801a2d4 <tcp_enqueue_flags+0x2c>
 801a2c6:	4b67      	ldr	r3, [pc, #412]	@ (801a464 <tcp_enqueue_flags+0x1bc>)
 801a2c8:	f240 4211 	movw	r2, #1041	@ 0x411
 801a2cc:	4966      	ldr	r1, [pc, #408]	@ (801a468 <tcp_enqueue_flags+0x1c0>)
 801a2ce:	4867      	ldr	r0, [pc, #412]	@ (801a46c <tcp_enqueue_flags+0x1c4>)
 801a2d0:	f005 fde8 	bl	801fea4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d106      	bne.n	801a2e8 <tcp_enqueue_flags+0x40>
 801a2da:	4b62      	ldr	r3, [pc, #392]	@ (801a464 <tcp_enqueue_flags+0x1bc>)
 801a2dc:	f240 4213 	movw	r2, #1043	@ 0x413
 801a2e0:	4963      	ldr	r1, [pc, #396]	@ (801a470 <tcp_enqueue_flags+0x1c8>)
 801a2e2:	4862      	ldr	r0, [pc, #392]	@ (801a46c <tcp_enqueue_flags+0x1c4>)
 801a2e4:	f005 fdde 	bl	801fea4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a2e8:	78fb      	ldrb	r3, [r7, #3]
 801a2ea:	f003 0302 	and.w	r3, r3, #2
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d001      	beq.n	801a2f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a2f6:	7dfb      	ldrb	r3, [r7, #23]
 801a2f8:	009b      	lsls	r3, r3, #2
 801a2fa:	b2db      	uxtb	r3, r3
 801a2fc:	f003 0304 	and.w	r3, r3, #4
 801a300:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a302:	7dbb      	ldrb	r3, [r7, #22]
 801a304:	b29b      	uxth	r3, r3
 801a306:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a30a:	4619      	mov	r1, r3
 801a30c:	2036      	movs	r0, #54	@ 0x36
 801a30e:	f7fa f969 	bl	80145e4 <pbuf_alloc>
 801a312:	60f8      	str	r0, [r7, #12]
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d109      	bne.n	801a32e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	8b5b      	ldrh	r3, [r3, #26]
 801a31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a322:	b29a      	uxth	r2, r3
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a32c:	e095      	b.n	801a45a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	895a      	ldrh	r2, [r3, #10]
 801a332:	7dbb      	ldrb	r3, [r7, #22]
 801a334:	b29b      	uxth	r3, r3
 801a336:	429a      	cmp	r2, r3
 801a338:	d206      	bcs.n	801a348 <tcp_enqueue_flags+0xa0>
 801a33a:	4b4a      	ldr	r3, [pc, #296]	@ (801a464 <tcp_enqueue_flags+0x1bc>)
 801a33c:	f240 4239 	movw	r2, #1081	@ 0x439
 801a340:	494c      	ldr	r1, [pc, #304]	@ (801a474 <tcp_enqueue_flags+0x1cc>)
 801a342:	484a      	ldr	r0, [pc, #296]	@ (801a46c <tcp_enqueue_flags+0x1c4>)
 801a344:	f005 fdae 	bl	801fea4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a34c:	78fa      	ldrb	r2, [r7, #3]
 801a34e:	7dfb      	ldrb	r3, [r7, #23]
 801a350:	9300      	str	r3, [sp, #0]
 801a352:	460b      	mov	r3, r1
 801a354:	68f9      	ldr	r1, [r7, #12]
 801a356:	6878      	ldr	r0, [r7, #4]
 801a358:	f7ff f8b8 	bl	80194cc <tcp_create_segment>
 801a35c:	60b8      	str	r0, [r7, #8]
 801a35e:	68bb      	ldr	r3, [r7, #8]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d109      	bne.n	801a378 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	8b5b      	ldrh	r3, [r3, #26]
 801a368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a36c:	b29a      	uxth	r2, r3
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a376:	e070      	b.n	801a45a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	691b      	ldr	r3, [r3, #16]
 801a37c:	f003 0303 	and.w	r3, r3, #3
 801a380:	2b00      	cmp	r3, #0
 801a382:	d006      	beq.n	801a392 <tcp_enqueue_flags+0xea>
 801a384:	4b37      	ldr	r3, [pc, #220]	@ (801a464 <tcp_enqueue_flags+0x1bc>)
 801a386:	f240 4242 	movw	r2, #1090	@ 0x442
 801a38a:	493b      	ldr	r1, [pc, #236]	@ (801a478 <tcp_enqueue_flags+0x1d0>)
 801a38c:	4837      	ldr	r0, [pc, #220]	@ (801a46c <tcp_enqueue_flags+0x1c4>)
 801a38e:	f005 fd89 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	891b      	ldrh	r3, [r3, #8]
 801a396:	2b00      	cmp	r3, #0
 801a398:	d006      	beq.n	801a3a8 <tcp_enqueue_flags+0x100>
 801a39a:	4b32      	ldr	r3, [pc, #200]	@ (801a464 <tcp_enqueue_flags+0x1bc>)
 801a39c:	f240 4243 	movw	r2, #1091	@ 0x443
 801a3a0:	4936      	ldr	r1, [pc, #216]	@ (801a47c <tcp_enqueue_flags+0x1d4>)
 801a3a2:	4832      	ldr	r0, [pc, #200]	@ (801a46c <tcp_enqueue_flags+0x1c4>)
 801a3a4:	f005 fd7e 	bl	801fea4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d103      	bne.n	801a3b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	68ba      	ldr	r2, [r7, #8]
 801a3b4:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a3b6:	e00d      	b.n	801a3d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3bc:	613b      	str	r3, [r7, #16]
 801a3be:	e002      	b.n	801a3c6 <tcp_enqueue_flags+0x11e>
 801a3c0:	693b      	ldr	r3, [r7, #16]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	613b      	str	r3, [r7, #16]
 801a3c6:	693b      	ldr	r3, [r7, #16]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d1f8      	bne.n	801a3c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a3ce:	693b      	ldr	r3, [r7, #16]
 801a3d0:	68ba      	ldr	r2, [r7, #8]
 801a3d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a3dc:	78fb      	ldrb	r3, [r7, #3]
 801a3de:	f003 0302 	and.w	r3, r3, #2
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d104      	bne.n	801a3f0 <tcp_enqueue_flags+0x148>
 801a3e6:	78fb      	ldrb	r3, [r7, #3]
 801a3e8:	f003 0301 	and.w	r3, r3, #1
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d004      	beq.n	801a3fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a3f4:	1c5a      	adds	r2, r3, #1
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a3fa:	78fb      	ldrb	r3, [r7, #3]
 801a3fc:	f003 0301 	and.w	r3, r3, #1
 801a400:	2b00      	cmp	r3, #0
 801a402:	d006      	beq.n	801a412 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	8b5b      	ldrh	r3, [r3, #26]
 801a408:	f043 0320 	orr.w	r3, r3, #32
 801a40c:	b29a      	uxth	r2, r3
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	685b      	ldr	r3, [r3, #4]
 801a416:	4618      	mov	r0, r3
 801a418:	f7fa fc56 	bl	8014cc8 <pbuf_clen>
 801a41c:	4603      	mov	r3, r0
 801a41e:	461a      	mov	r2, r3
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a426:	4413      	add	r3, r2
 801a428:	b29a      	uxth	r2, r3
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a436:	2b00      	cmp	r3, #0
 801a438:	d00e      	beq.n	801a458 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d10a      	bne.n	801a458 <tcp_enqueue_flags+0x1b0>
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a446:	2b00      	cmp	r3, #0
 801a448:	d106      	bne.n	801a458 <tcp_enqueue_flags+0x1b0>
 801a44a:	4b06      	ldr	r3, [pc, #24]	@ (801a464 <tcp_enqueue_flags+0x1bc>)
 801a44c:	f240 4265 	movw	r2, #1125	@ 0x465
 801a450:	490b      	ldr	r1, [pc, #44]	@ (801a480 <tcp_enqueue_flags+0x1d8>)
 801a452:	4806      	ldr	r0, [pc, #24]	@ (801a46c <tcp_enqueue_flags+0x1c4>)
 801a454:	f005 fd26 	bl	801fea4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a458:	2300      	movs	r3, #0
}
 801a45a:	4618      	mov	r0, r3
 801a45c:	3718      	adds	r7, #24
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd80      	pop	{r7, pc}
 801a462:	bf00      	nop
 801a464:	08023544 	.word	0x08023544
 801a468:	080239c4 	.word	0x080239c4
 801a46c:	08023598 	.word	0x08023598
 801a470:	08023a1c 	.word	0x08023a1c
 801a474:	08023a3c 	.word	0x08023a3c
 801a478:	08023a78 	.word	0x08023a78
 801a47c:	08023a90 	.word	0x08023a90
 801a480:	08023abc 	.word	0x08023abc

0801a484 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a484:	b5b0      	push	{r4, r5, r7, lr}
 801a486:	b08a      	sub	sp, #40	@ 0x28
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d106      	bne.n	801a4a0 <tcp_output+0x1c>
 801a492:	4b8a      	ldr	r3, [pc, #552]	@ (801a6bc <tcp_output+0x238>)
 801a494:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801a498:	4989      	ldr	r1, [pc, #548]	@ (801a6c0 <tcp_output+0x23c>)
 801a49a:	488a      	ldr	r0, [pc, #552]	@ (801a6c4 <tcp_output+0x240>)
 801a49c:	f005 fd02 	bl	801fea4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	7d1b      	ldrb	r3, [r3, #20]
 801a4a4:	2b01      	cmp	r3, #1
 801a4a6:	d106      	bne.n	801a4b6 <tcp_output+0x32>
 801a4a8:	4b84      	ldr	r3, [pc, #528]	@ (801a6bc <tcp_output+0x238>)
 801a4aa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801a4ae:	4986      	ldr	r1, [pc, #536]	@ (801a6c8 <tcp_output+0x244>)
 801a4b0:	4884      	ldr	r0, [pc, #528]	@ (801a6c4 <tcp_output+0x240>)
 801a4b2:	f005 fcf7 	bl	801fea4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a4b6:	4b85      	ldr	r3, [pc, #532]	@ (801a6cc <tcp_output+0x248>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	687a      	ldr	r2, [r7, #4]
 801a4bc:	429a      	cmp	r2, r3
 801a4be:	d101      	bne.n	801a4c4 <tcp_output+0x40>
    return ERR_OK;
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	e1d1      	b.n	801a868 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	bf28      	it	cs
 801a4d4:	4613      	movcs	r3, r2
 801a4d6:	b29b      	uxth	r3, r3
 801a4d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d10b      	bne.n	801a4fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	8b5b      	ldrh	r3, [r3, #26]
 801a4ea:	f003 0302 	and.w	r3, r3, #2
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	f000 81ad 	beq.w	801a84e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801a4f4:	6878      	ldr	r0, [r7, #4]
 801a4f6:	f000 fdd7 	bl	801b0a8 <tcp_send_empty_ack>
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	e1b4      	b.n	801a868 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a4fe:	6879      	ldr	r1, [r7, #4]
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	3304      	adds	r3, #4
 801a504:	461a      	mov	r2, r3
 801a506:	6878      	ldr	r0, [r7, #4]
 801a508:	f7fe ffc4 	bl	8019494 <tcp_route>
 801a50c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a50e:	697b      	ldr	r3, [r7, #20]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d102      	bne.n	801a51a <tcp_output+0x96>
    return ERR_RTE;
 801a514:	f06f 0303 	mvn.w	r3, #3
 801a518:	e1a6      	b.n	801a868 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d003      	beq.n	801a528 <tcp_output+0xa4>
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d111      	bne.n	801a54c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a528:	697b      	ldr	r3, [r7, #20]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d002      	beq.n	801a534 <tcp_output+0xb0>
 801a52e:	697b      	ldr	r3, [r7, #20]
 801a530:	3304      	adds	r3, #4
 801a532:	e000      	b.n	801a536 <tcp_output+0xb2>
 801a534:	2300      	movs	r3, #0
 801a536:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a538:	693b      	ldr	r3, [r7, #16]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d102      	bne.n	801a544 <tcp_output+0xc0>
      return ERR_RTE;
 801a53e:	f06f 0303 	mvn.w	r3, #3
 801a542:	e191      	b.n	801a868 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a544:	693b      	ldr	r3, [r7, #16]
 801a546:	681a      	ldr	r2, [r3, #0]
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a54e:	691b      	ldr	r3, [r3, #16]
 801a550:	685b      	ldr	r3, [r3, #4]
 801a552:	4618      	mov	r0, r3
 801a554:	f7f8 fe5c 	bl	8013210 <lwip_htonl>
 801a558:	4602      	mov	r2, r0
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a55e:	1ad3      	subs	r3, r2, r3
 801a560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a562:	8912      	ldrh	r2, [r2, #8]
 801a564:	4413      	add	r3, r2
 801a566:	69ba      	ldr	r2, [r7, #24]
 801a568:	429a      	cmp	r2, r3
 801a56a:	d227      	bcs.n	801a5bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a572:	461a      	mov	r2, r3
 801a574:	69bb      	ldr	r3, [r7, #24]
 801a576:	4293      	cmp	r3, r2
 801a578:	d114      	bne.n	801a5a4 <tcp_output+0x120>
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d110      	bne.n	801a5a4 <tcp_output+0x120>
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d10b      	bne.n	801a5a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2200      	movs	r2, #0
 801a590:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	2201      	movs	r2, #1
 801a598:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	2200      	movs	r2, #0
 801a5a0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	8b5b      	ldrh	r3, [r3, #26]
 801a5a8:	f003 0302 	and.w	r3, r3, #2
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	f000 8150 	beq.w	801a852 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801a5b2:	6878      	ldr	r0, [r7, #4]
 801a5b4:	f000 fd78 	bl	801b0a8 <tcp_send_empty_ack>
 801a5b8:	4603      	mov	r3, r0
 801a5ba:	e155      	b.n	801a868 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	2200      	movs	r2, #0
 801a5c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a5c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a5ca:	6a3b      	ldr	r3, [r7, #32]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	f000 811f 	beq.w	801a810 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801a5d2:	e002      	b.n	801a5da <tcp_output+0x156>
 801a5d4:	6a3b      	ldr	r3, [r7, #32]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	623b      	str	r3, [r7, #32]
 801a5da:	6a3b      	ldr	r3, [r7, #32]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d1f8      	bne.n	801a5d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a5e2:	e115      	b.n	801a810 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e6:	691b      	ldr	r3, [r3, #16]
 801a5e8:	899b      	ldrh	r3, [r3, #12]
 801a5ea:	b29b      	uxth	r3, r3
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	f7f8 fdf9 	bl	80131e4 <lwip_htons>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	b2db      	uxtb	r3, r3
 801a5f6:	f003 0304 	and.w	r3, r3, #4
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d006      	beq.n	801a60c <tcp_output+0x188>
 801a5fe:	4b2f      	ldr	r3, [pc, #188]	@ (801a6bc <tcp_output+0x238>)
 801a600:	f240 5236 	movw	r2, #1334	@ 0x536
 801a604:	4932      	ldr	r1, [pc, #200]	@ (801a6d0 <tcp_output+0x24c>)
 801a606:	482f      	ldr	r0, [pc, #188]	@ (801a6c4 <tcp_output+0x240>)
 801a608:	f005 fc4c 	bl	801fea4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a610:	2b00      	cmp	r3, #0
 801a612:	d01f      	beq.n	801a654 <tcp_output+0x1d0>
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	8b5b      	ldrh	r3, [r3, #26]
 801a618:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d119      	bne.n	801a654 <tcp_output+0x1d0>
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a624:	2b00      	cmp	r3, #0
 801a626:	d00b      	beq.n	801a640 <tcp_output+0x1bc>
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d110      	bne.n	801a654 <tcp_output+0x1d0>
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a636:	891a      	ldrh	r2, [r3, #8]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a63c:	429a      	cmp	r2, r3
 801a63e:	d209      	bcs.n	801a654 <tcp_output+0x1d0>
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a646:	2b00      	cmp	r3, #0
 801a648:	d004      	beq.n	801a654 <tcp_output+0x1d0>
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a650:	2b08      	cmp	r3, #8
 801a652:	d901      	bls.n	801a658 <tcp_output+0x1d4>
 801a654:	2301      	movs	r3, #1
 801a656:	e000      	b.n	801a65a <tcp_output+0x1d6>
 801a658:	2300      	movs	r3, #0
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d106      	bne.n	801a66c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	8b5b      	ldrh	r3, [r3, #26]
 801a662:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a666:	2b00      	cmp	r3, #0
 801a668:	f000 80e7 	beq.w	801a83a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	7d1b      	ldrb	r3, [r3, #20]
 801a670:	2b02      	cmp	r3, #2
 801a672:	d00d      	beq.n	801a690 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a676:	691b      	ldr	r3, [r3, #16]
 801a678:	899b      	ldrh	r3, [r3, #12]
 801a67a:	b29c      	uxth	r4, r3
 801a67c:	2010      	movs	r0, #16
 801a67e:	f7f8 fdb1 	bl	80131e4 <lwip_htons>
 801a682:	4603      	mov	r3, r0
 801a684:	461a      	mov	r2, r3
 801a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a688:	691b      	ldr	r3, [r3, #16]
 801a68a:	4322      	orrs	r2, r4
 801a68c:	b292      	uxth	r2, r2
 801a68e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a690:	697a      	ldr	r2, [r7, #20]
 801a692:	6879      	ldr	r1, [r7, #4]
 801a694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a696:	f000 f90b 	bl	801a8b0 <tcp_output_segment>
 801a69a:	4603      	mov	r3, r0
 801a69c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d016      	beq.n	801a6d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	8b5b      	ldrh	r3, [r3, #26]
 801a6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a6ae:	b29a      	uxth	r2, r3
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	835a      	strh	r2, [r3, #26]
      return err;
 801a6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6b8:	e0d6      	b.n	801a868 <tcp_output+0x3e4>
 801a6ba:	bf00      	nop
 801a6bc:	08023544 	.word	0x08023544
 801a6c0:	08023ae4 	.word	0x08023ae4
 801a6c4:	08023598 	.word	0x08023598
 801a6c8:	08023afc 	.word	0x08023afc
 801a6cc:	200227ec 	.word	0x200227ec
 801a6d0:	08023b24 	.word	0x08023b24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6d6:	2200      	movs	r2, #0
 801a6d8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6dc:	681a      	ldr	r2, [r3, #0]
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	7d1b      	ldrb	r3, [r3, #20]
 801a6e6:	2b02      	cmp	r3, #2
 801a6e8:	d006      	beq.n	801a6f8 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	8b5b      	ldrh	r3, [r3, #26]
 801a6ee:	f023 0303 	bic.w	r3, r3, #3
 801a6f2:	b29a      	uxth	r2, r3
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6fa:	691b      	ldr	r3, [r3, #16]
 801a6fc:	685b      	ldr	r3, [r3, #4]
 801a6fe:	4618      	mov	r0, r3
 801a700:	f7f8 fd86 	bl	8013210 <lwip_htonl>
 801a704:	4604      	mov	r4, r0
 801a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a708:	891b      	ldrh	r3, [r3, #8]
 801a70a:	461d      	mov	r5, r3
 801a70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a70e:	691b      	ldr	r3, [r3, #16]
 801a710:	899b      	ldrh	r3, [r3, #12]
 801a712:	b29b      	uxth	r3, r3
 801a714:	4618      	mov	r0, r3
 801a716:	f7f8 fd65 	bl	80131e4 <lwip_htons>
 801a71a:	4603      	mov	r3, r0
 801a71c:	b2db      	uxtb	r3, r3
 801a71e:	f003 0303 	and.w	r3, r3, #3
 801a722:	2b00      	cmp	r3, #0
 801a724:	d001      	beq.n	801a72a <tcp_output+0x2a6>
 801a726:	2301      	movs	r3, #1
 801a728:	e000      	b.n	801a72c <tcp_output+0x2a8>
 801a72a:	2300      	movs	r3, #0
 801a72c:	442b      	add	r3, r5
 801a72e:	4423      	add	r3, r4
 801a730:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a736:	68bb      	ldr	r3, [r7, #8]
 801a738:	1ad3      	subs	r3, r2, r3
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	da02      	bge.n	801a744 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	68ba      	ldr	r2, [r7, #8]
 801a742:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a746:	891b      	ldrh	r3, [r3, #8]
 801a748:	461c      	mov	r4, r3
 801a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a74c:	691b      	ldr	r3, [r3, #16]
 801a74e:	899b      	ldrh	r3, [r3, #12]
 801a750:	b29b      	uxth	r3, r3
 801a752:	4618      	mov	r0, r3
 801a754:	f7f8 fd46 	bl	80131e4 <lwip_htons>
 801a758:	4603      	mov	r3, r0
 801a75a:	b2db      	uxtb	r3, r3
 801a75c:	f003 0303 	and.w	r3, r3, #3
 801a760:	2b00      	cmp	r3, #0
 801a762:	d001      	beq.n	801a768 <tcp_output+0x2e4>
 801a764:	2301      	movs	r3, #1
 801a766:	e000      	b.n	801a76a <tcp_output+0x2e6>
 801a768:	2300      	movs	r3, #0
 801a76a:	4423      	add	r3, r4
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d049      	beq.n	801a804 <tcp_output+0x380>
      seg->next = NULL;
 801a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a772:	2200      	movs	r2, #0
 801a774:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d105      	bne.n	801a78a <tcp_output+0x306>
        pcb->unacked = seg;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a782:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a786:	623b      	str	r3, [r7, #32]
 801a788:	e03f      	b.n	801a80a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a78c:	691b      	ldr	r3, [r3, #16]
 801a78e:	685b      	ldr	r3, [r3, #4]
 801a790:	4618      	mov	r0, r3
 801a792:	f7f8 fd3d 	bl	8013210 <lwip_htonl>
 801a796:	4604      	mov	r4, r0
 801a798:	6a3b      	ldr	r3, [r7, #32]
 801a79a:	691b      	ldr	r3, [r3, #16]
 801a79c:	685b      	ldr	r3, [r3, #4]
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f7f8 fd36 	bl	8013210 <lwip_htonl>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	1ae3      	subs	r3, r4, r3
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	da24      	bge.n	801a7f6 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	3370      	adds	r3, #112	@ 0x70
 801a7b0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a7b2:	e002      	b.n	801a7ba <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a7b4:	69fb      	ldr	r3, [r7, #28]
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a7ba:	69fb      	ldr	r3, [r7, #28]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d011      	beq.n	801a7e6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a7c2:	69fb      	ldr	r3, [r7, #28]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	691b      	ldr	r3, [r3, #16]
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f7f8 fd20 	bl	8013210 <lwip_htonl>
 801a7d0:	4604      	mov	r4, r0
 801a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7d4:	691b      	ldr	r3, [r3, #16]
 801a7d6:	685b      	ldr	r3, [r3, #4]
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f7f8 fd19 	bl	8013210 <lwip_htonl>
 801a7de:	4603      	mov	r3, r0
 801a7e0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	dbe6      	blt.n	801a7b4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801a7e6:	69fb      	ldr	r3, [r7, #28]
 801a7e8:	681a      	ldr	r2, [r3, #0]
 801a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ec:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a7ee:	69fb      	ldr	r3, [r7, #28]
 801a7f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7f2:	601a      	str	r2, [r3, #0]
 801a7f4:	e009      	b.n	801a80a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a7f6:	6a3b      	ldr	r3, [r7, #32]
 801a7f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7fa:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a7fc:	6a3b      	ldr	r3, [r7, #32]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	623b      	str	r3, [r7, #32]
 801a802:	e002      	b.n	801a80a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a804:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a806:	f7fb feb4 	bl	8016572 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a80e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a812:	2b00      	cmp	r3, #0
 801a814:	d012      	beq.n	801a83c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a818:	691b      	ldr	r3, [r3, #16]
 801a81a:	685b      	ldr	r3, [r3, #4]
 801a81c:	4618      	mov	r0, r3
 801a81e:	f7f8 fcf7 	bl	8013210 <lwip_htonl>
 801a822:	4602      	mov	r2, r0
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a828:	1ad3      	subs	r3, r2, r3
 801a82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a82c:	8912      	ldrh	r2, [r2, #8]
 801a82e:	4413      	add	r3, r2
  while (seg != NULL &&
 801a830:	69ba      	ldr	r2, [r7, #24]
 801a832:	429a      	cmp	r2, r3
 801a834:	f4bf aed6 	bcs.w	801a5e4 <tcp_output+0x160>
 801a838:	e000      	b.n	801a83c <tcp_output+0x3b8>
      break;
 801a83a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a840:	2b00      	cmp	r3, #0
 801a842:	d108      	bne.n	801a856 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	2200      	movs	r2, #0
 801a848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a84c:	e004      	b.n	801a858 <tcp_output+0x3d4>
    goto output_done;
 801a84e:	bf00      	nop
 801a850:	e002      	b.n	801a858 <tcp_output+0x3d4>
    goto output_done;
 801a852:	bf00      	nop
 801a854:	e000      	b.n	801a858 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a856:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	8b5b      	ldrh	r3, [r3, #26]
 801a85c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a860:	b29a      	uxth	r2, r3
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a866:	2300      	movs	r3, #0
}
 801a868:	4618      	mov	r0, r3
 801a86a:	3728      	adds	r7, #40	@ 0x28
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bdb0      	pop	{r4, r5, r7, pc}

0801a870 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b082      	sub	sp, #8
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d106      	bne.n	801a88c <tcp_output_segment_busy+0x1c>
 801a87e:	4b09      	ldr	r3, [pc, #36]	@ (801a8a4 <tcp_output_segment_busy+0x34>)
 801a880:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a884:	4908      	ldr	r1, [pc, #32]	@ (801a8a8 <tcp_output_segment_busy+0x38>)
 801a886:	4809      	ldr	r0, [pc, #36]	@ (801a8ac <tcp_output_segment_busy+0x3c>)
 801a888:	f005 fb0c 	bl	801fea4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	7b9b      	ldrb	r3, [r3, #14]
 801a892:	2b01      	cmp	r3, #1
 801a894:	d001      	beq.n	801a89a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a896:	2301      	movs	r3, #1
 801a898:	e000      	b.n	801a89c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a89a:	2300      	movs	r3, #0
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	3708      	adds	r7, #8
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd80      	pop	{r7, pc}
 801a8a4:	08023544 	.word	0x08023544
 801a8a8:	08023b3c 	.word	0x08023b3c
 801a8ac:	08023598 	.word	0x08023598

0801a8b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a8b0:	b5b0      	push	{r4, r5, r7, lr}
 801a8b2:	b08c      	sub	sp, #48	@ 0x30
 801a8b4:	af04      	add	r7, sp, #16
 801a8b6:	60f8      	str	r0, [r7, #12]
 801a8b8:	60b9      	str	r1, [r7, #8]
 801a8ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d106      	bne.n	801a8d0 <tcp_output_segment+0x20>
 801a8c2:	4b64      	ldr	r3, [pc, #400]	@ (801aa54 <tcp_output_segment+0x1a4>)
 801a8c4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a8c8:	4963      	ldr	r1, [pc, #396]	@ (801aa58 <tcp_output_segment+0x1a8>)
 801a8ca:	4864      	ldr	r0, [pc, #400]	@ (801aa5c <tcp_output_segment+0x1ac>)
 801a8cc:	f005 faea 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d106      	bne.n	801a8e4 <tcp_output_segment+0x34>
 801a8d6:	4b5f      	ldr	r3, [pc, #380]	@ (801aa54 <tcp_output_segment+0x1a4>)
 801a8d8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a8dc:	4960      	ldr	r1, [pc, #384]	@ (801aa60 <tcp_output_segment+0x1b0>)
 801a8de:	485f      	ldr	r0, [pc, #380]	@ (801aa5c <tcp_output_segment+0x1ac>)
 801a8e0:	f005 fae0 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d106      	bne.n	801a8f8 <tcp_output_segment+0x48>
 801a8ea:	4b5a      	ldr	r3, [pc, #360]	@ (801aa54 <tcp_output_segment+0x1a4>)
 801a8ec:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a8f0:	495c      	ldr	r1, [pc, #368]	@ (801aa64 <tcp_output_segment+0x1b4>)
 801a8f2:	485a      	ldr	r0, [pc, #360]	@ (801aa5c <tcp_output_segment+0x1ac>)
 801a8f4:	f005 fad6 	bl	801fea4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a8f8:	68f8      	ldr	r0, [r7, #12]
 801a8fa:	f7ff ffb9 	bl	801a870 <tcp_output_segment_busy>
 801a8fe:	4603      	mov	r3, r0
 801a900:	2b00      	cmp	r3, #0
 801a902:	d001      	beq.n	801a908 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a904:	2300      	movs	r3, #0
 801a906:	e0a1      	b.n	801aa4c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	691c      	ldr	r4, [r3, #16]
 801a910:	4610      	mov	r0, r2
 801a912:	f7f8 fc7d 	bl	8013210 <lwip_htonl>
 801a916:	4603      	mov	r3, r0
 801a918:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	691c      	ldr	r4, [r3, #16]
 801a922:	4610      	mov	r0, r2
 801a924:	f7f8 fc5e 	bl	80131e4 <lwip_htons>
 801a928:	4603      	mov	r3, r0
 801a92a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a92c:	68bb      	ldr	r3, [r7, #8]
 801a92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a930:	68ba      	ldr	r2, [r7, #8]
 801a932:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a934:	441a      	add	r2, r3
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	3314      	adds	r3, #20
 801a940:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	7b1b      	ldrb	r3, [r3, #12]
 801a946:	f003 0301 	and.w	r3, r3, #1
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d015      	beq.n	801a97a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	3304      	adds	r3, #4
 801a952:	461a      	mov	r2, r3
 801a954:	6879      	ldr	r1, [r7, #4]
 801a956:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a95a:	f7fc f9cf 	bl	8016cfc <tcp_eff_send_mss_netif>
 801a95e:	4603      	mov	r3, r0
 801a960:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a962:	8b7b      	ldrh	r3, [r7, #26]
 801a964:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a968:	4618      	mov	r0, r3
 801a96a:	f7f8 fc51 	bl	8013210 <lwip_htonl>
 801a96e:	4602      	mov	r2, r0
 801a970:	69fb      	ldr	r3, [r7, #28]
 801a972:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a974:	69fb      	ldr	r3, [r7, #28]
 801a976:	3304      	adds	r3, #4
 801a978:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a980:	2b00      	cmp	r3, #0
 801a982:	da02      	bge.n	801a98a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a984:	68bb      	ldr	r3, [r7, #8]
 801a986:	2200      	movs	r2, #0
 801a988:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d10c      	bne.n	801a9ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a992:	4b35      	ldr	r3, [pc, #212]	@ (801aa68 <tcp_output_segment+0x1b8>)
 801a994:	681a      	ldr	r2, [r3, #0]
 801a996:	68bb      	ldr	r3, [r7, #8]
 801a998:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	691b      	ldr	r3, [r3, #16]
 801a99e:	685b      	ldr	r3, [r3, #4]
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	f7f8 fc35 	bl	8013210 <lwip_htonl>
 801a9a6:	4602      	mov	r2, r0
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	691a      	ldr	r2, [r3, #16]
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	685b      	ldr	r3, [r3, #4]
 801a9b4:	685b      	ldr	r3, [r3, #4]
 801a9b6:	1ad3      	subs	r3, r2, r3
 801a9b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	685b      	ldr	r3, [r3, #4]
 801a9be:	8959      	ldrh	r1, [r3, #10]
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	685b      	ldr	r3, [r3, #4]
 801a9c4:	8b3a      	ldrh	r2, [r7, #24]
 801a9c6:	1a8a      	subs	r2, r1, r2
 801a9c8:	b292      	uxth	r2, r2
 801a9ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	685b      	ldr	r3, [r3, #4]
 801a9d0:	8919      	ldrh	r1, [r3, #8]
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	685b      	ldr	r3, [r3, #4]
 801a9d6:	8b3a      	ldrh	r2, [r7, #24]
 801a9d8:	1a8a      	subs	r2, r1, r2
 801a9da:	b292      	uxth	r2, r2
 801a9dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	685b      	ldr	r3, [r3, #4]
 801a9e2:	68fa      	ldr	r2, [r7, #12]
 801a9e4:	6912      	ldr	r2, [r2, #16]
 801a9e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	691b      	ldr	r3, [r3, #16]
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	741a      	strb	r2, [r3, #16]
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	691a      	ldr	r2, [r3, #16]
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	7b1b      	ldrb	r3, [r3, #12]
 801a9fc:	f003 0301 	and.w	r3, r3, #1
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d001      	beq.n	801aa08 <tcp_output_segment+0x158>
 801aa04:	2318      	movs	r3, #24
 801aa06:	e000      	b.n	801aa0a <tcp_output_segment+0x15a>
 801aa08:	2314      	movs	r3, #20
 801aa0a:	4413      	add	r3, r2
 801aa0c:	69fa      	ldr	r2, [r7, #28]
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d006      	beq.n	801aa20 <tcp_output_segment+0x170>
 801aa12:	4b10      	ldr	r3, [pc, #64]	@ (801aa54 <tcp_output_segment+0x1a4>)
 801aa14:	f240 621c 	movw	r2, #1564	@ 0x61c
 801aa18:	4914      	ldr	r1, [pc, #80]	@ (801aa6c <tcp_output_segment+0x1bc>)
 801aa1a:	4810      	ldr	r0, [pc, #64]	@ (801aa5c <tcp_output_segment+0x1ac>)
 801aa1c:	f005 fa42 	bl	801fea4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	6858      	ldr	r0, [r3, #4]
 801aa24:	68b9      	ldr	r1, [r7, #8]
 801aa26:	68bb      	ldr	r3, [r7, #8]
 801aa28:	1d1c      	adds	r4, r3, #4
 801aa2a:	68bb      	ldr	r3, [r7, #8]
 801aa2c:	7add      	ldrb	r5, [r3, #11]
 801aa2e:	68bb      	ldr	r3, [r7, #8]
 801aa30:	7a9b      	ldrb	r3, [r3, #10]
 801aa32:	687a      	ldr	r2, [r7, #4]
 801aa34:	9202      	str	r2, [sp, #8]
 801aa36:	2206      	movs	r2, #6
 801aa38:	9201      	str	r2, [sp, #4]
 801aa3a:	9300      	str	r3, [sp, #0]
 801aa3c:	462b      	mov	r3, r5
 801aa3e:	4622      	mov	r2, r4
 801aa40:	f003 f8ea 	bl	801dc18 <ip4_output_if>
 801aa44:	4603      	mov	r3, r0
 801aa46:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801aa48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	3720      	adds	r7, #32
 801aa50:	46bd      	mov	sp, r7
 801aa52:	bdb0      	pop	{r4, r5, r7, pc}
 801aa54:	08023544 	.word	0x08023544
 801aa58:	08023b64 	.word	0x08023b64
 801aa5c:	08023598 	.word	0x08023598
 801aa60:	08023b84 	.word	0x08023b84
 801aa64:	08023ba4 	.word	0x08023ba4
 801aa68:	2002279c 	.word	0x2002279c
 801aa6c:	08023bc8 	.word	0x08023bc8

0801aa70 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801aa70:	b5b0      	push	{r4, r5, r7, lr}
 801aa72:	b084      	sub	sp, #16
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d106      	bne.n	801aa8c <tcp_rexmit_rto_prepare+0x1c>
 801aa7e:	4b36      	ldr	r3, [pc, #216]	@ (801ab58 <tcp_rexmit_rto_prepare+0xe8>)
 801aa80:	f240 6263 	movw	r2, #1635	@ 0x663
 801aa84:	4935      	ldr	r1, [pc, #212]	@ (801ab5c <tcp_rexmit_rto_prepare+0xec>)
 801aa86:	4836      	ldr	r0, [pc, #216]	@ (801ab60 <tcp_rexmit_rto_prepare+0xf0>)
 801aa88:	f005 fa0c 	bl	801fea4 <iprintf>

  if (pcb->unacked == NULL) {
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d102      	bne.n	801aa9a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801aa94:	f06f 0305 	mvn.w	r3, #5
 801aa98:	e059      	b.n	801ab4e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aa9e:	60fb      	str	r3, [r7, #12]
 801aaa0:	e00b      	b.n	801aaba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801aaa2:	68f8      	ldr	r0, [r7, #12]
 801aaa4:	f7ff fee4 	bl	801a870 <tcp_output_segment_busy>
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d002      	beq.n	801aab4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801aaae:	f06f 0305 	mvn.w	r3, #5
 801aab2:	e04c      	b.n	801ab4e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	60fb      	str	r3, [r7, #12]
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d1ef      	bne.n	801aaa2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801aac2:	68f8      	ldr	r0, [r7, #12]
 801aac4:	f7ff fed4 	bl	801a870 <tcp_output_segment_busy>
 801aac8:	4603      	mov	r3, r0
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d002      	beq.n	801aad4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801aace:	f06f 0305 	mvn.w	r3, #5
 801aad2:	e03c      	b.n	801ab4e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d104      	bne.n	801aaee <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	895a      	ldrh	r2, [r3, #10]
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	2200      	movs	r2, #0
 801aafa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	8b5b      	ldrh	r3, [r3, #26]
 801ab00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801ab04:	b29a      	uxth	r2, r3
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	691b      	ldr	r3, [r3, #16]
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7f8 fb7d 	bl	8013210 <lwip_htonl>
 801ab16:	4604      	mov	r4, r0
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	891b      	ldrh	r3, [r3, #8]
 801ab1c:	461d      	mov	r5, r3
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	691b      	ldr	r3, [r3, #16]
 801ab22:	899b      	ldrh	r3, [r3, #12]
 801ab24:	b29b      	uxth	r3, r3
 801ab26:	4618      	mov	r0, r3
 801ab28:	f7f8 fb5c 	bl	80131e4 <lwip_htons>
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	b2db      	uxtb	r3, r3
 801ab30:	f003 0303 	and.w	r3, r3, #3
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d001      	beq.n	801ab3c <tcp_rexmit_rto_prepare+0xcc>
 801ab38:	2301      	movs	r3, #1
 801ab3a:	e000      	b.n	801ab3e <tcp_rexmit_rto_prepare+0xce>
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	442b      	add	r3, r5
 801ab40:	18e2      	adds	r2, r4, r3
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	2200      	movs	r2, #0
 801ab4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801ab4c:	2300      	movs	r3, #0
}
 801ab4e:	4618      	mov	r0, r3
 801ab50:	3710      	adds	r7, #16
 801ab52:	46bd      	mov	sp, r7
 801ab54:	bdb0      	pop	{r4, r5, r7, pc}
 801ab56:	bf00      	nop
 801ab58:	08023544 	.word	0x08023544
 801ab5c:	08023bdc 	.word	0x08023bdc
 801ab60:	08023598 	.word	0x08023598

0801ab64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b082      	sub	sp, #8
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d106      	bne.n	801ab80 <tcp_rexmit_rto_commit+0x1c>
 801ab72:	4b0d      	ldr	r3, [pc, #52]	@ (801aba8 <tcp_rexmit_rto_commit+0x44>)
 801ab74:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801ab78:	490c      	ldr	r1, [pc, #48]	@ (801abac <tcp_rexmit_rto_commit+0x48>)
 801ab7a:	480d      	ldr	r0, [pc, #52]	@ (801abb0 <tcp_rexmit_rto_commit+0x4c>)
 801ab7c:	f005 f992 	bl	801fea4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ab86:	2bff      	cmp	r3, #255	@ 0xff
 801ab88:	d007      	beq.n	801ab9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ab90:	3301      	adds	r3, #1
 801ab92:	b2da      	uxtb	r2, r3
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801ab9a:	6878      	ldr	r0, [r7, #4]
 801ab9c:	f7ff fc72 	bl	801a484 <tcp_output>
}
 801aba0:	bf00      	nop
 801aba2:	3708      	adds	r7, #8
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	08023544 	.word	0x08023544
 801abac:	08023c00 	.word	0x08023c00
 801abb0:	08023598 	.word	0x08023598

0801abb4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b082      	sub	sp, #8
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d106      	bne.n	801abd0 <tcp_rexmit_rto+0x1c>
 801abc2:	4b0a      	ldr	r3, [pc, #40]	@ (801abec <tcp_rexmit_rto+0x38>)
 801abc4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801abc8:	4909      	ldr	r1, [pc, #36]	@ (801abf0 <tcp_rexmit_rto+0x3c>)
 801abca:	480a      	ldr	r0, [pc, #40]	@ (801abf4 <tcp_rexmit_rto+0x40>)
 801abcc:	f005 f96a 	bl	801fea4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801abd0:	6878      	ldr	r0, [r7, #4]
 801abd2:	f7ff ff4d 	bl	801aa70 <tcp_rexmit_rto_prepare>
 801abd6:	4603      	mov	r3, r0
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d102      	bne.n	801abe2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801abdc:	6878      	ldr	r0, [r7, #4]
 801abde:	f7ff ffc1 	bl	801ab64 <tcp_rexmit_rto_commit>
  }
}
 801abe2:	bf00      	nop
 801abe4:	3708      	adds	r7, #8
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
 801abea:	bf00      	nop
 801abec:	08023544 	.word	0x08023544
 801abf0:	08023c24 	.word	0x08023c24
 801abf4:	08023598 	.word	0x08023598

0801abf8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801abf8:	b590      	push	{r4, r7, lr}
 801abfa:	b085      	sub	sp, #20
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d106      	bne.n	801ac14 <tcp_rexmit+0x1c>
 801ac06:	4b2f      	ldr	r3, [pc, #188]	@ (801acc4 <tcp_rexmit+0xcc>)
 801ac08:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801ac0c:	492e      	ldr	r1, [pc, #184]	@ (801acc8 <tcp_rexmit+0xd0>)
 801ac0e:	482f      	ldr	r0, [pc, #188]	@ (801accc <tcp_rexmit+0xd4>)
 801ac10:	f005 f948 	bl	801fea4 <iprintf>

  if (pcb->unacked == NULL) {
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d102      	bne.n	801ac22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ac1c:	f06f 0305 	mvn.w	r3, #5
 801ac20:	e04c      	b.n	801acbc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ac28:	68b8      	ldr	r0, [r7, #8]
 801ac2a:	f7ff fe21 	bl	801a870 <tcp_output_segment_busy>
 801ac2e:	4603      	mov	r3, r0
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d002      	beq.n	801ac3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ac34:	f06f 0305 	mvn.w	r3, #5
 801ac38:	e040      	b.n	801acbc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ac3a:	68bb      	ldr	r3, [r7, #8]
 801ac3c:	681a      	ldr	r2, [r3, #0]
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	336c      	adds	r3, #108	@ 0x6c
 801ac46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ac48:	e002      	b.n	801ac50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d011      	beq.n	801ac7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	691b      	ldr	r3, [r3, #16]
 801ac5e:	685b      	ldr	r3, [r3, #4]
 801ac60:	4618      	mov	r0, r3
 801ac62:	f7f8 fad5 	bl	8013210 <lwip_htonl>
 801ac66:	4604      	mov	r4, r0
 801ac68:	68bb      	ldr	r3, [r7, #8]
 801ac6a:	691b      	ldr	r3, [r3, #16]
 801ac6c:	685b      	ldr	r3, [r3, #4]
 801ac6e:	4618      	mov	r0, r3
 801ac70:	f7f8 face 	bl	8013210 <lwip_htonl>
 801ac74:	4603      	mov	r3, r0
 801ac76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	dbe6      	blt.n	801ac4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	681a      	ldr	r2, [r3, #0]
 801ac80:	68bb      	ldr	r3, [r7, #8]
 801ac82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	68ba      	ldr	r2, [r7, #8]
 801ac88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ac8a:	68bb      	ldr	r3, [r7, #8]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d103      	bne.n	801ac9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	2200      	movs	r2, #0
 801ac96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801aca0:	2bff      	cmp	r3, #255	@ 0xff
 801aca2:	d007      	beq.n	801acb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801acaa:	3301      	adds	r3, #1
 801acac:	b2da      	uxtb	r2, r3
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2200      	movs	r2, #0
 801acb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801acba:	2300      	movs	r3, #0
}
 801acbc:	4618      	mov	r0, r3
 801acbe:	3714      	adds	r7, #20
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bd90      	pop	{r4, r7, pc}
 801acc4:	08023544 	.word	0x08023544
 801acc8:	08023c40 	.word	0x08023c40
 801accc:	08023598 	.word	0x08023598

0801acd0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b082      	sub	sp, #8
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d106      	bne.n	801acec <tcp_rexmit_fast+0x1c>
 801acde:	4b2a      	ldr	r3, [pc, #168]	@ (801ad88 <tcp_rexmit_fast+0xb8>)
 801ace0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801ace4:	4929      	ldr	r1, [pc, #164]	@ (801ad8c <tcp_rexmit_fast+0xbc>)
 801ace6:	482a      	ldr	r0, [pc, #168]	@ (801ad90 <tcp_rexmit_fast+0xc0>)
 801ace8:	f005 f8dc 	bl	801fea4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d045      	beq.n	801ad80 <tcp_rexmit_fast+0xb0>
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	8b5b      	ldrh	r3, [r3, #26]
 801acf8:	f003 0304 	and.w	r3, r3, #4
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d13f      	bne.n	801ad80 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ad00:	6878      	ldr	r0, [r7, #4]
 801ad02:	f7ff ff79 	bl	801abf8 <tcp_rexmit>
 801ad06:	4603      	mov	r3, r0
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d139      	bne.n	801ad80 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ad18:	4293      	cmp	r3, r2
 801ad1a:	bf28      	it	cs
 801ad1c:	4613      	movcs	r3, r2
 801ad1e:	b29b      	uxth	r3, r3
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	da00      	bge.n	801ad26 <tcp_rexmit_fast+0x56>
 801ad24:	3301      	adds	r3, #1
 801ad26:	105b      	asrs	r3, r3, #1
 801ad28:	b29a      	uxth	r2, r3
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801ad36:	461a      	mov	r2, r3
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad3c:	005b      	lsls	r3, r3, #1
 801ad3e:	429a      	cmp	r2, r3
 801ad40:	d206      	bcs.n	801ad50 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad46:	005b      	lsls	r3, r3, #1
 801ad48:	b29a      	uxth	r2, r3
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	0049      	lsls	r1, r1, #1
 801ad5e:	440b      	add	r3, r1
 801ad60:	b29b      	uxth	r3, r3
 801ad62:	4413      	add	r3, r2
 801ad64:	b29a      	uxth	r2, r3
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	8b5b      	ldrh	r3, [r3, #26]
 801ad70:	f043 0304 	orr.w	r3, r3, #4
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	2200      	movs	r2, #0
 801ad7e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801ad80:	bf00      	nop
 801ad82:	3708      	adds	r7, #8
 801ad84:	46bd      	mov	sp, r7
 801ad86:	bd80      	pop	{r7, pc}
 801ad88:	08023544 	.word	0x08023544
 801ad8c:	08023c58 	.word	0x08023c58
 801ad90:	08023598 	.word	0x08023598

0801ad94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b086      	sub	sp, #24
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	60f8      	str	r0, [r7, #12]
 801ad9c:	607b      	str	r3, [r7, #4]
 801ad9e:	460b      	mov	r3, r1
 801ada0:	817b      	strh	r3, [r7, #10]
 801ada2:	4613      	mov	r3, r2
 801ada4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ada6:	897a      	ldrh	r2, [r7, #10]
 801ada8:	893b      	ldrh	r3, [r7, #8]
 801adaa:	4413      	add	r3, r2
 801adac:	b29b      	uxth	r3, r3
 801adae:	3314      	adds	r3, #20
 801adb0:	b29b      	uxth	r3, r3
 801adb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801adb6:	4619      	mov	r1, r3
 801adb8:	2022      	movs	r0, #34	@ 0x22
 801adba:	f7f9 fc13 	bl	80145e4 <pbuf_alloc>
 801adbe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801adc0:	697b      	ldr	r3, [r7, #20]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d04d      	beq.n	801ae62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801adc6:	897b      	ldrh	r3, [r7, #10]
 801adc8:	3313      	adds	r3, #19
 801adca:	697a      	ldr	r2, [r7, #20]
 801adcc:	8952      	ldrh	r2, [r2, #10]
 801adce:	4293      	cmp	r3, r2
 801add0:	db06      	blt.n	801ade0 <tcp_output_alloc_header_common+0x4c>
 801add2:	4b26      	ldr	r3, [pc, #152]	@ (801ae6c <tcp_output_alloc_header_common+0xd8>)
 801add4:	f240 7223 	movw	r2, #1827	@ 0x723
 801add8:	4925      	ldr	r1, [pc, #148]	@ (801ae70 <tcp_output_alloc_header_common+0xdc>)
 801adda:	4826      	ldr	r0, [pc, #152]	@ (801ae74 <tcp_output_alloc_header_common+0xe0>)
 801addc:	f005 f862 	bl	801fea4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ade0:	697b      	ldr	r3, [r7, #20]
 801ade2:	685b      	ldr	r3, [r3, #4]
 801ade4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ade6:	8c3b      	ldrh	r3, [r7, #32]
 801ade8:	4618      	mov	r0, r3
 801adea:	f7f8 f9fb 	bl	80131e4 <lwip_htons>
 801adee:	4603      	mov	r3, r0
 801adf0:	461a      	mov	r2, r3
 801adf2:	693b      	ldr	r3, [r7, #16]
 801adf4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801adf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801adf8:	4618      	mov	r0, r3
 801adfa:	f7f8 f9f3 	bl	80131e4 <lwip_htons>
 801adfe:	4603      	mov	r3, r0
 801ae00:	461a      	mov	r2, r3
 801ae02:	693b      	ldr	r3, [r7, #16]
 801ae04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ae06:	693b      	ldr	r3, [r7, #16]
 801ae08:	687a      	ldr	r2, [r7, #4]
 801ae0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ae0c:	68f8      	ldr	r0, [r7, #12]
 801ae0e:	f7f8 f9ff 	bl	8013210 <lwip_htonl>
 801ae12:	4602      	mov	r2, r0
 801ae14:	693b      	ldr	r3, [r7, #16]
 801ae16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ae18:	897b      	ldrh	r3, [r7, #10]
 801ae1a:	089b      	lsrs	r3, r3, #2
 801ae1c:	b29b      	uxth	r3, r3
 801ae1e:	3305      	adds	r3, #5
 801ae20:	b29b      	uxth	r3, r3
 801ae22:	031b      	lsls	r3, r3, #12
 801ae24:	b29a      	uxth	r2, r3
 801ae26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ae2a:	b29b      	uxth	r3, r3
 801ae2c:	4313      	orrs	r3, r2
 801ae2e:	b29b      	uxth	r3, r3
 801ae30:	4618      	mov	r0, r3
 801ae32:	f7f8 f9d7 	bl	80131e4 <lwip_htons>
 801ae36:	4603      	mov	r3, r0
 801ae38:	461a      	mov	r2, r3
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ae3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ae40:	4618      	mov	r0, r3
 801ae42:	f7f8 f9cf 	bl	80131e4 <lwip_htons>
 801ae46:	4603      	mov	r3, r0
 801ae48:	461a      	mov	r2, r3
 801ae4a:	693b      	ldr	r3, [r7, #16]
 801ae4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	2200      	movs	r2, #0
 801ae52:	741a      	strb	r2, [r3, #16]
 801ae54:	2200      	movs	r2, #0
 801ae56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ae58:	693b      	ldr	r3, [r7, #16]
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	749a      	strb	r2, [r3, #18]
 801ae5e:	2200      	movs	r2, #0
 801ae60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ae62:	697b      	ldr	r3, [r7, #20]
}
 801ae64:	4618      	mov	r0, r3
 801ae66:	3718      	adds	r7, #24
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}
 801ae6c:	08023544 	.word	0x08023544
 801ae70:	08023c78 	.word	0x08023c78
 801ae74:	08023598 	.word	0x08023598

0801ae78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ae78:	b5b0      	push	{r4, r5, r7, lr}
 801ae7a:	b08a      	sub	sp, #40	@ 0x28
 801ae7c:	af04      	add	r7, sp, #16
 801ae7e:	60f8      	str	r0, [r7, #12]
 801ae80:	607b      	str	r3, [r7, #4]
 801ae82:	460b      	mov	r3, r1
 801ae84:	817b      	strh	r3, [r7, #10]
 801ae86:	4613      	mov	r3, r2
 801ae88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d106      	bne.n	801ae9e <tcp_output_alloc_header+0x26>
 801ae90:	4b15      	ldr	r3, [pc, #84]	@ (801aee8 <tcp_output_alloc_header+0x70>)
 801ae92:	f240 7242 	movw	r2, #1858	@ 0x742
 801ae96:	4915      	ldr	r1, [pc, #84]	@ (801aeec <tcp_output_alloc_header+0x74>)
 801ae98:	4815      	ldr	r0, [pc, #84]	@ (801aef0 <tcp_output_alloc_header+0x78>)
 801ae9a:	f005 f803 	bl	801fea4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	8adb      	ldrh	r3, [r3, #22]
 801aea6:	68fa      	ldr	r2, [r7, #12]
 801aea8:	8b12      	ldrh	r2, [r2, #24]
 801aeaa:	68f9      	ldr	r1, [r7, #12]
 801aeac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801aeae:	893d      	ldrh	r5, [r7, #8]
 801aeb0:	897c      	ldrh	r4, [r7, #10]
 801aeb2:	9103      	str	r1, [sp, #12]
 801aeb4:	2110      	movs	r1, #16
 801aeb6:	9102      	str	r1, [sp, #8]
 801aeb8:	9201      	str	r2, [sp, #4]
 801aeba:	9300      	str	r3, [sp, #0]
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	462a      	mov	r2, r5
 801aec0:	4621      	mov	r1, r4
 801aec2:	f7ff ff67 	bl	801ad94 <tcp_output_alloc_header_common>
 801aec6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801aec8:	697b      	ldr	r3, [r7, #20]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d006      	beq.n	801aedc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aed2:	68fa      	ldr	r2, [r7, #12]
 801aed4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801aed6:	441a      	add	r2, r3
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801aedc:	697b      	ldr	r3, [r7, #20]
}
 801aede:	4618      	mov	r0, r3
 801aee0:	3718      	adds	r7, #24
 801aee2:	46bd      	mov	sp, r7
 801aee4:	bdb0      	pop	{r4, r5, r7, pc}
 801aee6:	bf00      	nop
 801aee8:	08023544 	.word	0x08023544
 801aeec:	08023ca8 	.word	0x08023ca8
 801aef0:	08023598 	.word	0x08023598

0801aef4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b088      	sub	sp, #32
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	60f8      	str	r0, [r7, #12]
 801aefc:	60b9      	str	r1, [r7, #8]
 801aefe:	4611      	mov	r1, r2
 801af00:	461a      	mov	r2, r3
 801af02:	460b      	mov	r3, r1
 801af04:	71fb      	strb	r3, [r7, #7]
 801af06:	4613      	mov	r3, r2
 801af08:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801af0a:	2300      	movs	r3, #0
 801af0c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801af0e:	68bb      	ldr	r3, [r7, #8]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d106      	bne.n	801af22 <tcp_output_fill_options+0x2e>
 801af14:	4b12      	ldr	r3, [pc, #72]	@ (801af60 <tcp_output_fill_options+0x6c>)
 801af16:	f240 7256 	movw	r2, #1878	@ 0x756
 801af1a:	4912      	ldr	r1, [pc, #72]	@ (801af64 <tcp_output_fill_options+0x70>)
 801af1c:	4812      	ldr	r0, [pc, #72]	@ (801af68 <tcp_output_fill_options+0x74>)
 801af1e:	f004 ffc1 	bl	801fea4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801af22:	68bb      	ldr	r3, [r7, #8]
 801af24:	685b      	ldr	r3, [r3, #4]
 801af26:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801af28:	69bb      	ldr	r3, [r7, #24]
 801af2a:	3314      	adds	r3, #20
 801af2c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801af2e:	8bfb      	ldrh	r3, [r7, #30]
 801af30:	009b      	lsls	r3, r3, #2
 801af32:	461a      	mov	r2, r3
 801af34:	79fb      	ldrb	r3, [r7, #7]
 801af36:	009b      	lsls	r3, r3, #2
 801af38:	f003 0304 	and.w	r3, r3, #4
 801af3c:	4413      	add	r3, r2
 801af3e:	3314      	adds	r3, #20
 801af40:	69ba      	ldr	r2, [r7, #24]
 801af42:	4413      	add	r3, r2
 801af44:	697a      	ldr	r2, [r7, #20]
 801af46:	429a      	cmp	r2, r3
 801af48:	d006      	beq.n	801af58 <tcp_output_fill_options+0x64>
 801af4a:	4b05      	ldr	r3, [pc, #20]	@ (801af60 <tcp_output_fill_options+0x6c>)
 801af4c:	f240 7275 	movw	r2, #1909	@ 0x775
 801af50:	4906      	ldr	r1, [pc, #24]	@ (801af6c <tcp_output_fill_options+0x78>)
 801af52:	4805      	ldr	r0, [pc, #20]	@ (801af68 <tcp_output_fill_options+0x74>)
 801af54:	f004 ffa6 	bl	801fea4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801af58:	bf00      	nop
 801af5a:	3720      	adds	r7, #32
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	08023544 	.word	0x08023544
 801af64:	08023cd0 	.word	0x08023cd0
 801af68:	08023598 	.word	0x08023598
 801af6c:	08023bc8 	.word	0x08023bc8

0801af70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801af70:	b580      	push	{r7, lr}
 801af72:	b08a      	sub	sp, #40	@ 0x28
 801af74:	af04      	add	r7, sp, #16
 801af76:	60f8      	str	r0, [r7, #12]
 801af78:	60b9      	str	r1, [r7, #8]
 801af7a:	607a      	str	r2, [r7, #4]
 801af7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801af7e:	68bb      	ldr	r3, [r7, #8]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d106      	bne.n	801af92 <tcp_output_control_segment+0x22>
 801af84:	4b1c      	ldr	r3, [pc, #112]	@ (801aff8 <tcp_output_control_segment+0x88>)
 801af86:	f240 7287 	movw	r2, #1927	@ 0x787
 801af8a:	491c      	ldr	r1, [pc, #112]	@ (801affc <tcp_output_control_segment+0x8c>)
 801af8c:	481c      	ldr	r0, [pc, #112]	@ (801b000 <tcp_output_control_segment+0x90>)
 801af8e:	f004 ff89 	bl	801fea4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801af92:	683a      	ldr	r2, [r7, #0]
 801af94:	6879      	ldr	r1, [r7, #4]
 801af96:	68f8      	ldr	r0, [r7, #12]
 801af98:	f7fe fa7c 	bl	8019494 <tcp_route>
 801af9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801af9e:	693b      	ldr	r3, [r7, #16]
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d102      	bne.n	801afaa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801afa4:	23fc      	movs	r3, #252	@ 0xfc
 801afa6:	75fb      	strb	r3, [r7, #23]
 801afa8:	e01c      	b.n	801afe4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d006      	beq.n	801afbe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	7adb      	ldrb	r3, [r3, #11]
 801afb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	7a9b      	ldrb	r3, [r3, #10]
 801afba:	757b      	strb	r3, [r7, #21]
 801afbc:	e003      	b.n	801afc6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801afbe:	23ff      	movs	r3, #255	@ 0xff
 801afc0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801afc2:	2300      	movs	r3, #0
 801afc4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801afc6:	7dba      	ldrb	r2, [r7, #22]
 801afc8:	693b      	ldr	r3, [r7, #16]
 801afca:	9302      	str	r3, [sp, #8]
 801afcc:	2306      	movs	r3, #6
 801afce:	9301      	str	r3, [sp, #4]
 801afd0:	7d7b      	ldrb	r3, [r7, #21]
 801afd2:	9300      	str	r3, [sp, #0]
 801afd4:	4613      	mov	r3, r2
 801afd6:	683a      	ldr	r2, [r7, #0]
 801afd8:	6879      	ldr	r1, [r7, #4]
 801afda:	68b8      	ldr	r0, [r7, #8]
 801afdc:	f002 fe1c 	bl	801dc18 <ip4_output_if>
 801afe0:	4603      	mov	r3, r0
 801afe2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801afe4:	68b8      	ldr	r0, [r7, #8]
 801afe6:	f7f9 fde1 	bl	8014bac <pbuf_free>
  return err;
 801afea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801afee:	4618      	mov	r0, r3
 801aff0:	3718      	adds	r7, #24
 801aff2:	46bd      	mov	sp, r7
 801aff4:	bd80      	pop	{r7, pc}
 801aff6:	bf00      	nop
 801aff8:	08023544 	.word	0x08023544
 801affc:	08023cf8 	.word	0x08023cf8
 801b000:	08023598 	.word	0x08023598

0801b004 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b004:	b590      	push	{r4, r7, lr}
 801b006:	b08b      	sub	sp, #44	@ 0x2c
 801b008:	af04      	add	r7, sp, #16
 801b00a:	60f8      	str	r0, [r7, #12]
 801b00c:	60b9      	str	r1, [r7, #8]
 801b00e:	607a      	str	r2, [r7, #4]
 801b010:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b012:	683b      	ldr	r3, [r7, #0]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d106      	bne.n	801b026 <tcp_rst+0x22>
 801b018:	4b1f      	ldr	r3, [pc, #124]	@ (801b098 <tcp_rst+0x94>)
 801b01a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801b01e:	491f      	ldr	r1, [pc, #124]	@ (801b09c <tcp_rst+0x98>)
 801b020:	481f      	ldr	r0, [pc, #124]	@ (801b0a0 <tcp_rst+0x9c>)
 801b022:	f004 ff3f 	bl	801fea4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d106      	bne.n	801b03a <tcp_rst+0x36>
 801b02c:	4b1a      	ldr	r3, [pc, #104]	@ (801b098 <tcp_rst+0x94>)
 801b02e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801b032:	491c      	ldr	r1, [pc, #112]	@ (801b0a4 <tcp_rst+0xa0>)
 801b034:	481a      	ldr	r0, [pc, #104]	@ (801b0a0 <tcp_rst+0x9c>)
 801b036:	f004 ff35 	bl	801fea4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b03a:	2300      	movs	r3, #0
 801b03c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b03e:	f246 0308 	movw	r3, #24584	@ 0x6008
 801b042:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b044:	7dfb      	ldrb	r3, [r7, #23]
 801b046:	b29c      	uxth	r4, r3
 801b048:	68b8      	ldr	r0, [r7, #8]
 801b04a:	f7f8 f8e1 	bl	8013210 <lwip_htonl>
 801b04e:	4602      	mov	r2, r0
 801b050:	8abb      	ldrh	r3, [r7, #20]
 801b052:	9303      	str	r3, [sp, #12]
 801b054:	2314      	movs	r3, #20
 801b056:	9302      	str	r3, [sp, #8]
 801b058:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b05a:	9301      	str	r3, [sp, #4]
 801b05c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b05e:	9300      	str	r3, [sp, #0]
 801b060:	4613      	mov	r3, r2
 801b062:	2200      	movs	r2, #0
 801b064:	4621      	mov	r1, r4
 801b066:	6878      	ldr	r0, [r7, #4]
 801b068:	f7ff fe94 	bl	801ad94 <tcp_output_alloc_header_common>
 801b06c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b06e:	693b      	ldr	r3, [r7, #16]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d00c      	beq.n	801b08e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b074:	7dfb      	ldrb	r3, [r7, #23]
 801b076:	2200      	movs	r2, #0
 801b078:	6939      	ldr	r1, [r7, #16]
 801b07a:	68f8      	ldr	r0, [r7, #12]
 801b07c:	f7ff ff3a 	bl	801aef4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b082:	683a      	ldr	r2, [r7, #0]
 801b084:	6939      	ldr	r1, [r7, #16]
 801b086:	68f8      	ldr	r0, [r7, #12]
 801b088:	f7ff ff72 	bl	801af70 <tcp_output_control_segment>
 801b08c:	e000      	b.n	801b090 <tcp_rst+0x8c>
    return;
 801b08e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b090:	371c      	adds	r7, #28
 801b092:	46bd      	mov	sp, r7
 801b094:	bd90      	pop	{r4, r7, pc}
 801b096:	bf00      	nop
 801b098:	08023544 	.word	0x08023544
 801b09c:	08023d24 	.word	0x08023d24
 801b0a0:	08023598 	.word	0x08023598
 801b0a4:	08023d40 	.word	0x08023d40

0801b0a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b0a8:	b590      	push	{r4, r7, lr}
 801b0aa:	b087      	sub	sp, #28
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d106      	bne.n	801b0cc <tcp_send_empty_ack+0x24>
 801b0be:	4b28      	ldr	r3, [pc, #160]	@ (801b160 <tcp_send_empty_ack+0xb8>)
 801b0c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801b0c4:	4927      	ldr	r1, [pc, #156]	@ (801b164 <tcp_send_empty_ack+0xbc>)
 801b0c6:	4828      	ldr	r0, [pc, #160]	@ (801b168 <tcp_send_empty_ack+0xc0>)
 801b0c8:	f004 feec 	bl	801fea4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b0cc:	7dfb      	ldrb	r3, [r7, #23]
 801b0ce:	009b      	lsls	r3, r3, #2
 801b0d0:	b2db      	uxtb	r3, r3
 801b0d2:	f003 0304 	and.w	r3, r3, #4
 801b0d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b0d8:	7d7b      	ldrb	r3, [r7, #21]
 801b0da:	b29c      	uxth	r4, r3
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b0e0:	4618      	mov	r0, r3
 801b0e2:	f7f8 f895 	bl	8013210 <lwip_htonl>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	4621      	mov	r1, r4
 801b0ec:	6878      	ldr	r0, [r7, #4]
 801b0ee:	f7ff fec3 	bl	801ae78 <tcp_output_alloc_header>
 801b0f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b0f4:	693b      	ldr	r3, [r7, #16]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d109      	bne.n	801b10e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	8b5b      	ldrh	r3, [r3, #26]
 801b0fe:	f043 0303 	orr.w	r3, r3, #3
 801b102:	b29a      	uxth	r2, r3
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b108:	f06f 0301 	mvn.w	r3, #1
 801b10c:	e023      	b.n	801b156 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b10e:	7dbb      	ldrb	r3, [r7, #22]
 801b110:	7dfa      	ldrb	r2, [r7, #23]
 801b112:	6939      	ldr	r1, [r7, #16]
 801b114:	6878      	ldr	r0, [r7, #4]
 801b116:	f7ff feed 	bl	801aef4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b11a:	687a      	ldr	r2, [r7, #4]
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	3304      	adds	r3, #4
 801b120:	6939      	ldr	r1, [r7, #16]
 801b122:	6878      	ldr	r0, [r7, #4]
 801b124:	f7ff ff24 	bl	801af70 <tcp_output_control_segment>
 801b128:	4603      	mov	r3, r0
 801b12a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b12c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d007      	beq.n	801b144 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	8b5b      	ldrh	r3, [r3, #26]
 801b138:	f043 0303 	orr.w	r3, r3, #3
 801b13c:	b29a      	uxth	r2, r3
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	835a      	strh	r2, [r3, #26]
 801b142:	e006      	b.n	801b152 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	8b5b      	ldrh	r3, [r3, #26]
 801b148:	f023 0303 	bic.w	r3, r3, #3
 801b14c:	b29a      	uxth	r2, r3
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b152:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b156:	4618      	mov	r0, r3
 801b158:	371c      	adds	r7, #28
 801b15a:	46bd      	mov	sp, r7
 801b15c:	bd90      	pop	{r4, r7, pc}
 801b15e:	bf00      	nop
 801b160:	08023544 	.word	0x08023544
 801b164:	08023d5c 	.word	0x08023d5c
 801b168:	08023598 	.word	0x08023598

0801b16c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b16c:	b590      	push	{r4, r7, lr}
 801b16e:	b085      	sub	sp, #20
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b174:	2300      	movs	r3, #0
 801b176:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d106      	bne.n	801b18c <tcp_keepalive+0x20>
 801b17e:	4b18      	ldr	r3, [pc, #96]	@ (801b1e0 <tcp_keepalive+0x74>)
 801b180:	f640 0224 	movw	r2, #2084	@ 0x824
 801b184:	4917      	ldr	r1, [pc, #92]	@ (801b1e4 <tcp_keepalive+0x78>)
 801b186:	4818      	ldr	r0, [pc, #96]	@ (801b1e8 <tcp_keepalive+0x7c>)
 801b188:	f004 fe8c 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b18c:	7abb      	ldrb	r3, [r7, #10]
 801b18e:	b29c      	uxth	r4, r3
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b194:	3b01      	subs	r3, #1
 801b196:	4618      	mov	r0, r3
 801b198:	f7f8 f83a 	bl	8013210 <lwip_htonl>
 801b19c:	4603      	mov	r3, r0
 801b19e:	2200      	movs	r2, #0
 801b1a0:	4621      	mov	r1, r4
 801b1a2:	6878      	ldr	r0, [r7, #4]
 801b1a4:	f7ff fe68 	bl	801ae78 <tcp_output_alloc_header>
 801b1a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d102      	bne.n	801b1b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b1b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b1b4:	e010      	b.n	801b1d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b1b6:	7abb      	ldrb	r3, [r7, #10]
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	68f9      	ldr	r1, [r7, #12]
 801b1bc:	6878      	ldr	r0, [r7, #4]
 801b1be:	f7ff fe99 	bl	801aef4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b1c2:	687a      	ldr	r2, [r7, #4]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	3304      	adds	r3, #4
 801b1c8:	68f9      	ldr	r1, [r7, #12]
 801b1ca:	6878      	ldr	r0, [r7, #4]
 801b1cc:	f7ff fed0 	bl	801af70 <tcp_output_control_segment>
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b1d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	3714      	adds	r7, #20
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd90      	pop	{r4, r7, pc}
 801b1e0:	08023544 	.word	0x08023544
 801b1e4:	08023d7c 	.word	0x08023d7c
 801b1e8:	08023598 	.word	0x08023598

0801b1ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b1ec:	b590      	push	{r4, r7, lr}
 801b1ee:	b08b      	sub	sp, #44	@ 0x2c
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d106      	bne.n	801b20c <tcp_zero_window_probe+0x20>
 801b1fe:	4b4d      	ldr	r3, [pc, #308]	@ (801b334 <tcp_zero_window_probe+0x148>)
 801b200:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b204:	494c      	ldr	r1, [pc, #304]	@ (801b338 <tcp_zero_window_probe+0x14c>)
 801b206:	484d      	ldr	r0, [pc, #308]	@ (801b33c <tcp_zero_window_probe+0x150>)
 801b208:	f004 fe4c 	bl	801fea4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b210:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801b212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b214:	2b00      	cmp	r3, #0
 801b216:	d101      	bne.n	801b21c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b218:	2300      	movs	r3, #0
 801b21a:	e087      	b.n	801b32c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b222:	2bff      	cmp	r3, #255	@ 0xff
 801b224:	d007      	beq.n	801b236 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b22c:	3301      	adds	r3, #1
 801b22e:	b2da      	uxtb	r2, r3
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b238:	691b      	ldr	r3, [r3, #16]
 801b23a:	899b      	ldrh	r3, [r3, #12]
 801b23c:	b29b      	uxth	r3, r3
 801b23e:	4618      	mov	r0, r3
 801b240:	f7f7 ffd0 	bl	80131e4 <lwip_htons>
 801b244:	4603      	mov	r3, r0
 801b246:	b2db      	uxtb	r3, r3
 801b248:	f003 0301 	and.w	r3, r3, #1
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d005      	beq.n	801b25c <tcp_zero_window_probe+0x70>
 801b250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b252:	891b      	ldrh	r3, [r3, #8]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d101      	bne.n	801b25c <tcp_zero_window_probe+0x70>
 801b258:	2301      	movs	r3, #1
 801b25a:	e000      	b.n	801b25e <tcp_zero_window_probe+0x72>
 801b25c:	2300      	movs	r3, #0
 801b25e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b262:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b266:	2b00      	cmp	r3, #0
 801b268:	bf0c      	ite	eq
 801b26a:	2301      	moveq	r3, #1
 801b26c:	2300      	movne	r3, #0
 801b26e:	b2db      	uxtb	r3, r3
 801b270:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b272:	7cfb      	ldrb	r3, [r7, #19]
 801b274:	b299      	uxth	r1, r3
 801b276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b278:	691b      	ldr	r3, [r3, #16]
 801b27a:	685b      	ldr	r3, [r3, #4]
 801b27c:	8c3a      	ldrh	r2, [r7, #32]
 801b27e:	6878      	ldr	r0, [r7, #4]
 801b280:	f7ff fdfa 	bl	801ae78 <tcp_output_alloc_header>
 801b284:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801b286:	69fb      	ldr	r3, [r7, #28]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d102      	bne.n	801b292 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b28c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b290:	e04c      	b.n	801b32c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	685b      	ldr	r3, [r3, #4]
 801b296:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801b298:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d011      	beq.n	801b2c4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b2a0:	69bb      	ldr	r3, [r7, #24]
 801b2a2:	899b      	ldrh	r3, [r3, #12]
 801b2a4:	b29b      	uxth	r3, r3
 801b2a6:	b21b      	sxth	r3, r3
 801b2a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b2ac:	b21c      	sxth	r4, r3
 801b2ae:	2011      	movs	r0, #17
 801b2b0:	f7f7 ff98 	bl	80131e4 <lwip_htons>
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	b21b      	sxth	r3, r3
 801b2b8:	4323      	orrs	r3, r4
 801b2ba:	b21b      	sxth	r3, r3
 801b2bc:	b29a      	uxth	r2, r3
 801b2be:	69bb      	ldr	r3, [r7, #24]
 801b2c0:	819a      	strh	r2, [r3, #12]
 801b2c2:	e010      	b.n	801b2e6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b2c4:	69fb      	ldr	r3, [r7, #28]
 801b2c6:	685b      	ldr	r3, [r3, #4]
 801b2c8:	3314      	adds	r3, #20
 801b2ca:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ce:	6858      	ldr	r0, [r3, #4]
 801b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2d2:	685b      	ldr	r3, [r3, #4]
 801b2d4:	891a      	ldrh	r2, [r3, #8]
 801b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2d8:	891b      	ldrh	r3, [r3, #8]
 801b2da:	1ad3      	subs	r3, r2, r3
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	2201      	movs	r2, #1
 801b2e0:	6979      	ldr	r1, [r7, #20]
 801b2e2:	f7f9 fe69 	bl	8014fb8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2e8:	691b      	ldr	r3, [r3, #16]
 801b2ea:	685b      	ldr	r3, [r3, #4]
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f7f7 ff8f 	bl	8013210 <lwip_htonl>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	3301      	adds	r3, #1
 801b2f6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	1ad3      	subs	r3, r2, r3
 801b300:	2b00      	cmp	r3, #0
 801b302:	da02      	bge.n	801b30a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	68fa      	ldr	r2, [r7, #12]
 801b308:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b30a:	7cfb      	ldrb	r3, [r7, #19]
 801b30c:	2200      	movs	r2, #0
 801b30e:	69f9      	ldr	r1, [r7, #28]
 801b310:	6878      	ldr	r0, [r7, #4]
 801b312:	f7ff fdef 	bl	801aef4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b316:	687a      	ldr	r2, [r7, #4]
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	3304      	adds	r3, #4
 801b31c:	69f9      	ldr	r1, [r7, #28]
 801b31e:	6878      	ldr	r0, [r7, #4]
 801b320:	f7ff fe26 	bl	801af70 <tcp_output_control_segment>
 801b324:	4603      	mov	r3, r0
 801b326:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b328:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b32c:	4618      	mov	r0, r3
 801b32e:	372c      	adds	r7, #44	@ 0x2c
 801b330:	46bd      	mov	sp, r7
 801b332:	bd90      	pop	{r4, r7, pc}
 801b334:	08023544 	.word	0x08023544
 801b338:	08023d98 	.word	0x08023d98
 801b33c:	08023598 	.word	0x08023598

0801b340 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b348:	f7f9 ff24 	bl	8015194 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b34c:	4b0a      	ldr	r3, [pc, #40]	@ (801b378 <tcpip_tcp_timer+0x38>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d103      	bne.n	801b35c <tcpip_tcp_timer+0x1c>
 801b354:	4b09      	ldr	r3, [pc, #36]	@ (801b37c <tcpip_tcp_timer+0x3c>)
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d005      	beq.n	801b368 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b35c:	2200      	movs	r2, #0
 801b35e:	4908      	ldr	r1, [pc, #32]	@ (801b380 <tcpip_tcp_timer+0x40>)
 801b360:	20fa      	movs	r0, #250	@ 0xfa
 801b362:	f000 f8f3 	bl	801b54c <sys_timeout>
 801b366:	e003      	b.n	801b370 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b368:	4b06      	ldr	r3, [pc, #24]	@ (801b384 <tcpip_tcp_timer+0x44>)
 801b36a:	2200      	movs	r2, #0
 801b36c:	601a      	str	r2, [r3, #0]
  }
}
 801b36e:	bf00      	nop
 801b370:	bf00      	nop
 801b372:	3708      	adds	r7, #8
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}
 801b378:	200227a8 	.word	0x200227a8
 801b37c:	200227ac 	.word	0x200227ac
 801b380:	0801b341 	.word	0x0801b341
 801b384:	200227f8 	.word	0x200227f8

0801b388 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b38c:	4b0a      	ldr	r3, [pc, #40]	@ (801b3b8 <tcp_timer_needed+0x30>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d10f      	bne.n	801b3b4 <tcp_timer_needed+0x2c>
 801b394:	4b09      	ldr	r3, [pc, #36]	@ (801b3bc <tcp_timer_needed+0x34>)
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d103      	bne.n	801b3a4 <tcp_timer_needed+0x1c>
 801b39c:	4b08      	ldr	r3, [pc, #32]	@ (801b3c0 <tcp_timer_needed+0x38>)
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d007      	beq.n	801b3b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b3a4:	4b04      	ldr	r3, [pc, #16]	@ (801b3b8 <tcp_timer_needed+0x30>)
 801b3a6:	2201      	movs	r2, #1
 801b3a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	4905      	ldr	r1, [pc, #20]	@ (801b3c4 <tcp_timer_needed+0x3c>)
 801b3ae:	20fa      	movs	r0, #250	@ 0xfa
 801b3b0:	f000 f8cc 	bl	801b54c <sys_timeout>
  }
}
 801b3b4:	bf00      	nop
 801b3b6:	bd80      	pop	{r7, pc}
 801b3b8:	200227f8 	.word	0x200227f8
 801b3bc:	200227a8 	.word	0x200227a8
 801b3c0:	200227ac 	.word	0x200227ac
 801b3c4:	0801b341 	.word	0x0801b341

0801b3c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b3c8:	b580      	push	{r7, lr}
 801b3ca:	b086      	sub	sp, #24
 801b3cc:	af00      	add	r7, sp, #0
 801b3ce:	60f8      	str	r0, [r7, #12]
 801b3d0:	60b9      	str	r1, [r7, #8]
 801b3d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b3d4:	200a      	movs	r0, #10
 801b3d6:	f7f8 fbd9 	bl	8013b8c <memp_malloc>
 801b3da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b3dc:	693b      	ldr	r3, [r7, #16]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d109      	bne.n	801b3f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b3e2:	693b      	ldr	r3, [r7, #16]
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d151      	bne.n	801b48c <sys_timeout_abs+0xc4>
 801b3e8:	4b2a      	ldr	r3, [pc, #168]	@ (801b494 <sys_timeout_abs+0xcc>)
 801b3ea:	22be      	movs	r2, #190	@ 0xbe
 801b3ec:	492a      	ldr	r1, [pc, #168]	@ (801b498 <sys_timeout_abs+0xd0>)
 801b3ee:	482b      	ldr	r0, [pc, #172]	@ (801b49c <sys_timeout_abs+0xd4>)
 801b3f0:	f004 fd58 	bl	801fea4 <iprintf>
    return;
 801b3f4:	e04a      	b.n	801b48c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b3f6:	693b      	ldr	r3, [r7, #16]
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b3fc:	693b      	ldr	r3, [r7, #16]
 801b3fe:	68ba      	ldr	r2, [r7, #8]
 801b400:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b402:	693b      	ldr	r3, [r7, #16]
 801b404:	687a      	ldr	r2, [r7, #4]
 801b406:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b408:	693b      	ldr	r3, [r7, #16]
 801b40a:	68fa      	ldr	r2, [r7, #12]
 801b40c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b40e:	4b24      	ldr	r3, [pc, #144]	@ (801b4a0 <sys_timeout_abs+0xd8>)
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d103      	bne.n	801b41e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b416:	4a22      	ldr	r2, [pc, #136]	@ (801b4a0 <sys_timeout_abs+0xd8>)
 801b418:	693b      	ldr	r3, [r7, #16]
 801b41a:	6013      	str	r3, [r2, #0]
    return;
 801b41c:	e037      	b.n	801b48e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b41e:	693b      	ldr	r3, [r7, #16]
 801b420:	685a      	ldr	r2, [r3, #4]
 801b422:	4b1f      	ldr	r3, [pc, #124]	@ (801b4a0 <sys_timeout_abs+0xd8>)
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	685b      	ldr	r3, [r3, #4]
 801b428:	1ad3      	subs	r3, r2, r3
 801b42a:	0fdb      	lsrs	r3, r3, #31
 801b42c:	f003 0301 	and.w	r3, r3, #1
 801b430:	b2db      	uxtb	r3, r3
 801b432:	2b00      	cmp	r3, #0
 801b434:	d007      	beq.n	801b446 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b436:	4b1a      	ldr	r3, [pc, #104]	@ (801b4a0 <sys_timeout_abs+0xd8>)
 801b438:	681a      	ldr	r2, [r3, #0]
 801b43a:	693b      	ldr	r3, [r7, #16]
 801b43c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b43e:	4a18      	ldr	r2, [pc, #96]	@ (801b4a0 <sys_timeout_abs+0xd8>)
 801b440:	693b      	ldr	r3, [r7, #16]
 801b442:	6013      	str	r3, [r2, #0]
 801b444:	e023      	b.n	801b48e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b446:	4b16      	ldr	r3, [pc, #88]	@ (801b4a0 <sys_timeout_abs+0xd8>)
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	617b      	str	r3, [r7, #20]
 801b44c:	e01a      	b.n	801b484 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b44e:	697b      	ldr	r3, [r7, #20]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d00b      	beq.n	801b46e <sys_timeout_abs+0xa6>
 801b456:	693b      	ldr	r3, [r7, #16]
 801b458:	685a      	ldr	r2, [r3, #4]
 801b45a:	697b      	ldr	r3, [r7, #20]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	685b      	ldr	r3, [r3, #4]
 801b460:	1ad3      	subs	r3, r2, r3
 801b462:	0fdb      	lsrs	r3, r3, #31
 801b464:	f003 0301 	and.w	r3, r3, #1
 801b468:	b2db      	uxtb	r3, r3
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d007      	beq.n	801b47e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b46e:	697b      	ldr	r3, [r7, #20]
 801b470:	681a      	ldr	r2, [r3, #0]
 801b472:	693b      	ldr	r3, [r7, #16]
 801b474:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b476:	697b      	ldr	r3, [r7, #20]
 801b478:	693a      	ldr	r2, [r7, #16]
 801b47a:	601a      	str	r2, [r3, #0]
        break;
 801b47c:	e007      	b.n	801b48e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b47e:	697b      	ldr	r3, [r7, #20]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	617b      	str	r3, [r7, #20]
 801b484:	697b      	ldr	r3, [r7, #20]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d1e1      	bne.n	801b44e <sys_timeout_abs+0x86>
 801b48a:	e000      	b.n	801b48e <sys_timeout_abs+0xc6>
    return;
 801b48c:	bf00      	nop
      }
    }
  }
}
 801b48e:	3718      	adds	r7, #24
 801b490:	46bd      	mov	sp, r7
 801b492:	bd80      	pop	{r7, pc}
 801b494:	08023dbc 	.word	0x08023dbc
 801b498:	08023df0 	.word	0x08023df0
 801b49c:	08023e30 	.word	0x08023e30
 801b4a0:	200227f0 	.word	0x200227f0

0801b4a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b086      	sub	sp, #24
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b4b0:	697b      	ldr	r3, [r7, #20]
 801b4b2:	685b      	ldr	r3, [r3, #4]
 801b4b4:	4798      	blx	r3

  now = sys_now();
 801b4b6:	f7f0 fe35 	bl	800c124 <sys_now>
 801b4ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b4bc:	697b      	ldr	r3, [r7, #20]
 801b4be:	681a      	ldr	r2, [r3, #0]
 801b4c0:	4b0f      	ldr	r3, [pc, #60]	@ (801b500 <lwip_cyclic_timer+0x5c>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	4413      	add	r3, r2
 801b4c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b4c8:	68fa      	ldr	r2, [r7, #12]
 801b4ca:	693b      	ldr	r3, [r7, #16]
 801b4cc:	1ad3      	subs	r3, r2, r3
 801b4ce:	0fdb      	lsrs	r3, r3, #31
 801b4d0:	f003 0301 	and.w	r3, r3, #1
 801b4d4:	b2db      	uxtb	r3, r3
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d009      	beq.n	801b4ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b4da:	697b      	ldr	r3, [r7, #20]
 801b4dc:	681a      	ldr	r2, [r3, #0]
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	4413      	add	r3, r2
 801b4e2:	687a      	ldr	r2, [r7, #4]
 801b4e4:	4907      	ldr	r1, [pc, #28]	@ (801b504 <lwip_cyclic_timer+0x60>)
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	f7ff ff6e 	bl	801b3c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b4ec:	e004      	b.n	801b4f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b4ee:	687a      	ldr	r2, [r7, #4]
 801b4f0:	4904      	ldr	r1, [pc, #16]	@ (801b504 <lwip_cyclic_timer+0x60>)
 801b4f2:	68f8      	ldr	r0, [r7, #12]
 801b4f4:	f7ff ff68 	bl	801b3c8 <sys_timeout_abs>
}
 801b4f8:	bf00      	nop
 801b4fa:	3718      	adds	r7, #24
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}
 801b500:	200227f4 	.word	0x200227f4
 801b504:	0801b4a5 	.word	0x0801b4a5

0801b508 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b082      	sub	sp, #8
 801b50c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b50e:	2301      	movs	r3, #1
 801b510:	607b      	str	r3, [r7, #4]
 801b512:	e00e      	b.n	801b532 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b514:	4a0b      	ldr	r2, [pc, #44]	@ (801b544 <sys_timeouts_init+0x3c>)
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	00db      	lsls	r3, r3, #3
 801b520:	4a08      	ldr	r2, [pc, #32]	@ (801b544 <sys_timeouts_init+0x3c>)
 801b522:	4413      	add	r3, r2
 801b524:	461a      	mov	r2, r3
 801b526:	4908      	ldr	r1, [pc, #32]	@ (801b548 <sys_timeouts_init+0x40>)
 801b528:	f000 f810 	bl	801b54c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	3301      	adds	r3, #1
 801b530:	607b      	str	r3, [r7, #4]
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	2b02      	cmp	r3, #2
 801b536:	d9ed      	bls.n	801b514 <sys_timeouts_init+0xc>
  }
}
 801b538:	bf00      	nop
 801b53a:	bf00      	nop
 801b53c:	3708      	adds	r7, #8
 801b53e:	46bd      	mov	sp, r7
 801b540:	bd80      	pop	{r7, pc}
 801b542:	bf00      	nop
 801b544:	08025470 	.word	0x08025470
 801b548:	0801b4a5 	.word	0x0801b4a5

0801b54c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b086      	sub	sp, #24
 801b550:	af00      	add	r7, sp, #0
 801b552:	60f8      	str	r0, [r7, #12]
 801b554:	60b9      	str	r1, [r7, #8]
 801b556:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b55e:	d306      	bcc.n	801b56e <sys_timeout+0x22>
 801b560:	4b0a      	ldr	r3, [pc, #40]	@ (801b58c <sys_timeout+0x40>)
 801b562:	f240 1229 	movw	r2, #297	@ 0x129
 801b566:	490a      	ldr	r1, [pc, #40]	@ (801b590 <sys_timeout+0x44>)
 801b568:	480a      	ldr	r0, [pc, #40]	@ (801b594 <sys_timeout+0x48>)
 801b56a:	f004 fc9b 	bl	801fea4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b56e:	f7f0 fdd9 	bl	800c124 <sys_now>
 801b572:	4602      	mov	r2, r0
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	4413      	add	r3, r2
 801b578:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b57a:	687a      	ldr	r2, [r7, #4]
 801b57c:	68b9      	ldr	r1, [r7, #8]
 801b57e:	6978      	ldr	r0, [r7, #20]
 801b580:	f7ff ff22 	bl	801b3c8 <sys_timeout_abs>
#endif
}
 801b584:	bf00      	nop
 801b586:	3718      	adds	r7, #24
 801b588:	46bd      	mov	sp, r7
 801b58a:	bd80      	pop	{r7, pc}
 801b58c:	08023dbc 	.word	0x08023dbc
 801b590:	08023e58 	.word	0x08023e58
 801b594:	08023e30 	.word	0x08023e30

0801b598 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b598:	b580      	push	{r7, lr}
 801b59a:	b084      	sub	sp, #16
 801b59c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b59e:	f7f0 fdc1 	bl	800c124 <sys_now>
 801b5a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b5a4:	4b17      	ldr	r3, [pc, #92]	@ (801b604 <sys_check_timeouts+0x6c>)
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b5aa:	68bb      	ldr	r3, [r7, #8]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d022      	beq.n	801b5f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b5b0:	68bb      	ldr	r3, [r7, #8]
 801b5b2:	685b      	ldr	r3, [r3, #4]
 801b5b4:	68fa      	ldr	r2, [r7, #12]
 801b5b6:	1ad3      	subs	r3, r2, r3
 801b5b8:	0fdb      	lsrs	r3, r3, #31
 801b5ba:	f003 0301 	and.w	r3, r3, #1
 801b5be:	b2db      	uxtb	r3, r3
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d11a      	bne.n	801b5fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b5c4:	68bb      	ldr	r3, [r7, #8]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	4a0e      	ldr	r2, [pc, #56]	@ (801b604 <sys_check_timeouts+0x6c>)
 801b5ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b5cc:	68bb      	ldr	r3, [r7, #8]
 801b5ce:	689b      	ldr	r3, [r3, #8]
 801b5d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b5d2:	68bb      	ldr	r3, [r7, #8]
 801b5d4:	68db      	ldr	r3, [r3, #12]
 801b5d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b5d8:	68bb      	ldr	r3, [r7, #8]
 801b5da:	685b      	ldr	r3, [r3, #4]
 801b5dc:	4a0a      	ldr	r2, [pc, #40]	@ (801b608 <sys_check_timeouts+0x70>)
 801b5de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b5e0:	68b9      	ldr	r1, [r7, #8]
 801b5e2:	200a      	movs	r0, #10
 801b5e4:	f7f8 fb48 	bl	8013c78 <memp_free>
    if (handler != NULL) {
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d0da      	beq.n	801b5a4 <sys_check_timeouts+0xc>
      handler(arg);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	6838      	ldr	r0, [r7, #0]
 801b5f2:	4798      	blx	r3
  do {
 801b5f4:	e7d6      	b.n	801b5a4 <sys_check_timeouts+0xc>
      return;
 801b5f6:	bf00      	nop
 801b5f8:	e000      	b.n	801b5fc <sys_check_timeouts+0x64>
      return;
 801b5fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b5fc:	3710      	adds	r7, #16
 801b5fe:	46bd      	mov	sp, r7
 801b600:	bd80      	pop	{r7, pc}
 801b602:	bf00      	nop
 801b604:	200227f0 	.word	0x200227f0
 801b608:	200227f4 	.word	0x200227f4

0801b60c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b082      	sub	sp, #8
 801b610:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b612:	4b16      	ldr	r3, [pc, #88]	@ (801b66c <sys_timeouts_sleeptime+0x60>)
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d102      	bne.n	801b620 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b61a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b61e:	e020      	b.n	801b662 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b620:	f7f0 fd80 	bl	800c124 <sys_now>
 801b624:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b626:	4b11      	ldr	r3, [pc, #68]	@ (801b66c <sys_timeouts_sleeptime+0x60>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	685a      	ldr	r2, [r3, #4]
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	1ad3      	subs	r3, r2, r3
 801b630:	0fdb      	lsrs	r3, r3, #31
 801b632:	f003 0301 	and.w	r3, r3, #1
 801b636:	b2db      	uxtb	r3, r3
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d001      	beq.n	801b640 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b63c:	2300      	movs	r3, #0
 801b63e:	e010      	b.n	801b662 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b640:	4b0a      	ldr	r3, [pc, #40]	@ (801b66c <sys_timeouts_sleeptime+0x60>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	685a      	ldr	r2, [r3, #4]
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	1ad3      	subs	r3, r2, r3
 801b64a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b64c:	683b      	ldr	r3, [r7, #0]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	da06      	bge.n	801b660 <sys_timeouts_sleeptime+0x54>
 801b652:	4b07      	ldr	r3, [pc, #28]	@ (801b670 <sys_timeouts_sleeptime+0x64>)
 801b654:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b658:	4906      	ldr	r1, [pc, #24]	@ (801b674 <sys_timeouts_sleeptime+0x68>)
 801b65a:	4807      	ldr	r0, [pc, #28]	@ (801b678 <sys_timeouts_sleeptime+0x6c>)
 801b65c:	f004 fc22 	bl	801fea4 <iprintf>
    return ret;
 801b660:	683b      	ldr	r3, [r7, #0]
  }
}
 801b662:	4618      	mov	r0, r3
 801b664:	3708      	adds	r7, #8
 801b666:	46bd      	mov	sp, r7
 801b668:	bd80      	pop	{r7, pc}
 801b66a:	bf00      	nop
 801b66c:	200227f0 	.word	0x200227f0
 801b670:	08023dbc 	.word	0x08023dbc
 801b674:	08023e90 	.word	0x08023e90
 801b678:	08023e30 	.word	0x08023e30

0801b67c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b680:	f004 fb10 	bl	801fca4 <rand>
 801b684:	4603      	mov	r3, r0
 801b686:	b29b      	uxth	r3, r3
 801b688:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b68c:	b29b      	uxth	r3, r3
 801b68e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b692:	b29a      	uxth	r2, r3
 801b694:	4b01      	ldr	r3, [pc, #4]	@ (801b69c <udp_init+0x20>)
 801b696:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b698:	bf00      	nop
 801b69a:	bd80      	pop	{r7, pc}
 801b69c:	20000070 	.word	0x20000070

0801b6a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b6a0:	b480      	push	{r7}
 801b6a2:	b083      	sub	sp, #12
 801b6a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b6aa:	4b17      	ldr	r3, [pc, #92]	@ (801b708 <udp_new_port+0x68>)
 801b6ac:	881b      	ldrh	r3, [r3, #0]
 801b6ae:	1c5a      	adds	r2, r3, #1
 801b6b0:	b291      	uxth	r1, r2
 801b6b2:	4a15      	ldr	r2, [pc, #84]	@ (801b708 <udp_new_port+0x68>)
 801b6b4:	8011      	strh	r1, [r2, #0]
 801b6b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b6ba:	4293      	cmp	r3, r2
 801b6bc:	d103      	bne.n	801b6c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b6be:	4b12      	ldr	r3, [pc, #72]	@ (801b708 <udp_new_port+0x68>)
 801b6c0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b6c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6c6:	4b11      	ldr	r3, [pc, #68]	@ (801b70c <udp_new_port+0x6c>)
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	603b      	str	r3, [r7, #0]
 801b6cc:	e011      	b.n	801b6f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	8a5a      	ldrh	r2, [r3, #18]
 801b6d2:	4b0d      	ldr	r3, [pc, #52]	@ (801b708 <udp_new_port+0x68>)
 801b6d4:	881b      	ldrh	r3, [r3, #0]
 801b6d6:	429a      	cmp	r2, r3
 801b6d8:	d108      	bne.n	801b6ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b6da:	88fb      	ldrh	r3, [r7, #6]
 801b6dc:	3301      	adds	r3, #1
 801b6de:	80fb      	strh	r3, [r7, #6]
 801b6e0:	88fb      	ldrh	r3, [r7, #6]
 801b6e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b6e6:	d3e0      	bcc.n	801b6aa <udp_new_port+0xa>
        return 0;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	e007      	b.n	801b6fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b6ec:	683b      	ldr	r3, [r7, #0]
 801b6ee:	68db      	ldr	r3, [r3, #12]
 801b6f0:	603b      	str	r3, [r7, #0]
 801b6f2:	683b      	ldr	r3, [r7, #0]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d1ea      	bne.n	801b6ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b6f8:	4b03      	ldr	r3, [pc, #12]	@ (801b708 <udp_new_port+0x68>)
 801b6fa:	881b      	ldrh	r3, [r3, #0]
}
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	370c      	adds	r7, #12
 801b700:	46bd      	mov	sp, r7
 801b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b706:	4770      	bx	lr
 801b708:	20000070 	.word	0x20000070
 801b70c:	200227fc 	.word	0x200227fc

0801b710 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b710:	b580      	push	{r7, lr}
 801b712:	b084      	sub	sp, #16
 801b714:	af00      	add	r7, sp, #0
 801b716:	60f8      	str	r0, [r7, #12]
 801b718:	60b9      	str	r1, [r7, #8]
 801b71a:	4613      	mov	r3, r2
 801b71c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d105      	bne.n	801b730 <udp_input_local_match+0x20>
 801b724:	4b27      	ldr	r3, [pc, #156]	@ (801b7c4 <udp_input_local_match+0xb4>)
 801b726:	2287      	movs	r2, #135	@ 0x87
 801b728:	4927      	ldr	r1, [pc, #156]	@ (801b7c8 <udp_input_local_match+0xb8>)
 801b72a:	4828      	ldr	r0, [pc, #160]	@ (801b7cc <udp_input_local_match+0xbc>)
 801b72c:	f004 fbba 	bl	801fea4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b730:	68bb      	ldr	r3, [r7, #8]
 801b732:	2b00      	cmp	r3, #0
 801b734:	d105      	bne.n	801b742 <udp_input_local_match+0x32>
 801b736:	4b23      	ldr	r3, [pc, #140]	@ (801b7c4 <udp_input_local_match+0xb4>)
 801b738:	2288      	movs	r2, #136	@ 0x88
 801b73a:	4925      	ldr	r1, [pc, #148]	@ (801b7d0 <udp_input_local_match+0xc0>)
 801b73c:	4823      	ldr	r0, [pc, #140]	@ (801b7cc <udp_input_local_match+0xbc>)
 801b73e:	f004 fbb1 	bl	801fea4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	7a1b      	ldrb	r3, [r3, #8]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d00b      	beq.n	801b762 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	7a1a      	ldrb	r2, [r3, #8]
 801b74e:	4b21      	ldr	r3, [pc, #132]	@ (801b7d4 <udp_input_local_match+0xc4>)
 801b750:	685b      	ldr	r3, [r3, #4]
 801b752:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b756:	3301      	adds	r3, #1
 801b758:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b75a:	429a      	cmp	r2, r3
 801b75c:	d001      	beq.n	801b762 <udp_input_local_match+0x52>
    return 0;
 801b75e:	2300      	movs	r3, #0
 801b760:	e02b      	b.n	801b7ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b762:	79fb      	ldrb	r3, [r7, #7]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d018      	beq.n	801b79a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d013      	beq.n	801b796 <udp_input_local_match+0x86>
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d00f      	beq.n	801b796 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b776:	4b17      	ldr	r3, [pc, #92]	@ (801b7d4 <udp_input_local_match+0xc4>)
 801b778:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b77a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b77e:	d00a      	beq.n	801b796 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	681a      	ldr	r2, [r3, #0]
 801b784:	4b13      	ldr	r3, [pc, #76]	@ (801b7d4 <udp_input_local_match+0xc4>)
 801b786:	695b      	ldr	r3, [r3, #20]
 801b788:	405a      	eors	r2, r3
 801b78a:	68bb      	ldr	r3, [r7, #8]
 801b78c:	3308      	adds	r3, #8
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b792:	2b00      	cmp	r3, #0
 801b794:	d110      	bne.n	801b7b8 <udp_input_local_match+0xa8>
          return 1;
 801b796:	2301      	movs	r3, #1
 801b798:	e00f      	b.n	801b7ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d009      	beq.n	801b7b4 <udp_input_local_match+0xa4>
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d005      	beq.n	801b7b4 <udp_input_local_match+0xa4>
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	681a      	ldr	r2, [r3, #0]
 801b7ac:	4b09      	ldr	r3, [pc, #36]	@ (801b7d4 <udp_input_local_match+0xc4>)
 801b7ae:	695b      	ldr	r3, [r3, #20]
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	d101      	bne.n	801b7b8 <udp_input_local_match+0xa8>
        return 1;
 801b7b4:	2301      	movs	r3, #1
 801b7b6:	e000      	b.n	801b7ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b7b8:	2300      	movs	r3, #0
}
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	3710      	adds	r7, #16
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	bd80      	pop	{r7, pc}
 801b7c2:	bf00      	nop
 801b7c4:	08023ea4 	.word	0x08023ea4
 801b7c8:	08023ed4 	.word	0x08023ed4
 801b7cc:	08023ef8 	.word	0x08023ef8
 801b7d0:	08023f20 	.word	0x08023f20
 801b7d4:	2001f65c 	.word	0x2001f65c

0801b7d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b7d8:	b590      	push	{r4, r7, lr}
 801b7da:	b08d      	sub	sp, #52	@ 0x34
 801b7dc:	af02      	add	r7, sp, #8
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b7e2:	2300      	movs	r3, #0
 801b7e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d105      	bne.n	801b7f8 <udp_input+0x20>
 801b7ec:	4b95      	ldr	r3, [pc, #596]	@ (801ba44 <udp_input+0x26c>)
 801b7ee:	22cf      	movs	r2, #207	@ 0xcf
 801b7f0:	4995      	ldr	r1, [pc, #596]	@ (801ba48 <udp_input+0x270>)
 801b7f2:	4896      	ldr	r0, [pc, #600]	@ (801ba4c <udp_input+0x274>)
 801b7f4:	f004 fb56 	bl	801fea4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b7f8:	683b      	ldr	r3, [r7, #0]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d105      	bne.n	801b80a <udp_input+0x32>
 801b7fe:	4b91      	ldr	r3, [pc, #580]	@ (801ba44 <udp_input+0x26c>)
 801b800:	22d0      	movs	r2, #208	@ 0xd0
 801b802:	4993      	ldr	r1, [pc, #588]	@ (801ba50 <udp_input+0x278>)
 801b804:	4891      	ldr	r0, [pc, #580]	@ (801ba4c <udp_input+0x274>)
 801b806:	f004 fb4d 	bl	801fea4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	895b      	ldrh	r3, [r3, #10]
 801b80e:	2b07      	cmp	r3, #7
 801b810:	d809      	bhi.n	801b826 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	891b      	ldrh	r3, [r3, #8]
 801b816:	4619      	mov	r1, r3
 801b818:	488e      	ldr	r0, [pc, #568]	@ (801ba54 <udp_input+0x27c>)
 801b81a:	f004 fb43 	bl	801fea4 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b81e:	6878      	ldr	r0, [r7, #4]
 801b820:	f7f9 f9c4 	bl	8014bac <pbuf_free>
    goto end;
 801b824:	e18d      	b.n	801bb42 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	685b      	ldr	r3, [r3, #4]
 801b82a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b82c:	4b8a      	ldr	r3, [pc, #552]	@ (801ba58 <udp_input+0x280>)
 801b82e:	695b      	ldr	r3, [r3, #20]
 801b830:	4a89      	ldr	r2, [pc, #548]	@ (801ba58 <udp_input+0x280>)
 801b832:	6812      	ldr	r2, [r2, #0]
 801b834:	4611      	mov	r1, r2
 801b836:	4618      	mov	r0, r3
 801b838:	f002 fac6 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801b83c:	4603      	mov	r3, r0
 801b83e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	891b      	ldrh	r3, [r3, #8]
 801b844:	4619      	mov	r1, r3
 801b846:	4885      	ldr	r0, [pc, #532]	@ (801ba5c <udp_input+0x284>)
 801b848:	f004 fb2c 	bl	801fea4 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	881b      	ldrh	r3, [r3, #0]
 801b850:	b29b      	uxth	r3, r3
 801b852:	4618      	mov	r0, r3
 801b854:	f7f7 fcc6 	bl	80131e4 <lwip_htons>
 801b858:	4603      	mov	r3, r0
 801b85a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b85c:	697b      	ldr	r3, [r7, #20]
 801b85e:	885b      	ldrh	r3, [r3, #2]
 801b860:	b29b      	uxth	r3, r3
 801b862:	4618      	mov	r0, r3
 801b864:	f7f7 fcbe 	bl	80131e4 <lwip_htons>
 801b868:	4603      	mov	r3, r0
 801b86a:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801b86c:	6978      	ldr	r0, [r7, #20]
 801b86e:	f000 fe37 	bl	801c4e0 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801b872:	487b      	ldr	r0, [pc, #492]	@ (801ba60 <udp_input+0x288>)
 801b874:	f004 fb16 	bl	801fea4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801b878:	4b77      	ldr	r3, [pc, #476]	@ (801ba58 <udp_input+0x280>)
 801b87a:	695b      	ldr	r3, [r3, #20]
 801b87c:	b2db      	uxtb	r3, r3
 801b87e:	4619      	mov	r1, r3
 801b880:	4b75      	ldr	r3, [pc, #468]	@ (801ba58 <udp_input+0x280>)
 801b882:	695b      	ldr	r3, [r3, #20]
 801b884:	0a1b      	lsrs	r3, r3, #8
 801b886:	b2db      	uxtb	r3, r3
 801b888:	461a      	mov	r2, r3
 801b88a:	4b73      	ldr	r3, [pc, #460]	@ (801ba58 <udp_input+0x280>)
 801b88c:	695b      	ldr	r3, [r3, #20]
 801b88e:	0c1b      	lsrs	r3, r3, #16
 801b890:	b2db      	uxtb	r3, r3
 801b892:	4618      	mov	r0, r3
 801b894:	4b70      	ldr	r3, [pc, #448]	@ (801ba58 <udp_input+0x280>)
 801b896:	695b      	ldr	r3, [r3, #20]
 801b898:	0e1b      	lsrs	r3, r3, #24
 801b89a:	b2db      	uxtb	r3, r3
 801b89c:	9300      	str	r3, [sp, #0]
 801b89e:	4603      	mov	r3, r0
 801b8a0:	4870      	ldr	r0, [pc, #448]	@ (801ba64 <udp_input+0x28c>)
 801b8a2:	f004 faff 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801b8a6:	697b      	ldr	r3, [r7, #20]
 801b8a8:	885b      	ldrh	r3, [r3, #2]
 801b8aa:	b29b      	uxth	r3, r3
 801b8ac:	4618      	mov	r0, r3
 801b8ae:	f7f7 fc99 	bl	80131e4 <lwip_htons>
 801b8b2:	4603      	mov	r3, r0
 801b8b4:	4619      	mov	r1, r3
 801b8b6:	486c      	ldr	r0, [pc, #432]	@ (801ba68 <udp_input+0x290>)
 801b8b8:	f004 faf4 	bl	801fea4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801b8bc:	4b66      	ldr	r3, [pc, #408]	@ (801ba58 <udp_input+0x280>)
 801b8be:	691b      	ldr	r3, [r3, #16]
 801b8c0:	b2db      	uxtb	r3, r3
 801b8c2:	4619      	mov	r1, r3
 801b8c4:	4b64      	ldr	r3, [pc, #400]	@ (801ba58 <udp_input+0x280>)
 801b8c6:	691b      	ldr	r3, [r3, #16]
 801b8c8:	0a1b      	lsrs	r3, r3, #8
 801b8ca:	b2db      	uxtb	r3, r3
 801b8cc:	461a      	mov	r2, r3
 801b8ce:	4b62      	ldr	r3, [pc, #392]	@ (801ba58 <udp_input+0x280>)
 801b8d0:	691b      	ldr	r3, [r3, #16]
 801b8d2:	0c1b      	lsrs	r3, r3, #16
 801b8d4:	b2db      	uxtb	r3, r3
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	4b5f      	ldr	r3, [pc, #380]	@ (801ba58 <udp_input+0x280>)
 801b8da:	691b      	ldr	r3, [r3, #16]
 801b8dc:	0e1b      	lsrs	r3, r3, #24
 801b8de:	b2db      	uxtb	r3, r3
 801b8e0:	9300      	str	r3, [sp, #0]
 801b8e2:	4603      	mov	r3, r0
 801b8e4:	485f      	ldr	r0, [pc, #380]	@ (801ba64 <udp_input+0x28c>)
 801b8e6:	f004 fadd 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801b8ea:	697b      	ldr	r3, [r7, #20]
 801b8ec:	881b      	ldrh	r3, [r3, #0]
 801b8ee:	b29b      	uxth	r3, r3
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	f7f7 fc77 	bl	80131e4 <lwip_htons>
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	4619      	mov	r1, r3
 801b8fa:	485c      	ldr	r0, [pc, #368]	@ (801ba6c <udp_input+0x294>)
 801b8fc:	f004 fad2 	bl	801fea4 <iprintf>

  pcb = NULL;
 801b900:	2300      	movs	r3, #0
 801b902:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b904:	2300      	movs	r3, #0
 801b906:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b908:	2300      	movs	r3, #0
 801b90a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b90c:	4b58      	ldr	r3, [pc, #352]	@ (801ba70 <udp_input+0x298>)
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	627b      	str	r3, [r7, #36]	@ 0x24
 801b912:	e091      	b.n	801ba38 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801b914:	4857      	ldr	r0, [pc, #348]	@ (801ba74 <udp_input+0x29c>)
 801b916:	f004 fac5 	bl	801fea4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801b91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	4619      	mov	r1, r3
 801b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	0a1b      	lsrs	r3, r3, #8
 801b928:	b2db      	uxtb	r3, r3
 801b92a:	461a      	mov	r2, r3
 801b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	0c1b      	lsrs	r3, r3, #16
 801b932:	b2db      	uxtb	r3, r3
 801b934:	4618      	mov	r0, r3
 801b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	0e1b      	lsrs	r3, r3, #24
 801b93c:	b2db      	uxtb	r3, r3
 801b93e:	9300      	str	r3, [sp, #0]
 801b940:	4603      	mov	r3, r0
 801b942:	4848      	ldr	r0, [pc, #288]	@ (801ba64 <udp_input+0x28c>)
 801b944:	f004 faae 	bl	801fea4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94a:	8a5b      	ldrh	r3, [r3, #18]
 801b94c:	4619      	mov	r1, r3
 801b94e:	4846      	ldr	r0, [pc, #280]	@ (801ba68 <udp_input+0x290>)
 801b950:	f004 faa8 	bl	801fea4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801b954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b956:	685b      	ldr	r3, [r3, #4]
 801b958:	b2db      	uxtb	r3, r3
 801b95a:	4619      	mov	r1, r3
 801b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95e:	685b      	ldr	r3, [r3, #4]
 801b960:	0a1b      	lsrs	r3, r3, #8
 801b962:	b2db      	uxtb	r3, r3
 801b964:	461a      	mov	r2, r3
 801b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b968:	685b      	ldr	r3, [r3, #4]
 801b96a:	0c1b      	lsrs	r3, r3, #16
 801b96c:	b2db      	uxtb	r3, r3
 801b96e:	4618      	mov	r0, r3
 801b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b972:	685b      	ldr	r3, [r3, #4]
 801b974:	0e1b      	lsrs	r3, r3, #24
 801b976:	b2db      	uxtb	r3, r3
 801b978:	9300      	str	r3, [sp, #0]
 801b97a:	4603      	mov	r3, r0
 801b97c:	4839      	ldr	r0, [pc, #228]	@ (801ba64 <udp_input+0x28c>)
 801b97e:	f004 fa91 	bl	801fea4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b984:	8a9b      	ldrh	r3, [r3, #20]
 801b986:	4619      	mov	r1, r3
 801b988:	4838      	ldr	r0, [pc, #224]	@ (801ba6c <udp_input+0x294>)
 801b98a:	f004 fa8b 	bl	801fea4 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b990:	8a5b      	ldrh	r3, [r3, #18]
 801b992:	89fa      	ldrh	r2, [r7, #14]
 801b994:	429a      	cmp	r2, r3
 801b996:	d14a      	bne.n	801ba2e <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b998:	7cfb      	ldrb	r3, [r7, #19]
 801b99a:	461a      	mov	r2, r3
 801b99c:	6839      	ldr	r1, [r7, #0]
 801b99e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b9a0:	f7ff feb6 	bl	801b710 <udp_input_local_match>
 801b9a4:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d041      	beq.n	801ba2e <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9ac:	7c1b      	ldrb	r3, [r3, #16]
 801b9ae:	f003 0304 	and.w	r3, r3, #4
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d11d      	bne.n	801b9f2 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 801b9b6:	69fb      	ldr	r3, [r7, #28]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d102      	bne.n	801b9c2 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9be:	61fb      	str	r3, [r7, #28]
 801b9c0:	e017      	b.n	801b9f2 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b9c2:	7cfb      	ldrb	r3, [r7, #19]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d014      	beq.n	801b9f2 <udp_input+0x21a>
 801b9c8:	4b23      	ldr	r3, [pc, #140]	@ (801ba58 <udp_input+0x280>)
 801b9ca:	695b      	ldr	r3, [r3, #20]
 801b9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b9d0:	d10f      	bne.n	801b9f2 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b9d2:	69fb      	ldr	r3, [r7, #28]
 801b9d4:	681a      	ldr	r2, [r3, #0]
 801b9d6:	683b      	ldr	r3, [r7, #0]
 801b9d8:	3304      	adds	r3, #4
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	429a      	cmp	r2, r3
 801b9de:	d008      	beq.n	801b9f2 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9e2:	681a      	ldr	r2, [r3, #0]
 801b9e4:	683b      	ldr	r3, [r7, #0]
 801b9e6:	3304      	adds	r3, #4
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	429a      	cmp	r2, r3
 801b9ec:	d101      	bne.n	801b9f2 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 801b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9f0:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9f4:	8a9b      	ldrh	r3, [r3, #20]
 801b9f6:	8a3a      	ldrh	r2, [r7, #16]
 801b9f8:	429a      	cmp	r2, r3
 801b9fa:	d118      	bne.n	801ba2e <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9fe:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d005      	beq.n	801ba10 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba06:	685a      	ldr	r2, [r3, #4]
 801ba08:	4b13      	ldr	r3, [pc, #76]	@ (801ba58 <udp_input+0x280>)
 801ba0a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ba0c:	429a      	cmp	r2, r3
 801ba0e:	d10e      	bne.n	801ba2e <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ba10:	6a3b      	ldr	r3, [r7, #32]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d030      	beq.n	801ba78 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba18:	68da      	ldr	r2, [r3, #12]
 801ba1a:	6a3b      	ldr	r3, [r7, #32]
 801ba1c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801ba1e:	4b14      	ldr	r3, [pc, #80]	@ (801ba70 <udp_input+0x298>)
 801ba20:	681a      	ldr	r2, [r3, #0]
 801ba22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba24:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801ba26:	4a12      	ldr	r2, [pc, #72]	@ (801ba70 <udp_input+0x298>)
 801ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba2a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801ba2c:	e024      	b.n	801ba78 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 801ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba30:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba34:	68db      	ldr	r3, [r3, #12]
 801ba36:	627b      	str	r3, [r7, #36]	@ 0x24
 801ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	f47f af6a 	bne.w	801b914 <udp_input+0x13c>
 801ba40:	e01b      	b.n	801ba7a <udp_input+0x2a2>
 801ba42:	bf00      	nop
 801ba44:	08023ea4 	.word	0x08023ea4
 801ba48:	08023f48 	.word	0x08023f48
 801ba4c:	08023ef8 	.word	0x08023ef8
 801ba50:	08023f60 	.word	0x08023f60
 801ba54:	08023f7c 	.word	0x08023f7c
 801ba58:	2001f65c 	.word	0x2001f65c
 801ba5c:	08023fb4 	.word	0x08023fb4
 801ba60:	08023fe0 	.word	0x08023fe0
 801ba64:	08023fe8 	.word	0x08023fe8
 801ba68:	08023ff8 	.word	0x08023ff8
 801ba6c:	08024008 	.word	0x08024008
 801ba70:	200227fc 	.word	0x200227fc
 801ba74:	08024010 	.word	0x08024010
        break;
 801ba78:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d101      	bne.n	801ba84 <udp_input+0x2ac>
    pcb = uncon_pcb;
 801ba80:	69fb      	ldr	r3, [r7, #28]
 801ba82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d002      	beq.n	801ba90 <udp_input+0x2b8>
    for_us = 1;
 801ba8a:	2301      	movs	r3, #1
 801ba8c:	76fb      	strb	r3, [r7, #27]
 801ba8e:	e00a      	b.n	801baa6 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801ba90:	683b      	ldr	r3, [r7, #0]
 801ba92:	3304      	adds	r3, #4
 801ba94:	681a      	ldr	r2, [r3, #0]
 801ba96:	4b2d      	ldr	r3, [pc, #180]	@ (801bb4c <udp_input+0x374>)
 801ba98:	695b      	ldr	r3, [r3, #20]
 801ba9a:	429a      	cmp	r2, r3
 801ba9c:	bf0c      	ite	eq
 801ba9e:	2301      	moveq	r3, #1
 801baa0:	2300      	movne	r3, #0
 801baa2:	b2db      	uxtb	r3, r3
 801baa4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801baa6:	7efb      	ldrb	r3, [r7, #27]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d047      	beq.n	801bb3c <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801baac:	4828      	ldr	r0, [pc, #160]	@ (801bb50 <udp_input+0x378>)
 801baae:	f004 fa69 	bl	801ff84 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801bab2:	2108      	movs	r1, #8
 801bab4:	6878      	ldr	r0, [r7, #4]
 801bab6:	f7f8 fff3 	bl	8014aa0 <pbuf_remove_header>
 801baba:	4603      	mov	r3, r0
 801babc:	2b00      	cmp	r3, #0
 801babe:	d00a      	beq.n	801bad6 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801bac0:	4b24      	ldr	r3, [pc, #144]	@ (801bb54 <udp_input+0x37c>)
 801bac2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801bac6:	4924      	ldr	r1, [pc, #144]	@ (801bb58 <udp_input+0x380>)
 801bac8:	4824      	ldr	r0, [pc, #144]	@ (801bb5c <udp_input+0x384>)
 801baca:	f004 f9eb 	bl	801fea4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801bace:	6878      	ldr	r0, [r7, #4]
 801bad0:	f7f9 f86c 	bl	8014bac <pbuf_free>
      goto end;
 801bad4:	e035      	b.n	801bb42 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 801bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d012      	beq.n	801bb02 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801badc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bade:	699b      	ldr	r3, [r3, #24]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d00a      	beq.n	801bafa <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bae6:	699c      	ldr	r4, [r3, #24]
 801bae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baea:	69d8      	ldr	r0, [r3, #28]
 801baec:	8a3b      	ldrh	r3, [r7, #16]
 801baee:	9300      	str	r3, [sp, #0]
 801baf0:	4b1b      	ldr	r3, [pc, #108]	@ (801bb60 <udp_input+0x388>)
 801baf2:	687a      	ldr	r2, [r7, #4]
 801baf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801baf6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801baf8:	e024      	b.n	801bb44 <udp_input+0x36c>
        pbuf_free(p);
 801bafa:	6878      	ldr	r0, [r7, #4]
 801bafc:	f7f9 f856 	bl	8014bac <pbuf_free>
        goto end;
 801bb00:	e01f      	b.n	801bb42 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801bb02:	4818      	ldr	r0, [pc, #96]	@ (801bb64 <udp_input+0x38c>)
 801bb04:	f004 fa3e 	bl	801ff84 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bb08:	7cfb      	ldrb	r3, [r7, #19]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d112      	bne.n	801bb34 <udp_input+0x35c>
 801bb0e:	4b0f      	ldr	r3, [pc, #60]	@ (801bb4c <udp_input+0x374>)
 801bb10:	695b      	ldr	r3, [r3, #20]
 801bb12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bb16:	2be0      	cmp	r3, #224	@ 0xe0
 801bb18:	d00c      	beq.n	801bb34 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bb1a:	4b0c      	ldr	r3, [pc, #48]	@ (801bb4c <udp_input+0x374>)
 801bb1c:	899b      	ldrh	r3, [r3, #12]
 801bb1e:	3308      	adds	r3, #8
 801bb20:	b29b      	uxth	r3, r3
 801bb22:	b21b      	sxth	r3, r3
 801bb24:	4619      	mov	r1, r3
 801bb26:	6878      	ldr	r0, [r7, #4]
 801bb28:	f7f9 f82d 	bl	8014b86 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bb2c:	2103      	movs	r1, #3
 801bb2e:	6878      	ldr	r0, [r7, #4]
 801bb30:	f001 fdea 	bl	801d708 <icmp_dest_unreach>
      pbuf_free(p);
 801bb34:	6878      	ldr	r0, [r7, #4]
 801bb36:	f7f9 f839 	bl	8014bac <pbuf_free>
  return;
 801bb3a:	e003      	b.n	801bb44 <udp_input+0x36c>
    pbuf_free(p);
 801bb3c:	6878      	ldr	r0, [r7, #4]
 801bb3e:	f7f9 f835 	bl	8014bac <pbuf_free>
  return;
 801bb42:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801bb44:	372c      	adds	r7, #44	@ 0x2c
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd90      	pop	{r4, r7, pc}
 801bb4a:	bf00      	nop
 801bb4c:	2001f65c 	.word	0x2001f65c
 801bb50:	08024018 	.word	0x08024018
 801bb54:	08023ea4 	.word	0x08023ea4
 801bb58:	08024038 	.word	0x08024038
 801bb5c:	08023ef8 	.word	0x08023ef8
 801bb60:	2001f66c 	.word	0x2001f66c
 801bb64:	08024054 	.word	0x08024054

0801bb68 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b082      	sub	sp, #8
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
 801bb70:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d109      	bne.n	801bb8c <udp_send+0x24>
 801bb78:	4b11      	ldr	r3, [pc, #68]	@ (801bbc0 <udp_send+0x58>)
 801bb7a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801bb7e:	4911      	ldr	r1, [pc, #68]	@ (801bbc4 <udp_send+0x5c>)
 801bb80:	4811      	ldr	r0, [pc, #68]	@ (801bbc8 <udp_send+0x60>)
 801bb82:	f004 f98f 	bl	801fea4 <iprintf>
 801bb86:	f06f 030f 	mvn.w	r3, #15
 801bb8a:	e015      	b.n	801bbb8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801bb8c:	683b      	ldr	r3, [r7, #0]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d109      	bne.n	801bba6 <udp_send+0x3e>
 801bb92:	4b0b      	ldr	r3, [pc, #44]	@ (801bbc0 <udp_send+0x58>)
 801bb94:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801bb98:	490c      	ldr	r1, [pc, #48]	@ (801bbcc <udp_send+0x64>)
 801bb9a:	480b      	ldr	r0, [pc, #44]	@ (801bbc8 <udp_send+0x60>)
 801bb9c:	f004 f982 	bl	801fea4 <iprintf>
 801bba0:	f06f 030f 	mvn.w	r3, #15
 801bba4:	e008      	b.n	801bbb8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	1d1a      	adds	r2, r3, #4
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	8a9b      	ldrh	r3, [r3, #20]
 801bbae:	6839      	ldr	r1, [r7, #0]
 801bbb0:	6878      	ldr	r0, [r7, #4]
 801bbb2:	f000 f80d 	bl	801bbd0 <udp_sendto>
 801bbb6:	4603      	mov	r3, r0
}
 801bbb8:	4618      	mov	r0, r3
 801bbba:	3708      	adds	r7, #8
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	bd80      	pop	{r7, pc}
 801bbc0:	08023ea4 	.word	0x08023ea4
 801bbc4:	0802406c 	.word	0x0802406c
 801bbc8:	08023ef8 	.word	0x08023ef8
 801bbcc:	08024084 	.word	0x08024084

0801bbd0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b088      	sub	sp, #32
 801bbd4:	af02      	add	r7, sp, #8
 801bbd6:	60f8      	str	r0, [r7, #12]
 801bbd8:	60b9      	str	r1, [r7, #8]
 801bbda:	607a      	str	r2, [r7, #4]
 801bbdc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d109      	bne.n	801bbf8 <udp_sendto+0x28>
 801bbe4:	4b3b      	ldr	r3, [pc, #236]	@ (801bcd4 <udp_sendto+0x104>)
 801bbe6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801bbea:	493b      	ldr	r1, [pc, #236]	@ (801bcd8 <udp_sendto+0x108>)
 801bbec:	483b      	ldr	r0, [pc, #236]	@ (801bcdc <udp_sendto+0x10c>)
 801bbee:	f004 f959 	bl	801fea4 <iprintf>
 801bbf2:	f06f 030f 	mvn.w	r3, #15
 801bbf6:	e068      	b.n	801bcca <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d109      	bne.n	801bc12 <udp_sendto+0x42>
 801bbfe:	4b35      	ldr	r3, [pc, #212]	@ (801bcd4 <udp_sendto+0x104>)
 801bc00:	f240 2219 	movw	r2, #537	@ 0x219
 801bc04:	4936      	ldr	r1, [pc, #216]	@ (801bce0 <udp_sendto+0x110>)
 801bc06:	4835      	ldr	r0, [pc, #212]	@ (801bcdc <udp_sendto+0x10c>)
 801bc08:	f004 f94c 	bl	801fea4 <iprintf>
 801bc0c:	f06f 030f 	mvn.w	r3, #15
 801bc10:	e05b      	b.n	801bcca <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d109      	bne.n	801bc2c <udp_sendto+0x5c>
 801bc18:	4b2e      	ldr	r3, [pc, #184]	@ (801bcd4 <udp_sendto+0x104>)
 801bc1a:	f240 221a 	movw	r2, #538	@ 0x21a
 801bc1e:	4931      	ldr	r1, [pc, #196]	@ (801bce4 <udp_sendto+0x114>)
 801bc20:	482e      	ldr	r0, [pc, #184]	@ (801bcdc <udp_sendto+0x10c>)
 801bc22:	f004 f93f 	bl	801fea4 <iprintf>
 801bc26:	f06f 030f 	mvn.w	r3, #15
 801bc2a:	e04e      	b.n	801bcca <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801bc2c:	482e      	ldr	r0, [pc, #184]	@ (801bce8 <udp_sendto+0x118>)
 801bc2e:	f004 f9a9 	bl	801ff84 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	7a1b      	ldrb	r3, [r3, #8]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d006      	beq.n	801bc48 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	7a1b      	ldrb	r3, [r3, #8]
 801bc3e:	4618      	mov	r0, r3
 801bc40:	f7f8 fc26 	bl	8014490 <netif_get_by_index>
 801bc44:	6178      	str	r0, [r7, #20]
 801bc46:	e003      	b.n	801bc50 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801bc48:	6878      	ldr	r0, [r7, #4]
 801bc4a:	f001 fe27 	bl	801d89c <ip4_route>
 801bc4e:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d12f      	bne.n	801bcb6 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801bc56:	4825      	ldr	r0, [pc, #148]	@ (801bcec <udp_sendto+0x11c>)
 801bc58:	f004 f924 	bl	801fea4 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d003      	beq.n	801bc6a <udp_sendto+0x9a>
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	781b      	ldrb	r3, [r3, #0]
 801bc66:	4619      	mov	r1, r3
 801bc68:	e000      	b.n	801bc6c <udp_sendto+0x9c>
 801bc6a:	2100      	movs	r1, #0
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d004      	beq.n	801bc7c <udp_sendto+0xac>
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	3301      	adds	r3, #1
 801bc76:	781b      	ldrb	r3, [r3, #0]
 801bc78:	461a      	mov	r2, r3
 801bc7a:	e000      	b.n	801bc7e <udp_sendto+0xae>
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d004      	beq.n	801bc8e <udp_sendto+0xbe>
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	3302      	adds	r3, #2
 801bc88:	781b      	ldrb	r3, [r3, #0]
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	e000      	b.n	801bc90 <udp_sendto+0xc0>
 801bc8e:	2000      	movs	r0, #0
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d003      	beq.n	801bc9e <udp_sendto+0xce>
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	3303      	adds	r3, #3
 801bc9a:	781b      	ldrb	r3, [r3, #0]
 801bc9c:	e000      	b.n	801bca0 <udp_sendto+0xd0>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	9300      	str	r3, [sp, #0]
 801bca2:	4603      	mov	r3, r0
 801bca4:	4812      	ldr	r0, [pc, #72]	@ (801bcf0 <udp_sendto+0x120>)
 801bca6:	f004 f8fd 	bl	801fea4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801bcaa:	200a      	movs	r0, #10
 801bcac:	f004 f90c 	bl	801fec8 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801bcb0:	f06f 0303 	mvn.w	r3, #3
 801bcb4:	e009      	b.n	801bcca <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bcb6:	887a      	ldrh	r2, [r7, #2]
 801bcb8:	697b      	ldr	r3, [r7, #20]
 801bcba:	9300      	str	r3, [sp, #0]
 801bcbc:	4613      	mov	r3, r2
 801bcbe:	687a      	ldr	r2, [r7, #4]
 801bcc0:	68b9      	ldr	r1, [r7, #8]
 801bcc2:	68f8      	ldr	r0, [r7, #12]
 801bcc4:	f000 f816 	bl	801bcf4 <udp_sendto_if>
 801bcc8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bcca:	4618      	mov	r0, r3
 801bccc:	3718      	adds	r7, #24
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bd80      	pop	{r7, pc}
 801bcd2:	bf00      	nop
 801bcd4:	08023ea4 	.word	0x08023ea4
 801bcd8:	0802409c 	.word	0x0802409c
 801bcdc:	08023ef8 	.word	0x08023ef8
 801bce0:	080240b4 	.word	0x080240b4
 801bce4:	080240d0 	.word	0x080240d0
 801bce8:	080240ec 	.word	0x080240ec
 801bcec:	080240f8 	.word	0x080240f8
 801bcf0:	08023fe8 	.word	0x08023fe8

0801bcf4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bcf4:	b580      	push	{r7, lr}
 801bcf6:	b088      	sub	sp, #32
 801bcf8:	af02      	add	r7, sp, #8
 801bcfa:	60f8      	str	r0, [r7, #12]
 801bcfc:	60b9      	str	r1, [r7, #8]
 801bcfe:	607a      	str	r2, [r7, #4]
 801bd00:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d109      	bne.n	801bd1c <udp_sendto_if+0x28>
 801bd08:	4b2e      	ldr	r3, [pc, #184]	@ (801bdc4 <udp_sendto_if+0xd0>)
 801bd0a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bd0e:	492e      	ldr	r1, [pc, #184]	@ (801bdc8 <udp_sendto_if+0xd4>)
 801bd10:	482e      	ldr	r0, [pc, #184]	@ (801bdcc <udp_sendto_if+0xd8>)
 801bd12:	f004 f8c7 	bl	801fea4 <iprintf>
 801bd16:	f06f 030f 	mvn.w	r3, #15
 801bd1a:	e04f      	b.n	801bdbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bd1c:	68bb      	ldr	r3, [r7, #8]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d109      	bne.n	801bd36 <udp_sendto_if+0x42>
 801bd22:	4b28      	ldr	r3, [pc, #160]	@ (801bdc4 <udp_sendto_if+0xd0>)
 801bd24:	f240 2281 	movw	r2, #641	@ 0x281
 801bd28:	4929      	ldr	r1, [pc, #164]	@ (801bdd0 <udp_sendto_if+0xdc>)
 801bd2a:	4828      	ldr	r0, [pc, #160]	@ (801bdcc <udp_sendto_if+0xd8>)
 801bd2c:	f004 f8ba 	bl	801fea4 <iprintf>
 801bd30:	f06f 030f 	mvn.w	r3, #15
 801bd34:	e042      	b.n	801bdbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d109      	bne.n	801bd50 <udp_sendto_if+0x5c>
 801bd3c:	4b21      	ldr	r3, [pc, #132]	@ (801bdc4 <udp_sendto_if+0xd0>)
 801bd3e:	f240 2282 	movw	r2, #642	@ 0x282
 801bd42:	4924      	ldr	r1, [pc, #144]	@ (801bdd4 <udp_sendto_if+0xe0>)
 801bd44:	4821      	ldr	r0, [pc, #132]	@ (801bdcc <udp_sendto_if+0xd8>)
 801bd46:	f004 f8ad 	bl	801fea4 <iprintf>
 801bd4a:	f06f 030f 	mvn.w	r3, #15
 801bd4e:	e035      	b.n	801bdbc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bd50:	6a3b      	ldr	r3, [r7, #32]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d109      	bne.n	801bd6a <udp_sendto_if+0x76>
 801bd56:	4b1b      	ldr	r3, [pc, #108]	@ (801bdc4 <udp_sendto_if+0xd0>)
 801bd58:	f240 2283 	movw	r2, #643	@ 0x283
 801bd5c:	491e      	ldr	r1, [pc, #120]	@ (801bdd8 <udp_sendto_if+0xe4>)
 801bd5e:	481b      	ldr	r0, [pc, #108]	@ (801bdcc <udp_sendto_if+0xd8>)
 801bd60:	f004 f8a0 	bl	801fea4 <iprintf>
 801bd64:	f06f 030f 	mvn.w	r3, #15
 801bd68:	e028      	b.n	801bdbc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d009      	beq.n	801bd84 <udp_sendto_if+0x90>
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d005      	beq.n	801bd84 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd80:	2be0      	cmp	r3, #224	@ 0xe0
 801bd82:	d103      	bne.n	801bd8c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bd84:	6a3b      	ldr	r3, [r7, #32]
 801bd86:	3304      	adds	r3, #4
 801bd88:	617b      	str	r3, [r7, #20]
 801bd8a:	e00b      	b.n	801bda4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	681a      	ldr	r2, [r3, #0]
 801bd90:	6a3b      	ldr	r3, [r7, #32]
 801bd92:	3304      	adds	r3, #4
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	429a      	cmp	r2, r3
 801bd98:	d002      	beq.n	801bda0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bd9a:	f06f 0303 	mvn.w	r3, #3
 801bd9e:	e00d      	b.n	801bdbc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bda4:	887a      	ldrh	r2, [r7, #2]
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	9301      	str	r3, [sp, #4]
 801bdaa:	6a3b      	ldr	r3, [r7, #32]
 801bdac:	9300      	str	r3, [sp, #0]
 801bdae:	4613      	mov	r3, r2
 801bdb0:	687a      	ldr	r2, [r7, #4]
 801bdb2:	68b9      	ldr	r1, [r7, #8]
 801bdb4:	68f8      	ldr	r0, [r7, #12]
 801bdb6:	f000 f811 	bl	801bddc <udp_sendto_if_src>
 801bdba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	3718      	adds	r7, #24
 801bdc0:	46bd      	mov	sp, r7
 801bdc2:	bd80      	pop	{r7, pc}
 801bdc4:	08023ea4 	.word	0x08023ea4
 801bdc8:	08024110 	.word	0x08024110
 801bdcc:	08023ef8 	.word	0x08023ef8
 801bdd0:	0802412c 	.word	0x0802412c
 801bdd4:	08024148 	.word	0x08024148
 801bdd8:	08024168 	.word	0x08024168

0801bddc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b08c      	sub	sp, #48	@ 0x30
 801bde0:	af04      	add	r7, sp, #16
 801bde2:	60f8      	str	r0, [r7, #12]
 801bde4:	60b9      	str	r1, [r7, #8]
 801bde6:	607a      	str	r2, [r7, #4]
 801bde8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d109      	bne.n	801be04 <udp_sendto_if_src+0x28>
 801bdf0:	4b7a      	ldr	r3, [pc, #488]	@ (801bfdc <udp_sendto_if_src+0x200>)
 801bdf2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801bdf6:	497a      	ldr	r1, [pc, #488]	@ (801bfe0 <udp_sendto_if_src+0x204>)
 801bdf8:	487a      	ldr	r0, [pc, #488]	@ (801bfe4 <udp_sendto_if_src+0x208>)
 801bdfa:	f004 f853 	bl	801fea4 <iprintf>
 801bdfe:	f06f 030f 	mvn.w	r3, #15
 801be02:	e0e6      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801be04:	68bb      	ldr	r3, [r7, #8]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d109      	bne.n	801be1e <udp_sendto_if_src+0x42>
 801be0a:	4b74      	ldr	r3, [pc, #464]	@ (801bfdc <udp_sendto_if_src+0x200>)
 801be0c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801be10:	4975      	ldr	r1, [pc, #468]	@ (801bfe8 <udp_sendto_if_src+0x20c>)
 801be12:	4874      	ldr	r0, [pc, #464]	@ (801bfe4 <udp_sendto_if_src+0x208>)
 801be14:	f004 f846 	bl	801fea4 <iprintf>
 801be18:	f06f 030f 	mvn.w	r3, #15
 801be1c:	e0d9      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2b00      	cmp	r3, #0
 801be22:	d109      	bne.n	801be38 <udp_sendto_if_src+0x5c>
 801be24:	4b6d      	ldr	r3, [pc, #436]	@ (801bfdc <udp_sendto_if_src+0x200>)
 801be26:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801be2a:	4970      	ldr	r1, [pc, #448]	@ (801bfec <udp_sendto_if_src+0x210>)
 801be2c:	486d      	ldr	r0, [pc, #436]	@ (801bfe4 <udp_sendto_if_src+0x208>)
 801be2e:	f004 f839 	bl	801fea4 <iprintf>
 801be32:	f06f 030f 	mvn.w	r3, #15
 801be36:	e0cc      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801be38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d109      	bne.n	801be52 <udp_sendto_if_src+0x76>
 801be3e:	4b67      	ldr	r3, [pc, #412]	@ (801bfdc <udp_sendto_if_src+0x200>)
 801be40:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801be44:	496a      	ldr	r1, [pc, #424]	@ (801bff0 <udp_sendto_if_src+0x214>)
 801be46:	4867      	ldr	r0, [pc, #412]	@ (801bfe4 <udp_sendto_if_src+0x208>)
 801be48:	f004 f82c 	bl	801fea4 <iprintf>
 801be4c:	f06f 030f 	mvn.w	r3, #15
 801be50:	e0bf      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be54:	2b00      	cmp	r3, #0
 801be56:	d109      	bne.n	801be6c <udp_sendto_if_src+0x90>
 801be58:	4b60      	ldr	r3, [pc, #384]	@ (801bfdc <udp_sendto_if_src+0x200>)
 801be5a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801be5e:	4965      	ldr	r1, [pc, #404]	@ (801bff4 <udp_sendto_if_src+0x218>)
 801be60:	4860      	ldr	r0, [pc, #384]	@ (801bfe4 <udp_sendto_if_src+0x208>)
 801be62:	f004 f81f 	bl	801fea4 <iprintf>
 801be66:	f06f 030f 	mvn.w	r3, #15
 801be6a:	e0b2      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801be6c:	68fb      	ldr	r3, [r7, #12]
 801be6e:	8a5b      	ldrh	r3, [r3, #18]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d115      	bne.n	801bea0 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801be74:	4860      	ldr	r0, [pc, #384]	@ (801bff8 <udp_sendto_if_src+0x21c>)
 801be76:	f004 f885 	bl	801ff84 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801be7a:	68f9      	ldr	r1, [r7, #12]
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	8a5b      	ldrh	r3, [r3, #18]
 801be80:	461a      	mov	r2, r3
 801be82:	68f8      	ldr	r0, [r7, #12]
 801be84:	f000 f8cc 	bl	801c020 <udp_bind>
 801be88:	4603      	mov	r3, r0
 801be8a:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801be8c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d005      	beq.n	801bea0 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801be94:	4859      	ldr	r0, [pc, #356]	@ (801bffc <udp_sendto_if_src+0x220>)
 801be96:	f004 f875 	bl	801ff84 <puts>
      return err;
 801be9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801be9e:	e098      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bea0:	68bb      	ldr	r3, [r7, #8]
 801bea2:	891b      	ldrh	r3, [r3, #8]
 801bea4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801bea8:	4293      	cmp	r3, r2
 801beaa:	d902      	bls.n	801beb2 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801beac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801beb0:	e08f      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801beb2:	2108      	movs	r1, #8
 801beb4:	68b8      	ldr	r0, [r7, #8]
 801beb6:	f7f8 fde3 	bl	8014a80 <pbuf_add_header>
 801beba:	4603      	mov	r3, r0
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d01d      	beq.n	801befc <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bec0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bec4:	2108      	movs	r1, #8
 801bec6:	2022      	movs	r0, #34	@ 0x22
 801bec8:	f7f8 fb8c 	bl	80145e4 <pbuf_alloc>
 801becc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bece:	69fb      	ldr	r3, [r7, #28]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d105      	bne.n	801bee0 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801bed4:	484a      	ldr	r0, [pc, #296]	@ (801c000 <udp_sendto_if_src+0x224>)
 801bed6:	f004 f855 	bl	801ff84 <puts>
      return ERR_MEM;
 801beda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bede:	e078      	b.n	801bfd2 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 801bee0:	68bb      	ldr	r3, [r7, #8]
 801bee2:	891b      	ldrh	r3, [r3, #8]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d003      	beq.n	801bef0 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bee8:	68b9      	ldr	r1, [r7, #8]
 801beea:	69f8      	ldr	r0, [r7, #28]
 801beec:	f7f8 ff82 	bl	8014df4 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801bef0:	68ba      	ldr	r2, [r7, #8]
 801bef2:	69f9      	ldr	r1, [r7, #28]
 801bef4:	4843      	ldr	r0, [pc, #268]	@ (801c004 <udp_sendto_if_src+0x228>)
 801bef6:	f003 ffd5 	bl	801fea4 <iprintf>
 801befa:	e005      	b.n	801bf08 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801befc:	68bb      	ldr	r3, [r7, #8]
 801befe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801bf00:	68b9      	ldr	r1, [r7, #8]
 801bf02:	4841      	ldr	r0, [pc, #260]	@ (801c008 <udp_sendto_if_src+0x22c>)
 801bf04:	f003 ffce 	bl	801fea4 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	895b      	ldrh	r3, [r3, #10]
 801bf0c:	2b07      	cmp	r3, #7
 801bf0e:	d806      	bhi.n	801bf1e <udp_sendto_if_src+0x142>
 801bf10:	4b32      	ldr	r3, [pc, #200]	@ (801bfdc <udp_sendto_if_src+0x200>)
 801bf12:	f240 320d 	movw	r2, #781	@ 0x30d
 801bf16:	493d      	ldr	r1, [pc, #244]	@ (801c00c <udp_sendto_if_src+0x230>)
 801bf18:	4832      	ldr	r0, [pc, #200]	@ (801bfe4 <udp_sendto_if_src+0x208>)
 801bf1a:	f003 ffc3 	bl	801fea4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801bf1e:	69fb      	ldr	r3, [r7, #28]
 801bf20:	685b      	ldr	r3, [r3, #4]
 801bf22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	8a5b      	ldrh	r3, [r3, #18]
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f7f7 f95b 	bl	80131e4 <lwip_htons>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	461a      	mov	r2, r3
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801bf36:	887b      	ldrh	r3, [r7, #2]
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7f7 f953 	bl	80131e4 <lwip_htons>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	461a      	mov	r2, r3
 801bf42:	697b      	ldr	r3, [r7, #20]
 801bf44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801bf46:	697b      	ldr	r3, [r7, #20]
 801bf48:	2200      	movs	r2, #0
 801bf4a:	719a      	strb	r2, [r3, #6]
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801bf50:	69fb      	ldr	r3, [r7, #28]
 801bf52:	891b      	ldrh	r3, [r3, #8]
 801bf54:	4619      	mov	r1, r3
 801bf56:	482e      	ldr	r0, [pc, #184]	@ (801c010 <udp_sendto_if_src+0x234>)
 801bf58:	f003 ffa4 	bl	801fea4 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801bf5c:	69fb      	ldr	r3, [r7, #28]
 801bf5e:	891b      	ldrh	r3, [r3, #8]
 801bf60:	4619      	mov	r1, r3
 801bf62:	482c      	ldr	r0, [pc, #176]	@ (801c014 <udp_sendto_if_src+0x238>)
 801bf64:	f003 ff9e 	bl	801fea4 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801bf68:	69fb      	ldr	r3, [r7, #28]
 801bf6a:	891b      	ldrh	r3, [r3, #8]
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	f7f7 f939 	bl	80131e4 <lwip_htons>
 801bf72:	4603      	mov	r3, r0
 801bf74:	461a      	mov	r2, r3
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801bf7a:	2311      	movs	r3, #17
 801bf7c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	7adb      	ldrb	r3, [r3, #11]
 801bf82:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801bf84:	697b      	ldr	r3, [r7, #20]
 801bf86:	88db      	ldrh	r3, [r3, #6]
 801bf88:	b29b      	uxth	r3, r3
 801bf8a:	4619      	mov	r1, r3
 801bf8c:	4822      	ldr	r0, [pc, #136]	@ (801c018 <udp_sendto_if_src+0x23c>)
 801bf8e:	f003 ff89 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801bf92:	7cfb      	ldrb	r3, [r7, #19]
 801bf94:	4619      	mov	r1, r3
 801bf96:	4821      	ldr	r0, [pc, #132]	@ (801c01c <udp_sendto_if_src+0x240>)
 801bf98:	f003 ff84 	bl	801fea4 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bf9c:	68fb      	ldr	r3, [r7, #12]
 801bf9e:	7a9b      	ldrb	r3, [r3, #10]
 801bfa0:	7cb9      	ldrb	r1, [r7, #18]
 801bfa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bfa4:	9202      	str	r2, [sp, #8]
 801bfa6:	7cfa      	ldrb	r2, [r7, #19]
 801bfa8:	9201      	str	r2, [sp, #4]
 801bfaa:	9300      	str	r3, [sp, #0]
 801bfac:	460b      	mov	r3, r1
 801bfae:	687a      	ldr	r2, [r7, #4]
 801bfb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bfb2:	69f8      	ldr	r0, [r7, #28]
 801bfb4:	f001 fe5a 	bl	801dc6c <ip4_output_if_src>
 801bfb8:	4603      	mov	r3, r0
 801bfba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801bfbc:	69fa      	ldr	r2, [r7, #28]
 801bfbe:	68bb      	ldr	r3, [r7, #8]
 801bfc0:	429a      	cmp	r2, r3
 801bfc2:	d004      	beq.n	801bfce <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801bfc4:	69f8      	ldr	r0, [r7, #28]
 801bfc6:	f7f8 fdf1 	bl	8014bac <pbuf_free>
    q = NULL;
 801bfca:	2300      	movs	r3, #0
 801bfcc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801bfce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	3720      	adds	r7, #32
 801bfd6:	46bd      	mov	sp, r7
 801bfd8:	bd80      	pop	{r7, pc}
 801bfda:	bf00      	nop
 801bfdc:	08023ea4 	.word	0x08023ea4
 801bfe0:	08024188 	.word	0x08024188
 801bfe4:	08023ef8 	.word	0x08023ef8
 801bfe8:	080241a8 	.word	0x080241a8
 801bfec:	080241c8 	.word	0x080241c8
 801bff0:	080241ec 	.word	0x080241ec
 801bff4:	08024210 	.word	0x08024210
 801bff8:	08024234 	.word	0x08024234
 801bffc:	08024264 	.word	0x08024264
 801c000:	08024288 	.word	0x08024288
 801c004:	080242ac 	.word	0x080242ac
 801c008:	080242e4 	.word	0x080242e4
 801c00c:	08024310 	.word	0x08024310
 801c010:	08024340 	.word	0x08024340
 801c014:	0802436c 	.word	0x0802436c
 801c018:	08024390 	.word	0x08024390
 801c01c:	080243b0 	.word	0x080243b0

0801c020 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b088      	sub	sp, #32
 801c024:	af02      	add	r7, sp, #8
 801c026:	60f8      	str	r0, [r7, #12]
 801c028:	60b9      	str	r1, [r7, #8]
 801c02a:	4613      	mov	r3, r2
 801c02c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d101      	bne.n	801c038 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c034:	4b65      	ldr	r3, [pc, #404]	@ (801c1cc <udp_bind+0x1ac>)
 801c036:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d109      	bne.n	801c052 <udp_bind+0x32>
 801c03e:	4b64      	ldr	r3, [pc, #400]	@ (801c1d0 <udp_bind+0x1b0>)
 801c040:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801c044:	4963      	ldr	r1, [pc, #396]	@ (801c1d4 <udp_bind+0x1b4>)
 801c046:	4864      	ldr	r0, [pc, #400]	@ (801c1d8 <udp_bind+0x1b8>)
 801c048:	f003 ff2c 	bl	801fea4 <iprintf>
 801c04c:	f06f 030f 	mvn.w	r3, #15
 801c050:	e0b7      	b.n	801c1c2 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801c052:	4862      	ldr	r0, [pc, #392]	@ (801c1dc <udp_bind+0x1bc>)
 801c054:	f003 ff26 	bl	801fea4 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801c058:	68bb      	ldr	r3, [r7, #8]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d003      	beq.n	801c066 <udp_bind+0x46>
 801c05e:	68bb      	ldr	r3, [r7, #8]
 801c060:	781b      	ldrb	r3, [r3, #0]
 801c062:	4619      	mov	r1, r3
 801c064:	e000      	b.n	801c068 <udp_bind+0x48>
 801c066:	2100      	movs	r1, #0
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d004      	beq.n	801c078 <udp_bind+0x58>
 801c06e:	68bb      	ldr	r3, [r7, #8]
 801c070:	3301      	adds	r3, #1
 801c072:	781b      	ldrb	r3, [r3, #0]
 801c074:	461a      	mov	r2, r3
 801c076:	e000      	b.n	801c07a <udp_bind+0x5a>
 801c078:	2200      	movs	r2, #0
 801c07a:	68bb      	ldr	r3, [r7, #8]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d004      	beq.n	801c08a <udp_bind+0x6a>
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	3302      	adds	r3, #2
 801c084:	781b      	ldrb	r3, [r3, #0]
 801c086:	4618      	mov	r0, r3
 801c088:	e000      	b.n	801c08c <udp_bind+0x6c>
 801c08a:	2000      	movs	r0, #0
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d003      	beq.n	801c09a <udp_bind+0x7a>
 801c092:	68bb      	ldr	r3, [r7, #8]
 801c094:	3303      	adds	r3, #3
 801c096:	781b      	ldrb	r3, [r3, #0]
 801c098:	e000      	b.n	801c09c <udp_bind+0x7c>
 801c09a:	2300      	movs	r3, #0
 801c09c:	9300      	str	r3, [sp, #0]
 801c09e:	4603      	mov	r3, r0
 801c0a0:	484f      	ldr	r0, [pc, #316]	@ (801c1e0 <udp_bind+0x1c0>)
 801c0a2:	f003 feff 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801c0a6:	88fb      	ldrh	r3, [r7, #6]
 801c0a8:	4619      	mov	r1, r3
 801c0aa:	484e      	ldr	r0, [pc, #312]	@ (801c1e4 <udp_bind+0x1c4>)
 801c0ac:	f003 fefa 	bl	801fea4 <iprintf>

  rebind = 0;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0b4:	4b4c      	ldr	r3, [pc, #304]	@ (801c1e8 <udp_bind+0x1c8>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	617b      	str	r3, [r7, #20]
 801c0ba:	e009      	b.n	801c0d0 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c0bc:	68fa      	ldr	r2, [r7, #12]
 801c0be:	697b      	ldr	r3, [r7, #20]
 801c0c0:	429a      	cmp	r2, r3
 801c0c2:	d102      	bne.n	801c0ca <udp_bind+0xaa>
      rebind = 1;
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	74fb      	strb	r3, [r7, #19]
      break;
 801c0c8:	e005      	b.n	801c0d6 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0ca:	697b      	ldr	r3, [r7, #20]
 801c0cc:	68db      	ldr	r3, [r3, #12]
 801c0ce:	617b      	str	r3, [r7, #20]
 801c0d0:	697b      	ldr	r3, [r7, #20]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d1f2      	bne.n	801c0bc <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c0d6:	88fb      	ldrh	r3, [r7, #6]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d10c      	bne.n	801c0f6 <udp_bind+0xd6>
    port = udp_new_port();
 801c0dc:	f7ff fae0 	bl	801b6a0 <udp_new_port>
 801c0e0:	4603      	mov	r3, r0
 801c0e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c0e4:	88fb      	ldrh	r3, [r7, #6]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d134      	bne.n	801c154 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801c0ea:	4840      	ldr	r0, [pc, #256]	@ (801c1ec <udp_bind+0x1cc>)
 801c0ec:	f003 ff4a 	bl	801ff84 <puts>
      return ERR_USE;
 801c0f0:	f06f 0307 	mvn.w	r3, #7
 801c0f4:	e065      	b.n	801c1c2 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0f6:	4b3c      	ldr	r3, [pc, #240]	@ (801c1e8 <udp_bind+0x1c8>)
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	617b      	str	r3, [r7, #20]
 801c0fc:	e027      	b.n	801c14e <udp_bind+0x12e>
      if (pcb != ipcb) {
 801c0fe:	68fa      	ldr	r2, [r7, #12]
 801c100:	697b      	ldr	r3, [r7, #20]
 801c102:	429a      	cmp	r2, r3
 801c104:	d020      	beq.n	801c148 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c106:	697b      	ldr	r3, [r7, #20]
 801c108:	8a5b      	ldrh	r3, [r3, #18]
 801c10a:	88fa      	ldrh	r2, [r7, #6]
 801c10c:	429a      	cmp	r2, r3
 801c10e:	d11b      	bne.n	801c148 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c110:	697b      	ldr	r3, [r7, #20]
 801c112:	681a      	ldr	r2, [r3, #0]
 801c114:	68bb      	ldr	r3, [r7, #8]
 801c116:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c118:	429a      	cmp	r2, r3
 801c11a:	d00d      	beq.n	801c138 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c11c:	68bb      	ldr	r3, [r7, #8]
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d00a      	beq.n	801c138 <udp_bind+0x118>
 801c122:	68bb      	ldr	r3, [r7, #8]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d006      	beq.n	801c138 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c12a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d003      	beq.n	801c138 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d107      	bne.n	801c148 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801c138:	88fb      	ldrh	r3, [r7, #6]
 801c13a:	4619      	mov	r1, r3
 801c13c:	482c      	ldr	r0, [pc, #176]	@ (801c1f0 <udp_bind+0x1d0>)
 801c13e:	f003 feb1 	bl	801fea4 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c142:	f06f 0307 	mvn.w	r3, #7
 801c146:	e03c      	b.n	801c1c2 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c148:	697b      	ldr	r3, [r7, #20]
 801c14a:	68db      	ldr	r3, [r3, #12]
 801c14c:	617b      	str	r3, [r7, #20]
 801c14e:	697b      	ldr	r3, [r7, #20]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d1d4      	bne.n	801c0fe <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c154:	68bb      	ldr	r3, [r7, #8]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d002      	beq.n	801c160 <udp_bind+0x140>
 801c15a:	68bb      	ldr	r3, [r7, #8]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	e000      	b.n	801c162 <udp_bind+0x142>
 801c160:	2300      	movs	r3, #0
 801c162:	68fa      	ldr	r2, [r7, #12]
 801c164:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	88fa      	ldrh	r2, [r7, #6]
 801c16a:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c16c:	7cfb      	ldrb	r3, [r7, #19]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d106      	bne.n	801c180 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c172:	4b1d      	ldr	r3, [pc, #116]	@ (801c1e8 <udp_bind+0x1c8>)
 801c174:	681a      	ldr	r2, [r3, #0]
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c17a:	4a1b      	ldr	r2, [pc, #108]	@ (801c1e8 <udp_bind+0x1c8>)
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801c180:	481c      	ldr	r0, [pc, #112]	@ (801c1f4 <udp_bind+0x1d4>)
 801c182:	f003 fe8f 	bl	801fea4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	b2db      	uxtb	r3, r3
 801c18c:	4619      	mov	r1, r3
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	0a1b      	lsrs	r3, r3, #8
 801c194:	b2db      	uxtb	r3, r3
 801c196:	461a      	mov	r2, r3
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	0c1b      	lsrs	r3, r3, #16
 801c19e:	b2db      	uxtb	r3, r3
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	0e1b      	lsrs	r3, r3, #24
 801c1a8:	b2db      	uxtb	r3, r3
 801c1aa:	9300      	str	r3, [sp, #0]
 801c1ac:	4603      	mov	r3, r0
 801c1ae:	480c      	ldr	r0, [pc, #48]	@ (801c1e0 <udp_bind+0x1c0>)
 801c1b0:	f003 fe78 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	8a5b      	ldrh	r3, [r3, #18]
 801c1b8:	4619      	mov	r1, r3
 801c1ba:	480f      	ldr	r0, [pc, #60]	@ (801c1f8 <udp_bind+0x1d8>)
 801c1bc:	f003 fe72 	bl	801fea4 <iprintf>
  return ERR_OK;
 801c1c0:	2300      	movs	r3, #0
}
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	3718      	adds	r7, #24
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	08025488 	.word	0x08025488
 801c1d0:	08023ea4 	.word	0x08023ea4
 801c1d4:	080243d8 	.word	0x080243d8
 801c1d8:	08023ef8 	.word	0x08023ef8
 801c1dc:	080243f0 	.word	0x080243f0
 801c1e0:	08023fe8 	.word	0x08023fe8
 801c1e4:	08024404 	.word	0x08024404
 801c1e8:	200227fc 	.word	0x200227fc
 801c1ec:	08024414 	.word	0x08024414
 801c1f0:	08024434 	.word	0x08024434
 801c1f4:	0802446c 	.word	0x0802446c
 801c1f8:	08024480 	.word	0x08024480

0801c1fc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b088      	sub	sp, #32
 801c200:	af02      	add	r7, sp, #8
 801c202:	60f8      	str	r0, [r7, #12]
 801c204:	60b9      	str	r1, [r7, #8]
 801c206:	4613      	mov	r3, r2
 801c208:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d109      	bne.n	801c224 <udp_connect+0x28>
 801c210:	4b3c      	ldr	r3, [pc, #240]	@ (801c304 <udp_connect+0x108>)
 801c212:	f240 4235 	movw	r2, #1077	@ 0x435
 801c216:	493c      	ldr	r1, [pc, #240]	@ (801c308 <udp_connect+0x10c>)
 801c218:	483c      	ldr	r0, [pc, #240]	@ (801c30c <udp_connect+0x110>)
 801c21a:	f003 fe43 	bl	801fea4 <iprintf>
 801c21e:	f06f 030f 	mvn.w	r3, #15
 801c222:	e06b      	b.n	801c2fc <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d109      	bne.n	801c23e <udp_connect+0x42>
 801c22a:	4b36      	ldr	r3, [pc, #216]	@ (801c304 <udp_connect+0x108>)
 801c22c:	f240 4236 	movw	r2, #1078	@ 0x436
 801c230:	4937      	ldr	r1, [pc, #220]	@ (801c310 <udp_connect+0x114>)
 801c232:	4836      	ldr	r0, [pc, #216]	@ (801c30c <udp_connect+0x110>)
 801c234:	f003 fe36 	bl	801fea4 <iprintf>
 801c238:	f06f 030f 	mvn.w	r3, #15
 801c23c:	e05e      	b.n	801c2fc <udp_connect+0x100>

  if (pcb->local_port == 0) {
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	8a5b      	ldrh	r3, [r3, #18]
 801c242:	2b00      	cmp	r3, #0
 801c244:	d10f      	bne.n	801c266 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c246:	68f9      	ldr	r1, [r7, #12]
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	8a5b      	ldrh	r3, [r3, #18]
 801c24c:	461a      	mov	r2, r3
 801c24e:	68f8      	ldr	r0, [r7, #12]
 801c250:	f7ff fee6 	bl	801c020 <udp_bind>
 801c254:	4603      	mov	r3, r0
 801c256:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d002      	beq.n	801c266 <udp_connect+0x6a>
      return err;
 801c260:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c264:	e04a      	b.n	801c2fc <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c266:	68bb      	ldr	r3, [r7, #8]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d002      	beq.n	801c272 <udp_connect+0x76>
 801c26c:	68bb      	ldr	r3, [r7, #8]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	e000      	b.n	801c274 <udp_connect+0x78>
 801c272:	2300      	movs	r3, #0
 801c274:	68fa      	ldr	r2, [r7, #12]
 801c276:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	88fa      	ldrh	r2, [r7, #6]
 801c27c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	7c1b      	ldrb	r3, [r3, #16]
 801c282:	f043 0304 	orr.w	r3, r3, #4
 801c286:	b2da      	uxtb	r2, r3
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 801c28c:	4821      	ldr	r0, [pc, #132]	@ (801c314 <udp_connect+0x118>)
 801c28e:	f003 fe09 	bl	801fea4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	685b      	ldr	r3, [r3, #4]
 801c296:	b2db      	uxtb	r3, r3
 801c298:	4619      	mov	r1, r3
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	685b      	ldr	r3, [r3, #4]
 801c29e:	0a1b      	lsrs	r3, r3, #8
 801c2a0:	b2db      	uxtb	r3, r3
 801c2a2:	461a      	mov	r2, r3
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	685b      	ldr	r3, [r3, #4]
 801c2a8:	0c1b      	lsrs	r3, r3, #16
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	685b      	ldr	r3, [r3, #4]
 801c2b2:	0e1b      	lsrs	r3, r3, #24
 801c2b4:	b2db      	uxtb	r3, r3
 801c2b6:	9300      	str	r3, [sp, #0]
 801c2b8:	4603      	mov	r3, r0
 801c2ba:	4817      	ldr	r0, [pc, #92]	@ (801c318 <udp_connect+0x11c>)
 801c2bc:	f003 fdf2 	bl	801fea4 <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	8a9b      	ldrh	r3, [r3, #20]
 801c2c4:	4619      	mov	r1, r3
 801c2c6:	4815      	ldr	r0, [pc, #84]	@ (801c31c <udp_connect+0x120>)
 801c2c8:	f003 fdec 	bl	801fea4 <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c2cc:	4b14      	ldr	r3, [pc, #80]	@ (801c320 <udp_connect+0x124>)
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	617b      	str	r3, [r7, #20]
 801c2d2:	e008      	b.n	801c2e6 <udp_connect+0xea>
    if (pcb == ipcb) {
 801c2d4:	68fa      	ldr	r2, [r7, #12]
 801c2d6:	697b      	ldr	r3, [r7, #20]
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d101      	bne.n	801c2e0 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 801c2dc:	2300      	movs	r3, #0
 801c2de:	e00d      	b.n	801c2fc <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c2e0:	697b      	ldr	r3, [r7, #20]
 801c2e2:	68db      	ldr	r3, [r3, #12]
 801c2e4:	617b      	str	r3, [r7, #20]
 801c2e6:	697b      	ldr	r3, [r7, #20]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d1f3      	bne.n	801c2d4 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c2ec:	4b0c      	ldr	r3, [pc, #48]	@ (801c320 <udp_connect+0x124>)
 801c2ee:	681a      	ldr	r2, [r3, #0]
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c2f4:	4a0a      	ldr	r2, [pc, #40]	@ (801c320 <udp_connect+0x124>)
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c2fa:	2300      	movs	r3, #0
}
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	3718      	adds	r7, #24
 801c300:	46bd      	mov	sp, r7
 801c302:	bd80      	pop	{r7, pc}
 801c304:	08023ea4 	.word	0x08023ea4
 801c308:	08024490 	.word	0x08024490
 801c30c:	08023ef8 	.word	0x08023ef8
 801c310:	080244ac 	.word	0x080244ac
 801c314:	080244c8 	.word	0x080244c8
 801c318:	08023fe8 	.word	0x08023fe8
 801c31c:	08024480 	.word	0x08024480
 801c320:	200227fc 	.word	0x200227fc

0801c324 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b082      	sub	sp, #8
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d107      	bne.n	801c342 <udp_disconnect+0x1e>
 801c332:	4b0d      	ldr	r3, [pc, #52]	@ (801c368 <udp_disconnect+0x44>)
 801c334:	f240 426a 	movw	r2, #1130	@ 0x46a
 801c338:	490c      	ldr	r1, [pc, #48]	@ (801c36c <udp_disconnect+0x48>)
 801c33a:	480d      	ldr	r0, [pc, #52]	@ (801c370 <udp_disconnect+0x4c>)
 801c33c:	f003 fdb2 	bl	801fea4 <iprintf>
 801c340:	e00f      	b.n	801c362 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	2200      	movs	r2, #0
 801c346:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	2200      	movs	r2, #0
 801c34c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	2200      	movs	r2, #0
 801c352:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	7c1b      	ldrb	r3, [r3, #16]
 801c358:	f023 0304 	bic.w	r3, r3, #4
 801c35c:	b2da      	uxtb	r2, r3
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	741a      	strb	r2, [r3, #16]
}
 801c362:	3708      	adds	r7, #8
 801c364:	46bd      	mov	sp, r7
 801c366:	bd80      	pop	{r7, pc}
 801c368:	08023ea4 	.word	0x08023ea4
 801c36c:	080244e4 	.word	0x080244e4
 801c370:	08023ef8 	.word	0x08023ef8

0801c374 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c374:	b580      	push	{r7, lr}
 801c376:	b084      	sub	sp, #16
 801c378:	af00      	add	r7, sp, #0
 801c37a:	60f8      	str	r0, [r7, #12]
 801c37c:	60b9      	str	r1, [r7, #8]
 801c37e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d107      	bne.n	801c396 <udp_recv+0x22>
 801c386:	4b08      	ldr	r3, [pc, #32]	@ (801c3a8 <udp_recv+0x34>)
 801c388:	f240 428a 	movw	r2, #1162	@ 0x48a
 801c38c:	4907      	ldr	r1, [pc, #28]	@ (801c3ac <udp_recv+0x38>)
 801c38e:	4808      	ldr	r0, [pc, #32]	@ (801c3b0 <udp_recv+0x3c>)
 801c390:	f003 fd88 	bl	801fea4 <iprintf>
 801c394:	e005      	b.n	801c3a2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	68ba      	ldr	r2, [r7, #8]
 801c39a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	687a      	ldr	r2, [r7, #4]
 801c3a0:	61da      	str	r2, [r3, #28]
}
 801c3a2:	3710      	adds	r7, #16
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	bd80      	pop	{r7, pc}
 801c3a8:	08023ea4 	.word	0x08023ea4
 801c3ac:	08024500 	.word	0x08024500
 801c3b0:	08023ef8 	.word	0x08023ef8

0801c3b4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b084      	sub	sp, #16
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d107      	bne.n	801c3d2 <udp_remove+0x1e>
 801c3c2:	4b19      	ldr	r3, [pc, #100]	@ (801c428 <udp_remove+0x74>)
 801c3c4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801c3c8:	4918      	ldr	r1, [pc, #96]	@ (801c42c <udp_remove+0x78>)
 801c3ca:	4819      	ldr	r0, [pc, #100]	@ (801c430 <udp_remove+0x7c>)
 801c3cc:	f003 fd6a 	bl	801fea4 <iprintf>
 801c3d0:	e026      	b.n	801c420 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c3d2:	4b18      	ldr	r3, [pc, #96]	@ (801c434 <udp_remove+0x80>)
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	687a      	ldr	r2, [r7, #4]
 801c3d8:	429a      	cmp	r2, r3
 801c3da:	d105      	bne.n	801c3e8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c3dc:	4b15      	ldr	r3, [pc, #84]	@ (801c434 <udp_remove+0x80>)
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	68db      	ldr	r3, [r3, #12]
 801c3e2:	4a14      	ldr	r2, [pc, #80]	@ (801c434 <udp_remove+0x80>)
 801c3e4:	6013      	str	r3, [r2, #0]
 801c3e6:	e017      	b.n	801c418 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c3e8:	4b12      	ldr	r3, [pc, #72]	@ (801c434 <udp_remove+0x80>)
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	60fb      	str	r3, [r7, #12]
 801c3ee:	e010      	b.n	801c412 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	68db      	ldr	r3, [r3, #12]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d009      	beq.n	801c40c <udp_remove+0x58>
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	68db      	ldr	r3, [r3, #12]
 801c3fc:	687a      	ldr	r2, [r7, #4]
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d104      	bne.n	801c40c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	68da      	ldr	r2, [r3, #12]
 801c406:	68fb      	ldr	r3, [r7, #12]
 801c408:	60da      	str	r2, [r3, #12]
        break;
 801c40a:	e005      	b.n	801c418 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	68db      	ldr	r3, [r3, #12]
 801c410:	60fb      	str	r3, [r7, #12]
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d1eb      	bne.n	801c3f0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c418:	6879      	ldr	r1, [r7, #4]
 801c41a:	2000      	movs	r0, #0
 801c41c:	f7f7 fc2c 	bl	8013c78 <memp_free>
}
 801c420:	3710      	adds	r7, #16
 801c422:	46bd      	mov	sp, r7
 801c424:	bd80      	pop	{r7, pc}
 801c426:	bf00      	nop
 801c428:	08023ea4 	.word	0x08023ea4
 801c42c:	08024518 	.word	0x08024518
 801c430:	08023ef8 	.word	0x08023ef8
 801c434:	200227fc 	.word	0x200227fc

0801c438 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b082      	sub	sp, #8
 801c43c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c43e:	2000      	movs	r0, #0
 801c440:	f7f7 fba4 	bl	8013b8c <memp_malloc>
 801c444:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d007      	beq.n	801c45c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c44c:	2220      	movs	r2, #32
 801c44e:	2100      	movs	r1, #0
 801c450:	6878      	ldr	r0, [r7, #4]
 801c452:	f003 fe87 	bl	8020164 <memset>
    pcb->ttl = UDP_TTL;
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	22ff      	movs	r2, #255	@ 0xff
 801c45a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c45c:	687b      	ldr	r3, [r7, #4]
}
 801c45e:	4618      	mov	r0, r3
 801c460:	3708      	adds	r7, #8
 801c462:	46bd      	mov	sp, r7
 801c464:	bd80      	pop	{r7, pc}

0801c466 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c466:	b580      	push	{r7, lr}
 801c468:	b084      	sub	sp, #16
 801c46a:	af00      	add	r7, sp, #0
 801c46c:	4603      	mov	r3, r0
 801c46e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c470:	f7ff ffe2 	bl	801c438 <udp_new>
 801c474:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c476:	68fb      	ldr	r3, [r7, #12]
}
 801c478:	4618      	mov	r0, r3
 801c47a:	3710      	adds	r7, #16
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bd80      	pop	{r7, pc}

0801c480 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c480:	b480      	push	{r7}
 801c482:	b085      	sub	sp, #20
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
 801c488:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d01e      	beq.n	801c4ce <udp_netif_ip_addr_changed+0x4e>
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	2b00      	cmp	r3, #0
 801c496:	d01a      	beq.n	801c4ce <udp_netif_ip_addr_changed+0x4e>
 801c498:	683b      	ldr	r3, [r7, #0]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d017      	beq.n	801c4ce <udp_netif_ip_addr_changed+0x4e>
 801c49e:	683b      	ldr	r3, [r7, #0]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d013      	beq.n	801c4ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c4a6:	4b0d      	ldr	r3, [pc, #52]	@ (801c4dc <udp_netif_ip_addr_changed+0x5c>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	60fb      	str	r3, [r7, #12]
 801c4ac:	e00c      	b.n	801c4c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	681a      	ldr	r2, [r3, #0]
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	d103      	bne.n	801c4c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c4ba:	683b      	ldr	r3, [r7, #0]
 801c4bc:	681a      	ldr	r2, [r3, #0]
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	68db      	ldr	r3, [r3, #12]
 801c4c6:	60fb      	str	r3, [r7, #12]
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d1ef      	bne.n	801c4ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c4ce:	bf00      	nop
 801c4d0:	3714      	adds	r7, #20
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4d8:	4770      	bx	lr
 801c4da:	bf00      	nop
 801c4dc:	200227fc 	.word	0x200227fc

0801c4e0 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801c4e0:	b590      	push	{r4, r7, lr}
 801c4e2:	b083      	sub	sp, #12
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801c4e8:	481b      	ldr	r0, [pc, #108]	@ (801c558 <udp_debug_print+0x78>)
 801c4ea:	f003 fd4b 	bl	801ff84 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c4ee:	481b      	ldr	r0, [pc, #108]	@ (801c55c <udp_debug_print+0x7c>)
 801c4f0:	f003 fd48 	bl	801ff84 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	881b      	ldrh	r3, [r3, #0]
 801c4f8:	b29b      	uxth	r3, r3
 801c4fa:	4618      	mov	r0, r3
 801c4fc:	f7f6 fe72 	bl	80131e4 <lwip_htons>
 801c500:	4603      	mov	r3, r0
 801c502:	461c      	mov	r4, r3
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	885b      	ldrh	r3, [r3, #2]
 801c508:	b29b      	uxth	r3, r3
 801c50a:	4618      	mov	r0, r3
 801c50c:	f7f6 fe6a 	bl	80131e4 <lwip_htons>
 801c510:	4603      	mov	r3, r0
 801c512:	461a      	mov	r2, r3
 801c514:	4621      	mov	r1, r4
 801c516:	4812      	ldr	r0, [pc, #72]	@ (801c560 <udp_debug_print+0x80>)
 801c518:	f003 fcc4 	bl	801fea4 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c51c:	480f      	ldr	r0, [pc, #60]	@ (801c55c <udp_debug_print+0x7c>)
 801c51e:	f003 fd31 	bl	801ff84 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	889b      	ldrh	r3, [r3, #4]
 801c526:	b29b      	uxth	r3, r3
 801c528:	4618      	mov	r0, r3
 801c52a:	f7f6 fe5b 	bl	80131e4 <lwip_htons>
 801c52e:	4603      	mov	r3, r0
 801c530:	461c      	mov	r4, r3
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	88db      	ldrh	r3, [r3, #6]
 801c536:	b29b      	uxth	r3, r3
 801c538:	4618      	mov	r0, r3
 801c53a:	f7f6 fe53 	bl	80131e4 <lwip_htons>
 801c53e:	4603      	mov	r3, r0
 801c540:	461a      	mov	r2, r3
 801c542:	4621      	mov	r1, r4
 801c544:	4807      	ldr	r0, [pc, #28]	@ (801c564 <udp_debug_print+0x84>)
 801c546:	f003 fcad 	bl	801fea4 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c54a:	4804      	ldr	r0, [pc, #16]	@ (801c55c <udp_debug_print+0x7c>)
 801c54c:	f003 fd1a 	bl	801ff84 <puts>
}
 801c550:	bf00      	nop
 801c552:	370c      	adds	r7, #12
 801c554:	46bd      	mov	sp, r7
 801c556:	bd90      	pop	{r4, r7, pc}
 801c558:	08024530 	.word	0x08024530
 801c55c:	0802453c 	.word	0x0802453c
 801c560:	08024560 	.word	0x08024560
 801c564:	08024598 	.word	0x08024598

0801c568 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c568:	b580      	push	{r7, lr}
 801c56a:	b082      	sub	sp, #8
 801c56c:	af00      	add	r7, sp, #0
 801c56e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c570:	492b      	ldr	r1, [pc, #172]	@ (801c620 <etharp_free_entry+0xb8>)
 801c572:	687a      	ldr	r2, [r7, #4]
 801c574:	4613      	mov	r3, r2
 801c576:	005b      	lsls	r3, r3, #1
 801c578:	4413      	add	r3, r2
 801c57a:	00db      	lsls	r3, r3, #3
 801c57c:	440b      	add	r3, r1
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	2b00      	cmp	r3, #0
 801c582:	d013      	beq.n	801c5ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c584:	4926      	ldr	r1, [pc, #152]	@ (801c620 <etharp_free_entry+0xb8>)
 801c586:	687a      	ldr	r2, [r7, #4]
 801c588:	4613      	mov	r3, r2
 801c58a:	005b      	lsls	r3, r3, #1
 801c58c:	4413      	add	r3, r2
 801c58e:	00db      	lsls	r3, r3, #3
 801c590:	440b      	add	r3, r1
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	4618      	mov	r0, r3
 801c596:	f7f8 fb09 	bl	8014bac <pbuf_free>
    arp_table[i].q = NULL;
 801c59a:	4921      	ldr	r1, [pc, #132]	@ (801c620 <etharp_free_entry+0xb8>)
 801c59c:	687a      	ldr	r2, [r7, #4]
 801c59e:	4613      	mov	r3, r2
 801c5a0:	005b      	lsls	r3, r3, #1
 801c5a2:	4413      	add	r3, r2
 801c5a4:	00db      	lsls	r3, r3, #3
 801c5a6:	440b      	add	r3, r1
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c5ac:	491c      	ldr	r1, [pc, #112]	@ (801c620 <etharp_free_entry+0xb8>)
 801c5ae:	687a      	ldr	r2, [r7, #4]
 801c5b0:	4613      	mov	r3, r2
 801c5b2:	005b      	lsls	r3, r3, #1
 801c5b4:	4413      	add	r3, r2
 801c5b6:	00db      	lsls	r3, r3, #3
 801c5b8:	440b      	add	r3, r1
 801c5ba:	3314      	adds	r3, #20
 801c5bc:	2200      	movs	r2, #0
 801c5be:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801c5c0:	4917      	ldr	r1, [pc, #92]	@ (801c620 <etharp_free_entry+0xb8>)
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	4613      	mov	r3, r2
 801c5c6:	005b      	lsls	r3, r3, #1
 801c5c8:	4413      	add	r3, r2
 801c5ca:	00db      	lsls	r3, r3, #3
 801c5cc:	440b      	add	r3, r1
 801c5ce:	3312      	adds	r3, #18
 801c5d0:	2200      	movs	r2, #0
 801c5d2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801c5d4:	4912      	ldr	r1, [pc, #72]	@ (801c620 <etharp_free_entry+0xb8>)
 801c5d6:	687a      	ldr	r2, [r7, #4]
 801c5d8:	4613      	mov	r3, r2
 801c5da:	005b      	lsls	r3, r3, #1
 801c5dc:	4413      	add	r3, r2
 801c5de:	00db      	lsls	r3, r3, #3
 801c5e0:	440b      	add	r3, r1
 801c5e2:	3308      	adds	r3, #8
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801c5e8:	490d      	ldr	r1, [pc, #52]	@ (801c620 <etharp_free_entry+0xb8>)
 801c5ea:	687a      	ldr	r2, [r7, #4]
 801c5ec:	4613      	mov	r3, r2
 801c5ee:	005b      	lsls	r3, r3, #1
 801c5f0:	4413      	add	r3, r2
 801c5f2:	00db      	lsls	r3, r3, #3
 801c5f4:	440b      	add	r3, r1
 801c5f6:	3304      	adds	r3, #4
 801c5f8:	2200      	movs	r2, #0
 801c5fa:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801c5fc:	4908      	ldr	r1, [pc, #32]	@ (801c620 <etharp_free_entry+0xb8>)
 801c5fe:	687a      	ldr	r2, [r7, #4]
 801c600:	4613      	mov	r3, r2
 801c602:	005b      	lsls	r3, r3, #1
 801c604:	4413      	add	r3, r2
 801c606:	00db      	lsls	r3, r3, #3
 801c608:	440b      	add	r3, r1
 801c60a:	3308      	adds	r3, #8
 801c60c:	4a05      	ldr	r2, [pc, #20]	@ (801c624 <etharp_free_entry+0xbc>)
 801c60e:	3304      	adds	r3, #4
 801c610:	6810      	ldr	r0, [r2, #0]
 801c612:	6018      	str	r0, [r3, #0]
 801c614:	8892      	ldrh	r2, [r2, #4]
 801c616:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801c618:	bf00      	nop
 801c61a:	3708      	adds	r7, #8
 801c61c:	46bd      	mov	sp, r7
 801c61e:	bd80      	pop	{r7, pc}
 801c620:	20022800 	.word	0x20022800
 801c624:	08025494 	.word	0x08025494

0801c628 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c628:	b580      	push	{r7, lr}
 801c62a:	b082      	sub	sp, #8
 801c62c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c62e:	2300      	movs	r3, #0
 801c630:	607b      	str	r3, [r7, #4]
 801c632:	e096      	b.n	801c762 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c634:	494f      	ldr	r1, [pc, #316]	@ (801c774 <etharp_tmr+0x14c>)
 801c636:	687a      	ldr	r2, [r7, #4]
 801c638:	4613      	mov	r3, r2
 801c63a:	005b      	lsls	r3, r3, #1
 801c63c:	4413      	add	r3, r2
 801c63e:	00db      	lsls	r3, r3, #3
 801c640:	440b      	add	r3, r1
 801c642:	3314      	adds	r3, #20
 801c644:	781b      	ldrb	r3, [r3, #0]
 801c646:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c648:	78fb      	ldrb	r3, [r7, #3]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	f000 8086 	beq.w	801c75c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c650:	4948      	ldr	r1, [pc, #288]	@ (801c774 <etharp_tmr+0x14c>)
 801c652:	687a      	ldr	r2, [r7, #4]
 801c654:	4613      	mov	r3, r2
 801c656:	005b      	lsls	r3, r3, #1
 801c658:	4413      	add	r3, r2
 801c65a:	00db      	lsls	r3, r3, #3
 801c65c:	440b      	add	r3, r1
 801c65e:	3312      	adds	r3, #18
 801c660:	881b      	ldrh	r3, [r3, #0]
 801c662:	3301      	adds	r3, #1
 801c664:	b298      	uxth	r0, r3
 801c666:	4943      	ldr	r1, [pc, #268]	@ (801c774 <etharp_tmr+0x14c>)
 801c668:	687a      	ldr	r2, [r7, #4]
 801c66a:	4613      	mov	r3, r2
 801c66c:	005b      	lsls	r3, r3, #1
 801c66e:	4413      	add	r3, r2
 801c670:	00db      	lsls	r3, r3, #3
 801c672:	440b      	add	r3, r1
 801c674:	3312      	adds	r3, #18
 801c676:	4602      	mov	r2, r0
 801c678:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c67a:	493e      	ldr	r1, [pc, #248]	@ (801c774 <etharp_tmr+0x14c>)
 801c67c:	687a      	ldr	r2, [r7, #4]
 801c67e:	4613      	mov	r3, r2
 801c680:	005b      	lsls	r3, r3, #1
 801c682:	4413      	add	r3, r2
 801c684:	00db      	lsls	r3, r3, #3
 801c686:	440b      	add	r3, r1
 801c688:	3312      	adds	r3, #18
 801c68a:	881b      	ldrh	r3, [r3, #0]
 801c68c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801c690:	d215      	bcs.n	801c6be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c692:	4938      	ldr	r1, [pc, #224]	@ (801c774 <etharp_tmr+0x14c>)
 801c694:	687a      	ldr	r2, [r7, #4]
 801c696:	4613      	mov	r3, r2
 801c698:	005b      	lsls	r3, r3, #1
 801c69a:	4413      	add	r3, r2
 801c69c:	00db      	lsls	r3, r3, #3
 801c69e:	440b      	add	r3, r1
 801c6a0:	3314      	adds	r3, #20
 801c6a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c6a4:	2b01      	cmp	r3, #1
 801c6a6:	d10e      	bne.n	801c6c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c6a8:	4932      	ldr	r1, [pc, #200]	@ (801c774 <etharp_tmr+0x14c>)
 801c6aa:	687a      	ldr	r2, [r7, #4]
 801c6ac:	4613      	mov	r3, r2
 801c6ae:	005b      	lsls	r3, r3, #1
 801c6b0:	4413      	add	r3, r2
 801c6b2:	00db      	lsls	r3, r3, #3
 801c6b4:	440b      	add	r3, r1
 801c6b6:	3312      	adds	r3, #18
 801c6b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c6ba:	2b04      	cmp	r3, #4
 801c6bc:	d903      	bls.n	801c6c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c6be:	6878      	ldr	r0, [r7, #4]
 801c6c0:	f7ff ff52 	bl	801c568 <etharp_free_entry>
 801c6c4:	e04a      	b.n	801c75c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c6c6:	492b      	ldr	r1, [pc, #172]	@ (801c774 <etharp_tmr+0x14c>)
 801c6c8:	687a      	ldr	r2, [r7, #4]
 801c6ca:	4613      	mov	r3, r2
 801c6cc:	005b      	lsls	r3, r3, #1
 801c6ce:	4413      	add	r3, r2
 801c6d0:	00db      	lsls	r3, r3, #3
 801c6d2:	440b      	add	r3, r1
 801c6d4:	3314      	adds	r3, #20
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	2b03      	cmp	r3, #3
 801c6da:	d10a      	bne.n	801c6f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c6dc:	4925      	ldr	r1, [pc, #148]	@ (801c774 <etharp_tmr+0x14c>)
 801c6de:	687a      	ldr	r2, [r7, #4]
 801c6e0:	4613      	mov	r3, r2
 801c6e2:	005b      	lsls	r3, r3, #1
 801c6e4:	4413      	add	r3, r2
 801c6e6:	00db      	lsls	r3, r3, #3
 801c6e8:	440b      	add	r3, r1
 801c6ea:	3314      	adds	r3, #20
 801c6ec:	2204      	movs	r2, #4
 801c6ee:	701a      	strb	r2, [r3, #0]
 801c6f0:	e034      	b.n	801c75c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c6f2:	4920      	ldr	r1, [pc, #128]	@ (801c774 <etharp_tmr+0x14c>)
 801c6f4:	687a      	ldr	r2, [r7, #4]
 801c6f6:	4613      	mov	r3, r2
 801c6f8:	005b      	lsls	r3, r3, #1
 801c6fa:	4413      	add	r3, r2
 801c6fc:	00db      	lsls	r3, r3, #3
 801c6fe:	440b      	add	r3, r1
 801c700:	3314      	adds	r3, #20
 801c702:	781b      	ldrb	r3, [r3, #0]
 801c704:	2b04      	cmp	r3, #4
 801c706:	d10a      	bne.n	801c71e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c708:	491a      	ldr	r1, [pc, #104]	@ (801c774 <etharp_tmr+0x14c>)
 801c70a:	687a      	ldr	r2, [r7, #4]
 801c70c:	4613      	mov	r3, r2
 801c70e:	005b      	lsls	r3, r3, #1
 801c710:	4413      	add	r3, r2
 801c712:	00db      	lsls	r3, r3, #3
 801c714:	440b      	add	r3, r1
 801c716:	3314      	adds	r3, #20
 801c718:	2202      	movs	r2, #2
 801c71a:	701a      	strb	r2, [r3, #0]
 801c71c:	e01e      	b.n	801c75c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c71e:	4915      	ldr	r1, [pc, #84]	@ (801c774 <etharp_tmr+0x14c>)
 801c720:	687a      	ldr	r2, [r7, #4]
 801c722:	4613      	mov	r3, r2
 801c724:	005b      	lsls	r3, r3, #1
 801c726:	4413      	add	r3, r2
 801c728:	00db      	lsls	r3, r3, #3
 801c72a:	440b      	add	r3, r1
 801c72c:	3314      	adds	r3, #20
 801c72e:	781b      	ldrb	r3, [r3, #0]
 801c730:	2b01      	cmp	r3, #1
 801c732:	d113      	bne.n	801c75c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c734:	490f      	ldr	r1, [pc, #60]	@ (801c774 <etharp_tmr+0x14c>)
 801c736:	687a      	ldr	r2, [r7, #4]
 801c738:	4613      	mov	r3, r2
 801c73a:	005b      	lsls	r3, r3, #1
 801c73c:	4413      	add	r3, r2
 801c73e:	00db      	lsls	r3, r3, #3
 801c740:	440b      	add	r3, r1
 801c742:	3308      	adds	r3, #8
 801c744:	6818      	ldr	r0, [r3, #0]
 801c746:	687a      	ldr	r2, [r7, #4]
 801c748:	4613      	mov	r3, r2
 801c74a:	005b      	lsls	r3, r3, #1
 801c74c:	4413      	add	r3, r2
 801c74e:	00db      	lsls	r3, r3, #3
 801c750:	4a08      	ldr	r2, [pc, #32]	@ (801c774 <etharp_tmr+0x14c>)
 801c752:	4413      	add	r3, r2
 801c754:	3304      	adds	r3, #4
 801c756:	4619      	mov	r1, r3
 801c758:	f000 fe6e 	bl	801d438 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	3301      	adds	r3, #1
 801c760:	607b      	str	r3, [r7, #4]
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	2b09      	cmp	r3, #9
 801c766:	f77f af65 	ble.w	801c634 <etharp_tmr+0xc>
      }
    }
  }
}
 801c76a:	bf00      	nop
 801c76c:	bf00      	nop
 801c76e:	3708      	adds	r7, #8
 801c770:	46bd      	mov	sp, r7
 801c772:	bd80      	pop	{r7, pc}
 801c774:	20022800 	.word	0x20022800

0801c778 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b08a      	sub	sp, #40	@ 0x28
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	60f8      	str	r0, [r7, #12]
 801c780:	460b      	mov	r3, r1
 801c782:	607a      	str	r2, [r7, #4]
 801c784:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c786:	230a      	movs	r3, #10
 801c788:	843b      	strh	r3, [r7, #32]
 801c78a:	230a      	movs	r3, #10
 801c78c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801c78e:	230a      	movs	r3, #10
 801c790:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801c792:	2300      	movs	r3, #0
 801c794:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c796:	230a      	movs	r3, #10
 801c798:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c79a:	2300      	movs	r3, #0
 801c79c:	83bb      	strh	r3, [r7, #28]
 801c79e:	2300      	movs	r3, #0
 801c7a0:	837b      	strh	r3, [r7, #26]
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c7aa:	e0ae      	b.n	801c90a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c7ac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c7b0:	49a6      	ldr	r1, [pc, #664]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c7b2:	4613      	mov	r3, r2
 801c7b4:	005b      	lsls	r3, r3, #1
 801c7b6:	4413      	add	r3, r2
 801c7b8:	00db      	lsls	r3, r3, #3
 801c7ba:	440b      	add	r3, r1
 801c7bc:	3314      	adds	r3, #20
 801c7be:	781b      	ldrb	r3, [r3, #0]
 801c7c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c7c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c7c6:	2b0a      	cmp	r3, #10
 801c7c8:	d105      	bne.n	801c7d6 <etharp_find_entry+0x5e>
 801c7ca:	7dfb      	ldrb	r3, [r7, #23]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d102      	bne.n	801c7d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c7d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c7d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c7d4:	e095      	b.n	801c902 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c7d6:	7dfb      	ldrb	r3, [r7, #23]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	f000 8092 	beq.w	801c902 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c7de:	7dfb      	ldrb	r3, [r7, #23]
 801c7e0:	2b01      	cmp	r3, #1
 801c7e2:	d009      	beq.n	801c7f8 <etharp_find_entry+0x80>
 801c7e4:	7dfb      	ldrb	r3, [r7, #23]
 801c7e6:	2b01      	cmp	r3, #1
 801c7e8:	d806      	bhi.n	801c7f8 <etharp_find_entry+0x80>
 801c7ea:	4b99      	ldr	r3, [pc, #612]	@ (801ca50 <etharp_find_entry+0x2d8>)
 801c7ec:	f240 1223 	movw	r2, #291	@ 0x123
 801c7f0:	4998      	ldr	r1, [pc, #608]	@ (801ca54 <etharp_find_entry+0x2dc>)
 801c7f2:	4899      	ldr	r0, [pc, #612]	@ (801ca58 <etharp_find_entry+0x2e0>)
 801c7f4:	f003 fb56 	bl	801fea4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d020      	beq.n	801c840 <etharp_find_entry+0xc8>
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	6819      	ldr	r1, [r3, #0]
 801c802:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c806:	4891      	ldr	r0, [pc, #580]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c808:	4613      	mov	r3, r2
 801c80a:	005b      	lsls	r3, r3, #1
 801c80c:	4413      	add	r3, r2
 801c80e:	00db      	lsls	r3, r3, #3
 801c810:	4403      	add	r3, r0
 801c812:	3304      	adds	r3, #4
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	4299      	cmp	r1, r3
 801c818:	d112      	bne.n	801c840 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d00c      	beq.n	801c83a <etharp_find_entry+0xc2>
 801c820:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c824:	4989      	ldr	r1, [pc, #548]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c826:	4613      	mov	r3, r2
 801c828:	005b      	lsls	r3, r3, #1
 801c82a:	4413      	add	r3, r2
 801c82c:	00db      	lsls	r3, r3, #3
 801c82e:	440b      	add	r3, r1
 801c830:	3308      	adds	r3, #8
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	687a      	ldr	r2, [r7, #4]
 801c836:	429a      	cmp	r2, r3
 801c838:	d102      	bne.n	801c840 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c83a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c83e:	e100      	b.n	801ca42 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c840:	7dfb      	ldrb	r3, [r7, #23]
 801c842:	2b01      	cmp	r3, #1
 801c844:	d140      	bne.n	801c8c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c846:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c84a:	4980      	ldr	r1, [pc, #512]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c84c:	4613      	mov	r3, r2
 801c84e:	005b      	lsls	r3, r3, #1
 801c850:	4413      	add	r3, r2
 801c852:	00db      	lsls	r3, r3, #3
 801c854:	440b      	add	r3, r1
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d01a      	beq.n	801c892 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c85c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c860:	497a      	ldr	r1, [pc, #488]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c862:	4613      	mov	r3, r2
 801c864:	005b      	lsls	r3, r3, #1
 801c866:	4413      	add	r3, r2
 801c868:	00db      	lsls	r3, r3, #3
 801c86a:	440b      	add	r3, r1
 801c86c:	3312      	adds	r3, #18
 801c86e:	881b      	ldrh	r3, [r3, #0]
 801c870:	8bba      	ldrh	r2, [r7, #28]
 801c872:	429a      	cmp	r2, r3
 801c874:	d845      	bhi.n	801c902 <etharp_find_entry+0x18a>
            old_queue = i;
 801c876:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c878:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c87a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c87e:	4973      	ldr	r1, [pc, #460]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c880:	4613      	mov	r3, r2
 801c882:	005b      	lsls	r3, r3, #1
 801c884:	4413      	add	r3, r2
 801c886:	00db      	lsls	r3, r3, #3
 801c888:	440b      	add	r3, r1
 801c88a:	3312      	adds	r3, #18
 801c88c:	881b      	ldrh	r3, [r3, #0]
 801c88e:	83bb      	strh	r3, [r7, #28]
 801c890:	e037      	b.n	801c902 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c892:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c896:	496d      	ldr	r1, [pc, #436]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c898:	4613      	mov	r3, r2
 801c89a:	005b      	lsls	r3, r3, #1
 801c89c:	4413      	add	r3, r2
 801c89e:	00db      	lsls	r3, r3, #3
 801c8a0:	440b      	add	r3, r1
 801c8a2:	3312      	adds	r3, #18
 801c8a4:	881b      	ldrh	r3, [r3, #0]
 801c8a6:	8b7a      	ldrh	r2, [r7, #26]
 801c8a8:	429a      	cmp	r2, r3
 801c8aa:	d82a      	bhi.n	801c902 <etharp_find_entry+0x18a>
            old_pending = i;
 801c8ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c8ae:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801c8b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c8b4:	4965      	ldr	r1, [pc, #404]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c8b6:	4613      	mov	r3, r2
 801c8b8:	005b      	lsls	r3, r3, #1
 801c8ba:	4413      	add	r3, r2
 801c8bc:	00db      	lsls	r3, r3, #3
 801c8be:	440b      	add	r3, r1
 801c8c0:	3312      	adds	r3, #18
 801c8c2:	881b      	ldrh	r3, [r3, #0]
 801c8c4:	837b      	strh	r3, [r7, #26]
 801c8c6:	e01c      	b.n	801c902 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c8c8:	7dfb      	ldrb	r3, [r7, #23]
 801c8ca:	2b01      	cmp	r3, #1
 801c8cc:	d919      	bls.n	801c902 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c8ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c8d2:	495e      	ldr	r1, [pc, #376]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c8d4:	4613      	mov	r3, r2
 801c8d6:	005b      	lsls	r3, r3, #1
 801c8d8:	4413      	add	r3, r2
 801c8da:	00db      	lsls	r3, r3, #3
 801c8dc:	440b      	add	r3, r1
 801c8de:	3312      	adds	r3, #18
 801c8e0:	881b      	ldrh	r3, [r3, #0]
 801c8e2:	8b3a      	ldrh	r2, [r7, #24]
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	d80c      	bhi.n	801c902 <etharp_find_entry+0x18a>
            old_stable = i;
 801c8e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c8ea:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801c8ec:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c8f0:	4956      	ldr	r1, [pc, #344]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c8f2:	4613      	mov	r3, r2
 801c8f4:	005b      	lsls	r3, r3, #1
 801c8f6:	4413      	add	r3, r2
 801c8f8:	00db      	lsls	r3, r3, #3
 801c8fa:	440b      	add	r3, r1
 801c8fc:	3312      	adds	r3, #18
 801c8fe:	881b      	ldrh	r3, [r3, #0]
 801c900:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c902:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c904:	3301      	adds	r3, #1
 801c906:	b29b      	uxth	r3, r3
 801c908:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c90a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c90e:	2b09      	cmp	r3, #9
 801c910:	f77f af4c 	ble.w	801c7ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c914:	7afb      	ldrb	r3, [r7, #11]
 801c916:	f003 0302 	and.w	r3, r3, #2
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d108      	bne.n	801c930 <etharp_find_entry+0x1b8>
 801c91e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c922:	2b0a      	cmp	r3, #10
 801c924:	d107      	bne.n	801c936 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c926:	7afb      	ldrb	r3, [r7, #11]
 801c928:	f003 0301 	and.w	r3, r3, #1
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d102      	bne.n	801c936 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c934:	e085      	b.n	801ca42 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c936:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c93a:	2b09      	cmp	r3, #9
 801c93c:	dc02      	bgt.n	801c944 <etharp_find_entry+0x1cc>
    i = empty;
 801c93e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c940:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c942:	e039      	b.n	801c9b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c944:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c948:	2b09      	cmp	r3, #9
 801c94a:	dc14      	bgt.n	801c976 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c94c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c94e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c950:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c954:	493d      	ldr	r1, [pc, #244]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c956:	4613      	mov	r3, r2
 801c958:	005b      	lsls	r3, r3, #1
 801c95a:	4413      	add	r3, r2
 801c95c:	00db      	lsls	r3, r3, #3
 801c95e:	440b      	add	r3, r1
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d018      	beq.n	801c998 <etharp_find_entry+0x220>
 801c966:	4b3a      	ldr	r3, [pc, #232]	@ (801ca50 <etharp_find_entry+0x2d8>)
 801c968:	f240 126d 	movw	r2, #365	@ 0x16d
 801c96c:	493b      	ldr	r1, [pc, #236]	@ (801ca5c <etharp_find_entry+0x2e4>)
 801c96e:	483a      	ldr	r0, [pc, #232]	@ (801ca58 <etharp_find_entry+0x2e0>)
 801c970:	f003 fa98 	bl	801fea4 <iprintf>
 801c974:	e010      	b.n	801c998 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c976:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c97a:	2b09      	cmp	r3, #9
 801c97c:	dc02      	bgt.n	801c984 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c97e:	8c3b      	ldrh	r3, [r7, #32]
 801c980:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c982:	e009      	b.n	801c998 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c984:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c988:	2b09      	cmp	r3, #9
 801c98a:	dc02      	bgt.n	801c992 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c98c:	8bfb      	ldrh	r3, [r7, #30]
 801c98e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c990:	e002      	b.n	801c998 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c996:	e054      	b.n	801ca42 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c998:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c99c:	2b09      	cmp	r3, #9
 801c99e:	dd06      	ble.n	801c9ae <etharp_find_entry+0x236>
 801c9a0:	4b2b      	ldr	r3, [pc, #172]	@ (801ca50 <etharp_find_entry+0x2d8>)
 801c9a2:	f240 127f 	movw	r2, #383	@ 0x17f
 801c9a6:	492e      	ldr	r1, [pc, #184]	@ (801ca60 <etharp_find_entry+0x2e8>)
 801c9a8:	482b      	ldr	r0, [pc, #172]	@ (801ca58 <etharp_find_entry+0x2e0>)
 801c9aa:	f003 fa7b 	bl	801fea4 <iprintf>
    etharp_free_entry(i);
 801c9ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	f7ff fdd8 	bl	801c568 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c9b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c9bc:	2b09      	cmp	r3, #9
 801c9be:	dd06      	ble.n	801c9ce <etharp_find_entry+0x256>
 801c9c0:	4b23      	ldr	r3, [pc, #140]	@ (801ca50 <etharp_find_entry+0x2d8>)
 801c9c2:	f240 1283 	movw	r2, #387	@ 0x183
 801c9c6:	4926      	ldr	r1, [pc, #152]	@ (801ca60 <etharp_find_entry+0x2e8>)
 801c9c8:	4823      	ldr	r0, [pc, #140]	@ (801ca58 <etharp_find_entry+0x2e0>)
 801c9ca:	f003 fa6b 	bl	801fea4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c9ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c9d2:	491e      	ldr	r1, [pc, #120]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801c9d4:	4613      	mov	r3, r2
 801c9d6:	005b      	lsls	r3, r3, #1
 801c9d8:	4413      	add	r3, r2
 801c9da:	00db      	lsls	r3, r3, #3
 801c9dc:	440b      	add	r3, r1
 801c9de:	3314      	adds	r3, #20
 801c9e0:	781b      	ldrb	r3, [r3, #0]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d006      	beq.n	801c9f4 <etharp_find_entry+0x27c>
 801c9e6:	4b1a      	ldr	r3, [pc, #104]	@ (801ca50 <etharp_find_entry+0x2d8>)
 801c9e8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801c9ec:	491d      	ldr	r1, [pc, #116]	@ (801ca64 <etharp_find_entry+0x2ec>)
 801c9ee:	481a      	ldr	r0, [pc, #104]	@ (801ca58 <etharp_find_entry+0x2e0>)
 801c9f0:	f003 fa58 	bl	801fea4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d00b      	beq.n	801ca12 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c9fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	6819      	ldr	r1, [r3, #0]
 801ca02:	4812      	ldr	r0, [pc, #72]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801ca04:	4613      	mov	r3, r2
 801ca06:	005b      	lsls	r3, r3, #1
 801ca08:	4413      	add	r3, r2
 801ca0a:	00db      	lsls	r3, r3, #3
 801ca0c:	4403      	add	r3, r0
 801ca0e:	3304      	adds	r3, #4
 801ca10:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801ca12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ca16:	490d      	ldr	r1, [pc, #52]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801ca18:	4613      	mov	r3, r2
 801ca1a:	005b      	lsls	r3, r3, #1
 801ca1c:	4413      	add	r3, r2
 801ca1e:	00db      	lsls	r3, r3, #3
 801ca20:	440b      	add	r3, r1
 801ca22:	3312      	adds	r3, #18
 801ca24:	2200      	movs	r2, #0
 801ca26:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801ca28:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801ca2c:	4907      	ldr	r1, [pc, #28]	@ (801ca4c <etharp_find_entry+0x2d4>)
 801ca2e:	4613      	mov	r3, r2
 801ca30:	005b      	lsls	r3, r3, #1
 801ca32:	4413      	add	r3, r2
 801ca34:	00db      	lsls	r3, r3, #3
 801ca36:	440b      	add	r3, r1
 801ca38:	3308      	adds	r3, #8
 801ca3a:	687a      	ldr	r2, [r7, #4]
 801ca3c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801ca3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801ca42:	4618      	mov	r0, r3
 801ca44:	3728      	adds	r7, #40	@ 0x28
 801ca46:	46bd      	mov	sp, r7
 801ca48:	bd80      	pop	{r7, pc}
 801ca4a:	bf00      	nop
 801ca4c:	20022800 	.word	0x20022800
 801ca50:	080245cc 	.word	0x080245cc
 801ca54:	08024604 	.word	0x08024604
 801ca58:	08024644 	.word	0x08024644
 801ca5c:	0802466c 	.word	0x0802466c
 801ca60:	08024684 	.word	0x08024684
 801ca64:	08024698 	.word	0x08024698

0801ca68 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	b088      	sub	sp, #32
 801ca6c:	af02      	add	r7, sp, #8
 801ca6e:	60f8      	str	r0, [r7, #12]
 801ca70:	60b9      	str	r1, [r7, #8]
 801ca72:	607a      	str	r2, [r7, #4]
 801ca74:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ca7c:	2b06      	cmp	r3, #6
 801ca7e:	d006      	beq.n	801ca8e <etharp_update_arp_entry+0x26>
 801ca80:	4b48      	ldr	r3, [pc, #288]	@ (801cba4 <etharp_update_arp_entry+0x13c>)
 801ca82:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801ca86:	4948      	ldr	r1, [pc, #288]	@ (801cba8 <etharp_update_arp_entry+0x140>)
 801ca88:	4848      	ldr	r0, [pc, #288]	@ (801cbac <etharp_update_arp_entry+0x144>)
 801ca8a:	f003 fa0b 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ca8e:	68bb      	ldr	r3, [r7, #8]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d012      	beq.n	801caba <etharp_update_arp_entry+0x52>
 801ca94:	68bb      	ldr	r3, [r7, #8]
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d00e      	beq.n	801caba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ca9c:	68bb      	ldr	r3, [r7, #8]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	68f9      	ldr	r1, [r7, #12]
 801caa2:	4618      	mov	r0, r3
 801caa4:	f001 f990 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801caa8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d105      	bne.n	801caba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cab6:	2be0      	cmp	r3, #224	@ 0xe0
 801cab8:	d102      	bne.n	801cac0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801caba:	f06f 030f 	mvn.w	r3, #15
 801cabe:	e06c      	b.n	801cb9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801cac0:	78fb      	ldrb	r3, [r7, #3]
 801cac2:	68fa      	ldr	r2, [r7, #12]
 801cac4:	4619      	mov	r1, r3
 801cac6:	68b8      	ldr	r0, [r7, #8]
 801cac8:	f7ff fe56 	bl	801c778 <etharp_find_entry>
 801cacc:	4603      	mov	r3, r0
 801cace:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801cad0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	da02      	bge.n	801cade <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801cad8:	8afb      	ldrh	r3, [r7, #22]
 801cada:	b25b      	sxtb	r3, r3
 801cadc:	e05d      	b.n	801cb9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801cade:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cae2:	4933      	ldr	r1, [pc, #204]	@ (801cbb0 <etharp_update_arp_entry+0x148>)
 801cae4:	4613      	mov	r3, r2
 801cae6:	005b      	lsls	r3, r3, #1
 801cae8:	4413      	add	r3, r2
 801caea:	00db      	lsls	r3, r3, #3
 801caec:	440b      	add	r3, r1
 801caee:	3314      	adds	r3, #20
 801caf0:	2202      	movs	r2, #2
 801caf2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801caf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801caf8:	492d      	ldr	r1, [pc, #180]	@ (801cbb0 <etharp_update_arp_entry+0x148>)
 801cafa:	4613      	mov	r3, r2
 801cafc:	005b      	lsls	r3, r3, #1
 801cafe:	4413      	add	r3, r2
 801cb00:	00db      	lsls	r3, r3, #3
 801cb02:	440b      	add	r3, r1
 801cb04:	3308      	adds	r3, #8
 801cb06:	68fa      	ldr	r2, [r7, #12]
 801cb08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801cb0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cb0e:	4613      	mov	r3, r2
 801cb10:	005b      	lsls	r3, r3, #1
 801cb12:	4413      	add	r3, r2
 801cb14:	00db      	lsls	r3, r3, #3
 801cb16:	3308      	adds	r3, #8
 801cb18:	4a25      	ldr	r2, [pc, #148]	@ (801cbb0 <etharp_update_arp_entry+0x148>)
 801cb1a:	4413      	add	r3, r2
 801cb1c:	3304      	adds	r3, #4
 801cb1e:	2206      	movs	r2, #6
 801cb20:	6879      	ldr	r1, [r7, #4]
 801cb22:	4618      	mov	r0, r3
 801cb24:	f003 fb93 	bl	802024e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801cb28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cb2c:	4920      	ldr	r1, [pc, #128]	@ (801cbb0 <etharp_update_arp_entry+0x148>)
 801cb2e:	4613      	mov	r3, r2
 801cb30:	005b      	lsls	r3, r3, #1
 801cb32:	4413      	add	r3, r2
 801cb34:	00db      	lsls	r3, r3, #3
 801cb36:	440b      	add	r3, r1
 801cb38:	3312      	adds	r3, #18
 801cb3a:	2200      	movs	r2, #0
 801cb3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801cb3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cb42:	491b      	ldr	r1, [pc, #108]	@ (801cbb0 <etharp_update_arp_entry+0x148>)
 801cb44:	4613      	mov	r3, r2
 801cb46:	005b      	lsls	r3, r3, #1
 801cb48:	4413      	add	r3, r2
 801cb4a:	00db      	lsls	r3, r3, #3
 801cb4c:	440b      	add	r3, r1
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d021      	beq.n	801cb98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801cb54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cb58:	4915      	ldr	r1, [pc, #84]	@ (801cbb0 <etharp_update_arp_entry+0x148>)
 801cb5a:	4613      	mov	r3, r2
 801cb5c:	005b      	lsls	r3, r3, #1
 801cb5e:	4413      	add	r3, r2
 801cb60:	00db      	lsls	r3, r3, #3
 801cb62:	440b      	add	r3, r1
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801cb68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cb6c:	4910      	ldr	r1, [pc, #64]	@ (801cbb0 <etharp_update_arp_entry+0x148>)
 801cb6e:	4613      	mov	r3, r2
 801cb70:	005b      	lsls	r3, r3, #1
 801cb72:	4413      	add	r3, r2
 801cb74:	00db      	lsls	r3, r3, #3
 801cb76:	440b      	add	r3, r1
 801cb78:	2200      	movs	r2, #0
 801cb7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801cb82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801cb86:	9300      	str	r3, [sp, #0]
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	6939      	ldr	r1, [r7, #16]
 801cb8c:	68f8      	ldr	r0, [r7, #12]
 801cb8e:	f002 f829 	bl	801ebe4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801cb92:	6938      	ldr	r0, [r7, #16]
 801cb94:	f7f8 f80a 	bl	8014bac <pbuf_free>
  }
  return ERR_OK;
 801cb98:	2300      	movs	r3, #0
}
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	3718      	adds	r7, #24
 801cb9e:	46bd      	mov	sp, r7
 801cba0:	bd80      	pop	{r7, pc}
 801cba2:	bf00      	nop
 801cba4:	080245cc 	.word	0x080245cc
 801cba8:	080246c4 	.word	0x080246c4
 801cbac:	08024644 	.word	0x08024644
 801cbb0:	20022800 	.word	0x20022800

0801cbb4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b084      	sub	sp, #16
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	60fb      	str	r3, [r7, #12]
 801cbc0:	e01e      	b.n	801cc00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801cbc2:	4913      	ldr	r1, [pc, #76]	@ (801cc10 <etharp_cleanup_netif+0x5c>)
 801cbc4:	68fa      	ldr	r2, [r7, #12]
 801cbc6:	4613      	mov	r3, r2
 801cbc8:	005b      	lsls	r3, r3, #1
 801cbca:	4413      	add	r3, r2
 801cbcc:	00db      	lsls	r3, r3, #3
 801cbce:	440b      	add	r3, r1
 801cbd0:	3314      	adds	r3, #20
 801cbd2:	781b      	ldrb	r3, [r3, #0]
 801cbd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801cbd6:	7afb      	ldrb	r3, [r7, #11]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d00e      	beq.n	801cbfa <etharp_cleanup_netif+0x46>
 801cbdc:	490c      	ldr	r1, [pc, #48]	@ (801cc10 <etharp_cleanup_netif+0x5c>)
 801cbde:	68fa      	ldr	r2, [r7, #12]
 801cbe0:	4613      	mov	r3, r2
 801cbe2:	005b      	lsls	r3, r3, #1
 801cbe4:	4413      	add	r3, r2
 801cbe6:	00db      	lsls	r3, r3, #3
 801cbe8:	440b      	add	r3, r1
 801cbea:	3308      	adds	r3, #8
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	687a      	ldr	r2, [r7, #4]
 801cbf0:	429a      	cmp	r2, r3
 801cbf2:	d102      	bne.n	801cbfa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801cbf4:	68f8      	ldr	r0, [r7, #12]
 801cbf6:	f7ff fcb7 	bl	801c568 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	3301      	adds	r3, #1
 801cbfe:	60fb      	str	r3, [r7, #12]
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	2b09      	cmp	r3, #9
 801cc04:	dddd      	ble.n	801cbc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801cc06:	bf00      	nop
 801cc08:	bf00      	nop
 801cc0a:	3710      	adds	r7, #16
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	bd80      	pop	{r7, pc}
 801cc10:	20022800 	.word	0x20022800

0801cc14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801cc14:	b5b0      	push	{r4, r5, r7, lr}
 801cc16:	b08a      	sub	sp, #40	@ 0x28
 801cc18:	af04      	add	r7, sp, #16
 801cc1a:	6078      	str	r0, [r7, #4]
 801cc1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cc1e:	683b      	ldr	r3, [r7, #0]
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d107      	bne.n	801cc34 <etharp_input+0x20>
 801cc24:	4b3d      	ldr	r3, [pc, #244]	@ (801cd1c <etharp_input+0x108>)
 801cc26:	f240 228a 	movw	r2, #650	@ 0x28a
 801cc2a:	493d      	ldr	r1, [pc, #244]	@ (801cd20 <etharp_input+0x10c>)
 801cc2c:	483d      	ldr	r0, [pc, #244]	@ (801cd24 <etharp_input+0x110>)
 801cc2e:	f003 f939 	bl	801fea4 <iprintf>
 801cc32:	e06f      	b.n	801cd14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	685b      	ldr	r3, [r3, #4]
 801cc38:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cc3a:	697b      	ldr	r3, [r7, #20]
 801cc3c:	881b      	ldrh	r3, [r3, #0]
 801cc3e:	b29b      	uxth	r3, r3
 801cc40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cc44:	d10c      	bne.n	801cc60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cc46:	697b      	ldr	r3, [r7, #20]
 801cc48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cc4a:	2b06      	cmp	r3, #6
 801cc4c:	d108      	bne.n	801cc60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cc4e:	697b      	ldr	r3, [r7, #20]
 801cc50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cc52:	2b04      	cmp	r3, #4
 801cc54:	d104      	bne.n	801cc60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801cc56:	697b      	ldr	r3, [r7, #20]
 801cc58:	885b      	ldrh	r3, [r3, #2]
 801cc5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cc5c:	2b08      	cmp	r3, #8
 801cc5e:	d003      	beq.n	801cc68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801cc60:	6878      	ldr	r0, [r7, #4]
 801cc62:	f7f7 ffa3 	bl	8014bac <pbuf_free>
    return;
 801cc66:	e055      	b.n	801cd14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801cc68:	697b      	ldr	r3, [r7, #20]
 801cc6a:	330e      	adds	r3, #14
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801cc70:	697b      	ldr	r3, [r7, #20]
 801cc72:	3318      	adds	r3, #24
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cc78:	683b      	ldr	r3, [r7, #0]
 801cc7a:	3304      	adds	r3, #4
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d102      	bne.n	801cc88 <etharp_input+0x74>
    for_us = 0;
 801cc82:	2300      	movs	r3, #0
 801cc84:	74fb      	strb	r3, [r7, #19]
 801cc86:	e009      	b.n	801cc9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801cc88:	68ba      	ldr	r2, [r7, #8]
 801cc8a:	683b      	ldr	r3, [r7, #0]
 801cc8c:	3304      	adds	r3, #4
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	429a      	cmp	r2, r3
 801cc92:	bf0c      	ite	eq
 801cc94:	2301      	moveq	r3, #1
 801cc96:	2300      	movne	r3, #0
 801cc98:	b2db      	uxtb	r3, r3
 801cc9a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801cc9c:	697b      	ldr	r3, [r7, #20]
 801cc9e:	f103 0208 	add.w	r2, r3, #8
 801cca2:	7cfb      	ldrb	r3, [r7, #19]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d001      	beq.n	801ccac <etharp_input+0x98>
 801cca8:	2301      	movs	r3, #1
 801ccaa:	e000      	b.n	801ccae <etharp_input+0x9a>
 801ccac:	2302      	movs	r3, #2
 801ccae:	f107 010c 	add.w	r1, r7, #12
 801ccb2:	6838      	ldr	r0, [r7, #0]
 801ccb4:	f7ff fed8 	bl	801ca68 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ccb8:	697b      	ldr	r3, [r7, #20]
 801ccba:	88db      	ldrh	r3, [r3, #6]
 801ccbc:	b29b      	uxth	r3, r3
 801ccbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ccc2:	d003      	beq.n	801cccc <etharp_input+0xb8>
 801ccc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ccc8:	d01e      	beq.n	801cd08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ccca:	e020      	b.n	801cd0e <etharp_input+0xfa>
      if (for_us) {
 801cccc:	7cfb      	ldrb	r3, [r7, #19]
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d01c      	beq.n	801cd0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ccd2:	683b      	ldr	r3, [r7, #0]
 801ccd4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801ccd8:	697b      	ldr	r3, [r7, #20]
 801ccda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ccde:	683b      	ldr	r3, [r7, #0]
 801cce0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801cce4:	683b      	ldr	r3, [r7, #0]
 801cce6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801cce8:	697a      	ldr	r2, [r7, #20]
 801ccea:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ccec:	2102      	movs	r1, #2
 801ccee:	9103      	str	r1, [sp, #12]
 801ccf0:	f107 010c 	add.w	r1, r7, #12
 801ccf4:	9102      	str	r1, [sp, #8]
 801ccf6:	9201      	str	r2, [sp, #4]
 801ccf8:	9300      	str	r3, [sp, #0]
 801ccfa:	462b      	mov	r3, r5
 801ccfc:	4622      	mov	r2, r4
 801ccfe:	4601      	mov	r1, r0
 801cd00:	6838      	ldr	r0, [r7, #0]
 801cd02:	f000 faeb 	bl	801d2dc <etharp_raw>
      break;
 801cd06:	e001      	b.n	801cd0c <etharp_input+0xf8>
      break;
 801cd08:	bf00      	nop
 801cd0a:	e000      	b.n	801cd0e <etharp_input+0xfa>
      break;
 801cd0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801cd0e:	6878      	ldr	r0, [r7, #4]
 801cd10:	f7f7 ff4c 	bl	8014bac <pbuf_free>
}
 801cd14:	3718      	adds	r7, #24
 801cd16:	46bd      	mov	sp, r7
 801cd18:	bdb0      	pop	{r4, r5, r7, pc}
 801cd1a:	bf00      	nop
 801cd1c:	080245cc 	.word	0x080245cc
 801cd20:	0802471c 	.word	0x0802471c
 801cd24:	08024644 	.word	0x08024644

0801cd28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b086      	sub	sp, #24
 801cd2c:	af02      	add	r7, sp, #8
 801cd2e:	60f8      	str	r0, [r7, #12]
 801cd30:	60b9      	str	r1, [r7, #8]
 801cd32:	4613      	mov	r3, r2
 801cd34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801cd36:	79fa      	ldrb	r2, [r7, #7]
 801cd38:	4944      	ldr	r1, [pc, #272]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cd3a:	4613      	mov	r3, r2
 801cd3c:	005b      	lsls	r3, r3, #1
 801cd3e:	4413      	add	r3, r2
 801cd40:	00db      	lsls	r3, r3, #3
 801cd42:	440b      	add	r3, r1
 801cd44:	3314      	adds	r3, #20
 801cd46:	781b      	ldrb	r3, [r3, #0]
 801cd48:	2b01      	cmp	r3, #1
 801cd4a:	d806      	bhi.n	801cd5a <etharp_output_to_arp_index+0x32>
 801cd4c:	4b40      	ldr	r3, [pc, #256]	@ (801ce50 <etharp_output_to_arp_index+0x128>)
 801cd4e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801cd52:	4940      	ldr	r1, [pc, #256]	@ (801ce54 <etharp_output_to_arp_index+0x12c>)
 801cd54:	4840      	ldr	r0, [pc, #256]	@ (801ce58 <etharp_output_to_arp_index+0x130>)
 801cd56:	f003 f8a5 	bl	801fea4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801cd5a:	79fa      	ldrb	r2, [r7, #7]
 801cd5c:	493b      	ldr	r1, [pc, #236]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cd5e:	4613      	mov	r3, r2
 801cd60:	005b      	lsls	r3, r3, #1
 801cd62:	4413      	add	r3, r2
 801cd64:	00db      	lsls	r3, r3, #3
 801cd66:	440b      	add	r3, r1
 801cd68:	3314      	adds	r3, #20
 801cd6a:	781b      	ldrb	r3, [r3, #0]
 801cd6c:	2b02      	cmp	r3, #2
 801cd6e:	d153      	bne.n	801ce18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801cd70:	79fa      	ldrb	r2, [r7, #7]
 801cd72:	4936      	ldr	r1, [pc, #216]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cd74:	4613      	mov	r3, r2
 801cd76:	005b      	lsls	r3, r3, #1
 801cd78:	4413      	add	r3, r2
 801cd7a:	00db      	lsls	r3, r3, #3
 801cd7c:	440b      	add	r3, r1
 801cd7e:	3312      	adds	r3, #18
 801cd80:	881b      	ldrh	r3, [r3, #0]
 801cd82:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801cd86:	d919      	bls.n	801cdbc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801cd88:	79fa      	ldrb	r2, [r7, #7]
 801cd8a:	4613      	mov	r3, r2
 801cd8c:	005b      	lsls	r3, r3, #1
 801cd8e:	4413      	add	r3, r2
 801cd90:	00db      	lsls	r3, r3, #3
 801cd92:	4a2e      	ldr	r2, [pc, #184]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cd94:	4413      	add	r3, r2
 801cd96:	3304      	adds	r3, #4
 801cd98:	4619      	mov	r1, r3
 801cd9a:	68f8      	ldr	r0, [r7, #12]
 801cd9c:	f000 fb4c 	bl	801d438 <etharp_request>
 801cda0:	4603      	mov	r3, r0
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d138      	bne.n	801ce18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cda6:	79fa      	ldrb	r2, [r7, #7]
 801cda8:	4928      	ldr	r1, [pc, #160]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cdaa:	4613      	mov	r3, r2
 801cdac:	005b      	lsls	r3, r3, #1
 801cdae:	4413      	add	r3, r2
 801cdb0:	00db      	lsls	r3, r3, #3
 801cdb2:	440b      	add	r3, r1
 801cdb4:	3314      	adds	r3, #20
 801cdb6:	2203      	movs	r2, #3
 801cdb8:	701a      	strb	r2, [r3, #0]
 801cdba:	e02d      	b.n	801ce18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801cdbc:	79fa      	ldrb	r2, [r7, #7]
 801cdbe:	4923      	ldr	r1, [pc, #140]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cdc0:	4613      	mov	r3, r2
 801cdc2:	005b      	lsls	r3, r3, #1
 801cdc4:	4413      	add	r3, r2
 801cdc6:	00db      	lsls	r3, r3, #3
 801cdc8:	440b      	add	r3, r1
 801cdca:	3312      	adds	r3, #18
 801cdcc:	881b      	ldrh	r3, [r3, #0]
 801cdce:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801cdd2:	d321      	bcc.n	801ce18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801cdd4:	79fa      	ldrb	r2, [r7, #7]
 801cdd6:	4613      	mov	r3, r2
 801cdd8:	005b      	lsls	r3, r3, #1
 801cdda:	4413      	add	r3, r2
 801cddc:	00db      	lsls	r3, r3, #3
 801cdde:	4a1b      	ldr	r2, [pc, #108]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cde0:	4413      	add	r3, r2
 801cde2:	1d19      	adds	r1, r3, #4
 801cde4:	79fa      	ldrb	r2, [r7, #7]
 801cde6:	4613      	mov	r3, r2
 801cde8:	005b      	lsls	r3, r3, #1
 801cdea:	4413      	add	r3, r2
 801cdec:	00db      	lsls	r3, r3, #3
 801cdee:	3308      	adds	r3, #8
 801cdf0:	4a16      	ldr	r2, [pc, #88]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801cdf2:	4413      	add	r3, r2
 801cdf4:	3304      	adds	r3, #4
 801cdf6:	461a      	mov	r2, r3
 801cdf8:	68f8      	ldr	r0, [r7, #12]
 801cdfa:	f000 fafb 	bl	801d3f4 <etharp_request_dst>
 801cdfe:	4603      	mov	r3, r0
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d109      	bne.n	801ce18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ce04:	79fa      	ldrb	r2, [r7, #7]
 801ce06:	4911      	ldr	r1, [pc, #68]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801ce08:	4613      	mov	r3, r2
 801ce0a:	005b      	lsls	r3, r3, #1
 801ce0c:	4413      	add	r3, r2
 801ce0e:	00db      	lsls	r3, r3, #3
 801ce10:	440b      	add	r3, r1
 801ce12:	3314      	adds	r3, #20
 801ce14:	2203      	movs	r2, #3
 801ce16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801ce1e:	79fa      	ldrb	r2, [r7, #7]
 801ce20:	4613      	mov	r3, r2
 801ce22:	005b      	lsls	r3, r3, #1
 801ce24:	4413      	add	r3, r2
 801ce26:	00db      	lsls	r3, r3, #3
 801ce28:	3308      	adds	r3, #8
 801ce2a:	4a08      	ldr	r2, [pc, #32]	@ (801ce4c <etharp_output_to_arp_index+0x124>)
 801ce2c:	4413      	add	r3, r2
 801ce2e:	3304      	adds	r3, #4
 801ce30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ce34:	9200      	str	r2, [sp, #0]
 801ce36:	460a      	mov	r2, r1
 801ce38:	68b9      	ldr	r1, [r7, #8]
 801ce3a:	68f8      	ldr	r0, [r7, #12]
 801ce3c:	f001 fed2 	bl	801ebe4 <ethernet_output>
 801ce40:	4603      	mov	r3, r0
}
 801ce42:	4618      	mov	r0, r3
 801ce44:	3710      	adds	r7, #16
 801ce46:	46bd      	mov	sp, r7
 801ce48:	bd80      	pop	{r7, pc}
 801ce4a:	bf00      	nop
 801ce4c:	20022800 	.word	0x20022800
 801ce50:	080245cc 	.word	0x080245cc
 801ce54:	0802473c 	.word	0x0802473c
 801ce58:	08024644 	.word	0x08024644

0801ce5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	b08a      	sub	sp, #40	@ 0x28
 801ce60:	af02      	add	r7, sp, #8
 801ce62:	60f8      	str	r0, [r7, #12]
 801ce64:	60b9      	str	r1, [r7, #8]
 801ce66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d106      	bne.n	801ce80 <etharp_output+0x24>
 801ce72:	4b73      	ldr	r3, [pc, #460]	@ (801d040 <etharp_output+0x1e4>)
 801ce74:	f240 321e 	movw	r2, #798	@ 0x31e
 801ce78:	4972      	ldr	r1, [pc, #456]	@ (801d044 <etharp_output+0x1e8>)
 801ce7a:	4873      	ldr	r0, [pc, #460]	@ (801d048 <etharp_output+0x1ec>)
 801ce7c:	f003 f812 	bl	801fea4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ce80:	68bb      	ldr	r3, [r7, #8]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d106      	bne.n	801ce94 <etharp_output+0x38>
 801ce86:	4b6e      	ldr	r3, [pc, #440]	@ (801d040 <etharp_output+0x1e4>)
 801ce88:	f240 321f 	movw	r2, #799	@ 0x31f
 801ce8c:	496f      	ldr	r1, [pc, #444]	@ (801d04c <etharp_output+0x1f0>)
 801ce8e:	486e      	ldr	r0, [pc, #440]	@ (801d048 <etharp_output+0x1ec>)
 801ce90:	f003 f808 	bl	801fea4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d106      	bne.n	801cea8 <etharp_output+0x4c>
 801ce9a:	4b69      	ldr	r3, [pc, #420]	@ (801d040 <etharp_output+0x1e4>)
 801ce9c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801cea0:	496b      	ldr	r1, [pc, #428]	@ (801d050 <etharp_output+0x1f4>)
 801cea2:	4869      	ldr	r0, [pc, #420]	@ (801d048 <etharp_output+0x1ec>)
 801cea4:	f002 fffe 	bl	801fea4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	68f9      	ldr	r1, [r7, #12]
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f000 ff8a 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801ceb4:	4603      	mov	r3, r0
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d002      	beq.n	801cec0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ceba:	4b66      	ldr	r3, [pc, #408]	@ (801d054 <etharp_output+0x1f8>)
 801cebc:	61fb      	str	r3, [r7, #28]
 801cebe:	e0af      	b.n	801d020 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cec8:	2be0      	cmp	r3, #224	@ 0xe0
 801ceca:	d118      	bne.n	801cefe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801cecc:	2301      	movs	r3, #1
 801cece:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ced0:	2300      	movs	r3, #0
 801ced2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ced4:	235e      	movs	r3, #94	@ 0x5e
 801ced6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	3301      	adds	r3, #1
 801cedc:	781b      	ldrb	r3, [r3, #0]
 801cede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cee2:	b2db      	uxtb	r3, r3
 801cee4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	3302      	adds	r3, #2
 801ceea:	781b      	ldrb	r3, [r3, #0]
 801ceec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	3303      	adds	r3, #3
 801cef2:	781b      	ldrb	r3, [r3, #0]
 801cef4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801cef6:	f107 0310 	add.w	r3, r7, #16
 801cefa:	61fb      	str	r3, [r7, #28]
 801cefc:	e090      	b.n	801d020 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	681a      	ldr	r2, [r3, #0]
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	3304      	adds	r3, #4
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	405a      	eors	r2, r3
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	3308      	adds	r3, #8
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	4013      	ands	r3, r2
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d012      	beq.n	801cf3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cf1c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801cf20:	4293      	cmp	r3, r2
 801cf22:	d00b      	beq.n	801cf3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	330c      	adds	r3, #12
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d003      	beq.n	801cf36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	330c      	adds	r3, #12
 801cf32:	61bb      	str	r3, [r7, #24]
 801cf34:	e002      	b.n	801cf3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801cf36:	f06f 0303 	mvn.w	r3, #3
 801cf3a:	e07d      	b.n	801d038 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cf3c:	4b46      	ldr	r3, [pc, #280]	@ (801d058 <etharp_output+0x1fc>)
 801cf3e:	781b      	ldrb	r3, [r3, #0]
 801cf40:	4619      	mov	r1, r3
 801cf42:	4a46      	ldr	r2, [pc, #280]	@ (801d05c <etharp_output+0x200>)
 801cf44:	460b      	mov	r3, r1
 801cf46:	005b      	lsls	r3, r3, #1
 801cf48:	440b      	add	r3, r1
 801cf4a:	00db      	lsls	r3, r3, #3
 801cf4c:	4413      	add	r3, r2
 801cf4e:	3314      	adds	r3, #20
 801cf50:	781b      	ldrb	r3, [r3, #0]
 801cf52:	2b01      	cmp	r3, #1
 801cf54:	d925      	bls.n	801cfa2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cf56:	4b40      	ldr	r3, [pc, #256]	@ (801d058 <etharp_output+0x1fc>)
 801cf58:	781b      	ldrb	r3, [r3, #0]
 801cf5a:	4619      	mov	r1, r3
 801cf5c:	4a3f      	ldr	r2, [pc, #252]	@ (801d05c <etharp_output+0x200>)
 801cf5e:	460b      	mov	r3, r1
 801cf60:	005b      	lsls	r3, r3, #1
 801cf62:	440b      	add	r3, r1
 801cf64:	00db      	lsls	r3, r3, #3
 801cf66:	4413      	add	r3, r2
 801cf68:	3308      	adds	r3, #8
 801cf6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cf6c:	68fa      	ldr	r2, [r7, #12]
 801cf6e:	429a      	cmp	r2, r3
 801cf70:	d117      	bne.n	801cfa2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	681a      	ldr	r2, [r3, #0]
 801cf76:	4b38      	ldr	r3, [pc, #224]	@ (801d058 <etharp_output+0x1fc>)
 801cf78:	781b      	ldrb	r3, [r3, #0]
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	4937      	ldr	r1, [pc, #220]	@ (801d05c <etharp_output+0x200>)
 801cf7e:	4603      	mov	r3, r0
 801cf80:	005b      	lsls	r3, r3, #1
 801cf82:	4403      	add	r3, r0
 801cf84:	00db      	lsls	r3, r3, #3
 801cf86:	440b      	add	r3, r1
 801cf88:	3304      	adds	r3, #4
 801cf8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cf8c:	429a      	cmp	r2, r3
 801cf8e:	d108      	bne.n	801cfa2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801cf90:	4b31      	ldr	r3, [pc, #196]	@ (801d058 <etharp_output+0x1fc>)
 801cf92:	781b      	ldrb	r3, [r3, #0]
 801cf94:	461a      	mov	r2, r3
 801cf96:	68b9      	ldr	r1, [r7, #8]
 801cf98:	68f8      	ldr	r0, [r7, #12]
 801cf9a:	f7ff fec5 	bl	801cd28 <etharp_output_to_arp_index>
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	e04a      	b.n	801d038 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	75fb      	strb	r3, [r7, #23]
 801cfa6:	e031      	b.n	801d00c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cfa8:	7dfa      	ldrb	r2, [r7, #23]
 801cfaa:	492c      	ldr	r1, [pc, #176]	@ (801d05c <etharp_output+0x200>)
 801cfac:	4613      	mov	r3, r2
 801cfae:	005b      	lsls	r3, r3, #1
 801cfb0:	4413      	add	r3, r2
 801cfb2:	00db      	lsls	r3, r3, #3
 801cfb4:	440b      	add	r3, r1
 801cfb6:	3314      	adds	r3, #20
 801cfb8:	781b      	ldrb	r3, [r3, #0]
 801cfba:	2b01      	cmp	r3, #1
 801cfbc:	d923      	bls.n	801d006 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801cfbe:	7dfa      	ldrb	r2, [r7, #23]
 801cfc0:	4926      	ldr	r1, [pc, #152]	@ (801d05c <etharp_output+0x200>)
 801cfc2:	4613      	mov	r3, r2
 801cfc4:	005b      	lsls	r3, r3, #1
 801cfc6:	4413      	add	r3, r2
 801cfc8:	00db      	lsls	r3, r3, #3
 801cfca:	440b      	add	r3, r1
 801cfcc:	3308      	adds	r3, #8
 801cfce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cfd0:	68fa      	ldr	r2, [r7, #12]
 801cfd2:	429a      	cmp	r2, r3
 801cfd4:	d117      	bne.n	801d006 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801cfd6:	69bb      	ldr	r3, [r7, #24]
 801cfd8:	6819      	ldr	r1, [r3, #0]
 801cfda:	7dfa      	ldrb	r2, [r7, #23]
 801cfdc:	481f      	ldr	r0, [pc, #124]	@ (801d05c <etharp_output+0x200>)
 801cfde:	4613      	mov	r3, r2
 801cfe0:	005b      	lsls	r3, r3, #1
 801cfe2:	4413      	add	r3, r2
 801cfe4:	00db      	lsls	r3, r3, #3
 801cfe6:	4403      	add	r3, r0
 801cfe8:	3304      	adds	r3, #4
 801cfea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801cfec:	4299      	cmp	r1, r3
 801cfee:	d10a      	bne.n	801d006 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801cff0:	4a19      	ldr	r2, [pc, #100]	@ (801d058 <etharp_output+0x1fc>)
 801cff2:	7dfb      	ldrb	r3, [r7, #23]
 801cff4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801cff6:	7dfb      	ldrb	r3, [r7, #23]
 801cff8:	461a      	mov	r2, r3
 801cffa:	68b9      	ldr	r1, [r7, #8]
 801cffc:	68f8      	ldr	r0, [r7, #12]
 801cffe:	f7ff fe93 	bl	801cd28 <etharp_output_to_arp_index>
 801d002:	4603      	mov	r3, r0
 801d004:	e018      	b.n	801d038 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d006:	7dfb      	ldrb	r3, [r7, #23]
 801d008:	3301      	adds	r3, #1
 801d00a:	75fb      	strb	r3, [r7, #23]
 801d00c:	7dfb      	ldrb	r3, [r7, #23]
 801d00e:	2b09      	cmp	r3, #9
 801d010:	d9ca      	bls.n	801cfa8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d012:	68ba      	ldr	r2, [r7, #8]
 801d014:	69b9      	ldr	r1, [r7, #24]
 801d016:	68f8      	ldr	r0, [r7, #12]
 801d018:	f000 f822 	bl	801d060 <etharp_query>
 801d01c:	4603      	mov	r3, r0
 801d01e:	e00b      	b.n	801d038 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801d026:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d02a:	9300      	str	r3, [sp, #0]
 801d02c:	69fb      	ldr	r3, [r7, #28]
 801d02e:	68b9      	ldr	r1, [r7, #8]
 801d030:	68f8      	ldr	r0, [r7, #12]
 801d032:	f001 fdd7 	bl	801ebe4 <ethernet_output>
 801d036:	4603      	mov	r3, r0
}
 801d038:	4618      	mov	r0, r3
 801d03a:	3720      	adds	r7, #32
 801d03c:	46bd      	mov	sp, r7
 801d03e:	bd80      	pop	{r7, pc}
 801d040:	080245cc 	.word	0x080245cc
 801d044:	0802471c 	.word	0x0802471c
 801d048:	08024644 	.word	0x08024644
 801d04c:	0802476c 	.word	0x0802476c
 801d050:	0802470c 	.word	0x0802470c
 801d054:	0802548c 	.word	0x0802548c
 801d058:	200228f0 	.word	0x200228f0
 801d05c:	20022800 	.word	0x20022800

0801d060 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d060:	b580      	push	{r7, lr}
 801d062:	b08c      	sub	sp, #48	@ 0x30
 801d064:	af02      	add	r7, sp, #8
 801d066:	60f8      	str	r0, [r7, #12]
 801d068:	60b9      	str	r1, [r7, #8]
 801d06a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d06c:	68fb      	ldr	r3, [r7, #12]
 801d06e:	3326      	adds	r3, #38	@ 0x26
 801d070:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d072:	23ff      	movs	r3, #255	@ 0xff
 801d074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801d078:	2300      	movs	r3, #0
 801d07a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d07c:	68bb      	ldr	r3, [r7, #8]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	68f9      	ldr	r1, [r7, #12]
 801d082:	4618      	mov	r0, r3
 801d084:	f000 fea0 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801d088:	4603      	mov	r3, r0
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d10c      	bne.n	801d0a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d08e:	68bb      	ldr	r3, [r7, #8]
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d096:	2be0      	cmp	r3, #224	@ 0xe0
 801d098:	d006      	beq.n	801d0a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d09a:	68bb      	ldr	r3, [r7, #8]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d003      	beq.n	801d0a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d0a0:	68bb      	ldr	r3, [r7, #8]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d102      	bne.n	801d0ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d0a8:	f06f 030f 	mvn.w	r3, #15
 801d0ac:	e101      	b.n	801d2b2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d0ae:	68fa      	ldr	r2, [r7, #12]
 801d0b0:	2101      	movs	r1, #1
 801d0b2:	68b8      	ldr	r0, [r7, #8]
 801d0b4:	f7ff fb60 	bl	801c778 <etharp_find_entry>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d0bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	da02      	bge.n	801d0ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d0c4:	8a7b      	ldrh	r3, [r7, #18]
 801d0c6:	b25b      	sxtb	r3, r3
 801d0c8:	e0f3      	b.n	801d2b2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d0ca:	8a7b      	ldrh	r3, [r7, #18]
 801d0cc:	2b7e      	cmp	r3, #126	@ 0x7e
 801d0ce:	d906      	bls.n	801d0de <etharp_query+0x7e>
 801d0d0:	4b7a      	ldr	r3, [pc, #488]	@ (801d2bc <etharp_query+0x25c>)
 801d0d2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801d0d6:	497a      	ldr	r1, [pc, #488]	@ (801d2c0 <etharp_query+0x260>)
 801d0d8:	487a      	ldr	r0, [pc, #488]	@ (801d2c4 <etharp_query+0x264>)
 801d0da:	f002 fee3 	bl	801fea4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d0de:	8a7b      	ldrh	r3, [r7, #18]
 801d0e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d0e2:	7c7a      	ldrb	r2, [r7, #17]
 801d0e4:	4978      	ldr	r1, [pc, #480]	@ (801d2c8 <etharp_query+0x268>)
 801d0e6:	4613      	mov	r3, r2
 801d0e8:	005b      	lsls	r3, r3, #1
 801d0ea:	4413      	add	r3, r2
 801d0ec:	00db      	lsls	r3, r3, #3
 801d0ee:	440b      	add	r3, r1
 801d0f0:	3314      	adds	r3, #20
 801d0f2:	781b      	ldrb	r3, [r3, #0]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d115      	bne.n	801d124 <etharp_query+0xc4>
    is_new_entry = 1;
 801d0f8:	2301      	movs	r3, #1
 801d0fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d0fc:	7c7a      	ldrb	r2, [r7, #17]
 801d0fe:	4972      	ldr	r1, [pc, #456]	@ (801d2c8 <etharp_query+0x268>)
 801d100:	4613      	mov	r3, r2
 801d102:	005b      	lsls	r3, r3, #1
 801d104:	4413      	add	r3, r2
 801d106:	00db      	lsls	r3, r3, #3
 801d108:	440b      	add	r3, r1
 801d10a:	3314      	adds	r3, #20
 801d10c:	2201      	movs	r2, #1
 801d10e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d110:	7c7a      	ldrb	r2, [r7, #17]
 801d112:	496d      	ldr	r1, [pc, #436]	@ (801d2c8 <etharp_query+0x268>)
 801d114:	4613      	mov	r3, r2
 801d116:	005b      	lsls	r3, r3, #1
 801d118:	4413      	add	r3, r2
 801d11a:	00db      	lsls	r3, r3, #3
 801d11c:	440b      	add	r3, r1
 801d11e:	3308      	adds	r3, #8
 801d120:	68fa      	ldr	r2, [r7, #12]
 801d122:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d124:	7c7a      	ldrb	r2, [r7, #17]
 801d126:	4968      	ldr	r1, [pc, #416]	@ (801d2c8 <etharp_query+0x268>)
 801d128:	4613      	mov	r3, r2
 801d12a:	005b      	lsls	r3, r3, #1
 801d12c:	4413      	add	r3, r2
 801d12e:	00db      	lsls	r3, r3, #3
 801d130:	440b      	add	r3, r1
 801d132:	3314      	adds	r3, #20
 801d134:	781b      	ldrb	r3, [r3, #0]
 801d136:	2b01      	cmp	r3, #1
 801d138:	d011      	beq.n	801d15e <etharp_query+0xfe>
 801d13a:	7c7a      	ldrb	r2, [r7, #17]
 801d13c:	4962      	ldr	r1, [pc, #392]	@ (801d2c8 <etharp_query+0x268>)
 801d13e:	4613      	mov	r3, r2
 801d140:	005b      	lsls	r3, r3, #1
 801d142:	4413      	add	r3, r2
 801d144:	00db      	lsls	r3, r3, #3
 801d146:	440b      	add	r3, r1
 801d148:	3314      	adds	r3, #20
 801d14a:	781b      	ldrb	r3, [r3, #0]
 801d14c:	2b01      	cmp	r3, #1
 801d14e:	d806      	bhi.n	801d15e <etharp_query+0xfe>
 801d150:	4b5a      	ldr	r3, [pc, #360]	@ (801d2bc <etharp_query+0x25c>)
 801d152:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801d156:	495d      	ldr	r1, [pc, #372]	@ (801d2cc <etharp_query+0x26c>)
 801d158:	485a      	ldr	r0, [pc, #360]	@ (801d2c4 <etharp_query+0x264>)
 801d15a:	f002 fea3 	bl	801fea4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d15e:	6a3b      	ldr	r3, [r7, #32]
 801d160:	2b00      	cmp	r3, #0
 801d162:	d102      	bne.n	801d16a <etharp_query+0x10a>
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	2b00      	cmp	r3, #0
 801d168:	d10c      	bne.n	801d184 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d16a:	68b9      	ldr	r1, [r7, #8]
 801d16c:	68f8      	ldr	r0, [r7, #12]
 801d16e:	f000 f963 	bl	801d438 <etharp_request>
 801d172:	4603      	mov	r3, r0
 801d174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d102      	bne.n	801d184 <etharp_query+0x124>
      return result;
 801d17e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801d182:	e096      	b.n	801d2b2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	2b00      	cmp	r3, #0
 801d188:	d106      	bne.n	801d198 <etharp_query+0x138>
 801d18a:	4b4c      	ldr	r3, [pc, #304]	@ (801d2bc <etharp_query+0x25c>)
 801d18c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801d190:	494f      	ldr	r1, [pc, #316]	@ (801d2d0 <etharp_query+0x270>)
 801d192:	484c      	ldr	r0, [pc, #304]	@ (801d2c4 <etharp_query+0x264>)
 801d194:	f002 fe86 	bl	801fea4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d198:	7c7a      	ldrb	r2, [r7, #17]
 801d19a:	494b      	ldr	r1, [pc, #300]	@ (801d2c8 <etharp_query+0x268>)
 801d19c:	4613      	mov	r3, r2
 801d19e:	005b      	lsls	r3, r3, #1
 801d1a0:	4413      	add	r3, r2
 801d1a2:	00db      	lsls	r3, r3, #3
 801d1a4:	440b      	add	r3, r1
 801d1a6:	3314      	adds	r3, #20
 801d1a8:	781b      	ldrb	r3, [r3, #0]
 801d1aa:	2b01      	cmp	r3, #1
 801d1ac:	d917      	bls.n	801d1de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d1ae:	4a49      	ldr	r2, [pc, #292]	@ (801d2d4 <etharp_query+0x274>)
 801d1b0:	7c7b      	ldrb	r3, [r7, #17]
 801d1b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d1b4:	7c7a      	ldrb	r2, [r7, #17]
 801d1b6:	4613      	mov	r3, r2
 801d1b8:	005b      	lsls	r3, r3, #1
 801d1ba:	4413      	add	r3, r2
 801d1bc:	00db      	lsls	r3, r3, #3
 801d1be:	3308      	adds	r3, #8
 801d1c0:	4a41      	ldr	r2, [pc, #260]	@ (801d2c8 <etharp_query+0x268>)
 801d1c2:	4413      	add	r3, r2
 801d1c4:	3304      	adds	r3, #4
 801d1c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d1ca:	9200      	str	r2, [sp, #0]
 801d1cc:	697a      	ldr	r2, [r7, #20]
 801d1ce:	6879      	ldr	r1, [r7, #4]
 801d1d0:	68f8      	ldr	r0, [r7, #12]
 801d1d2:	f001 fd07 	bl	801ebe4 <ethernet_output>
 801d1d6:	4603      	mov	r3, r0
 801d1d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d1dc:	e067      	b.n	801d2ae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d1de:	7c7a      	ldrb	r2, [r7, #17]
 801d1e0:	4939      	ldr	r1, [pc, #228]	@ (801d2c8 <etharp_query+0x268>)
 801d1e2:	4613      	mov	r3, r2
 801d1e4:	005b      	lsls	r3, r3, #1
 801d1e6:	4413      	add	r3, r2
 801d1e8:	00db      	lsls	r3, r3, #3
 801d1ea:	440b      	add	r3, r1
 801d1ec:	3314      	adds	r3, #20
 801d1ee:	781b      	ldrb	r3, [r3, #0]
 801d1f0:	2b01      	cmp	r3, #1
 801d1f2:	d15c      	bne.n	801d2ae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d1fc:	e01c      	b.n	801d238 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	895a      	ldrh	r2, [r3, #10]
 801d202:	69fb      	ldr	r3, [r7, #28]
 801d204:	891b      	ldrh	r3, [r3, #8]
 801d206:	429a      	cmp	r2, r3
 801d208:	d10a      	bne.n	801d220 <etharp_query+0x1c0>
 801d20a:	69fb      	ldr	r3, [r7, #28]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d006      	beq.n	801d220 <etharp_query+0x1c0>
 801d212:	4b2a      	ldr	r3, [pc, #168]	@ (801d2bc <etharp_query+0x25c>)
 801d214:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801d218:	492f      	ldr	r1, [pc, #188]	@ (801d2d8 <etharp_query+0x278>)
 801d21a:	482a      	ldr	r0, [pc, #168]	@ (801d2c4 <etharp_query+0x264>)
 801d21c:	f002 fe42 	bl	801fea4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d220:	69fb      	ldr	r3, [r7, #28]
 801d222:	7b1b      	ldrb	r3, [r3, #12]
 801d224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d002      	beq.n	801d232 <etharp_query+0x1d2>
        copy_needed = 1;
 801d22c:	2301      	movs	r3, #1
 801d22e:	61bb      	str	r3, [r7, #24]
        break;
 801d230:	e005      	b.n	801d23e <etharp_query+0x1de>
      }
      p = p->next;
 801d232:	69fb      	ldr	r3, [r7, #28]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d238:	69fb      	ldr	r3, [r7, #28]
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d1df      	bne.n	801d1fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d23e:	69bb      	ldr	r3, [r7, #24]
 801d240:	2b00      	cmp	r3, #0
 801d242:	d007      	beq.n	801d254 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d244:	687a      	ldr	r2, [r7, #4]
 801d246:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801d24a:	200e      	movs	r0, #14
 801d24c:	f7f7 ff26 	bl	801509c <pbuf_clone>
 801d250:	61f8      	str	r0, [r7, #28]
 801d252:	e004      	b.n	801d25e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d258:	69f8      	ldr	r0, [r7, #28]
 801d25a:	f7f7 fd4d 	bl	8014cf8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d25e:	69fb      	ldr	r3, [r7, #28]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d021      	beq.n	801d2a8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d264:	7c7a      	ldrb	r2, [r7, #17]
 801d266:	4918      	ldr	r1, [pc, #96]	@ (801d2c8 <etharp_query+0x268>)
 801d268:	4613      	mov	r3, r2
 801d26a:	005b      	lsls	r3, r3, #1
 801d26c:	4413      	add	r3, r2
 801d26e:	00db      	lsls	r3, r3, #3
 801d270:	440b      	add	r3, r1
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d00a      	beq.n	801d28e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d278:	7c7a      	ldrb	r2, [r7, #17]
 801d27a:	4913      	ldr	r1, [pc, #76]	@ (801d2c8 <etharp_query+0x268>)
 801d27c:	4613      	mov	r3, r2
 801d27e:	005b      	lsls	r3, r3, #1
 801d280:	4413      	add	r3, r2
 801d282:	00db      	lsls	r3, r3, #3
 801d284:	440b      	add	r3, r1
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	4618      	mov	r0, r3
 801d28a:	f7f7 fc8f 	bl	8014bac <pbuf_free>
      }
      arp_table[i].q = p;
 801d28e:	7c7a      	ldrb	r2, [r7, #17]
 801d290:	490d      	ldr	r1, [pc, #52]	@ (801d2c8 <etharp_query+0x268>)
 801d292:	4613      	mov	r3, r2
 801d294:	005b      	lsls	r3, r3, #1
 801d296:	4413      	add	r3, r2
 801d298:	00db      	lsls	r3, r3, #3
 801d29a:	440b      	add	r3, r1
 801d29c:	69fa      	ldr	r2, [r7, #28]
 801d29e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d2a0:	2300      	movs	r3, #0
 801d2a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d2a6:	e002      	b.n	801d2ae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d2a8:	23ff      	movs	r3, #255	@ 0xff
 801d2aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801d2ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	3728      	adds	r7, #40	@ 0x28
 801d2b6:	46bd      	mov	sp, r7
 801d2b8:	bd80      	pop	{r7, pc}
 801d2ba:	bf00      	nop
 801d2bc:	080245cc 	.word	0x080245cc
 801d2c0:	08024778 	.word	0x08024778
 801d2c4:	08024644 	.word	0x08024644
 801d2c8:	20022800 	.word	0x20022800
 801d2cc:	08024788 	.word	0x08024788
 801d2d0:	0802476c 	.word	0x0802476c
 801d2d4:	200228f0 	.word	0x200228f0
 801d2d8:	080247b0 	.word	0x080247b0

0801d2dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b08a      	sub	sp, #40	@ 0x28
 801d2e0:	af02      	add	r7, sp, #8
 801d2e2:	60f8      	str	r0, [r7, #12]
 801d2e4:	60b9      	str	r1, [r7, #8]
 801d2e6:	607a      	str	r2, [r7, #4]
 801d2e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d106      	bne.n	801d302 <etharp_raw+0x26>
 801d2f4:	4b3a      	ldr	r3, [pc, #232]	@ (801d3e0 <etharp_raw+0x104>)
 801d2f6:	f240 4257 	movw	r2, #1111	@ 0x457
 801d2fa:	493a      	ldr	r1, [pc, #232]	@ (801d3e4 <etharp_raw+0x108>)
 801d2fc:	483a      	ldr	r0, [pc, #232]	@ (801d3e8 <etharp_raw+0x10c>)
 801d2fe:	f002 fdd1 	bl	801fea4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d302:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d306:	211c      	movs	r1, #28
 801d308:	200e      	movs	r0, #14
 801d30a:	f7f7 f96b 	bl	80145e4 <pbuf_alloc>
 801d30e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d310:	69bb      	ldr	r3, [r7, #24]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d102      	bne.n	801d31c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d31a:	e05d      	b.n	801d3d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d31c:	69bb      	ldr	r3, [r7, #24]
 801d31e:	895b      	ldrh	r3, [r3, #10]
 801d320:	2b1b      	cmp	r3, #27
 801d322:	d806      	bhi.n	801d332 <etharp_raw+0x56>
 801d324:	4b2e      	ldr	r3, [pc, #184]	@ (801d3e0 <etharp_raw+0x104>)
 801d326:	f240 4262 	movw	r2, #1122	@ 0x462
 801d32a:	4930      	ldr	r1, [pc, #192]	@ (801d3ec <etharp_raw+0x110>)
 801d32c:	482e      	ldr	r0, [pc, #184]	@ (801d3e8 <etharp_raw+0x10c>)
 801d32e:	f002 fdb9 	bl	801fea4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d332:	69bb      	ldr	r3, [r7, #24]
 801d334:	685b      	ldr	r3, [r3, #4]
 801d336:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d338:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801d33a:	4618      	mov	r0, r3
 801d33c:	f7f5 ff52 	bl	80131e4 <lwip_htons>
 801d340:	4603      	mov	r3, r0
 801d342:	461a      	mov	r2, r3
 801d344:	697b      	ldr	r3, [r7, #20]
 801d346:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d34e:	2b06      	cmp	r3, #6
 801d350:	d006      	beq.n	801d360 <etharp_raw+0x84>
 801d352:	4b23      	ldr	r3, [pc, #140]	@ (801d3e0 <etharp_raw+0x104>)
 801d354:	f240 4269 	movw	r2, #1129	@ 0x469
 801d358:	4925      	ldr	r1, [pc, #148]	@ (801d3f0 <etharp_raw+0x114>)
 801d35a:	4823      	ldr	r0, [pc, #140]	@ (801d3e8 <etharp_raw+0x10c>)
 801d35c:	f002 fda2 	bl	801fea4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d360:	697b      	ldr	r3, [r7, #20]
 801d362:	3308      	adds	r3, #8
 801d364:	2206      	movs	r2, #6
 801d366:	6839      	ldr	r1, [r7, #0]
 801d368:	4618      	mov	r0, r3
 801d36a:	f002 ff70 	bl	802024e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d36e:	697b      	ldr	r3, [r7, #20]
 801d370:	3312      	adds	r3, #18
 801d372:	2206      	movs	r2, #6
 801d374:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d376:	4618      	mov	r0, r3
 801d378:	f002 ff69 	bl	802024e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d37c:	697b      	ldr	r3, [r7, #20]
 801d37e:	330e      	adds	r3, #14
 801d380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d382:	6812      	ldr	r2, [r2, #0]
 801d384:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d386:	697b      	ldr	r3, [r7, #20]
 801d388:	3318      	adds	r3, #24
 801d38a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d38c:	6812      	ldr	r2, [r2, #0]
 801d38e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d390:	697b      	ldr	r3, [r7, #20]
 801d392:	2200      	movs	r2, #0
 801d394:	701a      	strb	r2, [r3, #0]
 801d396:	2200      	movs	r2, #0
 801d398:	f042 0201 	orr.w	r2, r2, #1
 801d39c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d39e:	697b      	ldr	r3, [r7, #20]
 801d3a0:	2200      	movs	r2, #0
 801d3a2:	f042 0208 	orr.w	r2, r2, #8
 801d3a6:	709a      	strb	r2, [r3, #2]
 801d3a8:	2200      	movs	r2, #0
 801d3aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d3ac:	697b      	ldr	r3, [r7, #20]
 801d3ae:	2206      	movs	r2, #6
 801d3b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d3b2:	697b      	ldr	r3, [r7, #20]
 801d3b4:	2204      	movs	r2, #4
 801d3b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d3b8:	f640 0306 	movw	r3, #2054	@ 0x806
 801d3bc:	9300      	str	r3, [sp, #0]
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	68ba      	ldr	r2, [r7, #8]
 801d3c2:	69b9      	ldr	r1, [r7, #24]
 801d3c4:	68f8      	ldr	r0, [r7, #12]
 801d3c6:	f001 fc0d 	bl	801ebe4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d3ca:	69b8      	ldr	r0, [r7, #24]
 801d3cc:	f7f7 fbee 	bl	8014bac <pbuf_free>
  p = NULL;
 801d3d0:	2300      	movs	r3, #0
 801d3d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d3d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d3d8:	4618      	mov	r0, r3
 801d3da:	3720      	adds	r7, #32
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	bd80      	pop	{r7, pc}
 801d3e0:	080245cc 	.word	0x080245cc
 801d3e4:	0802471c 	.word	0x0802471c
 801d3e8:	08024644 	.word	0x08024644
 801d3ec:	080247cc 	.word	0x080247cc
 801d3f0:	08024800 	.word	0x08024800

0801d3f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d3f4:	b580      	push	{r7, lr}
 801d3f6:	b088      	sub	sp, #32
 801d3f8:	af04      	add	r7, sp, #16
 801d3fa:	60f8      	str	r0, [r7, #12]
 801d3fc:	60b9      	str	r1, [r7, #8]
 801d3fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d410:	2201      	movs	r2, #1
 801d412:	9203      	str	r2, [sp, #12]
 801d414:	68ba      	ldr	r2, [r7, #8]
 801d416:	9202      	str	r2, [sp, #8]
 801d418:	4a06      	ldr	r2, [pc, #24]	@ (801d434 <etharp_request_dst+0x40>)
 801d41a:	9201      	str	r2, [sp, #4]
 801d41c:	9300      	str	r3, [sp, #0]
 801d41e:	4603      	mov	r3, r0
 801d420:	687a      	ldr	r2, [r7, #4]
 801d422:	68f8      	ldr	r0, [r7, #12]
 801d424:	f7ff ff5a 	bl	801d2dc <etharp_raw>
 801d428:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d42a:	4618      	mov	r0, r3
 801d42c:	3710      	adds	r7, #16
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd80      	pop	{r7, pc}
 801d432:	bf00      	nop
 801d434:	08025494 	.word	0x08025494

0801d438 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	b082      	sub	sp, #8
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
 801d440:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d442:	4a05      	ldr	r2, [pc, #20]	@ (801d458 <etharp_request+0x20>)
 801d444:	6839      	ldr	r1, [r7, #0]
 801d446:	6878      	ldr	r0, [r7, #4]
 801d448:	f7ff ffd4 	bl	801d3f4 <etharp_request_dst>
 801d44c:	4603      	mov	r3, r0
}
 801d44e:	4618      	mov	r0, r3
 801d450:	3708      	adds	r7, #8
 801d452:	46bd      	mov	sp, r7
 801d454:	bd80      	pop	{r7, pc}
 801d456:	bf00      	nop
 801d458:	0802548c 	.word	0x0802548c

0801d45c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d45c:	b580      	push	{r7, lr}
 801d45e:	b08e      	sub	sp, #56	@ 0x38
 801d460:	af04      	add	r7, sp, #16
 801d462:	6078      	str	r0, [r7, #4]
 801d464:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d466:	4b95      	ldr	r3, [pc, #596]	@ (801d6bc <icmp_input+0x260>)
 801d468:	689b      	ldr	r3, [r3, #8]
 801d46a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d46e:	781b      	ldrb	r3, [r3, #0]
 801d470:	f003 030f 	and.w	r3, r3, #15
 801d474:	b2db      	uxtb	r3, r3
 801d476:	009b      	lsls	r3, r3, #2
 801d478:	b2db      	uxtb	r3, r3
 801d47a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801d47c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d47e:	2b13      	cmp	r3, #19
 801d480:	d805      	bhi.n	801d48e <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801d482:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d484:	4619      	mov	r1, r3
 801d486:	488e      	ldr	r0, [pc, #568]	@ (801d6c0 <icmp_input+0x264>)
 801d488:	f002 fd0c 	bl	801fea4 <iprintf>
    goto lenerr;
 801d48c:	e10a      	b.n	801d6a4 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	895b      	ldrh	r3, [r3, #10]
 801d492:	2b03      	cmp	r3, #3
 801d494:	d806      	bhi.n	801d4a4 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	891b      	ldrh	r3, [r3, #8]
 801d49a:	4619      	mov	r1, r3
 801d49c:	4889      	ldr	r0, [pc, #548]	@ (801d6c4 <icmp_input+0x268>)
 801d49e:	f002 fd01 	bl	801fea4 <iprintf>
    goto lenerr;
 801d4a2:	e0ff      	b.n	801d6a4 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	685b      	ldr	r3, [r3, #4]
 801d4a8:	781b      	ldrb	r3, [r3, #0]
 801d4aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	685b      	ldr	r3, [r3, #4]
 801d4b2:	785b      	ldrb	r3, [r3, #1]
 801d4b4:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d4b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	f000 80ea 	beq.w	801d696 <icmp_input+0x23a>
 801d4c2:	2b08      	cmp	r3, #8
 801d4c4:	f040 80de 	bne.w	801d684 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d4c8:	4b7f      	ldr	r3, [pc, #508]	@ (801d6c8 <icmp_input+0x26c>)
 801d4ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d4cc:	4b7b      	ldr	r3, [pc, #492]	@ (801d6bc <icmp_input+0x260>)
 801d4ce:	695b      	ldr	r3, [r3, #20]
 801d4d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d4d4:	2be0      	cmp	r3, #224	@ 0xe0
 801d4d6:	d103      	bne.n	801d4e0 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801d4d8:	487c      	ldr	r0, [pc, #496]	@ (801d6cc <icmp_input+0x270>)
 801d4da:	f002 fd53 	bl	801ff84 <puts>
        goto icmperr;
 801d4de:	e0e5      	b.n	801d6ac <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d4e0:	4b76      	ldr	r3, [pc, #472]	@ (801d6bc <icmp_input+0x260>)
 801d4e2:	695b      	ldr	r3, [r3, #20]
 801d4e4:	4a75      	ldr	r2, [pc, #468]	@ (801d6bc <icmp_input+0x260>)
 801d4e6:	6812      	ldr	r2, [r2, #0]
 801d4e8:	4611      	mov	r1, r2
 801d4ea:	4618      	mov	r0, r3
 801d4ec:	f000 fc6c 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801d4f0:	4603      	mov	r3, r0
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d003      	beq.n	801d4fe <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801d4f6:	4876      	ldr	r0, [pc, #472]	@ (801d6d0 <icmp_input+0x274>)
 801d4f8:	f002 fd44 	bl	801ff84 <puts>
        goto icmperr;
 801d4fc:	e0d6      	b.n	801d6ac <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801d4fe:	4875      	ldr	r0, [pc, #468]	@ (801d6d4 <icmp_input+0x278>)
 801d500:	f002 fd40 	bl	801ff84 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	891b      	ldrh	r3, [r3, #8]
 801d508:	2b07      	cmp	r3, #7
 801d50a:	d803      	bhi.n	801d514 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801d50c:	4872      	ldr	r0, [pc, #456]	@ (801d6d8 <icmp_input+0x27c>)
 801d50e:	f002 fd39 	bl	801ff84 <puts>
        goto lenerr;
 801d512:	e0c7      	b.n	801d6a4 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d514:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d516:	330e      	adds	r3, #14
 801d518:	4619      	mov	r1, r3
 801d51a:	6878      	ldr	r0, [r7, #4]
 801d51c:	f7f7 fab0 	bl	8014a80 <pbuf_add_header>
 801d520:	4603      	mov	r3, r0
 801d522:	2b00      	cmp	r3, #0
 801d524:	d057      	beq.n	801d5d6 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	891a      	ldrh	r2, [r3, #8]
 801d52a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d52c:	4413      	add	r3, r2
 801d52e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	891b      	ldrh	r3, [r3, #8]
 801d534:	8b7a      	ldrh	r2, [r7, #26]
 801d536:	429a      	cmp	r2, r3
 801d538:	d203      	bcs.n	801d542 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801d53a:	4868      	ldr	r0, [pc, #416]	@ (801d6dc <icmp_input+0x280>)
 801d53c:	f002 fd22 	bl	801ff84 <puts>
          goto icmperr;
 801d540:	e0b4      	b.n	801d6ac <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d542:	8b7b      	ldrh	r3, [r7, #26]
 801d544:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d548:	4619      	mov	r1, r3
 801d54a:	200e      	movs	r0, #14
 801d54c:	f7f7 f84a 	bl	80145e4 <pbuf_alloc>
 801d550:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d552:	697b      	ldr	r3, [r7, #20]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d103      	bne.n	801d560 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801d558:	4861      	ldr	r0, [pc, #388]	@ (801d6e0 <icmp_input+0x284>)
 801d55a:	f002 fd13 	bl	801ff84 <puts>
          goto icmperr;
 801d55e:	e0a5      	b.n	801d6ac <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d560:	697b      	ldr	r3, [r7, #20]
 801d562:	895b      	ldrh	r3, [r3, #10]
 801d564:	461a      	mov	r2, r3
 801d566:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d568:	3308      	adds	r3, #8
 801d56a:	429a      	cmp	r2, r3
 801d56c:	d206      	bcs.n	801d57c <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801d56e:	485d      	ldr	r0, [pc, #372]	@ (801d6e4 <icmp_input+0x288>)
 801d570:	f002 fc98 	bl	801fea4 <iprintf>
          pbuf_free(r);
 801d574:	6978      	ldr	r0, [r7, #20]
 801d576:	f7f7 fb19 	bl	8014bac <pbuf_free>
          goto icmperr;
 801d57a:	e097      	b.n	801d6ac <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d57c:	697b      	ldr	r3, [r7, #20]
 801d57e:	685b      	ldr	r3, [r3, #4]
 801d580:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d582:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d584:	4618      	mov	r0, r3
 801d586:	f002 fe62 	bl	802024e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d58a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d58c:	4619      	mov	r1, r3
 801d58e:	6978      	ldr	r0, [r7, #20]
 801d590:	f7f7 fa86 	bl	8014aa0 <pbuf_remove_header>
 801d594:	4603      	mov	r3, r0
 801d596:	2b00      	cmp	r3, #0
 801d598:	d009      	beq.n	801d5ae <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d59a:	4b53      	ldr	r3, [pc, #332]	@ (801d6e8 <icmp_input+0x28c>)
 801d59c:	22b6      	movs	r2, #182	@ 0xb6
 801d59e:	4953      	ldr	r1, [pc, #332]	@ (801d6ec <icmp_input+0x290>)
 801d5a0:	4853      	ldr	r0, [pc, #332]	@ (801d6f0 <icmp_input+0x294>)
 801d5a2:	f002 fc7f 	bl	801fea4 <iprintf>
          pbuf_free(r);
 801d5a6:	6978      	ldr	r0, [r7, #20]
 801d5a8:	f7f7 fb00 	bl	8014bac <pbuf_free>
          goto icmperr;
 801d5ac:	e07e      	b.n	801d6ac <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d5ae:	6879      	ldr	r1, [r7, #4]
 801d5b0:	6978      	ldr	r0, [r7, #20]
 801d5b2:	f7f7 fc2f 	bl	8014e14 <pbuf_copy>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d006      	beq.n	801d5ca <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801d5bc:	484d      	ldr	r0, [pc, #308]	@ (801d6f4 <icmp_input+0x298>)
 801d5be:	f002 fc71 	bl	801fea4 <iprintf>
          pbuf_free(r);
 801d5c2:	6978      	ldr	r0, [r7, #20]
 801d5c4:	f7f7 faf2 	bl	8014bac <pbuf_free>
          goto icmperr;
 801d5c8:	e070      	b.n	801d6ac <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 801d5ca:	6878      	ldr	r0, [r7, #4]
 801d5cc:	f7f7 faee 	bl	8014bac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d5d0:	697b      	ldr	r3, [r7, #20]
 801d5d2:	607b      	str	r3, [r7, #4]
 801d5d4:	e00f      	b.n	801d5f6 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d5d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d5d8:	330e      	adds	r3, #14
 801d5da:	4619      	mov	r1, r3
 801d5dc:	6878      	ldr	r0, [r7, #4]
 801d5de:	f7f7 fa5f 	bl	8014aa0 <pbuf_remove_header>
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d006      	beq.n	801d5f6 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d5e8:	4b3f      	ldr	r3, [pc, #252]	@ (801d6e8 <icmp_input+0x28c>)
 801d5ea:	22c7      	movs	r2, #199	@ 0xc7
 801d5ec:	4942      	ldr	r1, [pc, #264]	@ (801d6f8 <icmp_input+0x29c>)
 801d5ee:	4840      	ldr	r0, [pc, #256]	@ (801d6f0 <icmp_input+0x294>)
 801d5f0:	f002 fc58 	bl	801fea4 <iprintf>
          goto icmperr;
 801d5f4:	e05a      	b.n	801d6ac <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	685b      	ldr	r3, [r3, #4]
 801d5fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d5fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d5fe:	4619      	mov	r1, r3
 801d600:	6878      	ldr	r0, [r7, #4]
 801d602:	f7f7 fa3d 	bl	8014a80 <pbuf_add_header>
 801d606:	4603      	mov	r3, r0
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d003      	beq.n	801d614 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801d60c:	483b      	ldr	r0, [pc, #236]	@ (801d6fc <icmp_input+0x2a0>)
 801d60e:	f002 fc49 	bl	801fea4 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d612:	e042      	b.n	801d69a <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	685b      	ldr	r3, [r3, #4]
 801d618:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d61a:	69fb      	ldr	r3, [r7, #28]
 801d61c:	681a      	ldr	r2, [r3, #0]
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d622:	4b26      	ldr	r3, [pc, #152]	@ (801d6bc <icmp_input+0x260>)
 801d624:	691a      	ldr	r2, [r3, #16]
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d62a:	693b      	ldr	r3, [r7, #16]
 801d62c:	2200      	movs	r2, #0
 801d62e:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801d630:	693b      	ldr	r3, [r7, #16]
 801d632:	2200      	movs	r2, #0
 801d634:	709a      	strb	r2, [r3, #2]
 801d636:	2200      	movs	r2, #0
 801d638:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d63a:	68fb      	ldr	r3, [r7, #12]
 801d63c:	22ff      	movs	r2, #255	@ 0xff
 801d63e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	2200      	movs	r2, #0
 801d644:	729a      	strb	r2, [r3, #10]
 801d646:	2200      	movs	r2, #0
 801d648:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d64a:	683b      	ldr	r3, [r7, #0]
 801d64c:	9302      	str	r3, [sp, #8]
 801d64e:	2301      	movs	r3, #1
 801d650:	9301      	str	r3, [sp, #4]
 801d652:	2300      	movs	r3, #0
 801d654:	9300      	str	r3, [sp, #0]
 801d656:	23ff      	movs	r3, #255	@ 0xff
 801d658:	2200      	movs	r2, #0
 801d65a:	69f9      	ldr	r1, [r7, #28]
 801d65c:	6878      	ldr	r0, [r7, #4]
 801d65e:	f000 fadb 	bl	801dc18 <ip4_output_if>
 801d662:	4603      	mov	r3, r0
 801d664:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801d666:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d015      	beq.n	801d69a <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801d66e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d672:	4618      	mov	r0, r3
 801d674:	f7f5 fb60 	bl	8012d38 <lwip_strerr>
 801d678:	4603      	mov	r3, r0
 801d67a:	4619      	mov	r1, r3
 801d67c:	4820      	ldr	r0, [pc, #128]	@ (801d700 <icmp_input+0x2a4>)
 801d67e:	f002 fc11 	bl	801fea4 <iprintf>
      break;
 801d682:	e00a      	b.n	801d69a <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801d684:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d688:	f897 2020 	ldrb.w	r2, [r7, #32]
 801d68c:	4619      	mov	r1, r3
 801d68e:	481d      	ldr	r0, [pc, #116]	@ (801d704 <icmp_input+0x2a8>)
 801d690:	f002 fc08 	bl	801fea4 <iprintf>
 801d694:	e002      	b.n	801d69c <icmp_input+0x240>
      break;
 801d696:	bf00      	nop
 801d698:	e000      	b.n	801d69c <icmp_input+0x240>
      break;
 801d69a:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d69c:	6878      	ldr	r0, [r7, #4]
 801d69e:	f7f7 fa85 	bl	8014bac <pbuf_free>
  return;
 801d6a2:	e007      	b.n	801d6b4 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 801d6a4:	6878      	ldr	r0, [r7, #4]
 801d6a6:	f7f7 fa81 	bl	8014bac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d6aa:	e003      	b.n	801d6b4 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d6ac:	6878      	ldr	r0, [r7, #4]
 801d6ae:	f7f7 fa7d 	bl	8014bac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d6b2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d6b4:	3728      	adds	r7, #40	@ 0x28
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	bd80      	pop	{r7, pc}
 801d6ba:	bf00      	nop
 801d6bc:	2001f65c 	.word	0x2001f65c
 801d6c0:	08024844 	.word	0x08024844
 801d6c4:	08024878 	.word	0x08024878
 801d6c8:	2001f670 	.word	0x2001f670
 801d6cc:	080248a8 	.word	0x080248a8
 801d6d0:	080248d4 	.word	0x080248d4
 801d6d4:	08024900 	.word	0x08024900
 801d6d8:	08024914 	.word	0x08024914
 801d6dc:	08024938 	.word	0x08024938
 801d6e0:	08024974 	.word	0x08024974
 801d6e4:	0802499c 	.word	0x0802499c
 801d6e8:	080249c4 	.word	0x080249c4
 801d6ec:	080249fc 	.word	0x080249fc
 801d6f0:	08024a34 	.word	0x08024a34
 801d6f4:	08024a5c 	.word	0x08024a5c
 801d6f8:	08024a84 	.word	0x08024a84
 801d6fc:	08024ab8 	.word	0x08024ab8
 801d700:	08024adc 	.word	0x08024adc
 801d704:	08024b0c 	.word	0x08024b0c

0801d708 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d708:	b580      	push	{r7, lr}
 801d70a:	b082      	sub	sp, #8
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	6078      	str	r0, [r7, #4]
 801d710:	460b      	mov	r3, r1
 801d712:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d714:	78fb      	ldrb	r3, [r7, #3]
 801d716:	461a      	mov	r2, r3
 801d718:	2103      	movs	r1, #3
 801d71a:	6878      	ldr	r0, [r7, #4]
 801d71c:	f000 f814 	bl	801d748 <icmp_send_response>
}
 801d720:	bf00      	nop
 801d722:	3708      	adds	r7, #8
 801d724:	46bd      	mov	sp, r7
 801d726:	bd80      	pop	{r7, pc}

0801d728 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d728:	b580      	push	{r7, lr}
 801d72a:	b082      	sub	sp, #8
 801d72c:	af00      	add	r7, sp, #0
 801d72e:	6078      	str	r0, [r7, #4]
 801d730:	460b      	mov	r3, r1
 801d732:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d734:	78fb      	ldrb	r3, [r7, #3]
 801d736:	461a      	mov	r2, r3
 801d738:	210b      	movs	r1, #11
 801d73a:	6878      	ldr	r0, [r7, #4]
 801d73c:	f000 f804 	bl	801d748 <icmp_send_response>
}
 801d740:	bf00      	nop
 801d742:	3708      	adds	r7, #8
 801d744:	46bd      	mov	sp, r7
 801d746:	bd80      	pop	{r7, pc}

0801d748 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d748:	b580      	push	{r7, lr}
 801d74a:	b08c      	sub	sp, #48	@ 0x30
 801d74c:	af04      	add	r7, sp, #16
 801d74e:	6078      	str	r0, [r7, #4]
 801d750:	460b      	mov	r3, r1
 801d752:	70fb      	strb	r3, [r7, #3]
 801d754:	4613      	mov	r3, r2
 801d756:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d758:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d75c:	2124      	movs	r1, #36	@ 0x24
 801d75e:	2022      	movs	r0, #34	@ 0x22
 801d760:	f7f6 ff40 	bl	80145e4 <pbuf_alloc>
 801d764:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d766:	69fb      	ldr	r3, [r7, #28]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d103      	bne.n	801d774 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801d76c:	4844      	ldr	r0, [pc, #272]	@ (801d880 <icmp_send_response+0x138>)
 801d76e:	f002 fc09 	bl	801ff84 <puts>
 801d772:	e082      	b.n	801d87a <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d774:	69fb      	ldr	r3, [r7, #28]
 801d776:	895b      	ldrh	r3, [r3, #10]
 801d778:	2b23      	cmp	r3, #35	@ 0x23
 801d77a:	d806      	bhi.n	801d78a <icmp_send_response+0x42>
 801d77c:	4b41      	ldr	r3, [pc, #260]	@ (801d884 <icmp_send_response+0x13c>)
 801d77e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801d782:	4941      	ldr	r1, [pc, #260]	@ (801d888 <icmp_send_response+0x140>)
 801d784:	4841      	ldr	r0, [pc, #260]	@ (801d88c <icmp_send_response+0x144>)
 801d786:	f002 fb8d 	bl	801fea4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	685b      	ldr	r3, [r3, #4]
 801d78e:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801d790:	483f      	ldr	r0, [pc, #252]	@ (801d890 <icmp_send_response+0x148>)
 801d792:	f002 fb87 	bl	801fea4 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801d796:	69bb      	ldr	r3, [r7, #24]
 801d798:	68db      	ldr	r3, [r3, #12]
 801d79a:	b2db      	uxtb	r3, r3
 801d79c:	4619      	mov	r1, r3
 801d79e:	69bb      	ldr	r3, [r7, #24]
 801d7a0:	68db      	ldr	r3, [r3, #12]
 801d7a2:	0a1b      	lsrs	r3, r3, #8
 801d7a4:	b2db      	uxtb	r3, r3
 801d7a6:	461a      	mov	r2, r3
 801d7a8:	69bb      	ldr	r3, [r7, #24]
 801d7aa:	68db      	ldr	r3, [r3, #12]
 801d7ac:	0c1b      	lsrs	r3, r3, #16
 801d7ae:	b2db      	uxtb	r3, r3
 801d7b0:	4618      	mov	r0, r3
 801d7b2:	69bb      	ldr	r3, [r7, #24]
 801d7b4:	68db      	ldr	r3, [r3, #12]
 801d7b6:	0e1b      	lsrs	r3, r3, #24
 801d7b8:	b2db      	uxtb	r3, r3
 801d7ba:	9300      	str	r3, [sp, #0]
 801d7bc:	4603      	mov	r3, r0
 801d7be:	4835      	ldr	r0, [pc, #212]	@ (801d894 <icmp_send_response+0x14c>)
 801d7c0:	f002 fb70 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801d7c4:	4834      	ldr	r0, [pc, #208]	@ (801d898 <icmp_send_response+0x150>)
 801d7c6:	f002 fb6d 	bl	801fea4 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801d7ca:	69bb      	ldr	r3, [r7, #24]
 801d7cc:	691b      	ldr	r3, [r3, #16]
 801d7ce:	b2db      	uxtb	r3, r3
 801d7d0:	4619      	mov	r1, r3
 801d7d2:	69bb      	ldr	r3, [r7, #24]
 801d7d4:	691b      	ldr	r3, [r3, #16]
 801d7d6:	0a1b      	lsrs	r3, r3, #8
 801d7d8:	b2db      	uxtb	r3, r3
 801d7da:	461a      	mov	r2, r3
 801d7dc:	69bb      	ldr	r3, [r7, #24]
 801d7de:	691b      	ldr	r3, [r3, #16]
 801d7e0:	0c1b      	lsrs	r3, r3, #16
 801d7e2:	b2db      	uxtb	r3, r3
 801d7e4:	4618      	mov	r0, r3
 801d7e6:	69bb      	ldr	r3, [r7, #24]
 801d7e8:	691b      	ldr	r3, [r3, #16]
 801d7ea:	0e1b      	lsrs	r3, r3, #24
 801d7ec:	b2db      	uxtb	r3, r3
 801d7ee:	9300      	str	r3, [sp, #0]
 801d7f0:	4603      	mov	r3, r0
 801d7f2:	4828      	ldr	r0, [pc, #160]	@ (801d894 <icmp_send_response+0x14c>)
 801d7f4:	f002 fb56 	bl	801fea4 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801d7f8:	200a      	movs	r0, #10
 801d7fa:	f002 fb65 	bl	801fec8 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d7fe:	69fb      	ldr	r3, [r7, #28]
 801d800:	685b      	ldr	r3, [r3, #4]
 801d802:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d804:	697b      	ldr	r3, [r7, #20]
 801d806:	78fa      	ldrb	r2, [r7, #3]
 801d808:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d80a:	697b      	ldr	r3, [r7, #20]
 801d80c:	78ba      	ldrb	r2, [r7, #2]
 801d80e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d810:	697b      	ldr	r3, [r7, #20]
 801d812:	2200      	movs	r2, #0
 801d814:	711a      	strb	r2, [r3, #4]
 801d816:	2200      	movs	r2, #0
 801d818:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d81a:	697b      	ldr	r3, [r7, #20]
 801d81c:	2200      	movs	r2, #0
 801d81e:	719a      	strb	r2, [r3, #6]
 801d820:	2200      	movs	r2, #0
 801d822:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d824:	69fb      	ldr	r3, [r7, #28]
 801d826:	685b      	ldr	r3, [r3, #4]
 801d828:	f103 0008 	add.w	r0, r3, #8
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	685b      	ldr	r3, [r3, #4]
 801d830:	221c      	movs	r2, #28
 801d832:	4619      	mov	r1, r3
 801d834:	f002 fd0b 	bl	802024e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d838:	69bb      	ldr	r3, [r7, #24]
 801d83a:	68db      	ldr	r3, [r3, #12]
 801d83c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d83e:	f107 030c 	add.w	r3, r7, #12
 801d842:	4618      	mov	r0, r3
 801d844:	f000 f82a 	bl	801d89c <ip4_route>
 801d848:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d84a:	693b      	ldr	r3, [r7, #16]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d011      	beq.n	801d874 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d850:	697b      	ldr	r3, [r7, #20]
 801d852:	2200      	movs	r2, #0
 801d854:	709a      	strb	r2, [r3, #2]
 801d856:	2200      	movs	r2, #0
 801d858:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d85a:	f107 020c 	add.w	r2, r7, #12
 801d85e:	693b      	ldr	r3, [r7, #16]
 801d860:	9302      	str	r3, [sp, #8]
 801d862:	2301      	movs	r3, #1
 801d864:	9301      	str	r3, [sp, #4]
 801d866:	2300      	movs	r3, #0
 801d868:	9300      	str	r3, [sp, #0]
 801d86a:	23ff      	movs	r3, #255	@ 0xff
 801d86c:	2100      	movs	r1, #0
 801d86e:	69f8      	ldr	r0, [r7, #28]
 801d870:	f000 f9d2 	bl	801dc18 <ip4_output_if>
  }
  pbuf_free(q);
 801d874:	69f8      	ldr	r0, [r7, #28]
 801d876:	f7f7 f999 	bl	8014bac <pbuf_free>
}
 801d87a:	3720      	adds	r7, #32
 801d87c:	46bd      	mov	sp, r7
 801d87e:	bd80      	pop	{r7, pc}
 801d880:	08024b40 	.word	0x08024b40
 801d884:	080249c4 	.word	0x080249c4
 801d888:	08024b80 	.word	0x08024b80
 801d88c:	08024a34 	.word	0x08024a34
 801d890:	08024bac 	.word	0x08024bac
 801d894:	08024bc8 	.word	0x08024bc8
 801d898:	08024bd8 	.word	0x08024bd8

0801d89c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d89c:	b480      	push	{r7}
 801d89e:	b085      	sub	sp, #20
 801d8a0:	af00      	add	r7, sp, #0
 801d8a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d8a4:	4b33      	ldr	r3, [pc, #204]	@ (801d974 <ip4_route+0xd8>)
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	60fb      	str	r3, [r7, #12]
 801d8aa:	e036      	b.n	801d91a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d8b2:	f003 0301 	and.w	r3, r3, #1
 801d8b6:	b2db      	uxtb	r3, r3
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d02b      	beq.n	801d914 <ip4_route+0x78>
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d8c2:	089b      	lsrs	r3, r3, #2
 801d8c4:	f003 0301 	and.w	r3, r3, #1
 801d8c8:	b2db      	uxtb	r3, r3
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d022      	beq.n	801d914 <ip4_route+0x78>
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	3304      	adds	r3, #4
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d01d      	beq.n	801d914 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	681a      	ldr	r2, [r3, #0]
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	3304      	adds	r3, #4
 801d8e0:	681b      	ldr	r3, [r3, #0]
 801d8e2:	405a      	eors	r2, r3
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	3308      	adds	r3, #8
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	4013      	ands	r3, r2
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d101      	bne.n	801d8f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	e038      	b.n	801d966 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d8fa:	f003 0302 	and.w	r3, r3, #2
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d108      	bne.n	801d914 <ip4_route+0x78>
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	681a      	ldr	r2, [r3, #0]
 801d906:	68fb      	ldr	r3, [r7, #12]
 801d908:	330c      	adds	r3, #12
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	429a      	cmp	r2, r3
 801d90e:	d101      	bne.n	801d914 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	e028      	b.n	801d966 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	60fb      	str	r3, [r7, #12]
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d1c5      	bne.n	801d8ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d920:	4b15      	ldr	r3, [pc, #84]	@ (801d978 <ip4_route+0xdc>)
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	2b00      	cmp	r3, #0
 801d926:	d01a      	beq.n	801d95e <ip4_route+0xc2>
 801d928:	4b13      	ldr	r3, [pc, #76]	@ (801d978 <ip4_route+0xdc>)
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d930:	f003 0301 	and.w	r3, r3, #1
 801d934:	2b00      	cmp	r3, #0
 801d936:	d012      	beq.n	801d95e <ip4_route+0xc2>
 801d938:	4b0f      	ldr	r3, [pc, #60]	@ (801d978 <ip4_route+0xdc>)
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d940:	f003 0304 	and.w	r3, r3, #4
 801d944:	2b00      	cmp	r3, #0
 801d946:	d00a      	beq.n	801d95e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d948:	4b0b      	ldr	r3, [pc, #44]	@ (801d978 <ip4_route+0xdc>)
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	3304      	adds	r3, #4
 801d94e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d950:	2b00      	cmp	r3, #0
 801d952:	d004      	beq.n	801d95e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	b2db      	uxtb	r3, r3
 801d95a:	2b7f      	cmp	r3, #127	@ 0x7f
 801d95c:	d101      	bne.n	801d962 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d95e:	2300      	movs	r3, #0
 801d960:	e001      	b.n	801d966 <ip4_route+0xca>
  }

  return netif_default;
 801d962:	4b05      	ldr	r3, [pc, #20]	@ (801d978 <ip4_route+0xdc>)
 801d964:	681b      	ldr	r3, [r3, #0]
}
 801d966:	4618      	mov	r0, r3
 801d968:	3714      	adds	r7, #20
 801d96a:	46bd      	mov	sp, r7
 801d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d970:	4770      	bx	lr
 801d972:	bf00      	nop
 801d974:	20022790 	.word	0x20022790
 801d978:	20022794 	.word	0x20022794

0801d97c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d97c:	b580      	push	{r7, lr}
 801d97e:	b082      	sub	sp, #8
 801d980:	af00      	add	r7, sp, #0
 801d982:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d98a:	f003 0301 	and.w	r3, r3, #1
 801d98e:	b2db      	uxtb	r3, r3
 801d990:	2b00      	cmp	r3, #0
 801d992:	d016      	beq.n	801d9c2 <ip4_input_accept+0x46>
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	3304      	adds	r3, #4
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d011      	beq.n	801d9c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d99e:	4b0b      	ldr	r3, [pc, #44]	@ (801d9cc <ip4_input_accept+0x50>)
 801d9a0:	695a      	ldr	r2, [r3, #20]
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	3304      	adds	r3, #4
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	d008      	beq.n	801d9be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d9ac:	4b07      	ldr	r3, [pc, #28]	@ (801d9cc <ip4_input_accept+0x50>)
 801d9ae:	695b      	ldr	r3, [r3, #20]
 801d9b0:	6879      	ldr	r1, [r7, #4]
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	f000 fa08 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801d9b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d001      	beq.n	801d9c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d9be:	2301      	movs	r3, #1
 801d9c0:	e000      	b.n	801d9c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d9c2:	2300      	movs	r3, #0
}
 801d9c4:	4618      	mov	r0, r3
 801d9c6:	3708      	adds	r7, #8
 801d9c8:	46bd      	mov	sp, r7
 801d9ca:	bd80      	pop	{r7, pc}
 801d9cc:	2001f65c 	.word	0x2001f65c

0801d9d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d9d0:	b580      	push	{r7, lr}
 801d9d2:	b086      	sub	sp, #24
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
 801d9d8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	685b      	ldr	r3, [r3, #4]
 801d9de:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801d9e0:	693b      	ldr	r3, [r7, #16]
 801d9e2:	781b      	ldrb	r3, [r3, #0]
 801d9e4:	091b      	lsrs	r3, r3, #4
 801d9e6:	b2db      	uxtb	r3, r3
 801d9e8:	2b04      	cmp	r3, #4
 801d9ea:	d004      	beq.n	801d9f6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d9ec:	6878      	ldr	r0, [r7, #4]
 801d9ee:	f7f7 f8dd 	bl	8014bac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	e107      	b.n	801dc06 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d9f6:	693b      	ldr	r3, [r7, #16]
 801d9f8:	781b      	ldrb	r3, [r3, #0]
 801d9fa:	f003 030f 	and.w	r3, r3, #15
 801d9fe:	b2db      	uxtb	r3, r3
 801da00:	009b      	lsls	r3, r3, #2
 801da02:	b2db      	uxtb	r3, r3
 801da04:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801da06:	693b      	ldr	r3, [r7, #16]
 801da08:	885b      	ldrh	r3, [r3, #2]
 801da0a:	b29b      	uxth	r3, r3
 801da0c:	4618      	mov	r0, r3
 801da0e:	f7f5 fbe9 	bl	80131e4 <lwip_htons>
 801da12:	4603      	mov	r3, r0
 801da14:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	891b      	ldrh	r3, [r3, #8]
 801da1a:	89ba      	ldrh	r2, [r7, #12]
 801da1c:	429a      	cmp	r2, r3
 801da1e:	d204      	bcs.n	801da2a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801da20:	89bb      	ldrh	r3, [r7, #12]
 801da22:	4619      	mov	r1, r3
 801da24:	6878      	ldr	r0, [r7, #4]
 801da26:	f7f6 ff3b 	bl	80148a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	895b      	ldrh	r3, [r3, #10]
 801da2e:	89fa      	ldrh	r2, [r7, #14]
 801da30:	429a      	cmp	r2, r3
 801da32:	d807      	bhi.n	801da44 <ip4_input+0x74>
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	891b      	ldrh	r3, [r3, #8]
 801da38:	89ba      	ldrh	r2, [r7, #12]
 801da3a:	429a      	cmp	r2, r3
 801da3c:	d802      	bhi.n	801da44 <ip4_input+0x74>
 801da3e:	89fb      	ldrh	r3, [r7, #14]
 801da40:	2b13      	cmp	r3, #19
 801da42:	d804      	bhi.n	801da4e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801da44:	6878      	ldr	r0, [r7, #4]
 801da46:	f7f7 f8b1 	bl	8014bac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801da4a:	2300      	movs	r3, #0
 801da4c:	e0db      	b.n	801dc06 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801da4e:	693b      	ldr	r3, [r7, #16]
 801da50:	691b      	ldr	r3, [r3, #16]
 801da52:	4a6f      	ldr	r2, [pc, #444]	@ (801dc10 <ip4_input+0x240>)
 801da54:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801da56:	693b      	ldr	r3, [r7, #16]
 801da58:	68db      	ldr	r3, [r3, #12]
 801da5a:	4a6d      	ldr	r2, [pc, #436]	@ (801dc10 <ip4_input+0x240>)
 801da5c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801da5e:	4b6c      	ldr	r3, [pc, #432]	@ (801dc10 <ip4_input+0x240>)
 801da60:	695b      	ldr	r3, [r3, #20]
 801da62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801da66:	2be0      	cmp	r3, #224	@ 0xe0
 801da68:	d112      	bne.n	801da90 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801da6a:	683b      	ldr	r3, [r7, #0]
 801da6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801da70:	f003 0301 	and.w	r3, r3, #1
 801da74:	b2db      	uxtb	r3, r3
 801da76:	2b00      	cmp	r3, #0
 801da78:	d007      	beq.n	801da8a <ip4_input+0xba>
 801da7a:	683b      	ldr	r3, [r7, #0]
 801da7c:	3304      	adds	r3, #4
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	2b00      	cmp	r3, #0
 801da82:	d002      	beq.n	801da8a <ip4_input+0xba>
      netif = inp;
 801da84:	683b      	ldr	r3, [r7, #0]
 801da86:	617b      	str	r3, [r7, #20]
 801da88:	e02a      	b.n	801dae0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801da8a:	2300      	movs	r3, #0
 801da8c:	617b      	str	r3, [r7, #20]
 801da8e:	e027      	b.n	801dae0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801da90:	6838      	ldr	r0, [r7, #0]
 801da92:	f7ff ff73 	bl	801d97c <ip4_input_accept>
 801da96:	4603      	mov	r3, r0
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d002      	beq.n	801daa2 <ip4_input+0xd2>
      netif = inp;
 801da9c:	683b      	ldr	r3, [r7, #0]
 801da9e:	617b      	str	r3, [r7, #20]
 801daa0:	e01e      	b.n	801dae0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801daa2:	2300      	movs	r3, #0
 801daa4:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801daa6:	4b5a      	ldr	r3, [pc, #360]	@ (801dc10 <ip4_input+0x240>)
 801daa8:	695b      	ldr	r3, [r3, #20]
 801daaa:	b2db      	uxtb	r3, r3
 801daac:	2b7f      	cmp	r3, #127	@ 0x7f
 801daae:	d017      	beq.n	801dae0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801dab0:	4b58      	ldr	r3, [pc, #352]	@ (801dc14 <ip4_input+0x244>)
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	617b      	str	r3, [r7, #20]
 801dab6:	e00e      	b.n	801dad6 <ip4_input+0x106>
          if (netif == inp) {
 801dab8:	697a      	ldr	r2, [r7, #20]
 801daba:	683b      	ldr	r3, [r7, #0]
 801dabc:	429a      	cmp	r2, r3
 801dabe:	d006      	beq.n	801dace <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801dac0:	6978      	ldr	r0, [r7, #20]
 801dac2:	f7ff ff5b 	bl	801d97c <ip4_input_accept>
 801dac6:	4603      	mov	r3, r0
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d108      	bne.n	801dade <ip4_input+0x10e>
 801dacc:	e000      	b.n	801dad0 <ip4_input+0x100>
            continue;
 801dace:	bf00      	nop
        NETIF_FOREACH(netif) {
 801dad0:	697b      	ldr	r3, [r7, #20]
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	617b      	str	r3, [r7, #20]
 801dad6:	697b      	ldr	r3, [r7, #20]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d1ed      	bne.n	801dab8 <ip4_input+0xe8>
 801dadc:	e000      	b.n	801dae0 <ip4_input+0x110>
            break;
 801dade:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dae0:	4b4b      	ldr	r3, [pc, #300]	@ (801dc10 <ip4_input+0x240>)
 801dae2:	691b      	ldr	r3, [r3, #16]
 801dae4:	6839      	ldr	r1, [r7, #0]
 801dae6:	4618      	mov	r0, r3
 801dae8:	f000 f96e 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801daec:	4603      	mov	r3, r0
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d105      	bne.n	801dafe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801daf2:	4b47      	ldr	r3, [pc, #284]	@ (801dc10 <ip4_input+0x240>)
 801daf4:	691b      	ldr	r3, [r3, #16]
 801daf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dafa:	2be0      	cmp	r3, #224	@ 0xe0
 801dafc:	d104      	bne.n	801db08 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801dafe:	6878      	ldr	r0, [r7, #4]
 801db00:	f7f7 f854 	bl	8014bac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801db04:	2300      	movs	r3, #0
 801db06:	e07e      	b.n	801dc06 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801db08:	697b      	ldr	r3, [r7, #20]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d104      	bne.n	801db18 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801db0e:	6878      	ldr	r0, [r7, #4]
 801db10:	f7f7 f84c 	bl	8014bac <pbuf_free>
    return ERR_OK;
 801db14:	2300      	movs	r3, #0
 801db16:	e076      	b.n	801dc06 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801db18:	693b      	ldr	r3, [r7, #16]
 801db1a:	88db      	ldrh	r3, [r3, #6]
 801db1c:	b29b      	uxth	r3, r3
 801db1e:	461a      	mov	r2, r3
 801db20:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801db24:	4013      	ands	r3, r2
 801db26:	2b00      	cmp	r3, #0
 801db28:	d00b      	beq.n	801db42 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801db2a:	6878      	ldr	r0, [r7, #4]
 801db2c:	f000 fc92 	bl	801e454 <ip4_reass>
 801db30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d101      	bne.n	801db3c <ip4_input+0x16c>
      return ERR_OK;
 801db38:	2300      	movs	r3, #0
 801db3a:	e064      	b.n	801dc06 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	685b      	ldr	r3, [r3, #4]
 801db40:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801db42:	4a33      	ldr	r2, [pc, #204]	@ (801dc10 <ip4_input+0x240>)
 801db44:	697b      	ldr	r3, [r7, #20]
 801db46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801db48:	4a31      	ldr	r2, [pc, #196]	@ (801dc10 <ip4_input+0x240>)
 801db4a:	683b      	ldr	r3, [r7, #0]
 801db4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801db4e:	4a30      	ldr	r2, [pc, #192]	@ (801dc10 <ip4_input+0x240>)
 801db50:	693b      	ldr	r3, [r7, #16]
 801db52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801db54:	693b      	ldr	r3, [r7, #16]
 801db56:	781b      	ldrb	r3, [r3, #0]
 801db58:	f003 030f 	and.w	r3, r3, #15
 801db5c:	b2db      	uxtb	r3, r3
 801db5e:	009b      	lsls	r3, r3, #2
 801db60:	b2db      	uxtb	r3, r3
 801db62:	461a      	mov	r2, r3
 801db64:	4b2a      	ldr	r3, [pc, #168]	@ (801dc10 <ip4_input+0x240>)
 801db66:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801db68:	89fb      	ldrh	r3, [r7, #14]
 801db6a:	4619      	mov	r1, r3
 801db6c:	6878      	ldr	r0, [r7, #4]
 801db6e:	f7f6 ff97 	bl	8014aa0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801db72:	693b      	ldr	r3, [r7, #16]
 801db74:	7a5b      	ldrb	r3, [r3, #9]
 801db76:	2b11      	cmp	r3, #17
 801db78:	d006      	beq.n	801db88 <ip4_input+0x1b8>
 801db7a:	2b11      	cmp	r3, #17
 801db7c:	dc13      	bgt.n	801dba6 <ip4_input+0x1d6>
 801db7e:	2b01      	cmp	r3, #1
 801db80:	d00c      	beq.n	801db9c <ip4_input+0x1cc>
 801db82:	2b06      	cmp	r3, #6
 801db84:	d005      	beq.n	801db92 <ip4_input+0x1c2>
 801db86:	e00e      	b.n	801dba6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801db88:	6839      	ldr	r1, [r7, #0]
 801db8a:	6878      	ldr	r0, [r7, #4]
 801db8c:	f7fd fe24 	bl	801b7d8 <udp_input>
        break;
 801db90:	e026      	b.n	801dbe0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801db92:	6839      	ldr	r1, [r7, #0]
 801db94:	6878      	ldr	r0, [r7, #4]
 801db96:	f7f9 f975 	bl	8016e84 <tcp_input>
        break;
 801db9a:	e021      	b.n	801dbe0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801db9c:	6839      	ldr	r1, [r7, #0]
 801db9e:	6878      	ldr	r0, [r7, #4]
 801dba0:	f7ff fc5c 	bl	801d45c <icmp_input>
        break;
 801dba4:	e01c      	b.n	801dbe0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dba6:	4b1a      	ldr	r3, [pc, #104]	@ (801dc10 <ip4_input+0x240>)
 801dba8:	695b      	ldr	r3, [r3, #20]
 801dbaa:	6979      	ldr	r1, [r7, #20]
 801dbac:	4618      	mov	r0, r3
 801dbae:	f000 f90b 	bl	801ddc8 <ip4_addr_isbroadcast_u32>
 801dbb2:	4603      	mov	r3, r0
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d10f      	bne.n	801dbd8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dbb8:	4b15      	ldr	r3, [pc, #84]	@ (801dc10 <ip4_input+0x240>)
 801dbba:	695b      	ldr	r3, [r3, #20]
 801dbbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801dbc0:	2be0      	cmp	r3, #224	@ 0xe0
 801dbc2:	d009      	beq.n	801dbd8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801dbc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801dbc8:	4619      	mov	r1, r3
 801dbca:	6878      	ldr	r0, [r7, #4]
 801dbcc:	f7f6 ffdb 	bl	8014b86 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801dbd0:	2102      	movs	r1, #2
 801dbd2:	6878      	ldr	r0, [r7, #4]
 801dbd4:	f7ff fd98 	bl	801d708 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801dbd8:	6878      	ldr	r0, [r7, #4]
 801dbda:	f7f6 ffe7 	bl	8014bac <pbuf_free>
        break;
 801dbde:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801dbe0:	4b0b      	ldr	r3, [pc, #44]	@ (801dc10 <ip4_input+0x240>)
 801dbe2:	2200      	movs	r2, #0
 801dbe4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801dbe6:	4b0a      	ldr	r3, [pc, #40]	@ (801dc10 <ip4_input+0x240>)
 801dbe8:	2200      	movs	r2, #0
 801dbea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801dbec:	4b08      	ldr	r3, [pc, #32]	@ (801dc10 <ip4_input+0x240>)
 801dbee:	2200      	movs	r2, #0
 801dbf0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801dbf2:	4b07      	ldr	r3, [pc, #28]	@ (801dc10 <ip4_input+0x240>)
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801dbf8:	4b05      	ldr	r3, [pc, #20]	@ (801dc10 <ip4_input+0x240>)
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801dbfe:	4b04      	ldr	r3, [pc, #16]	@ (801dc10 <ip4_input+0x240>)
 801dc00:	2200      	movs	r2, #0
 801dc02:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801dc04:	2300      	movs	r3, #0
}
 801dc06:	4618      	mov	r0, r3
 801dc08:	3718      	adds	r7, #24
 801dc0a:	46bd      	mov	sp, r7
 801dc0c:	bd80      	pop	{r7, pc}
 801dc0e:	bf00      	nop
 801dc10:	2001f65c 	.word	0x2001f65c
 801dc14:	20022790 	.word	0x20022790

0801dc18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801dc18:	b580      	push	{r7, lr}
 801dc1a:	b08a      	sub	sp, #40	@ 0x28
 801dc1c:	af04      	add	r7, sp, #16
 801dc1e:	60f8      	str	r0, [r7, #12]
 801dc20:	60b9      	str	r1, [r7, #8]
 801dc22:	607a      	str	r2, [r7, #4]
 801dc24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801dc26:	68bb      	ldr	r3, [r7, #8]
 801dc28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d009      	beq.n	801dc44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801dc30:	68bb      	ldr	r3, [r7, #8]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d003      	beq.n	801dc3e <ip4_output_if+0x26>
 801dc36:	68bb      	ldr	r3, [r7, #8]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d102      	bne.n	801dc44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801dc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc40:	3304      	adds	r3, #4
 801dc42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801dc44:	78fa      	ldrb	r2, [r7, #3]
 801dc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc48:	9302      	str	r3, [sp, #8]
 801dc4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801dc4e:	9301      	str	r3, [sp, #4]
 801dc50:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dc54:	9300      	str	r3, [sp, #0]
 801dc56:	4613      	mov	r3, r2
 801dc58:	687a      	ldr	r2, [r7, #4]
 801dc5a:	6979      	ldr	r1, [r7, #20]
 801dc5c:	68f8      	ldr	r0, [r7, #12]
 801dc5e:	f000 f805 	bl	801dc6c <ip4_output_if_src>
 801dc62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801dc64:	4618      	mov	r0, r3
 801dc66:	3718      	adds	r7, #24
 801dc68:	46bd      	mov	sp, r7
 801dc6a:	bd80      	pop	{r7, pc}

0801dc6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801dc6c:	b580      	push	{r7, lr}
 801dc6e:	b088      	sub	sp, #32
 801dc70:	af00      	add	r7, sp, #0
 801dc72:	60f8      	str	r0, [r7, #12]
 801dc74:	60b9      	str	r1, [r7, #8]
 801dc76:	607a      	str	r2, [r7, #4]
 801dc78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	7b9b      	ldrb	r3, [r3, #14]
 801dc7e:	2b01      	cmp	r3, #1
 801dc80:	d006      	beq.n	801dc90 <ip4_output_if_src+0x24>
 801dc82:	4b4b      	ldr	r3, [pc, #300]	@ (801ddb0 <ip4_output_if_src+0x144>)
 801dc84:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801dc88:	494a      	ldr	r1, [pc, #296]	@ (801ddb4 <ip4_output_if_src+0x148>)
 801dc8a:	484b      	ldr	r0, [pc, #300]	@ (801ddb8 <ip4_output_if_src+0x14c>)
 801dc8c:	f002 f90a 	bl	801fea4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d060      	beq.n	801dd58 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801dc96:	2314      	movs	r3, #20
 801dc98:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801dc9a:	2114      	movs	r1, #20
 801dc9c:	68f8      	ldr	r0, [r7, #12]
 801dc9e:	f7f6 feef 	bl	8014a80 <pbuf_add_header>
 801dca2:	4603      	mov	r3, r0
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d002      	beq.n	801dcae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dca8:	f06f 0301 	mvn.w	r3, #1
 801dcac:	e07c      	b.n	801dda8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	685b      	ldr	r3, [r3, #4]
 801dcb2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	895b      	ldrh	r3, [r3, #10]
 801dcb8:	2b13      	cmp	r3, #19
 801dcba:	d806      	bhi.n	801dcca <ip4_output_if_src+0x5e>
 801dcbc:	4b3c      	ldr	r3, [pc, #240]	@ (801ddb0 <ip4_output_if_src+0x144>)
 801dcbe:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801dcc2:	493e      	ldr	r1, [pc, #248]	@ (801ddbc <ip4_output_if_src+0x150>)
 801dcc4:	483c      	ldr	r0, [pc, #240]	@ (801ddb8 <ip4_output_if_src+0x14c>)
 801dcc6:	f002 f8ed 	bl	801fea4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801dcca:	69fb      	ldr	r3, [r7, #28]
 801dccc:	78fa      	ldrb	r2, [r7, #3]
 801dcce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801dcd0:	69fb      	ldr	r3, [r7, #28]
 801dcd2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801dcd6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	681a      	ldr	r2, [r3, #0]
 801dcdc:	69fb      	ldr	r3, [r7, #28]
 801dcde:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dce0:	8b7b      	ldrh	r3, [r7, #26]
 801dce2:	089b      	lsrs	r3, r3, #2
 801dce4:	b29b      	uxth	r3, r3
 801dce6:	b2db      	uxtb	r3, r3
 801dce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dcec:	b2da      	uxtb	r2, r3
 801dcee:	69fb      	ldr	r3, [r7, #28]
 801dcf0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801dcf2:	69fb      	ldr	r3, [r7, #28]
 801dcf4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801dcf8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	891b      	ldrh	r3, [r3, #8]
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f7f5 fa70 	bl	80131e4 <lwip_htons>
 801dd04:	4603      	mov	r3, r0
 801dd06:	461a      	mov	r2, r3
 801dd08:	69fb      	ldr	r3, [r7, #28]
 801dd0a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801dd0c:	69fb      	ldr	r3, [r7, #28]
 801dd0e:	2200      	movs	r2, #0
 801dd10:	719a      	strb	r2, [r3, #6]
 801dd12:	2200      	movs	r2, #0
 801dd14:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dd16:	4b2a      	ldr	r3, [pc, #168]	@ (801ddc0 <ip4_output_if_src+0x154>)
 801dd18:	881b      	ldrh	r3, [r3, #0]
 801dd1a:	4618      	mov	r0, r3
 801dd1c:	f7f5 fa62 	bl	80131e4 <lwip_htons>
 801dd20:	4603      	mov	r3, r0
 801dd22:	461a      	mov	r2, r3
 801dd24:	69fb      	ldr	r3, [r7, #28]
 801dd26:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801dd28:	4b25      	ldr	r3, [pc, #148]	@ (801ddc0 <ip4_output_if_src+0x154>)
 801dd2a:	881b      	ldrh	r3, [r3, #0]
 801dd2c:	3301      	adds	r3, #1
 801dd2e:	b29a      	uxth	r2, r3
 801dd30:	4b23      	ldr	r3, [pc, #140]	@ (801ddc0 <ip4_output_if_src+0x154>)
 801dd32:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801dd34:	68bb      	ldr	r3, [r7, #8]
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d104      	bne.n	801dd44 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801dd3a:	4b22      	ldr	r3, [pc, #136]	@ (801ddc4 <ip4_output_if_src+0x158>)
 801dd3c:	681a      	ldr	r2, [r3, #0]
 801dd3e:	69fb      	ldr	r3, [r7, #28]
 801dd40:	60da      	str	r2, [r3, #12]
 801dd42:	e003      	b.n	801dd4c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dd44:	68bb      	ldr	r3, [r7, #8]
 801dd46:	681a      	ldr	r2, [r3, #0]
 801dd48:	69fb      	ldr	r3, [r7, #28]
 801dd4a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801dd4c:	69fb      	ldr	r3, [r7, #28]
 801dd4e:	2200      	movs	r2, #0
 801dd50:	729a      	strb	r2, [r3, #10]
 801dd52:	2200      	movs	r2, #0
 801dd54:	72da      	strb	r2, [r3, #11]
 801dd56:	e00f      	b.n	801dd78 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	895b      	ldrh	r3, [r3, #10]
 801dd5c:	2b13      	cmp	r3, #19
 801dd5e:	d802      	bhi.n	801dd66 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dd60:	f06f 0301 	mvn.w	r3, #1
 801dd64:	e020      	b.n	801dda8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	685b      	ldr	r3, [r3, #4]
 801dd6a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801dd6c:	69fb      	ldr	r3, [r7, #28]
 801dd6e:	691b      	ldr	r3, [r3, #16]
 801dd70:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801dd72:	f107 0314 	add.w	r3, r7, #20
 801dd76:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d00c      	beq.n	801dd9a <ip4_output_if_src+0x12e>
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	891a      	ldrh	r2, [r3, #8]
 801dd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dd88:	429a      	cmp	r2, r3
 801dd8a:	d906      	bls.n	801dd9a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801dd8c:	687a      	ldr	r2, [r7, #4]
 801dd8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dd90:	68f8      	ldr	r0, [r7, #12]
 801dd92:	f000 fd53 	bl	801e83c <ip4_frag>
 801dd96:	4603      	mov	r3, r0
 801dd98:	e006      	b.n	801dda8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801dd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd9c:	695b      	ldr	r3, [r3, #20]
 801dd9e:	687a      	ldr	r2, [r7, #4]
 801dda0:	68f9      	ldr	r1, [r7, #12]
 801dda2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dda4:	4798      	blx	r3
 801dda6:	4603      	mov	r3, r0
}
 801dda8:	4618      	mov	r0, r3
 801ddaa:	3720      	adds	r7, #32
 801ddac:	46bd      	mov	sp, r7
 801ddae:	bd80      	pop	{r7, pc}
 801ddb0:	08024be0 	.word	0x08024be0
 801ddb4:	08024c14 	.word	0x08024c14
 801ddb8:	08024c20 	.word	0x08024c20
 801ddbc:	08024c48 	.word	0x08024c48
 801ddc0:	200228f2 	.word	0x200228f2
 801ddc4:	08025488 	.word	0x08025488

0801ddc8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ddc8:	b480      	push	{r7}
 801ddca:	b085      	sub	sp, #20
 801ddcc:	af00      	add	r7, sp, #0
 801ddce:	6078      	str	r0, [r7, #4]
 801ddd0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dddc:	d002      	beq.n	801dde4 <ip4_addr_isbroadcast_u32+0x1c>
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d101      	bne.n	801dde8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801dde4:	2301      	movs	r3, #1
 801dde6:	e02a      	b.n	801de3e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801dde8:	683b      	ldr	r3, [r7, #0]
 801ddea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ddee:	f003 0302 	and.w	r3, r3, #2
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d101      	bne.n	801ddfa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	e021      	b.n	801de3e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ddfa:	683b      	ldr	r3, [r7, #0]
 801ddfc:	3304      	adds	r3, #4
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	687a      	ldr	r2, [r7, #4]
 801de02:	429a      	cmp	r2, r3
 801de04:	d101      	bne.n	801de0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801de06:	2300      	movs	r3, #0
 801de08:	e019      	b.n	801de3e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801de0a:	68fa      	ldr	r2, [r7, #12]
 801de0c:	683b      	ldr	r3, [r7, #0]
 801de0e:	3304      	adds	r3, #4
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	405a      	eors	r2, r3
 801de14:	683b      	ldr	r3, [r7, #0]
 801de16:	3308      	adds	r3, #8
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	4013      	ands	r3, r2
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d10d      	bne.n	801de3c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de20:	683b      	ldr	r3, [r7, #0]
 801de22:	3308      	adds	r3, #8
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	43da      	mvns	r2, r3
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801de2c:	683b      	ldr	r3, [r7, #0]
 801de2e:	3308      	adds	r3, #8
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801de34:	429a      	cmp	r2, r3
 801de36:	d101      	bne.n	801de3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801de38:	2301      	movs	r3, #1
 801de3a:	e000      	b.n	801de3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801de3c:	2300      	movs	r3, #0
  }
}
 801de3e:	4618      	mov	r0, r3
 801de40:	3714      	adds	r7, #20
 801de42:	46bd      	mov	sp, r7
 801de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de48:	4770      	bx	lr
	...

0801de4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801de4c:	b580      	push	{r7, lr}
 801de4e:	b084      	sub	sp, #16
 801de50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801de52:	2300      	movs	r3, #0
 801de54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801de56:	4b12      	ldr	r3, [pc, #72]	@ (801dea0 <ip_reass_tmr+0x54>)
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801de5c:	e018      	b.n	801de90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	7fdb      	ldrb	r3, [r3, #31]
 801de62:	2b00      	cmp	r3, #0
 801de64:	d00b      	beq.n	801de7e <ip_reass_tmr+0x32>
      r->timer--;
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	7fdb      	ldrb	r3, [r3, #31]
 801de6a:	3b01      	subs	r3, #1
 801de6c:	b2da      	uxtb	r2, r3
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	60fb      	str	r3, [r7, #12]
 801de7c:	e008      	b.n	801de90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801de88:	68b9      	ldr	r1, [r7, #8]
 801de8a:	6878      	ldr	r0, [r7, #4]
 801de8c:	f000 f80a 	bl	801dea4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	2b00      	cmp	r3, #0
 801de94:	d1e3      	bne.n	801de5e <ip_reass_tmr+0x12>
    }
  }
}
 801de96:	bf00      	nop
 801de98:	bf00      	nop
 801de9a:	3710      	adds	r7, #16
 801de9c:	46bd      	mov	sp, r7
 801de9e:	bd80      	pop	{r7, pc}
 801dea0:	200228f4 	.word	0x200228f4

0801dea4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801dea4:	b580      	push	{r7, lr}
 801dea6:	b088      	sub	sp, #32
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	6078      	str	r0, [r7, #4]
 801deac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801deae:	2300      	movs	r3, #0
 801deb0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801deb2:	683a      	ldr	r2, [r7, #0]
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	429a      	cmp	r2, r3
 801deb8:	d105      	bne.n	801dec6 <ip_reass_free_complete_datagram+0x22>
 801deba:	4b45      	ldr	r3, [pc, #276]	@ (801dfd0 <ip_reass_free_complete_datagram+0x12c>)
 801debc:	22ab      	movs	r2, #171	@ 0xab
 801debe:	4945      	ldr	r1, [pc, #276]	@ (801dfd4 <ip_reass_free_complete_datagram+0x130>)
 801dec0:	4845      	ldr	r0, [pc, #276]	@ (801dfd8 <ip_reass_free_complete_datagram+0x134>)
 801dec2:	f001 ffef 	bl	801fea4 <iprintf>
  if (prev != NULL) {
 801dec6:	683b      	ldr	r3, [r7, #0]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d00a      	beq.n	801dee2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801decc:	683b      	ldr	r3, [r7, #0]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	687a      	ldr	r2, [r7, #4]
 801ded2:	429a      	cmp	r2, r3
 801ded4:	d005      	beq.n	801dee2 <ip_reass_free_complete_datagram+0x3e>
 801ded6:	4b3e      	ldr	r3, [pc, #248]	@ (801dfd0 <ip_reass_free_complete_datagram+0x12c>)
 801ded8:	22ad      	movs	r2, #173	@ 0xad
 801deda:	4940      	ldr	r1, [pc, #256]	@ (801dfdc <ip_reass_free_complete_datagram+0x138>)
 801dedc:	483e      	ldr	r0, [pc, #248]	@ (801dfd8 <ip_reass_free_complete_datagram+0x134>)
 801dede:	f001 ffe1 	bl	801fea4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	685b      	ldr	r3, [r3, #4]
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801deea:	697b      	ldr	r3, [r7, #20]
 801deec:	889b      	ldrh	r3, [r3, #4]
 801deee:	b29b      	uxth	r3, r3
 801def0:	2b00      	cmp	r3, #0
 801def2:	d12a      	bne.n	801df4a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	685b      	ldr	r3, [r3, #4]
 801def8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801defa:	697b      	ldr	r3, [r7, #20]
 801defc:	681a      	ldr	r2, [r3, #0]
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801df02:	69bb      	ldr	r3, [r7, #24]
 801df04:	6858      	ldr	r0, [r3, #4]
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	3308      	adds	r3, #8
 801df0a:	2214      	movs	r2, #20
 801df0c:	4619      	mov	r1, r3
 801df0e:	f002 f99e 	bl	802024e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801df12:	2101      	movs	r1, #1
 801df14:	69b8      	ldr	r0, [r7, #24]
 801df16:	f7ff fc07 	bl	801d728 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801df1a:	69b8      	ldr	r0, [r7, #24]
 801df1c:	f7f6 fed4 	bl	8014cc8 <pbuf_clen>
 801df20:	4603      	mov	r3, r0
 801df22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801df24:	8bfa      	ldrh	r2, [r7, #30]
 801df26:	8a7b      	ldrh	r3, [r7, #18]
 801df28:	4413      	add	r3, r2
 801df2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801df2e:	db05      	blt.n	801df3c <ip_reass_free_complete_datagram+0x98>
 801df30:	4b27      	ldr	r3, [pc, #156]	@ (801dfd0 <ip_reass_free_complete_datagram+0x12c>)
 801df32:	22bc      	movs	r2, #188	@ 0xbc
 801df34:	492a      	ldr	r1, [pc, #168]	@ (801dfe0 <ip_reass_free_complete_datagram+0x13c>)
 801df36:	4828      	ldr	r0, [pc, #160]	@ (801dfd8 <ip_reass_free_complete_datagram+0x134>)
 801df38:	f001 ffb4 	bl	801fea4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801df3c:	8bfa      	ldrh	r2, [r7, #30]
 801df3e:	8a7b      	ldrh	r3, [r7, #18]
 801df40:	4413      	add	r3, r2
 801df42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801df44:	69b8      	ldr	r0, [r7, #24]
 801df46:	f7f6 fe31 	bl	8014bac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	685b      	ldr	r3, [r3, #4]
 801df4e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801df50:	e01f      	b.n	801df92 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801df52:	69bb      	ldr	r3, [r7, #24]
 801df54:	685b      	ldr	r3, [r3, #4]
 801df56:	617b      	str	r3, [r7, #20]
    pcur = p;
 801df58:	69bb      	ldr	r3, [r7, #24]
 801df5a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801df5c:	697b      	ldr	r3, [r7, #20]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801df62:	68f8      	ldr	r0, [r7, #12]
 801df64:	f7f6 feb0 	bl	8014cc8 <pbuf_clen>
 801df68:	4603      	mov	r3, r0
 801df6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801df6c:	8bfa      	ldrh	r2, [r7, #30]
 801df6e:	8a7b      	ldrh	r3, [r7, #18]
 801df70:	4413      	add	r3, r2
 801df72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801df76:	db05      	blt.n	801df84 <ip_reass_free_complete_datagram+0xe0>
 801df78:	4b15      	ldr	r3, [pc, #84]	@ (801dfd0 <ip_reass_free_complete_datagram+0x12c>)
 801df7a:	22cc      	movs	r2, #204	@ 0xcc
 801df7c:	4918      	ldr	r1, [pc, #96]	@ (801dfe0 <ip_reass_free_complete_datagram+0x13c>)
 801df7e:	4816      	ldr	r0, [pc, #88]	@ (801dfd8 <ip_reass_free_complete_datagram+0x134>)
 801df80:	f001 ff90 	bl	801fea4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801df84:	8bfa      	ldrh	r2, [r7, #30]
 801df86:	8a7b      	ldrh	r3, [r7, #18]
 801df88:	4413      	add	r3, r2
 801df8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801df8c:	68f8      	ldr	r0, [r7, #12]
 801df8e:	f7f6 fe0d 	bl	8014bac <pbuf_free>
  while (p != NULL) {
 801df92:	69bb      	ldr	r3, [r7, #24]
 801df94:	2b00      	cmp	r3, #0
 801df96:	d1dc      	bne.n	801df52 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801df98:	6839      	ldr	r1, [r7, #0]
 801df9a:	6878      	ldr	r0, [r7, #4]
 801df9c:	f000 f8c2 	bl	801e124 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801dfa0:	4b10      	ldr	r3, [pc, #64]	@ (801dfe4 <ip_reass_free_complete_datagram+0x140>)
 801dfa2:	881b      	ldrh	r3, [r3, #0]
 801dfa4:	8bfa      	ldrh	r2, [r7, #30]
 801dfa6:	429a      	cmp	r2, r3
 801dfa8:	d905      	bls.n	801dfb6 <ip_reass_free_complete_datagram+0x112>
 801dfaa:	4b09      	ldr	r3, [pc, #36]	@ (801dfd0 <ip_reass_free_complete_datagram+0x12c>)
 801dfac:	22d2      	movs	r2, #210	@ 0xd2
 801dfae:	490e      	ldr	r1, [pc, #56]	@ (801dfe8 <ip_reass_free_complete_datagram+0x144>)
 801dfb0:	4809      	ldr	r0, [pc, #36]	@ (801dfd8 <ip_reass_free_complete_datagram+0x134>)
 801dfb2:	f001 ff77 	bl	801fea4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801dfb6:	4b0b      	ldr	r3, [pc, #44]	@ (801dfe4 <ip_reass_free_complete_datagram+0x140>)
 801dfb8:	881a      	ldrh	r2, [r3, #0]
 801dfba:	8bfb      	ldrh	r3, [r7, #30]
 801dfbc:	1ad3      	subs	r3, r2, r3
 801dfbe:	b29a      	uxth	r2, r3
 801dfc0:	4b08      	ldr	r3, [pc, #32]	@ (801dfe4 <ip_reass_free_complete_datagram+0x140>)
 801dfc2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801dfc4:	8bfb      	ldrh	r3, [r7, #30]
}
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	3720      	adds	r7, #32
 801dfca:	46bd      	mov	sp, r7
 801dfcc:	bd80      	pop	{r7, pc}
 801dfce:	bf00      	nop
 801dfd0:	08024c78 	.word	0x08024c78
 801dfd4:	08024cb4 	.word	0x08024cb4
 801dfd8:	08024cc0 	.word	0x08024cc0
 801dfdc:	08024ce8 	.word	0x08024ce8
 801dfe0:	08024cfc 	.word	0x08024cfc
 801dfe4:	200228f8 	.word	0x200228f8
 801dfe8:	08024d1c 	.word	0x08024d1c

0801dfec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801dfec:	b580      	push	{r7, lr}
 801dfee:	b08a      	sub	sp, #40	@ 0x28
 801dff0:	af00      	add	r7, sp, #0
 801dff2:	6078      	str	r0, [r7, #4]
 801dff4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801dff6:	2300      	movs	r3, #0
 801dff8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801dffa:	2300      	movs	r3, #0
 801dffc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801dffe:	2300      	movs	r3, #0
 801e000:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e002:	2300      	movs	r3, #0
 801e004:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e006:	2300      	movs	r3, #0
 801e008:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e00a:	4b28      	ldr	r3, [pc, #160]	@ (801e0ac <ip_reass_remove_oldest_datagram+0xc0>)
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e010:	e030      	b.n	801e074 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e014:	695a      	ldr	r2, [r3, #20]
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	68db      	ldr	r3, [r3, #12]
 801e01a:	429a      	cmp	r2, r3
 801e01c:	d10c      	bne.n	801e038 <ip_reass_remove_oldest_datagram+0x4c>
 801e01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e020:	699a      	ldr	r2, [r3, #24]
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	691b      	ldr	r3, [r3, #16]
 801e026:	429a      	cmp	r2, r3
 801e028:	d106      	bne.n	801e038 <ip_reass_remove_oldest_datagram+0x4c>
 801e02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e02c:	899a      	ldrh	r2, [r3, #12]
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	889b      	ldrh	r3, [r3, #4]
 801e032:	b29b      	uxth	r3, r3
 801e034:	429a      	cmp	r2, r3
 801e036:	d014      	beq.n	801e062 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e038:	693b      	ldr	r3, [r7, #16]
 801e03a:	3301      	adds	r3, #1
 801e03c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e03e:	6a3b      	ldr	r3, [r7, #32]
 801e040:	2b00      	cmp	r3, #0
 801e042:	d104      	bne.n	801e04e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e046:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e048:	69fb      	ldr	r3, [r7, #28]
 801e04a:	61bb      	str	r3, [r7, #24]
 801e04c:	e009      	b.n	801e062 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e050:	7fda      	ldrb	r2, [r3, #31]
 801e052:	6a3b      	ldr	r3, [r7, #32]
 801e054:	7fdb      	ldrb	r3, [r3, #31]
 801e056:	429a      	cmp	r2, r3
 801e058:	d803      	bhi.n	801e062 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e05c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e05e:	69fb      	ldr	r3, [r7, #28]
 801e060:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d001      	beq.n	801e06e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e06c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e076:	2b00      	cmp	r3, #0
 801e078:	d1cb      	bne.n	801e012 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e07a:	6a3b      	ldr	r3, [r7, #32]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d008      	beq.n	801e092 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e080:	69b9      	ldr	r1, [r7, #24]
 801e082:	6a38      	ldr	r0, [r7, #32]
 801e084:	f7ff ff0e 	bl	801dea4 <ip_reass_free_complete_datagram>
 801e088:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e08a:	697a      	ldr	r2, [r7, #20]
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	4413      	add	r3, r2
 801e090:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e092:	697a      	ldr	r2, [r7, #20]
 801e094:	683b      	ldr	r3, [r7, #0]
 801e096:	429a      	cmp	r2, r3
 801e098:	da02      	bge.n	801e0a0 <ip_reass_remove_oldest_datagram+0xb4>
 801e09a:	693b      	ldr	r3, [r7, #16]
 801e09c:	2b01      	cmp	r3, #1
 801e09e:	dcac      	bgt.n	801dffa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e0a0:	697b      	ldr	r3, [r7, #20]
}
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	3728      	adds	r7, #40	@ 0x28
 801e0a6:	46bd      	mov	sp, r7
 801e0a8:	bd80      	pop	{r7, pc}
 801e0aa:	bf00      	nop
 801e0ac:	200228f4 	.word	0x200228f4

0801e0b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e0b0:	b580      	push	{r7, lr}
 801e0b2:	b084      	sub	sp, #16
 801e0b4:	af00      	add	r7, sp, #0
 801e0b6:	6078      	str	r0, [r7, #4]
 801e0b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e0ba:	2004      	movs	r0, #4
 801e0bc:	f7f5 fd66 	bl	8013b8c <memp_malloc>
 801e0c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e0c2:	68fb      	ldr	r3, [r7, #12]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d110      	bne.n	801e0ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e0c8:	6839      	ldr	r1, [r7, #0]
 801e0ca:	6878      	ldr	r0, [r7, #4]
 801e0cc:	f7ff ff8e 	bl	801dfec <ip_reass_remove_oldest_datagram>
 801e0d0:	4602      	mov	r2, r0
 801e0d2:	683b      	ldr	r3, [r7, #0]
 801e0d4:	4293      	cmp	r3, r2
 801e0d6:	dc03      	bgt.n	801e0e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e0d8:	2004      	movs	r0, #4
 801e0da:	f7f5 fd57 	bl	8013b8c <memp_malloc>
 801e0de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d101      	bne.n	801e0ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	e016      	b.n	801e118 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e0ea:	2220      	movs	r2, #32
 801e0ec:	2100      	movs	r1, #0
 801e0ee:	68f8      	ldr	r0, [r7, #12]
 801e0f0:	f002 f838 	bl	8020164 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	220f      	movs	r2, #15
 801e0f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e0fa:	4b09      	ldr	r3, [pc, #36]	@ (801e120 <ip_reass_enqueue_new_datagram+0x70>)
 801e0fc:	681a      	ldr	r2, [r3, #0]
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e102:	4a07      	ldr	r2, [pc, #28]	@ (801e120 <ip_reass_enqueue_new_datagram+0x70>)
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	3308      	adds	r3, #8
 801e10c:	2214      	movs	r2, #20
 801e10e:	6879      	ldr	r1, [r7, #4]
 801e110:	4618      	mov	r0, r3
 801e112:	f002 f89c 	bl	802024e <memcpy>
  return ipr;
 801e116:	68fb      	ldr	r3, [r7, #12]
}
 801e118:	4618      	mov	r0, r3
 801e11a:	3710      	adds	r7, #16
 801e11c:	46bd      	mov	sp, r7
 801e11e:	bd80      	pop	{r7, pc}
 801e120:	200228f4 	.word	0x200228f4

0801e124 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e124:	b580      	push	{r7, lr}
 801e126:	b082      	sub	sp, #8
 801e128:	af00      	add	r7, sp, #0
 801e12a:	6078      	str	r0, [r7, #4]
 801e12c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e12e:	4b10      	ldr	r3, [pc, #64]	@ (801e170 <ip_reass_dequeue_datagram+0x4c>)
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	687a      	ldr	r2, [r7, #4]
 801e134:	429a      	cmp	r2, r3
 801e136:	d104      	bne.n	801e142 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	4a0c      	ldr	r2, [pc, #48]	@ (801e170 <ip_reass_dequeue_datagram+0x4c>)
 801e13e:	6013      	str	r3, [r2, #0]
 801e140:	e00d      	b.n	801e15e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e142:	683b      	ldr	r3, [r7, #0]
 801e144:	2b00      	cmp	r3, #0
 801e146:	d106      	bne.n	801e156 <ip_reass_dequeue_datagram+0x32>
 801e148:	4b0a      	ldr	r3, [pc, #40]	@ (801e174 <ip_reass_dequeue_datagram+0x50>)
 801e14a:	f240 1245 	movw	r2, #325	@ 0x145
 801e14e:	490a      	ldr	r1, [pc, #40]	@ (801e178 <ip_reass_dequeue_datagram+0x54>)
 801e150:	480a      	ldr	r0, [pc, #40]	@ (801e17c <ip_reass_dequeue_datagram+0x58>)
 801e152:	f001 fea7 	bl	801fea4 <iprintf>
    prev->next = ipr->next;
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	681a      	ldr	r2, [r3, #0]
 801e15a:	683b      	ldr	r3, [r7, #0]
 801e15c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e15e:	6879      	ldr	r1, [r7, #4]
 801e160:	2004      	movs	r0, #4
 801e162:	f7f5 fd89 	bl	8013c78 <memp_free>
}
 801e166:	bf00      	nop
 801e168:	3708      	adds	r7, #8
 801e16a:	46bd      	mov	sp, r7
 801e16c:	bd80      	pop	{r7, pc}
 801e16e:	bf00      	nop
 801e170:	200228f4 	.word	0x200228f4
 801e174:	08024c78 	.word	0x08024c78
 801e178:	08024d40 	.word	0x08024d40
 801e17c:	08024cc0 	.word	0x08024cc0

0801e180 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e180:	b580      	push	{r7, lr}
 801e182:	b08c      	sub	sp, #48	@ 0x30
 801e184:	af00      	add	r7, sp, #0
 801e186:	60f8      	str	r0, [r7, #12]
 801e188:	60b9      	str	r1, [r7, #8]
 801e18a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e18c:	2300      	movs	r3, #0
 801e18e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e190:	2301      	movs	r3, #1
 801e192:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e194:	68bb      	ldr	r3, [r7, #8]
 801e196:	685b      	ldr	r3, [r3, #4]
 801e198:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e19a:	69fb      	ldr	r3, [r7, #28]
 801e19c:	885b      	ldrh	r3, [r3, #2]
 801e19e:	b29b      	uxth	r3, r3
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	f7f5 f81f 	bl	80131e4 <lwip_htons>
 801e1a6:	4603      	mov	r3, r0
 801e1a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e1aa:	69fb      	ldr	r3, [r7, #28]
 801e1ac:	781b      	ldrb	r3, [r3, #0]
 801e1ae:	f003 030f 	and.w	r3, r3, #15
 801e1b2:	b2db      	uxtb	r3, r3
 801e1b4:	009b      	lsls	r3, r3, #2
 801e1b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e1b8:	7e7b      	ldrb	r3, [r7, #25]
 801e1ba:	b29b      	uxth	r3, r3
 801e1bc:	8b7a      	ldrh	r2, [r7, #26]
 801e1be:	429a      	cmp	r2, r3
 801e1c0:	d202      	bcs.n	801e1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e1c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e1c6:	e135      	b.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e1c8:	7e7b      	ldrb	r3, [r7, #25]
 801e1ca:	b29b      	uxth	r3, r3
 801e1cc:	8b7a      	ldrh	r2, [r7, #26]
 801e1ce:	1ad3      	subs	r3, r2, r3
 801e1d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e1d2:	69fb      	ldr	r3, [r7, #28]
 801e1d4:	88db      	ldrh	r3, [r3, #6]
 801e1d6:	b29b      	uxth	r3, r3
 801e1d8:	4618      	mov	r0, r3
 801e1da:	f7f5 f803 	bl	80131e4 <lwip_htons>
 801e1de:	4603      	mov	r3, r0
 801e1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e1e4:	b29b      	uxth	r3, r3
 801e1e6:	00db      	lsls	r3, r3, #3
 801e1e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e1ea:	68bb      	ldr	r3, [r7, #8]
 801e1ec:	685b      	ldr	r3, [r3, #4]
 801e1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801e1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	701a      	strb	r2, [r3, #0]
 801e1f6:	2200      	movs	r2, #0
 801e1f8:	705a      	strb	r2, [r3, #1]
 801e1fa:	2200      	movs	r2, #0
 801e1fc:	709a      	strb	r2, [r3, #2]
 801e1fe:	2200      	movs	r2, #0
 801e200:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e204:	8afa      	ldrh	r2, [r7, #22]
 801e206:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e208:	8afa      	ldrh	r2, [r7, #22]
 801e20a:	8b7b      	ldrh	r3, [r7, #26]
 801e20c:	4413      	add	r3, r2
 801e20e:	b29a      	uxth	r2, r3
 801e210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e212:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e216:	88db      	ldrh	r3, [r3, #6]
 801e218:	b29b      	uxth	r3, r3
 801e21a:	8afa      	ldrh	r2, [r7, #22]
 801e21c:	429a      	cmp	r2, r3
 801e21e:	d902      	bls.n	801e226 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e224:	e106      	b.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	685b      	ldr	r3, [r3, #4]
 801e22a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e22c:	e068      	b.n	801e300 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e230:	685b      	ldr	r3, [r3, #4]
 801e232:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e236:	889b      	ldrh	r3, [r3, #4]
 801e238:	b29a      	uxth	r2, r3
 801e23a:	693b      	ldr	r3, [r7, #16]
 801e23c:	889b      	ldrh	r3, [r3, #4]
 801e23e:	b29b      	uxth	r3, r3
 801e240:	429a      	cmp	r2, r3
 801e242:	d235      	bcs.n	801e2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e248:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	d020      	beq.n	801e292 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e252:	889b      	ldrh	r3, [r3, #4]
 801e254:	b29a      	uxth	r2, r3
 801e256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e258:	88db      	ldrh	r3, [r3, #6]
 801e25a:	b29b      	uxth	r3, r3
 801e25c:	429a      	cmp	r2, r3
 801e25e:	d307      	bcc.n	801e270 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e262:	88db      	ldrh	r3, [r3, #6]
 801e264:	b29a      	uxth	r2, r3
 801e266:	693b      	ldr	r3, [r7, #16]
 801e268:	889b      	ldrh	r3, [r3, #4]
 801e26a:	b29b      	uxth	r3, r3
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d902      	bls.n	801e276 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e270:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e274:	e0de      	b.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e278:	68ba      	ldr	r2, [r7, #8]
 801e27a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e27e:	88db      	ldrh	r3, [r3, #6]
 801e280:	b29a      	uxth	r2, r3
 801e282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e284:	889b      	ldrh	r3, [r3, #4]
 801e286:	b29b      	uxth	r3, r3
 801e288:	429a      	cmp	r2, r3
 801e28a:	d03d      	beq.n	801e308 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e28c:	2300      	movs	r3, #0
 801e28e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e290:	e03a      	b.n	801e308 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e294:	88db      	ldrh	r3, [r3, #6]
 801e296:	b29a      	uxth	r2, r3
 801e298:	693b      	ldr	r3, [r7, #16]
 801e29a:	889b      	ldrh	r3, [r3, #4]
 801e29c:	b29b      	uxth	r3, r3
 801e29e:	429a      	cmp	r2, r3
 801e2a0:	d902      	bls.n	801e2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2a6:	e0c5      	b.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	68ba      	ldr	r2, [r7, #8]
 801e2ac:	605a      	str	r2, [r3, #4]
      break;
 801e2ae:	e02b      	b.n	801e308 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2b2:	889b      	ldrh	r3, [r3, #4]
 801e2b4:	b29a      	uxth	r2, r3
 801e2b6:	693b      	ldr	r3, [r7, #16]
 801e2b8:	889b      	ldrh	r3, [r3, #4]
 801e2ba:	b29b      	uxth	r3, r3
 801e2bc:	429a      	cmp	r2, r3
 801e2be:	d102      	bne.n	801e2c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2c4:	e0b6      	b.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2c8:	889b      	ldrh	r3, [r3, #4]
 801e2ca:	b29a      	uxth	r2, r3
 801e2cc:	693b      	ldr	r3, [r7, #16]
 801e2ce:	88db      	ldrh	r3, [r3, #6]
 801e2d0:	b29b      	uxth	r3, r3
 801e2d2:	429a      	cmp	r2, r3
 801e2d4:	d202      	bcs.n	801e2dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2da:	e0ab      	b.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d009      	beq.n	801e2f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2e4:	88db      	ldrh	r3, [r3, #6]
 801e2e6:	b29a      	uxth	r2, r3
 801e2e8:	693b      	ldr	r3, [r7, #16]
 801e2ea:	889b      	ldrh	r3, [r3, #4]
 801e2ec:	b29b      	uxth	r3, r3
 801e2ee:	429a      	cmp	r2, r3
 801e2f0:	d001      	beq.n	801e2f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e2f6:	693b      	ldr	r3, [r7, #16]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801e2fc:	693b      	ldr	r3, [r7, #16]
 801e2fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801e300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e302:	2b00      	cmp	r3, #0
 801e304:	d193      	bne.n	801e22e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e306:	e000      	b.n	801e30a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e308:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d12d      	bne.n	801e36c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e312:	2b00      	cmp	r3, #0
 801e314:	d01c      	beq.n	801e350 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e318:	88db      	ldrh	r3, [r3, #6]
 801e31a:	b29a      	uxth	r2, r3
 801e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e31e:	889b      	ldrh	r3, [r3, #4]
 801e320:	b29b      	uxth	r3, r3
 801e322:	429a      	cmp	r2, r3
 801e324:	d906      	bls.n	801e334 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e326:	4b45      	ldr	r3, [pc, #276]	@ (801e43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e328:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801e32c:	4944      	ldr	r1, [pc, #272]	@ (801e440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e32e:	4845      	ldr	r0, [pc, #276]	@ (801e444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e330:	f001 fdb8 	bl	801fea4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e336:	68ba      	ldr	r2, [r7, #8]
 801e338:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e33c:	88db      	ldrh	r3, [r3, #6]
 801e33e:	b29a      	uxth	r2, r3
 801e340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e342:	889b      	ldrh	r3, [r3, #4]
 801e344:	b29b      	uxth	r3, r3
 801e346:	429a      	cmp	r2, r3
 801e348:	d010      	beq.n	801e36c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e34a:	2300      	movs	r3, #0
 801e34c:	623b      	str	r3, [r7, #32]
 801e34e:	e00d      	b.n	801e36c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	685b      	ldr	r3, [r3, #4]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d006      	beq.n	801e366 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e358:	4b38      	ldr	r3, [pc, #224]	@ (801e43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e35a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801e35e:	493a      	ldr	r1, [pc, #232]	@ (801e448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e360:	4838      	ldr	r0, [pc, #224]	@ (801e444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e362:	f001 fd9f 	bl	801fea4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	68ba      	ldr	r2, [r7, #8]
 801e36a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d105      	bne.n	801e37e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	7f9b      	ldrb	r3, [r3, #30]
 801e376:	f003 0301 	and.w	r3, r3, #1
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d059      	beq.n	801e432 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e37e:	6a3b      	ldr	r3, [r7, #32]
 801e380:	2b00      	cmp	r3, #0
 801e382:	d04f      	beq.n	801e424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	685b      	ldr	r3, [r3, #4]
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d006      	beq.n	801e39a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	685b      	ldr	r3, [r3, #4]
 801e390:	685b      	ldr	r3, [r3, #4]
 801e392:	889b      	ldrh	r3, [r3, #4]
 801e394:	b29b      	uxth	r3, r3
 801e396:	2b00      	cmp	r3, #0
 801e398:	d002      	beq.n	801e3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e39a:	2300      	movs	r3, #0
 801e39c:	623b      	str	r3, [r7, #32]
 801e39e:	e041      	b.n	801e424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801e3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e3aa:	e012      	b.n	801e3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3ae:	685b      	ldr	r3, [r3, #4]
 801e3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801e3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3b4:	88db      	ldrh	r3, [r3, #6]
 801e3b6:	b29a      	uxth	r2, r3
 801e3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3ba:	889b      	ldrh	r3, [r3, #4]
 801e3bc:	b29b      	uxth	r3, r3
 801e3be:	429a      	cmp	r2, r3
 801e3c0:	d002      	beq.n	801e3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e3c2:	2300      	movs	r3, #0
 801e3c4:	623b      	str	r3, [r7, #32]
            break;
 801e3c6:	e007      	b.n	801e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801e3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d1e9      	bne.n	801e3ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e3d8:	6a3b      	ldr	r3, [r7, #32]
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d022      	beq.n	801e424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	685b      	ldr	r3, [r3, #4]
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d106      	bne.n	801e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e3e6:	4b15      	ldr	r3, [pc, #84]	@ (801e43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e3e8:	f240 12df 	movw	r2, #479	@ 0x1df
 801e3ec:	4917      	ldr	r1, [pc, #92]	@ (801e44c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e3ee:	4815      	ldr	r0, [pc, #84]	@ (801e444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e3f0:	f001 fd58 	bl	801fea4 <iprintf>
          LWIP_ASSERT("sanity check",
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	685b      	ldr	r3, [r3, #4]
 801e3f8:	685b      	ldr	r3, [r3, #4]
 801e3fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e3fc:	429a      	cmp	r2, r3
 801e3fe:	d106      	bne.n	801e40e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e400:	4b0e      	ldr	r3, [pc, #56]	@ (801e43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e402:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801e406:	4911      	ldr	r1, [pc, #68]	@ (801e44c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e408:	480e      	ldr	r0, [pc, #56]	@ (801e444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e40a:	f001 fd4b 	bl	801fea4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	2b00      	cmp	r3, #0
 801e414:	d006      	beq.n	801e424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e416:	4b09      	ldr	r3, [pc, #36]	@ (801e43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e418:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801e41c:	490c      	ldr	r1, [pc, #48]	@ (801e450 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e41e:	4809      	ldr	r0, [pc, #36]	@ (801e444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e420:	f001 fd40 	bl	801fea4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e424:	6a3b      	ldr	r3, [r7, #32]
 801e426:	2b00      	cmp	r3, #0
 801e428:	bf14      	ite	ne
 801e42a:	2301      	movne	r3, #1
 801e42c:	2300      	moveq	r3, #0
 801e42e:	b2db      	uxtb	r3, r3
 801e430:	e000      	b.n	801e434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e432:	2300      	movs	r3, #0
}
 801e434:	4618      	mov	r0, r3
 801e436:	3730      	adds	r7, #48	@ 0x30
 801e438:	46bd      	mov	sp, r7
 801e43a:	bd80      	pop	{r7, pc}
 801e43c:	08024c78 	.word	0x08024c78
 801e440:	08024d5c 	.word	0x08024d5c
 801e444:	08024cc0 	.word	0x08024cc0
 801e448:	08024d7c 	.word	0x08024d7c
 801e44c:	08024db4 	.word	0x08024db4
 801e450:	08024dc4 	.word	0x08024dc4

0801e454 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e454:	b580      	push	{r7, lr}
 801e456:	b08e      	sub	sp, #56	@ 0x38
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	685b      	ldr	r3, [r3, #4]
 801e460:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e464:	781b      	ldrb	r3, [r3, #0]
 801e466:	f003 030f 	and.w	r3, r3, #15
 801e46a:	b2db      	uxtb	r3, r3
 801e46c:	009b      	lsls	r3, r3, #2
 801e46e:	b2db      	uxtb	r3, r3
 801e470:	2b14      	cmp	r3, #20
 801e472:	f040 8171 	bne.w	801e758 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e478:	88db      	ldrh	r3, [r3, #6]
 801e47a:	b29b      	uxth	r3, r3
 801e47c:	4618      	mov	r0, r3
 801e47e:	f7f4 feb1 	bl	80131e4 <lwip_htons>
 801e482:	4603      	mov	r3, r0
 801e484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e488:	b29b      	uxth	r3, r3
 801e48a:	00db      	lsls	r3, r3, #3
 801e48c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e490:	885b      	ldrh	r3, [r3, #2]
 801e492:	b29b      	uxth	r3, r3
 801e494:	4618      	mov	r0, r3
 801e496:	f7f4 fea5 	bl	80131e4 <lwip_htons>
 801e49a:	4603      	mov	r3, r0
 801e49c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4a0:	781b      	ldrb	r3, [r3, #0]
 801e4a2:	f003 030f 	and.w	r3, r3, #15
 801e4a6:	b2db      	uxtb	r3, r3
 801e4a8:	009b      	lsls	r3, r3, #2
 801e4aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801e4ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e4b2:	b29b      	uxth	r3, r3
 801e4b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e4b6:	429a      	cmp	r2, r3
 801e4b8:	f0c0 8150 	bcc.w	801e75c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e4bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e4c0:	b29b      	uxth	r3, r3
 801e4c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e4c4:	1ad3      	subs	r3, r2, r3
 801e4c6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e4c8:	6878      	ldr	r0, [r7, #4]
 801e4ca:	f7f6 fbfd 	bl	8014cc8 <pbuf_clen>
 801e4ce:	4603      	mov	r3, r0
 801e4d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e4d2:	4b8c      	ldr	r3, [pc, #560]	@ (801e704 <ip4_reass+0x2b0>)
 801e4d4:	881b      	ldrh	r3, [r3, #0]
 801e4d6:	461a      	mov	r2, r3
 801e4d8:	8c3b      	ldrh	r3, [r7, #32]
 801e4da:	4413      	add	r3, r2
 801e4dc:	2b0a      	cmp	r3, #10
 801e4de:	dd10      	ble.n	801e502 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e4e0:	8c3b      	ldrh	r3, [r7, #32]
 801e4e2:	4619      	mov	r1, r3
 801e4e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e4e6:	f7ff fd81 	bl	801dfec <ip_reass_remove_oldest_datagram>
 801e4ea:	4603      	mov	r3, r0
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	f000 8137 	beq.w	801e760 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e4f2:	4b84      	ldr	r3, [pc, #528]	@ (801e704 <ip4_reass+0x2b0>)
 801e4f4:	881b      	ldrh	r3, [r3, #0]
 801e4f6:	461a      	mov	r2, r3
 801e4f8:	8c3b      	ldrh	r3, [r7, #32]
 801e4fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e4fc:	2b0a      	cmp	r3, #10
 801e4fe:	f300 812f 	bgt.w	801e760 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e502:	4b81      	ldr	r3, [pc, #516]	@ (801e708 <ip4_reass+0x2b4>)
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	633b      	str	r3, [r7, #48]	@ 0x30
 801e508:	e015      	b.n	801e536 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e50c:	695a      	ldr	r2, [r3, #20]
 801e50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e510:	68db      	ldr	r3, [r3, #12]
 801e512:	429a      	cmp	r2, r3
 801e514:	d10c      	bne.n	801e530 <ip4_reass+0xdc>
 801e516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e518:	699a      	ldr	r2, [r3, #24]
 801e51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e51c:	691b      	ldr	r3, [r3, #16]
 801e51e:	429a      	cmp	r2, r3
 801e520:	d106      	bne.n	801e530 <ip4_reass+0xdc>
 801e522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e524:	899a      	ldrh	r2, [r3, #12]
 801e526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e528:	889b      	ldrh	r3, [r3, #4]
 801e52a:	b29b      	uxth	r3, r3
 801e52c:	429a      	cmp	r2, r3
 801e52e:	d006      	beq.n	801e53e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	633b      	str	r3, [r7, #48]	@ 0x30
 801e536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d1e6      	bne.n	801e50a <ip4_reass+0xb6>
 801e53c:	e000      	b.n	801e540 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e53e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e542:	2b00      	cmp	r3, #0
 801e544:	d109      	bne.n	801e55a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e546:	8c3b      	ldrh	r3, [r7, #32]
 801e548:	4619      	mov	r1, r3
 801e54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e54c:	f7ff fdb0 	bl	801e0b0 <ip_reass_enqueue_new_datagram>
 801e550:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e554:	2b00      	cmp	r3, #0
 801e556:	d11c      	bne.n	801e592 <ip4_reass+0x13e>
      goto nullreturn;
 801e558:	e105      	b.n	801e766 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e55c:	88db      	ldrh	r3, [r3, #6]
 801e55e:	b29b      	uxth	r3, r3
 801e560:	4618      	mov	r0, r3
 801e562:	f7f4 fe3f 	bl	80131e4 <lwip_htons>
 801e566:	4603      	mov	r3, r0
 801e568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	d110      	bne.n	801e592 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e572:	89db      	ldrh	r3, [r3, #14]
 801e574:	4618      	mov	r0, r3
 801e576:	f7f4 fe35 	bl	80131e4 <lwip_htons>
 801e57a:	4603      	mov	r3, r0
 801e57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e580:	2b00      	cmp	r3, #0
 801e582:	d006      	beq.n	801e592 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e586:	3308      	adds	r3, #8
 801e588:	2214      	movs	r2, #20
 801e58a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e58c:	4618      	mov	r0, r3
 801e58e:	f001 fe5e 	bl	802024e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e594:	88db      	ldrh	r3, [r3, #6]
 801e596:	b29b      	uxth	r3, r3
 801e598:	f003 0320 	and.w	r3, r3, #32
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	bf0c      	ite	eq
 801e5a0:	2301      	moveq	r3, #1
 801e5a2:	2300      	movne	r3, #0
 801e5a4:	b2db      	uxtb	r3, r3
 801e5a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e5a8:	69fb      	ldr	r3, [r7, #28]
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d00e      	beq.n	801e5cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801e5ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e5b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e5b2:	4413      	add	r3, r2
 801e5b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e5b6:	8b7a      	ldrh	r2, [r7, #26]
 801e5b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801e5ba:	429a      	cmp	r2, r3
 801e5bc:	f0c0 80a0 	bcc.w	801e700 <ip4_reass+0x2ac>
 801e5c0:	8b7b      	ldrh	r3, [r7, #26]
 801e5c2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801e5c6:	4293      	cmp	r3, r2
 801e5c8:	f200 809a 	bhi.w	801e700 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e5cc:	69fa      	ldr	r2, [r7, #28]
 801e5ce:	6879      	ldr	r1, [r7, #4]
 801e5d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e5d2:	f7ff fdd5 	bl	801e180 <ip_reass_chain_frag_into_datagram_and_validate>
 801e5d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e5d8:	697b      	ldr	r3, [r7, #20]
 801e5da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e5de:	f000 809b 	beq.w	801e718 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e5e2:	4b48      	ldr	r3, [pc, #288]	@ (801e704 <ip4_reass+0x2b0>)
 801e5e4:	881a      	ldrh	r2, [r3, #0]
 801e5e6:	8c3b      	ldrh	r3, [r7, #32]
 801e5e8:	4413      	add	r3, r2
 801e5ea:	b29a      	uxth	r2, r3
 801e5ec:	4b45      	ldr	r3, [pc, #276]	@ (801e704 <ip4_reass+0x2b0>)
 801e5ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e5f0:	69fb      	ldr	r3, [r7, #28]
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d00d      	beq.n	801e612 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801e5f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e5f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e5fa:	4413      	add	r3, r2
 801e5fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e600:	8a7a      	ldrh	r2, [r7, #18]
 801e602:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e606:	7f9b      	ldrb	r3, [r3, #30]
 801e608:	f043 0301 	orr.w	r3, r3, #1
 801e60c:	b2da      	uxtb	r2, r3
 801e60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e610:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e612:	697b      	ldr	r3, [r7, #20]
 801e614:	2b01      	cmp	r3, #1
 801e616:	d171      	bne.n	801e6fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e61a:	8b9b      	ldrh	r3, [r3, #28]
 801e61c:	3314      	adds	r3, #20
 801e61e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e622:	685b      	ldr	r3, [r3, #4]
 801e624:	685b      	ldr	r3, [r3, #4]
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e62c:	685b      	ldr	r3, [r3, #4]
 801e62e:	685b      	ldr	r3, [r3, #4]
 801e630:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e634:	3308      	adds	r3, #8
 801e636:	2214      	movs	r2, #20
 801e638:	4619      	mov	r1, r3
 801e63a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e63c:	f001 fe07 	bl	802024e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e640:	8a3b      	ldrh	r3, [r7, #16]
 801e642:	4618      	mov	r0, r3
 801e644:	f7f4 fdce 	bl	80131e4 <lwip_htons>
 801e648:	4603      	mov	r3, r0
 801e64a:	461a      	mov	r2, r3
 801e64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e64e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e652:	2200      	movs	r2, #0
 801e654:	719a      	strb	r2, [r3, #6]
 801e656:	2200      	movs	r2, #0
 801e658:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e65c:	2200      	movs	r2, #0
 801e65e:	729a      	strb	r2, [r3, #10]
 801e660:	2200      	movs	r2, #0
 801e662:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e666:	685b      	ldr	r3, [r3, #4]
 801e668:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e66a:	e00d      	b.n	801e688 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801e66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e66e:	685b      	ldr	r3, [r3, #4]
 801e670:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e672:	2114      	movs	r1, #20
 801e674:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e676:	f7f6 fa13 	bl	8014aa0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e67a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e67c:	6878      	ldr	r0, [r7, #4]
 801e67e:	f7f6 fb63 	bl	8014d48 <pbuf_cat>
      r = iprh->next_pbuf;
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801e688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d1ee      	bne.n	801e66c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e68e:	4b1e      	ldr	r3, [pc, #120]	@ (801e708 <ip4_reass+0x2b4>)
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e694:	429a      	cmp	r2, r3
 801e696:	d102      	bne.n	801e69e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801e698:	2300      	movs	r3, #0
 801e69a:	637b      	str	r3, [r7, #52]	@ 0x34
 801e69c:	e010      	b.n	801e6c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e69e:	4b1a      	ldr	r3, [pc, #104]	@ (801e708 <ip4_reass+0x2b4>)
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	637b      	str	r3, [r7, #52]	@ 0x34
 801e6a4:	e007      	b.n	801e6b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801e6a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e6ac:	429a      	cmp	r2, r3
 801e6ae:	d006      	beq.n	801e6be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	637b      	str	r3, [r7, #52]	@ 0x34
 801e6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d1f4      	bne.n	801e6a6 <ip4_reass+0x252>
 801e6bc:	e000      	b.n	801e6c0 <ip4_reass+0x26c>
          break;
 801e6be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e6c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e6c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e6c4:	f7ff fd2e 	bl	801e124 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e6c8:	6878      	ldr	r0, [r7, #4]
 801e6ca:	f7f6 fafd 	bl	8014cc8 <pbuf_clen>
 801e6ce:	4603      	mov	r3, r0
 801e6d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e6d2:	4b0c      	ldr	r3, [pc, #48]	@ (801e704 <ip4_reass+0x2b0>)
 801e6d4:	881b      	ldrh	r3, [r3, #0]
 801e6d6:	8c3a      	ldrh	r2, [r7, #32]
 801e6d8:	429a      	cmp	r2, r3
 801e6da:	d906      	bls.n	801e6ea <ip4_reass+0x296>
 801e6dc:	4b0b      	ldr	r3, [pc, #44]	@ (801e70c <ip4_reass+0x2b8>)
 801e6de:	f240 229b 	movw	r2, #667	@ 0x29b
 801e6e2:	490b      	ldr	r1, [pc, #44]	@ (801e710 <ip4_reass+0x2bc>)
 801e6e4:	480b      	ldr	r0, [pc, #44]	@ (801e714 <ip4_reass+0x2c0>)
 801e6e6:	f001 fbdd 	bl	801fea4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e6ea:	4b06      	ldr	r3, [pc, #24]	@ (801e704 <ip4_reass+0x2b0>)
 801e6ec:	881a      	ldrh	r2, [r3, #0]
 801e6ee:	8c3b      	ldrh	r3, [r7, #32]
 801e6f0:	1ad3      	subs	r3, r2, r3
 801e6f2:	b29a      	uxth	r2, r3
 801e6f4:	4b03      	ldr	r3, [pc, #12]	@ (801e704 <ip4_reass+0x2b0>)
 801e6f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	e038      	b.n	801e76e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e6fc:	2300      	movs	r3, #0
 801e6fe:	e036      	b.n	801e76e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801e700:	bf00      	nop
 801e702:	e00a      	b.n	801e71a <ip4_reass+0x2c6>
 801e704:	200228f8 	.word	0x200228f8
 801e708:	200228f4 	.word	0x200228f4
 801e70c:	08024c78 	.word	0x08024c78
 801e710:	08024de8 	.word	0x08024de8
 801e714:	08024cc0 	.word	0x08024cc0
    goto nullreturn_ipr;
 801e718:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	d106      	bne.n	801e72e <ip4_reass+0x2da>
 801e720:	4b15      	ldr	r3, [pc, #84]	@ (801e778 <ip4_reass+0x324>)
 801e722:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801e726:	4915      	ldr	r1, [pc, #84]	@ (801e77c <ip4_reass+0x328>)
 801e728:	4815      	ldr	r0, [pc, #84]	@ (801e780 <ip4_reass+0x32c>)
 801e72a:	f001 fbbb 	bl	801fea4 <iprintf>
  if (ipr->p == NULL) {
 801e72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e730:	685b      	ldr	r3, [r3, #4]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d116      	bne.n	801e764 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e736:	4b13      	ldr	r3, [pc, #76]	@ (801e784 <ip4_reass+0x330>)
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e73c:	429a      	cmp	r2, r3
 801e73e:	d006      	beq.n	801e74e <ip4_reass+0x2fa>
 801e740:	4b0d      	ldr	r3, [pc, #52]	@ (801e778 <ip4_reass+0x324>)
 801e742:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801e746:	4910      	ldr	r1, [pc, #64]	@ (801e788 <ip4_reass+0x334>)
 801e748:	480d      	ldr	r0, [pc, #52]	@ (801e780 <ip4_reass+0x32c>)
 801e74a:	f001 fbab 	bl	801fea4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e74e:	2100      	movs	r1, #0
 801e750:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e752:	f7ff fce7 	bl	801e124 <ip_reass_dequeue_datagram>
 801e756:	e006      	b.n	801e766 <ip4_reass+0x312>
    goto nullreturn;
 801e758:	bf00      	nop
 801e75a:	e004      	b.n	801e766 <ip4_reass+0x312>
    goto nullreturn;
 801e75c:	bf00      	nop
 801e75e:	e002      	b.n	801e766 <ip4_reass+0x312>
      goto nullreturn;
 801e760:	bf00      	nop
 801e762:	e000      	b.n	801e766 <ip4_reass+0x312>
  }

nullreturn:
 801e764:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e766:	6878      	ldr	r0, [r7, #4]
 801e768:	f7f6 fa20 	bl	8014bac <pbuf_free>
  return NULL;
 801e76c:	2300      	movs	r3, #0
}
 801e76e:	4618      	mov	r0, r3
 801e770:	3738      	adds	r7, #56	@ 0x38
 801e772:	46bd      	mov	sp, r7
 801e774:	bd80      	pop	{r7, pc}
 801e776:	bf00      	nop
 801e778:	08024c78 	.word	0x08024c78
 801e77c:	08024e04 	.word	0x08024e04
 801e780:	08024cc0 	.word	0x08024cc0
 801e784:	200228f4 	.word	0x200228f4
 801e788:	08024e10 	.word	0x08024e10

0801e78c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e78c:	b580      	push	{r7, lr}
 801e78e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e790:	2005      	movs	r0, #5
 801e792:	f7f5 f9fb 	bl	8013b8c <memp_malloc>
 801e796:	4603      	mov	r3, r0
}
 801e798:	4618      	mov	r0, r3
 801e79a:	bd80      	pop	{r7, pc}

0801e79c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b082      	sub	sp, #8
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d106      	bne.n	801e7b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e7aa:	4b07      	ldr	r3, [pc, #28]	@ (801e7c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e7ac:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801e7b0:	4906      	ldr	r1, [pc, #24]	@ (801e7cc <ip_frag_free_pbuf_custom_ref+0x30>)
 801e7b2:	4807      	ldr	r0, [pc, #28]	@ (801e7d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e7b4:	f001 fb76 	bl	801fea4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e7b8:	6879      	ldr	r1, [r7, #4]
 801e7ba:	2005      	movs	r0, #5
 801e7bc:	f7f5 fa5c 	bl	8013c78 <memp_free>
}
 801e7c0:	bf00      	nop
 801e7c2:	3708      	adds	r7, #8
 801e7c4:	46bd      	mov	sp, r7
 801e7c6:	bd80      	pop	{r7, pc}
 801e7c8:	08024c78 	.word	0x08024c78
 801e7cc:	08024e30 	.word	0x08024e30
 801e7d0:	08024cc0 	.word	0x08024cc0

0801e7d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e7d4:	b580      	push	{r7, lr}
 801e7d6:	b084      	sub	sp, #16
 801e7d8:	af00      	add	r7, sp, #0
 801e7da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	d106      	bne.n	801e7f4 <ipfrag_free_pbuf_custom+0x20>
 801e7e6:	4b11      	ldr	r3, [pc, #68]	@ (801e82c <ipfrag_free_pbuf_custom+0x58>)
 801e7e8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801e7ec:	4910      	ldr	r1, [pc, #64]	@ (801e830 <ipfrag_free_pbuf_custom+0x5c>)
 801e7ee:	4811      	ldr	r0, [pc, #68]	@ (801e834 <ipfrag_free_pbuf_custom+0x60>)
 801e7f0:	f001 fb58 	bl	801fea4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e7f4:	68fa      	ldr	r2, [r7, #12]
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	429a      	cmp	r2, r3
 801e7fa:	d006      	beq.n	801e80a <ipfrag_free_pbuf_custom+0x36>
 801e7fc:	4b0b      	ldr	r3, [pc, #44]	@ (801e82c <ipfrag_free_pbuf_custom+0x58>)
 801e7fe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801e802:	490d      	ldr	r1, [pc, #52]	@ (801e838 <ipfrag_free_pbuf_custom+0x64>)
 801e804:	480b      	ldr	r0, [pc, #44]	@ (801e834 <ipfrag_free_pbuf_custom+0x60>)
 801e806:	f001 fb4d 	bl	801fea4 <iprintf>
  if (pcr->original != NULL) {
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	695b      	ldr	r3, [r3, #20]
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d004      	beq.n	801e81c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	695b      	ldr	r3, [r3, #20]
 801e816:	4618      	mov	r0, r3
 801e818:	f7f6 f9c8 	bl	8014bac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e81c:	68f8      	ldr	r0, [r7, #12]
 801e81e:	f7ff ffbd 	bl	801e79c <ip_frag_free_pbuf_custom_ref>
}
 801e822:	bf00      	nop
 801e824:	3710      	adds	r7, #16
 801e826:	46bd      	mov	sp, r7
 801e828:	bd80      	pop	{r7, pc}
 801e82a:	bf00      	nop
 801e82c:	08024c78 	.word	0x08024c78
 801e830:	08024e3c 	.word	0x08024e3c
 801e834:	08024cc0 	.word	0x08024cc0
 801e838:	08024e48 	.word	0x08024e48

0801e83c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e83c:	b580      	push	{r7, lr}
 801e83e:	b094      	sub	sp, #80	@ 0x50
 801e840:	af02      	add	r7, sp, #8
 801e842:	60f8      	str	r0, [r7, #12]
 801e844:	60b9      	str	r1, [r7, #8]
 801e846:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e848:	2300      	movs	r3, #0
 801e84a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e84e:	68bb      	ldr	r3, [r7, #8]
 801e850:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e852:	3b14      	subs	r3, #20
 801e854:	2b00      	cmp	r3, #0
 801e856:	da00      	bge.n	801e85a <ip4_frag+0x1e>
 801e858:	3307      	adds	r3, #7
 801e85a:	10db      	asrs	r3, r3, #3
 801e85c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e85e:	2314      	movs	r3, #20
 801e860:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e862:	68fb      	ldr	r3, [r7, #12]
 801e864:	685b      	ldr	r3, [r3, #4]
 801e866:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801e868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e86a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e86e:	781b      	ldrb	r3, [r3, #0]
 801e870:	f003 030f 	and.w	r3, r3, #15
 801e874:	b2db      	uxtb	r3, r3
 801e876:	009b      	lsls	r3, r3, #2
 801e878:	b2db      	uxtb	r3, r3
 801e87a:	2b14      	cmp	r3, #20
 801e87c:	d002      	beq.n	801e884 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e87e:	f06f 0305 	mvn.w	r3, #5
 801e882:	e110      	b.n	801eaa6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	895b      	ldrh	r3, [r3, #10]
 801e888:	2b13      	cmp	r3, #19
 801e88a:	d809      	bhi.n	801e8a0 <ip4_frag+0x64>
 801e88c:	4b88      	ldr	r3, [pc, #544]	@ (801eab0 <ip4_frag+0x274>)
 801e88e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801e892:	4988      	ldr	r1, [pc, #544]	@ (801eab4 <ip4_frag+0x278>)
 801e894:	4888      	ldr	r0, [pc, #544]	@ (801eab8 <ip4_frag+0x27c>)
 801e896:	f001 fb05 	bl	801fea4 <iprintf>
 801e89a:	f06f 0305 	mvn.w	r3, #5
 801e89e:	e102      	b.n	801eaa6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e8a2:	88db      	ldrh	r3, [r3, #6]
 801e8a4:	b29b      	uxth	r3, r3
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	f7f4 fc9c 	bl	80131e4 <lwip_htons>
 801e8ac:	4603      	mov	r3, r0
 801e8ae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801e8b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e8b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e8b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e8ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e8bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801e8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	891b      	ldrh	r3, [r3, #8]
 801e8c6:	3b14      	subs	r3, #20
 801e8c8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801e8cc:	e0e1      	b.n	801ea92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e8ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e8d0:	00db      	lsls	r3, r3, #3
 801e8d2:	b29b      	uxth	r3, r3
 801e8d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e8d8:	4293      	cmp	r3, r2
 801e8da:	bf28      	it	cs
 801e8dc:	4613      	movcs	r3, r2
 801e8de:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e8e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e8e4:	2114      	movs	r1, #20
 801e8e6:	200e      	movs	r0, #14
 801e8e8:	f7f5 fe7c 	bl	80145e4 <pbuf_alloc>
 801e8ec:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801e8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	f000 80d5 	beq.w	801eaa0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8f8:	895b      	ldrh	r3, [r3, #10]
 801e8fa:	2b13      	cmp	r3, #19
 801e8fc:	d806      	bhi.n	801e90c <ip4_frag+0xd0>
 801e8fe:	4b6c      	ldr	r3, [pc, #432]	@ (801eab0 <ip4_frag+0x274>)
 801e900:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801e904:	496d      	ldr	r1, [pc, #436]	@ (801eabc <ip4_frag+0x280>)
 801e906:	486c      	ldr	r0, [pc, #432]	@ (801eab8 <ip4_frag+0x27c>)
 801e908:	f001 facc 	bl	801fea4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e90e:	685b      	ldr	r3, [r3, #4]
 801e910:	2214      	movs	r2, #20
 801e912:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e914:	4618      	mov	r0, r3
 801e916:	f001 fc9a 	bl	802024e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e91c:	685b      	ldr	r3, [r3, #4]
 801e91e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801e920:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e922:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801e926:	e064      	b.n	801e9f2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	895a      	ldrh	r2, [r3, #10]
 801e92c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e92e:	1ad3      	subs	r3, r2, r3
 801e930:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	895b      	ldrh	r3, [r3, #10]
 801e936:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e938:	429a      	cmp	r2, r3
 801e93a:	d906      	bls.n	801e94a <ip4_frag+0x10e>
 801e93c:	4b5c      	ldr	r3, [pc, #368]	@ (801eab0 <ip4_frag+0x274>)
 801e93e:	f240 322d 	movw	r2, #813	@ 0x32d
 801e942:	495f      	ldr	r1, [pc, #380]	@ (801eac0 <ip4_frag+0x284>)
 801e944:	485c      	ldr	r0, [pc, #368]	@ (801eab8 <ip4_frag+0x27c>)
 801e946:	f001 faad 	bl	801fea4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e94a:	8bfa      	ldrh	r2, [r7, #30]
 801e94c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e950:	4293      	cmp	r3, r2
 801e952:	bf28      	it	cs
 801e954:	4613      	movcs	r3, r2
 801e956:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e95a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d105      	bne.n	801e96e <ip4_frag+0x132>
        poff = 0;
 801e962:	2300      	movs	r3, #0
 801e964:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e966:	68fb      	ldr	r3, [r7, #12]
 801e968:	681b      	ldr	r3, [r3, #0]
 801e96a:	60fb      	str	r3, [r7, #12]
        continue;
 801e96c:	e041      	b.n	801e9f2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e96e:	f7ff ff0d 	bl	801e78c <ip_frag_alloc_pbuf_custom_ref>
 801e972:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e974:	69bb      	ldr	r3, [r7, #24]
 801e976:	2b00      	cmp	r3, #0
 801e978:	d103      	bne.n	801e982 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e97a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e97c:	f7f6 f916 	bl	8014bac <pbuf_free>
        goto memerr;
 801e980:	e08f      	b.n	801eaa2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e982:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e984:	68fb      	ldr	r3, [r7, #12]
 801e986:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e988:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e98a:	4413      	add	r3, r2
 801e98c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801e990:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801e994:	9201      	str	r2, [sp, #4]
 801e996:	9300      	str	r3, [sp, #0]
 801e998:	4603      	mov	r3, r0
 801e99a:	2241      	movs	r2, #65	@ 0x41
 801e99c:	2000      	movs	r0, #0
 801e99e:	f7f5 ff4b 	bl	8014838 <pbuf_alloced_custom>
 801e9a2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e9a4:	697b      	ldr	r3, [r7, #20]
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d106      	bne.n	801e9b8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e9aa:	69b8      	ldr	r0, [r7, #24]
 801e9ac:	f7ff fef6 	bl	801e79c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e9b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e9b2:	f7f6 f8fb 	bl	8014bac <pbuf_free>
        goto memerr;
 801e9b6:	e074      	b.n	801eaa2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801e9b8:	68f8      	ldr	r0, [r7, #12]
 801e9ba:	f7f6 f99d 	bl	8014cf8 <pbuf_ref>
      pcr->original = p;
 801e9be:	69bb      	ldr	r3, [r7, #24]
 801e9c0:	68fa      	ldr	r2, [r7, #12]
 801e9c2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e9c4:	69bb      	ldr	r3, [r7, #24]
 801e9c6:	4a3f      	ldr	r2, [pc, #252]	@ (801eac4 <ip4_frag+0x288>)
 801e9c8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e9ca:	6979      	ldr	r1, [r7, #20]
 801e9cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e9ce:	f7f6 f9bb 	bl	8014d48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e9d2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801e9d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e9da:	1ad3      	subs	r3, r2, r3
 801e9dc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801e9e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d004      	beq.n	801e9f2 <ip4_frag+0x1b6>
        poff = 0;
 801e9e8:	2300      	movs	r3, #0
 801e9ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e9ec:	68fb      	ldr	r3, [r7, #12]
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e9f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	d196      	bne.n	801e928 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e9fa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e9fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ea00:	4413      	add	r3, r2
 801ea02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ea04:	68bb      	ldr	r3, [r7, #8]
 801ea06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ea08:	f1a3 0213 	sub.w	r2, r3, #19
 801ea0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea10:	429a      	cmp	r2, r3
 801ea12:	bfcc      	ite	gt
 801ea14:	2301      	movgt	r3, #1
 801ea16:	2300      	movle	r3, #0
 801ea18:	b2db      	uxtb	r3, r3
 801ea1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ea1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ea20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ea24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801ea26:	6a3b      	ldr	r3, [r7, #32]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d002      	beq.n	801ea32 <ip4_frag+0x1f6>
 801ea2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d003      	beq.n	801ea3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ea32:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ea34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ea38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ea3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ea3c:	4618      	mov	r0, r3
 801ea3e:	f7f4 fbd1 	bl	80131e4 <lwip_htons>
 801ea42:	4603      	mov	r3, r0
 801ea44:	461a      	mov	r2, r3
 801ea46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ea4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ea4c:	3314      	adds	r3, #20
 801ea4e:	b29b      	uxth	r3, r3
 801ea50:	4618      	mov	r0, r3
 801ea52:	f7f4 fbc7 	bl	80131e4 <lwip_htons>
 801ea56:	4603      	mov	r3, r0
 801ea58:	461a      	mov	r2, r3
 801ea5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ea5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea60:	2200      	movs	r2, #0
 801ea62:	729a      	strb	r2, [r3, #10]
 801ea64:	2200      	movs	r2, #0
 801ea66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ea68:	68bb      	ldr	r3, [r7, #8]
 801ea6a:	695b      	ldr	r3, [r3, #20]
 801ea6c:	687a      	ldr	r2, [r7, #4]
 801ea6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ea70:	68b8      	ldr	r0, [r7, #8]
 801ea72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ea74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ea76:	f7f6 f899 	bl	8014bac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ea7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ea7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ea80:	1ad3      	subs	r3, r2, r3
 801ea82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ea86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ea8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ea8c:	4413      	add	r3, r2
 801ea8e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801ea92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	f47f af19 	bne.w	801e8ce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ea9c:	2300      	movs	r3, #0
 801ea9e:	e002      	b.n	801eaa6 <ip4_frag+0x26a>
      goto memerr;
 801eaa0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801eaa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	3748      	adds	r7, #72	@ 0x48
 801eaaa:	46bd      	mov	sp, r7
 801eaac:	bd80      	pop	{r7, pc}
 801eaae:	bf00      	nop
 801eab0:	08024c78 	.word	0x08024c78
 801eab4:	08024e54 	.word	0x08024e54
 801eab8:	08024cc0 	.word	0x08024cc0
 801eabc:	08024e70 	.word	0x08024e70
 801eac0:	08024e90 	.word	0x08024e90
 801eac4:	0801e7d5 	.word	0x0801e7d5

0801eac8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b086      	sub	sp, #24
 801eacc:	af00      	add	r7, sp, #0
 801eace:	6078      	str	r0, [r7, #4]
 801ead0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ead2:	230e      	movs	r3, #14
 801ead4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ead6:	687b      	ldr	r3, [r7, #4]
 801ead8:	895b      	ldrh	r3, [r3, #10]
 801eada:	2b0e      	cmp	r3, #14
 801eadc:	d96e      	bls.n	801ebbc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	7bdb      	ldrb	r3, [r3, #15]
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d106      	bne.n	801eaf4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801eae6:	683b      	ldr	r3, [r7, #0]
 801eae8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801eaec:	3301      	adds	r3, #1
 801eaee:	b2da      	uxtb	r2, r3
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	685b      	ldr	r3, [r3, #4]
 801eaf8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801eafa:	693b      	ldr	r3, [r7, #16]
 801eafc:	7b1a      	ldrb	r2, [r3, #12]
 801eafe:	7b5b      	ldrb	r3, [r3, #13]
 801eb00:	021b      	lsls	r3, r3, #8
 801eb02:	4313      	orrs	r3, r2
 801eb04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801eb06:	693b      	ldr	r3, [r7, #16]
 801eb08:	781b      	ldrb	r3, [r3, #0]
 801eb0a:	f003 0301 	and.w	r3, r3, #1
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d023      	beq.n	801eb5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801eb12:	693b      	ldr	r3, [r7, #16]
 801eb14:	781b      	ldrb	r3, [r3, #0]
 801eb16:	2b01      	cmp	r3, #1
 801eb18:	d10f      	bne.n	801eb3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eb1a:	693b      	ldr	r3, [r7, #16]
 801eb1c:	785b      	ldrb	r3, [r3, #1]
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d11b      	bne.n	801eb5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801eb22:	693b      	ldr	r3, [r7, #16]
 801eb24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801eb26:	2b5e      	cmp	r3, #94	@ 0x5e
 801eb28:	d117      	bne.n	801eb5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	7b5b      	ldrb	r3, [r3, #13]
 801eb2e:	f043 0310 	orr.w	r3, r3, #16
 801eb32:	b2da      	uxtb	r2, r3
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	735a      	strb	r2, [r3, #13]
 801eb38:	e00f      	b.n	801eb5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801eb3a:	693b      	ldr	r3, [r7, #16]
 801eb3c:	2206      	movs	r2, #6
 801eb3e:	4928      	ldr	r1, [pc, #160]	@ (801ebe0 <ethernet_input+0x118>)
 801eb40:	4618      	mov	r0, r3
 801eb42:	f001 faff 	bl	8020144 <memcmp>
 801eb46:	4603      	mov	r3, r0
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d106      	bne.n	801eb5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	7b5b      	ldrb	r3, [r3, #13]
 801eb50:	f043 0308 	orr.w	r3, r3, #8
 801eb54:	b2da      	uxtb	r2, r3
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801eb5a:	89fb      	ldrh	r3, [r7, #14]
 801eb5c:	2b08      	cmp	r3, #8
 801eb5e:	d003      	beq.n	801eb68 <ethernet_input+0xa0>
 801eb60:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801eb64:	d014      	beq.n	801eb90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801eb66:	e032      	b.n	801ebce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801eb68:	683b      	ldr	r3, [r7, #0]
 801eb6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801eb6e:	f003 0308 	and.w	r3, r3, #8
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d024      	beq.n	801ebc0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801eb76:	8afb      	ldrh	r3, [r7, #22]
 801eb78:	4619      	mov	r1, r3
 801eb7a:	6878      	ldr	r0, [r7, #4]
 801eb7c:	f7f5 ff90 	bl	8014aa0 <pbuf_remove_header>
 801eb80:	4603      	mov	r3, r0
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d11e      	bne.n	801ebc4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801eb86:	6839      	ldr	r1, [r7, #0]
 801eb88:	6878      	ldr	r0, [r7, #4]
 801eb8a:	f7fe ff21 	bl	801d9d0 <ip4_input>
      break;
 801eb8e:	e013      	b.n	801ebb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801eb90:	683b      	ldr	r3, [r7, #0]
 801eb92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801eb96:	f003 0308 	and.w	r3, r3, #8
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d014      	beq.n	801ebc8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801eb9e:	8afb      	ldrh	r3, [r7, #22]
 801eba0:	4619      	mov	r1, r3
 801eba2:	6878      	ldr	r0, [r7, #4]
 801eba4:	f7f5 ff7c 	bl	8014aa0 <pbuf_remove_header>
 801eba8:	4603      	mov	r3, r0
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d10e      	bne.n	801ebcc <ethernet_input+0x104>
        etharp_input(p, netif);
 801ebae:	6839      	ldr	r1, [r7, #0]
 801ebb0:	6878      	ldr	r0, [r7, #4]
 801ebb2:	f7fe f82f 	bl	801cc14 <etharp_input>
      break;
 801ebb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ebb8:	2300      	movs	r3, #0
 801ebba:	e00c      	b.n	801ebd6 <ethernet_input+0x10e>
    goto free_and_return;
 801ebbc:	bf00      	nop
 801ebbe:	e006      	b.n	801ebce <ethernet_input+0x106>
        goto free_and_return;
 801ebc0:	bf00      	nop
 801ebc2:	e004      	b.n	801ebce <ethernet_input+0x106>
        goto free_and_return;
 801ebc4:	bf00      	nop
 801ebc6:	e002      	b.n	801ebce <ethernet_input+0x106>
        goto free_and_return;
 801ebc8:	bf00      	nop
 801ebca:	e000      	b.n	801ebce <ethernet_input+0x106>
        goto free_and_return;
 801ebcc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ebce:	6878      	ldr	r0, [r7, #4]
 801ebd0:	f7f5 ffec 	bl	8014bac <pbuf_free>
  return ERR_OK;
 801ebd4:	2300      	movs	r3, #0
}
 801ebd6:	4618      	mov	r0, r3
 801ebd8:	3718      	adds	r7, #24
 801ebda:	46bd      	mov	sp, r7
 801ebdc:	bd80      	pop	{r7, pc}
 801ebde:	bf00      	nop
 801ebe0:	0802548c 	.word	0x0802548c

0801ebe4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ebe4:	b580      	push	{r7, lr}
 801ebe6:	b086      	sub	sp, #24
 801ebe8:	af00      	add	r7, sp, #0
 801ebea:	60f8      	str	r0, [r7, #12]
 801ebec:	60b9      	str	r1, [r7, #8]
 801ebee:	607a      	str	r2, [r7, #4]
 801ebf0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ebf2:	8c3b      	ldrh	r3, [r7, #32]
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f7f4 faf5 	bl	80131e4 <lwip_htons>
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ebfe:	210e      	movs	r1, #14
 801ec00:	68b8      	ldr	r0, [r7, #8]
 801ec02:	f7f5 ff3d 	bl	8014a80 <pbuf_add_header>
 801ec06:	4603      	mov	r3, r0
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d125      	bne.n	801ec58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ec0c:	68bb      	ldr	r3, [r7, #8]
 801ec0e:	685b      	ldr	r3, [r3, #4]
 801ec10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ec12:	693b      	ldr	r3, [r7, #16]
 801ec14:	8afa      	ldrh	r2, [r7, #22]
 801ec16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ec18:	693b      	ldr	r3, [r7, #16]
 801ec1a:	2206      	movs	r2, #6
 801ec1c:	6839      	ldr	r1, [r7, #0]
 801ec1e:	4618      	mov	r0, r3
 801ec20:	f001 fb15 	bl	802024e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ec24:	693b      	ldr	r3, [r7, #16]
 801ec26:	3306      	adds	r3, #6
 801ec28:	2206      	movs	r2, #6
 801ec2a:	6879      	ldr	r1, [r7, #4]
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	f001 fb0e 	bl	802024e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ec32:	68fb      	ldr	r3, [r7, #12]
 801ec34:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ec38:	2b06      	cmp	r3, #6
 801ec3a:	d006      	beq.n	801ec4a <ethernet_output+0x66>
 801ec3c:	4b0a      	ldr	r3, [pc, #40]	@ (801ec68 <ethernet_output+0x84>)
 801ec3e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801ec42:	490a      	ldr	r1, [pc, #40]	@ (801ec6c <ethernet_output+0x88>)
 801ec44:	480a      	ldr	r0, [pc, #40]	@ (801ec70 <ethernet_output+0x8c>)
 801ec46:	f001 f92d 	bl	801fea4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	699b      	ldr	r3, [r3, #24]
 801ec4e:	68b9      	ldr	r1, [r7, #8]
 801ec50:	68f8      	ldr	r0, [r7, #12]
 801ec52:	4798      	blx	r3
 801ec54:	4603      	mov	r3, r0
 801ec56:	e002      	b.n	801ec5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ec58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ec5a:	f06f 0301 	mvn.w	r3, #1
}
 801ec5e:	4618      	mov	r0, r3
 801ec60:	3718      	adds	r7, #24
 801ec62:	46bd      	mov	sp, r7
 801ec64:	bd80      	pop	{r7, pc}
 801ec66:	bf00      	nop
 801ec68:	08024ea0 	.word	0x08024ea0
 801ec6c:	08024ed8 	.word	0x08024ed8
 801ec70:	08024f0c 	.word	0x08024f0c

0801ec74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ec74:	b580      	push	{r7, lr}
 801ec76:	b082      	sub	sp, #8
 801ec78:	af00      	add	r7, sp, #0
 801ec7a:	6078      	str	r0, [r7, #4]
 801ec7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ec7e:	683b      	ldr	r3, [r7, #0]
 801ec80:	2200      	movs	r2, #0
 801ec82:	2104      	movs	r1, #4
 801ec84:	4618      	mov	r0, r3
 801ec86:	f7ee f9d9 	bl	800d03c <osMessageQueueNew>
 801ec8a:	4602      	mov	r2, r0
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	d102      	bne.n	801ec9e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ec98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ec9c:	e000      	b.n	801eca0 <sys_mbox_new+0x2c>

  return ERR_OK;
 801ec9e:	2300      	movs	r3, #0
}
 801eca0:	4618      	mov	r0, r3
 801eca2:	3708      	adds	r7, #8
 801eca4:	46bd      	mov	sp, r7
 801eca6:	bd80      	pop	{r7, pc}

0801eca8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801eca8:	b580      	push	{r7, lr}
 801ecaa:	b082      	sub	sp, #8
 801ecac:	af00      	add	r7, sp, #0
 801ecae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	f7ee fb2d 	bl	800d314 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	f7ee fb5a 	bl	800d378 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ecc4:	bf00      	nop
 801ecc6:	3708      	adds	r7, #8
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd80      	pop	{r7, pc}

0801eccc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b084      	sub	sp, #16
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	6078      	str	r0, [r7, #4]
 801ecd4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	6818      	ldr	r0, [r3, #0]
 801ecda:	4639      	mov	r1, r7
 801ecdc:	2300      	movs	r3, #0
 801ecde:	2200      	movs	r2, #0
 801ece0:	f7ee fa32 	bl	800d148 <osMessageQueuePut>
 801ece4:	4603      	mov	r3, r0
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d102      	bne.n	801ecf0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ecea:	2300      	movs	r3, #0
 801ecec:	73fb      	strb	r3, [r7, #15]
 801ecee:	e001      	b.n	801ecf4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ecf0:	23ff      	movs	r3, #255	@ 0xff
 801ecf2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ecf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ecf8:	4618      	mov	r0, r3
 801ecfa:	3710      	adds	r7, #16
 801ecfc:	46bd      	mov	sp, r7
 801ecfe:	bd80      	pop	{r7, pc}

0801ed00 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ed00:	b580      	push	{r7, lr}
 801ed02:	b086      	sub	sp, #24
 801ed04:	af00      	add	r7, sp, #0
 801ed06:	60f8      	str	r0, [r7, #12]
 801ed08:	60b9      	str	r1, [r7, #8]
 801ed0a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ed0c:	f7ed fca4 	bl	800c658 <osKernelGetTickCount>
 801ed10:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d013      	beq.n	801ed40 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ed18:	68fb      	ldr	r3, [r7, #12]
 801ed1a:	6818      	ldr	r0, [r3, #0]
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	2200      	movs	r2, #0
 801ed20:	68b9      	ldr	r1, [r7, #8]
 801ed22:	f7ee fa85 	bl	800d230 <osMessageQueueGet>
 801ed26:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ed28:	693b      	ldr	r3, [r7, #16]
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d105      	bne.n	801ed3a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ed2e:	f7ed fc93 	bl	800c658 <osKernelGetTickCount>
 801ed32:	4602      	mov	r2, r0
 801ed34:	697b      	ldr	r3, [r7, #20]
 801ed36:	1ad3      	subs	r3, r2, r3
 801ed38:	e00f      	b.n	801ed5a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ed3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ed3e:	e00c      	b.n	801ed5a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ed40:	68fb      	ldr	r3, [r7, #12]
 801ed42:	6818      	ldr	r0, [r3, #0]
 801ed44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ed48:	2200      	movs	r2, #0
 801ed4a:	68b9      	ldr	r1, [r7, #8]
 801ed4c:	f7ee fa70 	bl	800d230 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801ed50:	f7ed fc82 	bl	800c658 <osKernelGetTickCount>
 801ed54:	4602      	mov	r2, r0
 801ed56:	697b      	ldr	r3, [r7, #20]
 801ed58:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ed5a:	4618      	mov	r0, r3
 801ed5c:	3718      	adds	r7, #24
 801ed5e:	46bd      	mov	sp, r7
 801ed60:	bd80      	pop	{r7, pc}

0801ed62 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ed62:	b580      	push	{r7, lr}
 801ed64:	b082      	sub	sp, #8
 801ed66:	af00      	add	r7, sp, #0
 801ed68:	6078      	str	r0, [r7, #4]
 801ed6a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	6818      	ldr	r0, [r3, #0]
 801ed70:	2300      	movs	r3, #0
 801ed72:	2200      	movs	r2, #0
 801ed74:	6839      	ldr	r1, [r7, #0]
 801ed76:	f7ee fa5b 	bl	800d230 <osMessageQueueGet>
 801ed7a:	4603      	mov	r3, r0
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d101      	bne.n	801ed84 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801ed80:	2300      	movs	r3, #0
 801ed82:	e001      	b.n	801ed88 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ed84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801ed88:	4618      	mov	r0, r3
 801ed8a:	3708      	adds	r7, #8
 801ed8c:	46bd      	mov	sp, r7
 801ed8e:	bd80      	pop	{r7, pc}

0801ed90 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ed90:	b480      	push	{r7}
 801ed92:	b083      	sub	sp, #12
 801ed94:	af00      	add	r7, sp, #0
 801ed96:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d101      	bne.n	801eda4 <sys_mbox_valid+0x14>
    return 0;
 801eda0:	2300      	movs	r3, #0
 801eda2:	e000      	b.n	801eda6 <sys_mbox_valid+0x16>
  else
    return 1;
 801eda4:	2301      	movs	r3, #1
}
 801eda6:	4618      	mov	r0, r3
 801eda8:	370c      	adds	r7, #12
 801edaa:	46bd      	mov	sp, r7
 801edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edb0:	4770      	bx	lr

0801edb2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801edb2:	b480      	push	{r7}
 801edb4:	b083      	sub	sp, #12
 801edb6:	af00      	add	r7, sp, #0
 801edb8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	2200      	movs	r2, #0
 801edbe:	601a      	str	r2, [r3, #0]
}
 801edc0:	bf00      	nop
 801edc2:	370c      	adds	r7, #12
 801edc4:	46bd      	mov	sp, r7
 801edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edca:	4770      	bx	lr

0801edcc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801edcc:	b580      	push	{r7, lr}
 801edce:	b082      	sub	sp, #8
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	6078      	str	r0, [r7, #4]
 801edd4:	460b      	mov	r3, r1
 801edd6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801edd8:	78fb      	ldrb	r3, [r7, #3]
 801edda:	2200      	movs	r2, #0
 801eddc:	4619      	mov	r1, r3
 801edde:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801ede2:	f7ed ff9b 	bl	800cd1c <osSemaphoreNew>
 801ede6:	4602      	mov	r2, r0
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	2b00      	cmp	r3, #0
 801edf2:	d102      	bne.n	801edfa <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801edf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801edf8:	e009      	b.n	801ee0e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801edfa:	78fb      	ldrb	r3, [r7, #3]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d105      	bne.n	801ee0c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	2100      	movs	r1, #0
 801ee06:	4618      	mov	r0, r3
 801ee08:	f7ee f824 	bl	800ce54 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ee0c:	2300      	movs	r3, #0
}
 801ee0e:	4618      	mov	r0, r3
 801ee10:	3708      	adds	r7, #8
 801ee12:	46bd      	mov	sp, r7
 801ee14:	bd80      	pop	{r7, pc}

0801ee16 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ee16:	b580      	push	{r7, lr}
 801ee18:	b084      	sub	sp, #16
 801ee1a:	af00      	add	r7, sp, #0
 801ee1c:	6078      	str	r0, [r7, #4]
 801ee1e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801ee20:	f7ed fc1a 	bl	800c658 <osKernelGetTickCount>
 801ee24:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801ee26:	683b      	ldr	r3, [r7, #0]
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d011      	beq.n	801ee50 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	6839      	ldr	r1, [r7, #0]
 801ee32:	4618      	mov	r0, r3
 801ee34:	f7ee f80e 	bl	800ce54 <osSemaphoreAcquire>
 801ee38:	4603      	mov	r3, r0
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d105      	bne.n	801ee4a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801ee3e:	f7ed fc0b 	bl	800c658 <osKernelGetTickCount>
 801ee42:	4602      	mov	r2, r0
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	1ad3      	subs	r3, r2, r3
 801ee48:	e012      	b.n	801ee70 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ee4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee4e:	e00f      	b.n	801ee70 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801ee50:	bf00      	nop
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ee5a:	4618      	mov	r0, r3
 801ee5c:	f7ed fffa 	bl	800ce54 <osSemaphoreAcquire>
 801ee60:	4603      	mov	r3, r0
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d1f5      	bne.n	801ee52 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801ee66:	f7ed fbf7 	bl	800c658 <osKernelGetTickCount>
 801ee6a:	4602      	mov	r2, r0
 801ee6c:	68fb      	ldr	r3, [r7, #12]
 801ee6e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ee70:	4618      	mov	r0, r3
 801ee72:	3710      	adds	r7, #16
 801ee74:	46bd      	mov	sp, r7
 801ee76:	bd80      	pop	{r7, pc}

0801ee78 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ee78:	b580      	push	{r7, lr}
 801ee7a:	b082      	sub	sp, #8
 801ee7c:	af00      	add	r7, sp, #0
 801ee7e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	4618      	mov	r0, r3
 801ee86:	f7ee f84b 	bl	800cf20 <osSemaphoreRelease>
}
 801ee8a:	bf00      	nop
 801ee8c:	3708      	adds	r7, #8
 801ee8e:	46bd      	mov	sp, r7
 801ee90:	bd80      	pop	{r7, pc}

0801ee92 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ee92:	b580      	push	{r7, lr}
 801ee94:	b082      	sub	sp, #8
 801ee96:	af00      	add	r7, sp, #0
 801ee98:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	4618      	mov	r0, r3
 801eea0:	f7ee f896 	bl	800cfd0 <osSemaphoreDelete>
}
 801eea4:	bf00      	nop
 801eea6:	3708      	adds	r7, #8
 801eea8:	46bd      	mov	sp, r7
 801eeaa:	bd80      	pop	{r7, pc}

0801eeac <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801eeac:	b480      	push	{r7}
 801eeae:	b083      	sub	sp, #12
 801eeb0:	af00      	add	r7, sp, #0
 801eeb2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d101      	bne.n	801eec0 <sys_sem_valid+0x14>
    return 0;
 801eebc:	2300      	movs	r3, #0
 801eebe:	e000      	b.n	801eec2 <sys_sem_valid+0x16>
  else
    return 1;
 801eec0:	2301      	movs	r3, #1
}
 801eec2:	4618      	mov	r0, r3
 801eec4:	370c      	adds	r7, #12
 801eec6:	46bd      	mov	sp, r7
 801eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eecc:	4770      	bx	lr

0801eece <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801eece:	b480      	push	{r7}
 801eed0:	b083      	sub	sp, #12
 801eed2:	af00      	add	r7, sp, #0
 801eed4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	2200      	movs	r2, #0
 801eeda:	601a      	str	r2, [r3, #0]
}
 801eedc:	bf00      	nop
 801eede:	370c      	adds	r7, #12
 801eee0:	46bd      	mov	sp, r7
 801eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eee6:	4770      	bx	lr

0801eee8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801eee8:	b580      	push	{r7, lr}
 801eeea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801eeec:	2000      	movs	r0, #0
 801eeee:	f7ed fdcd 	bl	800ca8c <osMutexNew>
 801eef2:	4603      	mov	r3, r0
 801eef4:	4a01      	ldr	r2, [pc, #4]	@ (801eefc <sys_init+0x14>)
 801eef6:	6013      	str	r3, [r2, #0]
#endif
}
 801eef8:	bf00      	nop
 801eefa:	bd80      	pop	{r7, pc}
 801eefc:	200228fc 	.word	0x200228fc

0801ef00 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ef00:	b580      	push	{r7, lr}
 801ef02:	b082      	sub	sp, #8
 801ef04:	af00      	add	r7, sp, #0
 801ef06:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801ef08:	2000      	movs	r0, #0
 801ef0a:	f7ed fdbf 	bl	800ca8c <osMutexNew>
 801ef0e:	4602      	mov	r2, r0
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d102      	bne.n	801ef22 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ef1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef20:	e000      	b.n	801ef24 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ef22:	2300      	movs	r3, #0
}
 801ef24:	4618      	mov	r0, r3
 801ef26:	3708      	adds	r7, #8
 801ef28:	46bd      	mov	sp, r7
 801ef2a:	bd80      	pop	{r7, pc}

0801ef2c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ef2c:	b580      	push	{r7, lr}
 801ef2e:	b082      	sub	sp, #8
 801ef30:	af00      	add	r7, sp, #0
 801ef32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ef3c:	4618      	mov	r0, r3
 801ef3e:	f7ed fe3f 	bl	800cbc0 <osMutexAcquire>
#endif
}
 801ef42:	bf00      	nop
 801ef44:	3708      	adds	r7, #8
 801ef46:	46bd      	mov	sp, r7
 801ef48:	bd80      	pop	{r7, pc}

0801ef4a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ef4a:	b580      	push	{r7, lr}
 801ef4c:	b082      	sub	sp, #8
 801ef4e:	af00      	add	r7, sp, #0
 801ef50:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	681b      	ldr	r3, [r3, #0]
 801ef56:	4618      	mov	r0, r3
 801ef58:	f7ed fe90 	bl	800cc7c <osMutexRelease>
}
 801ef5c:	bf00      	nop
 801ef5e:	3708      	adds	r7, #8
 801ef60:	46bd      	mov	sp, r7
 801ef62:	bd80      	pop	{r7, pc}

0801ef64 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ef64:	b580      	push	{r7, lr}
 801ef66:	b08e      	sub	sp, #56	@ 0x38
 801ef68:	af00      	add	r7, sp, #0
 801ef6a:	60f8      	str	r0, [r7, #12]
 801ef6c:	60b9      	str	r1, [r7, #8]
 801ef6e:	607a      	str	r2, [r7, #4]
 801ef70:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801ef72:	f107 0314 	add.w	r3, r7, #20
 801ef76:	2224      	movs	r2, #36	@ 0x24
 801ef78:	2100      	movs	r1, #0
 801ef7a:	4618      	mov	r0, r3
 801ef7c:	f001 f8f2 	bl	8020164 <memset>
 801ef80:	68fb      	ldr	r3, [r7, #12]
 801ef82:	617b      	str	r3, [r7, #20]
 801ef84:	683b      	ldr	r3, [r7, #0]
 801ef86:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ef88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801ef8c:	f107 0314 	add.w	r3, r7, #20
 801ef90:	461a      	mov	r2, r3
 801ef92:	6879      	ldr	r1, [r7, #4]
 801ef94:	68b8      	ldr	r0, [r7, #8]
 801ef96:	f7ed fb87 	bl	800c6a8 <osThreadNew>
 801ef9a:	4603      	mov	r3, r0
#endif
}
 801ef9c:	4618      	mov	r0, r3
 801ef9e:	3738      	adds	r7, #56	@ 0x38
 801efa0:	46bd      	mov	sp, r7
 801efa2:	bd80      	pop	{r7, pc}

0801efa4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801efa4:	b580      	push	{r7, lr}
 801efa6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801efa8:	4b04      	ldr	r3, [pc, #16]	@ (801efbc <sys_arch_protect+0x18>)
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801efb0:	4618      	mov	r0, r3
 801efb2:	f7ed fe05 	bl	800cbc0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801efb6:	2301      	movs	r3, #1
}
 801efb8:	4618      	mov	r0, r3
 801efba:	bd80      	pop	{r7, pc}
 801efbc:	200228fc 	.word	0x200228fc

0801efc0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801efc0:	b580      	push	{r7, lr}
 801efc2:	b082      	sub	sp, #8
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801efc8:	4b04      	ldr	r3, [pc, #16]	@ (801efdc <sys_arch_unprotect+0x1c>)
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	4618      	mov	r0, r3
 801efce:	f7ed fe55 	bl	800cc7c <osMutexRelease>
}
 801efd2:	bf00      	nop
 801efd4:	3708      	adds	r7, #8
 801efd6:	46bd      	mov	sp, r7
 801efd8:	bd80      	pop	{r7, pc}
 801efda:	bf00      	nop
 801efdc:	200228fc 	.word	0x200228fc

0801efe0 <TestDispatcher>:
extern osMessageQueueId_t uartQueueHandle;
extern osMessageQueueId_t i2cQueueHandle;
extern osMessageQueueId_t spiQueueHandle;

void TestDispatcher(void)
{
 801efe0:	b580      	push	{r7, lr}
 801efe2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801efe6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("IN dispatcher\n");
 801efe8:	484c      	ldr	r0, [pc, #304]	@ (801f11c <TestDispatcher+0x13c>)
 801efea:	f000 ffcb 	bl	801ff84 <puts>
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801efee:	4b4c      	ldr	r3, [pc, #304]	@ (801f120 <TestDispatcher+0x140>)
 801eff0:	6818      	ldr	r0, [r3, #0]
 801eff2:	4639      	mov	r1, r7
 801eff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eff8:	2200      	movs	r2, #0
 801effa:	f7ee f919 	bl	800d230 <osMessageQueueGet>
 801effe:	4603      	mov	r3, r0
 801f000:	2b00      	cmp	r3, #0
 801f002:	d1f1      	bne.n	801efe8 <TestDispatcher+0x8>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 801f004:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f008:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f00c:	7b1b      	ldrb	r3, [r3, #12]
 801f00e:	4619      	mov	r1, r3
 801f010:	4844      	ldr	r0, [pc, #272]	@ (801f124 <TestDispatcher+0x144>)
 801f012:	f000 ff47 	bl	801fea4 <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 801f016:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f01a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f01e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801f022:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801f026:	6812      	ldr	r2, [r2, #0]
 801f028:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801f02a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f02e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f032:	889a      	ldrh	r2, [r3, #4]
 801f034:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f038:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f03c:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801f03e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f042:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f046:	689a      	ldr	r2, [r3, #8]
 801f048:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f04c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f050:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801f052:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f056:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f05a:	7b5a      	ldrb	r2, [r3, #13]
 801f05c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f060:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f064:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801f066:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f06a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f06e:	7b9a      	ldrb	r2, [r3, #14]
 801f070:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f074:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f078:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801f07a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f07e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f082:	7b9b      	ldrb	r3, [r3, #14]
 801f084:	461a      	mov	r2, r3
 801f086:	463b      	mov	r3, r7
 801f088:	f103 010f 	add.w	r1, r3, #15
 801f08c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801f090:	330e      	adds	r3, #14
 801f092:	4618      	mov	r0, r3
 801f094:	f001 f8db 	bl	802024e <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801f098:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f09c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f0a0:	7b1b      	ldrb	r3, [r3, #12]
 801f0a2:	f003 0302 	and.w	r3, r3, #2
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d00b      	beq.n	801f0c2 <TestDispatcher+0xe2>
			{
				printf("dispatcher sent to UART\n");
 801f0aa:	481f      	ldr	r0, [pc, #124]	@ (801f128 <TestDispatcher+0x148>)
 801f0ac:	f000 ff6a 	bl	801ff84 <puts>
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801f0b0:	4b1e      	ldr	r3, [pc, #120]	@ (801f12c <TestDispatcher+0x14c>)
 801f0b2:	6818      	ldr	r0, [r3, #0]
 801f0b4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f0b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f0bc:	2200      	movs	r2, #0
 801f0be:	f7ee f843 	bl	800d148 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801f0c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f0c6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f0ca:	7b1b      	ldrb	r3, [r3, #12]
 801f0cc:	f003 0308 	and.w	r3, r3, #8
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d00b      	beq.n	801f0ec <TestDispatcher+0x10c>
			{
				printf("dispatcher sent to I2C\n");
 801f0d4:	4816      	ldr	r0, [pc, #88]	@ (801f130 <TestDispatcher+0x150>)
 801f0d6:	f000 ff55 	bl	801ff84 <puts>
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801f0da:	4b16      	ldr	r3, [pc, #88]	@ (801f134 <TestDispatcher+0x154>)
 801f0dc:	6818      	ldr	r0, [r3, #0]
 801f0de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f0e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f0e6:	2200      	movs	r2, #0
 801f0e8:	f7ee f82e 	bl	800d148 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801f0ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f0f0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f0f4:	7b1b      	ldrb	r3, [r3, #12]
 801f0f6:	f003 0304 	and.w	r3, r3, #4
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	f43f af74 	beq.w	801efe8 <TestDispatcher+0x8>
			{
				printf("dispatcher sent to SPI\n");
 801f100:	480d      	ldr	r0, [pc, #52]	@ (801f138 <TestDispatcher+0x158>)
 801f102:	f000 ff3f 	bl	801ff84 <puts>
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801f106:	4b0d      	ldr	r3, [pc, #52]	@ (801f13c <TestDispatcher+0x15c>)
 801f108:	6818      	ldr	r0, [r3, #0]
 801f10a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f10e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f112:	2200      	movs	r2, #0
 801f114:	f7ee f818 	bl	800d148 <osMessageQueuePut>
	{
 801f118:	e766      	b.n	801efe8 <TestDispatcher+0x8>
 801f11a:	bf00      	nop
 801f11c:	08024f34 	.word	0x08024f34
 801f120:	20000320 	.word	0x20000320
 801f124:	08024f44 	.word	0x08024f44
 801f128:	08024f68 	.word	0x08024f68
 801f12c:	20000328 	.word	0x20000328
 801f130:	08024f80 	.word	0x08024f80
 801f134:	2000032c 	.word	0x2000032c
 801f138:	08024f98 	.word	0x08024f98
 801f13c:	20000330 	.word	0x20000330

0801f140 <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801f140:	b580      	push	{r7, lr}
 801f142:	b086      	sub	sp, #24
 801f144:	af00      	add	r7, sp, #0
 801f146:	60f8      	str	r0, [r7, #12]
 801f148:	607a      	str	r2, [r7, #4]
 801f14a:	461a      	mov	r2, r3
 801f14c:	460b      	mov	r3, r1
 801f14e:	72fb      	strb	r3, [r7, #11]
 801f150:	4613      	mov	r3, r2
 801f152:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801f154:	7afb      	ldrb	r3, [r7, #11]
 801f156:	461a      	mov	r2, r3
 801f158:	68f9      	ldr	r1, [r7, #12]
 801f15a:	480b      	ldr	r0, [pc, #44]	@ (801f188 <Match_CRC+0x48>)
 801f15c:	f7e3 fd66 	bl	8002c2c <HAL_CRC_Calculate>
 801f160:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801f162:	7abb      	ldrb	r3, [r7, #10]
 801f164:	461a      	mov	r2, r3
 801f166:	6879      	ldr	r1, [r7, #4]
 801f168:	4807      	ldr	r0, [pc, #28]	@ (801f188 <Match_CRC+0x48>)
 801f16a:	f7e3 fd5f 	bl	8002c2c <HAL_CRC_Calculate>
 801f16e:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 801f170:	697a      	ldr	r2, [r7, #20]
 801f172:	693b      	ldr	r3, [r7, #16]
 801f174:	429a      	cmp	r2, r3
 801f176:	d101      	bne.n	801f17c <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801f178:	2301      	movs	r3, #1
 801f17a:	e000      	b.n	801f17e <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 801f17c:	2300      	movs	r3, #0
}
 801f17e:	4618      	mov	r0, r3
 801f180:	3718      	adds	r7, #24
 801f182:	46bd      	mov	sp, r7
 801f184:	bd80      	pop	{r7, pc}
 801f186:	bf00      	nop
 801f188:	200002d4 	.word	0x200002d4

0801f18c <UDP_Server_Init>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Server_Init(void)
{
 801f18c:	b580      	push	{r7, lr}
 801f18e:	b082      	sub	sp, #8
 801f190:	af00      	add	r7, sp, #0

	err_t err;

	conn = netconn_new(NETCONN_UDP);
 801f192:	2200      	movs	r2, #0
 801f194:	2100      	movs	r1, #0
 801f196:	2020      	movs	r0, #32
 801f198:	f7f1 fe5c 	bl	8010e54 <netconn_new_with_proto_and_callback>
 801f19c:	4603      	mov	r3, r0
 801f19e:	4a16      	ldr	r2, [pc, #88]	@ (801f1f8 <UDP_Server_Init+0x6c>)
 801f1a0:	6013      	str	r3, [r2, #0]
	if (conn == NULL)
 801f1a2:	4b15      	ldr	r3, [pc, #84]	@ (801f1f8 <UDP_Server_Init+0x6c>)
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d104      	bne.n	801f1b4 <UDP_Server_Init+0x28>
	{
		printf("error creating UDP connection\n");
 801f1aa:	4814      	ldr	r0, [pc, #80]	@ (801f1fc <UDP_Server_Init+0x70>)
 801f1ac:	f000 feea 	bl	801ff84 <puts>
		while(1);
 801f1b0:	bf00      	nop
 801f1b2:	e7fd      	b.n	801f1b0 <UDP_Server_Init+0x24>
	}

	err = netconn_bind(conn, IP_ADDR_ANY, SERVER_PORT);
 801f1b4:	4b10      	ldr	r3, [pc, #64]	@ (801f1f8 <UDP_Server_Init+0x6c>)
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801f1bc:	4910      	ldr	r1, [pc, #64]	@ (801f200 <UDP_Server_Init+0x74>)
 801f1be:	4618      	mov	r0, r3
 801f1c0:	f7f1 ff02 	bl	8010fc8 <netconn_bind>
 801f1c4:	4603      	mov	r3, r0
 801f1c6:	71fb      	strb	r3, [r7, #7]
	if (err != ERR_OK)
 801f1c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d00c      	beq.n	801f1ea <UDP_Server_Init+0x5e>
	{
		printf("error binding UDP port\n");
 801f1d0:	480c      	ldr	r0, [pc, #48]	@ (801f204 <UDP_Server_Init+0x78>)
 801f1d2:	f000 fed7 	bl	801ff84 <puts>
		netconn_delete(conn);
 801f1d6:	4b08      	ldr	r3, [pc, #32]	@ (801f1f8 <UDP_Server_Init+0x6c>)
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	4618      	mov	r0, r3
 801f1dc:	f7f1 fed8 	bl	8010f90 <netconn_delete>
		conn = NULL;
 801f1e0:	4b05      	ldr	r3, [pc, #20]	@ (801f1f8 <UDP_Server_Init+0x6c>)
 801f1e2:	2200      	movs	r2, #0
 801f1e4:	601a      	str	r2, [r3, #0]
		while(1);
 801f1e6:	bf00      	nop
 801f1e8:	e7fd      	b.n	801f1e6 <UDP_Server_Init+0x5a>
	}

	printf("UDP init success\n");
 801f1ea:	4807      	ldr	r0, [pc, #28]	@ (801f208 <UDP_Server_Init+0x7c>)
 801f1ec:	f000 feca 	bl	801ff84 <puts>
}
 801f1f0:	bf00      	nop
 801f1f2:	3708      	adds	r7, #8
 801f1f4:	46bd      	mov	sp, r7
 801f1f6:	bd80      	pop	{r7, pc}
 801f1f8:	20022900 	.word	0x20022900
 801f1fc:	08024fb0 	.word	0x08024fb0
 801f200:	08025488 	.word	0x08025488
 801f204:	08024fd0 	.word	0x08024fd0
 801f208:	08024fe8 	.word	0x08024fe8

0801f20c <UDP_Listen>:

void UDP_Listen(void)
{
 801f20c:	b590      	push	{r4, r7, lr}
 801f20e:	b0c7      	sub	sp, #284	@ 0x11c
 801f210:	af00      	add	r7, sp, #0
	printf("Listening started\n");
 801f212:	485c      	ldr	r0, [pc, #368]	@ (801f384 <UDP_Listen+0x178>)
 801f214:	f000 feb6 	bl	801ff84 <puts>
	InMsg_t in_msg;
	int n_read;

	while(1)
	{
		printf("IN listener\n");
 801f218:	485b      	ldr	r0, [pc, #364]	@ (801f388 <UDP_Listen+0x17c>)
 801f21a:	f000 feb3 	bl	801ff84 <puts>
		if (osMutexAcquire(netconnMutexHandle, osWaitForever) == osOK)
 801f21e:	4b5b      	ldr	r3, [pc, #364]	@ (801f38c <UDP_Listen+0x180>)
 801f220:	681b      	ldr	r3, [r3, #0]
 801f222:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f226:	4618      	mov	r0, r3
 801f228:	f7ed fcca 	bl	800cbc0 <osMutexAcquire>
 801f22c:	4603      	mov	r3, r0
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d1f2      	bne.n	801f218 <UDP_Listen+0xc>
		{
			if(netconn_recv(conn, &buf) == ERR_OK)
 801f232:	4b57      	ldr	r3, [pc, #348]	@ (801f390 <UDP_Listen+0x184>)
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801f23a:	4611      	mov	r1, r2
 801f23c:	4618      	mov	r0, r3
 801f23e:	f7f2 f8d9 	bl	80113f4 <netconn_recv>
 801f242:	4603      	mov	r3, r0
 801f244:	2b00      	cmp	r3, #0
 801f246:	d1e7      	bne.n	801f218 <UDP_Listen+0xc>
			{
				printf("Got message\n");
 801f248:	4852      	ldr	r0, [pc, #328]	@ (801f394 <UDP_Listen+0x188>)
 801f24a:	f000 fe9b 	bl	801ff84 <puts>
				// Load in_msg
				ip_addr_copy(in_msg.addr, *netbuf_fromaddr(buf));
 801f24e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f252:	689a      	ldr	r2, [r3, #8]
 801f254:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801f258:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f25c:	601a      	str	r2, [r3, #0]
				in_msg.port = netbuf_fromport(buf);
 801f25e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f262:	899a      	ldrh	r2, [r3, #12]
 801f264:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801f268:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f26c:	809a      	strh	r2, [r3, #4]

				n_read = 0;
 801f26e:	2300      	movs	r3, #0
 801f270:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
				netbuf_copy_partial(buf, &in_msg.test_id, sizeof(in_msg.test_id), n_read);
 801f274:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f278:	6818      	ldr	r0, [r3, #0]
 801f27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f27e:	b29a      	uxth	r2, r3
 801f280:	463b      	mov	r3, r7
 801f282:	f103 0108 	add.w	r1, r3, #8
 801f286:	4613      	mov	r3, r2
 801f288:	2204      	movs	r2, #4
 801f28a:	f7f5 fe95 	bl	8014fb8 <pbuf_copy_partial>
				n_read += sizeof(in_msg.test_id);
 801f28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f292:	3304      	adds	r3, #4
 801f294:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				netbuf_copy_partial(buf, &in_msg.peripheral, 1, n_read++);
 801f298:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f29c:	6818      	ldr	r0, [r3, #0]
 801f29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2a2:	1c5a      	adds	r2, r3, #1
 801f2a4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801f2a8:	b29a      	uxth	r2, r3
 801f2aa:	463b      	mov	r3, r7
 801f2ac:	f103 010c 	add.w	r1, r3, #12
 801f2b0:	4613      	mov	r3, r2
 801f2b2:	2201      	movs	r2, #1
 801f2b4:	f7f5 fe80 	bl	8014fb8 <pbuf_copy_partial>
				netbuf_copy_partial(buf, &in_msg.n_iter, 1, n_read++);
 801f2b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f2bc:	6818      	ldr	r0, [r3, #0]
 801f2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2c2:	1c5a      	adds	r2, r3, #1
 801f2c4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801f2c8:	b29a      	uxth	r2, r3
 801f2ca:	463b      	mov	r3, r7
 801f2cc:	f103 010d 	add.w	r1, r3, #13
 801f2d0:	4613      	mov	r3, r2
 801f2d2:	2201      	movs	r2, #1
 801f2d4:	f7f5 fe70 	bl	8014fb8 <pbuf_copy_partial>
				netbuf_copy_partial(buf, &in_msg.p_len, 1, n_read++);
 801f2d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f2dc:	6818      	ldr	r0, [r3, #0]
 801f2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2e2:	1c5a      	adds	r2, r3, #1
 801f2e4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801f2e8:	b29a      	uxth	r2, r3
 801f2ea:	463b      	mov	r3, r7
 801f2ec:	f103 010e 	add.w	r1, r3, #14
 801f2f0:	4613      	mov	r3, r2
 801f2f2:	2201      	movs	r2, #1
 801f2f4:	f7f5 fe60 	bl	8014fb8 <pbuf_copy_partial>
				netbuf_copy_partial(buf, &in_msg.payload, in_msg.p_len, n_read);
 801f2f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f2fc:	6818      	ldr	r0, [r3, #0]
 801f2fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801f302:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f306:	7b9b      	ldrb	r3, [r3, #14]
 801f308:	461c      	mov	r4, r3
 801f30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f30e:	b29a      	uxth	r2, r3
 801f310:	463b      	mov	r3, r7
 801f312:	f103 010f 	add.w	r1, r3, #15
 801f316:	4613      	mov	r3, r2
 801f318:	4622      	mov	r2, r4
 801f31a:	f7f5 fe4d 	bl	8014fb8 <pbuf_copy_partial>

				if (in_msg.p_len < sizeof(in_msg.payload))
				    in_msg.payload[in_msg.p_len] = '\0';
 801f31e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801f322:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f326:	7b9b      	ldrb	r3, [r3, #14]
 801f328:	461a      	mov	r2, r3
 801f32a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801f32e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f332:	4413      	add	r3, r2
 801f334:	2200      	movs	r2, #0
 801f336:	73da      	strb	r2, [r3, #15]
				printf("Peripheral is: %d\n", in_msg.peripheral);
 801f338:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801f33c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f340:	7b1b      	ldrb	r3, [r3, #12]
 801f342:	4619      	mov	r1, r3
 801f344:	4814      	ldr	r0, [pc, #80]	@ (801f398 <UDP_Listen+0x18c>)
 801f346:	f000 fdad 	bl	801fea4 <iprintf>
				printf("n iterations is: %d\n", in_msg.n_iter);
 801f34a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801f34e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f352:	7b5b      	ldrb	r3, [r3, #13]
 801f354:	4619      	mov	r1, r3
 801f356:	4811      	ldr	r0, [pc, #68]	@ (801f39c <UDP_Listen+0x190>)
 801f358:	f000 fda4 	bl	801fea4 <iprintf>
				printf("Message is: %s\n", in_msg.payload);
 801f35c:	463b      	mov	r3, r7
 801f35e:	330f      	adds	r3, #15
 801f360:	4619      	mov	r1, r3
 801f362:	480f      	ldr	r0, [pc, #60]	@ (801f3a0 <UDP_Listen+0x194>)
 801f364:	f000 fd9e 	bl	801fea4 <iprintf>



			    // send in_msg to InMsgQueue
			    osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801f368:	4b0e      	ldr	r3, [pc, #56]	@ (801f3a4 <UDP_Listen+0x198>)
 801f36a:	6818      	ldr	r0, [r3, #0]
 801f36c:	4639      	mov	r1, r7
 801f36e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f372:	2200      	movs	r2, #0
 801f374:	f7ed fee8 	bl	800d148 <osMessageQueuePut>

			    netbuf_delete(buf);
 801f378:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801f37c:	4618      	mov	r0, r3
 801f37e:	f7f3 fd0f 	bl	8012da0 <netbuf_delete>
		printf("IN listener\n");
 801f382:	e749      	b.n	801f218 <UDP_Listen+0xc>
 801f384:	08024ffc 	.word	0x08024ffc
 801f388:	08025010 	.word	0x08025010
 801f38c:	2000033c 	.word	0x2000033c
 801f390:	20022900 	.word	0x20022900
 801f394:	0802501c 	.word	0x0802501c
 801f398:	08025028 	.word	0x08025028
 801f39c:	0802503c 	.word	0x0802503c
 801f3a0:	08025054 	.word	0x08025054
 801f3a4:	20000320 	.word	0x20000320

0801f3a8 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801f3a8:	b580      	push	{r7, lr}
 801f3aa:	b088      	sub	sp, #32
 801f3ac:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t response[RESPONSE_SIZE];

	while(1)
	{
		printf("IN responder\n");
 801f3ae:	4824      	ldr	r0, [pc, #144]	@ (801f440 <UDP_Response+0x98>)
 801f3b0:	f000 fde8 	bl	801ff84 <puts>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801f3b4:	4b23      	ldr	r3, [pc, #140]	@ (801f444 <UDP_Response+0x9c>)
 801f3b6:	6818      	ldr	r0, [r3, #0]
 801f3b8:	f107 010c 	add.w	r1, r7, #12
 801f3bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f3c0:	2200      	movs	r2, #0
 801f3c2:	f7ed ff35 	bl	800d230 <osMessageQueueGet>
 801f3c6:	4603      	mov	r3, r0
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d132      	bne.n	801f432 <UDP_Response+0x8a>
		{
			//Load response buffer
			memcpy(response, &out_msg.test_id, sizeof(out_msg.test_id));
 801f3cc:	697b      	ldr	r3, [r7, #20]
 801f3ce:	607b      	str	r3, [r7, #4]
			response[sizeof(out_msg.test_id)] = out_msg.test_result;
 801f3d0:	7e3b      	ldrb	r3, [r7, #24]
 801f3d2:	723b      	strb	r3, [r7, #8]

			// Send response
			buf = netbuf_new();
 801f3d4:	f7f3 fcd0 	bl	8012d78 <netbuf_new>
 801f3d8:	61f8      	str	r0, [r7, #28]
			if (!buf) continue;
 801f3da:	69fb      	ldr	r3, [r7, #28]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d02c      	beq.n	801f43a <UDP_Response+0x92>

			netbuf_ref(buf, response, RESPONSE_SIZE);
 801f3e0:	1d3b      	adds	r3, r7, #4
 801f3e2:	2205      	movs	r2, #5
 801f3e4:	4619      	mov	r1, r3
 801f3e6:	69f8      	ldr	r0, [r7, #28]
 801f3e8:	f7f3 fcfa 	bl	8012de0 <netbuf_ref>

			if (osMutexAcquire(netconnMutexHandle, osWaitForever) == osOK)
 801f3ec:	4b16      	ldr	r3, [pc, #88]	@ (801f448 <UDP_Response+0xa0>)
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f3f4:	4618      	mov	r0, r3
 801f3f6:	f7ed fbe3 	bl	800cbc0 <osMutexAcquire>
 801f3fa:	4603      	mov	r3, r0
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d1d6      	bne.n	801f3ae <UDP_Response+0x6>
			{
				netconn_connect(conn, &out_msg.addr, out_msg.port);
 801f400:	4b12      	ldr	r3, [pc, #72]	@ (801f44c <UDP_Response+0xa4>)
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	8a3a      	ldrh	r2, [r7, #16]
 801f406:	f107 010c 	add.w	r1, r7, #12
 801f40a:	4618      	mov	r0, r3
 801f40c:	f7f1 fe14 	bl	8011038 <netconn_connect>
				netconn_send(conn, buf);
 801f410:	4b0e      	ldr	r3, [pc, #56]	@ (801f44c <UDP_Response+0xa4>)
 801f412:	681b      	ldr	r3, [r3, #0]
 801f414:	69f9      	ldr	r1, [r7, #28]
 801f416:	4618      	mov	r0, r3
 801f418:	f7f2 f866 	bl	80114e8 <netconn_send>
				netconn_disconnect(conn);
 801f41c:	4b0b      	ldr	r3, [pc, #44]	@ (801f44c <UDP_Response+0xa4>)
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	4618      	mov	r0, r3
 801f422:	f7f1 fe41 	bl	80110a8 <netconn_disconnect>
				osMutexRelease(netconnMutexHandle);
 801f426:	4b08      	ldr	r3, [pc, #32]	@ (801f448 <UDP_Response+0xa0>)
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	4618      	mov	r0, r3
 801f42c:	f7ed fc26 	bl	800cc7c <osMutexRelease>
 801f430:	e7bd      	b.n	801f3ae <UDP_Response+0x6>
			}
		}
		else osDelay(1);
 801f432:	2001      	movs	r0, #1
 801f434:	f7ed f9de 	bl	800c7f4 <osDelay>
 801f438:	e7b9      	b.n	801f3ae <UDP_Response+0x6>
			if (!buf) continue;
 801f43a:	bf00      	nop
		printf("IN responder\n");
 801f43c:	e7b7      	b.n	801f3ae <UDP_Response+0x6>
 801f43e:	bf00      	nop
 801f440:	08025064 	.word	0x08025064
 801f444:	20000324 	.word	0x20000324
 801f448:	2000033c 	.word	0x2000033c
 801f44c:	20022900 	.word	0x20022900

0801f450 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801f450:	b580      	push	{r7, lr}
 801f452:	b0ca      	sub	sp, #296	@ 0x128
 801f454:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("IN i2c");
 801f456:	4838      	ldr	r0, [pc, #224]	@ (801f538 <I2cTestTask+0xe8>)
 801f458:	f000 fd24 	bl	801fea4 <iprintf>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f45c:	4b37      	ldr	r3, [pc, #220]	@ (801f53c <I2cTestTask+0xec>)
 801f45e:	6818      	ldr	r0, [r3, #0]
 801f460:	f107 0114 	add.w	r1, r7, #20
 801f464:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f468:	2200      	movs	r2, #0
 801f46a:	f7ed fee1 	bl	800d230 <osMessageQueueGet>
 801f46e:	4603      	mov	r3, r0
 801f470:	2b00      	cmp	r3, #0
 801f472:	d15d      	bne.n	801f530 <I2cTestTask+0xe0>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 801f474:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f478:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f47c:	689b      	ldr	r3, [r3, #8]
 801f47e:	4619      	mov	r1, r3
 801f480:	482f      	ldr	r0, [pc, #188]	@ (801f540 <I2cTestTask+0xf0>)
 801f482:	f000 fd0f 	bl	801fea4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f486:	2300      	movs	r3, #0
 801f488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f48c:	e017      	b.n	801f4be <I2cTestTask+0x6e>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f48e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f492:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f496:	7b5a      	ldrb	r2, [r3, #13]
 801f498:	f107 0314 	add.w	r3, r7, #20
 801f49c:	330e      	adds	r3, #14
 801f49e:	4611      	mov	r1, r2
 801f4a0:	4618      	mov	r0, r3
 801f4a2:	f000 f851 	bl	801f548 <I2C_Test_Perform>
 801f4a6:	4603      	mov	r3, r0
 801f4a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f4b0:	2bff      	cmp	r3, #255	@ 0xff
 801f4b2:	d00e      	beq.n	801f4d2 <I2cTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f4b4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f4b8:	3301      	adds	r3, #1
 801f4ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f4be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f4c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f4c6:	7b1b      	ldrb	r3, [r3, #12]
 801f4c8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f4cc:	429a      	cmp	r2, r3
 801f4ce:	d3de      	bcc.n	801f48e <I2cTestTask+0x3e>
 801f4d0:	e000      	b.n	801f4d4 <I2cTestTask+0x84>
					break;
 801f4d2:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f4d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f4d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f4dc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f4e0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f4e4:	6812      	ldr	r2, [r2, #0]
 801f4e6:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f4e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f4ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f4f0:	889a      	ldrh	r2, [r3, #4]
 801f4f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f4f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f4fa:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f4fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f500:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f504:	689a      	ldr	r2, [r3, #8]
 801f506:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f50a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f50e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f510:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f514:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f518:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f51c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f51e:	4b09      	ldr	r3, [pc, #36]	@ (801f544 <I2cTestTask+0xf4>)
 801f520:	6818      	ldr	r0, [r3, #0]
 801f522:	1d39      	adds	r1, r7, #4
 801f524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f528:	2200      	movs	r2, #0
 801f52a:	f7ed fe0d 	bl	800d148 <osMessageQueuePut>
 801f52e:	e792      	b.n	801f456 <I2cTestTask+0x6>
		}
		else osDelay(1);
 801f530:	2001      	movs	r0, #1
 801f532:	f7ed f95f 	bl	800c7f4 <osDelay>
		printf("IN i2c");
 801f536:	e78e      	b.n	801f456 <I2cTestTask+0x6>
 801f538:	08025074 	.word	0x08025074
 801f53c:	2000032c 	.word	0x2000032c
 801f540:	0802507c 	.word	0x0802507c
 801f544:	20000324 	.word	0x20000324

0801f548 <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f548:	b590      	push	{r4, r7, lr}
 801f54a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f54e:	af00      	add	r7, sp, #0
 801f550:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f554:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f558:	6018      	str	r0, [r3, #0]
 801f55a:	460a      	mov	r2, r1
 801f55c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f560:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f564:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 801f566:	4b4d      	ldr	r3, [pc, #308]	@ (801f69c <I2C_Test_Perform+0x154>)
 801f568:	2200      	movs	r2, #0
 801f56a:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 801f56c:	4b4c      	ldr	r3, [pc, #304]	@ (801f6a0 <I2C_Test_Perform+0x158>)
 801f56e:	2200      	movs	r2, #0
 801f570:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 801f572:	4b4c      	ldr	r3, [pc, #304]	@ (801f6a4 <I2C_Test_Perform+0x15c>)
 801f574:	2200      	movs	r2, #0
 801f576:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 801f578:	4b4b      	ldr	r3, [pc, #300]	@ (801f6a8 <I2C_Test_Perform+0x160>)
 801f57a:	2200      	movs	r2, #0
 801f57c:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801f57e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f582:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f586:	781b      	ldrb	r3, [r3, #0]
 801f588:	b29a      	uxth	r2, r3
 801f58a:	f107 0308 	add.w	r3, r7, #8
 801f58e:	4619      	mov	r1, r3
 801f590:	4846      	ldr	r0, [pc, #280]	@ (801f6ac <I2C_Test_Perform+0x164>)
 801f592:	f7e6 f8c3 	bl	800571c <HAL_I2C_Slave_Receive_DMA>
 801f596:	4603      	mov	r3, r0
 801f598:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f59c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d001      	beq.n	801f5a8 <I2C_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 801f5a4:	23ff      	movs	r3, #255	@ 0xff
 801f5a6:	e074      	b.n	801f692 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801f5a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f5ac:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f5b0:	781b      	ldrb	r3, [r3, #0]
 801f5b2:	b29b      	uxth	r3, r3
 801f5b4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801f5b8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801f5bc:	6812      	ldr	r2, [r2, #0]
 801f5be:	2114      	movs	r1, #20
 801f5c0:	483b      	ldr	r0, [pc, #236]	@ (801f6b0 <I2C_Test_Perform+0x168>)
 801f5c2:	f7e5 fdbb 	bl	800513c <HAL_I2C_Master_Transmit_DMA>
 801f5c6:	4603      	mov	r3, r0
 801f5c8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f5cc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d001      	beq.n	801f5d8 <I2C_Test_Perform+0x90>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 801f5d4:	23ff      	movs	r3, #255	@ 0xff
 801f5d6:	e05c      	b.n	801f692 <I2C_Test_Perform+0x14a>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 801f5d8:	bf00      	nop
 801f5da:	4b33      	ldr	r3, [pc, #204]	@ (801f6a8 <I2C_Test_Perform+0x160>)
 801f5dc:	781b      	ldrb	r3, [r3, #0]
 801f5de:	b2db      	uxtb	r3, r3
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d0fa      	beq.n	801f5da <I2C_Test_Perform+0x92>
 801f5e4:	4b2d      	ldr	r3, [pc, #180]	@ (801f69c <I2C_Test_Perform+0x154>)
 801f5e6:	781b      	ldrb	r3, [r3, #0]
 801f5e8:	b2db      	uxtb	r3, r3
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d0f5      	beq.n	801f5da <I2C_Test_Perform+0x92>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801f5ee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f5f2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f5f6:	781b      	ldrb	r3, [r3, #0]
 801f5f8:	b29b      	uxth	r3, r3
 801f5fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f5fe:	2114      	movs	r1, #20
 801f600:	482b      	ldr	r0, [pc, #172]	@ (801f6b0 <I2C_Test_Perform+0x168>)
 801f602:	f7e5 feaf 	bl	8005364 <HAL_I2C_Master_Receive_DMA>
 801f606:	4603      	mov	r3, r0
 801f608:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f60c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f610:	2b00      	cmp	r3, #0
 801f612:	d001      	beq.n	801f618 <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 801f614:	23ff      	movs	r3, #255	@ 0xff
 801f616:	e03c      	b.n	801f692 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801f618:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f61c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f620:	781b      	ldrb	r3, [r3, #0]
 801f622:	b29a      	uxth	r2, r3
 801f624:	f107 0308 	add.w	r3, r7, #8
 801f628:	4619      	mov	r1, r3
 801f62a:	4820      	ldr	r0, [pc, #128]	@ (801f6ac <I2C_Test_Perform+0x164>)
 801f62c:	f7e5 ff8a 	bl	8005544 <HAL_I2C_Slave_Transmit_DMA>
 801f630:	4603      	mov	r3, r0
 801f632:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f636:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d001      	beq.n	801f642 <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 801f63e:	23ff      	movs	r3, #255	@ 0xff
 801f640:	e027      	b.n	801f692 <I2C_Test_Perform+0x14a>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 801f642:	bf00      	nop
 801f644:	4b16      	ldr	r3, [pc, #88]	@ (801f6a0 <I2C_Test_Perform+0x158>)
 801f646:	781b      	ldrb	r3, [r3, #0]
 801f648:	b2db      	uxtb	r3, r3
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	d0fa      	beq.n	801f644 <I2C_Test_Perform+0xfc>
 801f64e:	4b15      	ldr	r3, [pc, #84]	@ (801f6a4 <I2C_Test_Perform+0x15c>)
 801f650:	781b      	ldrb	r3, [r3, #0]
 801f652:	b2db      	uxtb	r3, r3
 801f654:	2b00      	cmp	r3, #0
 801f656:	d0f5      	beq.n	801f644 <I2C_Test_Perform+0xfc>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801f658:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f65c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f660:	781c      	ldrb	r4, [r3, #0]
 801f662:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f666:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f66a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f66e:	7819      	ldrb	r1, [r3, #0]
 801f670:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f674:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f678:	4623      	mov	r3, r4
 801f67a:	6800      	ldr	r0, [r0, #0]
 801f67c:	f7ff fd60 	bl	801f140 <Match_CRC>
 801f680:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f684:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f688:	2b01      	cmp	r3, #1
 801f68a:	d101      	bne.n	801f690 <I2C_Test_Perform+0x148>
 801f68c:	2301      	movs	r3, #1
 801f68e:	e000      	b.n	801f692 <I2C_Test_Perform+0x14a>

	return TEST_FAILED;
 801f690:	23ff      	movs	r3, #255	@ 0xff
}
 801f692:	4618      	mov	r0, r3
 801f694:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f698:	46bd      	mov	sp, r7
 801f69a:	bd90      	pop	{r4, r7, pc}
 801f69c:	20022904 	.word	0x20022904
 801f6a0:	20022905 	.word	0x20022905
 801f6a4:	20022906 	.word	0x20022906
 801f6a8:	20022907 	.word	0x20022907
 801f6ac:	20000398 	.word	0x20000398
 801f6b0:	20000344 	.word	0x20000344

0801f6b4 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f6b4:	b480      	push	{r7}
 801f6b6:	b083      	sub	sp, #12
 801f6b8:	af00      	add	r7, sp, #0
 801f6ba:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	4a06      	ldr	r2, [pc, #24]	@ (801f6d8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 801f6c0:	4293      	cmp	r3, r2
 801f6c2:	d102      	bne.n	801f6ca <HAL_I2C_MasterTxCpltCallback+0x16>
 801f6c4:	4b05      	ldr	r3, [pc, #20]	@ (801f6dc <HAL_I2C_MasterTxCpltCallback+0x28>)
 801f6c6:	2201      	movs	r2, #1
 801f6c8:	701a      	strb	r2, [r3, #0]
}
 801f6ca:	bf00      	nop
 801f6cc:	370c      	adds	r7, #12
 801f6ce:	46bd      	mov	sp, r7
 801f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6d4:	4770      	bx	lr
 801f6d6:	bf00      	nop
 801f6d8:	20000344 	.word	0x20000344
 801f6dc:	20022904 	.word	0x20022904

0801f6e0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f6e0:	b480      	push	{r7}
 801f6e2:	b083      	sub	sp, #12
 801f6e4:	af00      	add	r7, sp, #0
 801f6e6:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	4a06      	ldr	r2, [pc, #24]	@ (801f704 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801f6ec:	4293      	cmp	r3, r2
 801f6ee:	d102      	bne.n	801f6f6 <HAL_I2C_MasterRxCpltCallback+0x16>
 801f6f0:	4b05      	ldr	r3, [pc, #20]	@ (801f708 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801f6f2:	2201      	movs	r2, #1
 801f6f4:	701a      	strb	r2, [r3, #0]
}
 801f6f6:	bf00      	nop
 801f6f8:	370c      	adds	r7, #12
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f700:	4770      	bx	lr
 801f702:	bf00      	nop
 801f704:	20000344 	.word	0x20000344
 801f708:	20022905 	.word	0x20022905

0801f70c <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f70c:	b480      	push	{r7}
 801f70e:	b083      	sub	sp, #12
 801f710:	af00      	add	r7, sp, #0
 801f712:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	4a06      	ldr	r2, [pc, #24]	@ (801f730 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801f718:	4293      	cmp	r3, r2
 801f71a:	d102      	bne.n	801f722 <HAL_I2C_SlaveTxCpltCallback+0x16>
 801f71c:	4b05      	ldr	r3, [pc, #20]	@ (801f734 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801f71e:	2201      	movs	r2, #1
 801f720:	701a      	strb	r2, [r3, #0]
}
 801f722:	bf00      	nop
 801f724:	370c      	adds	r7, #12
 801f726:	46bd      	mov	sp, r7
 801f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f72c:	4770      	bx	lr
 801f72e:	bf00      	nop
 801f730:	20000398 	.word	0x20000398
 801f734:	20022906 	.word	0x20022906

0801f738 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f738:	b480      	push	{r7}
 801f73a:	b083      	sub	sp, #12
 801f73c:	af00      	add	r7, sp, #0
 801f73e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	4a06      	ldr	r2, [pc, #24]	@ (801f75c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801f744:	4293      	cmp	r3, r2
 801f746:	d102      	bne.n	801f74e <HAL_I2C_SlaveRxCpltCallback+0x16>
 801f748:	4b05      	ldr	r3, [pc, #20]	@ (801f760 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801f74a:	2201      	movs	r2, #1
 801f74c:	701a      	strb	r2, [r3, #0]
}
 801f74e:	bf00      	nop
 801f750:	370c      	adds	r7, #12
 801f752:	46bd      	mov	sp, r7
 801f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f758:	4770      	bx	lr
 801f75a:	bf00      	nop
 801f75c:	20000398 	.word	0x20000398
 801f760:	20022907 	.word	0x20022907

0801f764 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 801f764:	b580      	push	{r7, lr}
 801f766:	b0ca      	sub	sp, #296	@ 0x128
 801f768:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("IN spi");
 801f76a:	4838      	ldr	r0, [pc, #224]	@ (801f84c <SpiTestTask+0xe8>)
 801f76c:	f000 fb9a 	bl	801fea4 <iprintf>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f770:	4b37      	ldr	r3, [pc, #220]	@ (801f850 <SpiTestTask+0xec>)
 801f772:	6818      	ldr	r0, [r3, #0]
 801f774:	f107 0114 	add.w	r1, r7, #20
 801f778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f77c:	2200      	movs	r2, #0
 801f77e:	f7ed fd57 	bl	800d230 <osMessageQueueGet>
 801f782:	4603      	mov	r3, r0
 801f784:	2b00      	cmp	r3, #0
 801f786:	d15d      	bne.n	801f844 <SpiTestTask+0xe0>
		{
			printf("spi received test ID: %lu\n", test_data.test_id);
 801f788:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f78c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f790:	689b      	ldr	r3, [r3, #8]
 801f792:	4619      	mov	r1, r3
 801f794:	482f      	ldr	r0, [pc, #188]	@ (801f854 <SpiTestTask+0xf0>)
 801f796:	f000 fb85 	bl	801fea4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f79a:	2300      	movs	r3, #0
 801f79c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f7a0:	e017      	b.n	801f7d2 <SpiTestTask+0x6e>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f7a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f7aa:	7b5a      	ldrb	r2, [r3, #13]
 801f7ac:	f107 0314 	add.w	r3, r7, #20
 801f7b0:	330e      	adds	r3, #14
 801f7b2:	4611      	mov	r1, r2
 801f7b4:	4618      	mov	r0, r3
 801f7b6:	f000 f851 	bl	801f85c <SPI_Test_Perform>
 801f7ba:	4603      	mov	r3, r0
 801f7bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f7c4:	2bff      	cmp	r3, #255	@ 0xff
 801f7c6:	d00e      	beq.n	801f7e6 <SpiTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f7c8:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f7cc:	3301      	adds	r3, #1
 801f7ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f7d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f7da:	7b1b      	ldrb	r3, [r3, #12]
 801f7dc:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f7e0:	429a      	cmp	r2, r3
 801f7e2:	d3de      	bcc.n	801f7a2 <SpiTestTask+0x3e>
 801f7e4:	e000      	b.n	801f7e8 <SpiTestTask+0x84>
					break;
 801f7e6:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f7e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7f0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f7f4:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f7f8:	6812      	ldr	r2, [r2, #0]
 801f7fa:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f7fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f800:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f804:	889a      	ldrh	r2, [r3, #4]
 801f806:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f80a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f80e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f810:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f814:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f818:	689a      	ldr	r2, [r3, #8]
 801f81a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f81e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f822:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f824:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f828:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f82c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f830:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f832:	4b09      	ldr	r3, [pc, #36]	@ (801f858 <SpiTestTask+0xf4>)
 801f834:	6818      	ldr	r0, [r3, #0]
 801f836:	1d39      	adds	r1, r7, #4
 801f838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f83c:	2200      	movs	r2, #0
 801f83e:	f7ed fc83 	bl	800d148 <osMessageQueuePut>
 801f842:	e792      	b.n	801f76a <SpiTestTask+0x6>
		}
		else osDelay(1);
 801f844:	2001      	movs	r0, #1
 801f846:	f7ec ffd5 	bl	800c7f4 <osDelay>
		printf("IN spi");
 801f84a:	e78e      	b.n	801f76a <SpiTestTask+0x6>
 801f84c:	08025098 	.word	0x08025098
 801f850:	20000330 	.word	0x20000330
 801f854:	080250a0 	.word	0x080250a0
 801f858:	20000324 	.word	0x20000324

0801f85c <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f85c:	b590      	push	{r4, r7, lr}
 801f85e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f862:	af00      	add	r7, sp, #0
 801f864:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f868:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f86c:	6018      	str	r0, [r3, #0]
 801f86e:	460a      	mov	r2, r1
 801f870:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f874:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f878:	701a      	strb	r2, [r3, #0]
	printf("Performing SPI test\n");
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 801f87a:	4b4d      	ldr	r3, [pc, #308]	@ (801f9b0 <SPI_Test_Perform+0x154>)
 801f87c:	2200      	movs	r2, #0
 801f87e:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 801f880:	4b4c      	ldr	r3, [pc, #304]	@ (801f9b4 <SPI_Test_Perform+0x158>)
 801f882:	2200      	movs	r2, #0
 801f884:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 801f886:	4b4c      	ldr	r3, [pc, #304]	@ (801f9b8 <SPI_Test_Perform+0x15c>)
 801f888:	2200      	movs	r2, #0
 801f88a:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 801f88c:	4b4b      	ldr	r3, [pc, #300]	@ (801f9bc <SPI_Test_Perform+0x160>)
 801f88e:	2200      	movs	r2, #0
 801f890:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f892:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f896:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f89a:	781b      	ldrb	r3, [r3, #0]
 801f89c:	b29a      	uxth	r2, r3
 801f89e:	f107 0308 	add.w	r3, r7, #8
 801f8a2:	4619      	mov	r1, r3
 801f8a4:	4846      	ldr	r0, [pc, #280]	@ (801f9c0 <SPI_Test_Perform+0x164>)
 801f8a6:	f7e9 f887 	bl	80089b8 <HAL_SPI_Receive_DMA>
 801f8aa:	4603      	mov	r3, r0
 801f8ac:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f8b0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	d001      	beq.n	801f8bc <SPI_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
#endif
		return TEST_FAILED;
 801f8b8:	23ff      	movs	r3, #255	@ 0xff
 801f8ba:	e073      	b.n	801f9a4 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 801f8bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f8c0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f8c4:	781b      	ldrb	r3, [r3, #0]
 801f8c6:	b29a      	uxth	r2, r3
 801f8c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f8cc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f8d0:	6819      	ldr	r1, [r3, #0]
 801f8d2:	483c      	ldr	r0, [pc, #240]	@ (801f9c4 <SPI_Test_Perform+0x168>)
 801f8d4:	f7e8 ff82 	bl	80087dc <HAL_SPI_Transmit_DMA>
 801f8d8:	4603      	mov	r3, r0
 801f8da:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f8de:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d001      	beq.n	801f8ea <SPI_Test_Perform+0x8e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
#endif
		return TEST_FAILED;
 801f8e6:	23ff      	movs	r3, #255	@ 0xff
 801f8e8:	e05c      	b.n	801f9a4 <SPI_Test_Perform+0x148>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 801f8ea:	bf00      	nop
 801f8ec:	4b33      	ldr	r3, [pc, #204]	@ (801f9bc <SPI_Test_Perform+0x160>)
 801f8ee:	781b      	ldrb	r3, [r3, #0]
 801f8f0:	b2db      	uxtb	r3, r3
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d0fa      	beq.n	801f8ec <SPI_Test_Perform+0x90>
 801f8f6:	4b2e      	ldr	r3, [pc, #184]	@ (801f9b0 <SPI_Test_Perform+0x154>)
 801f8f8:	781b      	ldrb	r3, [r3, #0]
 801f8fa:	b2db      	uxtb	r3, r3
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d0f5      	beq.n	801f8ec <SPI_Test_Perform+0x90>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f900:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f904:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f908:	781b      	ldrb	r3, [r3, #0]
 801f90a:	b29a      	uxth	r2, r3
 801f90c:	f107 0308 	add.w	r3, r7, #8
 801f910:	4619      	mov	r1, r3
 801f912:	482b      	ldr	r0, [pc, #172]	@ (801f9c0 <SPI_Test_Perform+0x164>)
 801f914:	f7e8 ff62 	bl	80087dc <HAL_SPI_Transmit_DMA>
 801f918:	4603      	mov	r3, r0
 801f91a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f91e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f922:	2b00      	cmp	r3, #0
 801f924:	d001      	beq.n	801f92a <SPI_Test_Perform+0xce>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
#endif
		return TEST_FAILED;
 801f926:	23ff      	movs	r3, #255	@ 0xff
 801f928:	e03c      	b.n	801f9a4 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 801f92a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f92e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f932:	781b      	ldrb	r3, [r3, #0]
 801f934:	b29a      	uxth	r2, r3
 801f936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801f93a:	4619      	mov	r1, r3
 801f93c:	4821      	ldr	r0, [pc, #132]	@ (801f9c4 <SPI_Test_Perform+0x168>)
 801f93e:	f7e9 f83b 	bl	80089b8 <HAL_SPI_Receive_DMA>
 801f942:	4603      	mov	r3, r0
 801f944:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f948:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d001      	beq.n	801f954 <SPI_Test_Perform+0xf8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
#endif
		return TEST_FAILED;
 801f950:	23ff      	movs	r3, #255	@ 0xff
 801f952:	e027      	b.n	801f9a4 <SPI_Test_Perform+0x148>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 801f954:	bf00      	nop
 801f956:	4b17      	ldr	r3, [pc, #92]	@ (801f9b4 <SPI_Test_Perform+0x158>)
 801f958:	781b      	ldrb	r3, [r3, #0]
 801f95a:	b2db      	uxtb	r3, r3
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	d0fa      	beq.n	801f956 <SPI_Test_Perform+0xfa>
 801f960:	4b15      	ldr	r3, [pc, #84]	@ (801f9b8 <SPI_Test_Perform+0x15c>)
 801f962:	781b      	ldrb	r3, [r3, #0]
 801f964:	b2db      	uxtb	r3, r3
 801f966:	2b00      	cmp	r3, #0
 801f968:	d0f5      	beq.n	801f956 <SPI_Test_Perform+0xfa>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 801f96a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f96e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f972:	781c      	ldrb	r4, [r3, #0]
 801f974:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f978:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f97c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f980:	7819      	ldrb	r1, [r3, #0]
 801f982:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f986:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f98a:	4623      	mov	r3, r4
 801f98c:	6800      	ldr	r0, [r0, #0]
 801f98e:	f7ff fbd7 	bl	801f140 <Match_CRC>
 801f992:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f996:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f99a:	2b01      	cmp	r3, #1
 801f99c:	d101      	bne.n	801f9a2 <SPI_Test_Perform+0x146>
 801f99e:	2301      	movs	r3, #1
 801f9a0:	e000      	b.n	801f9a4 <SPI_Test_Perform+0x148>

	return TEST_FAILED;
 801f9a2:	23ff      	movs	r3, #255	@ 0xff
}
 801f9a4:	4618      	mov	r0, r3
 801f9a6:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f9aa:	46bd      	mov	sp, r7
 801f9ac:	bd90      	pop	{r4, r7, pc}
 801f9ae:	bf00      	nop
 801f9b0:	20022908 	.word	0x20022908
 801f9b4:	20022909 	.word	0x20022909
 801f9b8:	2002290a 	.word	0x2002290a
 801f9bc:	2002290b 	.word	0x2002290b
 801f9c0:	200005d0 	.word	0x200005d0
 801f9c4:	2000056c 	.word	0x2000056c

0801f9c8 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801f9c8:	b480      	push	{r7}
 801f9ca:	b083      	sub	sp, #12
 801f9cc:	af00      	add	r7, sp, #0
 801f9ce:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	4a09      	ldr	r2, [pc, #36]	@ (801f9f8 <HAL_SPI_TxCpltCallback+0x30>)
 801f9d4:	4293      	cmp	r3, r2
 801f9d6:	d102      	bne.n	801f9de <HAL_SPI_TxCpltCallback+0x16>
 801f9d8:	4b08      	ldr	r3, [pc, #32]	@ (801f9fc <HAL_SPI_TxCpltCallback+0x34>)
 801f9da:	2201      	movs	r2, #1
 801f9dc:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	4a07      	ldr	r2, [pc, #28]	@ (801fa00 <HAL_SPI_TxCpltCallback+0x38>)
 801f9e2:	4293      	cmp	r3, r2
 801f9e4:	d102      	bne.n	801f9ec <HAL_SPI_TxCpltCallback+0x24>
 801f9e6:	4b07      	ldr	r3, [pc, #28]	@ (801fa04 <HAL_SPI_TxCpltCallback+0x3c>)
 801f9e8:	2201      	movs	r2, #1
 801f9ea:	701a      	strb	r2, [r3, #0]
}
 801f9ec:	bf00      	nop
 801f9ee:	370c      	adds	r7, #12
 801f9f0:	46bd      	mov	sp, r7
 801f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f6:	4770      	bx	lr
 801f9f8:	2000056c 	.word	0x2000056c
 801f9fc:	20022908 	.word	0x20022908
 801fa00:	200005d0 	.word	0x200005d0
 801fa04:	2002290a 	.word	0x2002290a

0801fa08 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801fa08:	b480      	push	{r7}
 801fa0a:	b083      	sub	sp, #12
 801fa0c:	af00      	add	r7, sp, #0
 801fa0e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	4a09      	ldr	r2, [pc, #36]	@ (801fa38 <HAL_SPI_RxCpltCallback+0x30>)
 801fa14:	4293      	cmp	r3, r2
 801fa16:	d102      	bne.n	801fa1e <HAL_SPI_RxCpltCallback+0x16>
 801fa18:	4b08      	ldr	r3, [pc, #32]	@ (801fa3c <HAL_SPI_RxCpltCallback+0x34>)
 801fa1a:	2201      	movs	r2, #1
 801fa1c:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	4a07      	ldr	r2, [pc, #28]	@ (801fa40 <HAL_SPI_RxCpltCallback+0x38>)
 801fa22:	4293      	cmp	r3, r2
 801fa24:	d102      	bne.n	801fa2c <HAL_SPI_RxCpltCallback+0x24>
 801fa26:	4b07      	ldr	r3, [pc, #28]	@ (801fa44 <HAL_SPI_RxCpltCallback+0x3c>)
 801fa28:	2201      	movs	r2, #1
 801fa2a:	701a      	strb	r2, [r3, #0]
}
 801fa2c:	bf00      	nop
 801fa2e:	370c      	adds	r7, #12
 801fa30:	46bd      	mov	sp, r7
 801fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa36:	4770      	bx	lr
 801fa38:	2000056c 	.word	0x2000056c
 801fa3c:	20022909 	.word	0x20022909
 801fa40:	200005d0 	.word	0x200005d0
 801fa44:	2002290b 	.word	0x2002290b

0801fa48 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 801fa48:	b580      	push	{r7, lr}
 801fa4a:	b0ca      	sub	sp, #296	@ 0x128
 801fa4c:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("IN uart\n");
 801fa4e:	4838      	ldr	r0, [pc, #224]	@ (801fb30 <UartTestTask+0xe8>)
 801fa50:	f000 fa98 	bl	801ff84 <puts>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fa54:	4b37      	ldr	r3, [pc, #220]	@ (801fb34 <UartTestTask+0xec>)
 801fa56:	6818      	ldr	r0, [r3, #0]
 801fa58:	f107 0114 	add.w	r1, r7, #20
 801fa5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fa60:	2200      	movs	r2, #0
 801fa62:	f7ed fbe5 	bl	800d230 <osMessageQueueGet>
 801fa66:	4603      	mov	r3, r0
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	d15d      	bne.n	801fb28 <UartTestTask+0xe0>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 801fa6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fa74:	689b      	ldr	r3, [r3, #8]
 801fa76:	4619      	mov	r1, r3
 801fa78:	482f      	ldr	r0, [pc, #188]	@ (801fb38 <UartTestTask+0xf0>)
 801fa7a:	f000 fa13 	bl	801fea4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fa7e:	2300      	movs	r3, #0
 801fa80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fa84:	e017      	b.n	801fab6 <UartTestTask+0x6e>
			{
				result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801fa86:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fa8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fa8e:	7b5a      	ldrb	r2, [r3, #13]
 801fa90:	f107 0314 	add.w	r3, r7, #20
 801fa94:	330e      	adds	r3, #14
 801fa96:	4611      	mov	r1, r2
 801fa98:	4618      	mov	r0, r3
 801fa9a:	f000 f851 	bl	801fb40 <UART_Test_Perform>
 801fa9e:	4603      	mov	r3, r0
 801faa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801faa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801faa8:	2bff      	cmp	r3, #255	@ 0xff
 801faaa:	d00e      	beq.n	801faca <UartTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801faac:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fab0:	3301      	adds	r3, #1
 801fab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fab6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801faba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fabe:	7b1b      	ldrb	r3, [r3, #12]
 801fac0:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fac4:	429a      	cmp	r2, r3
 801fac6:	d3de      	bcc.n	801fa86 <UartTestTask+0x3e>
 801fac8:	e000      	b.n	801facc <UartTestTask+0x84>
					break;
 801faca:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801facc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fad0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fad4:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fad8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fadc:	6812      	ldr	r2, [r2, #0]
 801fade:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fae0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fae4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fae8:	889a      	ldrh	r2, [r3, #4]
 801faea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801faee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801faf2:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801faf4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801faf8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fafc:	689a      	ldr	r2, [r3, #8]
 801fafe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fb02:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fb06:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fb08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fb0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fb10:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fb14:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fb16:	4b09      	ldr	r3, [pc, #36]	@ (801fb3c <UartTestTask+0xf4>)
 801fb18:	6818      	ldr	r0, [r3, #0]
 801fb1a:	1d39      	adds	r1, r7, #4
 801fb1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fb20:	2200      	movs	r2, #0
 801fb22:	f7ed fb11 	bl	800d148 <osMessageQueuePut>
 801fb26:	e792      	b.n	801fa4e <UartTestTask+0x6>
		}
		else osDelay(1);
 801fb28:	2001      	movs	r0, #1
 801fb2a:	f7ec fe63 	bl	800c7f4 <osDelay>
		printf("IN uart\n");
 801fb2e:	e78e      	b.n	801fa4e <UartTestTask+0x6>
 801fb30:	080250bc 	.word	0x080250bc
 801fb34:	20000328 	.word	0x20000328
 801fb38:	080250c4 	.word	0x080250c4
 801fb3c:	20000324 	.word	0x20000324

0801fb40 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fb40:	b590      	push	{r4, r7, lr}
 801fb42:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801fb46:	af00      	add	r7, sp, #0
 801fb48:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fb50:	6018      	str	r0, [r3, #0]
 801fb52:	460a      	mov	r2, r1
 801fb54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb58:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb5c:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
#endif

	uart4_rx_done = 0;
 801fb5e:	4b3d      	ldr	r3, [pc, #244]	@ (801fc54 <UART_Test_Perform+0x114>)
 801fb60:	2200      	movs	r2, #0
 801fb62:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 801fb64:	4b3c      	ldr	r3, [pc, #240]	@ (801fc58 <UART_Test_Perform+0x118>)
 801fb66:	2200      	movs	r2, #0
 801fb68:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 801fb6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb6e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb72:	781b      	ldrb	r3, [r3, #0]
 801fb74:	b29a      	uxth	r2, r3
 801fb76:	f107 030c 	add.w	r3, r7, #12
 801fb7a:	4619      	mov	r1, r3
 801fb7c:	4837      	ldr	r0, [pc, #220]	@ (801fc5c <UART_Test_Perform+0x11c>)
 801fb7e:	f7ea fc35 	bl	800a3ec <HAL_UART_Receive_DMA>
 801fb82:	4603      	mov	r3, r0
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	d001      	beq.n	801fb8c <UART_Test_Perform+0x4c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 801fb88:	23ff      	movs	r3, #255	@ 0xff
 801fb8a:	e05d      	b.n	801fc48 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 801fb8c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb90:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb94:	781b      	ldrb	r3, [r3, #0]
 801fb96:	b29a      	uxth	r2, r3
 801fb98:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb9c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fba0:	6819      	ldr	r1, [r3, #0]
 801fba2:	482f      	ldr	r0, [pc, #188]	@ (801fc60 <UART_Test_Perform+0x120>)
 801fba4:	f7ea fbc4 	bl	800a330 <HAL_UART_Transmit_IT>
 801fba8:	4603      	mov	r3, r0
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	d001      	beq.n	801fbb2 <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 801fbae:	23ff      	movs	r3, #255	@ 0xff
 801fbb0:	e04a      	b.n	801fc48 <UART_Test_Perform+0x108>
	}
	while (!uart5_rx_done);
 801fbb2:	bf00      	nop
 801fbb4:	4b28      	ldr	r3, [pc, #160]	@ (801fc58 <UART_Test_Perform+0x118>)
 801fbb6:	781b      	ldrb	r3, [r3, #0]
 801fbb8:	b2db      	uxtb	r3, r3
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d0fa      	beq.n	801fbb4 <UART_Test_Perform+0x74>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 801fbbe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fbc2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fbc6:	781b      	ldrb	r3, [r3, #0]
 801fbc8:	b29a      	uxth	r2, r3
 801fbca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801fbce:	4619      	mov	r1, r3
 801fbd0:	4823      	ldr	r0, [pc, #140]	@ (801fc60 <UART_Test_Perform+0x120>)
 801fbd2:	f7ea fc0b 	bl	800a3ec <HAL_UART_Receive_DMA>
 801fbd6:	4603      	mov	r3, r0
 801fbd8:	2b00      	cmp	r3, #0
 801fbda:	d001      	beq.n	801fbe0 <UART_Test_Perform+0xa0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 801fbdc:	23ff      	movs	r3, #255	@ 0xff
 801fbde:	e033      	b.n	801fc48 <UART_Test_Perform+0x108>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 801fbe0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fbe4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fbe8:	781b      	ldrb	r3, [r3, #0]
 801fbea:	b29a      	uxth	r2, r3
 801fbec:	f107 030c 	add.w	r3, r7, #12
 801fbf0:	4619      	mov	r1, r3
 801fbf2:	481a      	ldr	r0, [pc, #104]	@ (801fc5c <UART_Test_Perform+0x11c>)
 801fbf4:	f7ea fb9c 	bl	800a330 <HAL_UART_Transmit_IT>
 801fbf8:	4603      	mov	r3, r0
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d001      	beq.n	801fc02 <UART_Test_Perform+0xc2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 801fbfe:	23ff      	movs	r3, #255	@ 0xff
 801fc00:	e022      	b.n	801fc48 <UART_Test_Perform+0x108>
	}
	while (!uart4_rx_done);
 801fc02:	bf00      	nop
 801fc04:	4b13      	ldr	r3, [pc, #76]	@ (801fc54 <UART_Test_Perform+0x114>)
 801fc06:	781b      	ldrb	r3, [r3, #0]
 801fc08:	b2db      	uxtb	r3, r3
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	d0fa      	beq.n	801fc04 <UART_Test_Perform+0xc4>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 801fc0e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fc12:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fc16:	781c      	ldrb	r4, [r3, #0]
 801fc18:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801fc1c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fc20:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fc24:	7819      	ldrb	r1, [r3, #0]
 801fc26:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fc2a:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801fc2e:	4623      	mov	r3, r4
 801fc30:	6800      	ldr	r0, [r0, #0]
 801fc32:	f7ff fa85 	bl	801f140 <Match_CRC>
 801fc36:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801fc3a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801fc3e:	2b01      	cmp	r3, #1
 801fc40:	d101      	bne.n	801fc46 <UART_Test_Perform+0x106>
 801fc42:	2301      	movs	r3, #1
 801fc44:	e000      	b.n	801fc48 <UART_Test_Perform+0x108>

	return TEST_FAILED;
 801fc46:	23ff      	movs	r3, #255	@ 0xff
}
 801fc48:	4618      	mov	r0, r3
 801fc4a:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801fc4e:	46bd      	mov	sp, r7
 801fc50:	bd90      	pop	{r4, r7, pc}
 801fc52:	bf00      	nop
 801fc54:	2002290c 	.word	0x2002290c
 801fc58:	2002290d 	.word	0x2002290d
 801fc5c:	20000984 	.word	0x20000984
 801fc60:	200008fc 	.word	0x200008fc

0801fc64 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801fc64:	b480      	push	{r7}
 801fc66:	b083      	sub	sp, #12
 801fc68:	af00      	add	r7, sp, #0
 801fc6a:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	4a09      	ldr	r2, [pc, #36]	@ (801fc94 <HAL_UART_RxCpltCallback+0x30>)
 801fc70:	4293      	cmp	r3, r2
 801fc72:	d102      	bne.n	801fc7a <HAL_UART_RxCpltCallback+0x16>
 801fc74:	4b08      	ldr	r3, [pc, #32]	@ (801fc98 <HAL_UART_RxCpltCallback+0x34>)
 801fc76:	2201      	movs	r2, #1
 801fc78:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	4a07      	ldr	r2, [pc, #28]	@ (801fc9c <HAL_UART_RxCpltCallback+0x38>)
 801fc7e:	4293      	cmp	r3, r2
 801fc80:	d102      	bne.n	801fc88 <HAL_UART_RxCpltCallback+0x24>
 801fc82:	4b07      	ldr	r3, [pc, #28]	@ (801fca0 <HAL_UART_RxCpltCallback+0x3c>)
 801fc84:	2201      	movs	r2, #1
 801fc86:	701a      	strb	r2, [r3, #0]
}
 801fc88:	bf00      	nop
 801fc8a:	370c      	adds	r7, #12
 801fc8c:	46bd      	mov	sp, r7
 801fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc92:	4770      	bx	lr
 801fc94:	200008fc 	.word	0x200008fc
 801fc98:	2002290c 	.word	0x2002290c
 801fc9c:	20000984 	.word	0x20000984
 801fca0:	2002290d 	.word	0x2002290d

0801fca4 <rand>:
 801fca4:	4b16      	ldr	r3, [pc, #88]	@ (801fd00 <rand+0x5c>)
 801fca6:	b510      	push	{r4, lr}
 801fca8:	681c      	ldr	r4, [r3, #0]
 801fcaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fcac:	b9b3      	cbnz	r3, 801fcdc <rand+0x38>
 801fcae:	2018      	movs	r0, #24
 801fcb0:	f000 fb44 	bl	802033c <malloc>
 801fcb4:	4602      	mov	r2, r0
 801fcb6:	6320      	str	r0, [r4, #48]	@ 0x30
 801fcb8:	b920      	cbnz	r0, 801fcc4 <rand+0x20>
 801fcba:	4b12      	ldr	r3, [pc, #72]	@ (801fd04 <rand+0x60>)
 801fcbc:	4812      	ldr	r0, [pc, #72]	@ (801fd08 <rand+0x64>)
 801fcbe:	2152      	movs	r1, #82	@ 0x52
 801fcc0:	f000 fad4 	bl	802026c <__assert_func>
 801fcc4:	4911      	ldr	r1, [pc, #68]	@ (801fd0c <rand+0x68>)
 801fcc6:	4b12      	ldr	r3, [pc, #72]	@ (801fd10 <rand+0x6c>)
 801fcc8:	e9c0 1300 	strd	r1, r3, [r0]
 801fccc:	4b11      	ldr	r3, [pc, #68]	@ (801fd14 <rand+0x70>)
 801fcce:	6083      	str	r3, [r0, #8]
 801fcd0:	230b      	movs	r3, #11
 801fcd2:	8183      	strh	r3, [r0, #12]
 801fcd4:	2100      	movs	r1, #0
 801fcd6:	2001      	movs	r0, #1
 801fcd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fcdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801fcde:	480e      	ldr	r0, [pc, #56]	@ (801fd18 <rand+0x74>)
 801fce0:	690b      	ldr	r3, [r1, #16]
 801fce2:	694c      	ldr	r4, [r1, #20]
 801fce4:	4a0d      	ldr	r2, [pc, #52]	@ (801fd1c <rand+0x78>)
 801fce6:	4358      	muls	r0, r3
 801fce8:	fb02 0004 	mla	r0, r2, r4, r0
 801fcec:	fba3 3202 	umull	r3, r2, r3, r2
 801fcf0:	3301      	adds	r3, #1
 801fcf2:	eb40 0002 	adc.w	r0, r0, r2
 801fcf6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801fcfa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801fcfe:	bd10      	pop	{r4, pc}
 801fd00:	20000080 	.word	0x20000080
 801fd04:	0802549a 	.word	0x0802549a
 801fd08:	080254b1 	.word	0x080254b1
 801fd0c:	abcd330e 	.word	0xabcd330e
 801fd10:	e66d1234 	.word	0xe66d1234
 801fd14:	0005deec 	.word	0x0005deec
 801fd18:	5851f42d 	.word	0x5851f42d
 801fd1c:	4c957f2d 	.word	0x4c957f2d

0801fd20 <std>:
 801fd20:	2300      	movs	r3, #0
 801fd22:	b510      	push	{r4, lr}
 801fd24:	4604      	mov	r4, r0
 801fd26:	e9c0 3300 	strd	r3, r3, [r0]
 801fd2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fd2e:	6083      	str	r3, [r0, #8]
 801fd30:	8181      	strh	r1, [r0, #12]
 801fd32:	6643      	str	r3, [r0, #100]	@ 0x64
 801fd34:	81c2      	strh	r2, [r0, #14]
 801fd36:	6183      	str	r3, [r0, #24]
 801fd38:	4619      	mov	r1, r3
 801fd3a:	2208      	movs	r2, #8
 801fd3c:	305c      	adds	r0, #92	@ 0x5c
 801fd3e:	f000 fa11 	bl	8020164 <memset>
 801fd42:	4b0d      	ldr	r3, [pc, #52]	@ (801fd78 <std+0x58>)
 801fd44:	6263      	str	r3, [r4, #36]	@ 0x24
 801fd46:	4b0d      	ldr	r3, [pc, #52]	@ (801fd7c <std+0x5c>)
 801fd48:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fd4a:	4b0d      	ldr	r3, [pc, #52]	@ (801fd80 <std+0x60>)
 801fd4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fd4e:	4b0d      	ldr	r3, [pc, #52]	@ (801fd84 <std+0x64>)
 801fd50:	6323      	str	r3, [r4, #48]	@ 0x30
 801fd52:	4b0d      	ldr	r3, [pc, #52]	@ (801fd88 <std+0x68>)
 801fd54:	6224      	str	r4, [r4, #32]
 801fd56:	429c      	cmp	r4, r3
 801fd58:	d006      	beq.n	801fd68 <std+0x48>
 801fd5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801fd5e:	4294      	cmp	r4, r2
 801fd60:	d002      	beq.n	801fd68 <std+0x48>
 801fd62:	33d0      	adds	r3, #208	@ 0xd0
 801fd64:	429c      	cmp	r4, r3
 801fd66:	d105      	bne.n	801fd74 <std+0x54>
 801fd68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801fd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd70:	f000 ba6a 	b.w	8020248 <__retarget_lock_init_recursive>
 801fd74:	bd10      	pop	{r4, pc}
 801fd76:	bf00      	nop
 801fd78:	0801ff95 	.word	0x0801ff95
 801fd7c:	0801ffb7 	.word	0x0801ffb7
 801fd80:	0801ffef 	.word	0x0801ffef
 801fd84:	08020013 	.word	0x08020013
 801fd88:	20022910 	.word	0x20022910

0801fd8c <stdio_exit_handler>:
 801fd8c:	4a02      	ldr	r2, [pc, #8]	@ (801fd98 <stdio_exit_handler+0xc>)
 801fd8e:	4903      	ldr	r1, [pc, #12]	@ (801fd9c <stdio_exit_handler+0x10>)
 801fd90:	4803      	ldr	r0, [pc, #12]	@ (801fda0 <stdio_exit_handler+0x14>)
 801fd92:	f000 b869 	b.w	801fe68 <_fwalk_sglue>
 801fd96:	bf00      	nop
 801fd98:	20000074 	.word	0x20000074
 801fd9c:	08020b4d 	.word	0x08020b4d
 801fda0:	20000084 	.word	0x20000084

0801fda4 <cleanup_stdio>:
 801fda4:	6841      	ldr	r1, [r0, #4]
 801fda6:	4b0c      	ldr	r3, [pc, #48]	@ (801fdd8 <cleanup_stdio+0x34>)
 801fda8:	4299      	cmp	r1, r3
 801fdaa:	b510      	push	{r4, lr}
 801fdac:	4604      	mov	r4, r0
 801fdae:	d001      	beq.n	801fdb4 <cleanup_stdio+0x10>
 801fdb0:	f000 fecc 	bl	8020b4c <_fflush_r>
 801fdb4:	68a1      	ldr	r1, [r4, #8]
 801fdb6:	4b09      	ldr	r3, [pc, #36]	@ (801fddc <cleanup_stdio+0x38>)
 801fdb8:	4299      	cmp	r1, r3
 801fdba:	d002      	beq.n	801fdc2 <cleanup_stdio+0x1e>
 801fdbc:	4620      	mov	r0, r4
 801fdbe:	f000 fec5 	bl	8020b4c <_fflush_r>
 801fdc2:	68e1      	ldr	r1, [r4, #12]
 801fdc4:	4b06      	ldr	r3, [pc, #24]	@ (801fde0 <cleanup_stdio+0x3c>)
 801fdc6:	4299      	cmp	r1, r3
 801fdc8:	d004      	beq.n	801fdd4 <cleanup_stdio+0x30>
 801fdca:	4620      	mov	r0, r4
 801fdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdd0:	f000 bebc 	b.w	8020b4c <_fflush_r>
 801fdd4:	bd10      	pop	{r4, pc}
 801fdd6:	bf00      	nop
 801fdd8:	20022910 	.word	0x20022910
 801fddc:	20022978 	.word	0x20022978
 801fde0:	200229e0 	.word	0x200229e0

0801fde4 <global_stdio_init.part.0>:
 801fde4:	b510      	push	{r4, lr}
 801fde6:	4b0b      	ldr	r3, [pc, #44]	@ (801fe14 <global_stdio_init.part.0+0x30>)
 801fde8:	4c0b      	ldr	r4, [pc, #44]	@ (801fe18 <global_stdio_init.part.0+0x34>)
 801fdea:	4a0c      	ldr	r2, [pc, #48]	@ (801fe1c <global_stdio_init.part.0+0x38>)
 801fdec:	601a      	str	r2, [r3, #0]
 801fdee:	4620      	mov	r0, r4
 801fdf0:	2200      	movs	r2, #0
 801fdf2:	2104      	movs	r1, #4
 801fdf4:	f7ff ff94 	bl	801fd20 <std>
 801fdf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801fdfc:	2201      	movs	r2, #1
 801fdfe:	2109      	movs	r1, #9
 801fe00:	f7ff ff8e 	bl	801fd20 <std>
 801fe04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801fe08:	2202      	movs	r2, #2
 801fe0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe0e:	2112      	movs	r1, #18
 801fe10:	f7ff bf86 	b.w	801fd20 <std>
 801fe14:	20022a48 	.word	0x20022a48
 801fe18:	20022910 	.word	0x20022910
 801fe1c:	0801fd8d 	.word	0x0801fd8d

0801fe20 <__sfp_lock_acquire>:
 801fe20:	4801      	ldr	r0, [pc, #4]	@ (801fe28 <__sfp_lock_acquire+0x8>)
 801fe22:	f000 ba12 	b.w	802024a <__retarget_lock_acquire_recursive>
 801fe26:	bf00      	nop
 801fe28:	20022a51 	.word	0x20022a51

0801fe2c <__sfp_lock_release>:
 801fe2c:	4801      	ldr	r0, [pc, #4]	@ (801fe34 <__sfp_lock_release+0x8>)
 801fe2e:	f000 ba0d 	b.w	802024c <__retarget_lock_release_recursive>
 801fe32:	bf00      	nop
 801fe34:	20022a51 	.word	0x20022a51

0801fe38 <__sinit>:
 801fe38:	b510      	push	{r4, lr}
 801fe3a:	4604      	mov	r4, r0
 801fe3c:	f7ff fff0 	bl	801fe20 <__sfp_lock_acquire>
 801fe40:	6a23      	ldr	r3, [r4, #32]
 801fe42:	b11b      	cbz	r3, 801fe4c <__sinit+0x14>
 801fe44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe48:	f7ff bff0 	b.w	801fe2c <__sfp_lock_release>
 801fe4c:	4b04      	ldr	r3, [pc, #16]	@ (801fe60 <__sinit+0x28>)
 801fe4e:	6223      	str	r3, [r4, #32]
 801fe50:	4b04      	ldr	r3, [pc, #16]	@ (801fe64 <__sinit+0x2c>)
 801fe52:	681b      	ldr	r3, [r3, #0]
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	d1f5      	bne.n	801fe44 <__sinit+0xc>
 801fe58:	f7ff ffc4 	bl	801fde4 <global_stdio_init.part.0>
 801fe5c:	e7f2      	b.n	801fe44 <__sinit+0xc>
 801fe5e:	bf00      	nop
 801fe60:	0801fda5 	.word	0x0801fda5
 801fe64:	20022a48 	.word	0x20022a48

0801fe68 <_fwalk_sglue>:
 801fe68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe6c:	4607      	mov	r7, r0
 801fe6e:	4688      	mov	r8, r1
 801fe70:	4614      	mov	r4, r2
 801fe72:	2600      	movs	r6, #0
 801fe74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fe78:	f1b9 0901 	subs.w	r9, r9, #1
 801fe7c:	d505      	bpl.n	801fe8a <_fwalk_sglue+0x22>
 801fe7e:	6824      	ldr	r4, [r4, #0]
 801fe80:	2c00      	cmp	r4, #0
 801fe82:	d1f7      	bne.n	801fe74 <_fwalk_sglue+0xc>
 801fe84:	4630      	mov	r0, r6
 801fe86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe8a:	89ab      	ldrh	r3, [r5, #12]
 801fe8c:	2b01      	cmp	r3, #1
 801fe8e:	d907      	bls.n	801fea0 <_fwalk_sglue+0x38>
 801fe90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fe94:	3301      	adds	r3, #1
 801fe96:	d003      	beq.n	801fea0 <_fwalk_sglue+0x38>
 801fe98:	4629      	mov	r1, r5
 801fe9a:	4638      	mov	r0, r7
 801fe9c:	47c0      	blx	r8
 801fe9e:	4306      	orrs	r6, r0
 801fea0:	3568      	adds	r5, #104	@ 0x68
 801fea2:	e7e9      	b.n	801fe78 <_fwalk_sglue+0x10>

0801fea4 <iprintf>:
 801fea4:	b40f      	push	{r0, r1, r2, r3}
 801fea6:	b507      	push	{r0, r1, r2, lr}
 801fea8:	4906      	ldr	r1, [pc, #24]	@ (801fec4 <iprintf+0x20>)
 801feaa:	ab04      	add	r3, sp, #16
 801feac:	6808      	ldr	r0, [r1, #0]
 801feae:	f853 2b04 	ldr.w	r2, [r3], #4
 801feb2:	6881      	ldr	r1, [r0, #8]
 801feb4:	9301      	str	r3, [sp, #4]
 801feb6:	f000 fb21 	bl	80204fc <_vfiprintf_r>
 801feba:	b003      	add	sp, #12
 801febc:	f85d eb04 	ldr.w	lr, [sp], #4
 801fec0:	b004      	add	sp, #16
 801fec2:	4770      	bx	lr
 801fec4:	20000080 	.word	0x20000080

0801fec8 <putchar>:
 801fec8:	4b02      	ldr	r3, [pc, #8]	@ (801fed4 <putchar+0xc>)
 801feca:	4601      	mov	r1, r0
 801fecc:	6818      	ldr	r0, [r3, #0]
 801fece:	6882      	ldr	r2, [r0, #8]
 801fed0:	f000 bed8 	b.w	8020c84 <_putc_r>
 801fed4:	20000080 	.word	0x20000080

0801fed8 <_puts_r>:
 801fed8:	6a03      	ldr	r3, [r0, #32]
 801feda:	b570      	push	{r4, r5, r6, lr}
 801fedc:	6884      	ldr	r4, [r0, #8]
 801fede:	4605      	mov	r5, r0
 801fee0:	460e      	mov	r6, r1
 801fee2:	b90b      	cbnz	r3, 801fee8 <_puts_r+0x10>
 801fee4:	f7ff ffa8 	bl	801fe38 <__sinit>
 801fee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801feea:	07db      	lsls	r3, r3, #31
 801feec:	d405      	bmi.n	801fefa <_puts_r+0x22>
 801feee:	89a3      	ldrh	r3, [r4, #12]
 801fef0:	0598      	lsls	r0, r3, #22
 801fef2:	d402      	bmi.n	801fefa <_puts_r+0x22>
 801fef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fef6:	f000 f9a8 	bl	802024a <__retarget_lock_acquire_recursive>
 801fefa:	89a3      	ldrh	r3, [r4, #12]
 801fefc:	0719      	lsls	r1, r3, #28
 801fefe:	d502      	bpl.n	801ff06 <_puts_r+0x2e>
 801ff00:	6923      	ldr	r3, [r4, #16]
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d135      	bne.n	801ff72 <_puts_r+0x9a>
 801ff06:	4621      	mov	r1, r4
 801ff08:	4628      	mov	r0, r5
 801ff0a:	f000 f8c5 	bl	8020098 <__swsetup_r>
 801ff0e:	b380      	cbz	r0, 801ff72 <_puts_r+0x9a>
 801ff10:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801ff14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ff16:	07da      	lsls	r2, r3, #31
 801ff18:	d405      	bmi.n	801ff26 <_puts_r+0x4e>
 801ff1a:	89a3      	ldrh	r3, [r4, #12]
 801ff1c:	059b      	lsls	r3, r3, #22
 801ff1e:	d402      	bmi.n	801ff26 <_puts_r+0x4e>
 801ff20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ff22:	f000 f993 	bl	802024c <__retarget_lock_release_recursive>
 801ff26:	4628      	mov	r0, r5
 801ff28:	bd70      	pop	{r4, r5, r6, pc}
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	da04      	bge.n	801ff38 <_puts_r+0x60>
 801ff2e:	69a2      	ldr	r2, [r4, #24]
 801ff30:	429a      	cmp	r2, r3
 801ff32:	dc17      	bgt.n	801ff64 <_puts_r+0x8c>
 801ff34:	290a      	cmp	r1, #10
 801ff36:	d015      	beq.n	801ff64 <_puts_r+0x8c>
 801ff38:	6823      	ldr	r3, [r4, #0]
 801ff3a:	1c5a      	adds	r2, r3, #1
 801ff3c:	6022      	str	r2, [r4, #0]
 801ff3e:	7019      	strb	r1, [r3, #0]
 801ff40:	68a3      	ldr	r3, [r4, #8]
 801ff42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ff46:	3b01      	subs	r3, #1
 801ff48:	60a3      	str	r3, [r4, #8]
 801ff4a:	2900      	cmp	r1, #0
 801ff4c:	d1ed      	bne.n	801ff2a <_puts_r+0x52>
 801ff4e:	2b00      	cmp	r3, #0
 801ff50:	da11      	bge.n	801ff76 <_puts_r+0x9e>
 801ff52:	4622      	mov	r2, r4
 801ff54:	210a      	movs	r1, #10
 801ff56:	4628      	mov	r0, r5
 801ff58:	f000 f85f 	bl	802001a <__swbuf_r>
 801ff5c:	3001      	adds	r0, #1
 801ff5e:	d0d7      	beq.n	801ff10 <_puts_r+0x38>
 801ff60:	250a      	movs	r5, #10
 801ff62:	e7d7      	b.n	801ff14 <_puts_r+0x3c>
 801ff64:	4622      	mov	r2, r4
 801ff66:	4628      	mov	r0, r5
 801ff68:	f000 f857 	bl	802001a <__swbuf_r>
 801ff6c:	3001      	adds	r0, #1
 801ff6e:	d1e7      	bne.n	801ff40 <_puts_r+0x68>
 801ff70:	e7ce      	b.n	801ff10 <_puts_r+0x38>
 801ff72:	3e01      	subs	r6, #1
 801ff74:	e7e4      	b.n	801ff40 <_puts_r+0x68>
 801ff76:	6823      	ldr	r3, [r4, #0]
 801ff78:	1c5a      	adds	r2, r3, #1
 801ff7a:	6022      	str	r2, [r4, #0]
 801ff7c:	220a      	movs	r2, #10
 801ff7e:	701a      	strb	r2, [r3, #0]
 801ff80:	e7ee      	b.n	801ff60 <_puts_r+0x88>
	...

0801ff84 <puts>:
 801ff84:	4b02      	ldr	r3, [pc, #8]	@ (801ff90 <puts+0xc>)
 801ff86:	4601      	mov	r1, r0
 801ff88:	6818      	ldr	r0, [r3, #0]
 801ff8a:	f7ff bfa5 	b.w	801fed8 <_puts_r>
 801ff8e:	bf00      	nop
 801ff90:	20000080 	.word	0x20000080

0801ff94 <__sread>:
 801ff94:	b510      	push	{r4, lr}
 801ff96:	460c      	mov	r4, r1
 801ff98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff9c:	f000 f90c 	bl	80201b8 <_read_r>
 801ffa0:	2800      	cmp	r0, #0
 801ffa2:	bfab      	itete	ge
 801ffa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ffa6:	89a3      	ldrhlt	r3, [r4, #12]
 801ffa8:	181b      	addge	r3, r3, r0
 801ffaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ffae:	bfac      	ite	ge
 801ffb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ffb2:	81a3      	strhlt	r3, [r4, #12]
 801ffb4:	bd10      	pop	{r4, pc}

0801ffb6 <__swrite>:
 801ffb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffba:	461f      	mov	r7, r3
 801ffbc:	898b      	ldrh	r3, [r1, #12]
 801ffbe:	05db      	lsls	r3, r3, #23
 801ffc0:	4605      	mov	r5, r0
 801ffc2:	460c      	mov	r4, r1
 801ffc4:	4616      	mov	r6, r2
 801ffc6:	d505      	bpl.n	801ffd4 <__swrite+0x1e>
 801ffc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ffcc:	2302      	movs	r3, #2
 801ffce:	2200      	movs	r2, #0
 801ffd0:	f000 f8e0 	bl	8020194 <_lseek_r>
 801ffd4:	89a3      	ldrh	r3, [r4, #12]
 801ffd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ffda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ffde:	81a3      	strh	r3, [r4, #12]
 801ffe0:	4632      	mov	r2, r6
 801ffe2:	463b      	mov	r3, r7
 801ffe4:	4628      	mov	r0, r5
 801ffe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ffea:	f000 b8f7 	b.w	80201dc <_write_r>

0801ffee <__sseek>:
 801ffee:	b510      	push	{r4, lr}
 801fff0:	460c      	mov	r4, r1
 801fff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fff6:	f000 f8cd 	bl	8020194 <_lseek_r>
 801fffa:	1c43      	adds	r3, r0, #1
 801fffc:	89a3      	ldrh	r3, [r4, #12]
 801fffe:	bf15      	itete	ne
 8020000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802000a:	81a3      	strheq	r3, [r4, #12]
 802000c:	bf18      	it	ne
 802000e:	81a3      	strhne	r3, [r4, #12]
 8020010:	bd10      	pop	{r4, pc}

08020012 <__sclose>:
 8020012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020016:	f000 b8ad 	b.w	8020174 <_close_r>

0802001a <__swbuf_r>:
 802001a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802001c:	460e      	mov	r6, r1
 802001e:	4614      	mov	r4, r2
 8020020:	4605      	mov	r5, r0
 8020022:	b118      	cbz	r0, 802002c <__swbuf_r+0x12>
 8020024:	6a03      	ldr	r3, [r0, #32]
 8020026:	b90b      	cbnz	r3, 802002c <__swbuf_r+0x12>
 8020028:	f7ff ff06 	bl	801fe38 <__sinit>
 802002c:	69a3      	ldr	r3, [r4, #24]
 802002e:	60a3      	str	r3, [r4, #8]
 8020030:	89a3      	ldrh	r3, [r4, #12]
 8020032:	071a      	lsls	r2, r3, #28
 8020034:	d501      	bpl.n	802003a <__swbuf_r+0x20>
 8020036:	6923      	ldr	r3, [r4, #16]
 8020038:	b943      	cbnz	r3, 802004c <__swbuf_r+0x32>
 802003a:	4621      	mov	r1, r4
 802003c:	4628      	mov	r0, r5
 802003e:	f000 f82b 	bl	8020098 <__swsetup_r>
 8020042:	b118      	cbz	r0, 802004c <__swbuf_r+0x32>
 8020044:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8020048:	4638      	mov	r0, r7
 802004a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802004c:	6823      	ldr	r3, [r4, #0]
 802004e:	6922      	ldr	r2, [r4, #16]
 8020050:	1a98      	subs	r0, r3, r2
 8020052:	6963      	ldr	r3, [r4, #20]
 8020054:	b2f6      	uxtb	r6, r6
 8020056:	4283      	cmp	r3, r0
 8020058:	4637      	mov	r7, r6
 802005a:	dc05      	bgt.n	8020068 <__swbuf_r+0x4e>
 802005c:	4621      	mov	r1, r4
 802005e:	4628      	mov	r0, r5
 8020060:	f000 fd74 	bl	8020b4c <_fflush_r>
 8020064:	2800      	cmp	r0, #0
 8020066:	d1ed      	bne.n	8020044 <__swbuf_r+0x2a>
 8020068:	68a3      	ldr	r3, [r4, #8]
 802006a:	3b01      	subs	r3, #1
 802006c:	60a3      	str	r3, [r4, #8]
 802006e:	6823      	ldr	r3, [r4, #0]
 8020070:	1c5a      	adds	r2, r3, #1
 8020072:	6022      	str	r2, [r4, #0]
 8020074:	701e      	strb	r6, [r3, #0]
 8020076:	6962      	ldr	r2, [r4, #20]
 8020078:	1c43      	adds	r3, r0, #1
 802007a:	429a      	cmp	r2, r3
 802007c:	d004      	beq.n	8020088 <__swbuf_r+0x6e>
 802007e:	89a3      	ldrh	r3, [r4, #12]
 8020080:	07db      	lsls	r3, r3, #31
 8020082:	d5e1      	bpl.n	8020048 <__swbuf_r+0x2e>
 8020084:	2e0a      	cmp	r6, #10
 8020086:	d1df      	bne.n	8020048 <__swbuf_r+0x2e>
 8020088:	4621      	mov	r1, r4
 802008a:	4628      	mov	r0, r5
 802008c:	f000 fd5e 	bl	8020b4c <_fflush_r>
 8020090:	2800      	cmp	r0, #0
 8020092:	d0d9      	beq.n	8020048 <__swbuf_r+0x2e>
 8020094:	e7d6      	b.n	8020044 <__swbuf_r+0x2a>
	...

08020098 <__swsetup_r>:
 8020098:	b538      	push	{r3, r4, r5, lr}
 802009a:	4b29      	ldr	r3, [pc, #164]	@ (8020140 <__swsetup_r+0xa8>)
 802009c:	4605      	mov	r5, r0
 802009e:	6818      	ldr	r0, [r3, #0]
 80200a0:	460c      	mov	r4, r1
 80200a2:	b118      	cbz	r0, 80200ac <__swsetup_r+0x14>
 80200a4:	6a03      	ldr	r3, [r0, #32]
 80200a6:	b90b      	cbnz	r3, 80200ac <__swsetup_r+0x14>
 80200a8:	f7ff fec6 	bl	801fe38 <__sinit>
 80200ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80200b0:	0719      	lsls	r1, r3, #28
 80200b2:	d422      	bmi.n	80200fa <__swsetup_r+0x62>
 80200b4:	06da      	lsls	r2, r3, #27
 80200b6:	d407      	bmi.n	80200c8 <__swsetup_r+0x30>
 80200b8:	2209      	movs	r2, #9
 80200ba:	602a      	str	r2, [r5, #0]
 80200bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80200c0:	81a3      	strh	r3, [r4, #12]
 80200c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80200c6:	e033      	b.n	8020130 <__swsetup_r+0x98>
 80200c8:	0758      	lsls	r0, r3, #29
 80200ca:	d512      	bpl.n	80200f2 <__swsetup_r+0x5a>
 80200cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80200ce:	b141      	cbz	r1, 80200e2 <__swsetup_r+0x4a>
 80200d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80200d4:	4299      	cmp	r1, r3
 80200d6:	d002      	beq.n	80200de <__swsetup_r+0x46>
 80200d8:	4628      	mov	r0, r5
 80200da:	f000 f8e5 	bl	80202a8 <_free_r>
 80200de:	2300      	movs	r3, #0
 80200e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80200e2:	89a3      	ldrh	r3, [r4, #12]
 80200e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80200e8:	81a3      	strh	r3, [r4, #12]
 80200ea:	2300      	movs	r3, #0
 80200ec:	6063      	str	r3, [r4, #4]
 80200ee:	6923      	ldr	r3, [r4, #16]
 80200f0:	6023      	str	r3, [r4, #0]
 80200f2:	89a3      	ldrh	r3, [r4, #12]
 80200f4:	f043 0308 	orr.w	r3, r3, #8
 80200f8:	81a3      	strh	r3, [r4, #12]
 80200fa:	6923      	ldr	r3, [r4, #16]
 80200fc:	b94b      	cbnz	r3, 8020112 <__swsetup_r+0x7a>
 80200fe:	89a3      	ldrh	r3, [r4, #12]
 8020100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020108:	d003      	beq.n	8020112 <__swsetup_r+0x7a>
 802010a:	4621      	mov	r1, r4
 802010c:	4628      	mov	r0, r5
 802010e:	f000 fd7d 	bl	8020c0c <__smakebuf_r>
 8020112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020116:	f013 0201 	ands.w	r2, r3, #1
 802011a:	d00a      	beq.n	8020132 <__swsetup_r+0x9a>
 802011c:	2200      	movs	r2, #0
 802011e:	60a2      	str	r2, [r4, #8]
 8020120:	6962      	ldr	r2, [r4, #20]
 8020122:	4252      	negs	r2, r2
 8020124:	61a2      	str	r2, [r4, #24]
 8020126:	6922      	ldr	r2, [r4, #16]
 8020128:	b942      	cbnz	r2, 802013c <__swsetup_r+0xa4>
 802012a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802012e:	d1c5      	bne.n	80200bc <__swsetup_r+0x24>
 8020130:	bd38      	pop	{r3, r4, r5, pc}
 8020132:	0799      	lsls	r1, r3, #30
 8020134:	bf58      	it	pl
 8020136:	6962      	ldrpl	r2, [r4, #20]
 8020138:	60a2      	str	r2, [r4, #8]
 802013a:	e7f4      	b.n	8020126 <__swsetup_r+0x8e>
 802013c:	2000      	movs	r0, #0
 802013e:	e7f7      	b.n	8020130 <__swsetup_r+0x98>
 8020140:	20000080 	.word	0x20000080

08020144 <memcmp>:
 8020144:	b510      	push	{r4, lr}
 8020146:	3901      	subs	r1, #1
 8020148:	4402      	add	r2, r0
 802014a:	4290      	cmp	r0, r2
 802014c:	d101      	bne.n	8020152 <memcmp+0xe>
 802014e:	2000      	movs	r0, #0
 8020150:	e005      	b.n	802015e <memcmp+0x1a>
 8020152:	7803      	ldrb	r3, [r0, #0]
 8020154:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020158:	42a3      	cmp	r3, r4
 802015a:	d001      	beq.n	8020160 <memcmp+0x1c>
 802015c:	1b18      	subs	r0, r3, r4
 802015e:	bd10      	pop	{r4, pc}
 8020160:	3001      	adds	r0, #1
 8020162:	e7f2      	b.n	802014a <memcmp+0x6>

08020164 <memset>:
 8020164:	4402      	add	r2, r0
 8020166:	4603      	mov	r3, r0
 8020168:	4293      	cmp	r3, r2
 802016a:	d100      	bne.n	802016e <memset+0xa>
 802016c:	4770      	bx	lr
 802016e:	f803 1b01 	strb.w	r1, [r3], #1
 8020172:	e7f9      	b.n	8020168 <memset+0x4>

08020174 <_close_r>:
 8020174:	b538      	push	{r3, r4, r5, lr}
 8020176:	4d06      	ldr	r5, [pc, #24]	@ (8020190 <_close_r+0x1c>)
 8020178:	2300      	movs	r3, #0
 802017a:	4604      	mov	r4, r0
 802017c:	4608      	mov	r0, r1
 802017e:	602b      	str	r3, [r5, #0]
 8020180:	f7e1 fc6e 	bl	8001a60 <_close>
 8020184:	1c43      	adds	r3, r0, #1
 8020186:	d102      	bne.n	802018e <_close_r+0x1a>
 8020188:	682b      	ldr	r3, [r5, #0]
 802018a:	b103      	cbz	r3, 802018e <_close_r+0x1a>
 802018c:	6023      	str	r3, [r4, #0]
 802018e:	bd38      	pop	{r3, r4, r5, pc}
 8020190:	20022a4c 	.word	0x20022a4c

08020194 <_lseek_r>:
 8020194:	b538      	push	{r3, r4, r5, lr}
 8020196:	4d07      	ldr	r5, [pc, #28]	@ (80201b4 <_lseek_r+0x20>)
 8020198:	4604      	mov	r4, r0
 802019a:	4608      	mov	r0, r1
 802019c:	4611      	mov	r1, r2
 802019e:	2200      	movs	r2, #0
 80201a0:	602a      	str	r2, [r5, #0]
 80201a2:	461a      	mov	r2, r3
 80201a4:	f7e1 fc83 	bl	8001aae <_lseek>
 80201a8:	1c43      	adds	r3, r0, #1
 80201aa:	d102      	bne.n	80201b2 <_lseek_r+0x1e>
 80201ac:	682b      	ldr	r3, [r5, #0]
 80201ae:	b103      	cbz	r3, 80201b2 <_lseek_r+0x1e>
 80201b0:	6023      	str	r3, [r4, #0]
 80201b2:	bd38      	pop	{r3, r4, r5, pc}
 80201b4:	20022a4c 	.word	0x20022a4c

080201b8 <_read_r>:
 80201b8:	b538      	push	{r3, r4, r5, lr}
 80201ba:	4d07      	ldr	r5, [pc, #28]	@ (80201d8 <_read_r+0x20>)
 80201bc:	4604      	mov	r4, r0
 80201be:	4608      	mov	r0, r1
 80201c0:	4611      	mov	r1, r2
 80201c2:	2200      	movs	r2, #0
 80201c4:	602a      	str	r2, [r5, #0]
 80201c6:	461a      	mov	r2, r3
 80201c8:	f7e1 fc2d 	bl	8001a26 <_read>
 80201cc:	1c43      	adds	r3, r0, #1
 80201ce:	d102      	bne.n	80201d6 <_read_r+0x1e>
 80201d0:	682b      	ldr	r3, [r5, #0]
 80201d2:	b103      	cbz	r3, 80201d6 <_read_r+0x1e>
 80201d4:	6023      	str	r3, [r4, #0]
 80201d6:	bd38      	pop	{r3, r4, r5, pc}
 80201d8:	20022a4c 	.word	0x20022a4c

080201dc <_write_r>:
 80201dc:	b538      	push	{r3, r4, r5, lr}
 80201de:	4d07      	ldr	r5, [pc, #28]	@ (80201fc <_write_r+0x20>)
 80201e0:	4604      	mov	r4, r0
 80201e2:	4608      	mov	r0, r1
 80201e4:	4611      	mov	r1, r2
 80201e6:	2200      	movs	r2, #0
 80201e8:	602a      	str	r2, [r5, #0]
 80201ea:	461a      	mov	r2, r3
 80201ec:	f7e0 ff8c 	bl	8001108 <_write>
 80201f0:	1c43      	adds	r3, r0, #1
 80201f2:	d102      	bne.n	80201fa <_write_r+0x1e>
 80201f4:	682b      	ldr	r3, [r5, #0]
 80201f6:	b103      	cbz	r3, 80201fa <_write_r+0x1e>
 80201f8:	6023      	str	r3, [r4, #0]
 80201fa:	bd38      	pop	{r3, r4, r5, pc}
 80201fc:	20022a4c 	.word	0x20022a4c

08020200 <__libc_init_array>:
 8020200:	b570      	push	{r4, r5, r6, lr}
 8020202:	4d0d      	ldr	r5, [pc, #52]	@ (8020238 <__libc_init_array+0x38>)
 8020204:	4c0d      	ldr	r4, [pc, #52]	@ (802023c <__libc_init_array+0x3c>)
 8020206:	1b64      	subs	r4, r4, r5
 8020208:	10a4      	asrs	r4, r4, #2
 802020a:	2600      	movs	r6, #0
 802020c:	42a6      	cmp	r6, r4
 802020e:	d109      	bne.n	8020224 <__libc_init_array+0x24>
 8020210:	4d0b      	ldr	r5, [pc, #44]	@ (8020240 <__libc_init_array+0x40>)
 8020212:	4c0c      	ldr	r4, [pc, #48]	@ (8020244 <__libc_init_array+0x44>)
 8020214:	f000 fde8 	bl	8020de8 <_init>
 8020218:	1b64      	subs	r4, r4, r5
 802021a:	10a4      	asrs	r4, r4, #2
 802021c:	2600      	movs	r6, #0
 802021e:	42a6      	cmp	r6, r4
 8020220:	d105      	bne.n	802022e <__libc_init_array+0x2e>
 8020222:	bd70      	pop	{r4, r5, r6, pc}
 8020224:	f855 3b04 	ldr.w	r3, [r5], #4
 8020228:	4798      	blx	r3
 802022a:	3601      	adds	r6, #1
 802022c:	e7ee      	b.n	802020c <__libc_init_array+0xc>
 802022e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020232:	4798      	blx	r3
 8020234:	3601      	adds	r6, #1
 8020236:	e7f2      	b.n	802021e <__libc_init_array+0x1e>
 8020238:	08025580 	.word	0x08025580
 802023c:	08025580 	.word	0x08025580
 8020240:	08025580 	.word	0x08025580
 8020244:	08025584 	.word	0x08025584

08020248 <__retarget_lock_init_recursive>:
 8020248:	4770      	bx	lr

0802024a <__retarget_lock_acquire_recursive>:
 802024a:	4770      	bx	lr

0802024c <__retarget_lock_release_recursive>:
 802024c:	4770      	bx	lr

0802024e <memcpy>:
 802024e:	440a      	add	r2, r1
 8020250:	4291      	cmp	r1, r2
 8020252:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8020256:	d100      	bne.n	802025a <memcpy+0xc>
 8020258:	4770      	bx	lr
 802025a:	b510      	push	{r4, lr}
 802025c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020264:	4291      	cmp	r1, r2
 8020266:	d1f9      	bne.n	802025c <memcpy+0xe>
 8020268:	bd10      	pop	{r4, pc}
	...

0802026c <__assert_func>:
 802026c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802026e:	4614      	mov	r4, r2
 8020270:	461a      	mov	r2, r3
 8020272:	4b09      	ldr	r3, [pc, #36]	@ (8020298 <__assert_func+0x2c>)
 8020274:	681b      	ldr	r3, [r3, #0]
 8020276:	4605      	mov	r5, r0
 8020278:	68d8      	ldr	r0, [r3, #12]
 802027a:	b14c      	cbz	r4, 8020290 <__assert_func+0x24>
 802027c:	4b07      	ldr	r3, [pc, #28]	@ (802029c <__assert_func+0x30>)
 802027e:	9100      	str	r1, [sp, #0]
 8020280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020284:	4906      	ldr	r1, [pc, #24]	@ (80202a0 <__assert_func+0x34>)
 8020286:	462b      	mov	r3, r5
 8020288:	f000 fc88 	bl	8020b9c <fiprintf>
 802028c:	f000 fd60 	bl	8020d50 <abort>
 8020290:	4b04      	ldr	r3, [pc, #16]	@ (80202a4 <__assert_func+0x38>)
 8020292:	461c      	mov	r4, r3
 8020294:	e7f3      	b.n	802027e <__assert_func+0x12>
 8020296:	bf00      	nop
 8020298:	20000080 	.word	0x20000080
 802029c:	08025509 	.word	0x08025509
 80202a0:	08025516 	.word	0x08025516
 80202a4:	08025544 	.word	0x08025544

080202a8 <_free_r>:
 80202a8:	b538      	push	{r3, r4, r5, lr}
 80202aa:	4605      	mov	r5, r0
 80202ac:	2900      	cmp	r1, #0
 80202ae:	d041      	beq.n	8020334 <_free_r+0x8c>
 80202b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80202b4:	1f0c      	subs	r4, r1, #4
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	bfb8      	it	lt
 80202ba:	18e4      	addlt	r4, r4, r3
 80202bc:	f000 f8e8 	bl	8020490 <__malloc_lock>
 80202c0:	4a1d      	ldr	r2, [pc, #116]	@ (8020338 <_free_r+0x90>)
 80202c2:	6813      	ldr	r3, [r2, #0]
 80202c4:	b933      	cbnz	r3, 80202d4 <_free_r+0x2c>
 80202c6:	6063      	str	r3, [r4, #4]
 80202c8:	6014      	str	r4, [r2, #0]
 80202ca:	4628      	mov	r0, r5
 80202cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80202d0:	f000 b8e4 	b.w	802049c <__malloc_unlock>
 80202d4:	42a3      	cmp	r3, r4
 80202d6:	d908      	bls.n	80202ea <_free_r+0x42>
 80202d8:	6820      	ldr	r0, [r4, #0]
 80202da:	1821      	adds	r1, r4, r0
 80202dc:	428b      	cmp	r3, r1
 80202de:	bf01      	itttt	eq
 80202e0:	6819      	ldreq	r1, [r3, #0]
 80202e2:	685b      	ldreq	r3, [r3, #4]
 80202e4:	1809      	addeq	r1, r1, r0
 80202e6:	6021      	streq	r1, [r4, #0]
 80202e8:	e7ed      	b.n	80202c6 <_free_r+0x1e>
 80202ea:	461a      	mov	r2, r3
 80202ec:	685b      	ldr	r3, [r3, #4]
 80202ee:	b10b      	cbz	r3, 80202f4 <_free_r+0x4c>
 80202f0:	42a3      	cmp	r3, r4
 80202f2:	d9fa      	bls.n	80202ea <_free_r+0x42>
 80202f4:	6811      	ldr	r1, [r2, #0]
 80202f6:	1850      	adds	r0, r2, r1
 80202f8:	42a0      	cmp	r0, r4
 80202fa:	d10b      	bne.n	8020314 <_free_r+0x6c>
 80202fc:	6820      	ldr	r0, [r4, #0]
 80202fe:	4401      	add	r1, r0
 8020300:	1850      	adds	r0, r2, r1
 8020302:	4283      	cmp	r3, r0
 8020304:	6011      	str	r1, [r2, #0]
 8020306:	d1e0      	bne.n	80202ca <_free_r+0x22>
 8020308:	6818      	ldr	r0, [r3, #0]
 802030a:	685b      	ldr	r3, [r3, #4]
 802030c:	6053      	str	r3, [r2, #4]
 802030e:	4408      	add	r0, r1
 8020310:	6010      	str	r0, [r2, #0]
 8020312:	e7da      	b.n	80202ca <_free_r+0x22>
 8020314:	d902      	bls.n	802031c <_free_r+0x74>
 8020316:	230c      	movs	r3, #12
 8020318:	602b      	str	r3, [r5, #0]
 802031a:	e7d6      	b.n	80202ca <_free_r+0x22>
 802031c:	6820      	ldr	r0, [r4, #0]
 802031e:	1821      	adds	r1, r4, r0
 8020320:	428b      	cmp	r3, r1
 8020322:	bf04      	itt	eq
 8020324:	6819      	ldreq	r1, [r3, #0]
 8020326:	685b      	ldreq	r3, [r3, #4]
 8020328:	6063      	str	r3, [r4, #4]
 802032a:	bf04      	itt	eq
 802032c:	1809      	addeq	r1, r1, r0
 802032e:	6021      	streq	r1, [r4, #0]
 8020330:	6054      	str	r4, [r2, #4]
 8020332:	e7ca      	b.n	80202ca <_free_r+0x22>
 8020334:	bd38      	pop	{r3, r4, r5, pc}
 8020336:	bf00      	nop
 8020338:	20022a58 	.word	0x20022a58

0802033c <malloc>:
 802033c:	4b02      	ldr	r3, [pc, #8]	@ (8020348 <malloc+0xc>)
 802033e:	4601      	mov	r1, r0
 8020340:	6818      	ldr	r0, [r3, #0]
 8020342:	f000 b825 	b.w	8020390 <_malloc_r>
 8020346:	bf00      	nop
 8020348:	20000080 	.word	0x20000080

0802034c <sbrk_aligned>:
 802034c:	b570      	push	{r4, r5, r6, lr}
 802034e:	4e0f      	ldr	r6, [pc, #60]	@ (802038c <sbrk_aligned+0x40>)
 8020350:	460c      	mov	r4, r1
 8020352:	6831      	ldr	r1, [r6, #0]
 8020354:	4605      	mov	r5, r0
 8020356:	b911      	cbnz	r1, 802035e <sbrk_aligned+0x12>
 8020358:	f000 fcea 	bl	8020d30 <_sbrk_r>
 802035c:	6030      	str	r0, [r6, #0]
 802035e:	4621      	mov	r1, r4
 8020360:	4628      	mov	r0, r5
 8020362:	f000 fce5 	bl	8020d30 <_sbrk_r>
 8020366:	1c43      	adds	r3, r0, #1
 8020368:	d103      	bne.n	8020372 <sbrk_aligned+0x26>
 802036a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802036e:	4620      	mov	r0, r4
 8020370:	bd70      	pop	{r4, r5, r6, pc}
 8020372:	1cc4      	adds	r4, r0, #3
 8020374:	f024 0403 	bic.w	r4, r4, #3
 8020378:	42a0      	cmp	r0, r4
 802037a:	d0f8      	beq.n	802036e <sbrk_aligned+0x22>
 802037c:	1a21      	subs	r1, r4, r0
 802037e:	4628      	mov	r0, r5
 8020380:	f000 fcd6 	bl	8020d30 <_sbrk_r>
 8020384:	3001      	adds	r0, #1
 8020386:	d1f2      	bne.n	802036e <sbrk_aligned+0x22>
 8020388:	e7ef      	b.n	802036a <sbrk_aligned+0x1e>
 802038a:	bf00      	nop
 802038c:	20022a54 	.word	0x20022a54

08020390 <_malloc_r>:
 8020390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020394:	1ccd      	adds	r5, r1, #3
 8020396:	f025 0503 	bic.w	r5, r5, #3
 802039a:	3508      	adds	r5, #8
 802039c:	2d0c      	cmp	r5, #12
 802039e:	bf38      	it	cc
 80203a0:	250c      	movcc	r5, #12
 80203a2:	2d00      	cmp	r5, #0
 80203a4:	4606      	mov	r6, r0
 80203a6:	db01      	blt.n	80203ac <_malloc_r+0x1c>
 80203a8:	42a9      	cmp	r1, r5
 80203aa:	d904      	bls.n	80203b6 <_malloc_r+0x26>
 80203ac:	230c      	movs	r3, #12
 80203ae:	6033      	str	r3, [r6, #0]
 80203b0:	2000      	movs	r0, #0
 80203b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802048c <_malloc_r+0xfc>
 80203ba:	f000 f869 	bl	8020490 <__malloc_lock>
 80203be:	f8d8 3000 	ldr.w	r3, [r8]
 80203c2:	461c      	mov	r4, r3
 80203c4:	bb44      	cbnz	r4, 8020418 <_malloc_r+0x88>
 80203c6:	4629      	mov	r1, r5
 80203c8:	4630      	mov	r0, r6
 80203ca:	f7ff ffbf 	bl	802034c <sbrk_aligned>
 80203ce:	1c43      	adds	r3, r0, #1
 80203d0:	4604      	mov	r4, r0
 80203d2:	d158      	bne.n	8020486 <_malloc_r+0xf6>
 80203d4:	f8d8 4000 	ldr.w	r4, [r8]
 80203d8:	4627      	mov	r7, r4
 80203da:	2f00      	cmp	r7, #0
 80203dc:	d143      	bne.n	8020466 <_malloc_r+0xd6>
 80203de:	2c00      	cmp	r4, #0
 80203e0:	d04b      	beq.n	802047a <_malloc_r+0xea>
 80203e2:	6823      	ldr	r3, [r4, #0]
 80203e4:	4639      	mov	r1, r7
 80203e6:	4630      	mov	r0, r6
 80203e8:	eb04 0903 	add.w	r9, r4, r3
 80203ec:	f000 fca0 	bl	8020d30 <_sbrk_r>
 80203f0:	4581      	cmp	r9, r0
 80203f2:	d142      	bne.n	802047a <_malloc_r+0xea>
 80203f4:	6821      	ldr	r1, [r4, #0]
 80203f6:	1a6d      	subs	r5, r5, r1
 80203f8:	4629      	mov	r1, r5
 80203fa:	4630      	mov	r0, r6
 80203fc:	f7ff ffa6 	bl	802034c <sbrk_aligned>
 8020400:	3001      	adds	r0, #1
 8020402:	d03a      	beq.n	802047a <_malloc_r+0xea>
 8020404:	6823      	ldr	r3, [r4, #0]
 8020406:	442b      	add	r3, r5
 8020408:	6023      	str	r3, [r4, #0]
 802040a:	f8d8 3000 	ldr.w	r3, [r8]
 802040e:	685a      	ldr	r2, [r3, #4]
 8020410:	bb62      	cbnz	r2, 802046c <_malloc_r+0xdc>
 8020412:	f8c8 7000 	str.w	r7, [r8]
 8020416:	e00f      	b.n	8020438 <_malloc_r+0xa8>
 8020418:	6822      	ldr	r2, [r4, #0]
 802041a:	1b52      	subs	r2, r2, r5
 802041c:	d420      	bmi.n	8020460 <_malloc_r+0xd0>
 802041e:	2a0b      	cmp	r2, #11
 8020420:	d917      	bls.n	8020452 <_malloc_r+0xc2>
 8020422:	1961      	adds	r1, r4, r5
 8020424:	42a3      	cmp	r3, r4
 8020426:	6025      	str	r5, [r4, #0]
 8020428:	bf18      	it	ne
 802042a:	6059      	strne	r1, [r3, #4]
 802042c:	6863      	ldr	r3, [r4, #4]
 802042e:	bf08      	it	eq
 8020430:	f8c8 1000 	streq.w	r1, [r8]
 8020434:	5162      	str	r2, [r4, r5]
 8020436:	604b      	str	r3, [r1, #4]
 8020438:	4630      	mov	r0, r6
 802043a:	f000 f82f 	bl	802049c <__malloc_unlock>
 802043e:	f104 000b 	add.w	r0, r4, #11
 8020442:	1d23      	adds	r3, r4, #4
 8020444:	f020 0007 	bic.w	r0, r0, #7
 8020448:	1ac2      	subs	r2, r0, r3
 802044a:	bf1c      	itt	ne
 802044c:	1a1b      	subne	r3, r3, r0
 802044e:	50a3      	strne	r3, [r4, r2]
 8020450:	e7af      	b.n	80203b2 <_malloc_r+0x22>
 8020452:	6862      	ldr	r2, [r4, #4]
 8020454:	42a3      	cmp	r3, r4
 8020456:	bf0c      	ite	eq
 8020458:	f8c8 2000 	streq.w	r2, [r8]
 802045c:	605a      	strne	r2, [r3, #4]
 802045e:	e7eb      	b.n	8020438 <_malloc_r+0xa8>
 8020460:	4623      	mov	r3, r4
 8020462:	6864      	ldr	r4, [r4, #4]
 8020464:	e7ae      	b.n	80203c4 <_malloc_r+0x34>
 8020466:	463c      	mov	r4, r7
 8020468:	687f      	ldr	r7, [r7, #4]
 802046a:	e7b6      	b.n	80203da <_malloc_r+0x4a>
 802046c:	461a      	mov	r2, r3
 802046e:	685b      	ldr	r3, [r3, #4]
 8020470:	42a3      	cmp	r3, r4
 8020472:	d1fb      	bne.n	802046c <_malloc_r+0xdc>
 8020474:	2300      	movs	r3, #0
 8020476:	6053      	str	r3, [r2, #4]
 8020478:	e7de      	b.n	8020438 <_malloc_r+0xa8>
 802047a:	230c      	movs	r3, #12
 802047c:	6033      	str	r3, [r6, #0]
 802047e:	4630      	mov	r0, r6
 8020480:	f000 f80c 	bl	802049c <__malloc_unlock>
 8020484:	e794      	b.n	80203b0 <_malloc_r+0x20>
 8020486:	6005      	str	r5, [r0, #0]
 8020488:	e7d6      	b.n	8020438 <_malloc_r+0xa8>
 802048a:	bf00      	nop
 802048c:	20022a58 	.word	0x20022a58

08020490 <__malloc_lock>:
 8020490:	4801      	ldr	r0, [pc, #4]	@ (8020498 <__malloc_lock+0x8>)
 8020492:	f7ff beda 	b.w	802024a <__retarget_lock_acquire_recursive>
 8020496:	bf00      	nop
 8020498:	20022a50 	.word	0x20022a50

0802049c <__malloc_unlock>:
 802049c:	4801      	ldr	r0, [pc, #4]	@ (80204a4 <__malloc_unlock+0x8>)
 802049e:	f7ff bed5 	b.w	802024c <__retarget_lock_release_recursive>
 80204a2:	bf00      	nop
 80204a4:	20022a50 	.word	0x20022a50

080204a8 <__sfputc_r>:
 80204a8:	6893      	ldr	r3, [r2, #8]
 80204aa:	3b01      	subs	r3, #1
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	b410      	push	{r4}
 80204b0:	6093      	str	r3, [r2, #8]
 80204b2:	da08      	bge.n	80204c6 <__sfputc_r+0x1e>
 80204b4:	6994      	ldr	r4, [r2, #24]
 80204b6:	42a3      	cmp	r3, r4
 80204b8:	db01      	blt.n	80204be <__sfputc_r+0x16>
 80204ba:	290a      	cmp	r1, #10
 80204bc:	d103      	bne.n	80204c6 <__sfputc_r+0x1e>
 80204be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80204c2:	f7ff bdaa 	b.w	802001a <__swbuf_r>
 80204c6:	6813      	ldr	r3, [r2, #0]
 80204c8:	1c58      	adds	r0, r3, #1
 80204ca:	6010      	str	r0, [r2, #0]
 80204cc:	7019      	strb	r1, [r3, #0]
 80204ce:	4608      	mov	r0, r1
 80204d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80204d4:	4770      	bx	lr

080204d6 <__sfputs_r>:
 80204d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204d8:	4606      	mov	r6, r0
 80204da:	460f      	mov	r7, r1
 80204dc:	4614      	mov	r4, r2
 80204de:	18d5      	adds	r5, r2, r3
 80204e0:	42ac      	cmp	r4, r5
 80204e2:	d101      	bne.n	80204e8 <__sfputs_r+0x12>
 80204e4:	2000      	movs	r0, #0
 80204e6:	e007      	b.n	80204f8 <__sfputs_r+0x22>
 80204e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80204ec:	463a      	mov	r2, r7
 80204ee:	4630      	mov	r0, r6
 80204f0:	f7ff ffda 	bl	80204a8 <__sfputc_r>
 80204f4:	1c43      	adds	r3, r0, #1
 80204f6:	d1f3      	bne.n	80204e0 <__sfputs_r+0xa>
 80204f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080204fc <_vfiprintf_r>:
 80204fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020500:	460d      	mov	r5, r1
 8020502:	b09d      	sub	sp, #116	@ 0x74
 8020504:	4614      	mov	r4, r2
 8020506:	4698      	mov	r8, r3
 8020508:	4606      	mov	r6, r0
 802050a:	b118      	cbz	r0, 8020514 <_vfiprintf_r+0x18>
 802050c:	6a03      	ldr	r3, [r0, #32]
 802050e:	b90b      	cbnz	r3, 8020514 <_vfiprintf_r+0x18>
 8020510:	f7ff fc92 	bl	801fe38 <__sinit>
 8020514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020516:	07d9      	lsls	r1, r3, #31
 8020518:	d405      	bmi.n	8020526 <_vfiprintf_r+0x2a>
 802051a:	89ab      	ldrh	r3, [r5, #12]
 802051c:	059a      	lsls	r2, r3, #22
 802051e:	d402      	bmi.n	8020526 <_vfiprintf_r+0x2a>
 8020520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020522:	f7ff fe92 	bl	802024a <__retarget_lock_acquire_recursive>
 8020526:	89ab      	ldrh	r3, [r5, #12]
 8020528:	071b      	lsls	r3, r3, #28
 802052a:	d501      	bpl.n	8020530 <_vfiprintf_r+0x34>
 802052c:	692b      	ldr	r3, [r5, #16]
 802052e:	b99b      	cbnz	r3, 8020558 <_vfiprintf_r+0x5c>
 8020530:	4629      	mov	r1, r5
 8020532:	4630      	mov	r0, r6
 8020534:	f7ff fdb0 	bl	8020098 <__swsetup_r>
 8020538:	b170      	cbz	r0, 8020558 <_vfiprintf_r+0x5c>
 802053a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802053c:	07dc      	lsls	r4, r3, #31
 802053e:	d504      	bpl.n	802054a <_vfiprintf_r+0x4e>
 8020540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020544:	b01d      	add	sp, #116	@ 0x74
 8020546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802054a:	89ab      	ldrh	r3, [r5, #12]
 802054c:	0598      	lsls	r0, r3, #22
 802054e:	d4f7      	bmi.n	8020540 <_vfiprintf_r+0x44>
 8020550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020552:	f7ff fe7b 	bl	802024c <__retarget_lock_release_recursive>
 8020556:	e7f3      	b.n	8020540 <_vfiprintf_r+0x44>
 8020558:	2300      	movs	r3, #0
 802055a:	9309      	str	r3, [sp, #36]	@ 0x24
 802055c:	2320      	movs	r3, #32
 802055e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020562:	f8cd 800c 	str.w	r8, [sp, #12]
 8020566:	2330      	movs	r3, #48	@ 0x30
 8020568:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020718 <_vfiprintf_r+0x21c>
 802056c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020570:	f04f 0901 	mov.w	r9, #1
 8020574:	4623      	mov	r3, r4
 8020576:	469a      	mov	sl, r3
 8020578:	f813 2b01 	ldrb.w	r2, [r3], #1
 802057c:	b10a      	cbz	r2, 8020582 <_vfiprintf_r+0x86>
 802057e:	2a25      	cmp	r2, #37	@ 0x25
 8020580:	d1f9      	bne.n	8020576 <_vfiprintf_r+0x7a>
 8020582:	ebba 0b04 	subs.w	fp, sl, r4
 8020586:	d00b      	beq.n	80205a0 <_vfiprintf_r+0xa4>
 8020588:	465b      	mov	r3, fp
 802058a:	4622      	mov	r2, r4
 802058c:	4629      	mov	r1, r5
 802058e:	4630      	mov	r0, r6
 8020590:	f7ff ffa1 	bl	80204d6 <__sfputs_r>
 8020594:	3001      	adds	r0, #1
 8020596:	f000 80a7 	beq.w	80206e8 <_vfiprintf_r+0x1ec>
 802059a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802059c:	445a      	add	r2, fp
 802059e:	9209      	str	r2, [sp, #36]	@ 0x24
 80205a0:	f89a 3000 	ldrb.w	r3, [sl]
 80205a4:	2b00      	cmp	r3, #0
 80205a6:	f000 809f 	beq.w	80206e8 <_vfiprintf_r+0x1ec>
 80205aa:	2300      	movs	r3, #0
 80205ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80205b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80205b4:	f10a 0a01 	add.w	sl, sl, #1
 80205b8:	9304      	str	r3, [sp, #16]
 80205ba:	9307      	str	r3, [sp, #28]
 80205bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80205c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80205c2:	4654      	mov	r4, sl
 80205c4:	2205      	movs	r2, #5
 80205c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80205ca:	4853      	ldr	r0, [pc, #332]	@ (8020718 <_vfiprintf_r+0x21c>)
 80205cc:	f7df fe20 	bl	8000210 <memchr>
 80205d0:	9a04      	ldr	r2, [sp, #16]
 80205d2:	b9d8      	cbnz	r0, 802060c <_vfiprintf_r+0x110>
 80205d4:	06d1      	lsls	r1, r2, #27
 80205d6:	bf44      	itt	mi
 80205d8:	2320      	movmi	r3, #32
 80205da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80205de:	0713      	lsls	r3, r2, #28
 80205e0:	bf44      	itt	mi
 80205e2:	232b      	movmi	r3, #43	@ 0x2b
 80205e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80205e8:	f89a 3000 	ldrb.w	r3, [sl]
 80205ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80205ee:	d015      	beq.n	802061c <_vfiprintf_r+0x120>
 80205f0:	9a07      	ldr	r2, [sp, #28]
 80205f2:	4654      	mov	r4, sl
 80205f4:	2000      	movs	r0, #0
 80205f6:	f04f 0c0a 	mov.w	ip, #10
 80205fa:	4621      	mov	r1, r4
 80205fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020600:	3b30      	subs	r3, #48	@ 0x30
 8020602:	2b09      	cmp	r3, #9
 8020604:	d94b      	bls.n	802069e <_vfiprintf_r+0x1a2>
 8020606:	b1b0      	cbz	r0, 8020636 <_vfiprintf_r+0x13a>
 8020608:	9207      	str	r2, [sp, #28]
 802060a:	e014      	b.n	8020636 <_vfiprintf_r+0x13a>
 802060c:	eba0 0308 	sub.w	r3, r0, r8
 8020610:	fa09 f303 	lsl.w	r3, r9, r3
 8020614:	4313      	orrs	r3, r2
 8020616:	9304      	str	r3, [sp, #16]
 8020618:	46a2      	mov	sl, r4
 802061a:	e7d2      	b.n	80205c2 <_vfiprintf_r+0xc6>
 802061c:	9b03      	ldr	r3, [sp, #12]
 802061e:	1d19      	adds	r1, r3, #4
 8020620:	681b      	ldr	r3, [r3, #0]
 8020622:	9103      	str	r1, [sp, #12]
 8020624:	2b00      	cmp	r3, #0
 8020626:	bfbb      	ittet	lt
 8020628:	425b      	neglt	r3, r3
 802062a:	f042 0202 	orrlt.w	r2, r2, #2
 802062e:	9307      	strge	r3, [sp, #28]
 8020630:	9307      	strlt	r3, [sp, #28]
 8020632:	bfb8      	it	lt
 8020634:	9204      	strlt	r2, [sp, #16]
 8020636:	7823      	ldrb	r3, [r4, #0]
 8020638:	2b2e      	cmp	r3, #46	@ 0x2e
 802063a:	d10a      	bne.n	8020652 <_vfiprintf_r+0x156>
 802063c:	7863      	ldrb	r3, [r4, #1]
 802063e:	2b2a      	cmp	r3, #42	@ 0x2a
 8020640:	d132      	bne.n	80206a8 <_vfiprintf_r+0x1ac>
 8020642:	9b03      	ldr	r3, [sp, #12]
 8020644:	1d1a      	adds	r2, r3, #4
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	9203      	str	r2, [sp, #12]
 802064a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802064e:	3402      	adds	r4, #2
 8020650:	9305      	str	r3, [sp, #20]
 8020652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020728 <_vfiprintf_r+0x22c>
 8020656:	7821      	ldrb	r1, [r4, #0]
 8020658:	2203      	movs	r2, #3
 802065a:	4650      	mov	r0, sl
 802065c:	f7df fdd8 	bl	8000210 <memchr>
 8020660:	b138      	cbz	r0, 8020672 <_vfiprintf_r+0x176>
 8020662:	9b04      	ldr	r3, [sp, #16]
 8020664:	eba0 000a 	sub.w	r0, r0, sl
 8020668:	2240      	movs	r2, #64	@ 0x40
 802066a:	4082      	lsls	r2, r0
 802066c:	4313      	orrs	r3, r2
 802066e:	3401      	adds	r4, #1
 8020670:	9304      	str	r3, [sp, #16]
 8020672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020676:	4829      	ldr	r0, [pc, #164]	@ (802071c <_vfiprintf_r+0x220>)
 8020678:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802067c:	2206      	movs	r2, #6
 802067e:	f7df fdc7 	bl	8000210 <memchr>
 8020682:	2800      	cmp	r0, #0
 8020684:	d03f      	beq.n	8020706 <_vfiprintf_r+0x20a>
 8020686:	4b26      	ldr	r3, [pc, #152]	@ (8020720 <_vfiprintf_r+0x224>)
 8020688:	bb1b      	cbnz	r3, 80206d2 <_vfiprintf_r+0x1d6>
 802068a:	9b03      	ldr	r3, [sp, #12]
 802068c:	3307      	adds	r3, #7
 802068e:	f023 0307 	bic.w	r3, r3, #7
 8020692:	3308      	adds	r3, #8
 8020694:	9303      	str	r3, [sp, #12]
 8020696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020698:	443b      	add	r3, r7
 802069a:	9309      	str	r3, [sp, #36]	@ 0x24
 802069c:	e76a      	b.n	8020574 <_vfiprintf_r+0x78>
 802069e:	fb0c 3202 	mla	r2, ip, r2, r3
 80206a2:	460c      	mov	r4, r1
 80206a4:	2001      	movs	r0, #1
 80206a6:	e7a8      	b.n	80205fa <_vfiprintf_r+0xfe>
 80206a8:	2300      	movs	r3, #0
 80206aa:	3401      	adds	r4, #1
 80206ac:	9305      	str	r3, [sp, #20]
 80206ae:	4619      	mov	r1, r3
 80206b0:	f04f 0c0a 	mov.w	ip, #10
 80206b4:	4620      	mov	r0, r4
 80206b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80206ba:	3a30      	subs	r2, #48	@ 0x30
 80206bc:	2a09      	cmp	r2, #9
 80206be:	d903      	bls.n	80206c8 <_vfiprintf_r+0x1cc>
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	d0c6      	beq.n	8020652 <_vfiprintf_r+0x156>
 80206c4:	9105      	str	r1, [sp, #20]
 80206c6:	e7c4      	b.n	8020652 <_vfiprintf_r+0x156>
 80206c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80206cc:	4604      	mov	r4, r0
 80206ce:	2301      	movs	r3, #1
 80206d0:	e7f0      	b.n	80206b4 <_vfiprintf_r+0x1b8>
 80206d2:	ab03      	add	r3, sp, #12
 80206d4:	9300      	str	r3, [sp, #0]
 80206d6:	462a      	mov	r2, r5
 80206d8:	4b12      	ldr	r3, [pc, #72]	@ (8020724 <_vfiprintf_r+0x228>)
 80206da:	a904      	add	r1, sp, #16
 80206dc:	4630      	mov	r0, r6
 80206de:	f3af 8000 	nop.w
 80206e2:	4607      	mov	r7, r0
 80206e4:	1c78      	adds	r0, r7, #1
 80206e6:	d1d6      	bne.n	8020696 <_vfiprintf_r+0x19a>
 80206e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80206ea:	07d9      	lsls	r1, r3, #31
 80206ec:	d405      	bmi.n	80206fa <_vfiprintf_r+0x1fe>
 80206ee:	89ab      	ldrh	r3, [r5, #12]
 80206f0:	059a      	lsls	r2, r3, #22
 80206f2:	d402      	bmi.n	80206fa <_vfiprintf_r+0x1fe>
 80206f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80206f6:	f7ff fda9 	bl	802024c <__retarget_lock_release_recursive>
 80206fa:	89ab      	ldrh	r3, [r5, #12]
 80206fc:	065b      	lsls	r3, r3, #25
 80206fe:	f53f af1f 	bmi.w	8020540 <_vfiprintf_r+0x44>
 8020702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020704:	e71e      	b.n	8020544 <_vfiprintf_r+0x48>
 8020706:	ab03      	add	r3, sp, #12
 8020708:	9300      	str	r3, [sp, #0]
 802070a:	462a      	mov	r2, r5
 802070c:	4b05      	ldr	r3, [pc, #20]	@ (8020724 <_vfiprintf_r+0x228>)
 802070e:	a904      	add	r1, sp, #16
 8020710:	4630      	mov	r0, r6
 8020712:	f000 f879 	bl	8020808 <_printf_i>
 8020716:	e7e4      	b.n	80206e2 <_vfiprintf_r+0x1e6>
 8020718:	08025545 	.word	0x08025545
 802071c:	0802554f 	.word	0x0802554f
 8020720:	00000000 	.word	0x00000000
 8020724:	080204d7 	.word	0x080204d7
 8020728:	0802554b 	.word	0x0802554b

0802072c <_printf_common>:
 802072c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020730:	4616      	mov	r6, r2
 8020732:	4698      	mov	r8, r3
 8020734:	688a      	ldr	r2, [r1, #8]
 8020736:	690b      	ldr	r3, [r1, #16]
 8020738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802073c:	4293      	cmp	r3, r2
 802073e:	bfb8      	it	lt
 8020740:	4613      	movlt	r3, r2
 8020742:	6033      	str	r3, [r6, #0]
 8020744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020748:	4607      	mov	r7, r0
 802074a:	460c      	mov	r4, r1
 802074c:	b10a      	cbz	r2, 8020752 <_printf_common+0x26>
 802074e:	3301      	adds	r3, #1
 8020750:	6033      	str	r3, [r6, #0]
 8020752:	6823      	ldr	r3, [r4, #0]
 8020754:	0699      	lsls	r1, r3, #26
 8020756:	bf42      	ittt	mi
 8020758:	6833      	ldrmi	r3, [r6, #0]
 802075a:	3302      	addmi	r3, #2
 802075c:	6033      	strmi	r3, [r6, #0]
 802075e:	6825      	ldr	r5, [r4, #0]
 8020760:	f015 0506 	ands.w	r5, r5, #6
 8020764:	d106      	bne.n	8020774 <_printf_common+0x48>
 8020766:	f104 0a19 	add.w	sl, r4, #25
 802076a:	68e3      	ldr	r3, [r4, #12]
 802076c:	6832      	ldr	r2, [r6, #0]
 802076e:	1a9b      	subs	r3, r3, r2
 8020770:	42ab      	cmp	r3, r5
 8020772:	dc26      	bgt.n	80207c2 <_printf_common+0x96>
 8020774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020778:	6822      	ldr	r2, [r4, #0]
 802077a:	3b00      	subs	r3, #0
 802077c:	bf18      	it	ne
 802077e:	2301      	movne	r3, #1
 8020780:	0692      	lsls	r2, r2, #26
 8020782:	d42b      	bmi.n	80207dc <_printf_common+0xb0>
 8020784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020788:	4641      	mov	r1, r8
 802078a:	4638      	mov	r0, r7
 802078c:	47c8      	blx	r9
 802078e:	3001      	adds	r0, #1
 8020790:	d01e      	beq.n	80207d0 <_printf_common+0xa4>
 8020792:	6823      	ldr	r3, [r4, #0]
 8020794:	6922      	ldr	r2, [r4, #16]
 8020796:	f003 0306 	and.w	r3, r3, #6
 802079a:	2b04      	cmp	r3, #4
 802079c:	bf02      	ittt	eq
 802079e:	68e5      	ldreq	r5, [r4, #12]
 80207a0:	6833      	ldreq	r3, [r6, #0]
 80207a2:	1aed      	subeq	r5, r5, r3
 80207a4:	68a3      	ldr	r3, [r4, #8]
 80207a6:	bf0c      	ite	eq
 80207a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80207ac:	2500      	movne	r5, #0
 80207ae:	4293      	cmp	r3, r2
 80207b0:	bfc4      	itt	gt
 80207b2:	1a9b      	subgt	r3, r3, r2
 80207b4:	18ed      	addgt	r5, r5, r3
 80207b6:	2600      	movs	r6, #0
 80207b8:	341a      	adds	r4, #26
 80207ba:	42b5      	cmp	r5, r6
 80207bc:	d11a      	bne.n	80207f4 <_printf_common+0xc8>
 80207be:	2000      	movs	r0, #0
 80207c0:	e008      	b.n	80207d4 <_printf_common+0xa8>
 80207c2:	2301      	movs	r3, #1
 80207c4:	4652      	mov	r2, sl
 80207c6:	4641      	mov	r1, r8
 80207c8:	4638      	mov	r0, r7
 80207ca:	47c8      	blx	r9
 80207cc:	3001      	adds	r0, #1
 80207ce:	d103      	bne.n	80207d8 <_printf_common+0xac>
 80207d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80207d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80207d8:	3501      	adds	r5, #1
 80207da:	e7c6      	b.n	802076a <_printf_common+0x3e>
 80207dc:	18e1      	adds	r1, r4, r3
 80207de:	1c5a      	adds	r2, r3, #1
 80207e0:	2030      	movs	r0, #48	@ 0x30
 80207e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80207e6:	4422      	add	r2, r4
 80207e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80207ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80207f0:	3302      	adds	r3, #2
 80207f2:	e7c7      	b.n	8020784 <_printf_common+0x58>
 80207f4:	2301      	movs	r3, #1
 80207f6:	4622      	mov	r2, r4
 80207f8:	4641      	mov	r1, r8
 80207fa:	4638      	mov	r0, r7
 80207fc:	47c8      	blx	r9
 80207fe:	3001      	adds	r0, #1
 8020800:	d0e6      	beq.n	80207d0 <_printf_common+0xa4>
 8020802:	3601      	adds	r6, #1
 8020804:	e7d9      	b.n	80207ba <_printf_common+0x8e>
	...

08020808 <_printf_i>:
 8020808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802080c:	7e0f      	ldrb	r7, [r1, #24]
 802080e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020810:	2f78      	cmp	r7, #120	@ 0x78
 8020812:	4691      	mov	r9, r2
 8020814:	4680      	mov	r8, r0
 8020816:	460c      	mov	r4, r1
 8020818:	469a      	mov	sl, r3
 802081a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802081e:	d807      	bhi.n	8020830 <_printf_i+0x28>
 8020820:	2f62      	cmp	r7, #98	@ 0x62
 8020822:	d80a      	bhi.n	802083a <_printf_i+0x32>
 8020824:	2f00      	cmp	r7, #0
 8020826:	f000 80d1 	beq.w	80209cc <_printf_i+0x1c4>
 802082a:	2f58      	cmp	r7, #88	@ 0x58
 802082c:	f000 80b8 	beq.w	80209a0 <_printf_i+0x198>
 8020830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020838:	e03a      	b.n	80208b0 <_printf_i+0xa8>
 802083a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802083e:	2b15      	cmp	r3, #21
 8020840:	d8f6      	bhi.n	8020830 <_printf_i+0x28>
 8020842:	a101      	add	r1, pc, #4	@ (adr r1, 8020848 <_printf_i+0x40>)
 8020844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020848:	080208a1 	.word	0x080208a1
 802084c:	080208b5 	.word	0x080208b5
 8020850:	08020831 	.word	0x08020831
 8020854:	08020831 	.word	0x08020831
 8020858:	08020831 	.word	0x08020831
 802085c:	08020831 	.word	0x08020831
 8020860:	080208b5 	.word	0x080208b5
 8020864:	08020831 	.word	0x08020831
 8020868:	08020831 	.word	0x08020831
 802086c:	08020831 	.word	0x08020831
 8020870:	08020831 	.word	0x08020831
 8020874:	080209b3 	.word	0x080209b3
 8020878:	080208df 	.word	0x080208df
 802087c:	0802096d 	.word	0x0802096d
 8020880:	08020831 	.word	0x08020831
 8020884:	08020831 	.word	0x08020831
 8020888:	080209d5 	.word	0x080209d5
 802088c:	08020831 	.word	0x08020831
 8020890:	080208df 	.word	0x080208df
 8020894:	08020831 	.word	0x08020831
 8020898:	08020831 	.word	0x08020831
 802089c:	08020975 	.word	0x08020975
 80208a0:	6833      	ldr	r3, [r6, #0]
 80208a2:	1d1a      	adds	r2, r3, #4
 80208a4:	681b      	ldr	r3, [r3, #0]
 80208a6:	6032      	str	r2, [r6, #0]
 80208a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80208ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80208b0:	2301      	movs	r3, #1
 80208b2:	e09c      	b.n	80209ee <_printf_i+0x1e6>
 80208b4:	6833      	ldr	r3, [r6, #0]
 80208b6:	6820      	ldr	r0, [r4, #0]
 80208b8:	1d19      	adds	r1, r3, #4
 80208ba:	6031      	str	r1, [r6, #0]
 80208bc:	0606      	lsls	r6, r0, #24
 80208be:	d501      	bpl.n	80208c4 <_printf_i+0xbc>
 80208c0:	681d      	ldr	r5, [r3, #0]
 80208c2:	e003      	b.n	80208cc <_printf_i+0xc4>
 80208c4:	0645      	lsls	r5, r0, #25
 80208c6:	d5fb      	bpl.n	80208c0 <_printf_i+0xb8>
 80208c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80208cc:	2d00      	cmp	r5, #0
 80208ce:	da03      	bge.n	80208d8 <_printf_i+0xd0>
 80208d0:	232d      	movs	r3, #45	@ 0x2d
 80208d2:	426d      	negs	r5, r5
 80208d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80208d8:	4858      	ldr	r0, [pc, #352]	@ (8020a3c <_printf_i+0x234>)
 80208da:	230a      	movs	r3, #10
 80208dc:	e011      	b.n	8020902 <_printf_i+0xfa>
 80208de:	6821      	ldr	r1, [r4, #0]
 80208e0:	6833      	ldr	r3, [r6, #0]
 80208e2:	0608      	lsls	r0, r1, #24
 80208e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80208e8:	d402      	bmi.n	80208f0 <_printf_i+0xe8>
 80208ea:	0649      	lsls	r1, r1, #25
 80208ec:	bf48      	it	mi
 80208ee:	b2ad      	uxthmi	r5, r5
 80208f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80208f2:	4852      	ldr	r0, [pc, #328]	@ (8020a3c <_printf_i+0x234>)
 80208f4:	6033      	str	r3, [r6, #0]
 80208f6:	bf14      	ite	ne
 80208f8:	230a      	movne	r3, #10
 80208fa:	2308      	moveq	r3, #8
 80208fc:	2100      	movs	r1, #0
 80208fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020902:	6866      	ldr	r6, [r4, #4]
 8020904:	60a6      	str	r6, [r4, #8]
 8020906:	2e00      	cmp	r6, #0
 8020908:	db05      	blt.n	8020916 <_printf_i+0x10e>
 802090a:	6821      	ldr	r1, [r4, #0]
 802090c:	432e      	orrs	r6, r5
 802090e:	f021 0104 	bic.w	r1, r1, #4
 8020912:	6021      	str	r1, [r4, #0]
 8020914:	d04b      	beq.n	80209ae <_printf_i+0x1a6>
 8020916:	4616      	mov	r6, r2
 8020918:	fbb5 f1f3 	udiv	r1, r5, r3
 802091c:	fb03 5711 	mls	r7, r3, r1, r5
 8020920:	5dc7      	ldrb	r7, [r0, r7]
 8020922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020926:	462f      	mov	r7, r5
 8020928:	42bb      	cmp	r3, r7
 802092a:	460d      	mov	r5, r1
 802092c:	d9f4      	bls.n	8020918 <_printf_i+0x110>
 802092e:	2b08      	cmp	r3, #8
 8020930:	d10b      	bne.n	802094a <_printf_i+0x142>
 8020932:	6823      	ldr	r3, [r4, #0]
 8020934:	07df      	lsls	r7, r3, #31
 8020936:	d508      	bpl.n	802094a <_printf_i+0x142>
 8020938:	6923      	ldr	r3, [r4, #16]
 802093a:	6861      	ldr	r1, [r4, #4]
 802093c:	4299      	cmp	r1, r3
 802093e:	bfde      	ittt	le
 8020940:	2330      	movle	r3, #48	@ 0x30
 8020942:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020946:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 802094a:	1b92      	subs	r2, r2, r6
 802094c:	6122      	str	r2, [r4, #16]
 802094e:	f8cd a000 	str.w	sl, [sp]
 8020952:	464b      	mov	r3, r9
 8020954:	aa03      	add	r2, sp, #12
 8020956:	4621      	mov	r1, r4
 8020958:	4640      	mov	r0, r8
 802095a:	f7ff fee7 	bl	802072c <_printf_common>
 802095e:	3001      	adds	r0, #1
 8020960:	d14a      	bne.n	80209f8 <_printf_i+0x1f0>
 8020962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020966:	b004      	add	sp, #16
 8020968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802096c:	6823      	ldr	r3, [r4, #0]
 802096e:	f043 0320 	orr.w	r3, r3, #32
 8020972:	6023      	str	r3, [r4, #0]
 8020974:	4832      	ldr	r0, [pc, #200]	@ (8020a40 <_printf_i+0x238>)
 8020976:	2778      	movs	r7, #120	@ 0x78
 8020978:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802097c:	6823      	ldr	r3, [r4, #0]
 802097e:	6831      	ldr	r1, [r6, #0]
 8020980:	061f      	lsls	r7, r3, #24
 8020982:	f851 5b04 	ldr.w	r5, [r1], #4
 8020986:	d402      	bmi.n	802098e <_printf_i+0x186>
 8020988:	065f      	lsls	r7, r3, #25
 802098a:	bf48      	it	mi
 802098c:	b2ad      	uxthmi	r5, r5
 802098e:	6031      	str	r1, [r6, #0]
 8020990:	07d9      	lsls	r1, r3, #31
 8020992:	bf44      	itt	mi
 8020994:	f043 0320 	orrmi.w	r3, r3, #32
 8020998:	6023      	strmi	r3, [r4, #0]
 802099a:	b11d      	cbz	r5, 80209a4 <_printf_i+0x19c>
 802099c:	2310      	movs	r3, #16
 802099e:	e7ad      	b.n	80208fc <_printf_i+0xf4>
 80209a0:	4826      	ldr	r0, [pc, #152]	@ (8020a3c <_printf_i+0x234>)
 80209a2:	e7e9      	b.n	8020978 <_printf_i+0x170>
 80209a4:	6823      	ldr	r3, [r4, #0]
 80209a6:	f023 0320 	bic.w	r3, r3, #32
 80209aa:	6023      	str	r3, [r4, #0]
 80209ac:	e7f6      	b.n	802099c <_printf_i+0x194>
 80209ae:	4616      	mov	r6, r2
 80209b0:	e7bd      	b.n	802092e <_printf_i+0x126>
 80209b2:	6833      	ldr	r3, [r6, #0]
 80209b4:	6825      	ldr	r5, [r4, #0]
 80209b6:	6961      	ldr	r1, [r4, #20]
 80209b8:	1d18      	adds	r0, r3, #4
 80209ba:	6030      	str	r0, [r6, #0]
 80209bc:	062e      	lsls	r6, r5, #24
 80209be:	681b      	ldr	r3, [r3, #0]
 80209c0:	d501      	bpl.n	80209c6 <_printf_i+0x1be>
 80209c2:	6019      	str	r1, [r3, #0]
 80209c4:	e002      	b.n	80209cc <_printf_i+0x1c4>
 80209c6:	0668      	lsls	r0, r5, #25
 80209c8:	d5fb      	bpl.n	80209c2 <_printf_i+0x1ba>
 80209ca:	8019      	strh	r1, [r3, #0]
 80209cc:	2300      	movs	r3, #0
 80209ce:	6123      	str	r3, [r4, #16]
 80209d0:	4616      	mov	r6, r2
 80209d2:	e7bc      	b.n	802094e <_printf_i+0x146>
 80209d4:	6833      	ldr	r3, [r6, #0]
 80209d6:	1d1a      	adds	r2, r3, #4
 80209d8:	6032      	str	r2, [r6, #0]
 80209da:	681e      	ldr	r6, [r3, #0]
 80209dc:	6862      	ldr	r2, [r4, #4]
 80209de:	2100      	movs	r1, #0
 80209e0:	4630      	mov	r0, r6
 80209e2:	f7df fc15 	bl	8000210 <memchr>
 80209e6:	b108      	cbz	r0, 80209ec <_printf_i+0x1e4>
 80209e8:	1b80      	subs	r0, r0, r6
 80209ea:	6060      	str	r0, [r4, #4]
 80209ec:	6863      	ldr	r3, [r4, #4]
 80209ee:	6123      	str	r3, [r4, #16]
 80209f0:	2300      	movs	r3, #0
 80209f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80209f6:	e7aa      	b.n	802094e <_printf_i+0x146>
 80209f8:	6923      	ldr	r3, [r4, #16]
 80209fa:	4632      	mov	r2, r6
 80209fc:	4649      	mov	r1, r9
 80209fe:	4640      	mov	r0, r8
 8020a00:	47d0      	blx	sl
 8020a02:	3001      	adds	r0, #1
 8020a04:	d0ad      	beq.n	8020962 <_printf_i+0x15a>
 8020a06:	6823      	ldr	r3, [r4, #0]
 8020a08:	079b      	lsls	r3, r3, #30
 8020a0a:	d413      	bmi.n	8020a34 <_printf_i+0x22c>
 8020a0c:	68e0      	ldr	r0, [r4, #12]
 8020a0e:	9b03      	ldr	r3, [sp, #12]
 8020a10:	4298      	cmp	r0, r3
 8020a12:	bfb8      	it	lt
 8020a14:	4618      	movlt	r0, r3
 8020a16:	e7a6      	b.n	8020966 <_printf_i+0x15e>
 8020a18:	2301      	movs	r3, #1
 8020a1a:	4632      	mov	r2, r6
 8020a1c:	4649      	mov	r1, r9
 8020a1e:	4640      	mov	r0, r8
 8020a20:	47d0      	blx	sl
 8020a22:	3001      	adds	r0, #1
 8020a24:	d09d      	beq.n	8020962 <_printf_i+0x15a>
 8020a26:	3501      	adds	r5, #1
 8020a28:	68e3      	ldr	r3, [r4, #12]
 8020a2a:	9903      	ldr	r1, [sp, #12]
 8020a2c:	1a5b      	subs	r3, r3, r1
 8020a2e:	42ab      	cmp	r3, r5
 8020a30:	dcf2      	bgt.n	8020a18 <_printf_i+0x210>
 8020a32:	e7eb      	b.n	8020a0c <_printf_i+0x204>
 8020a34:	2500      	movs	r5, #0
 8020a36:	f104 0619 	add.w	r6, r4, #25
 8020a3a:	e7f5      	b.n	8020a28 <_printf_i+0x220>
 8020a3c:	08025556 	.word	0x08025556
 8020a40:	08025567 	.word	0x08025567

08020a44 <__sflush_r>:
 8020a44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a4c:	0716      	lsls	r6, r2, #28
 8020a4e:	4605      	mov	r5, r0
 8020a50:	460c      	mov	r4, r1
 8020a52:	d454      	bmi.n	8020afe <__sflush_r+0xba>
 8020a54:	684b      	ldr	r3, [r1, #4]
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	dc02      	bgt.n	8020a60 <__sflush_r+0x1c>
 8020a5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	dd48      	ble.n	8020af2 <__sflush_r+0xae>
 8020a60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020a62:	2e00      	cmp	r6, #0
 8020a64:	d045      	beq.n	8020af2 <__sflush_r+0xae>
 8020a66:	2300      	movs	r3, #0
 8020a68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020a6c:	682f      	ldr	r7, [r5, #0]
 8020a6e:	6a21      	ldr	r1, [r4, #32]
 8020a70:	602b      	str	r3, [r5, #0]
 8020a72:	d030      	beq.n	8020ad6 <__sflush_r+0x92>
 8020a74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020a76:	89a3      	ldrh	r3, [r4, #12]
 8020a78:	0759      	lsls	r1, r3, #29
 8020a7a:	d505      	bpl.n	8020a88 <__sflush_r+0x44>
 8020a7c:	6863      	ldr	r3, [r4, #4]
 8020a7e:	1ad2      	subs	r2, r2, r3
 8020a80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020a82:	b10b      	cbz	r3, 8020a88 <__sflush_r+0x44>
 8020a84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020a86:	1ad2      	subs	r2, r2, r3
 8020a88:	2300      	movs	r3, #0
 8020a8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020a8c:	6a21      	ldr	r1, [r4, #32]
 8020a8e:	4628      	mov	r0, r5
 8020a90:	47b0      	blx	r6
 8020a92:	1c43      	adds	r3, r0, #1
 8020a94:	89a3      	ldrh	r3, [r4, #12]
 8020a96:	d106      	bne.n	8020aa6 <__sflush_r+0x62>
 8020a98:	6829      	ldr	r1, [r5, #0]
 8020a9a:	291d      	cmp	r1, #29
 8020a9c:	d82b      	bhi.n	8020af6 <__sflush_r+0xb2>
 8020a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8020b48 <__sflush_r+0x104>)
 8020aa0:	40ca      	lsrs	r2, r1
 8020aa2:	07d6      	lsls	r6, r2, #31
 8020aa4:	d527      	bpl.n	8020af6 <__sflush_r+0xb2>
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	6062      	str	r2, [r4, #4]
 8020aaa:	04d9      	lsls	r1, r3, #19
 8020aac:	6922      	ldr	r2, [r4, #16]
 8020aae:	6022      	str	r2, [r4, #0]
 8020ab0:	d504      	bpl.n	8020abc <__sflush_r+0x78>
 8020ab2:	1c42      	adds	r2, r0, #1
 8020ab4:	d101      	bne.n	8020aba <__sflush_r+0x76>
 8020ab6:	682b      	ldr	r3, [r5, #0]
 8020ab8:	b903      	cbnz	r3, 8020abc <__sflush_r+0x78>
 8020aba:	6560      	str	r0, [r4, #84]	@ 0x54
 8020abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020abe:	602f      	str	r7, [r5, #0]
 8020ac0:	b1b9      	cbz	r1, 8020af2 <__sflush_r+0xae>
 8020ac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020ac6:	4299      	cmp	r1, r3
 8020ac8:	d002      	beq.n	8020ad0 <__sflush_r+0x8c>
 8020aca:	4628      	mov	r0, r5
 8020acc:	f7ff fbec 	bl	80202a8 <_free_r>
 8020ad0:	2300      	movs	r3, #0
 8020ad2:	6363      	str	r3, [r4, #52]	@ 0x34
 8020ad4:	e00d      	b.n	8020af2 <__sflush_r+0xae>
 8020ad6:	2301      	movs	r3, #1
 8020ad8:	4628      	mov	r0, r5
 8020ada:	47b0      	blx	r6
 8020adc:	4602      	mov	r2, r0
 8020ade:	1c50      	adds	r0, r2, #1
 8020ae0:	d1c9      	bne.n	8020a76 <__sflush_r+0x32>
 8020ae2:	682b      	ldr	r3, [r5, #0]
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d0c6      	beq.n	8020a76 <__sflush_r+0x32>
 8020ae8:	2b1d      	cmp	r3, #29
 8020aea:	d001      	beq.n	8020af0 <__sflush_r+0xac>
 8020aec:	2b16      	cmp	r3, #22
 8020aee:	d11e      	bne.n	8020b2e <__sflush_r+0xea>
 8020af0:	602f      	str	r7, [r5, #0]
 8020af2:	2000      	movs	r0, #0
 8020af4:	e022      	b.n	8020b3c <__sflush_r+0xf8>
 8020af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020afa:	b21b      	sxth	r3, r3
 8020afc:	e01b      	b.n	8020b36 <__sflush_r+0xf2>
 8020afe:	690f      	ldr	r7, [r1, #16]
 8020b00:	2f00      	cmp	r7, #0
 8020b02:	d0f6      	beq.n	8020af2 <__sflush_r+0xae>
 8020b04:	0793      	lsls	r3, r2, #30
 8020b06:	680e      	ldr	r6, [r1, #0]
 8020b08:	bf08      	it	eq
 8020b0a:	694b      	ldreq	r3, [r1, #20]
 8020b0c:	600f      	str	r7, [r1, #0]
 8020b0e:	bf18      	it	ne
 8020b10:	2300      	movne	r3, #0
 8020b12:	eba6 0807 	sub.w	r8, r6, r7
 8020b16:	608b      	str	r3, [r1, #8]
 8020b18:	f1b8 0f00 	cmp.w	r8, #0
 8020b1c:	dde9      	ble.n	8020af2 <__sflush_r+0xae>
 8020b1e:	6a21      	ldr	r1, [r4, #32]
 8020b20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020b22:	4643      	mov	r3, r8
 8020b24:	463a      	mov	r2, r7
 8020b26:	4628      	mov	r0, r5
 8020b28:	47b0      	blx	r6
 8020b2a:	2800      	cmp	r0, #0
 8020b2c:	dc08      	bgt.n	8020b40 <__sflush_r+0xfc>
 8020b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020b36:	81a3      	strh	r3, [r4, #12]
 8020b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b40:	4407      	add	r7, r0
 8020b42:	eba8 0800 	sub.w	r8, r8, r0
 8020b46:	e7e7      	b.n	8020b18 <__sflush_r+0xd4>
 8020b48:	20400001 	.word	0x20400001

08020b4c <_fflush_r>:
 8020b4c:	b538      	push	{r3, r4, r5, lr}
 8020b4e:	690b      	ldr	r3, [r1, #16]
 8020b50:	4605      	mov	r5, r0
 8020b52:	460c      	mov	r4, r1
 8020b54:	b913      	cbnz	r3, 8020b5c <_fflush_r+0x10>
 8020b56:	2500      	movs	r5, #0
 8020b58:	4628      	mov	r0, r5
 8020b5a:	bd38      	pop	{r3, r4, r5, pc}
 8020b5c:	b118      	cbz	r0, 8020b66 <_fflush_r+0x1a>
 8020b5e:	6a03      	ldr	r3, [r0, #32]
 8020b60:	b90b      	cbnz	r3, 8020b66 <_fflush_r+0x1a>
 8020b62:	f7ff f969 	bl	801fe38 <__sinit>
 8020b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d0f3      	beq.n	8020b56 <_fflush_r+0xa>
 8020b6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020b70:	07d0      	lsls	r0, r2, #31
 8020b72:	d404      	bmi.n	8020b7e <_fflush_r+0x32>
 8020b74:	0599      	lsls	r1, r3, #22
 8020b76:	d402      	bmi.n	8020b7e <_fflush_r+0x32>
 8020b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020b7a:	f7ff fb66 	bl	802024a <__retarget_lock_acquire_recursive>
 8020b7e:	4628      	mov	r0, r5
 8020b80:	4621      	mov	r1, r4
 8020b82:	f7ff ff5f 	bl	8020a44 <__sflush_r>
 8020b86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020b88:	07da      	lsls	r2, r3, #31
 8020b8a:	4605      	mov	r5, r0
 8020b8c:	d4e4      	bmi.n	8020b58 <_fflush_r+0xc>
 8020b8e:	89a3      	ldrh	r3, [r4, #12]
 8020b90:	059b      	lsls	r3, r3, #22
 8020b92:	d4e1      	bmi.n	8020b58 <_fflush_r+0xc>
 8020b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020b96:	f7ff fb59 	bl	802024c <__retarget_lock_release_recursive>
 8020b9a:	e7dd      	b.n	8020b58 <_fflush_r+0xc>

08020b9c <fiprintf>:
 8020b9c:	b40e      	push	{r1, r2, r3}
 8020b9e:	b503      	push	{r0, r1, lr}
 8020ba0:	4601      	mov	r1, r0
 8020ba2:	ab03      	add	r3, sp, #12
 8020ba4:	4805      	ldr	r0, [pc, #20]	@ (8020bbc <fiprintf+0x20>)
 8020ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8020baa:	6800      	ldr	r0, [r0, #0]
 8020bac:	9301      	str	r3, [sp, #4]
 8020bae:	f7ff fca5 	bl	80204fc <_vfiprintf_r>
 8020bb2:	b002      	add	sp, #8
 8020bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8020bb8:	b003      	add	sp, #12
 8020bba:	4770      	bx	lr
 8020bbc:	20000080 	.word	0x20000080

08020bc0 <__swhatbuf_r>:
 8020bc0:	b570      	push	{r4, r5, r6, lr}
 8020bc2:	460c      	mov	r4, r1
 8020bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bc8:	2900      	cmp	r1, #0
 8020bca:	b096      	sub	sp, #88	@ 0x58
 8020bcc:	4615      	mov	r5, r2
 8020bce:	461e      	mov	r6, r3
 8020bd0:	da0d      	bge.n	8020bee <__swhatbuf_r+0x2e>
 8020bd2:	89a3      	ldrh	r3, [r4, #12]
 8020bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020bd8:	f04f 0100 	mov.w	r1, #0
 8020bdc:	bf14      	ite	ne
 8020bde:	2340      	movne	r3, #64	@ 0x40
 8020be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020be4:	2000      	movs	r0, #0
 8020be6:	6031      	str	r1, [r6, #0]
 8020be8:	602b      	str	r3, [r5, #0]
 8020bea:	b016      	add	sp, #88	@ 0x58
 8020bec:	bd70      	pop	{r4, r5, r6, pc}
 8020bee:	466a      	mov	r2, sp
 8020bf0:	f000 f87c 	bl	8020cec <_fstat_r>
 8020bf4:	2800      	cmp	r0, #0
 8020bf6:	dbec      	blt.n	8020bd2 <__swhatbuf_r+0x12>
 8020bf8:	9901      	ldr	r1, [sp, #4]
 8020bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020c02:	4259      	negs	r1, r3
 8020c04:	4159      	adcs	r1, r3
 8020c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020c0a:	e7eb      	b.n	8020be4 <__swhatbuf_r+0x24>

08020c0c <__smakebuf_r>:
 8020c0c:	898b      	ldrh	r3, [r1, #12]
 8020c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020c10:	079d      	lsls	r5, r3, #30
 8020c12:	4606      	mov	r6, r0
 8020c14:	460c      	mov	r4, r1
 8020c16:	d507      	bpl.n	8020c28 <__smakebuf_r+0x1c>
 8020c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020c1c:	6023      	str	r3, [r4, #0]
 8020c1e:	6123      	str	r3, [r4, #16]
 8020c20:	2301      	movs	r3, #1
 8020c22:	6163      	str	r3, [r4, #20]
 8020c24:	b003      	add	sp, #12
 8020c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c28:	ab01      	add	r3, sp, #4
 8020c2a:	466a      	mov	r2, sp
 8020c2c:	f7ff ffc8 	bl	8020bc0 <__swhatbuf_r>
 8020c30:	9f00      	ldr	r7, [sp, #0]
 8020c32:	4605      	mov	r5, r0
 8020c34:	4639      	mov	r1, r7
 8020c36:	4630      	mov	r0, r6
 8020c38:	f7ff fbaa 	bl	8020390 <_malloc_r>
 8020c3c:	b948      	cbnz	r0, 8020c52 <__smakebuf_r+0x46>
 8020c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c42:	059a      	lsls	r2, r3, #22
 8020c44:	d4ee      	bmi.n	8020c24 <__smakebuf_r+0x18>
 8020c46:	f023 0303 	bic.w	r3, r3, #3
 8020c4a:	f043 0302 	orr.w	r3, r3, #2
 8020c4e:	81a3      	strh	r3, [r4, #12]
 8020c50:	e7e2      	b.n	8020c18 <__smakebuf_r+0xc>
 8020c52:	89a3      	ldrh	r3, [r4, #12]
 8020c54:	6020      	str	r0, [r4, #0]
 8020c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020c5a:	81a3      	strh	r3, [r4, #12]
 8020c5c:	9b01      	ldr	r3, [sp, #4]
 8020c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020c62:	b15b      	cbz	r3, 8020c7c <__smakebuf_r+0x70>
 8020c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020c68:	4630      	mov	r0, r6
 8020c6a:	f000 f851 	bl	8020d10 <_isatty_r>
 8020c6e:	b128      	cbz	r0, 8020c7c <__smakebuf_r+0x70>
 8020c70:	89a3      	ldrh	r3, [r4, #12]
 8020c72:	f023 0303 	bic.w	r3, r3, #3
 8020c76:	f043 0301 	orr.w	r3, r3, #1
 8020c7a:	81a3      	strh	r3, [r4, #12]
 8020c7c:	89a3      	ldrh	r3, [r4, #12]
 8020c7e:	431d      	orrs	r5, r3
 8020c80:	81a5      	strh	r5, [r4, #12]
 8020c82:	e7cf      	b.n	8020c24 <__smakebuf_r+0x18>

08020c84 <_putc_r>:
 8020c84:	b570      	push	{r4, r5, r6, lr}
 8020c86:	460d      	mov	r5, r1
 8020c88:	4614      	mov	r4, r2
 8020c8a:	4606      	mov	r6, r0
 8020c8c:	b118      	cbz	r0, 8020c96 <_putc_r+0x12>
 8020c8e:	6a03      	ldr	r3, [r0, #32]
 8020c90:	b90b      	cbnz	r3, 8020c96 <_putc_r+0x12>
 8020c92:	f7ff f8d1 	bl	801fe38 <__sinit>
 8020c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020c98:	07d8      	lsls	r0, r3, #31
 8020c9a:	d405      	bmi.n	8020ca8 <_putc_r+0x24>
 8020c9c:	89a3      	ldrh	r3, [r4, #12]
 8020c9e:	0599      	lsls	r1, r3, #22
 8020ca0:	d402      	bmi.n	8020ca8 <_putc_r+0x24>
 8020ca2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020ca4:	f7ff fad1 	bl	802024a <__retarget_lock_acquire_recursive>
 8020ca8:	68a3      	ldr	r3, [r4, #8]
 8020caa:	3b01      	subs	r3, #1
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	60a3      	str	r3, [r4, #8]
 8020cb0:	da05      	bge.n	8020cbe <_putc_r+0x3a>
 8020cb2:	69a2      	ldr	r2, [r4, #24]
 8020cb4:	4293      	cmp	r3, r2
 8020cb6:	db12      	blt.n	8020cde <_putc_r+0x5a>
 8020cb8:	b2eb      	uxtb	r3, r5
 8020cba:	2b0a      	cmp	r3, #10
 8020cbc:	d00f      	beq.n	8020cde <_putc_r+0x5a>
 8020cbe:	6823      	ldr	r3, [r4, #0]
 8020cc0:	1c5a      	adds	r2, r3, #1
 8020cc2:	6022      	str	r2, [r4, #0]
 8020cc4:	701d      	strb	r5, [r3, #0]
 8020cc6:	b2ed      	uxtb	r5, r5
 8020cc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020cca:	07da      	lsls	r2, r3, #31
 8020ccc:	d405      	bmi.n	8020cda <_putc_r+0x56>
 8020cce:	89a3      	ldrh	r3, [r4, #12]
 8020cd0:	059b      	lsls	r3, r3, #22
 8020cd2:	d402      	bmi.n	8020cda <_putc_r+0x56>
 8020cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020cd6:	f7ff fab9 	bl	802024c <__retarget_lock_release_recursive>
 8020cda:	4628      	mov	r0, r5
 8020cdc:	bd70      	pop	{r4, r5, r6, pc}
 8020cde:	4629      	mov	r1, r5
 8020ce0:	4622      	mov	r2, r4
 8020ce2:	4630      	mov	r0, r6
 8020ce4:	f7ff f999 	bl	802001a <__swbuf_r>
 8020ce8:	4605      	mov	r5, r0
 8020cea:	e7ed      	b.n	8020cc8 <_putc_r+0x44>

08020cec <_fstat_r>:
 8020cec:	b538      	push	{r3, r4, r5, lr}
 8020cee:	4d07      	ldr	r5, [pc, #28]	@ (8020d0c <_fstat_r+0x20>)
 8020cf0:	2300      	movs	r3, #0
 8020cf2:	4604      	mov	r4, r0
 8020cf4:	4608      	mov	r0, r1
 8020cf6:	4611      	mov	r1, r2
 8020cf8:	602b      	str	r3, [r5, #0]
 8020cfa:	f7e0 febd 	bl	8001a78 <_fstat>
 8020cfe:	1c43      	adds	r3, r0, #1
 8020d00:	d102      	bne.n	8020d08 <_fstat_r+0x1c>
 8020d02:	682b      	ldr	r3, [r5, #0]
 8020d04:	b103      	cbz	r3, 8020d08 <_fstat_r+0x1c>
 8020d06:	6023      	str	r3, [r4, #0]
 8020d08:	bd38      	pop	{r3, r4, r5, pc}
 8020d0a:	bf00      	nop
 8020d0c:	20022a4c 	.word	0x20022a4c

08020d10 <_isatty_r>:
 8020d10:	b538      	push	{r3, r4, r5, lr}
 8020d12:	4d06      	ldr	r5, [pc, #24]	@ (8020d2c <_isatty_r+0x1c>)
 8020d14:	2300      	movs	r3, #0
 8020d16:	4604      	mov	r4, r0
 8020d18:	4608      	mov	r0, r1
 8020d1a:	602b      	str	r3, [r5, #0]
 8020d1c:	f7e0 febc 	bl	8001a98 <_isatty>
 8020d20:	1c43      	adds	r3, r0, #1
 8020d22:	d102      	bne.n	8020d2a <_isatty_r+0x1a>
 8020d24:	682b      	ldr	r3, [r5, #0]
 8020d26:	b103      	cbz	r3, 8020d2a <_isatty_r+0x1a>
 8020d28:	6023      	str	r3, [r4, #0]
 8020d2a:	bd38      	pop	{r3, r4, r5, pc}
 8020d2c:	20022a4c 	.word	0x20022a4c

08020d30 <_sbrk_r>:
 8020d30:	b538      	push	{r3, r4, r5, lr}
 8020d32:	4d06      	ldr	r5, [pc, #24]	@ (8020d4c <_sbrk_r+0x1c>)
 8020d34:	2300      	movs	r3, #0
 8020d36:	4604      	mov	r4, r0
 8020d38:	4608      	mov	r0, r1
 8020d3a:	602b      	str	r3, [r5, #0]
 8020d3c:	f7e0 fec4 	bl	8001ac8 <_sbrk>
 8020d40:	1c43      	adds	r3, r0, #1
 8020d42:	d102      	bne.n	8020d4a <_sbrk_r+0x1a>
 8020d44:	682b      	ldr	r3, [r5, #0]
 8020d46:	b103      	cbz	r3, 8020d4a <_sbrk_r+0x1a>
 8020d48:	6023      	str	r3, [r4, #0]
 8020d4a:	bd38      	pop	{r3, r4, r5, pc}
 8020d4c:	20022a4c 	.word	0x20022a4c

08020d50 <abort>:
 8020d50:	b508      	push	{r3, lr}
 8020d52:	2006      	movs	r0, #6
 8020d54:	f000 f82c 	bl	8020db0 <raise>
 8020d58:	2001      	movs	r0, #1
 8020d5a:	f7e0 fe59 	bl	8001a10 <_exit>

08020d5e <_raise_r>:
 8020d5e:	291f      	cmp	r1, #31
 8020d60:	b538      	push	{r3, r4, r5, lr}
 8020d62:	4605      	mov	r5, r0
 8020d64:	460c      	mov	r4, r1
 8020d66:	d904      	bls.n	8020d72 <_raise_r+0x14>
 8020d68:	2316      	movs	r3, #22
 8020d6a:	6003      	str	r3, [r0, #0]
 8020d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020d70:	bd38      	pop	{r3, r4, r5, pc}
 8020d72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020d74:	b112      	cbz	r2, 8020d7c <_raise_r+0x1e>
 8020d76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020d7a:	b94b      	cbnz	r3, 8020d90 <_raise_r+0x32>
 8020d7c:	4628      	mov	r0, r5
 8020d7e:	f000 f831 	bl	8020de4 <_getpid_r>
 8020d82:	4622      	mov	r2, r4
 8020d84:	4601      	mov	r1, r0
 8020d86:	4628      	mov	r0, r5
 8020d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d8c:	f000 b818 	b.w	8020dc0 <_kill_r>
 8020d90:	2b01      	cmp	r3, #1
 8020d92:	d00a      	beq.n	8020daa <_raise_r+0x4c>
 8020d94:	1c59      	adds	r1, r3, #1
 8020d96:	d103      	bne.n	8020da0 <_raise_r+0x42>
 8020d98:	2316      	movs	r3, #22
 8020d9a:	6003      	str	r3, [r0, #0]
 8020d9c:	2001      	movs	r0, #1
 8020d9e:	e7e7      	b.n	8020d70 <_raise_r+0x12>
 8020da0:	2100      	movs	r1, #0
 8020da2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020da6:	4620      	mov	r0, r4
 8020da8:	4798      	blx	r3
 8020daa:	2000      	movs	r0, #0
 8020dac:	e7e0      	b.n	8020d70 <_raise_r+0x12>
	...

08020db0 <raise>:
 8020db0:	4b02      	ldr	r3, [pc, #8]	@ (8020dbc <raise+0xc>)
 8020db2:	4601      	mov	r1, r0
 8020db4:	6818      	ldr	r0, [r3, #0]
 8020db6:	f7ff bfd2 	b.w	8020d5e <_raise_r>
 8020dba:	bf00      	nop
 8020dbc:	20000080 	.word	0x20000080

08020dc0 <_kill_r>:
 8020dc0:	b538      	push	{r3, r4, r5, lr}
 8020dc2:	4d07      	ldr	r5, [pc, #28]	@ (8020de0 <_kill_r+0x20>)
 8020dc4:	2300      	movs	r3, #0
 8020dc6:	4604      	mov	r4, r0
 8020dc8:	4608      	mov	r0, r1
 8020dca:	4611      	mov	r1, r2
 8020dcc:	602b      	str	r3, [r5, #0]
 8020dce:	f7e0 fe0d 	bl	80019ec <_kill>
 8020dd2:	1c43      	adds	r3, r0, #1
 8020dd4:	d102      	bne.n	8020ddc <_kill_r+0x1c>
 8020dd6:	682b      	ldr	r3, [r5, #0]
 8020dd8:	b103      	cbz	r3, 8020ddc <_kill_r+0x1c>
 8020dda:	6023      	str	r3, [r4, #0]
 8020ddc:	bd38      	pop	{r3, r4, r5, pc}
 8020dde:	bf00      	nop
 8020de0:	20022a4c 	.word	0x20022a4c

08020de4 <_getpid_r>:
 8020de4:	f7e0 bdfa 	b.w	80019dc <_getpid>

08020de8 <_init>:
 8020de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020dea:	bf00      	nop
 8020dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020dee:	bc08      	pop	{r3}
 8020df0:	469e      	mov	lr, r3
 8020df2:	4770      	bx	lr

08020df4 <_fini>:
 8020df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020df6:	bf00      	nop
 8020df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020dfa:	bc08      	pop	{r3}
 8020dfc:	469e      	mov	lr, r3
 8020dfe:	4770      	bx	lr
