
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002230c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005024  080224dc  080224dc  000234dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027500  08027500  00029210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08027500  08027500  00028500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027508  08027508  00029210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027508  08027508  00028508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802750c  0802750c  0002850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08027510  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  080275e0  000290d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  08027680  00029170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002d740  20000210  08027720  00029210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  2002d950  08027720  00029950  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00029210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046740  00000000  00000000  00029240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b2e0  00000000  00000000  0006f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003138  00000000  00000000  0007ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002692  00000000  00000000  0007dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003faec  00000000  00000000  0008042a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00050a0a  00000000  00000000  000bff16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123be8  00000000  00000000  00110920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00234508  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d0b0  00000000  00000000  0023454c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  002415fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080224c4 	.word	0x080224c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	080224c4 	.word	0x080224c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff8b 	bl	8002558 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe9a 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f92b 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe8a 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fd43 	bl	8005170 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fe85 	bl	800343c <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fe22 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fc4b 	bl	8003028 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fdf2 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fbd6 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fbef 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fbce 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fbe7 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fbc6 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fbdf 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fbbe 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fbd7 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fbb6 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fbcf 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 fbae 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fbc7 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fba6 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fbbf 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fb9e 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fbb7 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 fb96 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 fbaf 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fb8e 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fba7 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fb86 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fb9f 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fb7e 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 fb97 	bl	800300c <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f020 fe41 	bl	8021580 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	080225c8 	.word	0x080225c8

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	484c      	ldr	r0, [pc, #304]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 8000922:	f020 fe9d 	bl	8021660 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000926:	4a4c      	ldr	r2, [pc, #304]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000928:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800092c:	2010      	movs	r0, #16
 800092e:	f00c fe7f 	bl	800d630 <osMessageQueueNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a49      	ldr	r2, [pc, #292]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000938:	4a49      	ldr	r2, [pc, #292]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 800093a:	2110      	movs	r1, #16
 800093c:	2010      	movs	r0, #16
 800093e:	f00c fe77 	bl	800d630 <osMessageQueueNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a47      	ldr	r2, [pc, #284]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000948:	4a47      	ldr	r2, [pc, #284]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800094a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800094e:	2008      	movs	r0, #8
 8000950:	f00c fe6e 	bl	800d630 <osMessageQueueNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a45      	ldr	r2, [pc, #276]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000958:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 800095a:	4a45      	ldr	r2, [pc, #276]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800095c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000960:	2008      	movs	r0, #8
 8000962:	f00c fe65 	bl	800d630 <osMessageQueueNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a42      	ldr	r2, [pc, #264]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 800096c:	4a42      	ldr	r2, [pc, #264]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800096e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000972:	2008      	movs	r0, #8
 8000974:	f00c fe5c 	bl	800d630 <osMessageQueueNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a40      	ldr	r2, [pc, #256]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800097e:	4a40      	ldr	r2, [pc, #256]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 8000980:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000984:	2008      	movs	r0, #8
 8000986:	f00c fe53 	bl	800d630 <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 8000990:	4a3d      	ldr	r2, [pc, #244]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 8000992:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000996:	2008      	movs	r0, #8
 8000998:	f00c fe4a 	bl	800d630 <osMessageQueueNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	483b      	ldr	r0, [pc, #236]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009a8:	f00c f978 	bl	800cc9c <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009b2:	4a3a      	ldr	r2, [pc, #232]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	483a      	ldr	r0, [pc, #232]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009b8:	f00c f970 	bl	800cc9c <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a39      	ldr	r2, [pc, #228]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009c2:	4a39      	ldr	r2, [pc, #228]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4839      	ldr	r0, [pc, #228]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009c8:	f00c f968 	bl	800cc9c <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a38      	ldr	r2, [pc, #224]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009d2:	4a38      	ldr	r2, [pc, #224]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4838      	ldr	r0, [pc, #224]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009d8:	f00c f960 	bl	800cc9c <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a37      	ldr	r2, [pc, #220]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009e2:	4a37      	ldr	r2, [pc, #220]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4837      	ldr	r0, [pc, #220]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009e8:	f00c f958 	bl	800cc9c <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a36      	ldr	r2, [pc, #216]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009f2:	4a36      	ldr	r2, [pc, #216]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4836      	ldr	r0, [pc, #216]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 80009f8:	f00c f950 	bl	800cc9c <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a35      	ldr	r2, [pc, #212]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a00:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a02:	4a35      	ldr	r2, [pc, #212]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4835      	ldr	r0, [pc, #212]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a08:	f00c f948 	bl	800cc9c <osThreadNew>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a34      	ldr	r2, [pc, #208]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a12:	4a34      	ldr	r2, [pc, #208]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4834      	ldr	r0, [pc, #208]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a18:	f00c f940 	bl	800cc9c <osThreadNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a33      	ldr	r2, [pc, #204]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a20:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a22:	4a33      	ldr	r2, [pc, #204]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4833      	ldr	r0, [pc, #204]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a28:	f00c f938 	bl	800cc9c <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a32      	ldr	r2, [pc, #200]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a32:	4a32      	ldr	r2, [pc, #200]	@ (8000afc <MX_FREERTOS_Init+0x1e0>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4832      	ldr	r0, [pc, #200]	@ (8000b00 <MX_FREERTOS_Init+0x1e4>)
 8000a38:	f00c f930 	bl	800cc9c <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a31      	ldr	r2, [pc, #196]	@ (8000b04 <MX_FREERTOS_Init+0x1e8>)
 8000a40:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of initDoneEvent */
  initDoneEventHandle = osEventFlagsNew(&initDoneEvent_attributes);
 8000a42:	4831      	ldr	r0, [pc, #196]	@ (8000b08 <MX_FREERTOS_Init+0x1ec>)
 8000a44:	f00c f9fe 	bl	800ce44 <osEventFlagsNew>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <MX_FREERTOS_Init+0x1f0>)
 8000a4c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	080225e8 	.word	0x080225e8
 8000a58:	080271a8 	.word	0x080271a8
 8000a5c:	20000320 	.word	0x20000320
 8000a60:	080271c0 	.word	0x080271c0
 8000a64:	20000324 	.word	0x20000324
 8000a68:	080271d8 	.word	0x080271d8
 8000a6c:	20000328 	.word	0x20000328
 8000a70:	080271f0 	.word	0x080271f0
 8000a74:	2000032c 	.word	0x2000032c
 8000a78:	08027208 	.word	0x08027208
 8000a7c:	20000330 	.word	0x20000330
 8000a80:	08027220 	.word	0x08027220
 8000a84:	20000334 	.word	0x20000334
 8000a88:	08027238 	.word	0x08027238
 8000a8c:	20000338 	.word	0x20000338
 8000a90:	08027040 	.word	0x08027040
 8000a94:	08000b11 	.word	0x08000b11
 8000a98:	200002f8 	.word	0x200002f8
 8000a9c:	08027064 	.word	0x08027064
 8000aa0:	08000b39 	.word	0x08000b39
 8000aa4:	200002fc 	.word	0x200002fc
 8000aa8:	08027088 	.word	0x08027088
 8000aac:	08000b81 	.word	0x08000b81
 8000ab0:	20000300 	.word	0x20000300
 8000ab4:	080270ac 	.word	0x080270ac
 8000ab8:	08000b95 	.word	0x08000b95
 8000abc:	20000304 	.word	0x20000304
 8000ac0:	080270d0 	.word	0x080270d0
 8000ac4:	08000ba9 	.word	0x08000ba9
 8000ac8:	20000308 	.word	0x20000308
 8000acc:	080270f4 	.word	0x080270f4
 8000ad0:	08000bbd 	.word	0x08000bbd
 8000ad4:	2000030c 	.word	0x2000030c
 8000ad8:	08027118 	.word	0x08027118
 8000adc:	08000bd1 	.word	0x08000bd1
 8000ae0:	20000310 	.word	0x20000310
 8000ae4:	0802713c 	.word	0x0802713c
 8000ae8:	08000be5 	.word	0x08000be5
 8000aec:	20000314 	.word	0x20000314
 8000af0:	08027160 	.word	0x08027160
 8000af4:	08000bf9 	.word	0x08000bf9
 8000af8:	20000318 	.word	0x20000318
 8000afc:	08027184 	.word	0x08027184
 8000b00:	08000c0d 	.word	0x08000c0d
 8000b04:	2000031c 	.word	0x2000031c
 8000b08:	08027250 	.word	0x08027250
 8000b0c:	2000033c 	.word	0x2000033c

08000b10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b18:	f00b f9ce 	bl	800beb8 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  UDP_Server_Init();
 8000b1c:	f01f fda4 	bl	8020668 <UDP_Server_Init>
  osEventFlagsSet(initDoneEventHandle, 0x01);
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <StartDefaultTask+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00c f9de 	bl	800cee8 <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f00c f95b 	bl	800cde8 <osDelay>
 8000b32:	e7fb      	b.n	8000b2c <StartDefaultTask+0x1c>
 8000b34:	2000033c 	.word	0x2000033c

08000b38 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Listener waiting for network...\n");
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <StartTaskUdpListener+0x38>)
 8000b42:	f020 fd8d 	bl	8021660 <puts>
  osEventFlagsWait(initDoneEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <StartTaskUdpListener+0x3c>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2101      	movs	r1, #1
 8000b52:	f00c fa1f 	bl	800cf94 <osEventFlagsWait>
  printf("Network set...\n");
 8000b56:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <StartTaskUdpListener+0x40>)
 8000b58:	f020 fd82 	bl	8021660 <puts>
  printf("Starting UDP Listener...\n");
 8000b5c:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <StartTaskUdpListener+0x44>)
 8000b5e:	f020 fd7f 	bl	8021660 <puts>
  UDP_Listen(); // loops here
 8000b62:	f01f fdd1 	bl	8020708 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08022600 	.word	0x08022600
 8000b74:	2000033c 	.word	0x2000033c
 8000b78:	08022620 	.word	0x08022620
 8000b7c:	08022630 	.word	0x08022630

08000b80 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b88:	f01f fc34 	bl	80203f4 <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b9c:	f020 faa6 	bl	80210ec <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000bb0:	f01f fed0 	bl	8020954 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000bc4:	f020 f850 	bl	8020c68 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000bd8:	f01f fb4a 	bl	8020270 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000bec:	f020 f9ae 	bl	8020f4c <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000c00:	f01f fe54 	bl	80208ac <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoggerTask */
  /* Infinite loop */
  for(;;)
  {

	printf("stats---------------------------------\n");
 8000c14:	4830      	ldr	r0, [pc, #192]	@ (8000cd8 <StartLoggerTask+0xcc>)
 8000c16:	f020 fd23 	bl	8021660 <puts>
	printf("Free Heap: %lu\n", xPortGetFreeHeapSize());
 8000c1a:	f010 fb37 	bl	801128c <xPortGetFreeHeapSize>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4619      	mov	r1, r3
 8000c22:	482e      	ldr	r0, [pc, #184]	@ (8000cdc <StartLoggerTask+0xd0>)
 8000c24:	f020 fcac 	bl	8021580 <iprintf>
	printf("Minimum Ever Free Heap: %lu\n", xPortGetMinimumEverFreeHeapSize());
 8000c28:	f010 fb3c 	bl	80112a4 <xPortGetMinimumEverFreeHeapSize>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482b      	ldr	r0, [pc, #172]	@ (8000ce0 <StartLoggerTask+0xd4>)
 8000c32:	f020 fca5 	bl	8021580 <iprintf>
	printf("inMsg Q size: %lu\n", osMessageQueueGetCount(inMsgQueueHandle));
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <StartLoggerTask+0xd8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00c fe64 	bl	800d908 <osMessageQueueGetCount>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4619      	mov	r1, r3
 8000c44:	4828      	ldr	r0, [pc, #160]	@ (8000ce8 <StartLoggerTask+0xdc>)
 8000c46:	f020 fc9b 	bl	8021580 <iprintf>
	printf("outMsg Q size: %lu\n", osMessageQueueGetCount(outMsgQueueHandle));
 8000c4a:	4b28      	ldr	r3, [pc, #160]	@ (8000cec <StartLoggerTask+0xe0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00c fe5a 	bl	800d908 <osMessageQueueGetCount>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4619      	mov	r1, r3
 8000c58:	4825      	ldr	r0, [pc, #148]	@ (8000cf0 <StartLoggerTask+0xe4>)
 8000c5a:	f020 fc91 	bl	8021580 <iprintf>
	printf("uart Q size: %lu\n", osMessageQueueGetCount(uartQueueHandle));
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <StartLoggerTask+0xe8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00c fe50 	bl	800d908 <osMessageQueueGetCount>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4822      	ldr	r0, [pc, #136]	@ (8000cf8 <StartLoggerTask+0xec>)
 8000c6e:	f020 fc87 	bl	8021580 <iprintf>
	printf("i2c Q size: %lu\n", osMessageQueueGetCount(i2cQueueHandle));
 8000c72:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <StartLoggerTask+0xf0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00c fe46 	bl	800d908 <osMessageQueueGetCount>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481f      	ldr	r0, [pc, #124]	@ (8000d00 <StartLoggerTask+0xf4>)
 8000c82:	f020 fc7d 	bl	8021580 <iprintf>
	printf("spi Q size: %lu\n", osMessageQueueGetCount(spiQueueHandle));
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <StartLoggerTask+0xf8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00c fe3c 	bl	800d908 <osMessageQueueGetCount>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4619      	mov	r1, r3
 8000c94:	481c      	ldr	r0, [pc, #112]	@ (8000d08 <StartLoggerTask+0xfc>)
 8000c96:	f020 fc73 	bl	8021580 <iprintf>
	printf("adc Q size: %lu\n", osMessageQueueGetCount(adcQueueHandle));
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <StartLoggerTask+0x100>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00c fe32 	bl	800d908 <osMessageQueueGetCount>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4819      	ldr	r0, [pc, #100]	@ (8000d10 <StartLoggerTask+0x104>)
 8000caa:	f020 fc69 	bl	8021580 <iprintf>
	printf("timer Q size: %lu\n", osMessageQueueGetCount(timQueueHandle));
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <StartLoggerTask+0x108>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00c fe28 	bl	800d908 <osMessageQueueGetCount>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4816      	ldr	r0, [pc, #88]	@ (8000d18 <StartLoggerTask+0x10c>)
 8000cbe:	f020 fc5f 	bl	8021580 <iprintf>
	printf("--------------------------------------\n");
 8000cc2:	4816      	ldr	r0, [pc, #88]	@ (8000d1c <StartLoggerTask+0x110>)
 8000cc4:	f020 fccc 	bl	8021660 <puts>

	stats_display();
 8000cc8:	f015 f802 	bl	8015cd0 <stats_display>
	osDelay(30000);
 8000ccc:	f247 5030 	movw	r0, #30000	@ 0x7530
 8000cd0:	f00c f88a 	bl	800cde8 <osDelay>
	printf("stats---------------------------------\n");
 8000cd4:	bf00      	nop
 8000cd6:	e79d      	b.n	8000c14 <StartLoggerTask+0x8>
 8000cd8:	0802264c 	.word	0x0802264c
 8000cdc:	08022674 	.word	0x08022674
 8000ce0:	08022684 	.word	0x08022684
 8000ce4:	20000320 	.word	0x20000320
 8000ce8:	080226a4 	.word	0x080226a4
 8000cec:	20000324 	.word	0x20000324
 8000cf0:	080226b8 	.word	0x080226b8
 8000cf4:	20000328 	.word	0x20000328
 8000cf8:	080226cc 	.word	0x080226cc
 8000cfc:	2000032c 	.word	0x2000032c
 8000d00:	080226e0 	.word	0x080226e0
 8000d04:	20000330 	.word	0x20000330
 8000d08:	080226f4 	.word	0x080226f4
 8000d0c:	20000334 	.word	0x20000334
 8000d10:	08022708 	.word	0x08022708
 8000d14:	20000338 	.word	0x20000338
 8000d18:	0802271c 	.word	0x0802271c
 8000d1c:	08022730 	.word	0x08022730

08000d20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d26:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a26      	ldr	r2, [pc, #152]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a20      	ldr	r2, [pc, #128]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_GPIO_Init+0xa4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

}
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	@ (8000e40 <MX_I2C1_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <MX_I2C1_Init+0x7c>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e02:	480e      	ldr	r0, [pc, #56]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000e04:	f004 fb60 	bl	80054c8 <HAL_I2C_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e0e:	f000 fab7 	bl	8001380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4809      	ldr	r0, [pc, #36]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000e16:	f006 fd03 	bl	8007820 <HAL_I2CEx_ConfigAnalogFilter>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e20:	f000 faae 	bl	8001380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_I2C1_Init+0x74>)
 8000e28:	f006 fd45 	bl	80078b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f000 faa5 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000340 	.word	0x20000340
 8000e40:	40005400 	.word	0x40005400
 8000e44:	20404768 	.word	0x20404768

08000e48 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <MX_I2C2_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec4 <MX_I2C2_Init+0x7c>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e5a:	2214      	movs	r2, #20
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e82:	480e      	ldr	r0, [pc, #56]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e84:	f004 fb20 	bl	80054c8 <HAL_I2C_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e8e:	f000 fa77 	bl	8001380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000e96:	f006 fcc3 	bl	8007820 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ea0:	f000 fa6e 	bl	8001380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_I2C2_Init+0x74>)
 8000ea8:	f006 fd05 	bl	80078b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 fa65 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000394 	.word	0x20000394
 8000ec0:	40005800 	.word	0x40005800
 8000ec4:	20404768 	.word	0x20404768

08000ec8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0ac      	sub	sp, #176	@ 0xb0
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	2284      	movs	r2, #132	@ 0x84
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f020 fca9 	bl	8021840 <memset>
  if(i2cHandle->Instance==I2C1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a57      	ldr	r2, [pc, #348]	@ (8001050 <HAL_I2C_MspInit+0x188>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	f040 80b9 	bne.w	800106c <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000efa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000efe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 fa2d 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f14:	f000 fa34 	bl	8001380 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	4b4e      	ldr	r3, [pc, #312]	@ (8001054 <HAL_I2C_MspInit+0x18c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001054 <HAL_I2C_MspInit+0x18c>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f24:	4b4b      	ldr	r3, [pc, #300]	@ (8001054 <HAL_I2C_MspInit+0x18c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4840      	ldr	r0, [pc, #256]	@ (8001058 <HAL_I2C_MspInit+0x190>)
 8000f58:	f004 f90a 	bl	8005170 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <HAL_I2C_MspInit+0x18c>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	4a3c      	ldr	r2, [pc, #240]	@ (8001054 <HAL_I2C_MspInit+0x18c>)
 8000f62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f68:	4b3a      	ldr	r3, [pc, #232]	@ (8001054 <HAL_I2C_MspInit+0x18c>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000f74:	4b39      	ldr	r3, [pc, #228]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000f76:	4a3a      	ldr	r2, [pc, #232]	@ (8001060 <HAL_I2C_MspInit+0x198>)
 8000f78:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f7a:	4b38      	ldr	r3, [pc, #224]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000f7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f80:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f82:	4b36      	ldr	r3, [pc, #216]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f88:	4b34      	ldr	r3, [pc, #208]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8e:	4b33      	ldr	r3, [pc, #204]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000f90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f94:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f96:	4b31      	ldr	r3, [pc, #196]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fb4:	4829      	ldr	r0, [pc, #164]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000fb6:	f002 fa41 	bl	800343c <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000fc0:	f000 f9de 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a25      	ldr	r2, [pc, #148]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fca:	4a24      	ldr	r2, [pc, #144]	@ (800105c <HAL_I2C_MspInit+0x194>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8000fd2:	4a25      	ldr	r2, [pc, #148]	@ (8001068 <HAL_I2C_MspInit+0x1a0>)
 8000fd4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8000fd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fdc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fde:	4b21      	ldr	r3, [pc, #132]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8000fe0:	2240      	movs	r2, #64	@ 0x40
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8000fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ff0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001010:	4814      	ldr	r0, [pc, #80]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8001012:	f002 fa13 	bl	800343c <HAL_DMA_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 800101c:	f000 f9b0 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38
 8001026:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <HAL_I2C_MspInit+0x19c>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2105      	movs	r1, #5
 8001030:	201f      	movs	r0, #31
 8001032:	f001 ffcf 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001036:	201f      	movs	r0, #31
 8001038:	f001 ffe8 	bl	800300c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2105      	movs	r1, #5
 8001040:	2020      	movs	r0, #32
 8001042:	f001 ffc7 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001046:	2020      	movs	r0, #32
 8001048:	f001 ffe0 	bl	800300c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800104c:	e0be      	b.n	80011cc <HAL_I2C_MspInit+0x304>
 800104e:	bf00      	nop
 8001050:	40005400 	.word	0x40005400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400
 800105c:	200003e8 	.word	0x200003e8
 8001060:	40026088 	.word	0x40026088
 8001064:	20000448 	.word	0x20000448
 8001068:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a58      	ldr	r2, [pc, #352]	@ (80011d4 <HAL_I2C_MspInit+0x30c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 80aa 	bne.w	80011cc <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001078:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800107c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f007 f96d 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8001094:	f000 f974 	bl	8001380 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b4f      	ldr	r3, [pc, #316]	@ (80011d8 <HAL_I2C_MspInit+0x310>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a4e      	ldr	r2, [pc, #312]	@ (80011d8 <HAL_I2C_MspInit+0x310>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a4:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <HAL_I2C_MspInit+0x310>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b8:	2312      	movs	r3, #18
 80010ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010be:	2301      	movs	r3, #1
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ca:	2304      	movs	r3, #4
 80010cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d4:	4619      	mov	r1, r3
 80010d6:	4841      	ldr	r0, [pc, #260]	@ (80011dc <HAL_I2C_MspInit+0x314>)
 80010d8:	f004 f84a 	bl	8005170 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010dc:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <HAL_I2C_MspInit+0x310>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a3d      	ldr	r2, [pc, #244]	@ (80011d8 <HAL_I2C_MspInit+0x310>)
 80010e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_I2C_MspInit+0x310>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80010f4:	4b3a      	ldr	r3, [pc, #232]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 80010f6:	4a3b      	ldr	r2, [pc, #236]	@ (80011e4 <HAL_I2C_MspInit+0x31c>)
 80010f8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80010fa:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 80010fc:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001100:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001102:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b35      	ldr	r3, [pc, #212]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 8001110:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001114:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001116:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111c:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001122:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001128:	4b2d      	ldr	r3, [pc, #180]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112e:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001134:	482a      	ldr	r0, [pc, #168]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 8001136:	f002 f981 	bl	800343c <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001140:	f000 f91e 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a26      	ldr	r2, [pc, #152]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 8001148:	63da      	str	r2, [r3, #60]	@ 0x3c
 800114a:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <HAL_I2C_MspInit+0x318>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001150:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001152:	4a26      	ldr	r2, [pc, #152]	@ (80011ec <HAL_I2C_MspInit+0x324>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001156:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001158:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800115c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115e:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001160:	2240      	movs	r2, #64	@ 0x40
 8001162:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 800116c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001170:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001172:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001190:	4815      	ldr	r0, [pc, #84]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 8001192:	f002 f953 	bl	800343c <HAL_DMA_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 800119c:	f000 f8f0 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a11      	ldr	r2, [pc, #68]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011a6:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <HAL_I2C_MspInit+0x320>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2105      	movs	r1, #5
 80011b0:	2021      	movs	r0, #33	@ 0x21
 80011b2:	f001 ff0f 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80011b6:	2021      	movs	r0, #33	@ 0x21
 80011b8:	f001 ff28 	bl	800300c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2105      	movs	r1, #5
 80011c0:	2022      	movs	r0, #34	@ 0x22
 80011c2:	f001 ff07 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80011c6:	2022      	movs	r0, #34	@ 0x22
 80011c8:	f001 ff20 	bl	800300c <HAL_NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	37b0      	adds	r7, #176	@ 0xb0
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40005800 	.word	0x40005800
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	200004a8 	.word	0x200004a8
 80011e4:	40026058 	.word	0x40026058
 80011e8:	20000508 	.word	0x20000508
 80011ec:	400260b8 	.word	0x400260b8

080011f0 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <_write+0x3c>)
 80011fe:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	b29a      	uxth	r2, r3
 8001204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	4809      	ldr	r0, [pc, #36]	@ (8001230 <_write+0x40>)
 800120c:	f009 fb00 	bl	800a810 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8001210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001214:	2201      	movs	r2, #1
 8001216:	6979      	ldr	r1, [r7, #20]
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <_write+0x40>)
 800121a:	f009 faf9 	bl	800a810 <HAL_UART_Transmit>
	return len + 1;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3301      	adds	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	08022758 	.word	0x08022758
 8001230:	20000a08 	.word	0x20000a08

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f001 f93d 	bl	80024b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f822 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f7ff fd6e 	bl	8000d20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001244:	f7ff fad0 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001248:	f000 fe4c 	bl	8001ee4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800124c:	f7ff fa8a 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8001250:	f000 fde8 	bl	8001e24 <MX_UART4_Init>
  MX_UART5_Init();
 8001254:	f000 fe16 	bl	8001e84 <MX_UART5_Init>
  MX_I2C1_Init();
 8001258:	f7ff fdb6 	bl	8000dc8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800125c:	f7ff fdf4 	bl	8000e48 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001260:	f000 f894 	bl	800138c <MX_SPI1_Init>
  MX_SPI4_Init();
 8001264:	f000 f8d0 	bl	8001408 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001268:	f7ff f9b8 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 800126c:	f000 fd38 	bl	8001ce0 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001270:	f000 fce8 	bl	8001c44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001274:	f00b fc80 	bl	800cb78 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001278:	f7ff fb50 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800127c:	f00b fcb0 	bl	800cbe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <main+0x4c>

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	@ 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2230      	movs	r2, #48	@ 0x30
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f020 fad4 	bl	8021840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	4a29      	ldr	r2, [pc, #164]	@ (8001354 <SystemClock_Config+0xd0>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c0:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <SystemClock_Config+0xd4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a24      	ldr	r2, [pc, #144]	@ (8001358 <SystemClock_Config+0xd4>)
 80012c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ec:	2308      	movs	r3, #8
 80012ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012f0:	23d8      	movs	r3, #216	@ 0xd8
 80012f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f006 fb75 	bl	80079f0 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800130c:	f000 f838 	bl	8001380 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001310:	f006 fb1e 	bl	8007950 <HAL_PWREx_EnableOverDrive>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800131a:	f000 f831 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131e:	230f      	movs	r3, #15
 8001320:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001322:	2302      	movs	r3, #2
 8001324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800132a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800132e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2107      	movs	r1, #7
 800133c:	4618      	mov	r0, r3
 800133e:	f006 fdfb 	bl	8007f38 <HAL_RCC_ClockConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001348:	f000 f81a 	bl	8001380 <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3750      	adds	r7, #80	@ 0x50
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800136e:	f001 f8af 	bl	80024d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40001400 	.word	0x40001400

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <Error_Handler+0x8>

0800138c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <MX_SPI1_Init+0x74>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <MX_SPI1_Init+0x78>)
 8001394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_SPI1_Init+0x74>)
 8001398:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800139c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013c2:	2218      	movs	r2, #24
 80013c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013da:	2207      	movs	r2, #7
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013e6:	2208      	movs	r2, #8
 80013e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_SPI1_Init+0x74>)
 80013ec:	f007 fbac 	bl	8008b48 <HAL_SPI_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013f6:	f7ff ffc3 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000568 	.word	0x20000568
 8001404:	40013000 	.word	0x40013000

08001408 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_SPI4_Init+0x68>)
 800140e:	4a19      	ldr	r2, [pc, #100]	@ (8001474 <MX_SPI4_Init+0x6c>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_SPI4_Init+0x68>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001420:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001424:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <MX_SPI4_Init+0x68>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <MX_SPI4_Init+0x68>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_SPI4_Init+0x68>)
 800144c:	2207      	movs	r2, #7
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001452:	2200      	movs	r2, #0
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_SPI4_Init+0x68>)
 8001458:	2200      	movs	r2, #0
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_SPI4_Init+0x68>)
 800145e:	f007 fb73 	bl	8008b48 <HAL_SPI_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001468:	f7ff ff8a 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200005cc 	.word	0x200005cc
 8001474:	40013400 	.word	0x40013400

08001478 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	@ 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4aa1      	ldr	r2, [pc, #644]	@ (800171c <HAL_SPI_MspInit+0x2a4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	f040 80a9 	bne.w	80015ee <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800149c:	4ba0      	ldr	r3, [pc, #640]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a0:	4a9f      	ldr	r2, [pc, #636]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	4a99      	ldr	r2, [pc, #612]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c0:	4b97      	ldr	r3, [pc, #604]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b94      	ldr	r3, [pc, #592]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	4a93      	ldr	r2, [pc, #588]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d8:	4b91      	ldr	r3, [pc, #580]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014e4:	2370      	movs	r3, #112	@ 0x70
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f4:	2305      	movs	r3, #5
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4889      	ldr	r0, [pc, #548]	@ (8001724 <HAL_SPI_MspInit+0x2ac>)
 8001500:	f003 fe36 	bl	8005170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001504:	2320      	movs	r3, #32
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001514:	2305      	movs	r3, #5
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4882      	ldr	r0, [pc, #520]	@ (8001728 <HAL_SPI_MspInit+0x2b0>)
 8001520:	f003 fe26 	bl	8005170 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001524:	4b81      	ldr	r3, [pc, #516]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001526:	4a82      	ldr	r2, [pc, #520]	@ (8001730 <HAL_SPI_MspInit+0x2b8>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800152a:	4b80      	ldr	r3, [pc, #512]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 800152c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001530:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001532:	4b7e      	ldr	r3, [pc, #504]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001538:	4b7c      	ldr	r3, [pc, #496]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800153e:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001544:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001546:	4b79      	ldr	r3, [pc, #484]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154c:	4b77      	ldr	r3, [pc, #476]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001552:	4b76      	ldr	r3, [pc, #472]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001558:	4b74      	ldr	r3, [pc, #464]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155e:	4b73      	ldr	r3, [pc, #460]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001564:	4871      	ldr	r0, [pc, #452]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001566:	f001 ff69 	bl	800343c <HAL_DMA_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001570:	f7ff ff06 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a6d      	ldr	r2, [pc, #436]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 8001578:	659a      	str	r2, [r3, #88]	@ 0x58
 800157a:	4a6c      	ldr	r2, [pc, #432]	@ (800172c <HAL_SPI_MspInit+0x2b4>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001580:	4b6c      	ldr	r3, [pc, #432]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 8001582:	4a6d      	ldr	r2, [pc, #436]	@ (8001738 <HAL_SPI_MspInit+0x2c0>)
 8001584:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001586:	4b6b      	ldr	r3, [pc, #428]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 8001588:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800158c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800158e:	4b69      	ldr	r3, [pc, #420]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 8001590:	2240      	movs	r2, #64	@ 0x40
 8001592:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b67      	ldr	r3, [pc, #412]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b66      	ldr	r3, [pc, #408]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 800159c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a2:	4b64      	ldr	r3, [pc, #400]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a8:	4b62      	ldr	r3, [pc, #392]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015ae:	4b61      	ldr	r3, [pc, #388]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015c0:	485c      	ldr	r0, [pc, #368]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015c2:	f001 ff3b 	bl	800343c <HAL_DMA_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80015cc:	f7ff fed8 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a58      	ldr	r2, [pc, #352]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54
 80015d6:	4a57      	ldr	r2, [pc, #348]	@ (8001734 <HAL_SPI_MspInit+0x2bc>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2105      	movs	r1, #5
 80015e0:	2023      	movs	r0, #35	@ 0x23
 80015e2:	f001 fcf7 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015e6:	2023      	movs	r0, #35	@ 0x23
 80015e8:	f001 fd10 	bl	800300c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80015ec:	e091      	b.n	8001712 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a52      	ldr	r2, [pc, #328]	@ (800173c <HAL_SPI_MspInit+0x2c4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	f040 808c 	bne.w	8001712 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015fa:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a48      	ldr	r2, [pc, #288]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 8001600:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b46      	ldr	r3, [pc, #280]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001612:	4b43      	ldr	r3, [pc, #268]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a42      	ldr	r2, [pc, #264]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b40      	ldr	r3, [pc, #256]	@ (8001720 <HAL_SPI_MspInit+0x2a8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800162a:	2374      	movs	r3, #116	@ 0x74
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800163a:	2305      	movs	r3, #5
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	483e      	ldr	r0, [pc, #248]	@ (8001740 <HAL_SPI_MspInit+0x2c8>)
 8001646:	f003 fd93 	bl	8005170 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800164a:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 800164c:	4a3e      	ldr	r2, [pc, #248]	@ (8001748 <HAL_SPI_MspInit+0x2d0>)
 800164e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001650:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 8001652:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001656:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001658:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800165e:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001664:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 8001666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800166a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166c:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001672:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800167e:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001684:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800168a:	482e      	ldr	r0, [pc, #184]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 800168c:	f001 fed6 	bl	800343c <HAL_DMA_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001696:	f7ff fe73 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a29      	ldr	r2, [pc, #164]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 800169e:	659a      	str	r2, [r3, #88]	@ 0x58
 80016a0:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <HAL_SPI_MspInit+0x2cc>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80016a6:	4b29      	ldr	r3, [pc, #164]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016a8:	4a29      	ldr	r2, [pc, #164]	@ (8001750 <HAL_SPI_MspInit+0x2d8>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016b2:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016b6:	2240      	movs	r2, #64	@ 0x40
 80016b8:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c6:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c8:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80016e6:	4819      	ldr	r0, [pc, #100]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016e8:	f001 fea8 	bl	800343c <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80016f2:	f7ff fe45 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80016fc:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_SPI_MspInit+0x2d4>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2105      	movs	r1, #5
 8001706:	2054      	movs	r0, #84	@ 0x54
 8001708:	f001 fc64 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800170c:	2054      	movs	r0, #84	@ 0x54
 800170e:	f001 fc7d 	bl	800300c <HAL_NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40013000 	.word	0x40013000
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	20000630 	.word	0x20000630
 8001730:	40026440 	.word	0x40026440
 8001734:	20000690 	.word	0x20000690
 8001738:	40026458 	.word	0x40026458
 800173c:	40013400 	.word	0x40013400
 8001740:	40021000 	.word	0x40021000
 8001744:	200006f0 	.word	0x200006f0
 8001748:	40026410 	.word	0x40026410
 800174c:	20000750 	.word	0x20000750
 8001750:	40026428 	.word	0x40026428

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	@ 0x40
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177c:	6453      	str	r3, [r2, #68]	@ 0x44
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	210f      	movs	r1, #15
 800178e:	f06f 0001 	mvn.w	r0, #1
 8001792:	f001 fc1f 	bl	8002fd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	@ 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80017b4:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <HAL_InitTick+0xe0>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	4a32      	ldr	r2, [pc, #200]	@ (8001884 <HAL_InitTick+0xe0>)
 80017ba:	f043 0320 	orr.w	r3, r3, #32
 80017be:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c0:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <HAL_InitTick+0xe0>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017cc:	f107 0210 	add.w	r2, r7, #16
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 fd94 	bl	8008304 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017e6:	f006 fd65 	bl	80082b4 <HAL_RCC_GetPCLK1Freq>
 80017ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80017ec:	e004      	b.n	80017f8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ee:	f006 fd61 	bl	80082b4 <HAL_RCC_GetPCLK1Freq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fa:	4a23      	ldr	r2, [pc, #140]	@ (8001888 <HAL_InitTick+0xe4>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	0c9b      	lsrs	r3, r3, #18
 8001802:	3b01      	subs	r3, #1
 8001804:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <HAL_InitTick+0xe8>)
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <HAL_InitTick+0xec>)
 800180a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <HAL_InitTick+0xe8>)
 800180e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001812:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_InitTick+0xe8>)
 8001816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001818:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <HAL_InitTick+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <HAL_InitTick+0xe8>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_InitTick+0xe8>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800182c:	4817      	ldr	r0, [pc, #92]	@ (800188c <HAL_InitTick+0xe8>)
 800182e:	f008 fa53 	bl	8009cd8 <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001838:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11b      	bne.n	8001878 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001840:	4812      	ldr	r0, [pc, #72]	@ (800188c <HAL_InitTick+0xe8>)
 8001842:	f008 fb39 	bl	8009eb8 <HAL_TIM_Base_Start_IT>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800184c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001854:	2037      	movs	r0, #55	@ 0x37
 8001856:	f001 fbd9 	bl	800300c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d808      	bhi.n	8001872 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	2037      	movs	r0, #55	@ 0x37
 8001866:	f001 fbb5 	bl	8002fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <HAL_InitTick+0xf0>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e002      	b.n	8001878 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001878:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800187c:	4618      	mov	r0, r3
 800187e:	3738      	adds	r7, #56	@ 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	431bde83 	.word	0x431bde83
 800188c:	200007b0 	.word	0x200007b0
 8001890:	40001400 	.word	0x40001400
 8001894:	20000004 	.word	0x20000004

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <NMI_Handler+0x4>

080018a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <MemManage_Handler+0x4>

080018b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <UsageFault_Handler+0x4>

080018c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DMA1_Stream0_IRQHandler+0x10>)
 80018d6:	f001 ff51 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000af0 	.word	0x20000af0

080018e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA1_Stream1_IRQHandler+0x10>)
 80018ea:	f001 ff47 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000898 	.word	0x20000898

080018f8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <DMA1_Stream2_IRQHandler+0x10>)
 80018fe:	f001 ff3d 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000a90 	.word	0x20000a90

0800190c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA1_Stream3_IRQHandler+0x10>)
 8001912:	f001 ff33 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200004a8 	.word	0x200004a8

08001920 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA1_Stream5_IRQHandler+0x10>)
 8001926:	f001 ff29 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200003e8 	.word	0x200003e8

08001934 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA1_Stream6_IRQHandler+0x10>)
 800193a:	f001 ff1f 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000448 	.word	0x20000448

08001948 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <I2C1_EV_IRQHandler+0x10>)
 800194e:	f004 f9fd 	bl	8005d4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000340 	.word	0x20000340

0800195c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <I2C1_ER_IRQHandler+0x10>)
 8001962:	f004 fa0d 	bl	8005d80 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000340 	.word	0x20000340

08001970 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <I2C2_EV_IRQHandler+0x10>)
 8001976:	f004 f9e9 	bl	8005d4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000394 	.word	0x20000394

08001984 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <I2C2_ER_IRQHandler+0x10>)
 800198a:	f004 f9f9 	bl	8005d80 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000394 	.word	0x20000394

08001998 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <SPI1_IRQHandler+0x10>)
 800199e:	f007 fd13 	bl	80093c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000568 	.word	0x20000568

080019ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <USART3_IRQHandler+0x10>)
 80019b2:	f009 f859 	bl	800aa68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000a08 	.word	0x20000a08

080019c0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <DMA1_Stream7_IRQHandler+0x10>)
 80019c6:	f001 fed9 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000508 	.word	0x20000508

080019d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <UART4_IRQHandler+0x10>)
 80019da:	f009 f845 	bl	800aa68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200008f8 	.word	0x200008f8

080019e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <UART5_IRQHandler+0x10>)
 80019ee:	f009 f83b 	bl	800aa68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000980 	.word	0x20000980

080019fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM6_DAC_IRQHandler+0x10>)
 8001a02:	f008 fad1 	bl	8009fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000084c 	.word	0x2000084c

08001a10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM7_IRQHandler+0x10>)
 8001a16:	f008 fac7 	bl	8009fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200007b0 	.word	0x200007b0

08001a24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <DMA2_Stream0_IRQHandler+0x10>)
 8001a2a:	f001 fea7 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200006f0 	.word	0x200006f0

08001a38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <DMA2_Stream1_IRQHandler+0x10>)
 8001a3e:	f001 fe9d 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000750 	.word	0x20000750

08001a4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <DMA2_Stream2_IRQHandler+0x10>)
 8001a52:	f001 fe93 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000630 	.word	0x20000630

08001a60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <DMA2_Stream3_IRQHandler+0x10>)
 8001a66:	f001 fe89 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000690 	.word	0x20000690

08001a74 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <DMA2_Stream4_IRQHandler+0x10>)
 8001a7a:	f001 fe7f 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000274 	.word	0x20000274

08001a88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <ETH_IRQHandler+0x10>)
 8001a8e:	f002 fc87 	bl	80043a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000cfe8 	.word	0x2000cfe8

08001a9c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <ETH_WKUP_IRQHandler+0x10>)
 8001aa2:	f002 fc7d 	bl	80043a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000cfe8 	.word	0x2000cfe8

08001ab0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <SPI4_IRQHandler+0x10>)
 8001ab6:	f007 fc87 	bl	80093c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200005cc 	.word	0x200005cc

08001ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <_kill+0x20>)
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	2002d940 	.word	0x2002d940

08001af8 <_exit>:

void _exit (int status)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffe5 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0a:	bf00      	nop
 8001b0c:	e7fd      	b.n	8001b0a <_exit+0x12>

08001b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00a      	b.n	8001b36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b20:	f3af 8000 	nop.w
 8001b24:	4601      	mov	r1, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf0      	blt.n	8001b20 <_read+0x12>
  }

  return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b70:	605a      	str	r2, [r3, #4]
  return 0;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_isatty>:

int _isatty(int file)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b88:	2301      	movs	r3, #1
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d205      	bcs.n	8001bec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001be0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <_sbrk+0x6c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a06      	ldr	r2, [pc, #24]	@ (8001c14 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20050000 	.word	0x20050000
 8001c10:	00002000 	.word	0x00002000
 8001c14:	200007fc 	.word	0x200007fc
 8001c18:	2002d950 	.word	0x2002d950
 8001c1c:	2002d940 	.word	0x2002d940

08001c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0310 	add.w	r3, r7, #16
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c8a:	4814      	ldr	r0, [pc, #80]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001c8c:	f008 f824 	bl	8009cd8 <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c96:	f7ff fb73 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001ca8:	f008 fa86 	bl	800a1b8 <HAL_TIM_ConfigClockSource>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cb2:	f7ff fb65 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4806      	ldr	r0, [pc, #24]	@ (8001cdc <MX_TIM2_Init+0x98>)
 8001cc4:	f008 fcaa 	bl	800a61c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cce:	f7ff fb57 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000800 	.word	0x20000800

08001ce0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <MX_TIM6_Init+0x64>)
 8001cf2:	4a15      	ldr	r2, [pc, #84]	@ (8001d48 <MX_TIM6_Init+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <MX_TIM6_Init+0x64>)
 8001cf8:	f240 221b 	movw	r2, #539	@ 0x21b
 8001cfc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_TIM6_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_TIM6_Init+0x64>)
 8001d06:	2263      	movs	r2, #99	@ 0x63
 8001d08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_TIM6_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <MX_TIM6_Init+0x64>)
 8001d12:	f007 ffe1 	bl	8009cd8 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d1c:	f7ff fb30 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d20:	2320      	movs	r3, #32
 8001d22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_TIM6_Init+0x64>)
 8001d2e:	f008 fc75 	bl	800a61c <HAL_TIMEx_MasterConfigSynchronization>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d38:	f7ff fb22 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000084c 	.word	0x2000084c
 8001d48:	40001000 	.word	0x40001000

08001d4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HAL_TIM_Base_MspInit+0xc8>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	4a2c      	ldr	r2, [pc, #176]	@ (8001e14 <HAL_TIM_Base_MspInit+0xc8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <HAL_TIM_Base_MspInit+0xc8>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d76:	e049      	b.n	8001e0c <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <HAL_TIM_Base_MspInit+0xcc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d144      	bne.n	8001e0c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d82:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <HAL_TIM_Base_MspInit+0xc8>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a23      	ldr	r2, [pc, #140]	@ (8001e14 <HAL_TIM_Base_MspInit+0xc8>)
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <HAL_TIM_Base_MspInit+0xc8>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <HAL_TIM_Base_MspInit+0xd4>)
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001da2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001da6:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dba:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001dbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc2:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001dc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dca:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001dd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dd8:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001de0:	480e      	ldr	r0, [pc, #56]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001de2:	f001 fb2b 	bl	800343c <HAL_DMA_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001dec:	f7ff fac8 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001df4:	621a      	str	r2, [r3, #32]
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <HAL_TIM_Base_MspInit+0xd0>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2105      	movs	r1, #5
 8001e00:	2036      	movs	r0, #54	@ 0x36
 8001e02:	f001 f8e7 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e06:	2036      	movs	r0, #54	@ 0x36
 8001e08:	f001 f900 	bl	800300c <HAL_NVIC_EnableIRQ>
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40001000 	.word	0x40001000
 8001e1c:	20000898 	.word	0x20000898
 8001e20:	40026028 	.word	0x40026028

08001e24 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e28:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e2a:	4a15      	ldr	r2, [pc, #84]	@ (8001e80 <MX_UART4_Init+0x5c>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e66:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <MX_UART4_Init+0x58>)
 8001e68:	f008 fc84 	bl	800a774 <HAL_UART_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001e72:	f7ff fa85 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200008f8 	.word	0x200008f8
 8001e80:	40004c00 	.word	0x40004c00

08001e84 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <MX_UART5_Init+0x58>)
 8001e8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ee0 <MX_UART5_Init+0x5c>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <MX_UART5_Init+0x58>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_UART5_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <MX_UART5_Init+0x58>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_UART5_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_UART5_Init+0x58>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <MX_UART5_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_UART5_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <MX_UART5_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_UART5_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_UART5_Init+0x58>)
 8001ec8:	f008 fc54 	bl	800a774 <HAL_UART_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001ed2:	f7ff fa55 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000980 	.word	0x20000980
 8001ee0:	40005000 	.word	0x40005000

08001ee4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001eea:	4a15      	ldr	r2, [pc, #84]	@ (8001f40 <MX_USART3_UART_Init+0x5c>)
 8001eec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001ef0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <MX_USART3_UART_Init+0x58>)
 8001f28:	f008 fc24 	bl	800a774 <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f32:	f7ff fa25 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000a08 	.word	0x20000a08
 8001f40:	40004800 	.word	0x40004800

08001f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0b0      	sub	sp, #192	@ 0xc0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f60:	2284      	movs	r2, #132	@ 0x84
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f01f fc6b 	bl	8021840 <memset>
  if(uartHandle->Instance==UART4)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4ab0      	ldr	r2, [pc, #704]	@ (8002230 <HAL_UART_MspInit+0x2ec>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d173      	bne.n	800205c <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f82:	4618      	mov	r0, r3
 8001f84:	f006 f9f0 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f8e:	f7ff f9f7 	bl	8001380 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f92:	4ba8      	ldr	r3, [pc, #672]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4aa7      	ldr	r2, [pc, #668]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8001f98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4ba5      	ldr	r3, [pc, #660]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001faa:	4ba2      	ldr	r3, [pc, #648]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4aa1      	ldr	r2, [pc, #644]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb6:	4b9f      	ldr	r3, [pc, #636]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fc2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4893      	ldr	r0, [pc, #588]	@ (8002238 <HAL_UART_MspInit+0x2f4>)
 8001fea:	f003 f8c1 	bl	8005170 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001fee:	4b93      	ldr	r3, [pc, #588]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8001ff0:	4a93      	ldr	r2, [pc, #588]	@ (8002240 <HAL_UART_MspInit+0x2fc>)
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ff4:	4b91      	ldr	r3, [pc, #580]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8001ff6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ffa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002002:	4b8e      	ldr	r3, [pc, #568]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002008:	4b8c      	ldr	r3, [pc, #560]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 800200a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800200e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002010:	4b8a      	ldr	r3, [pc, #552]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002016:	4b89      	ldr	r3, [pc, #548]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800201c:	4b87      	ldr	r3, [pc, #540]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002022:	4b86      	ldr	r3, [pc, #536]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002028:	4b84      	ldr	r3, [pc, #528]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800202e:	4883      	ldr	r0, [pc, #524]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8002030:	f001 fa04 	bl	800343c <HAL_DMA_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800203a:	f7ff f9a1 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a7e      	ldr	r2, [pc, #504]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8002042:	675a      	str	r2, [r3, #116]	@ 0x74
 8002044:	4a7d      	ldr	r2, [pc, #500]	@ (800223c <HAL_UART_MspInit+0x2f8>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2105      	movs	r1, #5
 800204e:	2034      	movs	r0, #52	@ 0x34
 8002050:	f000 ffc0 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002054:	2034      	movs	r0, #52	@ 0x34
 8002056:	f000 ffd9 	bl	800300c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800205a:	e0e4      	b.n	8002226 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a78      	ldr	r2, [pc, #480]	@ (8002244 <HAL_UART_MspInit+0x300>)
 8002062:	4293      	cmp	r3, r2
 8002064:	f040 8095 	bne.w	8002192 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002068:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800206e:	2300      	movs	r3, #0
 8002070:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002076:	4618      	mov	r0, r3
 8002078:	f006 f976 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8002082:	f7ff f97d 	bl	8001380 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002086:	4b6b      	ldr	r3, [pc, #428]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a6a      	ldr	r2, [pc, #424]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 800208c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	4b65      	ldr	r3, [pc, #404]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a64      	ldr	r2, [pc, #400]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b62      	ldr	r3, [pc, #392]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020e8:	2308      	movs	r3, #8
 80020ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020f2:	4619      	mov	r1, r3
 80020f4:	4850      	ldr	r0, [pc, #320]	@ (8002238 <HAL_UART_MspInit+0x2f4>)
 80020f6:	f003 f83b 	bl	8005170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020fa:	2304      	movs	r3, #4
 80020fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002112:	2308      	movs	r3, #8
 8002114:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002118:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800211c:	4619      	mov	r1, r3
 800211e:	484a      	ldr	r0, [pc, #296]	@ (8002248 <HAL_UART_MspInit+0x304>)
 8002120:	f003 f826 	bl	8005170 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002124:	4b49      	ldr	r3, [pc, #292]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002126:	4a4a      	ldr	r2, [pc, #296]	@ (8002250 <HAL_UART_MspInit+0x30c>)
 8002128:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800212a:	4b48      	ldr	r3, [pc, #288]	@ (800224c <HAL_UART_MspInit+0x308>)
 800212c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002130:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002132:	4b46      	ldr	r3, [pc, #280]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002138:	4b44      	ldr	r3, [pc, #272]	@ (800224c <HAL_UART_MspInit+0x308>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800213e:	4b43      	ldr	r3, [pc, #268]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002140:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002144:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002146:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214c:	4b3f      	ldr	r3, [pc, #252]	@ (800224c <HAL_UART_MspInit+0x308>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002152:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002158:	4b3c      	ldr	r3, [pc, #240]	@ (800224c <HAL_UART_MspInit+0x308>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215e:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002160:	2200      	movs	r2, #0
 8002162:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002164:	4839      	ldr	r0, [pc, #228]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002166:	f001 f969 	bl	800343c <HAL_DMA_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002170:	f7ff f906 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a35      	ldr	r2, [pc, #212]	@ (800224c <HAL_UART_MspInit+0x308>)
 8002178:	675a      	str	r2, [r3, #116]	@ 0x74
 800217a:	4a34      	ldr	r2, [pc, #208]	@ (800224c <HAL_UART_MspInit+0x308>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2105      	movs	r1, #5
 8002184:	2035      	movs	r0, #53	@ 0x35
 8002186:	f000 ff25 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800218a:	2035      	movs	r0, #53	@ 0x35
 800218c:	f000 ff3e 	bl	800300c <HAL_NVIC_EnableIRQ>
}
 8002190:	e049      	b.n	8002226 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2f      	ldr	r2, [pc, #188]	@ (8002254 <HAL_UART_MspInit+0x310>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d144      	bne.n	8002226 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800219c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021aa:	4618      	mov	r0, r3
 80021ac:	f006 f8dc 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_UART_MspInit+0x276>
      Error_Handler();
 80021b6:	f7ff f8e3 	bl	8001380 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a17      	ldr	r2, [pc, #92]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_UART_MspInit+0x2f0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002204:	2307      	movs	r3, #7
 8002206:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800220e:	4619      	mov	r1, r3
 8002210:	480d      	ldr	r0, [pc, #52]	@ (8002248 <HAL_UART_MspInit+0x304>)
 8002212:	f002 ffad 	bl	8005170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2105      	movs	r1, #5
 800221a:	2027      	movs	r0, #39	@ 0x27
 800221c:	f000 feda 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002220:	2027      	movs	r0, #39	@ 0x27
 8002222:	f000 fef3 	bl	800300c <HAL_NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	37c0      	adds	r7, #192	@ 0xc0
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40004c00 	.word	0x40004c00
 8002234:	40023800 	.word	0x40023800
 8002238:	40020800 	.word	0x40020800
 800223c:	20000a90 	.word	0x20000a90
 8002240:	40026040 	.word	0x40026040
 8002244:	40005000 	.word	0x40005000
 8002248:	40020c00 	.word	0x40020c00
 800224c:	20000af0 	.word	0x20000af0
 8002250:	40026010 	.word	0x40026010
 8002254:	40004800 	.word	0x40004800

08002258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002290 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800225c:	f7ff fce0 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002260:	480c      	ldr	r0, [pc, #48]	@ (8002294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002262:	490d      	ldr	r1, [pc, #52]	@ (8002298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002278:	4c0a      	ldr	r4, [pc, #40]	@ (80022a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002286:	f01f fb29 	bl	80218dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228a:	f7fe ffd3 	bl	8001234 <main>
  bx  lr    
 800228e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002290:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800229c:	08027510 	.word	0x08027510
  ldr r2, =_sbss
 80022a0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80022a4:	2002d950 	.word	0x2002d950

080022a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC_IRQHandler>

080022aa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <LAN8742_RegisterBusIO+0x28>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <LAN8742_RegisterBusIO+0x28>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <LAN8742_RegisterBusIO+0x28>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022d6:	e014      	b.n	8002302 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d139      	bne.n	800239e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e01c      	b.n	800237e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f107 020c 	add.w	r2, r7, #12
 800234c:	2112      	movs	r1, #18
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	4798      	blx	r3
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	da03      	bge.n	8002360 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002358:	f06f 0304 	mvn.w	r3, #4
 800235c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800235e:	e00b      	b.n	8002378 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	d105      	bne.n	8002378 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
         break;
 8002376:	e005      	b.n	8002384 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b1f      	cmp	r3, #31
 8002382:	d9df      	bls.n	8002344 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b1f      	cmp	r3, #31
 800238a:	d902      	bls.n	8002392 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800238c:	f06f 0302 	mvn.w	r3, #2
 8002390:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800239e:	693b      	ldr	r3, [r7, #16]
 }
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6810      	ldr	r0, [r2, #0]
 80023bc:	f107 020c 	add.w	r2, r7, #12
 80023c0:	2101      	movs	r1, #1
 80023c2:	4798      	blx	r3
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da02      	bge.n	80023d0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023ca:	f06f 0304 	mvn.w	r3, #4
 80023ce:	e06e      	b.n	80024ae <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6810      	ldr	r0, [r2, #0]
 80023d8:	f107 020c 	add.w	r2, r7, #12
 80023dc:	2101      	movs	r1, #1
 80023de:	4798      	blx	r3
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da02      	bge.n	80023ec <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023e6:	f06f 0304 	mvn.w	r3, #4
 80023ea:	e060      	b.n	80024ae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e059      	b.n	80024ae <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6810      	ldr	r0, [r2, #0]
 8002402:	f107 020c 	add.w	r2, r7, #12
 8002406:	2100      	movs	r1, #0
 8002408:	4798      	blx	r3
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	da02      	bge.n	8002416 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002410:	f06f 0304 	mvn.w	r3, #4
 8002414:	e04b      	b.n	80024ae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11b      	bne.n	8002458 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <LAN8742_GetLinkState+0x90>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002434:	2302      	movs	r3, #2
 8002436:	e03a      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002442:	2303      	movs	r3, #3
 8002444:	e033      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002450:	2304      	movs	r3, #4
 8002452:	e02c      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002454:	2305      	movs	r3, #5
 8002456:	e02a      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6810      	ldr	r0, [r2, #0]
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	211f      	movs	r1, #31
 8002466:	4798      	blx	r3
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	da02      	bge.n	8002474 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800246e:	f06f 0304 	mvn.w	r3, #4
 8002472:	e01c      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800247e:	2306      	movs	r3, #6
 8002480:	e015      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 031c 	and.w	r3, r3, #28
 8002488:	2b18      	cmp	r3, #24
 800248a:	d101      	bne.n	8002490 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 031c 	and.w	r3, r3, #28
 8002496:	2b08      	cmp	r3, #8
 8002498:	d101      	bne.n	800249e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800249a:	2303      	movs	r3, #3
 800249c:	e007      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 031c 	and.w	r3, r3, #28
 80024a4:	2b14      	cmp	r3, #20
 80024a6:	d101      	bne.n	80024ac <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024a8:	2304      	movs	r3, #4
 80024aa:	e000      	b.n	80024ae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024ac:	2305      	movs	r3, #5
    }
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f000 fd7f 	bl	8002fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c0:	200f      	movs	r0, #15
 80024c2:	f7ff f96f 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c6:	f7ff f945 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000b50 	.word	0x20000b50

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000b50 	.word	0x20000b50

08002510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff ffee 	bl	80024f8 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_Delay+0x44>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffde 	bl	80024f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8f7      	bhi.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008

08002558 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e031      	b.n	80025d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe f882 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259a:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <HAL_ADC_Init+0x84>)
 800259c:	4013      	ands	r3, r2
 800259e:	f043 0202 	orr.w	r2, r3, #2
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fae0 	bl	8002b6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025c2:	e001      	b.n	80025c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	ffffeefd 	.word	0xffffeefd

080025e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Start_DMA+0x22>
 80025fe:	2302      	movs	r3, #2
 8002600:	e0d6      	b.n	80027b0 <HAL_ADC_Start_DMA+0x1d0>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d018      	beq.n	800264a <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002628:	4b63      	ldr	r3, [pc, #396]	@ (80027b8 <HAL_ADC_Start_DMA+0x1d8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a63      	ldr	r2, [pc, #396]	@ (80027bc <HAL_ADC_Start_DMA+0x1dc>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0c9a      	lsrs	r2, r3, #18
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 800263c:	e002      	b.n	8002644 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3b01      	subs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	f040 809e 	bne.w	8002796 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800265e:	4b58      	ldr	r3, [pc, #352]	@ (80027c0 <HAL_ADC_Start_DMA+0x1e0>)
 8002660:	4013      	ands	r3, r2
 8002662:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002680:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002694:	d106      	bne.n	80026a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f023 0206 	bic.w	r2, r3, #6
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80026a2:	e002      	b.n	80026aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	4a43      	ldr	r2, [pc, #268]	@ (80027c4 <HAL_ADC_Start_DMA+0x1e4>)
 80026b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	4a42      	ldr	r2, [pc, #264]	@ (80027c8 <HAL_ADC_Start_DMA+0x1e8>)
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c6:	4a41      	ldr	r2, [pc, #260]	@ (80027cc <HAL_ADC_Start_DMA+0x1ec>)
 80026c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	334c      	adds	r3, #76	@ 0x4c
 80026fe:	4619      	mov	r1, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f000 ff48 	bl	8003598 <HAL_DMA_Start_IT>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800270c:	4b30      	ldr	r3, [pc, #192]	@ (80027d0 <HAL_ADC_Start_DMA+0x1f0>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d143      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	e03a      	b.n	80027ae <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a25      	ldr	r2, [pc, #148]	@ (80027d4 <HAL_ADC_Start_DMA+0x1f4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10e      	bne.n	8002760 <HAL_ADC_Start_DMA+0x180>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800275e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_ADC_Start_DMA+0x1f0>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d120      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a19      	ldr	r2, [pc, #100]	@ (80027d8 <HAL_ADC_Start_DMA+0x1f8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d11b      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1ce>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d114      	bne.n	80027ae <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e00b      	b.n	80027ae <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000000 	.word	0x20000000
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	fffff8fe 	.word	0xfffff8fe
 80027c4:	08002d61 	.word	0x08002d61
 80027c8:	08002e1b 	.word	0x08002e1b
 80027cc:	08002e37 	.word	0x08002e37
 80027d0:	40012300 	.word	0x40012300
 80027d4:	40012000 	.word	0x40012000
 80027d8:	40012200 	.word	0x40012200

080027dc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Stop_DMA+0x1a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e046      	b.n	8002884 <HAL_ADC_Stop_DMA+0xa8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d12e      	bne.n	800287a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800282a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d10f      	bne.n	800285a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	4618      	mov	r0, r3
 8002840:	f000 ff0a 	bl	8003658 <HAL_DMA_Abort>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002868:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <HAL_ADC_Stop_DMA+0xb0>)
 8002870:	4013      	ands	r3, r2
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	ffffeefe 	.word	0xffffeefe

08002890 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1c>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e13a      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x292>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d93a      	bls.n	800295a <HAL_ADC_ConfigChannel+0xa2>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028ec:	d035      	beq.n	800295a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68d9      	ldr	r1, [r3, #12]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	3b1e      	subs	r3, #30
 8002904:	2207      	movs	r2, #7
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	400a      	ands	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a8f      	ldr	r2, [pc, #572]	@ (8002b58 <HAL_ADC_ConfigChannel+0x2a0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68d9      	ldr	r1, [r3, #12]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	061a      	lsls	r2, r3, #24
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002932:	e039      	b.n	80029a8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	4603      	mov	r3, r0
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4403      	add	r3, r0
 800294c:	3b1e      	subs	r3, #30
 800294e:	409a      	lsls	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002958:	e026      	b.n	80029a8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6919      	ldr	r1, [r3, #16]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2207      	movs	r2, #7
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43da      	mvns	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	400a      	ands	r2, r1
 8002980:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6919      	ldr	r1, [r3, #16]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4618      	mov	r0, r3
 8002994:	4603      	mov	r3, r0
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4403      	add	r3, r0
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	409a      	lsls	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d824      	bhi.n	80029fa <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	3b05      	subs	r3, #5
 80029c2:	221f      	movs	r2, #31
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43da      	mvns	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	400a      	ands	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	3b05      	subs	r3, #5
 80029ec:	fa00 f203 	lsl.w	r2, r0, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80029f8:	e04c      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d824      	bhi.n	8002a4c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	3b23      	subs	r3, #35	@ 0x23
 8002a14:	221f      	movs	r2, #31
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	400a      	ands	r2, r1
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b23      	subs	r3, #35	@ 0x23
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a4a:	e023      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b41      	subs	r3, #65	@ 0x41
 8002a5e:	221f      	movs	r2, #31
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43da      	mvns	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b41      	subs	r3, #65	@ 0x41
 8002a88:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a30      	ldr	r2, [pc, #192]	@ (8002b5c <HAL_ADC_ConfigChannel+0x2a4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1fc>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a2c      	ldr	r2, [pc, #176]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002aae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002ab2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	@ (8002b5c <HAL_ADC_ConfigChannel+0x2a4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10f      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x226>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b12      	cmp	r3, #18
 8002ac4:	d10b      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ac6:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a25      	ldr	r2, [pc, #148]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002acc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ad0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ad2:	4b23      	ldr	r3, [pc, #140]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002adc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <HAL_ADC_ConfigChannel+0x2a4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d12b      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x288>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1a      	ldr	r2, [pc, #104]	@ (8002b58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <HAL_ADC_ConfigChannel+0x242>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b11      	cmp	r3, #17
 8002af8:	d122      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002afa:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a18      	ldr	r2, [pc, #96]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b00:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002b04:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a15      	ldr	r2, [pc, #84]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2a8>)
 8002b0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b10:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d111      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_ADC_ConfigChannel+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_ADC_ConfigChannel+0x2b0>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9a      	lsrs	r2, r3, #18
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b32:	e002      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	10000012 	.word	0x10000012
 8002b5c:	40012000 	.word	0x40012000
 8002b60:	40012300 	.word	0x40012300
 8002b64:	20000000 	.word	0x20000000
 8002b68:	431bde83 	.word	0x431bde83

08002b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b74:	4b78      	ldr	r3, [pc, #480]	@ (8002d58 <ADC_Init+0x1ec>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a77      	ldr	r2, [pc, #476]	@ (8002d58 <ADC_Init+0x1ec>)
 8002b7a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002b7e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b80:	4b75      	ldr	r3, [pc, #468]	@ (8002d58 <ADC_Init+0x1ec>)
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4973      	ldr	r1, [pc, #460]	@ (8002d58 <ADC_Init+0x1ec>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	4a58      	ldr	r2, [pc, #352]	@ (8002d5c <ADC_Init+0x1f0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	e00f      	b.n	8002c66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0202 	bic.w	r2, r2, #2
 8002c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6899      	ldr	r1, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	005a      	lsls	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ca2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	035a      	lsls	r2, r3, #13
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e007      	b.n	8002cdc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	051a      	lsls	r2, r3, #20
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d1e:	025a      	lsls	r2, r3, #9
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6899      	ldr	r1, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	029a      	lsls	r2, r3, #10
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40012300 	.word	0x40012300
 8002d5c:	0f000001 	.word	0x0f000001

08002d60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d13c      	bne.n	8002df4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d12b      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d127      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d119      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0220 	bic.w	r2, r2, #32
 8002dc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f01d fae9 	bl	80203c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002df2:	e00e      	b.n	8002e12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff fd4f 	bl	80028a4 <HAL_ADC_ErrorCallback>
}
 8002e06:	e004      	b.n	8002e12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff fd31 	bl	8002890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2240      	movs	r2, #64	@ 0x40
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fd24 	bl	80028a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <__NVIC_SetPriorityGrouping+0x40>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	@ (8002ea4 <__NVIC_SetPriorityGrouping+0x40>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	05fa0000 	.word	0x05fa0000

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	@ (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	@ (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff4c 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe6:	f7ff ff61 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8002fea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	6978      	ldr	r0, [r7, #20]
 8002ff2:	f7ff ffb1 	bl	8002f58 <NVIC_EncodePriority>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff80 	bl	8002f04 <__NVIC_SetPriority>
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff54 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e054      	b.n	80030e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7f5b      	ldrb	r3, [r3, #29]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd fbac 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	791b      	ldrb	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <HAL_CRC_Init+0xc4>)
 8003064:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0218 	bic.w	r2, r2, #24
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	e00c      	b.n	8003092 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	461a      	mov	r2, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f94c 	bl	8003320 <HAL_CRCEx_Polynomial_Set>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e028      	b.n	80030e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	795b      	ldrb	r3, [r3, #5]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030a2:	611a      	str	r2, [r3, #16]
 80030a4:	e004      	b.n	80030b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6912      	ldr	r2, [r2, #16]
 80030ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	04c11db7 	.word	0x04c11db7

080030f0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2202      	movs	r2, #2
 8003104:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d006      	beq.n	800312c <HAL_CRC_Calculate+0x3c>
 800311e:	2b03      	cmp	r3, #3
 8003120:	d829      	bhi.n	8003176 <HAL_CRC_Calculate+0x86>
 8003122:	2b01      	cmp	r3, #1
 8003124:	d019      	beq.n	800315a <HAL_CRC_Calculate+0x6a>
 8003126:	2b02      	cmp	r3, #2
 8003128:	d01e      	beq.n	8003168 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800312a:	e024      	b.n	8003176 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e00a      	b.n	8003148 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	441a      	add	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3f0      	bcc.n	8003132 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
      break;
 8003158:	e00e      	b.n	8003178 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f812 	bl	8003188 <CRC_Handle_8>
 8003164:	6138      	str	r0, [r7, #16]
      break;
 8003166:	e007      	b.n	8003178 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f89d 	bl	80032ac <CRC_Handle_16>
 8003172:	6138      	str	r0, [r7, #16]
      break;
 8003174:	e000      	b.n	8003178 <HAL_CRC_Calculate+0x88>
      break;
 8003176:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800317e:	693b      	ldr	r3, [r7, #16]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e023      	b.n	80031e2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	3301      	adds	r3, #1
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	440b      	add	r3, r1
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80031b4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	440b      	add	r3, r1
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80031c4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3303      	adds	r3, #3
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	440b      	add	r3, r1
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80031d8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80031da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3301      	adds	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3d6      	bcc.n	800319a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d051      	beq.n	800329a <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d108      	bne.n	8003212 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	4413      	add	r3, r2
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	7013      	strb	r3, [r2, #0]
 8003210:	e043      	b.n	800329a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d118      	bne.n	800324e <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b21b      	sxth	r3, r3
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	b21a      	sxth	r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	3301      	adds	r3, #1
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	440b      	add	r3, r1
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b21b      	sxth	r3, r3
 800323a:	4313      	orrs	r3, r2
 800323c:	b21b      	sxth	r3, r3
 800323e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	8b7a      	ldrh	r2, [r7, #26]
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	e025      	b.n	800329a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d120      	bne.n	800329a <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	b21b      	sxth	r3, r3
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	b21a      	sxth	r2, r3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3301      	adds	r3, #1
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	440b      	add	r3, r1
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b21b      	sxth	r3, r3
 8003276:	4313      	orrs	r3, r2
 8003278:	b21b      	sxth	r3, r3
 800327a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	8b7a      	ldrh	r2, [r7, #26]
 8003286:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4413      	add	r3, r2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3724      	adds	r7, #36	@ 0x24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e013      	b.n	80032e6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	4413      	add	r3, r2
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	041a      	lsls	r2, r3, #16
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	440b      	add	r3, r1
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	4619      	mov	r1, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d3e6      	bcc.n	80032be <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	4413      	add	r3, r2
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003330:	231f      	movs	r3, #31
 8003332:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
 8003342:	e063      	b.n	800340c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003344:	bf00      	nop
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1e5a      	subs	r2, r3, #1
 800334a:	613a      	str	r2, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <HAL_CRCEx_Polynomial_Set+0x44>
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b18      	cmp	r3, #24
 8003368:	d846      	bhi.n	80033f8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800336a:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <HAL_CRCEx_Polynomial_Set+0x50>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	080033ff 	.word	0x080033ff
 8003374:	080033f9 	.word	0x080033f9
 8003378:	080033f9 	.word	0x080033f9
 800337c:	080033f9 	.word	0x080033f9
 8003380:	080033f9 	.word	0x080033f9
 8003384:	080033f9 	.word	0x080033f9
 8003388:	080033f9 	.word	0x080033f9
 800338c:	080033f9 	.word	0x080033f9
 8003390:	080033ed 	.word	0x080033ed
 8003394:	080033f9 	.word	0x080033f9
 8003398:	080033f9 	.word	0x080033f9
 800339c:	080033f9 	.word	0x080033f9
 80033a0:	080033f9 	.word	0x080033f9
 80033a4:	080033f9 	.word	0x080033f9
 80033a8:	080033f9 	.word	0x080033f9
 80033ac:	080033f9 	.word	0x080033f9
 80033b0:	080033e1 	.word	0x080033e1
 80033b4:	080033f9 	.word	0x080033f9
 80033b8:	080033f9 	.word	0x080033f9
 80033bc:	080033f9 	.word	0x080033f9
 80033c0:	080033f9 	.word	0x080033f9
 80033c4:	080033f9 	.word	0x080033f9
 80033c8:	080033f9 	.word	0x080033f9
 80033cc:	080033f9 	.word	0x080033f9
 80033d0:	080033d5 	.word	0x080033d5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d913      	bls.n	8003402 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033de:	e010      	b.n	8003402 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	d90f      	bls.n	8003406 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033ea:	e00c      	b.n	8003406 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d90b      	bls.n	800340a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033f6:	e008      	b.n	800340a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75fb      	strb	r3, [r7, #23]
        break;
 80033fc:	e006      	b.n	800340c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033fe:	bf00      	nop
 8003400:	e004      	b.n	800340c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800340a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10d      	bne.n	800342e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 0118 	bic.w	r1, r3, #24
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7ff f856 	bl	80024f8 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e099      	b.n	800358c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003478:	e00f      	b.n	800349a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800347a:	f7ff f83d 	bl	80024f8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b05      	cmp	r3, #5
 8003486:	d908      	bls.n	800349a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2203      	movs	r2, #3
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e078      	b.n	800358c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e8      	bne.n	800347a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4b38      	ldr	r3, [pc, #224]	@ (8003594 <HAL_DMA_Init+0x158>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d107      	bne.n	8003504 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	4313      	orrs	r3, r2
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f023 0307 	bic.w	r3, r3, #7
 800351a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	2b04      	cmp	r3, #4
 800352c:	d117      	bne.n	800355e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fb23 	bl	8003b8c <DMA_CheckFifoParam>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2240      	movs	r2, #64	@ 0x40
 8003550:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800355a:	2301      	movs	r3, #1
 800355c:	e016      	b.n	800358c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fada 	bl	8003b20 <DMA_CalcBaseAndBitshift>
 800356c:	4603      	mov	r3, r0
 800356e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	223f      	movs	r2, #63	@ 0x3f
 8003576:	409a      	lsls	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	f010803f 	.word	0xf010803f

08003598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_DMA_Start_IT+0x26>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e048      	b.n	8003650 <HAL_DMA_Start_IT+0xb8>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d137      	bne.n	8003642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fa6c 	bl	8003ac4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	223f      	movs	r2, #63	@ 0x3f
 80035f2:	409a      	lsls	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0216 	orr.w	r2, r2, #22
 8003606:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003616:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e005      	b.n	800364e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800364a:	2302      	movs	r3, #2
 800364c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003666:	f7fe ff47 	bl	80024f8 <HAL_GetTick>
 800366a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d008      	beq.n	800368a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2280      	movs	r2, #128	@ 0x80
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e052      	b.n	8003730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0216 	bic.w	r2, r2, #22
 8003698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_DMA_Abort+0x62>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036da:	e013      	b.n	8003704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036dc:	f7fe ff0c 	bl	80024f8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d90c      	bls.n	8003704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2203      	movs	r2, #3
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e015      	b.n	8003730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e4      	bne.n	80036dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	223f      	movs	r2, #63	@ 0x3f
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	@ 0x80
 8003750:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e00c      	b.n	8003770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2205      	movs	r2, #5
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003788:	4b8e      	ldr	r3, [pc, #568]	@ (80039c4 <HAL_DMA_IRQHandler+0x248>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a8e      	ldr	r2, [pc, #568]	@ (80039c8 <HAL_DMA_IRQHandler+0x24c>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2208      	movs	r2, #8
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0204 	bic.w	r2, r2, #4
 80037ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	2208      	movs	r2, #8
 80037d6:	409a      	lsls	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	f043 0202 	orr.w	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	2204      	movs	r2, #4
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d012      	beq.n	8003854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	2204      	movs	r2, #4
 8003842:	409a      	lsls	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	2210      	movs	r2, #16
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d043      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d03c      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003876:	2210      	movs	r2, #16
 8003878:	409a      	lsls	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d018      	beq.n	80038be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d024      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	e01f      	b.n	80038ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01b      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e016      	b.n	80038ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0208 	bic.w	r2, r2, #8
 80038da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	2220      	movs	r2, #32
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 808f 	beq.w	8003a1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8087 	beq.w	8003a1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	2220      	movs	r2, #32
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b05      	cmp	r3, #5
 8003924:	d136      	bne.n	8003994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0216 	bic.w	r2, r2, #22
 8003934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_DMA_IRQHandler+0x1da>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0208 	bic.w	r2, r2, #8
 8003964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	223f      	movs	r2, #63	@ 0x3f
 800396c:	409a      	lsls	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003986:	2b00      	cmp	r3, #0
 8003988:	d07e      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
        }
        return;
 8003992:	e079      	b.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
 80039c0:	e02c      	b.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
 80039c2:	bf00      	nop
 80039c4:	20000000 	.word	0x20000000
 80039c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d023      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
 80039dc:	e01e      	b.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0210 	bic.w	r2, r2, #16
 80039fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d032      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2205      	movs	r2, #5
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d307      	bcc.n	8003a64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f2      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x2cc>
 8003a62:	e000      	b.n	8003a66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e000      	b.n	8003a8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a88:	bf00      	nop
    }
  }
}
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a9e:	b2db      	uxtb	r3, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d108      	bne.n	8003b04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b02:	e007      	b.n	8003b14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	3b10      	subs	r3, #16
 8003b30:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <DMA_CalcBaseAndBitshift+0x60>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b3a:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <DMA_CalcBaseAndBitshift+0x64>)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d908      	bls.n	8003b60 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <DMA_CalcBaseAndBitshift+0x68>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b5e:	e006      	b.n	8003b6e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <DMA_CalcBaseAndBitshift+0x68>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	aaaaaaab 	.word	0xaaaaaaab
 8003b84:	08027278 	.word	0x08027278
 8003b88:	fffffc00 	.word	0xfffffc00

08003b8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11f      	bne.n	8003be6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d856      	bhi.n	8003c5a <DMA_CheckFifoParam+0xce>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <DMA_CheckFifoParam+0x28>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bd7 	.word	0x08003bd7
 8003bbc:	08003bc5 	.word	0x08003bc5
 8003bc0:	08003c5b 	.word	0x08003c5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d046      	beq.n	8003c5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd4:	e043      	b.n	8003c5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bde:	d140      	bne.n	8003c62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be4:	e03d      	b.n	8003c62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bee:	d121      	bne.n	8003c34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d837      	bhi.n	8003c66 <DMA_CheckFifoParam+0xda>
 8003bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <DMA_CheckFifoParam+0x70>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c13 	.word	0x08003c13
 8003c04:	08003c0d 	.word	0x08003c0d
 8003c08:	08003c25 	.word	0x08003c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e030      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d025      	beq.n	8003c6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c22:	e022      	b.n	8003c6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c2c:	d11f      	bne.n	8003c6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c32:	e01c      	b.n	8003c6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d903      	bls.n	8003c42 <DMA_CheckFifoParam+0xb6>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d003      	beq.n	8003c48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c40:	e018      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      break;
 8003c46:	e015      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e00b      	b.n	8003c72 <DMA_CheckFifoParam+0xe6>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e00a      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e008      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e006      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
      break;
 8003c72:	bf00      	nop
    }
  } 
  
  return status; 
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop

08003c84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e086      	b.n	8003da4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f008 fd3d 	bl	800c728 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cae:	4b3f      	ldr	r3, [pc, #252]	@ (8003dac <HAL_ETH_Init+0x128>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dac <HAL_ETH_Init+0x128>)
 8003cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cba:	4b3c      	ldr	r3, [pc, #240]	@ (8003dac <HAL_ETH_Init+0x128>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8003db0 <HAL_ETH_Init+0x12c>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4a39      	ldr	r2, [pc, #228]	@ (8003db0 <HAL_ETH_Init+0x12c>)
 8003ccc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cd0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003cd2:	4b37      	ldr	r3, [pc, #220]	@ (8003db0 <HAL_ETH_Init+0x12c>)
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4935      	ldr	r1, [pc, #212]	@ (8003db0 <HAL_ETH_Init+0x12c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003ce0:	4b33      	ldr	r3, [pc, #204]	@ (8003db0 <HAL_ETH_Init+0x12c>)
 8003ce2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cfc:	f7fe fbfc 	bl	80024f8 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d02:	e011      	b.n	8003d28 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d04:	f7fe fbf8 	bl	80024f8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003d12:	d909      	bls.n	8003d28 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	22e0      	movs	r2, #224	@ 0xe0
 8003d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e03d      	b.n	8003da4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e4      	bne.n	8003d04 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 ff5c 	bl	8004bf8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f001 f807 	bl	8004d54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f001 f85d 	bl	8004e06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	461a      	mov	r2, r3
 8003d52:	2100      	movs	r1, #0
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 ffc5 	bl	8004ce4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003d68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b0f      	ldr	r3, [pc, #60]	@ (8003db4 <HAL_ETH_Init+0x130>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003d8e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40013800 	.word	0x40013800
 8003db4:	00020060 	.word	0x00020060

08003db8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d15f      	bne.n	8003e8a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f9f6 	bl	80041d0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7fe fb8f 	bl	8002510 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e10:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e28:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fd80 	bl	8004930 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0208 	orr.w	r2, r2, #8
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f7fe fb61 	bl	8002510 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0204 	orr.w	r2, r2, #4
 8003e64:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b07      	ldr	r3, [pc, #28]	@ (8003e94 <HAL_ETH_Start_IT+0xdc>)
 8003e76:	430b      	orrs	r3, r1
 8003e78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e7c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2240      	movs	r2, #64	@ 0x40
 8003e82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	0001a0c1 	.word	0x0001a0c1

08003e98 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea6:	2b40      	cmp	r3, #64	@ 0x40
 8003ea8:	d16e      	bne.n	8003f88 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <HAL_ETH_Stop_IT+0xfc>)
 8003ec2:	400b      	ands	r3, r1
 8003ec4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ec8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003edc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ee0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	f023 0302 	bic.w	r3, r3, #2
 8003ef4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ef8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0204 	bic.w	r2, r2, #4
 8003f08:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f12:	2001      	movs	r0, #1
 8003f14:	f7fe fafc 	bl	8002510 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fd05 	bl	8004930 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0208 	bic.w	r2, r2, #8
 8003f34:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f3e:	2001      	movs	r0, #1
 8003f40:	f7fe fae6 	bl	8002510 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e00e      	b.n	8003f70 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	3212      	adds	r2, #18
 8003f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f5c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d9ed      	bls.n	8003f52 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
  }
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	fffe5f3e 	.word	0xfffe5f3e

08003f98 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e045      	b.n	8004048 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc2:	2b40      	cmp	r3, #64	@ 0x40
 8003fc4:	d13f      	bne.n	8004046 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 ff86 	bl	8004ee4 <ETH_Prepare_Tx_Descriptors>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f043 0202 	orr.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e02a      	b.n	8004048 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ff2:	f3bf 8f4f 	dsb	sy
}
 8003ff6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	629a      	str	r2, [r3, #40]	@ 0x28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	2b03      	cmp	r3, #3
 8004008:	d904      	bls.n	8004014 <HAL_ETH_Transmit_IT+0x7c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400e:	1f1a      	subs	r2, r3, #4
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800402e:	461a      	mov	r2, r3
 8004030:	2304      	movs	r3, #4
 8004032:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800403c:	461a      	mov	r2, r3
 800403e:	2300      	movs	r3, #0
 8004040:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0a4      	b.n	80041c6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	2b40      	cmp	r3, #64	@ 0x40
 8004084:	d001      	beq.n	800408a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e09d      	b.n	80041c6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	3212      	adds	r2, #18
 8004096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a0:	f1c3 0304 	rsb	r3, r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040a6:	e066      	b.n	8004176 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <HAL_ETH_ReadData+0x88>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d03c      	beq.n	8004152 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80040fa:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004110:	2301      	movs	r3, #1
 8004112:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f008 fccd 	bl	800cad0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2200      	movs	r2, #0
 8004150:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3301      	adds	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d902      	bls.n	8004164 <HAL_ETH_ReadData+0x114>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3b04      	subs	r3, #4
 8004162:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	3212      	adds	r2, #18
 800416a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3301      	adds	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800417a:	2b00      	cmp	r3, #0
 800417c:	db06      	blt.n	800418c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	429a      	cmp	r2, r3
 8004184:	d202      	bcs.n	800418c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d08d      	beq.n	80040a8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	441a      	add	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f815 	bl	80041d0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d108      	bne.n	80041c4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e000      	b.n	80041c6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80041dc:	2301      	movs	r3, #1
 80041de:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	3212      	adds	r2, #18
 80041ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80041f8:	e042      	b.n	8004280 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d112      	bne.n	8004228 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004202:	f107 0308 	add.w	r3, r7, #8
 8004206:	4618      	mov	r0, r3
 8004208:	f008 fc32 	bl	800ca70 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	74fb      	strb	r3, [r7, #19]
 8004216:	e007      	b.n	8004228 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	461a      	mov	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	461a      	mov	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d028      	beq.n	8004280 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	4b26      	ldr	r3, [pc, #152]	@ (80042d4 <ETH_UpdateDescriptor+0x104>)
 800423c:	4313      	orrs	r3, r2
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	6053      	str	r3, [r2, #4]
 8004242:	e005      	b.n	8004250 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	3301      	adds	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d902      	bls.n	800426e <ETH_UpdateDescriptor+0x9e>
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	3b04      	subs	r3, #4
 800426c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	3212      	adds	r2, #18
 8004274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004278:	617b      	str	r3, [r7, #20]
      desccount--;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	3b01      	subs	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <ETH_UpdateDescriptor+0xbc>
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1b6      	bne.n	80041fa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	429a      	cmp	r2, r3
 8004294:	d01a      	beq.n	80042cc <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3303      	adds	r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80042a0:	f3bf 8f5f 	dmb	sy
}
 80042a4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	18ca      	adds	r2, r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042be:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80042cc:	bf00      	nop
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	80004000 	.word	0x80004000

080042d8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3318      	adds	r3, #24
 80042e4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042f6:	e047      	b.n	8004388 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3304      	adds	r3, #4
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3301      	adds	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d902      	bls.n	8004324 <HAL_ETH_ReleaseTxPacket+0x4c>
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	3b04      	subs	r3, #4
 8004322:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004328:	7bbb      	ldrb	r3, [r7, #14]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d02c      	beq.n	8004388 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	440b      	add	r3, r1
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	db1f      	blt.n	8004384 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3304      	adds	r3, #4
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	f008 fbff 	bl	800cb54 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	3304      	adds	r3, #4
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	2200      	movs	r2, #0
 8004362:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	3301      	adds	r3, #1
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d902      	bls.n	8004376 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3b04      	subs	r3, #4
 8004374:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004382:	e001      	b.n	8004388 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_ETH_ReleaseTxPacket+0xbc>
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1b1      	bne.n	80042f8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80043c8:	4b4b      	ldr	r3, [pc, #300]	@ (80044f8 <HAL_ETH_IRQHandler+0x158>)
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_ETH_IRQHandler+0x56>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b43      	ldr	r3, [pc, #268]	@ (80044fc <HAL_ETH_IRQHandler+0x15c>)
 80043ee:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f007 fed9 	bl	800c1a8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00f      	beq.n	8004420 <HAL_ETH_IRQHandler+0x80>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004412:	461a      	mov	r2, r3
 8004414:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004418:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f007 fed4 	bl	800c1c8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d042      	beq.n	80044b0 <HAL_ETH_IRQHandler+0x110>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d03d      	beq.n	80044b0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	f043 0208 	orr.w	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01a      	beq.n	8004484 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	4b29      	ldr	r3, [pc, #164]	@ (8004500 <HAL_ETH_IRQHandler+0x160>)
 800445a:	4013      	ands	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004474:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004478:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	22e0      	movs	r2, #224	@ 0xe0
 800447e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004482:	e012      	b.n	80044aa <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004492:	4013      	ands	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044a2:	461a      	mov	r2, r3
 80044a4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80044a8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f007 fe9c 	bl	800c1e8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f81a 	bl	8004504 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d006      	beq.n	80044f0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80044e2:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_ETH_IRQHandler+0x158>)
 80044e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044e8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f814 	bl	8004518 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40013c00 	.word	0x40013c00
 80044fc:	00010040 	.word	0x00010040
 8004500:	007e2000 	.word	0x007e2000

08004504 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 031c 	and.w	r3, r3, #28
 8004548:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	02db      	lsls	r3, r3, #11
 800454e:	b29b      	uxth	r3, r3
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0302 	bic.w	r3, r3, #2
 800456a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800457c:	f7fd ffbc 	bl	80024f8 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004582:	e00d      	b.n	80045a0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004584:	f7fd ffb8 	bl	80024f8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004592:	d301      	bcc.n	8004598 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e010      	b.n	80045ba <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ec      	bne.n	8004584 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 031c 	and.w	r3, r3, #28
 80045de:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	02db      	lsls	r3, r3, #11
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800461c:	f7fd ff6c 	bl	80024f8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004622:	e00d      	b.n	8004640 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004624:	f7fd ff68 	bl	80024f8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004632:	d301      	bcc.n	8004638 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e009      	b.n	800464c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ec      	bne.n	8004624 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0e6      	b.n	8004836 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf14      	ite	ne
 8004676:	2301      	movne	r3, #1
 8004678:	2300      	moveq	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	bf14      	ite	ne
 800475a:	2301      	movne	r3, #1
 800475c:	2300      	moveq	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e00b      	b.n	800486e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800485c:	2b10      	cmp	r3, #16
 800485e:	d105      	bne.n	800486c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f88a 	bl	800497c <ETH_SetMACConfig>

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 031c 	bic.w	r3, r3, #28
 800488e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004890:	f003 fd04 	bl	800829c <HAL_RCC_GetHCLKFreq>
 8004894:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a14      	ldr	r2, [pc, #80]	@ (80048ec <HAL_ETH_SetMDIOClockRange+0x74>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d804      	bhi.n	80048a8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e019      	b.n	80048dc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4a11      	ldr	r2, [pc, #68]	@ (80048f0 <HAL_ETH_SetMDIOClockRange+0x78>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d204      	bcs.n	80048ba <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f043 030c 	orr.w	r3, r3, #12
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e010      	b.n	80048dc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a0d      	ldr	r2, [pc, #52]	@ (80048f4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90c      	bls.n	80048dc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a0c      	ldr	r2, [pc, #48]	@ (80048f8 <HAL_ETH_SetMDIOClockRange+0x80>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d804      	bhi.n	80048d4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f043 0304 	orr.w	r3, r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e003      	b.n	80048dc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f043 0310 	orr.w	r3, r3, #16
 80048da:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	611a      	str	r2, [r3, #16]
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	02160ebf 	.word	0x02160ebf
 80048f0:	03938700 	.word	0x03938700
 80048f4:	05f5e0ff 	.word	0x05f5e0ff
 80048f8:	08f0d17f 	.word	0x08f0d17f

080048fc <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800494e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004952:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004960:	2001      	movs	r0, #1
 8004962:	f7fd fdd5 	bl	8002510 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004970:	6193      	str	r3, [r2, #24]
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4b53      	ldr	r3, [pc, #332]	@ (8004ae0 <ETH_SetMACConfig+0x164>)
 8004992:	4013      	ands	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	7b9b      	ldrb	r3, [r3, #14]
 800499a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	7c12      	ldrb	r2, [r2, #16]
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d102      	bne.n	80049aa <ETH_SetMACConfig+0x2e>
 80049a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049a8:	e000      	b.n	80049ac <ETH_SetMACConfig+0x30>
 80049aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80049ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	7c52      	ldrb	r2, [r2, #17]
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d102      	bne.n	80049bc <ETH_SetMACConfig+0x40>
 80049b6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80049ba:	e000      	b.n	80049be <ETH_SetMACConfig+0x42>
 80049bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80049c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	7fdb      	ldrb	r3, [r3, #31]
 80049ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80049cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	7f92      	ldrb	r2, [r2, #30]
 80049d8:	2a00      	cmp	r2, #0
 80049da:	d102      	bne.n	80049e2 <ETH_SetMACConfig+0x66>
 80049dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049e0:	e000      	b.n	80049e4 <ETH_SetMACConfig+0x68>
 80049e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80049e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	7f1b      	ldrb	r3, [r3, #28]
 80049ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	791b      	ldrb	r3, [r3, #4]
 80049f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80049fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a02:	2a00      	cmp	r2, #0
 8004a04:	d102      	bne.n	8004a0c <ETH_SetMACConfig+0x90>
 8004a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a0a:	e000      	b.n	8004a0e <ETH_SetMACConfig+0x92>
 8004a0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004a0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	7bdb      	ldrb	r3, [r3, #15]
 8004a14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004a16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004a1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004a26:	4313      	orrs	r3, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f7fd fd66 	bl	8002510 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	d101      	bne.n	8004a72 <ETH_SetMACConfig+0xf6>
 8004a6e:	2280      	movs	r2, #128	@ 0x80
 8004a70:	e000      	b.n	8004a74 <ETH_SetMACConfig+0xf8>
 8004a72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004a82:	2a01      	cmp	r2, #1
 8004a84:	d101      	bne.n	8004a8a <ETH_SetMACConfig+0x10e>
 8004a86:	2208      	movs	r2, #8
 8004a88:	e000      	b.n	8004a8c <ETH_SetMACConfig+0x110>
 8004a8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004a94:	2a01      	cmp	r2, #1
 8004a96:	d101      	bne.n	8004a9c <ETH_SetMACConfig+0x120>
 8004a98:	2204      	movs	r2, #4
 8004a9a:	e000      	b.n	8004a9e <ETH_SetMACConfig+0x122>
 8004a9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004aa6:	2a01      	cmp	r2, #1
 8004aa8:	d101      	bne.n	8004aae <ETH_SetMACConfig+0x132>
 8004aaa:	2202      	movs	r2, #2
 8004aac:	e000      	b.n	8004ab0 <ETH_SetMACConfig+0x134>
 8004aae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ac8:	2001      	movs	r0, #1
 8004aca:	f7fd fd21 	bl	8002510 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	619a      	str	r2, [r3, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	fd20810f 	.word	0xfd20810f

08004ae4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf4 <ETH_SetDMAConfig+0x110>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	7b1b      	ldrb	r3, [r3, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <ETH_SetDMAConfig+0x2c>
 8004b0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004b0e:	e000      	b.n	8004b12 <ETH_SetDMAConfig+0x2e>
 8004b10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	7b5b      	ldrb	r3, [r3, #13]
 8004b16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	7f52      	ldrb	r2, [r2, #29]
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	d102      	bne.n	8004b28 <ETH_SetDMAConfig+0x44>
 8004b22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b26:	e000      	b.n	8004b2a <ETH_SetDMAConfig+0x46>
 8004b28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004b2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	7b9b      	ldrb	r3, [r3, #14]
 8004b30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	7f1b      	ldrb	r3, [r3, #28]
 8004b3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004b40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	7f9b      	ldrb	r3, [r3, #30]
 8004b46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	f7fd fcc8 	bl	8002510 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	791b      	ldrb	r3, [r3, #4]
 8004b92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ba4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004bae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004bb6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004bbc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004bca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f7fd fc99 	bl	8002510 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004be6:	461a      	mov	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6013      	str	r3, [r2, #0]
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	f8de3f23 	.word	0xf8de3f23

08004bf8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b0a6      	sub	sp, #152	@ 0x98
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fe7f 	bl	800497c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004cae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cb2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004cb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004cb8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004cba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004cbe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff05 	bl	8004ae4 <ETH_SetDMAConfig>
}
 8004cda:	bf00      	nop
 8004cdc:	3798      	adds	r7, #152	@ 0x98
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3305      	adds	r3, #5
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	3204      	adds	r2, #4
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <ETH_MACAddressConfig+0x68>)
 8004d06:	4413      	add	r3, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3303      	adds	r3, #3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	061a      	lsls	r2, r3, #24
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3301      	adds	r3, #1
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <ETH_MACAddressConfig+0x6c>)
 8004d36:	4413      	add	r3, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6013      	str	r3, [r2, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40028040 	.word	0x40028040
 8004d50:	40028044 	.word	0x40028044

08004d54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e03e      	b.n	8004de0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68d9      	ldr	r1, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	440b      	add	r3, r1
 8004d72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	3206      	adds	r2, #6
 8004d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d80c      	bhi.n	8004dc4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68d9      	ldr	r1, [r3, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	440b      	add	r3, r1
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
 8004dc2:	e004      	b.n	8004dce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d9bd      	bls.n	8004d62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004df8:	611a      	str	r2, [r3, #16]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e048      	b.n	8004ea6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6919      	ldr	r1, [r3, #16]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	440b      	add	r3, r1
 8004e24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2200      	movs	r2, #0
 8004e42:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e50:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	3212      	adds	r2, #18
 8004e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d80c      	bhi.n	8004e96 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6919      	ldr	r1, [r3, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	440b      	add	r3, r1
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	60da      	str	r2, [r3, #12]
 8004e94:	e004      	b.n	8004ea0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d9b3      	bls.n	8004e14 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ed6:	60da      	str	r2, [r3, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b091      	sub	sp, #68	@ 0x44
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f26:	d007      	beq.n	8004f38 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e111      	b.n	8005160 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3e:	3301      	adds	r3, #1
 8004f40:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	4b86      	ldr	r3, [pc, #536]	@ (800516c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f56:	6852      	ldr	r2, [r2, #4]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004fbe:	e082      	b.n	80050c6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e005      	b.n	8004fec <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fee:	3301      	adds	r3, #1
 8004ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d902      	bls.n	8004ffe <ETH_Prepare_Tx_Descriptors+0x11a>
 8004ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005006:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005014:	d007      	beq.n	8005026 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501a:	3304      	adds	r3, #4
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d029      	beq.n	800507a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005032:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005034:	2300      	movs	r3, #0
 8005036:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005038:	e019      	b.n	800506e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800503a:	f3bf 8f5f 	dmb	sy
}
 800503e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800504c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504e:	3301      	adds	r3, #1
 8005050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005054:	2b03      	cmp	r3, #3
 8005056:	d902      	bls.n	800505e <ETH_Prepare_Tx_Descriptors+0x17a>
 8005058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505a:	3b04      	subs	r3, #4
 800505c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005066:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	3301      	adds	r3, #1
 800506c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800506e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	429a      	cmp	r2, r3
 8005074:	d3e1      	bcc.n	800503a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005076:	2302      	movs	r3, #2
 8005078:	e072      	b.n	8005160 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005088:	3301      	adds	r3, #1
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	4b32      	ldr	r3, [pc, #200]	@ (800516c <ETH_Prepare_Tx_Descriptors+0x288>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a6:	6852      	ldr	r2, [r2, #4]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	3301      	adds	r3, #1
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80050b4:	f3bf 8f5f 	dmb	sy
}
 80050b8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80050c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f47f af78 	bne.w	8004fc0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e005      	b.n	80050f0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005106:	f3bf 8f5f 	dmb	sy
}
 800510a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800511c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	3304      	adds	r3, #4
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800512c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800512e:	f3ef 8310 	mrs	r3, PRIMASK
 8005132:	613b      	str	r3, [r7, #16]
  return(result);
 8005134:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	2301      	movs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f383 8810 	msr	PRIMASK, r3
}
 8005142:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514a:	4413      	add	r3, r2
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	629a      	str	r2, [r3, #40]	@ 0x28
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f383 8810 	msr	PRIMASK, r3
}
 800515c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3744      	adds	r7, #68	@ 0x44
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	ffffe000 	.word	0xffffe000

08005170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	@ 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e175      	b.n	800547c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005190:	2201      	movs	r2, #1
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	f040 8164 	bne.w	8005476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d005      	beq.n	80051c6 <HAL_GPIO_Init+0x56>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d130      	bne.n	8005228 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	2203      	movs	r2, #3
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4013      	ands	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051fc:	2201      	movs	r2, #1
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 0201 	and.w	r2, r3, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b03      	cmp	r3, #3
 8005232:	d017      	beq.n	8005264 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	2203      	movs	r2, #3
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d123      	bne.n	80052b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	08da      	lsrs	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3208      	adds	r2, #8
 8005278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	220f      	movs	r2, #15
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4013      	ands	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	08da      	lsrs	r2, r3, #3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3208      	adds	r2, #8
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	2203      	movs	r2, #3
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	43db      	mvns	r3, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4013      	ands	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 0203 	and.w	r2, r3, #3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80be 	beq.w	8005476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052fa:	4b66      	ldr	r3, [pc, #408]	@ (8005494 <HAL_GPIO_Init+0x324>)
 80052fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fe:	4a65      	ldr	r2, [pc, #404]	@ (8005494 <HAL_GPIO_Init+0x324>)
 8005300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005304:	6453      	str	r3, [r2, #68]	@ 0x44
 8005306:	4b63      	ldr	r3, [pc, #396]	@ (8005494 <HAL_GPIO_Init+0x324>)
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005312:	4a61      	ldr	r2, [pc, #388]	@ (8005498 <HAL_GPIO_Init+0x328>)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	3302      	adds	r3, #2
 800531a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	220f      	movs	r2, #15
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4013      	ands	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a58      	ldr	r2, [pc, #352]	@ (800549c <HAL_GPIO_Init+0x32c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d037      	beq.n	80053ae <HAL_GPIO_Init+0x23e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a57      	ldr	r2, [pc, #348]	@ (80054a0 <HAL_GPIO_Init+0x330>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d031      	beq.n	80053aa <HAL_GPIO_Init+0x23a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a56      	ldr	r2, [pc, #344]	@ (80054a4 <HAL_GPIO_Init+0x334>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d02b      	beq.n	80053a6 <HAL_GPIO_Init+0x236>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a55      	ldr	r2, [pc, #340]	@ (80054a8 <HAL_GPIO_Init+0x338>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d025      	beq.n	80053a2 <HAL_GPIO_Init+0x232>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a54      	ldr	r2, [pc, #336]	@ (80054ac <HAL_GPIO_Init+0x33c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01f      	beq.n	800539e <HAL_GPIO_Init+0x22e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a53      	ldr	r2, [pc, #332]	@ (80054b0 <HAL_GPIO_Init+0x340>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d019      	beq.n	800539a <HAL_GPIO_Init+0x22a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a52      	ldr	r2, [pc, #328]	@ (80054b4 <HAL_GPIO_Init+0x344>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_GPIO_Init+0x226>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a51      	ldr	r2, [pc, #324]	@ (80054b8 <HAL_GPIO_Init+0x348>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00d      	beq.n	8005392 <HAL_GPIO_Init+0x222>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a50      	ldr	r2, [pc, #320]	@ (80054bc <HAL_GPIO_Init+0x34c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d007      	beq.n	800538e <HAL_GPIO_Init+0x21e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a4f      	ldr	r2, [pc, #316]	@ (80054c0 <HAL_GPIO_Init+0x350>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d101      	bne.n	800538a <HAL_GPIO_Init+0x21a>
 8005386:	2309      	movs	r3, #9
 8005388:	e012      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800538a:	230a      	movs	r3, #10
 800538c:	e010      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800538e:	2308      	movs	r3, #8
 8005390:	e00e      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 8005392:	2307      	movs	r3, #7
 8005394:	e00c      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 8005396:	2306      	movs	r3, #6
 8005398:	e00a      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800539a:	2305      	movs	r3, #5
 800539c:	e008      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800539e:	2304      	movs	r3, #4
 80053a0:	e006      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053a2:	2303      	movs	r3, #3
 80053a4:	e004      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e002      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053ae:	2300      	movs	r3, #0
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	f002 0203 	and.w	r2, r2, #3
 80053b6:	0092      	lsls	r2, r2, #2
 80053b8:	4093      	lsls	r3, r2
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053c0:	4935      	ldr	r1, [pc, #212]	@ (8005498 <HAL_GPIO_Init+0x328>)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	3302      	adds	r3, #2
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ce:	4b3d      	ldr	r3, [pc, #244]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053f2:	4a34      	ldr	r2, [pc, #208]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053f8:	4b32      	ldr	r3, [pc, #200]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800541c:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005422:	4b28      	ldr	r3, [pc, #160]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	43db      	mvns	r3, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4013      	ands	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005446:	4a1f      	ldr	r2, [pc, #124]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800544c:	4b1d      	ldr	r3, [pc, #116]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005470:	4a14      	ldr	r2, [pc, #80]	@ (80054c4 <HAL_GPIO_Init+0x354>)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3301      	adds	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b0f      	cmp	r3, #15
 8005480:	f67f ae86 	bls.w	8005190 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	3724      	adds	r7, #36	@ 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40023800 	.word	0x40023800
 8005498:	40013800 	.word	0x40013800
 800549c:	40020000 	.word	0x40020000
 80054a0:	40020400 	.word	0x40020400
 80054a4:	40020800 	.word	0x40020800
 80054a8:	40020c00 	.word	0x40020c00
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40021400 	.word	0x40021400
 80054b4:	40021800 	.word	0x40021800
 80054b8:	40021c00 	.word	0x40021c00
 80054bc:	40022000 	.word	0x40022000
 80054c0:	40022400 	.word	0x40022400
 80054c4:	40013c00 	.word	0x40013c00

080054c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e08b      	b.n	80055f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fb fcea 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2224      	movs	r2, #36	@ 0x24
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	e006      	b.n	8005550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800554e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d108      	bne.n	800556a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	e007      	b.n	800557a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6859      	ldr	r1, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b1d      	ldr	r3, [pc, #116]	@ (80055fc <HAL_I2C_Init+0x134>)
 8005586:	430b      	orrs	r3, r1
 8005588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69d9      	ldr	r1, [r3, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	02008000 	.word	0x02008000

08005600 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	@ 0x28
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	461a      	mov	r2, r3
 800560c:	460b      	mov	r3, r1
 800560e:	817b      	strh	r3, [r7, #10]
 8005610:	4613      	mov	r3, r2
 8005612:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b20      	cmp	r3, #32
 8005622:	f040 80ef 	bne.w	8005804 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005634:	d101      	bne.n	800563a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005636:	2302      	movs	r3, #2
 8005638:	e0e5      	b.n	8005806 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005644:	2302      	movs	r3, #2
 8005646:	e0de      	b.n	8005806 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2221      	movs	r2, #33	@ 0x21
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2210      	movs	r2, #16
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	893a      	ldrh	r2, [r7, #8]
 8005670:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a66      	ldr	r2, [pc, #408]	@ (8005810 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005676:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a66      	ldr	r2, [pc, #408]	@ (8005814 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800567c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	2bff      	cmp	r3, #255	@ 0xff
 8005686:	d906      	bls.n	8005696 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	22ff      	movs	r2, #255	@ 0xff
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800568e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	e007      	b.n	80056a6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80056a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056a4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01a      	beq.n	80056e4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d074      	beq.n	80057d6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d022      	beq.n	800573a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f8:	4a47      	ldr	r2, [pc, #284]	@ (8005818 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80056fa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005700:	4a46      	ldr	r2, [pc, #280]	@ (800581c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005702:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	2200      	movs	r2, #0
 800570a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	2200      	movs	r2, #0
 8005712:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005724:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800572a:	f7fd ff35 	bl	8003598 <HAL_DMA_Start_IT>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d13a      	bne.n	80057ae <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005738:	e013      	b.n	8005762 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e051      	b.n	8005806 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005766:	b2db      	uxtb	r3, r3
 8005768:	3301      	adds	r3, #1
 800576a:	b2da      	uxtb	r2, r3
 800576c:	8979      	ldrh	r1, [r7, #10]
 800576e:	4b2c      	ldr	r3, [pc, #176]	@ (8005820 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f001 ff3f 	bl	80075f8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005794:	2110      	movs	r1, #16
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f001 ff60 	bl	800765c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e028      	b.n	8005800 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c2:	f043 0210 	orr.w	r2, r3, #16
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e017      	b.n	8005806 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a12      	ldr	r2, [pc, #72]	@ (8005824 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80057da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	8979      	ldrh	r1, [r7, #10]
 80057e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005820 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f001 ff04 	bl	80075f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057f8:	2101      	movs	r1, #1
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f001 ff2e 	bl	800765c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	ffff0000 	.word	0xffff0000
 8005814:	0800634f 	.word	0x0800634f
 8005818:	0800737b 	.word	0x0800737b
 800581c:	08007549 	.word	0x08007549
 8005820:	80002000 	.word	0x80002000
 8005824:	08005ec3 	.word	0x08005ec3

08005828 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af02      	add	r7, sp, #8
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	461a      	mov	r2, r3
 8005834:	460b      	mov	r3, r1
 8005836:	817b      	strh	r3, [r7, #10]
 8005838:	4613      	mov	r3, r2
 800583a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b20      	cmp	r3, #32
 8005846:	f040 80cd 	bne.w	80059e4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005858:	d101      	bne.n	800585e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
 800585c:	e0c3      	b.n	80059e6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_I2C_Master_Receive_DMA+0x44>
 8005868:	2302      	movs	r3, #2
 800586a:	e0bc      	b.n	80059e6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2222      	movs	r2, #34	@ 0x22
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2210      	movs	r2, #16
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	893a      	ldrh	r2, [r7, #8]
 8005894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a55      	ldr	r2, [pc, #340]	@ (80059f0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4a55      	ldr	r2, [pc, #340]	@ (80059f4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80058a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2bff      	cmp	r3, #255	@ 0xff
 80058aa:	d906      	bls.n	80058ba <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80058b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e007      	b.n	80058ca <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80058c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d070      	beq.n	80059b4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d020      	beq.n	800591c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058de:	4a46      	ldr	r2, [pc, #280]	@ (80059f8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80058e0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e6:	4a45      	ldr	r2, [pc, #276]	@ (80059fc <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80058e8:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ee:	2200      	movs	r2, #0
 80058f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	2200      	movs	r2, #0
 80058f8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3324      	adds	r3, #36	@ 0x24
 8005904:	4619      	mov	r1, r3
 8005906:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800590c:	f7fd fe44 	bl	8003598 <HAL_DMA_Start_IT>
 8005910:	4603      	mov	r3, r0
 8005912:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d138      	bne.n	800598c <HAL_I2C_Master_Receive_DMA+0x164>
 800591a:	e013      	b.n	8005944 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005930:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e050      	b.n	80059e6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005948:	b2da      	uxtb	r2, r3
 800594a:	8979      	ldrh	r1, [r7, #10]
 800594c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a00 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f001 fe50 	bl	80075f8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005972:	2110      	movs	r1, #16
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f001 fe71 	bl	800765c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e029      	b.n	80059e0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a0:	f043 0210 	orr.w	r2, r3, #16
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e018      	b.n	80059e6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a13      	ldr	r2, [pc, #76]	@ (8005a04 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80059b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	8979      	ldrh	r1, [r7, #10]
 80059c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f001 fe14 	bl	80075f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80059d8:	2102      	movs	r1, #2
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fe3e 	bl	800765c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e000      	b.n	80059e6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
  }
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	ffff0000 	.word	0xffff0000
 80059f4:	0800634f 	.word	0x0800634f
 80059f8:	08007451 	.word	0x08007451
 80059fc:	08007549 	.word	0x08007549
 8005a00:	80002400 	.word	0x80002400
 8005a04:	08005ec3 	.word	0x08005ec3

08005a08 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	f040 80d1 	bne.w	8005bc6 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a36:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0c5      	b.n	8005bc8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e0be      	b.n	8005bc8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2221      	movs	r2, #33	@ 0x21
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a53      	ldr	r2, [pc, #332]	@ (8005bd0 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 8005a82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a53      	ldr	r2, [pc, #332]	@ (8005bd4 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 8005a88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a92:	d117      	bne.n	8005ac4 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d068      	beq.n	8005ba0 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d022      	beq.n	8005b1c <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	4a3f      	ldr	r2, [pc, #252]	@ (8005bd8 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005adc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8005bdc <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005ae4:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aea:	2200      	movs	r2, #0
 8005aec:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	2200      	movs	r2, #0
 8005af4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005afe:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005b06:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005b0c:	f7fd fd44 	bl	8003598 <HAL_DMA_Start_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d12e      	bne.n	8005b78 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005b1a:	e013      	b.n	8005b44 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2228      	movs	r2, #40	@ 0x28
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e041      	b.n	8005bc8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b52:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f001 fd7b 	bl	800765c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e024      	b.n	8005bc2 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2228      	movs	r2, #40	@ 0x28
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e013      	b.n	8005bc8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005bb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f001 fd4d 	bl	800765c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e000      	b.n	8005bc8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005bc6:	2302      	movs	r3, #2
  }
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	ffff0000 	.word	0xffff0000
 8005bd4:	080067f1 	.word	0x080067f1
 8005bd8:	08007411 	.word	0x08007411
 8005bdc:	08007549 	.word	0x08007549

08005be0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	f040 809b 	bne.w	8005d32 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d105      	bne.n	8005c14 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e08f      	b.n	8005d34 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e088      	b.n	8005d34 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2222      	movs	r2, #34	@ 0x22
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a38      	ldr	r2, [pc, #224]	@ (8005d3c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a38      	ldr	r2, [pc, #224]	@ (8005d40 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005c60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d020      	beq.n	8005cac <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	4a35      	ldr	r2, [pc, #212]	@ (8005d44 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005c70:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	4a34      	ldr	r2, [pc, #208]	@ (8005d48 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005c78:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	2200      	movs	r2, #0
 8005c80:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	2200      	movs	r2, #0
 8005c88:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3324      	adds	r3, #36	@ 0x24
 8005c94:	4619      	mov	r1, r3
 8005c96:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005c9c:	f7fd fc7c 	bl	8003598 <HAL_DMA_Start_IT>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d12f      	bne.n	8005d0a <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005caa:	e013      	b.n	8005cd4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2228      	movs	r2, #40	@ 0x28
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e02f      	b.n	8005d34 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ce2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f001 fcb3 	bl	800765c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d04:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e014      	b.n	8005d34 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2228      	movs	r2, #40	@ 0x28
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	f043 0210 	orr.w	r2, r3, #16
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005d32:	2302      	movs	r3, #2
  }
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	ffff0000 	.word	0xffff0000
 8005d40:	080067f1 	.word	0x080067f1
 8005d44:	08007503 	.word	0x08007503
 8005d48:	08007549 	.word	0x08007549

08005d4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db4:	f043 0201 	orr.w	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dc4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	0a9b      	lsrs	r3, r3, #10
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d010      	beq.n	8005df4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	f043 0208 	orr.w	r2, r3, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005df2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	0a5b      	lsrs	r3, r3, #9
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d010      	beq.n	8005e22 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	09db      	lsrs	r3, r3, #7
 8005e04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e10:	f043 0202 	orr.w	r2, r3, #2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e20:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 030b 	and.w	r3, r3, #11
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 f965 	bl	8007104 <I2C_ITError>
  }
}
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70fb      	strb	r3, [r7, #3]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b088      	sub	sp, #32
 8005ec6:	af02      	add	r7, sp, #8
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <I2C_Master_ISR_IT+0x1e>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e12e      	b.n	800613e <I2C_Master_ISR_IT+0x27c>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d013      	beq.n	8005f1c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00d      	beq.n	8005f1c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2210      	movs	r2, #16
 8005f06:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0c:	f043 0204 	orr.w	r2, r3, #4
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f001 fa0c 	bl	8007332 <I2C_Flush_TXDR>
 8005f1a:	e0fb      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	089b      	lsrs	r3, r3, #2
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d023      	beq.n	8005f70 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	089b      	lsrs	r3, r3, #2
 8005f2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01d      	beq.n	8005f70 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0304 	bic.w	r3, r3, #4
 8005f3a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f6e:	e0d1      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	099b      	lsrs	r3, r3, #6
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d12a      	bne.n	8005fd2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d024      	beq.n	8005fd2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01e      	beq.n	8005fd2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 80ba 	beq.w	8006114 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	781a      	ldrb	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005fd0:	e0a0      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	09db      	lsrs	r3, r3, #7
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d06b      	beq.n	80060b6 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	099b      	lsrs	r3, r3, #6
 8005fe2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d065      	beq.n	80060b6 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d04e      	beq.n	8006092 <I2C_Master_ISR_IT+0x1d0>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d14a      	bne.n	8006092 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006008:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2bff      	cmp	r3, #255	@ 0xff
 8006012:	d91c      	bls.n	800604e <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	0c1b      	lsrs	r3, r3, #16
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d103      	bne.n	8006030 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800602e:	e002      	b.n	8006036 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	22ff      	movs	r2, #255	@ 0xff
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	8a79      	ldrh	r1, [r7, #18]
 800603e:	2300      	movs	r3, #0
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f001 fad6 	bl	80075f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800604c:	e032      	b.n	80060b4 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006060:	d00b      	beq.n	800607a <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006066:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800606c:	8a79      	ldrh	r1, [r7, #18]
 800606e:	2000      	movs	r0, #0
 8006070:	9000      	str	r0, [sp, #0]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f001 fac0 	bl	80075f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006078:	e01c      	b.n	80060b4 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607e:	b2da      	uxtb	r2, r3
 8006080:	8a79      	ldrh	r1, [r7, #18]
 8006082:	2300      	movs	r3, #0
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f001 fab4 	bl	80075f8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006090:	e010      	b.n	80060b4 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060a0:	d003      	beq.n	80060aa <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fd09 	bl	8006aba <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060a8:	e034      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060aa:	2140      	movs	r1, #64	@ 0x40
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f001 f829 	bl	8007104 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060b2:	e02f      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
 80060b4:	e02e      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	099b      	lsrs	r3, r3, #6
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d028      	beq.n	8006114 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	099b      	lsrs	r3, r3, #6
 80060c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d022      	beq.n	8006114 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d119      	bne.n	800610c <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060e6:	d015      	beq.n	8006114 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060f0:	d108      	bne.n	8006104 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	e007      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fcd8 	bl	8006aba <I2C_ITMasterSeqCplt>
 800610a:	e003      	b.n	8006114 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800610c:	2140      	movs	r1, #64	@ 0x40
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fff8 	bl	8007104 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800612c:	6979      	ldr	r1, [r7, #20]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fd5e 	bl	8006bf0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <I2C_Slave_ISR_IT+0x24>
 8006166:	2302      	movs	r3, #2
 8006168:	e0ed      	b.n	8006346 <I2C_Slave_ISR_IT+0x200>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006186:	2b00      	cmp	r3, #0
 8006188:	d004      	beq.n	8006194 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800618a:	6939      	ldr	r1, [r7, #16]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fdf9 	bl	8006d84 <I2C_ITSlaveCplt>
 8006192:	e0d3      	b.n	800633c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d04d      	beq.n	800623c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d047      	beq.n	800623c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d128      	bne.n	8006208 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b28      	cmp	r3, #40	@ 0x28
 80061c0:	d108      	bne.n	80061d4 <I2C_Slave_ISR_IT+0x8e>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061c8:	d104      	bne.n	80061d4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80061ca:	6939      	ldr	r1, [r7, #16]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 ff43 	bl	8007058 <I2C_ITListenCplt>
 80061d2:	e032      	b.n	800623a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b29      	cmp	r3, #41	@ 0x29
 80061de:	d10e      	bne.n	80061fe <I2C_Slave_ISR_IT+0xb8>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061e6:	d00a      	beq.n	80061fe <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2210      	movs	r2, #16
 80061ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f001 f89e 	bl	8007332 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fc9c 	bl	8006b34 <I2C_ITSlaveSeqCplt>
 80061fc:	e01d      	b.n	800623a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2210      	movs	r2, #16
 8006204:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006206:	e096      	b.n	8006336 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2210      	movs	r2, #16
 800620e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006214:	f043 0204 	orr.w	r2, r3, #4
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d004      	beq.n	800622c <I2C_Slave_ISR_IT+0xe6>
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006228:	f040 8085 	bne.w	8006336 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006230:	4619      	mov	r1, r3
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 ff66 	bl	8007104 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006238:	e07d      	b.n	8006336 <I2C_Slave_ISR_IT+0x1f0>
 800623a:	e07c      	b.n	8006336 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d030      	beq.n	80062aa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02a      	beq.n	80062aa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d018      	beq.n	8006290 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d14f      	bne.n	800633a <I2C_Slave_ISR_IT+0x1f4>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062a0:	d04b      	beq.n	800633a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fc46 	bl	8006b34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80062a8:	e047      	b.n	800633a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	08db      	lsrs	r3, r3, #3
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	08db      	lsrs	r3, r3, #3
 80062ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80062c2:	6939      	ldr	r1, [r7, #16]
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fb74 	bl	80069b2 <I2C_ITAddrCplt>
 80062ca:	e037      	b.n	800633c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d031      	beq.n	800633c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d02b      	beq.n	800633c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d018      	beq.n	8006320 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800631e:	e00d      	b.n	800633c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006326:	d002      	beq.n	800632e <I2C_Slave_ISR_IT+0x1e8>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fc00 	bl	8006b34 <I2C_ITSlaveSeqCplt>
 8006334:	e002      	b.n	800633c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800633a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af02      	add	r7, sp, #8
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <I2C_Master_ISR_DMA+0x1a>
 8006364:	2302      	movs	r3, #2
 8006366:	e0f0      	b.n	800654a <I2C_Master_ISR_DMA+0x1fc>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d017      	beq.n	80063ac <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	091b      	lsrs	r3, r3, #4
 8006380:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006384:	2b00      	cmp	r3, #0
 8006386:	d011      	beq.n	80063ac <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2210      	movs	r2, #16
 800638e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006394:	f043 0204 	orr.w	r2, r3, #4
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800639c:	2120      	movs	r1, #32
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f001 f95c 	bl	800765c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 ffc4 	bl	8007332 <I2C_Flush_TXDR>
 80063aa:	e0c9      	b.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	09db      	lsrs	r3, r3, #7
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8081 	beq.w	80064bc <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	099b      	lsrs	r3, r3, #6
 80063be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d07a      	beq.n	80064bc <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05c      	beq.n	800649a <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2bff      	cmp	r3, #255	@ 0xff
 80063f6:	d914      	bls.n	8006422 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d103      	bne.n	8006414 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006412:	e002      	b.n	800641a <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	22ff      	movs	r2, #255	@ 0xff
 8006418:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800641a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e010      	b.n	8006444 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006434:	d003      	beq.n	800643e <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e002      	b.n	8006444 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800643e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006442:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	b2da      	uxtb	r2, r3
 800644a:	8a79      	ldrh	r1, [r7, #18]
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f001 f8d0 	bl	80075f8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b22      	cmp	r3, #34	@ 0x22
 8006474:	d108      	bne.n	8006488 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006484:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006486:	e05b      	b.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006496:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006498:	e052      	b.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064a8:	d003      	beq.n	80064b2 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fb05 	bl	8006aba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80064b0:	e046      	b.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064b2:	2140      	movs	r1, #64	@ 0x40
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fe25 	bl	8007104 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80064ba:	e041      	b.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	099b      	lsrs	r3, r3, #6
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d029      	beq.n	800651c <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	099b      	lsrs	r3, r3, #6
 80064cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d023      	beq.n	800651c <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d119      	bne.n	8006512 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ec:	d027      	beq.n	800653e <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064f6:	d108      	bne.n	800650a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006506:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006508:	e019      	b.n	800653e <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fad5 	bl	8006aba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006510:	e015      	b.n	800653e <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006512:	2140      	movs	r1, #64	@ 0x40
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 fdf5 	bl	8007104 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800651a:	e010      	b.n	800653e <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fb5a 	bl	8006bf0 <I2C_ITMasterCplt>
 800653c:	e000      	b.n	8006540 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800653e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006560:	4b94      	ldr	r3, [pc, #592]	@ (80067b4 <I2C_Mem_ISR_DMA+0x260>)
 8006562:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <I2C_Mem_ISR_DMA+0x1e>
 800656e:	2302      	movs	r3, #2
 8006570:	e139      	b.n	80067e6 <I2C_Mem_ISR_DMA+0x292>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d017      	beq.n	80065b6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800658e:	2b00      	cmp	r3, #0
 8006590:	d011      	beq.n	80065b6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2210      	movs	r2, #16
 8006598:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80065a6:	2120      	movs	r1, #32
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f001 f857 	bl	800765c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 febf 	bl	8007332 <I2C_Flush_TXDR>
 80065b4:	e112      	b.n	80067dc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065de:	651a      	str	r2, [r3, #80]	@ 0x50
 80065e0:	e0fc      	b.n	80067dc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	09db      	lsrs	r3, r3, #7
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d06e      	beq.n	80066cc <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	099b      	lsrs	r3, r3, #6
 80065f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d068      	beq.n	80066cc <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065fa:	2101      	movs	r1, #1
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f001 f8b1 	bl	8007764 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006602:	2110      	movs	r1, #16
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f001 f829 	bl	800765c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d056      	beq.n	80066c2 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2bff      	cmp	r3, #255	@ 0xff
 800661c:	d91e      	bls.n	800665c <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d103      	bne.n	800663a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006638:	e002      	b.n	8006640 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	@ 0xff
 800663e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006644:	b299      	uxth	r1, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664a:	b2da      	uxtb	r2, r3
 800664c:	2300      	movs	r3, #0
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 ffcf 	bl	80075f8 <I2C_TransferConfig>
 800665a:	e011      	b.n	8006680 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666a:	b299      	uxth	r1, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006670:	b2da      	uxtb	r2, r3
 8006672:	2300      	movs	r3, #0
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 ffbc 	bl	80075f8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b22      	cmp	r3, #34	@ 0x22
 800669c:	d108      	bne.n	80066b0 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80066ae:	e095      	b.n	80067dc <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066be:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80066c0:	e08c      	b.n	80067dc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066c2:	2140      	movs	r1, #64	@ 0x40
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fd1d 	bl	8007104 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80066ca:	e087      	b.n	80067dc <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	099b      	lsrs	r3, r3, #6
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d071      	beq.n	80067bc <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	099b      	lsrs	r3, r3, #6
 80066dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d06b      	beq.n	80067bc <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066e4:	2101      	movs	r1, #1
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f001 f83c 	bl	8007764 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80066ec:	2110      	movs	r1, #16
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 ffb4 	bl	800765c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b22      	cmp	r3, #34	@ 0x22
 80066fe:	d101      	bne.n	8006704 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006700:	4b2d      	ldr	r3, [pc, #180]	@ (80067b8 <I2C_Mem_ISR_DMA+0x264>)
 8006702:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2bff      	cmp	r3, #255	@ 0xff
 800670c:	d91e      	bls.n	800674c <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b01      	cmp	r3, #1
 8006720:	d103      	bne.n	800672a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006728:	e002      	b.n	8006730 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	22ff      	movs	r2, #255	@ 0xff
 800672e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006734:	b299      	uxth	r1, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673a:	b2da      	uxtb	r2, r3
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 ff57 	bl	80075f8 <I2C_TransferConfig>
 800674a:	e011      	b.n	8006770 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800675a:	b299      	uxth	r1, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006760:	b2da      	uxtb	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 ff44 	bl	80075f8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b22      	cmp	r3, #34	@ 0x22
 800678c:	d108      	bne.n	80067a0 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800679c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800679e:	e01d      	b.n	80067dc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067ae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067b0:	e014      	b.n	80067dc <I2C_Mem_ISR_DMA+0x288>
 80067b2:	bf00      	nop
 80067b4:	80002000 	.word	0x80002000
 80067b8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d009      	beq.n	80067dc <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fa0a 	bl	8006bf0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop

080067f0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <I2C_Slave_ISR_DMA+0x24>
 8006810:	2302      	movs	r3, #2
 8006812:	e0ca      	b.n	80069aa <I2C_Slave_ISR_DMA+0x1ba>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 faa4 	bl	8006d84 <I2C_ITSlaveCplt>
 800683c:	e0b0      	b.n	80069a0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 809a 	beq.w	8006980 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	091b      	lsrs	r3, r3, #4
 8006850:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8093 	beq.w	8006980 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	0b9b      	lsrs	r3, r3, #14
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d105      	bne.n	8006872 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0bdb      	lsrs	r3, r3, #15
 800686a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800686e:	2b00      	cmp	r3, #0
 8006870:	d07f      	beq.n	8006972 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00d      	beq.n	8006896 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0bdb      	lsrs	r3, r3, #15
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006892:	2301      	movs	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0b9b      	lsrs	r3, r3, #14
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80068b6:	2301      	movs	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d128      	bne.n	8006912 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b28      	cmp	r3, #40	@ 0x28
 80068ca:	d108      	bne.n	80068de <I2C_Slave_ISR_DMA+0xee>
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068d2:	d104      	bne.n	80068de <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fbbe 	bl	8007058 <I2C_ITListenCplt>
 80068dc:	e048      	b.n	8006970 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b29      	cmp	r3, #41	@ 0x29
 80068e8:	d10e      	bne.n	8006908 <I2C_Slave_ISR_DMA+0x118>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068f0:	d00a      	beq.n	8006908 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2210      	movs	r2, #16
 80068f8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fd19 	bl	8007332 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f917 	bl	8006b34 <I2C_ITSlaveSeqCplt>
 8006906:	e033      	b.n	8006970 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2210      	movs	r2, #16
 800690e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006910:	e034      	b.n	800697c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2210      	movs	r2, #16
 8006918:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	f043 0204 	orr.w	r2, r3, #4
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800692c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <I2C_Slave_ISR_DMA+0x14c>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800693a:	d11f      	bne.n	800697c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	2b21      	cmp	r3, #33	@ 0x21
 8006940:	d002      	beq.n	8006948 <I2C_Slave_ISR_DMA+0x158>
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	2b29      	cmp	r3, #41	@ 0x29
 8006946:	d103      	bne.n	8006950 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2221      	movs	r2, #33	@ 0x21
 800694c:	631a      	str	r2, [r3, #48]	@ 0x30
 800694e:	e008      	b.n	8006962 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b22      	cmp	r3, #34	@ 0x22
 8006954:	d002      	beq.n	800695c <I2C_Slave_ISR_DMA+0x16c>
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	2b2a      	cmp	r3, #42	@ 0x2a
 800695a:	d102      	bne.n	8006962 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2222      	movs	r2, #34	@ 0x22
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	4619      	mov	r1, r3
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fbcb 	bl	8007104 <I2C_ITError>
      if (treatdmanack == 1U)
 800696e:	e005      	b.n	800697c <I2C_Slave_ISR_DMA+0x18c>
 8006970:	e004      	b.n	800697c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2210      	movs	r2, #16
 8006978:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800697a:	e011      	b.n	80069a0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800697c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800697e:	e00f      	b.n	80069a0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	08db      	lsrs	r3, r3, #3
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	08db      	lsrs	r3, r3, #3
 8006990:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f809 	bl	80069b2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069c8:	2b28      	cmp	r3, #40	@ 0x28
 80069ca:	d16a      	bne.n	8006aa2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	0c1b      	lsrs	r3, r3, #16
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80069ea:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069f8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a06:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d138      	bne.n	8006a82 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006a10:	897b      	ldrh	r3, [r7, #10]
 8006a12:	09db      	lsrs	r3, r3, #7
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	89bb      	ldrh	r3, [r7, #12]
 8006a18:	4053      	eors	r3, r2
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f003 0306 	and.w	r3, r3, #6
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11c      	bne.n	8006a5e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006a24:	897b      	ldrh	r3, [r7, #10]
 8006a26:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d13b      	bne.n	8006ab2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2208      	movs	r2, #8
 8006a46:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a50:	89ba      	ldrh	r2, [r7, #12]
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff f9f3 	bl	8005e42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a5c:	e029      	b.n	8006ab2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006a5e:	893b      	ldrh	r3, [r7, #8]
 8006a60:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fe7c 	bl	8007764 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a74:	89ba      	ldrh	r2, [r7, #12]
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff f9e1 	bl	8005e42 <HAL_I2C_AddrCallback>
}
 8006a80:	e017      	b.n	8006ab2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fe6c 	bl	8007764 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a94:	89ba      	ldrh	r2, [r7, #12]
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff f9d1 	bl	8005e42 <HAL_I2C_AddrCallback>
}
 8006aa0:	e007      	b.n	8006ab2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b21      	cmp	r3, #33	@ 0x21
 8006ad4:	d115      	bne.n	8006b02 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2211      	movs	r2, #17
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006aea:	2101      	movs	r1, #1
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fe39 	bl	8007764 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f01a f85c 	bl	8020bb8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b00:	e014      	b.n	8006b2c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2212      	movs	r2, #18
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b16:	2102      	movs	r1, #2
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fe23 	bl	8007764 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f01a f85c 	bl	8020be4 <HAL_I2C_MasterRxCpltCallback>
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	0b9b      	lsrs	r3, r3, #14
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d008      	beq.n	8006b6a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e00d      	b.n	8006b86 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	0bdb      	lsrs	r3, r3, #15
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b29      	cmp	r3, #41	@ 0x29
 8006b90:	d112      	bne.n	8006bb8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2228      	movs	r2, #40	@ 0x28
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2221      	movs	r2, #33	@ 0x21
 8006b9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fdde 	bl	8007764 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f01a f82d 	bl	8020c10 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bb6:	e017      	b.n	8006be8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc2:	d111      	bne.n	8006be8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2228      	movs	r2, #40	@ 0x28
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2222      	movs	r2, #34	@ 0x22
 8006bd0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fdc5 	bl	8007764 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f01a f82a 	bl	8020c3c <HAL_I2C_SlaveRxCpltCallback>
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2220      	movs	r2, #32
 8006c04:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b21      	cmp	r3, #33	@ 0x21
 8006c10:	d107      	bne.n	8006c22 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c12:	2101      	movs	r1, #1
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fda5 	bl	8007764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2211      	movs	r2, #17
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c20:	e00c      	b.n	8006c3c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b22      	cmp	r3, #34	@ 0x22
 8006c2c:	d106      	bne.n	8006c3c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c2e:	2102      	movs	r1, #2
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fd97 	bl	8007764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2212      	movs	r2, #18
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b4d      	ldr	r3, [pc, #308]	@ (8006d7c <I2C_ITMasterCplt+0x18c>)
 8006c48:	400b      	ands	r3, r1
 8006c4a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a4a      	ldr	r2, [pc, #296]	@ (8006d80 <I2C_ITMasterCplt+0x190>)
 8006c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2210      	movs	r2, #16
 8006c6a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c70:	f043 0204 	orr.w	r2, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b60      	cmp	r3, #96	@ 0x60
 8006c82:	d10b      	bne.n	8006c9c <I2C_ITMasterCplt+0xac>
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb48 	bl	8007332 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b60      	cmp	r3, #96	@ 0x60
 8006cb2:	d002      	beq.n	8006cba <I2C_ITMasterCplt+0xca>
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d006      	beq.n	8006cc8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa1f 	bl	8007104 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cc6:	e054      	b.n	8006d72 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b21      	cmp	r3, #33	@ 0x21
 8006cd2:	d124      	bne.n	8006d1e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b40      	cmp	r3, #64	@ 0x40
 8006cec:	d10b      	bne.n	8006d06 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff f8b7 	bl	8005e72 <HAL_I2C_MemTxCpltCallback>
}
 8006d04:	e035      	b.n	8006d72 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f019 ff4e 	bl	8020bb8 <HAL_I2C_MasterTxCpltCallback>
}
 8006d1c:	e029      	b.n	8006d72 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b22      	cmp	r3, #34	@ 0x22
 8006d28:	d123      	bne.n	8006d72 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b40      	cmp	r3, #64	@ 0x40
 8006d42:	d10b      	bne.n	8006d5c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff f896 	bl	8005e86 <HAL_I2C_MemRxCpltCallback>
}
 8006d5a:	e00a      	b.n	8006d72 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f019 ff39 	bl	8020be4 <HAL_I2C_MasterRxCpltCallback>
}
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	fe00e800 	.word	0xfe00e800
 8006d80:	ffff0000 	.word	0xffff0000

08006d84 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2220      	movs	r2, #32
 8006dae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006db0:	7afb      	ldrb	r3, [r7, #11]
 8006db2:	2b21      	cmp	r3, #33	@ 0x21
 8006db4:	d002      	beq.n	8006dbc <I2C_ITSlaveCplt+0x38>
 8006db6:	7afb      	ldrb	r3, [r7, #11]
 8006db8:	2b29      	cmp	r3, #41	@ 0x29
 8006dba:	d108      	bne.n	8006dce <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006dbc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fccf 	bl	8007764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2221      	movs	r2, #33	@ 0x21
 8006dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dcc:	e019      	b.n	8006e02 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	2b22      	cmp	r3, #34	@ 0x22
 8006dd2:	d002      	beq.n	8006dda <I2C_ITSlaveCplt+0x56>
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dd8:	d108      	bne.n	8006dec <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006dda:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fcc0 	bl	8007764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2222      	movs	r2, #34	@ 0x22
 8006de8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dea:	e00a      	b.n	8006e02 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	2b28      	cmp	r3, #40	@ 0x28
 8006df0:	d107      	bne.n	8006e02 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006df2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fcb4 	bl	8007764 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e10:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6859      	ldr	r1, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8007050 <I2C_ITSlaveCplt+0x2cc>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa85 	bl	8007332 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	0b9b      	lsrs	r3, r3, #14
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d013      	beq.n	8006e5c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e42:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d020      	beq.n	8006e8e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e5a:	e018      	b.n	8006e8e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	0bdb      	lsrs	r3, r3, #15
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d012      	beq.n	8006e8e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e76:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	089b      	lsrs	r3, r3, #2
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d020      	beq.n	8006edc <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f023 0304 	bic.w	r3, r3, #4
 8006ea0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00c      	beq.n	8006edc <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	f043 0204 	orr.w	r2, r3, #4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	091b      	lsrs	r3, r3, #4
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d04a      	beq.n	8006f94 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d044      	beq.n	8006f94 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d128      	bne.n	8006f66 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b28      	cmp	r3, #40	@ 0x28
 8006f1e:	d108      	bne.n	8006f32 <I2C_ITSlaveCplt+0x1ae>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f26:	d104      	bne.n	8006f32 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f28:	6979      	ldr	r1, [r7, #20]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f894 	bl	8007058 <I2C_ITListenCplt>
 8006f30:	e030      	b.n	8006f94 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b29      	cmp	r3, #41	@ 0x29
 8006f3c:	d10e      	bne.n	8006f5c <I2C_ITSlaveCplt+0x1d8>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f44:	d00a      	beq.n	8006f5c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f9ef 	bl	8007332 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fded 	bl	8006b34 <I2C_ITSlaveSeqCplt>
 8006f5a:	e01b      	b.n	8006f94 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2210      	movs	r2, #16
 8006f62:	61da      	str	r2, [r3, #28]
 8006f64:	e016      	b.n	8006f94 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2210      	movs	r2, #16
 8006f6c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f72:	f043 0204 	orr.w	r2, r3, #4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <I2C_ITSlaveCplt+0x204>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f86:	d105      	bne.n	8006f94 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f8b8 	bl	8007104 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f8a7 	bl	8007104 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b28      	cmp	r3, #40	@ 0x28
 8006fc0:	d141      	bne.n	8007046 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f847 	bl	8007058 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fca:	e03c      	b.n	8007046 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fd4:	d014      	beq.n	8007000 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fdac 	bl	8006b34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a1d      	ldr	r2, [pc, #116]	@ (8007054 <I2C_ITSlaveCplt+0x2d0>)
 8006fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fe ff30 	bl	8005e5e <HAL_I2C_ListenCpltCallback>
}
 8006ffe:	e022      	b.n	8007046 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b22      	cmp	r3, #34	@ 0x22
 800700a:	d10e      	bne.n	800702a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f019 fe0a 	bl	8020c3c <HAL_I2C_SlaveRxCpltCallback>
}
 8007028:	e00d      	b.n	8007046 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f019 fde5 	bl	8020c10 <HAL_I2C_SlaveTxCpltCallback>
}
 8007046:	bf00      	nop
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	fe00e800 	.word	0xfe00e800
 8007054:	ffff0000 	.word	0xffff0000

08007058 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a26      	ldr	r2, [pc, #152]	@ (8007100 <I2C_ITListenCplt+0xa8>)
 8007066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	089b      	lsrs	r3, r3, #2
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d022      	beq.n	80070d6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d012      	beq.n	80070d6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ce:	f043 0204 	orr.w	r2, r3, #4
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070d6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fb42 	bl	8007764 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2210      	movs	r2, #16
 80070e6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fe feb4 	bl	8005e5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	ffff0000 	.word	0xffff0000

08007104 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007114:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a6d      	ldr	r2, [pc, #436]	@ (80072d8 <I2C_ITError+0x1d4>)
 8007122:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b28      	cmp	r3, #40	@ 0x28
 800713a:	d005      	beq.n	8007148 <I2C_ITError+0x44>
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b29      	cmp	r3, #41	@ 0x29
 8007140:	d002      	beq.n	8007148 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b2a      	cmp	r3, #42	@ 0x2a
 8007146:	d10b      	bne.n	8007160 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007148:	2103      	movs	r1, #3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fb0a 	bl	8007764 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2228      	movs	r2, #40	@ 0x28
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a60      	ldr	r2, [pc, #384]	@ (80072dc <I2C_ITError+0x1d8>)
 800715c:	635a      	str	r2, [r3, #52]	@ 0x34
 800715e:	e030      	b.n	80071c2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007160:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fafd 	bl	8007764 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8e1 	bl	8007332 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b60      	cmp	r3, #96	@ 0x60
 800717a:	d01f      	beq.n	80071bc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d114      	bne.n	80071bc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b10      	cmp	r3, #16
 800719e:	d109      	bne.n	80071b4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2210      	movs	r2, #16
 80071a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ac:	f043 0204 	orr.w	r2, r3, #4
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2220      	movs	r2, #32
 80071ba:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d039      	beq.n	8007244 <I2C_ITError+0x140>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b11      	cmp	r3, #17
 80071d4:	d002      	beq.n	80071dc <I2C_ITError+0xd8>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b21      	cmp	r3, #33	@ 0x21
 80071da:	d133      	bne.n	8007244 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071ea:	d107      	bne.n	80071fc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007200:	4618      	mov	r0, r3
 8007202:	f7fc fc45 	bl	8003a90 <HAL_DMA_GetState>
 8007206:	4603      	mov	r3, r0
 8007208:	2b01      	cmp	r3, #1
 800720a:	d017      	beq.n	800723c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007210:	4a33      	ldr	r2, [pc, #204]	@ (80072e0 <I2C_ITError+0x1dc>)
 8007212:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	4618      	mov	r0, r3
 8007222:	f7fc fa89 	bl	8003738 <HAL_DMA_Abort_IT>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d04d      	beq.n	80072c8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007236:	4610      	mov	r0, r2
 8007238:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800723a:	e045      	b.n	80072c8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f851 	bl	80072e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007242:	e041      	b.n	80072c8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d039      	beq.n	80072c0 <I2C_ITError+0x1bc>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b12      	cmp	r3, #18
 8007250:	d002      	beq.n	8007258 <I2C_ITError+0x154>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b22      	cmp	r3, #34	@ 0x22
 8007256:	d133      	bne.n	80072c0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007266:	d107      	bne.n	8007278 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007276:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727c:	4618      	mov	r0, r3
 800727e:	f7fc fc07 	bl	8003a90 <HAL_DMA_GetState>
 8007282:	4603      	mov	r3, r0
 8007284:	2b01      	cmp	r3, #1
 8007286:	d017      	beq.n	80072b8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728c:	4a14      	ldr	r2, [pc, #80]	@ (80072e0 <I2C_ITError+0x1dc>)
 800728e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729c:	4618      	mov	r0, r3
 800729e:	f7fc fa4b 	bl	8003738 <HAL_DMA_Abort_IT>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d011      	beq.n	80072cc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072b2:	4610      	mov	r0, r2
 80072b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072b6:	e009      	b.n	80072cc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f813 	bl	80072e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072be:	e005      	b.n	80072cc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f80f 	bl	80072e4 <I2C_TreatErrorCallback>
  }
}
 80072c6:	e002      	b.n	80072ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072cc:	bf00      	nop
}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	ffff0000 	.word	0xffff0000
 80072dc:	08006147 	.word	0x08006147
 80072e0:	080075bd 	.word	0x080075bd

080072e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b60      	cmp	r3, #96	@ 0x60
 80072f6:	d10e      	bne.n	8007316 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fe fdcd 	bl	8005eae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007314:	e009      	b.n	800732a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7fe fdb8 	bl	8005e9a <HAL_I2C_ErrorCallback>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b02      	cmp	r3, #2
 8007346:	d103      	bne.n	8007350 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2200      	movs	r2, #0
 800734e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d007      	beq.n	800736e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0201 	orr.w	r2, r2, #1
 800736c:	619a      	str	r2, [r3, #24]
  }
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007386:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007396:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80073a2:	2120      	movs	r1, #32
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f959 	bl	800765c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073aa:	e02d      	b.n	8007408 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2bff      	cmp	r3, #255	@ 0xff
 80073c2:	d903      	bls.n	80073cc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	22ff      	movs	r2, #255	@ 0xff
 80073c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073ca:	e004      	b.n	80073d6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	4619      	mov	r1, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3328      	adds	r3, #40	@ 0x28
 80073e6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80073ec:	f7fc f8d4 	bl	8003598 <HAL_DMA_Start_IT>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073f6:	2110      	movs	r1, #16
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7ff fe83 	bl	8007104 <I2C_ITError>
}
 80073fe:	e003      	b.n	8007408 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007400:	2140      	movs	r1, #64	@ 0x40
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f92a 	bl	800765c <I2C_Enable_IRQ>
}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800742a:	d002      	beq.n	8007432 <I2C_DMASlaveTransmitCplt+0x22>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007440:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f7ff fb76 	bl	8006b34 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800746c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007478:	2120      	movs	r1, #32
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f8ee 	bl	800765c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007480:	e03b      	b.n	80074fa <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800748a:	441a      	add	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2bff      	cmp	r3, #255	@ 0xff
 8007498:	d911      	bls.n	80074be <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d103      	bne.n	80074b6 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80074b4:	e008      	b.n	80074c8 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	22ff      	movs	r2, #255	@ 0xff
 80074ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80074bc:	e004      	b.n	80074c8 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3324      	adds	r3, #36	@ 0x24
 80074d2:	4619      	mov	r1, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80074de:	f7fc f85b 	bl	8003598 <HAL_DMA_Start_IT>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074e8:	2110      	movs	r1, #16
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff fe0a 	bl	8007104 <I2C_ITError>
}
 80074f0:	e003      	b.n	80074fa <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80074f2:	2140      	movs	r1, #64	@ 0x40
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f8b1 	bl	800765c <I2C_Enable_IRQ>
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10e      	bne.n	8007540 <I2C_DMASlaveReceiveCplt+0x3e>
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007528:	d00a      	beq.n	8007540 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007538:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fafa 	bl	8006b34 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007558:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800756e:	2301      	movs	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007586:	2301      	movs	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fc fa8e 	bl	8003aac <HAL_DMA_GetError>
 8007590:	4603      	mov	r3, r0
 8007592:	2b02      	cmp	r3, #2
 8007594:	d00e      	beq.n	80075b4 <I2C_DMAError+0x6c>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075aa:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80075ac:	2110      	movs	r1, #16
 80075ae:	68b8      	ldr	r0, [r7, #8]
 80075b0:	f7ff fda8 	bl	8007104 <I2C_ITError>
  }
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	2200      	movs	r2, #0
 80075d8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e6:	2200      	movs	r2, #0
 80075e8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7ff fe7a 	bl	80072e4 <I2C_TreatErrorCallback>
}
 80075f0:	bf00      	nop
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	817b      	strh	r3, [r7, #10]
 8007606:	4613      	mov	r3, r2
 8007608:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800760a:	897b      	ldrh	r3, [r7, #10]
 800760c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007610:	7a7b      	ldrb	r3, [r7, #9]
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007618:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	4313      	orrs	r3, r2
 8007622:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007626:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	0d5b      	lsrs	r3, r3, #21
 8007632:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007636:	4b08      	ldr	r3, [pc, #32]	@ (8007658 <I2C_TransferConfig+0x60>)
 8007638:	430b      	orrs	r3, r1
 800763a:	43db      	mvns	r3, r3
 800763c:	ea02 0103 	and.w	r1, r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800764a:	bf00      	nop
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	03ff63ff 	.word	0x03ff63ff

0800765c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007670:	4a39      	ldr	r2, [pc, #228]	@ (8007758 <I2C_Enable_IRQ+0xfc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d032      	beq.n	80076dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800767a:	4a38      	ldr	r2, [pc, #224]	@ (800775c <I2C_Enable_IRQ+0x100>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d02d      	beq.n	80076dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007684:	4a36      	ldr	r2, [pc, #216]	@ (8007760 <I2C_Enable_IRQ+0x104>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d028      	beq.n	80076dc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800768a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800768e:	2b00      	cmp	r3, #0
 8007690:	da03      	bge.n	800769a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007698:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800769a:	887b      	ldrh	r3, [r7, #2]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80076aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80076bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	2b10      	cmp	r3, #16
 80076c2:	d103      	bne.n	80076cc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80076ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076cc:	887b      	ldrh	r3, [r7, #2]
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d133      	bne.n	800773a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f043 0320 	orr.w	r3, r3, #32
 80076d8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076da:	e02e      	b.n	800773a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da03      	bge.n	80076ec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80076ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076ec:	887b      	ldrh	r3, [r7, #2]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80076fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076fe:	887b      	ldrh	r3, [r7, #2]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800770e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007710:	887b      	ldrh	r3, [r7, #2]
 8007712:	2b10      	cmp	r3, #16
 8007714:	d103      	bne.n	800771e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800771c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800771e:	887b      	ldrh	r3, [r7, #2]
 8007720:	2b20      	cmp	r3, #32
 8007722:	d103      	bne.n	800772c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800772a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	2b40      	cmp	r3, #64	@ 0x40
 8007730:	d103      	bne.n	800773a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007738:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	430a      	orrs	r2, r1
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	0800634f 	.word	0x0800634f
 800775c:	080067f1 	.word	0x080067f1
 8007760:	08006555 	.word	0x08006555

08007764 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007774:	887b      	ldrh	r3, [r7, #2]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00f      	beq.n	800779e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007784:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007792:	2b28      	cmp	r3, #40	@ 0x28
 8007794:	d003      	beq.n	800779e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800779c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800779e:	887b      	ldrh	r3, [r7, #2]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80077ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80077bc:	2b28      	cmp	r3, #40	@ 0x28
 80077be:	d003      	beq.n	80077c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80077c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80077c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da03      	bge.n	80077d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80077d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80077d8:	887b      	ldrh	r3, [r7, #2]
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d103      	bne.n	80077e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80077e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d103      	bne.n	80077f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f043 0320 	orr.w	r3, r3, #32
 80077f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80077f4:	887b      	ldrh	r3, [r7, #2]
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d103      	bne.n	8007802 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007800:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6819      	ldr	r1, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	43da      	mvns	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	400a      	ands	r2, r1
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b20      	cmp	r3, #32
 8007834:	d138      	bne.n	80078a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007840:	2302      	movs	r3, #2
 8007842:	e032      	b.n	80078aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2224      	movs	r2, #36	@ 0x24
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0201 	bic.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007872:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6819      	ldr	r1, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d139      	bne.n	8007940 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e033      	b.n	8007942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2224      	movs	r2, #36	@ 0x24
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0201 	bic.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007908:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	021b      	lsls	r3, r3, #8
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
  }
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	4b23      	ldr	r3, [pc, #140]	@ (80079e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	4a22      	ldr	r2, [pc, #136]	@ (80079e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007964:	6413      	str	r3, [r2, #64]	@ 0x40
 8007966:	4b20      	ldr	r3, [pc, #128]	@ (80079e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007972:	4b1e      	ldr	r3, [pc, #120]	@ (80079ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1d      	ldr	r2, [pc, #116]	@ (80079ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800797c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800797e:	f7fa fdbb 	bl	80024f8 <HAL_GetTick>
 8007982:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007984:	e009      	b.n	800799a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007986:	f7fa fdb7 	bl	80024f8 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007994:	d901      	bls.n	800799a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e022      	b.n	80079e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800799a:	4b14      	ldr	r3, [pc, #80]	@ (80079ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a6:	d1ee      	bne.n	8007986 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80079a8:	4b10      	ldr	r3, [pc, #64]	@ (80079ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a0f      	ldr	r2, [pc, #60]	@ (80079ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079b4:	f7fa fda0 	bl	80024f8 <HAL_GetTick>
 80079b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079ba:	e009      	b.n	80079d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079bc:	f7fa fd9c 	bl	80024f8 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079ca:	d901      	bls.n	80079d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e007      	b.n	80079e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079d0:	4b06      	ldr	r3, [pc, #24]	@ (80079ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079dc:	d1ee      	bne.n	80079bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	40023800 	.word	0x40023800
 80079ec:	40007000 	.word	0x40007000

080079f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80079f8:	2300      	movs	r3, #0
 80079fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e291      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8087 	beq.w	8007b22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a14:	4b96      	ldr	r3, [pc, #600]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 030c 	and.w	r3, r3, #12
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d00c      	beq.n	8007a3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a20:	4b93      	ldr	r3, [pc, #588]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 030c 	and.w	r3, r3, #12
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d112      	bne.n	8007a52 <HAL_RCC_OscConfig+0x62>
 8007a2c:	4b90      	ldr	r3, [pc, #576]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a38:	d10b      	bne.n	8007a52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d06c      	beq.n	8007b20 <HAL_RCC_OscConfig+0x130>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d168      	bne.n	8007b20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e26b      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5a:	d106      	bne.n	8007a6a <HAL_RCC_OscConfig+0x7a>
 8007a5c:	4b84      	ldr	r3, [pc, #528]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a83      	ldr	r2, [pc, #524]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	e02e      	b.n	8007ac8 <HAL_RCC_OscConfig+0xd8>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10c      	bne.n	8007a8c <HAL_RCC_OscConfig+0x9c>
 8007a72:	4b7f      	ldr	r3, [pc, #508]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a7e      	ldr	r2, [pc, #504]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a7b      	ldr	r2, [pc, #492]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	e01d      	b.n	8007ac8 <HAL_RCC_OscConfig+0xd8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a94:	d10c      	bne.n	8007ab0 <HAL_RCC_OscConfig+0xc0>
 8007a96:	4b76      	ldr	r3, [pc, #472]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a75      	ldr	r2, [pc, #468]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4b73      	ldr	r3, [pc, #460]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a72      	ldr	r2, [pc, #456]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	e00b      	b.n	8007ac8 <HAL_RCC_OscConfig+0xd8>
 8007ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	4b6c      	ldr	r3, [pc, #432]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a6b      	ldr	r2, [pc, #428]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d013      	beq.n	8007af8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad0:	f7fa fd12 	bl	80024f8 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad8:	f7fa fd0e 	bl	80024f8 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	@ 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e21f      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aea:	4b61      	ldr	r3, [pc, #388]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCC_OscConfig+0xe8>
 8007af6:	e014      	b.n	8007b22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af8:	f7fa fcfe 	bl	80024f8 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b00:	f7fa fcfa 	bl	80024f8 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b64      	cmp	r3, #100	@ 0x64
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e20b      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b12:	4b57      	ldr	r3, [pc, #348]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x110>
 8007b1e:	e000      	b.n	8007b22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d069      	beq.n	8007c02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b2e:	4b50      	ldr	r3, [pc, #320]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 030c 	and.w	r3, r3, #12
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d11c      	bne.n	8007b80 <HAL_RCC_OscConfig+0x190>
 8007b46:	4b4a      	ldr	r3, [pc, #296]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d116      	bne.n	8007b80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b52:	4b47      	ldr	r3, [pc, #284]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_RCC_OscConfig+0x17a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d001      	beq.n	8007b6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e1df      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6a:	4b41      	ldr	r3, [pc, #260]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	493d      	ldr	r1, [pc, #244]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b7e:	e040      	b.n	8007c02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d023      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b88:	4b39      	ldr	r3, [pc, #228]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a38      	ldr	r2, [pc, #224]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fa fcb0 	bl	80024f8 <HAL_GetTick>
 8007b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b9c:	f7fa fcac 	bl	80024f8 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e1bd      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bae:	4b30      	ldr	r3, [pc, #192]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0f0      	beq.n	8007b9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bba:	4b2d      	ldr	r3, [pc, #180]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4929      	ldr	r1, [pc, #164]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	600b      	str	r3, [r1, #0]
 8007bce:	e018      	b.n	8007c02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bd0:	4b27      	ldr	r3, [pc, #156]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a26      	ldr	r2, [pc, #152]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007bd6:	f023 0301 	bic.w	r3, r3, #1
 8007bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bdc:	f7fa fc8c 	bl	80024f8 <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007be4:	f7fa fc88 	bl	80024f8 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e199      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f0      	bne.n	8007be4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d038      	beq.n	8007c80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d019      	beq.n	8007c4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c16:	4b16      	ldr	r3, [pc, #88]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c1a:	4a15      	ldr	r2, [pc, #84]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007c1c:	f043 0301 	orr.w	r3, r3, #1
 8007c20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c22:	f7fa fc69 	bl	80024f8 <HAL_GetTick>
 8007c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c28:	e008      	b.n	8007c3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c2a:	f7fa fc65 	bl	80024f8 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e176      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0f0      	beq.n	8007c2a <HAL_RCC_OscConfig+0x23a>
 8007c48:	e01a      	b.n	8007c80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c4a:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c4e:	4a08      	ldr	r2, [pc, #32]	@ (8007c70 <HAL_RCC_OscConfig+0x280>)
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c56:	f7fa fc4f 	bl	80024f8 <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c5c:	e00a      	b.n	8007c74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c5e:	f7fa fc4b 	bl	80024f8 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d903      	bls.n	8007c74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e15c      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
 8007c70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c74:	4b91      	ldr	r3, [pc, #580]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1ee      	bne.n	8007c5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80a4 	beq.w	8007dd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10d      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c9a:	4b88      	ldr	r3, [pc, #544]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	4a87      	ldr	r2, [pc, #540]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ca6:	4b85      	ldr	r3, [pc, #532]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cae:	60bb      	str	r3, [r7, #8]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cb6:	4b82      	ldr	r3, [pc, #520]	@ (8007ec0 <HAL_RCC_OscConfig+0x4d0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d118      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ec0 <HAL_RCC_OscConfig+0x4d0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ec0 <HAL_RCC_OscConfig+0x4d0>)
 8007cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cce:	f7fa fc13 	bl	80024f8 <HAL_GetTick>
 8007cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cd6:	f7fa fc0f 	bl	80024f8 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b64      	cmp	r3, #100	@ 0x64
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e120      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ce8:	4b75      	ldr	r3, [pc, #468]	@ (8007ec0 <HAL_RCC_OscConfig+0x4d0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0f0      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCC_OscConfig+0x31a>
 8007cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d00:	4a6e      	ldr	r2, [pc, #440]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d02:	f043 0301 	orr.w	r3, r3, #1
 8007d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d08:	e02d      	b.n	8007d66 <HAL_RCC_OscConfig+0x376>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0x33c>
 8007d12:	4b6a      	ldr	r3, [pc, #424]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d16:	4a69      	ldr	r2, [pc, #420]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d18:	f023 0301 	bic.w	r3, r3, #1
 8007d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d1e:	4b67      	ldr	r3, [pc, #412]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d22:	4a66      	ldr	r2, [pc, #408]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d24:	f023 0304 	bic.w	r3, r3, #4
 8007d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d2a:	e01c      	b.n	8007d66 <HAL_RCC_OscConfig+0x376>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b05      	cmp	r3, #5
 8007d32:	d10c      	bne.n	8007d4e <HAL_RCC_OscConfig+0x35e>
 8007d34:	4b61      	ldr	r3, [pc, #388]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d38:	4a60      	ldr	r2, [pc, #384]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d3a:	f043 0304 	orr.w	r3, r3, #4
 8007d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d40:	4b5e      	ldr	r3, [pc, #376]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d44:	4a5d      	ldr	r2, [pc, #372]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d46:	f043 0301 	orr.w	r3, r3, #1
 8007d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d4c:	e00b      	b.n	8007d66 <HAL_RCC_OscConfig+0x376>
 8007d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d52:	4a5a      	ldr	r2, [pc, #360]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d5a:	4b58      	ldr	r3, [pc, #352]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5e:	4a57      	ldr	r2, [pc, #348]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d60:	f023 0304 	bic.w	r3, r3, #4
 8007d64:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d015      	beq.n	8007d9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6e:	f7fa fbc3 	bl	80024f8 <HAL_GetTick>
 8007d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d74:	e00a      	b.n	8007d8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d76:	f7fa fbbf 	bl	80024f8 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e0ce      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0ee      	beq.n	8007d76 <HAL_RCC_OscConfig+0x386>
 8007d98:	e014      	b.n	8007dc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d9a:	f7fa fbad 	bl	80024f8 <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007da0:	e00a      	b.n	8007db8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007da2:	f7fa fba9 	bl	80024f8 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d901      	bls.n	8007db8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e0b8      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007db8:	4b40      	ldr	r3, [pc, #256]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1ee      	bne.n	8007da2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d105      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dca:	4b3c      	ldr	r3, [pc, #240]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dce:	4a3b      	ldr	r2, [pc, #236]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dd4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80a4 	beq.w	8007f28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007de0:	4b36      	ldr	r3, [pc, #216]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 030c 	and.w	r3, r3, #12
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d06b      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d149      	bne.n	8007e88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007df4:	4b31      	ldr	r3, [pc, #196]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a30      	ldr	r2, [pc, #192]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e00:	f7fa fb7a 	bl	80024f8 <HAL_GetTick>
 8007e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e06:	e008      	b.n	8007e1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e08:	f7fa fb76 	bl	80024f8 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d901      	bls.n	8007e1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e087      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e1a:	4b28      	ldr	r3, [pc, #160]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f0      	bne.n	8007e08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69da      	ldr	r2, [r3, #28]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e34:	019b      	lsls	r3, r3, #6
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	061b      	lsls	r3, r3, #24
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e54:	4b19      	ldr	r3, [pc, #100]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a18      	ldr	r2, [pc, #96]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e60:	f7fa fb4a 	bl	80024f8 <HAL_GetTick>
 8007e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e68:	f7fa fb46 	bl	80024f8 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e057      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e7a:	4b10      	ldr	r3, [pc, #64]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0f0      	beq.n	8007e68 <HAL_RCC_OscConfig+0x478>
 8007e86:	e04f      	b.n	8007f28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e88:	4b0c      	ldr	r3, [pc, #48]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fa fb30 	bl	80024f8 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fa fb2c 	bl	80024f8 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e03d      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eae:	4b03      	ldr	r3, [pc, #12]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f0      	bne.n	8007e9c <HAL_RCC_OscConfig+0x4ac>
 8007eba:	e035      	b.n	8007f28 <HAL_RCC_OscConfig+0x538>
 8007ebc:	40023800 	.word	0x40023800
 8007ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f34 <HAL_RCC_OscConfig+0x544>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d028      	beq.n	8007f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d121      	bne.n	8007f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d11a      	bne.n	8007f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007efa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d111      	bne.n	8007f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	085b      	lsrs	r3, r3, #1
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d107      	bne.n	8007f24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d001      	beq.n	8007f28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e000      	b.n	8007f2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40023800 	.word	0x40023800

08007f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e0d0      	b.n	80080f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f50:	4b6a      	ldr	r3, [pc, #424]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d910      	bls.n	8007f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f5e:	4b67      	ldr	r3, [pc, #412]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f023 020f 	bic.w	r2, r3, #15
 8007f66:	4965      	ldr	r1, [pc, #404]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f6e:	4b63      	ldr	r3, [pc, #396]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d001      	beq.n	8007f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0b8      	b.n	80080f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d020      	beq.n	8007fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f98:	4b59      	ldr	r3, [pc, #356]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	4a58      	ldr	r2, [pc, #352]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007f9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fb0:	4b53      	ldr	r3, [pc, #332]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	4a52      	ldr	r2, [pc, #328]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007fb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fbc:	4b50      	ldr	r3, [pc, #320]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	494d      	ldr	r1, [pc, #308]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d040      	beq.n	800805c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d107      	bne.n	8007ff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fe2:	4b47      	ldr	r3, [pc, #284]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d115      	bne.n	800801a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e07f      	b.n	80080f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d107      	bne.n	800800a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ffa:	4b41      	ldr	r3, [pc, #260]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e073      	b.n	80080f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800800a:	4b3d      	ldr	r3, [pc, #244]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e06b      	b.n	80080f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800801a:	4b39      	ldr	r3, [pc, #228]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f023 0203 	bic.w	r2, r3, #3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	4936      	ldr	r1, [pc, #216]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 8008028:	4313      	orrs	r3, r2
 800802a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800802c:	f7fa fa64 	bl	80024f8 <HAL_GetTick>
 8008030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008032:	e00a      	b.n	800804a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008034:	f7fa fa60 	bl	80024f8 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008042:	4293      	cmp	r3, r2
 8008044:	d901      	bls.n	800804a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e053      	b.n	80080f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800804a:	4b2d      	ldr	r3, [pc, #180]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 020c 	and.w	r2, r3, #12
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	429a      	cmp	r2, r3
 800805a:	d1eb      	bne.n	8008034 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800805c:	4b27      	ldr	r3, [pc, #156]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d210      	bcs.n	800808c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806a:	4b24      	ldr	r3, [pc, #144]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f023 020f 	bic.w	r2, r3, #15
 8008072:	4922      	ldr	r1, [pc, #136]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	4313      	orrs	r3, r2
 8008078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800807a:	4b20      	ldr	r3, [pc, #128]	@ (80080fc <HAL_RCC_ClockConfig+0x1c4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d001      	beq.n	800808c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e032      	b.n	80080f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008098:	4b19      	ldr	r3, [pc, #100]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	4916      	ldr	r1, [pc, #88]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d009      	beq.n	80080ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080b6:	4b12      	ldr	r3, [pc, #72]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	490e      	ldr	r1, [pc, #56]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080ca:	f000 f821 	bl	8008110 <HAL_RCC_GetSysClockFreq>
 80080ce:	4602      	mov	r2, r0
 80080d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008100 <HAL_RCC_ClockConfig+0x1c8>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	490a      	ldr	r1, [pc, #40]	@ (8008104 <HAL_RCC_ClockConfig+0x1cc>)
 80080dc:	5ccb      	ldrb	r3, [r1, r3]
 80080de:	fa22 f303 	lsr.w	r3, r2, r3
 80080e2:	4a09      	ldr	r2, [pc, #36]	@ (8008108 <HAL_RCC_ClockConfig+0x1d0>)
 80080e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80080e6:	4b09      	ldr	r3, [pc, #36]	@ (800810c <HAL_RCC_ClockConfig+0x1d4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f9 fb5a 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	40023c00 	.word	0x40023c00
 8008100:	40023800 	.word	0x40023800
 8008104:	08027260 	.word	0x08027260
 8008108:	20000000 	.word	0x20000000
 800810c:	20000004 	.word	0x20000004

08008110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008114:	b090      	sub	sp, #64	@ 0x40
 8008116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	637b      	str	r3, [r7, #52]	@ 0x34
 800811c:	2300      	movs	r3, #0
 800811e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008120:	2300      	movs	r3, #0
 8008122:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008128:	4b59      	ldr	r3, [pc, #356]	@ (8008290 <HAL_RCC_GetSysClockFreq+0x180>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 030c 	and.w	r3, r3, #12
 8008130:	2b08      	cmp	r3, #8
 8008132:	d00d      	beq.n	8008150 <HAL_RCC_GetSysClockFreq+0x40>
 8008134:	2b08      	cmp	r3, #8
 8008136:	f200 80a1 	bhi.w	800827c <HAL_RCC_GetSysClockFreq+0x16c>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_RCC_GetSysClockFreq+0x34>
 800813e:	2b04      	cmp	r3, #4
 8008140:	d003      	beq.n	800814a <HAL_RCC_GetSysClockFreq+0x3a>
 8008142:	e09b      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008144:	4b53      	ldr	r3, [pc, #332]	@ (8008294 <HAL_RCC_GetSysClockFreq+0x184>)
 8008146:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008148:	e09b      	b.n	8008282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800814a:	4b53      	ldr	r3, [pc, #332]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x188>)
 800814c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800814e:	e098      	b.n	8008282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008150:	4b4f      	ldr	r3, [pc, #316]	@ (8008290 <HAL_RCC_GetSysClockFreq+0x180>)
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800815a:	4b4d      	ldr	r3, [pc, #308]	@ (8008290 <HAL_RCC_GetSysClockFreq+0x180>)
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d028      	beq.n	80081b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008166:	4b4a      	ldr	r3, [pc, #296]	@ (8008290 <HAL_RCC_GetSysClockFreq+0x180>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	099b      	lsrs	r3, r3, #6
 800816c:	2200      	movs	r2, #0
 800816e:	623b      	str	r3, [r7, #32]
 8008170:	627a      	str	r2, [r7, #36]	@ 0x24
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008178:	2100      	movs	r1, #0
 800817a:	4b47      	ldr	r3, [pc, #284]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x188>)
 800817c:	fb03 f201 	mul.w	r2, r3, r1
 8008180:	2300      	movs	r3, #0
 8008182:	fb00 f303 	mul.w	r3, r0, r3
 8008186:	4413      	add	r3, r2
 8008188:	4a43      	ldr	r2, [pc, #268]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x188>)
 800818a:	fba0 1202 	umull	r1, r2, r0, r2
 800818e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008190:	460a      	mov	r2, r1
 8008192:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008196:	4413      	add	r3, r2
 8008198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800819a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819c:	2200      	movs	r2, #0
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	61fa      	str	r2, [r7, #28]
 80081a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80081aa:	f7f8 f881 	bl	80002b0 <__aeabi_uldivmod>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4613      	mov	r3, r2
 80081b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b6:	e053      	b.n	8008260 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b8:	4b35      	ldr	r3, [pc, #212]	@ (8008290 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	099b      	lsrs	r3, r3, #6
 80081be:	2200      	movs	r2, #0
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	617a      	str	r2, [r7, #20]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80081ca:	f04f 0b00 	mov.w	fp, #0
 80081ce:	4652      	mov	r2, sl
 80081d0:	465b      	mov	r3, fp
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f04f 0100 	mov.w	r1, #0
 80081da:	0159      	lsls	r1, r3, #5
 80081dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081e0:	0150      	lsls	r0, r2, #5
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	ebb2 080a 	subs.w	r8, r2, sl
 80081ea:	eb63 090b 	sbc.w	r9, r3, fp
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80081fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80081fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008202:	ebb2 0408 	subs.w	r4, r2, r8
 8008206:	eb63 0509 	sbc.w	r5, r3, r9
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	00eb      	lsls	r3, r5, #3
 8008214:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008218:	00e2      	lsls	r2, r4, #3
 800821a:	4614      	mov	r4, r2
 800821c:	461d      	mov	r5, r3
 800821e:	eb14 030a 	adds.w	r3, r4, sl
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	eb45 030b 	adc.w	r3, r5, fp
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008236:	4629      	mov	r1, r5
 8008238:	028b      	lsls	r3, r1, #10
 800823a:	4621      	mov	r1, r4
 800823c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008240:	4621      	mov	r1, r4
 8008242:	028a      	lsls	r2, r1, #10
 8008244:	4610      	mov	r0, r2
 8008246:	4619      	mov	r1, r3
 8008248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824a:	2200      	movs	r2, #0
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	60fa      	str	r2, [r7, #12]
 8008250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008254:	f7f8 f82c 	bl	80002b0 <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4613      	mov	r3, r2
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008260:	4b0b      	ldr	r3, [pc, #44]	@ (8008290 <HAL_RCC_GetSysClockFreq+0x180>)
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	0c1b      	lsrs	r3, r3, #16
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	3301      	adds	r3, #1
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008270:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	fbb2 f3f3 	udiv	r3, r2, r3
 8008278:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800827a:	e002      	b.n	8008282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <HAL_RCC_GetSysClockFreq+0x184>)
 800827e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008284:	4618      	mov	r0, r3
 8008286:	3740      	adds	r7, #64	@ 0x40
 8008288:	46bd      	mov	sp, r7
 800828a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800828e:	bf00      	nop
 8008290:	40023800 	.word	0x40023800
 8008294:	00f42400 	.word	0x00f42400
 8008298:	017d7840 	.word	0x017d7840

0800829c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082a0:	4b03      	ldr	r3, [pc, #12]	@ (80082b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082a2:	681b      	ldr	r3, [r3, #0]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000000 	.word	0x20000000

080082b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082b8:	f7ff fff0 	bl	800829c <HAL_RCC_GetHCLKFreq>
 80082bc:	4602      	mov	r2, r0
 80082be:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	0a9b      	lsrs	r3, r3, #10
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	4903      	ldr	r1, [pc, #12]	@ (80082d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082ca:	5ccb      	ldrb	r3, [r1, r3]
 80082cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40023800 	.word	0x40023800
 80082d8:	08027270 	.word	0x08027270

080082dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082e0:	f7ff ffdc 	bl	800829c <HAL_RCC_GetHCLKFreq>
 80082e4:	4602      	mov	r2, r0
 80082e6:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	0b5b      	lsrs	r3, r3, #13
 80082ec:	f003 0307 	and.w	r3, r3, #7
 80082f0:	4903      	ldr	r1, [pc, #12]	@ (8008300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082f2:	5ccb      	ldrb	r3, [r1, r3]
 80082f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	40023800 	.word	0x40023800
 8008300:	08027270 	.word	0x08027270

08008304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	220f      	movs	r2, #15
 8008312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008314:	4b12      	ldr	r3, [pc, #72]	@ (8008360 <HAL_RCC_GetClockConfig+0x5c>)
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0203 	and.w	r2, r3, #3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008320:	4b0f      	ldr	r3, [pc, #60]	@ (8008360 <HAL_RCC_GetClockConfig+0x5c>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800832c:	4b0c      	ldr	r3, [pc, #48]	@ (8008360 <HAL_RCC_GetClockConfig+0x5c>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008338:	4b09      	ldr	r3, [pc, #36]	@ (8008360 <HAL_RCC_GetClockConfig+0x5c>)
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	08db      	lsrs	r3, r3, #3
 800833e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008346:	4b07      	ldr	r3, [pc, #28]	@ (8008364 <HAL_RCC_GetClockConfig+0x60>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 020f 	and.w	r2, r3, #15
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	601a      	str	r2, [r3, #0]
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40023800 	.word	0x40023800
 8008364:	40023c00 	.word	0x40023c00

08008368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d012      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008390:	4b69      	ldr	r3, [pc, #420]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	4a68      	ldr	r2, [pc, #416]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008396:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800839a:	6093      	str	r3, [r2, #8]
 800839c:	4b66      	ldr	r3, [pc, #408]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a4:	4964      	ldr	r1, [pc, #400]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083b2:	2301      	movs	r3, #1
 80083b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d017      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083c2:	4b5d      	ldr	r3, [pc, #372]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d0:	4959      	ldr	r1, [pc, #356]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083e0:	d101      	bne.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80083e2:	2301      	movs	r3, #1
 80083e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80083ee:	2301      	movs	r3, #1
 80083f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d017      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80083fe:	4b4e      	ldr	r3, [pc, #312]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008404:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	494a      	ldr	r1, [pc, #296]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800841c:	d101      	bne.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800841e:	2301      	movs	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800842a:	2301      	movs	r3, #1
 800842c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800843a:	2301      	movs	r3, #1
 800843c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 808b 	beq.w	8008562 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800844c:	4b3a      	ldr	r3, [pc, #232]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800844e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008450:	4a39      	ldr	r2, [pc, #228]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008456:	6413      	str	r3, [r2, #64]	@ 0x40
 8008458:	4b37      	ldr	r3, [pc, #220]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008460:	60bb      	str	r3, [r7, #8]
 8008462:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008464:	4b35      	ldr	r3, [pc, #212]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a34      	ldr	r2, [pc, #208]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800846a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800846e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008470:	f7fa f842 	bl	80024f8 <HAL_GetTick>
 8008474:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008476:	e008      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008478:	f7fa f83e 	bl	80024f8 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b64      	cmp	r3, #100	@ 0x64
 8008484:	d901      	bls.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e357      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800848a:	4b2c      	ldr	r3, [pc, #176]	@ (800853c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0f0      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008496:	4b28      	ldr	r3, [pc, #160]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800849e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d035      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d02e      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084b4:	4b20      	ldr	r3, [pc, #128]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084be:	4b1e      	ldr	r3, [pc, #120]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084c8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80084d6:	4a18      	ldr	r2, [pc, #96]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084dc:	4b16      	ldr	r3, [pc, #88]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d114      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e8:	f7fa f806 	bl	80024f8 <HAL_GetTick>
 80084ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ee:	e00a      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084f0:	f7fa f802 	bl	80024f8 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084fe:	4293      	cmp	r3, r2
 8008500:	d901      	bls.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e319      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008506:	4b0c      	ldr	r3, [pc, #48]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0ee      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800851e:	d111      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008520:	4b05      	ldr	r3, [pc, #20]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800852c:	4b04      	ldr	r3, [pc, #16]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800852e:	400b      	ands	r3, r1
 8008530:	4901      	ldr	r1, [pc, #4]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008532:	4313      	orrs	r3, r2
 8008534:	608b      	str	r3, [r1, #8]
 8008536:	e00b      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008538:	40023800 	.word	0x40023800
 800853c:	40007000 	.word	0x40007000
 8008540:	0ffffcff 	.word	0x0ffffcff
 8008544:	4baa      	ldr	r3, [pc, #680]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	4aa9      	ldr	r2, [pc, #676]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800854e:	6093      	str	r3, [r2, #8]
 8008550:	4ba7      	ldr	r3, [pc, #668]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008552:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800855c:	49a4      	ldr	r1, [pc, #656]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855e:	4313      	orrs	r3, r2
 8008560:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0310 	and.w	r3, r3, #16
 800856a:	2b00      	cmp	r3, #0
 800856c:	d010      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800856e:	4ba0      	ldr	r3, [pc, #640]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008574:	4a9e      	ldr	r2, [pc, #632]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800857a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800857e:	4b9c      	ldr	r3, [pc, #624]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008580:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	4999      	ldr	r1, [pc, #612]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800859c:	4b94      	ldr	r3, [pc, #592]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085aa:	4991      	ldr	r1, [pc, #580]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085be:	4b8c      	ldr	r3, [pc, #560]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085cc:	4988      	ldr	r1, [pc, #544]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085e0:	4b83      	ldr	r3, [pc, #524]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ee:	4980      	ldr	r1, [pc, #512]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008602:	4b7b      	ldr	r3, [pc, #492]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008608:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008610:	4977      	ldr	r1, [pc, #476]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008624:	4b72      	ldr	r3, [pc, #456]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862a:	f023 0203 	bic.w	r2, r3, #3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	496f      	ldr	r1, [pc, #444]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008646:	4b6a      	ldr	r3, [pc, #424]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864c:	f023 020c 	bic.w	r2, r3, #12
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008654:	4966      	ldr	r1, [pc, #408]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00a      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008668:	4b61      	ldr	r3, [pc, #388]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008676:	495e      	ldr	r1, [pc, #376]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008678:	4313      	orrs	r3, r2
 800867a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800868a:	4b59      	ldr	r3, [pc, #356]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008690:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008698:	4955      	ldr	r1, [pc, #340]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869a:	4313      	orrs	r3, r2
 800869c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086ac:	4b50      	ldr	r3, [pc, #320]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ba:	494d      	ldr	r1, [pc, #308]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80086ce:	4b48      	ldr	r3, [pc, #288]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086dc:	4944      	ldr	r1, [pc, #272]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00a      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80086f0:	4b3f      	ldr	r3, [pc, #252]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086fe:	493c      	ldr	r1, [pc, #240]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008700:	4313      	orrs	r3, r2
 8008702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008712:	4b37      	ldr	r3, [pc, #220]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008718:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008720:	4933      	ldr	r1, [pc, #204]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008722:	4313      	orrs	r3, r2
 8008724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008734:	4b2e      	ldr	r3, [pc, #184]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800873a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008742:	492b      	ldr	r1, [pc, #172]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008744:	4313      	orrs	r3, r2
 8008746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d011      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008756:	4b26      	ldr	r3, [pc, #152]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800875c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008764:	4922      	ldr	r1, [pc, #136]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008766:	4313      	orrs	r3, r2
 8008768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008774:	d101      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008776:	2301      	movs	r3, #1
 8008778:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008786:	2301      	movs	r3, #1
 8008788:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008796:	4b16      	ldr	r3, [pc, #88]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800879c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a4:	4912      	ldr	r1, [pc, #72]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087b8:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c8:	4909      	ldr	r1, [pc, #36]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d006      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 80d9 	beq.w	8008996 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087e4:	4b02      	ldr	r3, [pc, #8]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a01      	ldr	r2, [pc, #4]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80087ee:	e001      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80087f0:	40023800 	.word	0x40023800
 80087f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087f6:	f7f9 fe7f 	bl	80024f8 <HAL_GetTick>
 80087fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087fc:	e008      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087fe:	f7f9 fe7b 	bl	80024f8 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b64      	cmp	r3, #100	@ 0x64
 800880a:	d901      	bls.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e194      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008810:	4b6c      	ldr	r3, [pc, #432]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1f0      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d021      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11d      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008830:	4b64      	ldr	r3, [pc, #400]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008836:	0c1b      	lsrs	r3, r3, #16
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800883e:	4b61      	ldr	r3, [pc, #388]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008844:	0e1b      	lsrs	r3, r3, #24
 8008846:	f003 030f 	and.w	r3, r3, #15
 800884a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	019a      	lsls	r2, r3, #6
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	041b      	lsls	r3, r3, #16
 8008856:	431a      	orrs	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	061b      	lsls	r3, r3, #24
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	071b      	lsls	r3, r3, #28
 8008864:	4957      	ldr	r1, [pc, #348]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008880:	d00a      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800888a:	2b00      	cmp	r3, #0
 800888c:	d02e      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008896:	d129      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008898:	4b4a      	ldr	r3, [pc, #296]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	f003 0303 	and.w	r3, r3, #3
 80088a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088a6:	4b47      	ldr	r3, [pc, #284]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088ac:	0f1b      	lsrs	r3, r3, #28
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	019a      	lsls	r2, r3, #6
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	041b      	lsls	r3, r3, #16
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	061b      	lsls	r3, r3, #24
 80088c6:	431a      	orrs	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	071b      	lsls	r3, r3, #28
 80088cc:	493d      	ldr	r1, [pc, #244]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088d4:	4b3b      	ldr	r3, [pc, #236]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088da:	f023 021f 	bic.w	r2, r3, #31
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e2:	3b01      	subs	r3, #1
 80088e4:	4937      	ldr	r1, [pc, #220]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d01d      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088f8:	4b32      	ldr	r3, [pc, #200]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088fe:	0e1b      	lsrs	r3, r3, #24
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008906:	4b2f      	ldr	r3, [pc, #188]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800890c:	0f1b      	lsrs	r3, r3, #28
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	019a      	lsls	r2, r3, #6
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	431a      	orrs	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	061b      	lsls	r3, r3, #24
 8008926:	431a      	orrs	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	071b      	lsls	r3, r3, #28
 800892c:	4925      	ldr	r1, [pc, #148]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800892e:	4313      	orrs	r3, r2
 8008930:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d011      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	019a      	lsls	r2, r3, #6
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	041b      	lsls	r3, r3, #16
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	061b      	lsls	r3, r3, #24
 8008954:	431a      	orrs	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	071b      	lsls	r3, r3, #28
 800895c:	4919      	ldr	r1, [pc, #100]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008964:	4b17      	ldr	r3, [pc, #92]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a16      	ldr	r2, [pc, #88]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800896a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800896e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008970:	f7f9 fdc2 	bl	80024f8 <HAL_GetTick>
 8008974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008976:	e008      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008978:	f7f9 fdbe 	bl	80024f8 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b64      	cmp	r3, #100	@ 0x64
 8008984:	d901      	bls.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e0d7      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800898a:	4b0e      	ldr	r3, [pc, #56]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f0      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b01      	cmp	r3, #1
 800899a:	f040 80cd 	bne.w	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800899e:	4b09      	ldr	r3, [pc, #36]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a08      	ldr	r2, [pc, #32]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089aa:	f7f9 fda5 	bl	80024f8 <HAL_GetTick>
 80089ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089b0:	e00a      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089b2:	f7f9 fda1 	bl	80024f8 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	2b64      	cmp	r3, #100	@ 0x64
 80089be:	d903      	bls.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e0ba      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089c8:	4b5e      	ldr	r3, [pc, #376]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d4:	d0ed      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d02e      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d12a      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089fe:	4b51      	ldr	r3, [pc, #324]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a04:	0c1b      	lsrs	r3, r3, #16
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a12:	0f1b      	lsrs	r3, r3, #28
 8008a14:	f003 0307 	and.w	r3, r3, #7
 8008a18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	019a      	lsls	r2, r3, #6
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	061b      	lsls	r3, r3, #24
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	071b      	lsls	r3, r3, #28
 8008a32:	4944      	ldr	r1, [pc, #272]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a3a:	4b42      	ldr	r3, [pc, #264]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	021b      	lsls	r3, r3, #8
 8008a4c:	493d      	ldr	r1, [pc, #244]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d022      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a68:	d11d      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a6a:	4b36      	ldr	r3, [pc, #216]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a70:	0e1b      	lsrs	r3, r3, #24
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a78:	4b32      	ldr	r3, [pc, #200]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a7e:	0f1b      	lsrs	r3, r3, #28
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	019a      	lsls	r2, r3, #6
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	431a      	orrs	r2, r3
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	061b      	lsls	r3, r3, #24
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	071b      	lsls	r3, r3, #28
 8008a9e:	4929      	ldr	r1, [pc, #164]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d028      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ab2:	4b24      	ldr	r3, [pc, #144]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab8:	0e1b      	lsrs	r3, r3, #24
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ac0:	4b20      	ldr	r3, [pc, #128]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac6:	0c1b      	lsrs	r3, r3, #16
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	019a      	lsls	r2, r3, #6
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	041b      	lsls	r3, r3, #16
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	061b      	lsls	r3, r3, #24
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	071b      	lsls	r3, r3, #28
 8008ae6:	4917      	ldr	r1, [pc, #92]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008aee:	4b15      	ldr	r3, [pc, #84]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008af4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	4911      	ldr	r1, [pc, #68]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b04:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a0e      	ldr	r2, [pc, #56]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b10:	f7f9 fcf2 	bl	80024f8 <HAL_GetTick>
 8008b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b16:	e008      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b18:	f7f9 fcee 	bl	80024f8 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b64      	cmp	r3, #100	@ 0x64
 8008b24:	d901      	bls.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e007      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b2a:	4b06      	ldr	r3, [pc, #24]	@ (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b36:	d1ef      	bne.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40023800 	.word	0x40023800

08008b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e09d      	b.n	8008c96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d108      	bne.n	8008b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b6a:	d009      	beq.n	8008b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	61da      	str	r2, [r3, #28]
 8008b72:	e005      	b.n	8008b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f8 fc6c 	bl	8001478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008bc0:	d902      	bls.n	8008bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	e002      	b.n	8008bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008bd6:	d007      	beq.n	8008be8 <HAL_SPI_Init+0xa0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008be0:	d002      	beq.n	8008be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	431a      	orrs	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c20:	431a      	orrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2a:	ea42 0103 	orr.w	r1, r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	0c1b      	lsrs	r3, r3, #16
 8008c44:	f003 0204 	and.w	r2, r3, #4
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	431a      	orrs	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008c64:	ea42 0103 	orr.w	r1, r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d001      	beq.n	8008cbe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e0d4      	b.n	8008e68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_SPI_Transmit_DMA+0x2a>
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e0cc      	b.n	8008e68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_SPI_Transmit_DMA+0x3c>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e0c5      	b.n	8008e68 <HAL_SPI_Transmit_DMA+0x1c8>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2203      	movs	r2, #3
 8008ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	88fa      	ldrh	r2, [r7, #6]
 8008cfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	88fa      	ldrh	r2, [r7, #6]
 8008d02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d2e:	d10f      	bne.n	8008d50 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d54:	4a46      	ldr	r2, [pc, #280]	@ (8008e70 <HAL_SPI_Transmit_DMA+0x1d0>)
 8008d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d5c:	4a45      	ldr	r2, [pc, #276]	@ (8008e74 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d64:	4a44      	ldr	r2, [pc, #272]	@ (8008e78 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008d66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d7e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d88:	d82d      	bhi.n	8008de6 <HAL_SPI_Transmit_DMA+0x146>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d94:	d127      	bne.n	8008de6 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10f      	bne.n	8008dc4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008db2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008dc2:	e010      	b.n	8008de6 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dd2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	085b      	lsrs	r3, r3, #1
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3301      	adds	r3, #1
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	4619      	mov	r1, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	330c      	adds	r3, #12
 8008df6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dfc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dfe:	f7fa fbcb 	bl	8003598 <HAL_DMA_Start_IT>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00b      	beq.n	8008e20 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e0c:	f043 0210 	orr.w	r2, r3, #16
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e023      	b.n	8008e68 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2a:	2b40      	cmp	r3, #64	@ 0x40
 8008e2c:	d007      	beq.n	8008e3e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e3c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0220 	orr.w	r2, r2, #32
 8008e54:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0202 	orr.w	r2, r2, #2
 8008e64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	08009811 	.word	0x08009811
 8008e74:	0800962d 	.word	0x0800962d
 8008e78:	08009865 	.word	0x08009865

08008e7c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d001      	beq.n	8008e9a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008e96:	2302      	movs	r3, #2
 8008e98:	e105      	b.n	80090a6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <HAL_SPI_Receive_DMA+0x2a>
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e0fd      	b.n	80090a6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d110      	bne.n	8008ed4 <HAL_SPI_Receive_DMA+0x58>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008eba:	d10b      	bne.n	8008ed4 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f8f6 	bl	80090bc <HAL_SPI_TransmitReceive_DMA>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	e0e8      	b.n	80090a6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <HAL_SPI_Receive_DMA+0x66>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	e0e1      	b.n	80090a6 <HAL_SPI_Receive_DMA+0x22a>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2204      	movs	r2, #4
 8008eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	88fa      	ldrh	r2, [r7, #6]
 8008f02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	88fa      	ldrh	r2, [r7, #6]
 8008f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f2e:	d10f      	bne.n	8008f50 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f5e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f68:	d908      	bls.n	8008f7c <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f78:	605a      	str	r2, [r3, #4]
 8008f7a:	e042      	b.n	8009002 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f8a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f96:	d134      	bne.n	8009002 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008fa6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d111      	bne.n	8008fdc <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fc6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	085b      	lsrs	r3, r3, #1
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008fda:	e012      	b.n	8009002 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fea:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	085b      	lsrs	r3, r3, #1
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009006:	4a2a      	ldr	r2, [pc, #168]	@ (80090b0 <HAL_SPI_Receive_DMA+0x234>)
 8009008:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800900e:	4a29      	ldr	r2, [pc, #164]	@ (80090b4 <HAL_SPI_Receive_DMA+0x238>)
 8009010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009016:	4a28      	ldr	r2, [pc, #160]	@ (80090b8 <HAL_SPI_Receive_DMA+0x23c>)
 8009018:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901e:	2200      	movs	r2, #0
 8009020:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	330c      	adds	r3, #12
 800902c:	4619      	mov	r1, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009032:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800903a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800903c:	f7fa faac 	bl	8003598 <HAL_DMA_Start_IT>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00b      	beq.n	800905e <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800904a:	f043 0210 	orr.w	r2, r3, #16
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e023      	b.n	80090a6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009068:	2b40      	cmp	r3, #64	@ 0x40
 800906a:	d007      	beq.n	800907c <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800907a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0220 	orr.w	r2, r2, #32
 8009092:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0201 	orr.w	r2, r2, #1
 80090a2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	0800982d 	.word	0x0800982d
 80090b4:	080096d5 	.word	0x080096d5
 80090b8:	08009865 	.word	0x08009865

080090bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090d0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d00c      	beq.n	80090f8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090e4:	d106      	bne.n	80090f4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d102      	bne.n	80090f4 <HAL_SPI_TransmitReceive_DMA+0x38>
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d001      	beq.n	80090f8 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80090f4:	2302      	movs	r3, #2
 80090f6:	e158      	b.n	80093aa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d005      	beq.n	800910a <HAL_SPI_TransmitReceive_DMA+0x4e>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009104:	887b      	ldrh	r3, [r7, #2]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e14d      	b.n	80093aa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009114:	2b01      	cmp	r3, #1
 8009116:	d101      	bne.n	800911c <HAL_SPI_TransmitReceive_DMA+0x60>
 8009118:	2302      	movs	r3, #2
 800911a:	e146      	b.n	80093aa <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b04      	cmp	r3, #4
 800912e:	d003      	beq.n	8009138 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2205      	movs	r2, #5
 8009134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	887a      	ldrh	r2, [r7, #2]
 8009148:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	887a      	ldrh	r2, [r7, #2]
 800914e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	887a      	ldrh	r2, [r7, #2]
 800915a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	887a      	ldrh	r2, [r7, #2]
 8009162:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009180:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800918a:	d908      	bls.n	800919e <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800919a:	605a      	str	r2, [r3, #4]
 800919c:	e06f      	b.n	800927e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80091ac:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b8:	d126      	bne.n	8009208 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10f      	bne.n	80091e6 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091d4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091da:	b29b      	uxth	r3, r3
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	b29a      	uxth	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091e4:	e010      	b.n	8009208 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091f4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	b29b      	uxth	r3, r3
 8009200:	3301      	adds	r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009212:	d134      	bne.n	800927e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009222:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800922a:	b29b      	uxth	r3, r3
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d111      	bne.n	8009258 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009242:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800924a:	b29b      	uxth	r3, r3
 800924c:	085b      	lsrs	r3, r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009256:	e012      	b.n	800927e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009266:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800926e:	b29b      	uxth	r3, r3
 8009270:	085b      	lsrs	r3, r3, #1
 8009272:	b29b      	uxth	r3, r3
 8009274:	3301      	adds	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b04      	cmp	r3, #4
 8009288:	d108      	bne.n	800929c <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800928e:	4a49      	ldr	r2, [pc, #292]	@ (80093b4 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8009290:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009296:	4a48      	ldr	r2, [pc, #288]	@ (80093b8 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8009298:	63da      	str	r2, [r3, #60]	@ 0x3c
 800929a:	e007      	b.n	80092ac <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a0:	4a46      	ldr	r2, [pc, #280]	@ (80093bc <HAL_SPI_TransmitReceive_DMA+0x300>)
 80092a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a8:	4a45      	ldr	r2, [pc, #276]	@ (80093c0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80092aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b0:	4a44      	ldr	r2, [pc, #272]	@ (80093c4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80092b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b8:	2200      	movs	r2, #0
 80092ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	330c      	adds	r3, #12
 80092c6:	4619      	mov	r1, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80092d6:	f7fa f95f 	bl	8003598 <HAL_DMA_Start_IT>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e4:	f043 0210 	orr.w	r2, r3, #16
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e058      	b.n	80093aa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0201 	orr.w	r2, r2, #1
 8009306:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930c:	2200      	movs	r2, #0
 800930e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009314:	2200      	movs	r2, #0
 8009316:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800931c:	2200      	movs	r2, #0
 800931e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009324:	2200      	movs	r2, #0
 8009326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009330:	4619      	mov	r1, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	330c      	adds	r3, #12
 8009338:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800933e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009340:	f7fa f92a 	bl	8003598 <HAL_DMA_Start_IT>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800934e:	f043 0210 	orr.w	r2, r3, #16
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e023      	b.n	80093aa <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936c:	2b40      	cmp	r3, #64	@ 0x40
 800936e:	d007      	beq.n	8009380 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800937e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0220 	orr.w	r2, r2, #32
 8009396:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0202 	orr.w	r2, r2, #2
 80093a6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	0800982d 	.word	0x0800982d
 80093b8:	080096d5 	.word	0x080096d5
 80093bc:	08009849 	.word	0x08009849
 80093c0:	0800977f 	.word	0x0800977f
 80093c4:	08009865 	.word	0x08009865

080093c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	099b      	lsrs	r3, r3, #6
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10f      	bne.n	800940c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	099b      	lsrs	r3, r3, #6
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d004      	beq.n	800940c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	4798      	blx	r3
    return;
 800940a:	e0d7      	b.n	80095bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	085b      	lsrs	r3, r3, #1
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <HAL_SPI_IRQHandler+0x66>
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	09db      	lsrs	r3, r3, #7
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	4798      	blx	r3
    return;
 800942c:	e0c6      	b.n	80095bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10c      	bne.n	8009454 <HAL_SPI_IRQHandler+0x8c>
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	099b      	lsrs	r3, r3, #6
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	0a1b      	lsrs	r3, r3, #8
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 80b4 	beq.w	80095bc <HAL_SPI_IRQHandler+0x1f4>
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	095b      	lsrs	r3, r3, #5
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 80ad 	beq.w	80095bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	099b      	lsrs	r3, r3, #6
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d023      	beq.n	80094b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b03      	cmp	r3, #3
 8009478:	d011      	beq.n	800949e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947e:	f043 0204 	orr.w	r2, r3, #4
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	e00b      	b.n	80094b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800949e:	2300      	movs	r3, #0
 80094a0:	613b      	str	r3, [r7, #16]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	693b      	ldr	r3, [r7, #16]
        return;
 80094b4:	e082      	b.n	80095bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	095b      	lsrs	r3, r3, #5
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d014      	beq.n	80094ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c6:	f043 0201 	orr.w	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094ce:	2300      	movs	r3, #0
 80094d0:	60fb      	str	r3, [r7, #12]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00c      	beq.n	8009512 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fc:	f043 0208 	orr.w	r2, r3, #8
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009504:	2300      	movs	r3, #0
 8009506:	60bb      	str	r3, [r7, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	60bb      	str	r3, [r7, #8]
 8009510:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009516:	2b00      	cmp	r3, #0
 8009518:	d04f      	beq.n	80095ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009528:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <HAL_SPI_IRQHandler+0x17e>
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d034      	beq.n	80095b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0203 	bic.w	r2, r2, #3
 8009554:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800955a:	2b00      	cmp	r3, #0
 800955c:	d011      	beq.n	8009582 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009562:	4a18      	ldr	r2, [pc, #96]	@ (80095c4 <HAL_SPI_IRQHandler+0x1fc>)
 8009564:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956a:	4618      	mov	r0, r3
 800956c:	f7fa f8e4 	bl	8003738 <HAL_DMA_Abort_IT>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800957a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009586:	2b00      	cmp	r3, #0
 8009588:	d016      	beq.n	80095b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800958e:	4a0d      	ldr	r2, [pc, #52]	@ (80095c4 <HAL_SPI_IRQHandler+0x1fc>)
 8009590:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009596:	4618      	mov	r0, r3
 8009598:	f7fa f8ce 	bl	8003738 <HAL_DMA_Abort_IT>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80095ae:	e003      	b.n	80095b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f831 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80095b6:	e000      	b.n	80095ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80095b8:	bf00      	nop
    return;
 80095ba:	bf00      	nop
  }
}
 80095bc:	3720      	adds	r7, #32
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	080098a5 	.word	0x080098a5

080095c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009638:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800963a:	f7f8 ff5d 	bl	80024f8 <HAL_GetTick>
 800963e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800964a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800964e:	d03b      	beq.n	80096c8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0220 	bic.w	r2, r2, #32
 800965e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0202 	bic.w	r2, r2, #2
 800966e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	2164      	movs	r1, #100	@ 0x64
 8009674:	6978      	ldr	r0, [r7, #20]
 8009676:	f000 fac5 	bl	8009c04 <SPI_EndRxTxTransaction>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d005      	beq.n	800968c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009684:	f043 0220 	orr.w	r2, r3, #32
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	2200      	movs	r2, #0
 80096ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096c0:	6978      	ldr	r0, [r7, #20]
 80096c2:	f7ff ffa9 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096c6:	e002      	b.n	80096ce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80096c8:	6978      	ldr	r0, [r7, #20]
 80096ca:	f017 fbff 	bl	8020ecc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096e2:	f7f8 ff09 	bl	80024f8 <HAL_GetTick>
 80096e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f6:	d03c      	beq.n	8009772 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0220 	bic.w	r2, r2, #32
 8009706:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10d      	bne.n	800972c <SPI_DMAReceiveCplt+0x58>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009718:	d108      	bne.n	800972c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0203 	bic.w	r2, r2, #3
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	e007      	b.n	800973c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 0201 	bic.w	r2, r2, #1
 800973a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	2164      	movs	r1, #100	@ 0x64
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f9e3 	bl	8009b0c <SPI_EndRxTransaction>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff ff54 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009770:	e002      	b.n	8009778 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f017 fbca 	bl	8020f0c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800978c:	f7f8 feb4 	bl	80024f8 <HAL_GetTick>
 8009790:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800979c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a0:	d030      	beq.n	8009804 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0220 	bic.w	r2, r2, #32
 80097b0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	2164      	movs	r1, #100	@ 0x64
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 fa24 	bl	8009c04 <SPI_EndRxTxTransaction>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d005      	beq.n	80097ce <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097c6:	f043 0220 	orr.w	r2, r3, #32
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0203 	bic.w	r2, r2, #3
 80097dc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7ff ff0b 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009802:	e002      	b.n	800980a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7ff fedf 	bl	80095c8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fedc 	bl	80095dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009838:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff fed8 	bl	80095f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009854:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7ff fed4 	bl	8009604 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009870:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0203 	bic.w	r2, r2, #3
 8009880:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009886:	f043 0210 	orr.w	r2, r3, #16
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff febe 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800989c:	bf00      	nop
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff fea9 	bl	8009618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80098e0:	f7f8 fe0a 	bl	80024f8 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e8:	1a9b      	subs	r3, r3, r2
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4413      	add	r3, r2
 80098ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80098f0:	f7f8 fe02 	bl	80024f8 <HAL_GetTick>
 80098f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098f6:	4b39      	ldr	r3, [pc, #228]	@ (80099dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	015b      	lsls	r3, r3, #5
 80098fc:	0d1b      	lsrs	r3, r3, #20
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	fb02 f303 	mul.w	r3, r2, r3
 8009904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009906:	e055      	b.n	80099b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800990e:	d051      	beq.n	80099b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009910:	f7f8 fdf2 	bl	80024f8 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	429a      	cmp	r2, r3
 800991e:	d902      	bls.n	8009926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d13d      	bne.n	80099a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800993e:	d111      	bne.n	8009964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009948:	d004      	beq.n	8009954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009952:	d107      	bne.n	8009964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800996c:	d10f      	bne.n	800998e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800998c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e018      	b.n	80099d4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	61fb      	str	r3, [r7, #28]
 80099ac:	e002      	b.n	80099b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4013      	ands	r3, r2
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	bf0c      	ite	eq
 80099c4:	2301      	moveq	r3, #1
 80099c6:	2300      	movne	r3, #0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	461a      	mov	r2, r3
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d19a      	bne.n	8009908 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000000 	.word	0x20000000

080099e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08a      	sub	sp, #40	@ 0x28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80099f2:	f7f8 fd81 	bl	80024f8 <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fa:	1a9b      	subs	r3, r3, r2
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	4413      	add	r3, r2
 8009a00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009a02:	f7f8 fd79 	bl	80024f8 <HAL_GetTick>
 8009a06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	330c      	adds	r3, #12
 8009a0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a10:	4b3d      	ldr	r3, [pc, #244]	@ (8009b08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	00da      	lsls	r2, r3, #3
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	0d1b      	lsrs	r3, r3, #20
 8009a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a22:	fb02 f303 	mul.w	r3, r2, r3
 8009a26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a28:	e061      	b.n	8009aee <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009a30:	d107      	bne.n	8009a42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d104      	bne.n	8009a42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a48:	d051      	beq.n	8009aee <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a4a:	f7f8 fd55 	bl	80024f8 <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d902      	bls.n	8009a60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d13d      	bne.n	8009adc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a78:	d111      	bne.n	8009a9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a82:	d004      	beq.n	8009a8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a8c:	d107      	bne.n	8009a9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aa6:	d10f      	bne.n	8009ac8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ac6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e011      	b.n	8009b00 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ae6:	e002      	b.n	8009aee <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4013      	ands	r3, r2
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d195      	bne.n	8009a2a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3728      	adds	r7, #40	@ 0x28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20000000 	.word	0x20000000

08009b0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b20:	d111      	bne.n	8009b46 <SPI_EndRxTransaction+0x3a>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b2a:	d004      	beq.n	8009b36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b34:	d107      	bne.n	8009b46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b4e:	d112      	bne.n	8009b76 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2200      	movs	r2, #0
 8009b58:	2180      	movs	r1, #128	@ 0x80
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff feb8 	bl	80098d0 <SPI_WaitFlagStateUntilTimeout>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d021      	beq.n	8009baa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b6a:	f043 0220 	orr.w	r2, r3, #32
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e03d      	b.n	8009bf2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b76:	4b21      	ldr	r3, [pc, #132]	@ (8009bfc <SPI_EndRxTransaction+0xf0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a21      	ldr	r2, [pc, #132]	@ (8009c00 <SPI_EndRxTransaction+0xf4>)
 8009b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b80:	0d5b      	lsrs	r3, r3, #21
 8009b82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b86:	fb02 f303 	mul.w	r3, r2, r3
 8009b8a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ba2:	2b80      	cmp	r3, #128	@ 0x80
 8009ba4:	d0f2      	beq.n	8009b8c <SPI_EndRxTransaction+0x80>
 8009ba6:	e000      	b.n	8009baa <SPI_EndRxTransaction+0x9e>
        break;
 8009ba8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bb2:	d11d      	bne.n	8009bf0 <SPI_EndRxTransaction+0xe4>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bbc:	d004      	beq.n	8009bc8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc6:	d113      	bne.n	8009bf0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7ff ff03 	bl	80099e0 <SPI_WaitFifoStateUntilTimeout>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009be4:	f043 0220 	orr.w	r2, r3, #32
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e000      	b.n	8009bf2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20000000 	.word	0x20000000
 8009c00:	165e9f81 	.word	0x165e9f81

08009c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff fedf 	bl	80099e0 <SPI_WaitFifoStateUntilTimeout>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d007      	beq.n	8009c38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c2c:	f043 0220 	orr.w	r2, r3, #32
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e046      	b.n	8009cc6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c38:	4b25      	ldr	r3, [pc, #148]	@ (8009cd0 <SPI_EndRxTxTransaction+0xcc>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a25      	ldr	r2, [pc, #148]	@ (8009cd4 <SPI_EndRxTxTransaction+0xd0>)
 8009c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c42:	0d5b      	lsrs	r3, r3, #21
 8009c44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c48:	fb02 f303 	mul.w	r3, r2, r3
 8009c4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c56:	d112      	bne.n	8009c7e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2180      	movs	r1, #128	@ 0x80
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7ff fe34 	bl	80098d0 <SPI_WaitFlagStateUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d016      	beq.n	8009c9c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c72:	f043 0220 	orr.w	r2, r3, #32
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e023      	b.n	8009cc6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00a      	beq.n	8009c9a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c94:	2b80      	cmp	r3, #128	@ 0x80
 8009c96:	d0f2      	beq.n	8009c7e <SPI_EndRxTxTransaction+0x7a>
 8009c98:	e000      	b.n	8009c9c <SPI_EndRxTxTransaction+0x98>
        break;
 8009c9a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fe99 	bl	80099e0 <SPI_WaitFifoStateUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d007      	beq.n	8009cc4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cb8:	f043 0220 	orr.w	r2, r3, #32
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e000      	b.n	8009cc6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000000 	.word	0x20000000
 8009cd4:	165e9f81 	.word	0x165e9f81

08009cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e049      	b.n	8009d7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7f8 f824 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	4619      	mov	r1, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	f000 fb40 	bl	800a39c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d001      	beq.n	8009da0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e04c      	b.n	8009e3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a26      	ldr	r2, [pc, #152]	@ (8009e48 <HAL_TIM_Base_Start+0xc0>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d022      	beq.n	8009df8 <HAL_TIM_Base_Start+0x70>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dba:	d01d      	beq.n	8009df8 <HAL_TIM_Base_Start+0x70>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a22      	ldr	r2, [pc, #136]	@ (8009e4c <HAL_TIM_Base_Start+0xc4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d018      	beq.n	8009df8 <HAL_TIM_Base_Start+0x70>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a21      	ldr	r2, [pc, #132]	@ (8009e50 <HAL_TIM_Base_Start+0xc8>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d013      	beq.n	8009df8 <HAL_TIM_Base_Start+0x70>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e54 <HAL_TIM_Base_Start+0xcc>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00e      	beq.n	8009df8 <HAL_TIM_Base_Start+0x70>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a1e      	ldr	r2, [pc, #120]	@ (8009e58 <HAL_TIM_Base_Start+0xd0>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d009      	beq.n	8009df8 <HAL_TIM_Base_Start+0x70>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a1c      	ldr	r2, [pc, #112]	@ (8009e5c <HAL_TIM_Base_Start+0xd4>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d004      	beq.n	8009df8 <HAL_TIM_Base_Start+0x70>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a1b      	ldr	r2, [pc, #108]	@ (8009e60 <HAL_TIM_Base_Start+0xd8>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d115      	bne.n	8009e24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	4b19      	ldr	r3, [pc, #100]	@ (8009e64 <HAL_TIM_Base_Start+0xdc>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b06      	cmp	r3, #6
 8009e08:	d015      	beq.n	8009e36 <HAL_TIM_Base_Start+0xae>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e10:	d011      	beq.n	8009e36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0201 	orr.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e22:	e008      	b.n	8009e36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0201 	orr.w	r2, r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e000      	b.n	8009e38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	40010000 	.word	0x40010000
 8009e4c:	40000400 	.word	0x40000400
 8009e50:	40000800 	.word	0x40000800
 8009e54:	40000c00 	.word	0x40000c00
 8009e58:	40010400 	.word	0x40010400
 8009e5c:	40014000 	.word	0x40014000
 8009e60:	40001800 	.word	0x40001800
 8009e64:	00010007 	.word	0x00010007

08009e68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6a1a      	ldr	r2, [r3, #32]
 8009e76:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb4 <HAL_TIM_Base_Stop+0x4c>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10f      	bne.n	8009e9e <HAL_TIM_Base_Stop+0x36>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6a1a      	ldr	r2, [r3, #32]
 8009e84:	f240 4344 	movw	r3, #1092	@ 0x444
 8009e88:	4013      	ands	r3, r2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d107      	bne.n	8009e9e <HAL_TIM_Base_Stop+0x36>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0201 	bic.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	00111111 	.word	0x00111111

08009eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d001      	beq.n	8009ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e054      	b.n	8009f7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f042 0201 	orr.w	r2, r2, #1
 8009ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a26      	ldr	r2, [pc, #152]	@ (8009f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d022      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009efa:	d01d      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a22      	ldr	r2, [pc, #136]	@ (8009f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d018      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a21      	ldr	r2, [pc, #132]	@ (8009f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d013      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1f      	ldr	r2, [pc, #124]	@ (8009f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00e      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009f98 <HAL_TIM_Base_Start_IT+0xe0>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d009      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a1c      	ldr	r2, [pc, #112]	@ (8009f9c <HAL_TIM_Base_Start_IT+0xe4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d004      	beq.n	8009f38 <HAL_TIM_Base_Start_IT+0x80>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d115      	bne.n	8009f64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	4b19      	ldr	r3, [pc, #100]	@ (8009fa4 <HAL_TIM_Base_Start_IT+0xec>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b06      	cmp	r3, #6
 8009f48:	d015      	beq.n	8009f76 <HAL_TIM_Base_Start_IT+0xbe>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f50:	d011      	beq.n	8009f76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f042 0201 	orr.w	r2, r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f62:	e008      	b.n	8009f76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f042 0201 	orr.w	r2, r2, #1
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	e000      	b.n	8009f78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	40010400 	.word	0x40010400
 8009f9c:	40014000 	.word	0x40014000
 8009fa0:	40001800 	.word	0x40001800
 8009fa4:	00010007 	.word	0x00010007

08009fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d020      	beq.n	800a00c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01b      	beq.n	800a00c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0202 	mvn.w	r2, #2
 8009fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f9b4 	bl	800a360 <HAL_TIM_IC_CaptureCallback>
 8009ff8:	e005      	b.n	800a006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f9a6 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9b7 	bl	800a374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f003 0304 	and.w	r3, r3, #4
 800a012:	2b00      	cmp	r3, #0
 800a014:	d020      	beq.n	800a058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01b      	beq.n	800a058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0204 	mvn.w	r2, #4
 800a028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2202      	movs	r2, #2
 800a02e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f98e 	bl	800a360 <HAL_TIM_IC_CaptureCallback>
 800a044:	e005      	b.n	800a052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f980 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f991 	bl	800a374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f003 0308 	and.w	r3, r3, #8
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d020      	beq.n	800a0a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01b      	beq.n	800a0a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f06f 0208 	mvn.w	r2, #8
 800a074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2204      	movs	r2, #4
 800a07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f968 	bl	800a360 <HAL_TIM_IC_CaptureCallback>
 800a090:	e005      	b.n	800a09e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f95a 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f96b 	bl	800a374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f003 0310 	and.w	r3, r3, #16
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d020      	beq.n	800a0f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f003 0310 	and.w	r3, r3, #16
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01b      	beq.n	800a0f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f06f 0210 	mvn.w	r2, #16
 800a0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f942 	bl	800a360 <HAL_TIM_IC_CaptureCallback>
 800a0dc:	e005      	b.n	800a0ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f934 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f945 	bl	800a374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00c      	beq.n	800a114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f06f 0201 	mvn.w	r2, #1
 800a10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7f7 f924 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d104      	bne.n	800a128 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00c      	beq.n	800a142 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d007      	beq.n	800a142 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fb05 	bl	800a74c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00c      	beq.n	800a166 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a152:	2b00      	cmp	r3, #0
 800a154:	d007      	beq.n	800a166 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fafd 	bl	800a760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00c      	beq.n	800a18a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d007      	beq.n	800a18a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f8ff 	bl	800a388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	f003 0320 	and.w	r3, r3, #32
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00c      	beq.n	800a1ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f06f 0220 	mvn.w	r2, #32
 800a1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fac5 	bl	800a738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_TIM_ConfigClockSource+0x1c>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e0b4      	b.n	800a33e <HAL_TIM_ConfigClockSource+0x186>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	4b56      	ldr	r3, [pc, #344]	@ (800a348 <HAL_TIM_ConfigClockSource+0x190>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a20c:	d03e      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xd4>
 800a20e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a212:	f200 8087 	bhi.w	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a21a:	f000 8086 	beq.w	800a32a <HAL_TIM_ConfigClockSource+0x172>
 800a21e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a222:	d87f      	bhi.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a224:	2b70      	cmp	r3, #112	@ 0x70
 800a226:	d01a      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0xa6>
 800a228:	2b70      	cmp	r3, #112	@ 0x70
 800a22a:	d87b      	bhi.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a22c:	2b60      	cmp	r3, #96	@ 0x60
 800a22e:	d050      	beq.n	800a2d2 <HAL_TIM_ConfigClockSource+0x11a>
 800a230:	2b60      	cmp	r3, #96	@ 0x60
 800a232:	d877      	bhi.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a234:	2b50      	cmp	r3, #80	@ 0x50
 800a236:	d03c      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0xfa>
 800a238:	2b50      	cmp	r3, #80	@ 0x50
 800a23a:	d873      	bhi.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a23c:	2b40      	cmp	r3, #64	@ 0x40
 800a23e:	d058      	beq.n	800a2f2 <HAL_TIM_ConfigClockSource+0x13a>
 800a240:	2b40      	cmp	r3, #64	@ 0x40
 800a242:	d86f      	bhi.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a244:	2b30      	cmp	r3, #48	@ 0x30
 800a246:	d064      	beq.n	800a312 <HAL_TIM_ConfigClockSource+0x15a>
 800a248:	2b30      	cmp	r3, #48	@ 0x30
 800a24a:	d86b      	bhi.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d060      	beq.n	800a312 <HAL_TIM_ConfigClockSource+0x15a>
 800a250:	2b20      	cmp	r3, #32
 800a252:	d867      	bhi.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
 800a254:	2b00      	cmp	r3, #0
 800a256:	d05c      	beq.n	800a312 <HAL_TIM_ConfigClockSource+0x15a>
 800a258:	2b10      	cmp	r3, #16
 800a25a:	d05a      	beq.n	800a312 <HAL_TIM_ConfigClockSource+0x15a>
 800a25c:	e062      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a26e:	f000 f9b5 	bl	800a5dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	609a      	str	r2, [r3, #8]
      break;
 800a28a:	e04f      	b.n	800a32c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a29c:	f000 f99e 	bl	800a5dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689a      	ldr	r2, [r3, #8]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2ae:	609a      	str	r2, [r3, #8]
      break;
 800a2b0:	e03c      	b.n	800a32c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f000 f912 	bl	800a4e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2150      	movs	r1, #80	@ 0x50
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 f96b 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a2d0:	e02c      	b.n	800a32c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f000 f931 	bl	800a546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2160      	movs	r1, #96	@ 0x60
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 f95b 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a2f0:	e01c      	b.n	800a32c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2fe:	461a      	mov	r2, r3
 800a300:	f000 f8f2 	bl	800a4e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2140      	movs	r1, #64	@ 0x40
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 f94b 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a310:	e00c      	b.n	800a32c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f000 f942 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a322:	e003      	b.n	800a32c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	73fb      	strb	r3, [r7, #15]
      break;
 800a328:	e000      	b.n	800a32c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a32a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	fffeff88 	.word	0xfffeff88

0800a34c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a43      	ldr	r2, [pc, #268]	@ (800a4bc <TIM_Base_SetConfig+0x120>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d013      	beq.n	800a3dc <TIM_Base_SetConfig+0x40>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ba:	d00f      	beq.n	800a3dc <TIM_Base_SetConfig+0x40>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a40      	ldr	r2, [pc, #256]	@ (800a4c0 <TIM_Base_SetConfig+0x124>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d00b      	beq.n	800a3dc <TIM_Base_SetConfig+0x40>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a3f      	ldr	r2, [pc, #252]	@ (800a4c4 <TIM_Base_SetConfig+0x128>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d007      	beq.n	800a3dc <TIM_Base_SetConfig+0x40>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a3e      	ldr	r2, [pc, #248]	@ (800a4c8 <TIM_Base_SetConfig+0x12c>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d003      	beq.n	800a3dc <TIM_Base_SetConfig+0x40>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a3d      	ldr	r2, [pc, #244]	@ (800a4cc <TIM_Base_SetConfig+0x130>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d108      	bne.n	800a3ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a32      	ldr	r2, [pc, #200]	@ (800a4bc <TIM_Base_SetConfig+0x120>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d02b      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3fc:	d027      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2f      	ldr	r2, [pc, #188]	@ (800a4c0 <TIM_Base_SetConfig+0x124>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d023      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a2e      	ldr	r2, [pc, #184]	@ (800a4c4 <TIM_Base_SetConfig+0x128>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d01f      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2d      	ldr	r2, [pc, #180]	@ (800a4c8 <TIM_Base_SetConfig+0x12c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d01b      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a2c      	ldr	r2, [pc, #176]	@ (800a4cc <TIM_Base_SetConfig+0x130>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d017      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a2b      	ldr	r2, [pc, #172]	@ (800a4d0 <TIM_Base_SetConfig+0x134>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d013      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2a      	ldr	r2, [pc, #168]	@ (800a4d4 <TIM_Base_SetConfig+0x138>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00f      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a29      	ldr	r2, [pc, #164]	@ (800a4d8 <TIM_Base_SetConfig+0x13c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d00b      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a28      	ldr	r2, [pc, #160]	@ (800a4dc <TIM_Base_SetConfig+0x140>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d007      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a27      	ldr	r2, [pc, #156]	@ (800a4e0 <TIM_Base_SetConfig+0x144>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d003      	beq.n	800a44e <TIM_Base_SetConfig+0xb2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a26      	ldr	r2, [pc, #152]	@ (800a4e4 <TIM_Base_SetConfig+0x148>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d108      	bne.n	800a460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a0e      	ldr	r2, [pc, #56]	@ (800a4bc <TIM_Base_SetConfig+0x120>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d003      	beq.n	800a48e <TIM_Base_SetConfig+0xf2>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a10      	ldr	r2, [pc, #64]	@ (800a4cc <TIM_Base_SetConfig+0x130>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d103      	bne.n	800a496 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	691a      	ldr	r2, [r3, #16]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f043 0204 	orr.w	r2, r3, #4
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	601a      	str	r2, [r3, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40000400 	.word	0x40000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	40000c00 	.word	0x40000c00
 800a4cc:	40010400 	.word	0x40010400
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40014800 	.word	0x40014800
 800a4dc:	40001800 	.word	0x40001800
 800a4e0:	40001c00 	.word	0x40001c00
 800a4e4:	40002000 	.word	0x40002000

0800a4e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	f023 0201 	bic.w	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f023 030a 	bic.w	r3, r3, #10
 800a524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	621a      	str	r2, [r3, #32]
}
 800a53a:	bf00      	nop
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a546:	b480      	push	{r7}
 800a548:	b087      	sub	sp, #28
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	f023 0210 	bic.w	r2, r3, #16
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	031b      	lsls	r3, r3, #12
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4313      	orrs	r3, r2
 800a57a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a582:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	621a      	str	r2, [r3, #32]
}
 800a59a:	bf00      	nop
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	f043 0307 	orr.w	r3, r3, #7
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	609a      	str	r2, [r3, #8]
}
 800a5d0:	bf00      	nop
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	021a      	lsls	r2, r3, #8
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	431a      	orrs	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4313      	orrs	r3, r2
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	4313      	orrs	r3, r2
 800a608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	609a      	str	r2, [r3, #8]
}
 800a610:	bf00      	nop
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a630:	2302      	movs	r3, #2
 800a632:	e06d      	b.n	800a710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a30      	ldr	r2, [pc, #192]	@ (800a71c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d004      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a2f      	ldr	r2, [pc, #188]	@ (800a720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d108      	bne.n	800a67a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a66e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a20      	ldr	r2, [pc, #128]	@ (800a71c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d022      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6a6:	d01d      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a724 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d018      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a728 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d013      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a72c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d00e      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a15      	ldr	r2, [pc, #84]	@ (800a720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d009      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a16      	ldr	r2, [pc, #88]	@ (800a730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d004      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a15      	ldr	r2, [pc, #84]	@ (800a734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d10c      	bne.n	800a6fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	40010000 	.word	0x40010000
 800a720:	40010400 	.word	0x40010400
 800a724:	40000400 	.word	0x40000400
 800a728:	40000800 	.word	0x40000800
 800a72c:	40000c00 	.word	0x40000c00
 800a730:	40014000 	.word	0x40014000
 800a734:	40001800 	.word	0x40001800

0800a738 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e040      	b.n	800a808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d106      	bne.n	800a79c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7f7 fbd4 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2224      	movs	r2, #36	@ 0x24
 800a7a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0201 	bic.w	r2, r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fece 	bl	800b55c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fc67 	bl	800b094 <UART_SetConfig>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e01b      	b.n	800a808 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 ff4d 	bl	800b6a0 <UART_CheckIdleState>
 800a806:	4603      	mov	r3, r0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	@ 0x28
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a824:	2b20      	cmp	r3, #32
 800a826:	d177      	bne.n	800a918 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <HAL_UART_Transmit+0x24>
 800a82e:	88fb      	ldrh	r3, [r7, #6]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e070      	b.n	800a91a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2221      	movs	r2, #33	@ 0x21
 800a844:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a846:	f7f7 fe57 	bl	80024f8 <HAL_GetTick>
 800a84a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a864:	d108      	bne.n	800a878 <HAL_UART_Transmit+0x68>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d104      	bne.n	800a878 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	61bb      	str	r3, [r7, #24]
 800a876:	e003      	b.n	800a880 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a880:	e02f      	b.n	800a8e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2200      	movs	r2, #0
 800a88a:	2180      	movs	r1, #128	@ 0x80
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 ff5e 	bl	800b74e <UART_WaitOnFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d004      	beq.n	800a8a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2220      	movs	r2, #32
 800a89c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e03b      	b.n	800a91a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10b      	bne.n	800a8c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	3302      	adds	r3, #2
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	e007      	b.n	800a8d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	781a      	ldrb	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1c9      	bne.n	800a882 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2140      	movs	r1, #64	@ 0x40
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 ff28 	bl	800b74e <UART_WaitOnFlagUntilTimeout>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d004      	beq.n	800a90e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2220      	movs	r2, #32
 800a908:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e005      	b.n	800a91a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2220      	movs	r2, #32
 800a912:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	e000      	b.n	800a91a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a918:	2302      	movs	r3, #2
  }
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a924:	b480      	push	{r7}
 800a926:	b08b      	sub	sp, #44	@ 0x2c
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	4613      	mov	r3, r2
 800a930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a936:	2b20      	cmp	r3, #32
 800a938:	d147      	bne.n	800a9ca <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <HAL_UART_Transmit_IT+0x22>
 800a940:	88fb      	ldrh	r3, [r7, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e040      	b.n	800a9cc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	88fa      	ldrh	r2, [r7, #6]
 800a954:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	88fa      	ldrh	r2, [r7, #6]
 800a95c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2221      	movs	r2, #33	@ 0x21
 800a972:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a97c:	d107      	bne.n	800a98e <HAL_UART_Transmit_IT+0x6a>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a13      	ldr	r2, [pc, #76]	@ (800a9d8 <HAL_UART_Transmit_IT+0xb4>)
 800a98a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a98c:	e002      	b.n	800a994 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4a12      	ldr	r2, [pc, #72]	@ (800a9dc <HAL_UART_Transmit_IT+0xb8>)
 800a992:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b2:	623b      	str	r3, [r7, #32]
 800a9b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	69f9      	ldr	r1, [r7, #28]
 800a9b8:	6a3a      	ldr	r2, [r7, #32]
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e6      	bne.n	800a994 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e000      	b.n	800a9cc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a9ca:	2302      	movs	r3, #2
  }
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	372c      	adds	r7, #44	@ 0x2c
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	0800bda5 	.word	0x0800bda5
 800a9dc:	0800bcef 	.word	0x0800bcef

0800a9e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	@ 0x28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	d132      	bne.n	800aa5e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <HAL_UART_Receive_DMA+0x24>
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e02b      	b.n	800aa60 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d018      	beq.n	800aa4e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	613b      	str	r3, [r7, #16]
   return(result);
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	623b      	str	r3, [r7, #32]
 800aa3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	69f9      	ldr	r1, [r7, #28]
 800aa40:	6a3a      	ldr	r2, [r7, #32]
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e6      	bne.n	800aa1c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	461a      	mov	r2, r3
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 fee7 	bl	800b828 <UART_Start_Receive_DMA>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	e000      	b.n	800aa60 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800aa5e:	2302      	movs	r3, #2
  }
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3728      	adds	r7, #40	@ 0x28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b0ba      	sub	sp, #232	@ 0xe8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa92:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa96:	4013      	ands	r3, r2
 800aa98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d115      	bne.n	800aad0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aaa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaa8:	f003 0320 	and.w	r3, r3, #32
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00f      	beq.n	800aad0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aab4:	f003 0320 	and.w	r3, r3, #32
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d009      	beq.n	800aad0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 82b1 	beq.w	800b028 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
      }
      return;
 800aace:	e2ab      	b.n	800b028 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 8117 	beq.w	800ad08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d106      	bne.n	800aaf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aaea:	4b85      	ldr	r3, [pc, #532]	@ (800ad00 <HAL_UART_IRQHandler+0x298>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 810a 	beq.w	800ad08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d011      	beq.n	800ab24 <HAL_UART_IRQHandler+0xbc>
 800ab00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00b      	beq.n	800ab24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2201      	movs	r2, #1
 800ab12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab1a:	f043 0201 	orr.w	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d011      	beq.n	800ab54 <HAL_UART_IRQHandler+0xec>
 800ab30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2202      	movs	r2, #2
 800ab42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab4a:	f043 0204 	orr.w	r2, r3, #4
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab58:	f003 0304 	and.w	r3, r3, #4
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d011      	beq.n	800ab84 <HAL_UART_IRQHandler+0x11c>
 800ab60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2204      	movs	r2, #4
 800ab72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab7a:	f043 0202 	orr.w	r2, r3, #2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d017      	beq.n	800abc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab94:	f003 0320 	and.w	r3, r3, #32
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d105      	bne.n	800aba8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ab9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2208      	movs	r2, #8
 800abae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abb6:	f043 0208 	orr.w	r2, r3, #8
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d012      	beq.n	800abf2 <HAL_UART_IRQHandler+0x18a>
 800abcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00c      	beq.n	800abf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abe8:	f043 0220 	orr.w	r2, r3, #32
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8217 	beq.w	800b02c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800abfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00d      	beq.n	800ac26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ac0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac0e:	f003 0320 	and.w	r3, r3, #32
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d007      	beq.n	800ac26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3a:	2b40      	cmp	r3, #64	@ 0x40
 800ac3c:	d005      	beq.n	800ac4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d04f      	beq.n	800acea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 feb2 	bl	800b9b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac5a:	2b40      	cmp	r3, #64	@ 0x40
 800ac5c:	d141      	bne.n	800ace2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3308      	adds	r3, #8
 800ac64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac6c:	e853 3f00 	ldrex	r3, [r3]
 800ac70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3308      	adds	r3, #8
 800ac86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1d9      	bne.n	800ac5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d013      	beq.n	800acda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acb6:	4a13      	ldr	r2, [pc, #76]	@ (800ad04 <HAL_UART_IRQHandler+0x29c>)
 800acb8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7f8 fd3a 	bl	8003738 <HAL_DMA_Abort_IT>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d017      	beq.n	800acfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd8:	e00f      	b.n	800acfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f9c4 	bl	800b068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace0:	e00b      	b.n	800acfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f9c0 	bl	800b068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace8:	e007      	b.n	800acfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f9bc 	bl	800b068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800acf8:	e198      	b.n	800b02c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acfa:	bf00      	nop
    return;
 800acfc:	e196      	b.n	800b02c <HAL_UART_IRQHandler+0x5c4>
 800acfe:	bf00      	nop
 800ad00:	04000120 	.word	0x04000120
 800ad04:	0800bccb 	.word	0x0800bccb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	f040 8166 	bne.w	800afde <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad16:	f003 0310 	and.w	r3, r3, #16
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 815f 	beq.w	800afde <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad24:	f003 0310 	and.w	r3, r3, #16
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 8158 	beq.w	800afde <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2210      	movs	r2, #16
 800ad34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad40:	2b40      	cmp	r3, #64	@ 0x40
 800ad42:	f040 80d0 	bne.w	800aee6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 80ab 	beq.w	800aeb2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad66:	429a      	cmp	r2, r3
 800ad68:	f080 80a3 	bcs.w	800aeb2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad80:	f000 8086 	beq.w	800ae90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ad98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ada0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800adae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800adb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800adba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800adbe:	e841 2300 	strex	r3, r2, [r1]
 800adc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800adc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1da      	bne.n	800ad84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800adde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ade0:	f023 0301 	bic.w	r3, r3, #1
 800ade4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3308      	adds	r3, #8
 800adee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800adf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800adf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800adfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e1      	bne.n	800adce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3308      	adds	r3, #8
 800ae2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ae2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae36:	e841 2300 	strex	r3, r2, [r1]
 800ae3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1e3      	bne.n	800ae0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2220      	movs	r2, #32
 800ae46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae58:	e853 3f00 	ldrex	r3, [r3]
 800ae5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae60:	f023 0310 	bic.w	r3, r3, #16
 800ae64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae7a:	e841 2300 	strex	r3, r2, [r1]
 800ae7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1e4      	bne.n	800ae50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7f8 fbe4 	bl	8003658 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2202      	movs	r2, #2
 800ae94:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f8e6 	bl	800b07c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aeb0:	e0be      	b.n	800b030 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aeb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aebc:	429a      	cmp	r2, r3
 800aebe:	f040 80b7 	bne.w	800b030 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aecc:	f040 80b0 	bne.w	800b030 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2202      	movs	r2, #2
 800aed4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f8cc 	bl	800b07c <HAL_UARTEx_RxEventCallback>
      return;
 800aee4:	e0a4      	b.n	800b030 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800af00:	b29b      	uxth	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 8096 	beq.w	800b034 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800af08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 8091 	beq.w	800b034 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	e853 3f00 	ldrex	r3, [r3]
 800af1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800af34:	647b      	str	r3, [r7, #68]	@ 0x44
 800af36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e4      	bne.n	800af12 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3308      	adds	r3, #8
 800af4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af52:	e853 3f00 	ldrex	r3, [r3]
 800af56:	623b      	str	r3, [r7, #32]
   return(result);
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	f023 0301 	bic.w	r3, r3, #1
 800af5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3308      	adds	r3, #8
 800af68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800af6c:	633a      	str	r2, [r7, #48]	@ 0x30
 800af6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af74:	e841 2300 	strex	r3, r2, [r1]
 800af78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e3      	bne.n	800af48 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2220      	movs	r2, #32
 800af84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	60fb      	str	r3, [r7, #12]
   return(result);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f023 0310 	bic.w	r3, r3, #16
 800afa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	461a      	mov	r2, r3
 800afb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800afb6:	61fb      	str	r3, [r7, #28]
 800afb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	69b9      	ldr	r1, [r7, #24]
 800afbc:	69fa      	ldr	r2, [r7, #28]
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	617b      	str	r3, [r7, #20]
   return(result);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e4      	bne.n	800af94 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2202      	movs	r2, #2
 800afce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800afd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f850 	bl	800b07c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afdc:	e02a      	b.n	800b034 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800afde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00e      	beq.n	800b008 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800afea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d008      	beq.n	800b008 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800affa:	2b00      	cmp	r3, #0
 800affc:	d01c      	beq.n	800b038 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
    }
    return;
 800b006:	e017      	b.n	800b038 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b010:	2b00      	cmp	r3, #0
 800b012:	d012      	beq.n	800b03a <HAL_UART_IRQHandler+0x5d2>
 800b014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00c      	beq.n	800b03a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 ff1f 	bl	800be64 <UART_EndTransmit_IT>
    return;
 800b026:	e008      	b.n	800b03a <HAL_UART_IRQHandler+0x5d2>
      return;
 800b028:	bf00      	nop
 800b02a:	e006      	b.n	800b03a <HAL_UART_IRQHandler+0x5d2>
    return;
 800b02c:	bf00      	nop
 800b02e:	e004      	b.n	800b03a <HAL_UART_IRQHandler+0x5d2>
      return;
 800b030:	bf00      	nop
 800b032:	e002      	b.n	800b03a <HAL_UART_IRQHandler+0x5d2>
      return;
 800b034:	bf00      	nop
 800b036:	e000      	b.n	800b03a <HAL_UART_IRQHandler+0x5d2>
    return;
 800b038:	bf00      	nop
  }

}
 800b03a:	37e8      	adds	r7, #232	@ 0xe8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	69db      	ldr	r3, [r3, #28]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	4ba6      	ldr	r3, [pc, #664]	@ (800b358 <UART_SetConfig+0x2c4>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	6812      	ldr	r2, [r2, #0]
 800b0c6:	6979      	ldr	r1, [r7, #20]
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	430a      	orrs	r2, r1
 800b104:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a94      	ldr	r2, [pc, #592]	@ (800b35c <UART_SetConfig+0x2c8>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d120      	bne.n	800b152 <UART_SetConfig+0xbe>
 800b110:	4b93      	ldr	r3, [pc, #588]	@ (800b360 <UART_SetConfig+0x2cc>)
 800b112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d816      	bhi.n	800b14c <UART_SetConfig+0xb8>
 800b11e:	a201      	add	r2, pc, #4	@ (adr r2, 800b124 <UART_SetConfig+0x90>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b135 	.word	0x0800b135
 800b128:	0800b141 	.word	0x0800b141
 800b12c:	0800b13b 	.word	0x0800b13b
 800b130:	0800b147 	.word	0x0800b147
 800b134:	2301      	movs	r3, #1
 800b136:	77fb      	strb	r3, [r7, #31]
 800b138:	e150      	b.n	800b3dc <UART_SetConfig+0x348>
 800b13a:	2302      	movs	r3, #2
 800b13c:	77fb      	strb	r3, [r7, #31]
 800b13e:	e14d      	b.n	800b3dc <UART_SetConfig+0x348>
 800b140:	2304      	movs	r3, #4
 800b142:	77fb      	strb	r3, [r7, #31]
 800b144:	e14a      	b.n	800b3dc <UART_SetConfig+0x348>
 800b146:	2308      	movs	r3, #8
 800b148:	77fb      	strb	r3, [r7, #31]
 800b14a:	e147      	b.n	800b3dc <UART_SetConfig+0x348>
 800b14c:	2310      	movs	r3, #16
 800b14e:	77fb      	strb	r3, [r7, #31]
 800b150:	e144      	b.n	800b3dc <UART_SetConfig+0x348>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a83      	ldr	r2, [pc, #524]	@ (800b364 <UART_SetConfig+0x2d0>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d132      	bne.n	800b1c2 <UART_SetConfig+0x12e>
 800b15c:	4b80      	ldr	r3, [pc, #512]	@ (800b360 <UART_SetConfig+0x2cc>)
 800b15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b162:	f003 030c 	and.w	r3, r3, #12
 800b166:	2b0c      	cmp	r3, #12
 800b168:	d828      	bhi.n	800b1bc <UART_SetConfig+0x128>
 800b16a:	a201      	add	r2, pc, #4	@ (adr r2, 800b170 <UART_SetConfig+0xdc>)
 800b16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b170:	0800b1a5 	.word	0x0800b1a5
 800b174:	0800b1bd 	.word	0x0800b1bd
 800b178:	0800b1bd 	.word	0x0800b1bd
 800b17c:	0800b1bd 	.word	0x0800b1bd
 800b180:	0800b1b1 	.word	0x0800b1b1
 800b184:	0800b1bd 	.word	0x0800b1bd
 800b188:	0800b1bd 	.word	0x0800b1bd
 800b18c:	0800b1bd 	.word	0x0800b1bd
 800b190:	0800b1ab 	.word	0x0800b1ab
 800b194:	0800b1bd 	.word	0x0800b1bd
 800b198:	0800b1bd 	.word	0x0800b1bd
 800b19c:	0800b1bd 	.word	0x0800b1bd
 800b1a0:	0800b1b7 	.word	0x0800b1b7
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	77fb      	strb	r3, [r7, #31]
 800b1a8:	e118      	b.n	800b3dc <UART_SetConfig+0x348>
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	77fb      	strb	r3, [r7, #31]
 800b1ae:	e115      	b.n	800b3dc <UART_SetConfig+0x348>
 800b1b0:	2304      	movs	r3, #4
 800b1b2:	77fb      	strb	r3, [r7, #31]
 800b1b4:	e112      	b.n	800b3dc <UART_SetConfig+0x348>
 800b1b6:	2308      	movs	r3, #8
 800b1b8:	77fb      	strb	r3, [r7, #31]
 800b1ba:	e10f      	b.n	800b3dc <UART_SetConfig+0x348>
 800b1bc:	2310      	movs	r3, #16
 800b1be:	77fb      	strb	r3, [r7, #31]
 800b1c0:	e10c      	b.n	800b3dc <UART_SetConfig+0x348>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a68      	ldr	r2, [pc, #416]	@ (800b368 <UART_SetConfig+0x2d4>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d120      	bne.n	800b20e <UART_SetConfig+0x17a>
 800b1cc:	4b64      	ldr	r3, [pc, #400]	@ (800b360 <UART_SetConfig+0x2cc>)
 800b1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1d6:	2b30      	cmp	r3, #48	@ 0x30
 800b1d8:	d013      	beq.n	800b202 <UART_SetConfig+0x16e>
 800b1da:	2b30      	cmp	r3, #48	@ 0x30
 800b1dc:	d814      	bhi.n	800b208 <UART_SetConfig+0x174>
 800b1de:	2b20      	cmp	r3, #32
 800b1e0:	d009      	beq.n	800b1f6 <UART_SetConfig+0x162>
 800b1e2:	2b20      	cmp	r3, #32
 800b1e4:	d810      	bhi.n	800b208 <UART_SetConfig+0x174>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d002      	beq.n	800b1f0 <UART_SetConfig+0x15c>
 800b1ea:	2b10      	cmp	r3, #16
 800b1ec:	d006      	beq.n	800b1fc <UART_SetConfig+0x168>
 800b1ee:	e00b      	b.n	800b208 <UART_SetConfig+0x174>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	77fb      	strb	r3, [r7, #31]
 800b1f4:	e0f2      	b.n	800b3dc <UART_SetConfig+0x348>
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	77fb      	strb	r3, [r7, #31]
 800b1fa:	e0ef      	b.n	800b3dc <UART_SetConfig+0x348>
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	77fb      	strb	r3, [r7, #31]
 800b200:	e0ec      	b.n	800b3dc <UART_SetConfig+0x348>
 800b202:	2308      	movs	r3, #8
 800b204:	77fb      	strb	r3, [r7, #31]
 800b206:	e0e9      	b.n	800b3dc <UART_SetConfig+0x348>
 800b208:	2310      	movs	r3, #16
 800b20a:	77fb      	strb	r3, [r7, #31]
 800b20c:	e0e6      	b.n	800b3dc <UART_SetConfig+0x348>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a56      	ldr	r2, [pc, #344]	@ (800b36c <UART_SetConfig+0x2d8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d120      	bne.n	800b25a <UART_SetConfig+0x1c6>
 800b218:	4b51      	ldr	r3, [pc, #324]	@ (800b360 <UART_SetConfig+0x2cc>)
 800b21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b21e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b222:	2bc0      	cmp	r3, #192	@ 0xc0
 800b224:	d013      	beq.n	800b24e <UART_SetConfig+0x1ba>
 800b226:	2bc0      	cmp	r3, #192	@ 0xc0
 800b228:	d814      	bhi.n	800b254 <UART_SetConfig+0x1c0>
 800b22a:	2b80      	cmp	r3, #128	@ 0x80
 800b22c:	d009      	beq.n	800b242 <UART_SetConfig+0x1ae>
 800b22e:	2b80      	cmp	r3, #128	@ 0x80
 800b230:	d810      	bhi.n	800b254 <UART_SetConfig+0x1c0>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <UART_SetConfig+0x1a8>
 800b236:	2b40      	cmp	r3, #64	@ 0x40
 800b238:	d006      	beq.n	800b248 <UART_SetConfig+0x1b4>
 800b23a:	e00b      	b.n	800b254 <UART_SetConfig+0x1c0>
 800b23c:	2300      	movs	r3, #0
 800b23e:	77fb      	strb	r3, [r7, #31]
 800b240:	e0cc      	b.n	800b3dc <UART_SetConfig+0x348>
 800b242:	2302      	movs	r3, #2
 800b244:	77fb      	strb	r3, [r7, #31]
 800b246:	e0c9      	b.n	800b3dc <UART_SetConfig+0x348>
 800b248:	2304      	movs	r3, #4
 800b24a:	77fb      	strb	r3, [r7, #31]
 800b24c:	e0c6      	b.n	800b3dc <UART_SetConfig+0x348>
 800b24e:	2308      	movs	r3, #8
 800b250:	77fb      	strb	r3, [r7, #31]
 800b252:	e0c3      	b.n	800b3dc <UART_SetConfig+0x348>
 800b254:	2310      	movs	r3, #16
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e0c0      	b.n	800b3dc <UART_SetConfig+0x348>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a44      	ldr	r2, [pc, #272]	@ (800b370 <UART_SetConfig+0x2dc>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d125      	bne.n	800b2b0 <UART_SetConfig+0x21c>
 800b264:	4b3e      	ldr	r3, [pc, #248]	@ (800b360 <UART_SetConfig+0x2cc>)
 800b266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b26a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b26e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b272:	d017      	beq.n	800b2a4 <UART_SetConfig+0x210>
 800b274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b278:	d817      	bhi.n	800b2aa <UART_SetConfig+0x216>
 800b27a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b27e:	d00b      	beq.n	800b298 <UART_SetConfig+0x204>
 800b280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b284:	d811      	bhi.n	800b2aa <UART_SetConfig+0x216>
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <UART_SetConfig+0x1fe>
 800b28a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b28e:	d006      	beq.n	800b29e <UART_SetConfig+0x20a>
 800b290:	e00b      	b.n	800b2aa <UART_SetConfig+0x216>
 800b292:	2300      	movs	r3, #0
 800b294:	77fb      	strb	r3, [r7, #31]
 800b296:	e0a1      	b.n	800b3dc <UART_SetConfig+0x348>
 800b298:	2302      	movs	r3, #2
 800b29a:	77fb      	strb	r3, [r7, #31]
 800b29c:	e09e      	b.n	800b3dc <UART_SetConfig+0x348>
 800b29e:	2304      	movs	r3, #4
 800b2a0:	77fb      	strb	r3, [r7, #31]
 800b2a2:	e09b      	b.n	800b3dc <UART_SetConfig+0x348>
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	77fb      	strb	r3, [r7, #31]
 800b2a8:	e098      	b.n	800b3dc <UART_SetConfig+0x348>
 800b2aa:	2310      	movs	r3, #16
 800b2ac:	77fb      	strb	r3, [r7, #31]
 800b2ae:	e095      	b.n	800b3dc <UART_SetConfig+0x348>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a2f      	ldr	r2, [pc, #188]	@ (800b374 <UART_SetConfig+0x2e0>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d125      	bne.n	800b306 <UART_SetConfig+0x272>
 800b2ba:	4b29      	ldr	r3, [pc, #164]	@ (800b360 <UART_SetConfig+0x2cc>)
 800b2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b2c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2c8:	d017      	beq.n	800b2fa <UART_SetConfig+0x266>
 800b2ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2ce:	d817      	bhi.n	800b300 <UART_SetConfig+0x26c>
 800b2d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2d4:	d00b      	beq.n	800b2ee <UART_SetConfig+0x25a>
 800b2d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2da:	d811      	bhi.n	800b300 <UART_SetConfig+0x26c>
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <UART_SetConfig+0x254>
 800b2e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2e4:	d006      	beq.n	800b2f4 <UART_SetConfig+0x260>
 800b2e6:	e00b      	b.n	800b300 <UART_SetConfig+0x26c>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	77fb      	strb	r3, [r7, #31]
 800b2ec:	e076      	b.n	800b3dc <UART_SetConfig+0x348>
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	77fb      	strb	r3, [r7, #31]
 800b2f2:	e073      	b.n	800b3dc <UART_SetConfig+0x348>
 800b2f4:	2304      	movs	r3, #4
 800b2f6:	77fb      	strb	r3, [r7, #31]
 800b2f8:	e070      	b.n	800b3dc <UART_SetConfig+0x348>
 800b2fa:	2308      	movs	r3, #8
 800b2fc:	77fb      	strb	r3, [r7, #31]
 800b2fe:	e06d      	b.n	800b3dc <UART_SetConfig+0x348>
 800b300:	2310      	movs	r3, #16
 800b302:	77fb      	strb	r3, [r7, #31]
 800b304:	e06a      	b.n	800b3dc <UART_SetConfig+0x348>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a1b      	ldr	r2, [pc, #108]	@ (800b378 <UART_SetConfig+0x2e4>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d138      	bne.n	800b382 <UART_SetConfig+0x2ee>
 800b310:	4b13      	ldr	r3, [pc, #76]	@ (800b360 <UART_SetConfig+0x2cc>)
 800b312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b316:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b31a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b31e:	d017      	beq.n	800b350 <UART_SetConfig+0x2bc>
 800b320:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b324:	d82a      	bhi.n	800b37c <UART_SetConfig+0x2e8>
 800b326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b32a:	d00b      	beq.n	800b344 <UART_SetConfig+0x2b0>
 800b32c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b330:	d824      	bhi.n	800b37c <UART_SetConfig+0x2e8>
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <UART_SetConfig+0x2aa>
 800b336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b33a:	d006      	beq.n	800b34a <UART_SetConfig+0x2b6>
 800b33c:	e01e      	b.n	800b37c <UART_SetConfig+0x2e8>
 800b33e:	2300      	movs	r3, #0
 800b340:	77fb      	strb	r3, [r7, #31]
 800b342:	e04b      	b.n	800b3dc <UART_SetConfig+0x348>
 800b344:	2302      	movs	r3, #2
 800b346:	77fb      	strb	r3, [r7, #31]
 800b348:	e048      	b.n	800b3dc <UART_SetConfig+0x348>
 800b34a:	2304      	movs	r3, #4
 800b34c:	77fb      	strb	r3, [r7, #31]
 800b34e:	e045      	b.n	800b3dc <UART_SetConfig+0x348>
 800b350:	2308      	movs	r3, #8
 800b352:	77fb      	strb	r3, [r7, #31]
 800b354:	e042      	b.n	800b3dc <UART_SetConfig+0x348>
 800b356:	bf00      	nop
 800b358:	efff69f3 	.word	0xefff69f3
 800b35c:	40011000 	.word	0x40011000
 800b360:	40023800 	.word	0x40023800
 800b364:	40004400 	.word	0x40004400
 800b368:	40004800 	.word	0x40004800
 800b36c:	40004c00 	.word	0x40004c00
 800b370:	40005000 	.word	0x40005000
 800b374:	40011400 	.word	0x40011400
 800b378:	40007800 	.word	0x40007800
 800b37c:	2310      	movs	r3, #16
 800b37e:	77fb      	strb	r3, [r7, #31]
 800b380:	e02c      	b.n	800b3dc <UART_SetConfig+0x348>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a72      	ldr	r2, [pc, #456]	@ (800b550 <UART_SetConfig+0x4bc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d125      	bne.n	800b3d8 <UART_SetConfig+0x344>
 800b38c:	4b71      	ldr	r3, [pc, #452]	@ (800b554 <UART_SetConfig+0x4c0>)
 800b38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b392:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b396:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b39a:	d017      	beq.n	800b3cc <UART_SetConfig+0x338>
 800b39c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b3a0:	d817      	bhi.n	800b3d2 <UART_SetConfig+0x33e>
 800b3a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3a6:	d00b      	beq.n	800b3c0 <UART_SetConfig+0x32c>
 800b3a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3ac:	d811      	bhi.n	800b3d2 <UART_SetConfig+0x33e>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <UART_SetConfig+0x326>
 800b3b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3b6:	d006      	beq.n	800b3c6 <UART_SetConfig+0x332>
 800b3b8:	e00b      	b.n	800b3d2 <UART_SetConfig+0x33e>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	77fb      	strb	r3, [r7, #31]
 800b3be:	e00d      	b.n	800b3dc <UART_SetConfig+0x348>
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	77fb      	strb	r3, [r7, #31]
 800b3c4:	e00a      	b.n	800b3dc <UART_SetConfig+0x348>
 800b3c6:	2304      	movs	r3, #4
 800b3c8:	77fb      	strb	r3, [r7, #31]
 800b3ca:	e007      	b.n	800b3dc <UART_SetConfig+0x348>
 800b3cc:	2308      	movs	r3, #8
 800b3ce:	77fb      	strb	r3, [r7, #31]
 800b3d0:	e004      	b.n	800b3dc <UART_SetConfig+0x348>
 800b3d2:	2310      	movs	r3, #16
 800b3d4:	77fb      	strb	r3, [r7, #31]
 800b3d6:	e001      	b.n	800b3dc <UART_SetConfig+0x348>
 800b3d8:	2310      	movs	r3, #16
 800b3da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3e4:	d15b      	bne.n	800b49e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b3e6:	7ffb      	ldrb	r3, [r7, #31]
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d828      	bhi.n	800b43e <UART_SetConfig+0x3aa>
 800b3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <UART_SetConfig+0x360>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b419 	.word	0x0800b419
 800b3f8:	0800b421 	.word	0x0800b421
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	0800b43f 	.word	0x0800b43f
 800b404:	0800b42f 	.word	0x0800b42f
 800b408:	0800b43f 	.word	0x0800b43f
 800b40c:	0800b43f 	.word	0x0800b43f
 800b410:	0800b43f 	.word	0x0800b43f
 800b414:	0800b437 	.word	0x0800b437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b418:	f7fc ff4c 	bl	80082b4 <HAL_RCC_GetPCLK1Freq>
 800b41c:	61b8      	str	r0, [r7, #24]
        break;
 800b41e:	e013      	b.n	800b448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b420:	f7fc ff5c 	bl	80082dc <HAL_RCC_GetPCLK2Freq>
 800b424:	61b8      	str	r0, [r7, #24]
        break;
 800b426:	e00f      	b.n	800b448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b428:	4b4b      	ldr	r3, [pc, #300]	@ (800b558 <UART_SetConfig+0x4c4>)
 800b42a:	61bb      	str	r3, [r7, #24]
        break;
 800b42c:	e00c      	b.n	800b448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b42e:	f7fc fe6f 	bl	8008110 <HAL_RCC_GetSysClockFreq>
 800b432:	61b8      	str	r0, [r7, #24]
        break;
 800b434:	e008      	b.n	800b448 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b43a:	61bb      	str	r3, [r7, #24]
        break;
 800b43c:	e004      	b.n	800b448 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	77bb      	strb	r3, [r7, #30]
        break;
 800b446:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d074      	beq.n	800b538 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	005a      	lsls	r2, r3, #1
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	085b      	lsrs	r3, r3, #1
 800b458:	441a      	add	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b462:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2b0f      	cmp	r3, #15
 800b468:	d916      	bls.n	800b498 <UART_SetConfig+0x404>
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b470:	d212      	bcs.n	800b498 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	b29b      	uxth	r3, r3
 800b476:	f023 030f 	bic.w	r3, r3, #15
 800b47a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	085b      	lsrs	r3, r3, #1
 800b480:	b29b      	uxth	r3, r3
 800b482:	f003 0307 	and.w	r3, r3, #7
 800b486:	b29a      	uxth	r2, r3
 800b488:	89fb      	ldrh	r3, [r7, #14]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	89fa      	ldrh	r2, [r7, #14]
 800b494:	60da      	str	r2, [r3, #12]
 800b496:	e04f      	b.n	800b538 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	77bb      	strb	r3, [r7, #30]
 800b49c:	e04c      	b.n	800b538 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b49e:	7ffb      	ldrb	r3, [r7, #31]
 800b4a0:	2b08      	cmp	r3, #8
 800b4a2:	d828      	bhi.n	800b4f6 <UART_SetConfig+0x462>
 800b4a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4ac <UART_SetConfig+0x418>)
 800b4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4aa:	bf00      	nop
 800b4ac:	0800b4d1 	.word	0x0800b4d1
 800b4b0:	0800b4d9 	.word	0x0800b4d9
 800b4b4:	0800b4e1 	.word	0x0800b4e1
 800b4b8:	0800b4f7 	.word	0x0800b4f7
 800b4bc:	0800b4e7 	.word	0x0800b4e7
 800b4c0:	0800b4f7 	.word	0x0800b4f7
 800b4c4:	0800b4f7 	.word	0x0800b4f7
 800b4c8:	0800b4f7 	.word	0x0800b4f7
 800b4cc:	0800b4ef 	.word	0x0800b4ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4d0:	f7fc fef0 	bl	80082b4 <HAL_RCC_GetPCLK1Freq>
 800b4d4:	61b8      	str	r0, [r7, #24]
        break;
 800b4d6:	e013      	b.n	800b500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4d8:	f7fc ff00 	bl	80082dc <HAL_RCC_GetPCLK2Freq>
 800b4dc:	61b8      	str	r0, [r7, #24]
        break;
 800b4de:	e00f      	b.n	800b500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b558 <UART_SetConfig+0x4c4>)
 800b4e2:	61bb      	str	r3, [r7, #24]
        break;
 800b4e4:	e00c      	b.n	800b500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4e6:	f7fc fe13 	bl	8008110 <HAL_RCC_GetSysClockFreq>
 800b4ea:	61b8      	str	r0, [r7, #24]
        break;
 800b4ec:	e008      	b.n	800b500 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4f2:	61bb      	str	r3, [r7, #24]
        break;
 800b4f4:	e004      	b.n	800b500 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	77bb      	strb	r3, [r7, #30]
        break;
 800b4fe:	bf00      	nop
    }

    if (pclk != 0U)
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d018      	beq.n	800b538 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	085a      	lsrs	r2, r3, #1
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	441a      	add	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	fbb2 f3f3 	udiv	r3, r2, r3
 800b518:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b0f      	cmp	r3, #15
 800b51e:	d909      	bls.n	800b534 <UART_SetConfig+0x4a0>
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b526:	d205      	bcs.n	800b534 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60da      	str	r2, [r3, #12]
 800b532:	e001      	b.n	800b538 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b544:	7fbb      	ldrb	r3, [r7, #30]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3720      	adds	r7, #32
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	40007c00 	.word	0x40007c00
 800b554:	40023800 	.word	0x40023800
 800b558:	00f42400 	.word	0x00f42400

0800b55c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b568:	f003 0308 	and.w	r3, r3, #8
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ac:	f003 0302 	and.w	r3, r3, #2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00a      	beq.n	800b5ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00a      	beq.n	800b60e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	430a      	orrs	r2, r1
 800b60c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b612:	f003 0320 	and.w	r3, r3, #32
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	430a      	orrs	r2, r1
 800b62e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d01a      	beq.n	800b672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b65a:	d10a      	bne.n	800b672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	605a      	str	r2, [r3, #4]
  }
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08c      	sub	sp, #48	@ 0x30
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6b0:	f7f6 ff22 	bl	80024f8 <HAL_GetTick>
 800b6b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0308 	and.w	r3, r3, #8
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d12e      	bne.n	800b722 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f83b 	bl	800b74e <UART_WaitOnFlagUntilTimeout>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d021      	beq.n	800b722 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	e853 3f00 	ldrex	r3, [r3]
 800b6ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6f2:	623b      	str	r3, [r7, #32]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	61fb      	str	r3, [r7, #28]
 800b6fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b700:	69b9      	ldr	r1, [r7, #24]
 800b702:	69fa      	ldr	r2, [r7, #28]
 800b704:	e841 2300 	strex	r3, r2, [r1]
 800b708:	617b      	str	r3, [r7, #20]
   return(result);
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1e6      	bne.n	800b6de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2220      	movs	r2, #32
 800b714:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e011      	b.n	800b746 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2220      	movs	r2, #32
 800b72c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3728      	adds	r7, #40	@ 0x28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b084      	sub	sp, #16
 800b752:	af00      	add	r7, sp, #0
 800b754:	60f8      	str	r0, [r7, #12]
 800b756:	60b9      	str	r1, [r7, #8]
 800b758:	603b      	str	r3, [r7, #0]
 800b75a:	4613      	mov	r3, r2
 800b75c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b75e:	e04f      	b.n	800b800 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b766:	d04b      	beq.n	800b800 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b768:	f7f6 fec6 	bl	80024f8 <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	429a      	cmp	r2, r3
 800b776:	d302      	bcc.n	800b77e <UART_WaitOnFlagUntilTimeout+0x30>
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e04e      	b.n	800b820 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d037      	beq.n	800b800 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b80      	cmp	r3, #128	@ 0x80
 800b794:	d034      	beq.n	800b800 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b40      	cmp	r3, #64	@ 0x40
 800b79a:	d031      	beq.n	800b800 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69db      	ldr	r3, [r3, #28]
 800b7a2:	f003 0308 	and.w	r3, r3, #8
 800b7a6:	2b08      	cmp	r3, #8
 800b7a8:	d110      	bne.n	800b7cc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2208      	movs	r2, #8
 800b7b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 f8fe 	bl	800b9b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2208      	movs	r2, #8
 800b7bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e029      	b.n	800b820 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	69db      	ldr	r3, [r3, #28]
 800b7d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7da:	d111      	bne.n	800b800 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b7e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 f8e4 	bl	800b9b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e00f      	b.n	800b820 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	69da      	ldr	r2, [r3, #28]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	4013      	ands	r3, r2
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	bf0c      	ite	eq
 800b810:	2301      	moveq	r3, #1
 800b812:	2300      	movne	r3, #0
 800b814:	b2db      	uxtb	r3, r3
 800b816:	461a      	mov	r2, r3
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d0a0      	beq.n	800b760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b096      	sub	sp, #88	@ 0x58
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	4613      	mov	r3, r2
 800b834:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	88fa      	ldrh	r2, [r7, #6]
 800b840:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2222      	movs	r2, #34	@ 0x22
 800b850:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d028      	beq.n	800b8ae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b860:	4a3e      	ldr	r2, [pc, #248]	@ (800b95c <UART_Start_Receive_DMA+0x134>)
 800b862:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b868:	4a3d      	ldr	r2, [pc, #244]	@ (800b960 <UART_Start_Receive_DMA+0x138>)
 800b86a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b870:	4a3c      	ldr	r2, [pc, #240]	@ (800b964 <UART_Start_Receive_DMA+0x13c>)
 800b872:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b878:	2200      	movs	r2, #0
 800b87a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3324      	adds	r3, #36	@ 0x24
 800b886:	4619      	mov	r1, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b88c:	461a      	mov	r2, r3
 800b88e:	88fb      	ldrh	r3, [r7, #6]
 800b890:	f7f7 fe82 	bl	8003598 <HAL_DMA_Start_IT>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d009      	beq.n	800b8ae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2210      	movs	r2, #16
 800b89e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e051      	b.n	800b952 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d018      	beq.n	800b8e8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8be:	e853 3f00 	ldrex	r3, [r3]
 800b8c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b8e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e6      	bne.n	800b8b6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	f043 0301 	orr.w	r3, r3, #1
 800b8fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b908:	637a      	str	r2, [r7, #52]	@ 0x34
 800b90a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b90e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e5      	bne.n	800b8e8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3308      	adds	r3, #8
 800b922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	e853 3f00 	ldrex	r3, [r3]
 800b92a:	613b      	str	r3, [r7, #16]
   return(result);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3308      	adds	r3, #8
 800b93a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b93c:	623a      	str	r2, [r7, #32]
 800b93e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b940:	69f9      	ldr	r1, [r7, #28]
 800b942:	6a3a      	ldr	r2, [r7, #32]
 800b944:	e841 2300 	strex	r3, r2, [r1]
 800b948:	61bb      	str	r3, [r7, #24]
   return(result);
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1e5      	bne.n	800b91c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3758      	adds	r7, #88	@ 0x58
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	0800ba7d 	.word	0x0800ba7d
 800b960:	0800bbdb 	.word	0x0800bbdb
 800b964:	0800bc4d 	.word	0x0800bc4d

0800b968 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b089      	sub	sp, #36	@ 0x24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	e853 3f00 	ldrex	r3, [r3]
 800b97c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b984:	61fb      	str	r3, [r7, #28]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	61bb      	str	r3, [r7, #24]
 800b990:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b992:	6979      	ldr	r1, [r7, #20]
 800b994:	69ba      	ldr	r2, [r7, #24]
 800b996:	e841 2300 	strex	r3, r2, [r1]
 800b99a:	613b      	str	r3, [r7, #16]
   return(result);
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1e6      	bne.n	800b970 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b9a8:	bf00      	nop
 800b9aa:	3724      	adds	r7, #36	@ 0x24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b095      	sub	sp, #84	@ 0x54
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9da:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9e2:	e841 2300 	strex	r3, r2, [r1]
 800b9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1e6      	bne.n	800b9bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	e853 3f00 	ldrex	r3, [r3]
 800b9fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	f023 0301 	bic.w	r3, r3, #1
 800ba04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e5      	bne.n	800b9ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d118      	bne.n	800ba5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	e853 3f00 	ldrex	r3, [r3]
 800ba36:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f023 0310 	bic.w	r3, r3, #16
 800ba3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	461a      	mov	r2, r3
 800ba46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba48:	61bb      	str	r3, [r7, #24]
 800ba4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4c:	6979      	ldr	r1, [r7, #20]
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	e841 2300 	strex	r3, r2, [r1]
 800ba54:	613b      	str	r3, [r7, #16]
   return(result);
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e6      	bne.n	800ba2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ba70:	bf00      	nop
 800ba72:	3754      	adds	r7, #84	@ 0x54
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b09c      	sub	sp, #112	@ 0x70
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba88:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba92:	d071      	beq.n	800bb78 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ba94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baa4:	e853 3f00 	ldrex	r3, [r3]
 800baa8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800baaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800baba:	657b      	str	r3, [r7, #84]	@ 0x54
 800babc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bac0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bac2:	e841 2300 	strex	r3, r2, [r1]
 800bac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e6      	bne.n	800ba9c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3308      	adds	r3, #8
 800bad4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad8:	e853 3f00 	ldrex	r3, [r3]
 800badc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	f023 0301 	bic.w	r3, r3, #1
 800bae4:	667b      	str	r3, [r7, #100]	@ 0x64
 800bae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3308      	adds	r3, #8
 800baec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800baee:	643a      	str	r2, [r7, #64]	@ 0x40
 800baf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800baf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800baf6:	e841 2300 	strex	r3, r2, [r1]
 800bafa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e5      	bne.n	800bace <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	3308      	adds	r3, #8
 800bb08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	e853 3f00 	ldrex	r3, [r3]
 800bb10:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb18:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e5      	bne.n	800bb02 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d118      	bne.n	800bb78 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f023 0310 	bic.w	r3, r3, #16
 800bb5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb64:	61bb      	str	r3, [r7, #24]
 800bb66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	6979      	ldr	r1, [r7, #20]
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	613b      	str	r3, [r7, #16]
   return(result);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e6      	bne.n	800bb46 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d122      	bne.n	800bbcc <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800bb86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bb98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb9e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d204      	bcs.n	800bbb0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bba8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bbac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bbb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bbc6:	f7ff fa59 	bl	800b07c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbca:	e002      	b.n	800bbd2 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bbcc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bbce:	f015 fbb7 	bl	8021340 <HAL_UART_RxCpltCallback>
}
 800bbd2:	bf00      	nop
 800bbd4:	3770      	adds	r7, #112	@ 0x70
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2201      	movs	r2, #1
 800bbec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d123      	bne.n	800bc3e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bbfc:	085b      	lsrs	r3, r3, #1
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bc14:	897a      	ldrh	r2, [r7, #10]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d803      	bhi.n	800bc22 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	897a      	ldrh	r2, [r7, #10]
 800bc1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	4619      	mov	r1, r3
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f7ff fa20 	bl	800b07c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc3c:	e002      	b.n	800bc44 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f7ff fa08 	bl	800b054 <HAL_UART_RxHalfCpltCallback>
}
 800bc44:	bf00      	nop
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc72:	2b80      	cmp	r3, #128	@ 0x80
 800bc74:	d109      	bne.n	800bc8a <UART_DMAError+0x3e>
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	2b21      	cmp	r3, #33	@ 0x21
 800bc7a:	d106      	bne.n	800bc8a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bc84:	6978      	ldr	r0, [r7, #20]
 800bc86:	f7ff fe6f 	bl	800b968 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc94:	2b40      	cmp	r3, #64	@ 0x40
 800bc96:	d109      	bne.n	800bcac <UART_DMAError+0x60>
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b22      	cmp	r3, #34	@ 0x22
 800bc9c:	d106      	bne.n	800bcac <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bca6:	6978      	ldr	r0, [r7, #20]
 800bca8:	f7ff fe84 	bl	800b9b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcb2:	f043 0210 	orr.w	r2, r3, #16
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcbc:	6978      	ldr	r0, [r7, #20]
 800bcbe:	f7ff f9d3 	bl	800b068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcc2:	bf00      	nop
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff f9c1 	bl	800b068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bce6:	bf00      	nop
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b08f      	sub	sp, #60	@ 0x3c
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcfa:	2b21      	cmp	r3, #33	@ 0x21
 800bcfc:	d14c      	bne.n	800bd98 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d132      	bne.n	800bd70 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	e853 3f00 	ldrex	r3, [r3]
 800bd16:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e6      	bne.n	800bd0a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd50:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	61bb      	str	r3, [r7, #24]
 800bd5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6979      	ldr	r1, [r7, #20]
 800bd60:	69ba      	ldr	r2, [r7, #24]
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	613b      	str	r3, [r7, #16]
   return(result);
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e6      	bne.n	800bd3c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bd6e:	e013      	b.n	800bd98 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd74:	781a      	ldrb	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bd98:	bf00      	nop
 800bd9a:	373c      	adds	r7, #60	@ 0x3c
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b091      	sub	sp, #68	@ 0x44
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdb0:	2b21      	cmp	r3, #33	@ 0x21
 800bdb2:	d151      	bne.n	800be58 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d132      	bne.n	800be26 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	623b      	str	r3, [r7, #32]
   return(result);
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdde:	633b      	str	r3, [r7, #48]	@ 0x30
 800bde0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bde4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e6      	bne.n	800bdc0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	e853 3f00 	ldrex	r3, [r3]
 800bdfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be06:	637b      	str	r3, [r7, #52]	@ 0x34
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	461a      	mov	r2, r3
 800be0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be10:	61fb      	str	r3, [r7, #28]
 800be12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be14:	69b9      	ldr	r1, [r7, #24]
 800be16:	69fa      	ldr	r2, [r7, #28]
 800be18:	e841 2300 	strex	r3, r2, [r1]
 800be1c:	617b      	str	r3, [r7, #20]
   return(result);
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1e6      	bne.n	800bdf2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800be24:	e018      	b.n	800be58 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800be2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	461a      	mov	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be3a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be40:	1c9a      	adds	r2, r3, #2
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	3b01      	subs	r3, #1
 800be50:	b29a      	uxth	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800be58:	bf00      	nop
 800be5a:	3744      	adds	r7, #68	@ 0x44
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	e853 3f00 	ldrex	r3, [r3]
 800be78:	60bb      	str	r3, [r7, #8]
   return(result);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be80:	61fb      	str	r3, [r7, #28]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	61bb      	str	r3, [r7, #24]
 800be8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8e:	6979      	ldr	r1, [r7, #20]
 800be90:	69ba      	ldr	r2, [r7, #24]
 800be92:	e841 2300 	strex	r3, r2, [r1]
 800be96:	613b      	str	r3, [r7, #16]
   return(result);
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1e6      	bne.n	800be6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2220      	movs	r2, #32
 800bea2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff f8c8 	bl	800b040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beb0:	bf00      	nop
 800beb2:	3720      	adds	r7, #32
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800bebe:	4b92      	ldr	r3, [pc, #584]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bec0:	220a      	movs	r2, #10
 800bec2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800bec4:	4b90      	ldr	r3, [pc, #576]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800beca:	4b8f      	ldr	r3, [pc, #572]	@ (800c108 <MX_LWIP_Init+0x250>)
 800becc:	2201      	movs	r2, #1
 800bece:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800bed0:	4b8d      	ldr	r3, [pc, #564]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bed2:	2264      	movs	r2, #100	@ 0x64
 800bed4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bed6:	4b8d      	ldr	r3, [pc, #564]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bed8:	22ff      	movs	r2, #255	@ 0xff
 800beda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bedc:	4b8b      	ldr	r3, [pc, #556]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bede:	22ff      	movs	r2, #255	@ 0xff
 800bee0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bee2:	4b8a      	ldr	r3, [pc, #552]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bee4:	22ff      	movs	r2, #255	@ 0xff
 800bee6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bee8:	4b88      	ldr	r3, [pc, #544]	@ (800c10c <MX_LWIP_Init+0x254>)
 800beea:	2200      	movs	r2, #0
 800beec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800beee:	4b88      	ldr	r3, [pc, #544]	@ (800c110 <MX_LWIP_Init+0x258>)
 800bef0:	220a      	movs	r2, #10
 800bef2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bef4:	4b86      	ldr	r3, [pc, #536]	@ (800c110 <MX_LWIP_Init+0x258>)
 800bef6:	2200      	movs	r2, #0
 800bef8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800befa:	4b85      	ldr	r3, [pc, #532]	@ (800c110 <MX_LWIP_Init+0x258>)
 800befc:	2201      	movs	r2, #1
 800befe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800bf00:	4b83      	ldr	r3, [pc, #524]	@ (800c110 <MX_LWIP_Init+0x258>)
 800bf02:	2265      	movs	r2, #101	@ 0x65
 800bf04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bf06:	2100      	movs	r1, #0
 800bf08:	2000      	movs	r0, #0
 800bf0a:	f007 fc7b 	bl	8013804 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bf0e:	4b7e      	ldr	r3, [pc, #504]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	061a      	lsls	r2, r3, #24
 800bf14:	4b7c      	ldr	r3, [pc, #496]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf16:	785b      	ldrb	r3, [r3, #1]
 800bf18:	041b      	lsls	r3, r3, #16
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	4b7a      	ldr	r3, [pc, #488]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf1e:	789b      	ldrb	r3, [r3, #2]
 800bf20:	021b      	lsls	r3, r3, #8
 800bf22:	4313      	orrs	r3, r2
 800bf24:	4a78      	ldr	r2, [pc, #480]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf26:	78d2      	ldrb	r2, [r2, #3]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	061a      	lsls	r2, r3, #24
 800bf2c:	4b76      	ldr	r3, [pc, #472]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	0619      	lsls	r1, r3, #24
 800bf32:	4b75      	ldr	r3, [pc, #468]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf34:	785b      	ldrb	r3, [r3, #1]
 800bf36:	041b      	lsls	r3, r3, #16
 800bf38:	4319      	orrs	r1, r3
 800bf3a:	4b73      	ldr	r3, [pc, #460]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf3c:	789b      	ldrb	r3, [r3, #2]
 800bf3e:	021b      	lsls	r3, r3, #8
 800bf40:	430b      	orrs	r3, r1
 800bf42:	4971      	ldr	r1, [pc, #452]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf44:	78c9      	ldrb	r1, [r1, #3]
 800bf46:	430b      	orrs	r3, r1
 800bf48:	021b      	lsls	r3, r3, #8
 800bf4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf4e:	431a      	orrs	r2, r3
 800bf50:	4b6d      	ldr	r3, [pc, #436]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	0619      	lsls	r1, r3, #24
 800bf56:	4b6c      	ldr	r3, [pc, #432]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf58:	785b      	ldrb	r3, [r3, #1]
 800bf5a:	041b      	lsls	r3, r3, #16
 800bf5c:	4319      	orrs	r1, r3
 800bf5e:	4b6a      	ldr	r3, [pc, #424]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf60:	789b      	ldrb	r3, [r3, #2]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	430b      	orrs	r3, r1
 800bf66:	4968      	ldr	r1, [pc, #416]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf68:	78c9      	ldrb	r1, [r1, #3]
 800bf6a:	430b      	orrs	r3, r1
 800bf6c:	0a1b      	lsrs	r3, r3, #8
 800bf6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf72:	431a      	orrs	r2, r3
 800bf74:	4b64      	ldr	r3, [pc, #400]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	0619      	lsls	r1, r3, #24
 800bf7a:	4b63      	ldr	r3, [pc, #396]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf7c:	785b      	ldrb	r3, [r3, #1]
 800bf7e:	041b      	lsls	r3, r3, #16
 800bf80:	4319      	orrs	r1, r3
 800bf82:	4b61      	ldr	r3, [pc, #388]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf84:	789b      	ldrb	r3, [r3, #2]
 800bf86:	021b      	lsls	r3, r3, #8
 800bf88:	430b      	orrs	r3, r1
 800bf8a:	495f      	ldr	r1, [pc, #380]	@ (800c108 <MX_LWIP_Init+0x250>)
 800bf8c:	78c9      	ldrb	r1, [r1, #3]
 800bf8e:	430b      	orrs	r3, r1
 800bf90:	0e1b      	lsrs	r3, r3, #24
 800bf92:	4313      	orrs	r3, r2
 800bf94:	4a5f      	ldr	r2, [pc, #380]	@ (800c114 <MX_LWIP_Init+0x25c>)
 800bf96:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bf98:	4b5c      	ldr	r3, [pc, #368]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	061a      	lsls	r2, r3, #24
 800bf9e:	4b5b      	ldr	r3, [pc, #364]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	041b      	lsls	r3, r3, #16
 800bfa4:	431a      	orrs	r2, r3
 800bfa6:	4b59      	ldr	r3, [pc, #356]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfa8:	789b      	ldrb	r3, [r3, #2]
 800bfaa:	021b      	lsls	r3, r3, #8
 800bfac:	4313      	orrs	r3, r2
 800bfae:	4a57      	ldr	r2, [pc, #348]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfb0:	78d2      	ldrb	r2, [r2, #3]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	061a      	lsls	r2, r3, #24
 800bfb6:	4b55      	ldr	r3, [pc, #340]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	0619      	lsls	r1, r3, #24
 800bfbc:	4b53      	ldr	r3, [pc, #332]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfbe:	785b      	ldrb	r3, [r3, #1]
 800bfc0:	041b      	lsls	r3, r3, #16
 800bfc2:	4319      	orrs	r1, r3
 800bfc4:	4b51      	ldr	r3, [pc, #324]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfc6:	789b      	ldrb	r3, [r3, #2]
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	494f      	ldr	r1, [pc, #316]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfce:	78c9      	ldrb	r1, [r1, #3]
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bfd8:	431a      	orrs	r2, r3
 800bfda:	4b4c      	ldr	r3, [pc, #304]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	0619      	lsls	r1, r3, #24
 800bfe0:	4b4a      	ldr	r3, [pc, #296]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfe2:	785b      	ldrb	r3, [r3, #1]
 800bfe4:	041b      	lsls	r3, r3, #16
 800bfe6:	4319      	orrs	r1, r3
 800bfe8:	4b48      	ldr	r3, [pc, #288]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bfea:	789b      	ldrb	r3, [r3, #2]
 800bfec:	021b      	lsls	r3, r3, #8
 800bfee:	430b      	orrs	r3, r1
 800bff0:	4946      	ldr	r1, [pc, #280]	@ (800c10c <MX_LWIP_Init+0x254>)
 800bff2:	78c9      	ldrb	r1, [r1, #3]
 800bff4:	430b      	orrs	r3, r1
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bffc:	431a      	orrs	r2, r3
 800bffe:	4b43      	ldr	r3, [pc, #268]	@ (800c10c <MX_LWIP_Init+0x254>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	0619      	lsls	r1, r3, #24
 800c004:	4b41      	ldr	r3, [pc, #260]	@ (800c10c <MX_LWIP_Init+0x254>)
 800c006:	785b      	ldrb	r3, [r3, #1]
 800c008:	041b      	lsls	r3, r3, #16
 800c00a:	4319      	orrs	r1, r3
 800c00c:	4b3f      	ldr	r3, [pc, #252]	@ (800c10c <MX_LWIP_Init+0x254>)
 800c00e:	789b      	ldrb	r3, [r3, #2]
 800c010:	021b      	lsls	r3, r3, #8
 800c012:	430b      	orrs	r3, r1
 800c014:	493d      	ldr	r1, [pc, #244]	@ (800c10c <MX_LWIP_Init+0x254>)
 800c016:	78c9      	ldrb	r1, [r1, #3]
 800c018:	430b      	orrs	r3, r1
 800c01a:	0e1b      	lsrs	r3, r3, #24
 800c01c:	4313      	orrs	r3, r2
 800c01e:	4a3e      	ldr	r2, [pc, #248]	@ (800c118 <MX_LWIP_Init+0x260>)
 800c020:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c022:	4b3b      	ldr	r3, [pc, #236]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	061a      	lsls	r2, r3, #24
 800c028:	4b39      	ldr	r3, [pc, #228]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c02a:	785b      	ldrb	r3, [r3, #1]
 800c02c:	041b      	lsls	r3, r3, #16
 800c02e:	431a      	orrs	r2, r3
 800c030:	4b37      	ldr	r3, [pc, #220]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c032:	789b      	ldrb	r3, [r3, #2]
 800c034:	021b      	lsls	r3, r3, #8
 800c036:	4313      	orrs	r3, r2
 800c038:	4a35      	ldr	r2, [pc, #212]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c03a:	78d2      	ldrb	r2, [r2, #3]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	061a      	lsls	r2, r3, #24
 800c040:	4b33      	ldr	r3, [pc, #204]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	0619      	lsls	r1, r3, #24
 800c046:	4b32      	ldr	r3, [pc, #200]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c048:	785b      	ldrb	r3, [r3, #1]
 800c04a:	041b      	lsls	r3, r3, #16
 800c04c:	4319      	orrs	r1, r3
 800c04e:	4b30      	ldr	r3, [pc, #192]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c050:	789b      	ldrb	r3, [r3, #2]
 800c052:	021b      	lsls	r3, r3, #8
 800c054:	430b      	orrs	r3, r1
 800c056:	492e      	ldr	r1, [pc, #184]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c058:	78c9      	ldrb	r1, [r1, #3]
 800c05a:	430b      	orrs	r3, r1
 800c05c:	021b      	lsls	r3, r3, #8
 800c05e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c062:	431a      	orrs	r2, r3
 800c064:	4b2a      	ldr	r3, [pc, #168]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	0619      	lsls	r1, r3, #24
 800c06a:	4b29      	ldr	r3, [pc, #164]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c06c:	785b      	ldrb	r3, [r3, #1]
 800c06e:	041b      	lsls	r3, r3, #16
 800c070:	4319      	orrs	r1, r3
 800c072:	4b27      	ldr	r3, [pc, #156]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c074:	789b      	ldrb	r3, [r3, #2]
 800c076:	021b      	lsls	r3, r3, #8
 800c078:	430b      	orrs	r3, r1
 800c07a:	4925      	ldr	r1, [pc, #148]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c07c:	78c9      	ldrb	r1, [r1, #3]
 800c07e:	430b      	orrs	r3, r1
 800c080:	0a1b      	lsrs	r3, r3, #8
 800c082:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c086:	431a      	orrs	r2, r3
 800c088:	4b21      	ldr	r3, [pc, #132]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	0619      	lsls	r1, r3, #24
 800c08e:	4b20      	ldr	r3, [pc, #128]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c090:	785b      	ldrb	r3, [r3, #1]
 800c092:	041b      	lsls	r3, r3, #16
 800c094:	4319      	orrs	r1, r3
 800c096:	4b1e      	ldr	r3, [pc, #120]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c098:	789b      	ldrb	r3, [r3, #2]
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	430b      	orrs	r3, r1
 800c09e:	491c      	ldr	r1, [pc, #112]	@ (800c110 <MX_LWIP_Init+0x258>)
 800c0a0:	78c9      	ldrb	r1, [r1, #3]
 800c0a2:	430b      	orrs	r3, r1
 800c0a4:	0e1b      	lsrs	r3, r3, #24
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	4a1c      	ldr	r2, [pc, #112]	@ (800c11c <MX_LWIP_Init+0x264>)
 800c0aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800c120 <MX_LWIP_Init+0x268>)
 800c0ae:	9302      	str	r3, [sp, #8]
 800c0b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c124 <MX_LWIP_Init+0x26c>)
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4b18      	ldr	r3, [pc, #96]	@ (800c11c <MX_LWIP_Init+0x264>)
 800c0ba:	4a17      	ldr	r2, [pc, #92]	@ (800c118 <MX_LWIP_Init+0x260>)
 800c0bc:	4915      	ldr	r1, [pc, #84]	@ (800c114 <MX_LWIP_Init+0x25c>)
 800c0be:	481a      	ldr	r0, [pc, #104]	@ (800c128 <MX_LWIP_Init+0x270>)
 800c0c0:	f008 fa64 	bl	801458c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c0c4:	4818      	ldr	r0, [pc, #96]	@ (800c128 <MX_LWIP_Init+0x270>)
 800c0c6:	f008 fcf5 	bl	8014ab4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c0ca:	4817      	ldr	r0, [pc, #92]	@ (800c128 <MX_LWIP_Init+0x270>)
 800c0cc:	f008 fd16 	bl	8014afc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c0d0:	4916      	ldr	r1, [pc, #88]	@ (800c12c <MX_LWIP_Init+0x274>)
 800c0d2:	4815      	ldr	r0, [pc, #84]	@ (800c128 <MX_LWIP_Init+0x270>)
 800c0d4:	f008 fe14 	bl	8014d00 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c0d8:	2224      	movs	r2, #36	@ 0x24
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4814      	ldr	r0, [pc, #80]	@ (800c130 <MX_LWIP_Init+0x278>)
 800c0de:	f015 fbaf 	bl	8021840 <memset>
  attributes.name = "EthLink";
 800c0e2:	4b13      	ldr	r3, [pc, #76]	@ (800c130 <MX_LWIP_Init+0x278>)
 800c0e4:	4a13      	ldr	r2, [pc, #76]	@ (800c134 <MX_LWIP_Init+0x27c>)
 800c0e6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c0e8:	4b11      	ldr	r3, [pc, #68]	@ (800c130 <MX_LWIP_Init+0x278>)
 800c0ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c0ee:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c0f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c130 <MX_LWIP_Init+0x278>)
 800c0f2:	2210      	movs	r2, #16
 800c0f4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c0f6:	4a0e      	ldr	r2, [pc, #56]	@ (800c130 <MX_LWIP_Init+0x278>)
 800c0f8:	490b      	ldr	r1, [pc, #44]	@ (800c128 <MX_LWIP_Init+0x270>)
 800c0fa:	480f      	ldr	r0, [pc, #60]	@ (800c138 <MX_LWIP_Init+0x280>)
 800c0fc:	f000 fdce 	bl	800cc9c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c100:	bf00      	nop
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20000b94 	.word	0x20000b94
 800c10c:	20000b98 	.word	0x20000b98
 800c110:	20000b9c 	.word	0x20000b9c
 800c114:	20000b88 	.word	0x20000b88
 800c118:	20000b8c 	.word	0x20000b8c
 800c11c:	20000b90 	.word	0x20000b90
 800c120:	08013715 	.word	0x08013715
 800c124:	0800c67d 	.word	0x0800c67d
 800c128:	20000b54 	.word	0x20000b54
 800c12c:	0800c13d 	.word	0x0800c13d
 800c130:	20000ba0 	.word	0x20000ba0
 800c134:	0802275c 	.word	0x0802275c
 800c138:	0800c955 	.word	0x0800c955

0800c13c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c162:	2320      	movs	r3, #32
 800c164:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c166:	f3bf 8f4f 	dsb	sy
}
 800c16a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c16c:	e00b      	b.n	800c186 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c16e:	4a0d      	ldr	r2, [pc, #52]	@ (800c1a4 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	4413      	add	r3, r2
 800c17c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	dcf0      	bgt.n	800c16e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c18c:	f3bf 8f4f 	dsb	sy
}
 800c190:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c192:	f3bf 8f6f 	isb	sy
}
 800c196:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c198:	bf00      	nop
 800c19a:	371c      	adds	r7, #28
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr
 800c1a4:	e000ed00 	.word	0xe000ed00

0800c1a8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c1b0:	4b04      	ldr	r3, [pc, #16]	@ (800c1c4 <HAL_ETH_RxCpltCallback+0x1c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f001 f9ad 	bl	800d514 <osSemaphoreRelease>
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	2000cfe0 	.word	0x2000cfe0

0800c1c8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c1d0:	4b04      	ldr	r3, [pc, #16]	@ (800c1e4 <HAL_ETH_TxCpltCallback+0x1c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 f99d 	bl	800d514 <osSemaphoreRelease>
}
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	2000cfe4 	.word	0x2000cfe4

0800c1e8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7f8 fb90 	bl	8004916 <HAL_ETH_GetDMAError>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1fc:	2b80      	cmp	r3, #128	@ 0x80
 800c1fe:	d104      	bne.n	800c20a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c200:	4b04      	ldr	r3, [pc, #16]	@ (800c214 <HAL_ETH_ErrorCallback+0x2c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4618      	mov	r0, r3
 800c206:	f001 f985 	bl	800d514 <osSemaphoreRelease>
  }
}
 800c20a:	bf00      	nop
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	2000cfe0 	.word	0x2000cfe0

0800c218 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b0aa      	sub	sp, #168	@ 0xa8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c232:	f107 0310 	add.w	r3, r7, #16
 800c236:	2264      	movs	r2, #100	@ 0x64
 800c238:	2100      	movs	r1, #0
 800c23a:	4618      	mov	r0, r3
 800c23c:	f015 fb00 	bl	8021840 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c240:	4b89      	ldr	r3, [pc, #548]	@ (800c468 <low_level_init+0x250>)
 800c242:	4a8a      	ldr	r2, [pc, #552]	@ (800c46c <low_level_init+0x254>)
 800c244:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c246:	2300      	movs	r3, #0
 800c248:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c24a:	2380      	movs	r3, #128	@ 0x80
 800c24c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c24e:	23e1      	movs	r3, #225	@ 0xe1
 800c250:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c252:	2300      	movs	r3, #0
 800c254:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c256:	2300      	movs	r3, #0
 800c258:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c25a:	2300      	movs	r3, #0
 800c25c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c25e:	4a82      	ldr	r2, [pc, #520]	@ (800c468 <low_level_init+0x250>)
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c266:	4b80      	ldr	r3, [pc, #512]	@ (800c468 <low_level_init+0x250>)
 800c268:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c26c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c26e:	4b7e      	ldr	r3, [pc, #504]	@ (800c468 <low_level_init+0x250>)
 800c270:	4a7f      	ldr	r2, [pc, #508]	@ (800c470 <low_level_init+0x258>)
 800c272:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c274:	4b7c      	ldr	r3, [pc, #496]	@ (800c468 <low_level_init+0x250>)
 800c276:	4a7f      	ldr	r2, [pc, #508]	@ (800c474 <low_level_init+0x25c>)
 800c278:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c27a:	4b7b      	ldr	r3, [pc, #492]	@ (800c468 <low_level_init+0x250>)
 800c27c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c280:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c282:	4879      	ldr	r0, [pc, #484]	@ (800c468 <low_level_init+0x250>)
 800c284:	f7f7 fcfe 	bl	8003c84 <HAL_ETH_Init>
 800c288:	4603      	mov	r3, r0
 800c28a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c28e:	2238      	movs	r2, #56	@ 0x38
 800c290:	2100      	movs	r1, #0
 800c292:	4879      	ldr	r0, [pc, #484]	@ (800c478 <low_level_init+0x260>)
 800c294:	f015 fad4 	bl	8021840 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c298:	4b77      	ldr	r3, [pc, #476]	@ (800c478 <low_level_init+0x260>)
 800c29a:	2221      	movs	r2, #33	@ 0x21
 800c29c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c29e:	4b76      	ldr	r3, [pc, #472]	@ (800c478 <low_level_init+0x260>)
 800c2a0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c2a4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c2a6:	4b74      	ldr	r3, [pc, #464]	@ (800c478 <low_level_init+0x260>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c2ac:	4873      	ldr	r0, [pc, #460]	@ (800c47c <low_level_init+0x264>)
 800c2ae:	f007 ffe9 	bl	8014284 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2206      	movs	r2, #6
 800c2b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c2ba:	4b6b      	ldr	r3, [pc, #428]	@ (800c468 <low_level_init+0x250>)
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	781a      	ldrb	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c2c6:	4b68      	ldr	r3, [pc, #416]	@ (800c468 <low_level_init+0x250>)
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	785a      	ldrb	r2, [r3, #1]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c2d2:	4b65      	ldr	r3, [pc, #404]	@ (800c468 <low_level_init+0x250>)
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	789a      	ldrb	r2, [r3, #2]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c2de:	4b62      	ldr	r3, [pc, #392]	@ (800c468 <low_level_init+0x250>)
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	78da      	ldrb	r2, [r3, #3]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c2ea:	4b5f      	ldr	r3, [pc, #380]	@ (800c468 <low_level_init+0x250>)
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	791a      	ldrb	r2, [r3, #4]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c2f6:	4b5c      	ldr	r3, [pc, #368]	@ (800c468 <low_level_init+0x250>)
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	795a      	ldrb	r2, [r3, #5]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c308:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c310:	f043 030a 	orr.w	r3, r3, #10
 800c314:	b2da      	uxtb	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c31c:	2200      	movs	r2, #0
 800c31e:	2100      	movs	r1, #0
 800c320:	2001      	movs	r0, #1
 800c322:	f000 fff5 	bl	800d310 <osSemaphoreNew>
 800c326:	4603      	mov	r3, r0
 800c328:	4a55      	ldr	r2, [pc, #340]	@ (800c480 <low_level_init+0x268>)
 800c32a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c32c:	2200      	movs	r2, #0
 800c32e:	2100      	movs	r1, #0
 800c330:	2001      	movs	r0, #1
 800c332:	f000 ffed 	bl	800d310 <osSemaphoreNew>
 800c336:	4603      	mov	r3, r0
 800c338:	4a52      	ldr	r2, [pc, #328]	@ (800c484 <low_level_init+0x26c>)
 800c33a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c33c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c340:	2224      	movs	r2, #36	@ 0x24
 800c342:	2100      	movs	r1, #0
 800c344:	4618      	mov	r0, r3
 800c346:	f015 fa7b 	bl	8021840 <memset>
  attributes.name = "EthIf";
 800c34a:	4b4f      	ldr	r3, [pc, #316]	@ (800c488 <low_level_init+0x270>)
 800c34c:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c34e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c352:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c356:	2330      	movs	r3, #48	@ 0x30
 800c358:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c35c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c360:	461a      	mov	r2, r3
 800c362:	6879      	ldr	r1, [r7, #4]
 800c364:	4849      	ldr	r0, [pc, #292]	@ (800c48c <low_level_init+0x274>)
 800c366:	f000 fc99 	bl	800cc9c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c36a:	4949      	ldr	r1, [pc, #292]	@ (800c490 <low_level_init+0x278>)
 800c36c:	4849      	ldr	r0, [pc, #292]	@ (800c494 <low_level_init+0x27c>)
 800c36e:	f7f5 ff9c 	bl	80022aa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c372:	4848      	ldr	r0, [pc, #288]	@ (800c494 <low_level_init+0x27c>)
 800c374:	f7f5 ffcb 	bl	800230e <LAN8742_Init>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d006      	beq.n	800c38c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f008 fc8e 	bl	8014ca0 <netif_set_link_down>
    netif_set_down(netif);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f008 fc25 	bl	8014bd4 <netif_set_down>
 800c38a:	e06a      	b.n	800c462 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c38c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c390:	2b00      	cmp	r3, #0
 800c392:	d164      	bne.n	800c45e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c394:	483f      	ldr	r0, [pc, #252]	@ (800c494 <low_level_init+0x27c>)
 800c396:	f7f6 f807 	bl	80023a8 <LAN8742_GetLinkState>
 800c39a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c39e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	dc06      	bgt.n	800c3b4 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f008 fc7a 	bl	8014ca0 <netif_set_link_down>
      netif_set_down(netif);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f008 fc11 	bl	8014bd4 <netif_set_down>
 800c3b2:	e056      	b.n	800c462 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c3b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3b8:	3b02      	subs	r3, #2
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d82a      	bhi.n	800c414 <low_level_init+0x1fc>
 800c3be:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c4 <low_level_init+0x1ac>)
 800c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c4:	0800c3d5 	.word	0x0800c3d5
 800c3c8:	0800c3e7 	.word	0x0800c3e7
 800c3cc:	0800c3f7 	.word	0x0800c3f7
 800c3d0:	0800c407 	.word	0x0800c407
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c3d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c3dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c3e4:	e01f      	b.n	800c426 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c3ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c3f4:	e017      	b.n	800c426 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c3f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c3fe:	2300      	movs	r3, #0
 800c400:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c404:	e00f      	b.n	800c426 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c406:	2300      	movs	r3, #0
 800c408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c40c:	2300      	movs	r3, #0
 800c40e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c412:	e008      	b.n	800c426 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c414:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c418:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c41c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c420:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c424:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c426:	f107 0310 	add.w	r3, r7, #16
 800c42a:	4619      	mov	r1, r3
 800c42c:	480e      	ldr	r0, [pc, #56]	@ (800c468 <low_level_init+0x250>)
 800c42e:	f7f8 f911 	bl	8004654 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c436:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c43c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c43e:	f107 0310 	add.w	r3, r7, #16
 800c442:	4619      	mov	r1, r3
 800c444:	4808      	ldr	r0, [pc, #32]	@ (800c468 <low_level_init+0x250>)
 800c446:	f7f8 f9fc 	bl	8004842 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c44a:	4807      	ldr	r0, [pc, #28]	@ (800c468 <low_level_init+0x250>)
 800c44c:	f7f7 fcb4 	bl	8003db8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f008 fb53 	bl	8014afc <netif_set_up>
    netif_set_link_up(netif);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f008 fbee 	bl	8014c38 <netif_set_link_up>
 800c45c:	e001      	b.n	800c462 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c45e:	f7f4 ff8f 	bl	8001380 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c462:	37a8      	adds	r7, #168	@ 0xa8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	2000cfe8 	.word	0x2000cfe8
 800c46c:	40028000 	.word	0x40028000
 800c470:	20000170 	.word	0x20000170
 800c474:	200000d0 	.word	0x200000d0
 800c478:	2000d098 	.word	0x2000d098
 800c47c:	08027280 	.word	0x08027280
 800c480:	2000cfe0 	.word	0x2000cfe0
 800c484:	2000cfe4 	.word	0x2000cfe4
 800c488:	0802277c 	.word	0x0802277c
 800c48c:	0800c629 	.word	0x0800c629
 800c490:	2000000c 	.word	0x2000000c
 800c494:	2000d0d0 	.word	0x2000d0d0

0800c498 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b092      	sub	sp, #72	@ 0x48
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c4b0:	f107 030c 	add.w	r3, r7, #12
 800c4b4:	2230      	movs	r2, #48	@ 0x30
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f015 f9c1 	bl	8021840 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c4be:	f107 030c 	add.w	r3, r7, #12
 800c4c2:	2230      	movs	r2, #48	@ 0x30
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f015 f9ba 	bl	8021840 <memset>

  for(q = p; q != NULL; q = q->next)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4d0:	e045      	b.n	800c55e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c4d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	d902      	bls.n	800c4de <low_level_output+0x46>
      return ERR_IF;
 800c4d8:	f06f 030b 	mvn.w	r3, #11
 800c4dc:	e07f      	b.n	800c5de <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e0:	6859      	ldr	r1, [r3, #4]
 800c4e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	4413      	add	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	3348      	adds	r3, #72	@ 0x48
 800c4ee:	443b      	add	r3, r7
 800c4f0:	3b3c      	subs	r3, #60	@ 0x3c
 800c4f2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f6:	895b      	ldrh	r3, [r3, #10]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	3348      	adds	r3, #72	@ 0x48
 800c506:	443b      	add	r3, r7
 800c508:	3b38      	subs	r3, #56	@ 0x38
 800c50a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c50c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d011      	beq.n	800c536 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c514:	1e5a      	subs	r2, r3, #1
 800c516:	f107 000c 	add.w	r0, r7, #12
 800c51a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c51c:	460b      	mov	r3, r1
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	440b      	add	r3, r1
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	18c1      	adds	r1, r0, r3
 800c526:	4613      	mov	r3, r2
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4413      	add	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	3348      	adds	r3, #72	@ 0x48
 800c530:	443b      	add	r3, r7
 800c532:	3b34      	subs	r3, #52	@ 0x34
 800c534:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d109      	bne.n	800c552 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c540:	4613      	mov	r3, r2
 800c542:	005b      	lsls	r3, r3, #1
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	3348      	adds	r3, #72	@ 0x48
 800c54a:	443b      	add	r3, r7
 800c54c:	3b34      	subs	r3, #52	@ 0x34
 800c54e:	2200      	movs	r2, #0
 800c550:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c554:	3301      	adds	r3, #1
 800c556:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c55e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1b6      	bne.n	800c4d2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	891b      	ldrh	r3, [r3, #8]
 800c568:	461a      	mov	r2, r3
 800c56a:	4b1f      	ldr	r3, [pc, #124]	@ (800c5e8 <low_level_output+0x150>)
 800c56c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c56e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5e8 <low_level_output+0x150>)
 800c570:	f107 030c 	add.w	r3, r7, #12
 800c574:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c576:	4a1c      	ldr	r2, [pc, #112]	@ (800c5e8 <low_level_output+0x150>)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c57c:	6838      	ldr	r0, [r7, #0]
 800c57e:	f009 f877 	bl	8015670 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c582:	4919      	ldr	r1, [pc, #100]	@ (800c5e8 <low_level_output+0x150>)
 800c584:	4819      	ldr	r0, [pc, #100]	@ (800c5ec <low_level_output+0x154>)
 800c586:	f7f7 fd07 	bl	8003f98 <HAL_ETH_Transmit_IT>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d103      	bne.n	800c598 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c596:	e01b      	b.n	800c5d0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c598:	4814      	ldr	r0, [pc, #80]	@ (800c5ec <low_level_output+0x154>)
 800c59a:	f7f8 f9af 	bl	80048fc <HAL_ETH_GetError>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00d      	beq.n	800c5c4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c5a8:	4b11      	ldr	r3, [pc, #68]	@ (800c5f0 <low_level_output+0x158>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 ff49 	bl	800d448 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c5b6:	480d      	ldr	r0, [pc, #52]	@ (800c5ec <low_level_output+0x154>)
 800c5b8:	f7f7 fe8e 	bl	80042d8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c5bc:	23fe      	movs	r3, #254	@ 0xfe
 800c5be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c5c2:	e005      	b.n	800c5d0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c5c4:	6838      	ldr	r0, [r7, #0]
 800c5c6:	f008 ff95 	bl	80154f4 <pbuf_free>
        errval =  ERR_IF;
 800c5ca:	23f4      	movs	r3, #244	@ 0xf4
 800c5cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c5d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c5d4:	f113 0f02 	cmn.w	r3, #2
 800c5d8:	d0d3      	beq.n	800c582 <low_level_output+0xea>

  return errval;
 800c5da:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3748      	adds	r7, #72	@ 0x48
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	2000d098 	.word	0x2000d098
 800c5ec:	2000cfe8 	.word	0x2000cfe8
 800c5f0:	2000cfe4 	.word	0x2000cfe4

0800c5f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c600:	4b07      	ldr	r3, [pc, #28]	@ (800c620 <low_level_input+0x2c>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d105      	bne.n	800c614 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c608:	f107 030c 	add.w	r3, r7, #12
 800c60c:	4619      	mov	r1, r3
 800c60e:	4805      	ldr	r0, [pc, #20]	@ (800c624 <low_level_input+0x30>)
 800c610:	f7f7 fd1e 	bl	8004050 <HAL_ETH_ReadData>
  }

  return p;
 800c614:	68fb      	ldr	r3, [r7, #12]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	2000cfdc 	.word	0x2000cfdc
 800c624:	2000cfe8 	.word	0x2000cfe8

0800c628 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c638:	4b0f      	ldr	r3, [pc, #60]	@ (800c678 <ethernetif_input+0x50>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c640:	4618      	mov	r0, r3
 800c642:	f000 ff01 	bl	800d448 <osSemaphoreAcquire>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1f5      	bne.n	800c638 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c64c:	68b8      	ldr	r0, [r7, #8]
 800c64e:	f7ff ffd1 	bl	800c5f4 <low_level_input>
 800c652:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00a      	beq.n	800c670 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	68b9      	ldr	r1, [r7, #8]
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	4798      	blx	r3
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f008 ff42 	bl	80154f4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1ea      	bne.n	800c64c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c676:	e7df      	b.n	800c638 <ethernetif_input+0x10>
 800c678:	2000cfe0 	.word	0x2000cfe0

0800c67c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d106      	bne.n	800c698 <ethernetif_init+0x1c>
 800c68a:	4b0e      	ldr	r3, [pc, #56]	@ (800c6c4 <ethernetif_init+0x48>)
 800c68c:	f240 220d 	movw	r2, #525	@ 0x20d
 800c690:	490d      	ldr	r1, [pc, #52]	@ (800c6c8 <ethernetif_init+0x4c>)
 800c692:	480e      	ldr	r0, [pc, #56]	@ (800c6cc <ethernetif_init+0x50>)
 800c694:	f014 ff74 	bl	8021580 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2273      	movs	r2, #115	@ 0x73
 800c69c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2274      	movs	r2, #116	@ 0x74
 800c6a4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a09      	ldr	r2, [pc, #36]	@ (800c6d0 <ethernetif_init+0x54>)
 800c6ac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a08      	ldr	r2, [pc, #32]	@ (800c6d4 <ethernetif_init+0x58>)
 800c6b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7ff fdaf 	bl	800c218 <low_level_init>

  return ERR_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	08022784 	.word	0x08022784
 800c6c8:	080227a0 	.word	0x080227a0
 800c6cc:	080227b0 	.word	0x080227b0
 800c6d0:	0801dd85 	.word	0x0801dd85
 800c6d4:	0800c499 	.word	0x0800c499

0800c6d8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c6e4:	68f9      	ldr	r1, [r7, #12]
 800c6e6:	4809      	ldr	r0, [pc, #36]	@ (800c70c <pbuf_free_custom+0x34>)
 800c6e8:	f007 fefa 	bl	80144e0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c6ec:	4b08      	ldr	r3, [pc, #32]	@ (800c710 <pbuf_free_custom+0x38>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d107      	bne.n	800c704 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c6f4:	4b06      	ldr	r3, [pc, #24]	@ (800c710 <pbuf_free_custom+0x38>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c6fa:	4b06      	ldr	r3, [pc, #24]	@ (800c714 <pbuf_free_custom+0x3c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 ff08 	bl	800d514 <osSemaphoreRelease>
  }
}
 800c704:	bf00      	nop
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	08027280 	.word	0x08027280
 800c710:	2000cfdc 	.word	0x2000cfdc
 800c714:	2000cfe0 	.word	0x2000cfe0

0800c718 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c71c:	f7f5 feec 	bl	80024f8 <HAL_GetTick>
 800c720:	4603      	mov	r3, r0
}
 800c722:	4618      	mov	r0, r3
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b08e      	sub	sp, #56	@ 0x38
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c734:	2200      	movs	r2, #0
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	605a      	str	r2, [r3, #4]
 800c73a:	609a      	str	r2, [r3, #8]
 800c73c:	60da      	str	r2, [r3, #12]
 800c73e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a56      	ldr	r2, [pc, #344]	@ (800c8a0 <HAL_ETH_MspInit+0x178>)
 800c746:	4293      	cmp	r3, r2
 800c748:	f040 80a6 	bne.w	800c898 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c74c:	4b55      	ldr	r3, [pc, #340]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c74e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c750:	4a54      	ldr	r2, [pc, #336]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c752:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c756:	6313      	str	r3, [r2, #48]	@ 0x30
 800c758:	4b52      	ldr	r3, [pc, #328]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c75c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c760:	623b      	str	r3, [r7, #32]
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	4b4f      	ldr	r3, [pc, #316]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c768:	4a4e      	ldr	r2, [pc, #312]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c76a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c76e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c770:	4b4c      	ldr	r3, [pc, #304]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c774:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c778:	61fb      	str	r3, [r7, #28]
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	4b49      	ldr	r3, [pc, #292]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c77e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c780:	4a48      	ldr	r2, [pc, #288]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c782:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c786:	6313      	str	r3, [r2, #48]	@ 0x30
 800c788:	4b46      	ldr	r3, [pc, #280]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c78a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c790:	61bb      	str	r3, [r7, #24]
 800c792:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c794:	4b43      	ldr	r3, [pc, #268]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c798:	4a42      	ldr	r2, [pc, #264]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c79a:	f043 0304 	orr.w	r3, r3, #4
 800c79e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7a0:	4b40      	ldr	r3, [pc, #256]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7a4:	f003 0304 	and.w	r3, r3, #4
 800c7a8:	617b      	str	r3, [r7, #20]
 800c7aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7ac:	4b3d      	ldr	r3, [pc, #244]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b0:	4a3c      	ldr	r2, [pc, #240]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7b2:	f043 0301 	orr.w	r3, r3, #1
 800c7b6:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7b8:	4b3a      	ldr	r3, [pc, #232]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	613b      	str	r3, [r7, #16]
 800c7c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7c4:	4b37      	ldr	r3, [pc, #220]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c8:	4a36      	ldr	r2, [pc, #216]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7ca:	f043 0302 	orr.w	r3, r3, #2
 800c7ce:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7d0:	4b34      	ldr	r3, [pc, #208]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7d4:	f003 0302 	and.w	r3, r3, #2
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c7dc:	4b31      	ldr	r3, [pc, #196]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7e0:	4a30      	ldr	r2, [pc, #192]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7e6:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7e8:	4b2e      	ldr	r3, [pc, #184]	@ (800c8a4 <HAL_ETH_MspInit+0x17c>)
 800c7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f0:	60bb      	str	r3, [r7, #8]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c7f4:	2332      	movs	r3, #50	@ 0x32
 800c7f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c800:	2303      	movs	r3, #3
 800c802:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c804:	230b      	movs	r3, #11
 800c806:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c80c:	4619      	mov	r1, r3
 800c80e:	4826      	ldr	r0, [pc, #152]	@ (800c8a8 <HAL_ETH_MspInit+0x180>)
 800c810:	f7f8 fcae 	bl	8005170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c814:	2386      	movs	r3, #134	@ 0x86
 800c816:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c818:	2302      	movs	r3, #2
 800c81a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c81c:	2300      	movs	r3, #0
 800c81e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c820:	2303      	movs	r3, #3
 800c822:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c824:	230b      	movs	r3, #11
 800c826:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c82c:	4619      	mov	r1, r3
 800c82e:	481f      	ldr	r0, [pc, #124]	@ (800c8ac <HAL_ETH_MspInit+0x184>)
 800c830:	f7f8 fc9e 	bl	8005170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c838:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c83a:	2302      	movs	r3, #2
 800c83c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c83e:	2300      	movs	r3, #0
 800c840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c842:	2303      	movs	r3, #3
 800c844:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c846:	230b      	movs	r3, #11
 800c848:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c84a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c84e:	4619      	mov	r1, r3
 800c850:	4817      	ldr	r0, [pc, #92]	@ (800c8b0 <HAL_ETH_MspInit+0x188>)
 800c852:	f7f8 fc8d 	bl	8005170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c856:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c85a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c85c:	2302      	movs	r3, #2
 800c85e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c860:	2300      	movs	r3, #0
 800c862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c864:	2303      	movs	r3, #3
 800c866:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c868:	230b      	movs	r3, #11
 800c86a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c86c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c870:	4619      	mov	r1, r3
 800c872:	4810      	ldr	r0, [pc, #64]	@ (800c8b4 <HAL_ETH_MspInit+0x18c>)
 800c874:	f7f8 fc7c 	bl	8005170 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c878:	2200      	movs	r2, #0
 800c87a:	2105      	movs	r1, #5
 800c87c:	203d      	movs	r0, #61	@ 0x3d
 800c87e:	f7f6 fba9 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c882:	203d      	movs	r0, #61	@ 0x3d
 800c884:	f7f6 fbc2 	bl	800300c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c888:	2200      	movs	r2, #0
 800c88a:	2105      	movs	r1, #5
 800c88c:	203e      	movs	r0, #62	@ 0x3e
 800c88e:	f7f6 fba1 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c892:	203e      	movs	r0, #62	@ 0x3e
 800c894:	f7f6 fbba 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c898:	bf00      	nop
 800c89a:	3738      	adds	r7, #56	@ 0x38
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	40028000 	.word	0x40028000
 800c8a4:	40023800 	.word	0x40023800
 800c8a8:	40020800 	.word	0x40020800
 800c8ac:	40020000 	.word	0x40020000
 800c8b0:	40020400 	.word	0x40020400
 800c8b4:	40021800 	.word	0x40021800

0800c8b8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c8bc:	4802      	ldr	r0, [pc, #8]	@ (800c8c8 <ETH_PHY_IO_Init+0x10>)
 800c8be:	f7f7 ffdb 	bl	8004878 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	2000cfe8 	.word	0x2000cfe8

0800c8cc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	af00      	add	r7, sp, #0
  return 0;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	68f9      	ldr	r1, [r7, #12]
 800c8ee:	4807      	ldr	r0, [pc, #28]	@ (800c90c <ETH_PHY_IO_ReadReg+0x30>)
 800c8f0:	f7f7 fe1c 	bl	800452c <HAL_ETH_ReadPHYRegister>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8fe:	e000      	b.n	800c902 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	2000cfe8 	.word	0x2000cfe8

0800c910 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	68f9      	ldr	r1, [r7, #12]
 800c922:	4807      	ldr	r0, [pc, #28]	@ (800c940 <ETH_PHY_IO_WriteReg+0x30>)
 800c924:	f7f7 fe4d 	bl	80045c2 <HAL_ETH_WritePHYRegister>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c92e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c932:	e000      	b.n	800c936 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	2000cfe8 	.word	0x2000cfe8

0800c944 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c948:	f7f5 fdd6 	bl	80024f8 <HAL_GetTick>
 800c94c:	4603      	mov	r3, r0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	bd80      	pop	{r7, pc}
	...

0800c954 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b0a0      	sub	sp, #128	@ 0x80
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c95c:	f107 0308 	add.w	r3, r7, #8
 800c960:	2264      	movs	r2, #100	@ 0x64
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f014 ff6b 	bl	8021840 <memset>
  int32_t PHYLinkState = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c972:	2300      	movs	r3, #0
 800c974:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c976:	2300      	movs	r3, #0
 800c978:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c97e:	483a      	ldr	r0, [pc, #232]	@ (800ca68 <ethernet_link_thread+0x114>)
 800c980:	f7f5 fd12 	bl	80023a8 <LAN8742_GetLinkState>
 800c984:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c988:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c98c:	089b      	lsrs	r3, r3, #2
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00c      	beq.n	800c9b2 <ethernet_link_thread+0x5e>
 800c998:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	dc09      	bgt.n	800c9b2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c99e:	4833      	ldr	r0, [pc, #204]	@ (800ca6c <ethernet_link_thread+0x118>)
 800c9a0:	f7f7 fa7a 	bl	8003e98 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c9a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9a6:	f008 f915 	bl	8014bd4 <netif_set_down>
    netif_set_link_down(netif);
 800c9aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9ac:	f008 f978 	bl	8014ca0 <netif_set_link_down>
 800c9b0:	e055      	b.n	800ca5e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c9b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c9b8:	f003 0304 	and.w	r3, r3, #4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d14e      	bne.n	800ca5e <ethernet_link_thread+0x10a>
 800c9c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	dd4b      	ble.n	800ca5e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c9c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c9c8:	3b02      	subs	r3, #2
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d82a      	bhi.n	800ca24 <ethernet_link_thread+0xd0>
 800c9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d4 <ethernet_link_thread+0x80>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800c9e5 	.word	0x0800c9e5
 800c9d8:	0800c9f7 	.word	0x0800c9f7
 800c9dc:	0800ca07 	.word	0x0800ca07
 800c9e0:	0800ca17 	.word	0x0800ca17
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c9e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c9e8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c9ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c9ee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c9f4:	e017      	b.n	800ca26 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c9fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c9fe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ca00:	2301      	movs	r3, #1
 800ca02:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ca04:	e00f      	b.n	800ca26 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ca06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca0a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ca10:	2301      	movs	r3, #1
 800ca12:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ca14:	e007      	b.n	800ca26 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ca16:	2300      	movs	r3, #0
 800ca18:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ca22:	e000      	b.n	800ca26 <ethernet_link_thread+0xd2>
    default:
      break;
 800ca24:	bf00      	nop
    }

    if(linkchanged)
 800ca26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d018      	beq.n	800ca5e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ca2c:	f107 0308 	add.w	r3, r7, #8
 800ca30:	4619      	mov	r1, r3
 800ca32:	480e      	ldr	r0, [pc, #56]	@ (800ca6c <ethernet_link_thread+0x118>)
 800ca34:	f7f7 fe0e 	bl	8004654 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ca38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca3a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800ca3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca3e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	4619      	mov	r1, r3
 800ca46:	4809      	ldr	r0, [pc, #36]	@ (800ca6c <ethernet_link_thread+0x118>)
 800ca48:	f7f7 fefb 	bl	8004842 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800ca4c:	4807      	ldr	r0, [pc, #28]	@ (800ca6c <ethernet_link_thread+0x118>)
 800ca4e:	f7f7 f9b3 	bl	8003db8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ca52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca54:	f008 f852 	bl	8014afc <netif_set_up>
      netif_set_link_up(netif);
 800ca58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca5a:	f008 f8ed 	bl	8014c38 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ca5e:	2064      	movs	r0, #100	@ 0x64
 800ca60:	f000 f9c2 	bl	800cde8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ca64:	e78b      	b.n	800c97e <ethernet_link_thread+0x2a>
 800ca66:	bf00      	nop
 800ca68:	2000d0d0 	.word	0x2000d0d0
 800ca6c:	2000cfe8 	.word	0x2000cfe8

0800ca70 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af02      	add	r7, sp, #8
 800ca76:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ca78:	4812      	ldr	r0, [pc, #72]	@ (800cac4 <HAL_ETH_RxAllocateCallback+0x54>)
 800ca7a:	f007 fcb7 	bl	80143ec <memp_malloc_pool>
 800ca7e:	60f8      	str	r0, [r7, #12]
  if (p)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d014      	beq.n	800cab0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f103 0220 	add.w	r2, r3, #32
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4a0d      	ldr	r2, [pc, #52]	@ (800cac8 <HAL_ETH_RxAllocateCallback+0x58>)
 800ca94:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ca9e:	9201      	str	r2, [sp, #4]
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2241      	movs	r2, #65	@ 0x41
 800caa6:	2100      	movs	r1, #0
 800caa8:	2000      	movs	r0, #0
 800caaa:	f008 fb41 	bl	8015130 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800caae:	e005      	b.n	800cabc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800cab0:	4b06      	ldr	r3, [pc, #24]	@ (800cacc <HAL_ETH_RxAllocateCallback+0x5c>)
 800cab2:	2201      	movs	r2, #1
 800cab4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
}
 800cabc:	bf00      	nop
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	08027280 	.word	0x08027280
 800cac8:	0800c6d9 	.word	0x0800c6d9
 800cacc:	2000cfdc 	.word	0x2000cfdc

0800cad0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
 800cadc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3b20      	subs	r3, #32
 800caee:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	2200      	movs	r2, #0
 800cafa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	887a      	ldrh	r2, [r7, #2]
 800cb00:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d103      	bne.n	800cb12 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	69fa      	ldr	r2, [r7, #28]
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	e003      	b.n	800cb1a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	69fa      	ldr	r2, [r7, #28]
 800cb18:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	69fa      	ldr	r2, [r7, #28]
 800cb1e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	61fb      	str	r3, [r7, #28]
 800cb26:	e009      	b.n	800cb3c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	891a      	ldrh	r2, [r3, #8]
 800cb2c:	887b      	ldrh	r3, [r7, #2]
 800cb2e:	4413      	add	r3, r2
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	61fb      	str	r3, [r7, #28]
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f2      	bne.n	800cb28 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800cb42:	887b      	ldrh	r3, [r7, #2]
 800cb44:	4619      	mov	r1, r3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fb02 	bl	800c150 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800cb4c:	bf00      	nop
 800cb4e:	3720      	adds	r7, #32
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f008 fcc9 	bl	80154f4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb6a:	b480      	push	{r7}
 800cb6c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cb6e:	bf00      	nop
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb7e:	f3ef 8305 	mrs	r3, IPSR
 800cb82:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10f      	bne.n	800cbaa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb8a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb8e:	607b      	str	r3, [r7, #4]
  return(result);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d105      	bne.n	800cba2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb96:	f3ef 8311 	mrs	r3, BASEPRI
 800cb9a:	603b      	str	r3, [r7, #0]
  return(result);
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d007      	beq.n	800cbb2 <osKernelInitialize+0x3a>
 800cba2:	4b0e      	ldr	r3, [pc, #56]	@ (800cbdc <osKernelInitialize+0x64>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d103      	bne.n	800cbb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cbaa:	f06f 0305 	mvn.w	r3, #5
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e00c      	b.n	800cbcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cbb2:	4b0a      	ldr	r3, [pc, #40]	@ (800cbdc <osKernelInitialize+0x64>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d105      	bne.n	800cbc6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cbba:	4b08      	ldr	r3, [pc, #32]	@ (800cbdc <osKernelInitialize+0x64>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]
 800cbc4:	e002      	b.n	800cbcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cbc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	2000d0f0 	.word	0x2000d0f0

0800cbe0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbe6:	f3ef 8305 	mrs	r3, IPSR
 800cbea:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10f      	bne.n	800cc12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbf2:	f3ef 8310 	mrs	r3, PRIMASK
 800cbf6:	607b      	str	r3, [r7, #4]
  return(result);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d105      	bne.n	800cc0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbfe:	f3ef 8311 	mrs	r3, BASEPRI
 800cc02:	603b      	str	r3, [r7, #0]
  return(result);
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d007      	beq.n	800cc1a <osKernelStart+0x3a>
 800cc0a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc48 <osKernelStart+0x68>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d103      	bne.n	800cc1a <osKernelStart+0x3a>
    stat = osErrorISR;
 800cc12:	f06f 0305 	mvn.w	r3, #5
 800cc16:	60fb      	str	r3, [r7, #12]
 800cc18:	e010      	b.n	800cc3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc1a:	4b0b      	ldr	r3, [pc, #44]	@ (800cc48 <osKernelStart+0x68>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d109      	bne.n	800cc36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc22:	f7ff ffa2 	bl	800cb6a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc26:	4b08      	ldr	r3, [pc, #32]	@ (800cc48 <osKernelStart+0x68>)
 800cc28:	2202      	movs	r2, #2
 800cc2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc2c:	f002 fd32 	bl	800f694 <vTaskStartScheduler>
      stat = osOK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	e002      	b.n	800cc3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cc36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	2000d0f0 	.word	0x2000d0f0

0800cc4c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc52:	f3ef 8305 	mrs	r3, IPSR
 800cc56:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc58:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10f      	bne.n	800cc7e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc5e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc62:	607b      	str	r3, [r7, #4]
  return(result);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d105      	bne.n	800cc76 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc6a:	f3ef 8311 	mrs	r3, BASEPRI
 800cc6e:	603b      	str	r3, [r7, #0]
  return(result);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <osKernelGetTickCount+0x3a>
 800cc76:	4b08      	ldr	r3, [pc, #32]	@ (800cc98 <osKernelGetTickCount+0x4c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d103      	bne.n	800cc86 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cc7e:	f002 fe3b 	bl	800f8f8 <xTaskGetTickCountFromISR>
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	e002      	b.n	800cc8c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cc86:	f002 fe27 	bl	800f8d8 <xTaskGetTickCount>
 800cc8a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	2000d0f0 	.word	0x2000d0f0

0800cc9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b090      	sub	sp, #64	@ 0x40
 800cca0:	af04      	add	r7, sp, #16
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccac:	f3ef 8305 	mrs	r3, IPSR
 800ccb0:	61fb      	str	r3, [r7, #28]
  return(result);
 800ccb2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f040 8090 	bne.w	800cdda <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccba:	f3ef 8310 	mrs	r3, PRIMASK
 800ccbe:	61bb      	str	r3, [r7, #24]
  return(result);
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccc6:	f3ef 8311 	mrs	r3, BASEPRI
 800ccca:	617b      	str	r3, [r7, #20]
  return(result);
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <osThreadNew+0x3e>
 800ccd2:	4b44      	ldr	r3, [pc, #272]	@ (800cde4 <osThreadNew+0x148>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d07f      	beq.n	800cdda <osThreadNew+0x13e>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d07c      	beq.n	800cdda <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800cce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cce6:	2318      	movs	r3, #24
 800cce8:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800ccee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccf2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d045      	beq.n	800cd86 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d002      	beq.n	800cd08 <osThreadNew+0x6c>
        name = attr->name;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	699b      	ldr	r3, [r3, #24]
 800cd14:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d008      	beq.n	800cd2e <osThreadNew+0x92>
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1e:	2b38      	cmp	r3, #56	@ 0x38
 800cd20:	d805      	bhi.n	800cd2e <osThreadNew+0x92>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <osThreadNew+0x96>
        return (NULL);
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e054      	b.n	800cddc <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	695b      	ldr	r3, [r3, #20]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d003      	beq.n	800cd42 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	089b      	lsrs	r3, r3, #2
 800cd40:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00e      	beq.n	800cd68 <osThreadNew+0xcc>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	2ba7      	cmp	r3, #167	@ 0xa7
 800cd50:	d90a      	bls.n	800cd68 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d006      	beq.n	800cd68 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <osThreadNew+0xcc>
        mem = 1;
 800cd62:	2301      	movs	r3, #1
 800cd64:	623b      	str	r3, [r7, #32]
 800cd66:	e010      	b.n	800cd8a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10c      	bne.n	800cd8a <osThreadNew+0xee>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d108      	bne.n	800cd8a <osThreadNew+0xee>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d104      	bne.n	800cd8a <osThreadNew+0xee>
          mem = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	623b      	str	r3, [r7, #32]
 800cd84:	e001      	b.n	800cd8a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d110      	bne.n	800cdb2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd98:	9202      	str	r2, [sp, #8]
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cda4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f002 fa76 	bl	800f298 <xTaskCreateStatic>
 800cdac:	4603      	mov	r3, r0
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	e013      	b.n	800cdda <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d110      	bne.n	800cdda <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	f107 0310 	add.w	r3, r7, #16
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f002 faca 	bl	800f364 <xTaskCreate>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d001      	beq.n	800cdda <osThreadNew+0x13e>
          hTask = NULL;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cdda:	693b      	ldr	r3, [r7, #16]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3730      	adds	r7, #48	@ 0x30
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	2000d0f0 	.word	0x2000d0f0

0800cde8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdf0:	f3ef 8305 	mrs	r3, IPSR
 800cdf4:	613b      	str	r3, [r7, #16]
  return(result);
 800cdf6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10f      	bne.n	800ce1c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdfc:	f3ef 8310 	mrs	r3, PRIMASK
 800ce00:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d105      	bne.n	800ce14 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce08:	f3ef 8311 	mrs	r3, BASEPRI
 800ce0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d007      	beq.n	800ce24 <osDelay+0x3c>
 800ce14:	4b0a      	ldr	r3, [pc, #40]	@ (800ce40 <osDelay+0x58>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d103      	bne.n	800ce24 <osDelay+0x3c>
    stat = osErrorISR;
 800ce1c:	f06f 0305 	mvn.w	r3, #5
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	e007      	b.n	800ce34 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f002 fbf8 	bl	800f624 <vTaskDelay>
    }
  }

  return (stat);
 800ce34:	697b      	ldr	r3, [r7, #20]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	2000d0f0 	.word	0x2000d0f0

0800ce44 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b088      	sub	sp, #32
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce50:	f3ef 8305 	mrs	r3, IPSR
 800ce54:	617b      	str	r3, [r7, #20]
  return(result);
 800ce56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d13d      	bne.n	800ced8 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce60:	613b      	str	r3, [r7, #16]
  return(result);
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d105      	bne.n	800ce74 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce68:	f3ef 8311 	mrs	r3, BASEPRI
 800ce6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d003      	beq.n	800ce7c <osEventFlagsNew+0x38>
 800ce74:	4b1b      	ldr	r3, [pc, #108]	@ (800cee4 <osEventFlagsNew+0xa0>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d02d      	beq.n	800ced8 <osEventFlagsNew+0x94>
    mem = -1;
 800ce7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d015      	beq.n	800ceb4 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d006      	beq.n	800ce9e <osEventFlagsNew+0x5a>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	2b1f      	cmp	r3, #31
 800ce96:	d902      	bls.n	800ce9e <osEventFlagsNew+0x5a>
        mem = 1;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	61bb      	str	r3, [r7, #24]
 800ce9c:	e00c      	b.n	800ceb8 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d108      	bne.n	800ceb8 <osEventFlagsNew+0x74>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d104      	bne.n	800ceb8 <osEventFlagsNew+0x74>
          mem = 0;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	61bb      	str	r3, [r7, #24]
 800ceb2:	e001      	b.n	800ceb8 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d106      	bne.n	800cecc <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 fdbc 	bl	800da40 <xEventGroupCreateStatic>
 800cec8:	61f8      	str	r0, [r7, #28]
 800ceca:	e005      	b.n	800ced8 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d102      	bne.n	800ced8 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800ced2:	f000 fdf2 	bl	800daba <xEventGroupCreate>
 800ced6:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ced8:	69fb      	ldr	r3, [r7, #28]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3720      	adds	r7, #32
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	2000d0f0 	.word	0x2000d0f0

0800cee8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <osEventFlagsSet+0x1c>
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf02:	d303      	bcc.n	800cf0c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800cf04:	f06f 0303 	mvn.w	r3, #3
 800cf08:	61fb      	str	r3, [r7, #28]
 800cf0a:	e03a      	b.n	800cf82 <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf0c:	f3ef 8305 	mrs	r3, IPSR
 800cf10:	617b      	str	r3, [r7, #20]
  return(result);
 800cf12:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10f      	bne.n	800cf38 <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf18:	f3ef 8310 	mrs	r3, PRIMASK
 800cf1c:	613b      	str	r3, [r7, #16]
  return(result);
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d105      	bne.n	800cf30 <osEventFlagsSet+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf24:	f3ef 8311 	mrs	r3, BASEPRI
 800cf28:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d021      	beq.n	800cf74 <osEventFlagsSet+0x8c>
 800cf30:	4b16      	ldr	r3, [pc, #88]	@ (800cf8c <osEventFlagsSet+0xa4>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d11d      	bne.n	800cf74 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	461a      	mov	r2, r3
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	69b8      	ldr	r0, [r7, #24]
 800cf46:	f000 ff6d 	bl	800de24 <xEventGroupSetBitsFromISR>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 800cf50:	f06f 0302 	mvn.w	r3, #2
 800cf54:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf56:	e013      	b.n	800cf80 <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00e      	beq.n	800cf80 <osEventFlagsSet+0x98>
 800cf62:	4b0b      	ldr	r3, [pc, #44]	@ (800cf90 <osEventFlagsSet+0xa8>)
 800cf64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf72:	e005      	b.n	800cf80 <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	69b8      	ldr	r0, [r7, #24]
 800cf78:	f000 fe94 	bl	800dca4 <xEventGroupSetBits>
 800cf7c:	61f8      	str	r0, [r7, #28]
 800cf7e:	e000      	b.n	800cf82 <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800cf80:	bf00      	nop
  }

  return (rflags);
 800cf82:	69fb      	ldr	r3, [r7, #28]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3720      	adds	r7, #32
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	2000d0f0 	.word	0x2000d0f0
 800cf90:	e000ed04 	.word	0xe000ed04

0800cf94 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b08e      	sub	sp, #56	@ 0x38
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <osEventFlagsWait+0x20>
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cfb2:	d303      	bcc.n	800cfbc <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800cfb4:	f06f 0303 	mvn.w	r3, #3
 800cfb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfba:	e059      	b.n	800d070 <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfbc:	f3ef 8305 	mrs	r3, IPSR
 800cfc0:	61fb      	str	r3, [r7, #28]
  return(result);
 800cfc2:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10f      	bne.n	800cfe8 <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfc8:	f3ef 8310 	mrs	r3, PRIMASK
 800cfcc:	61bb      	str	r3, [r7, #24]
  return(result);
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d105      	bne.n	800cfe0 <osEventFlagsWait+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfd4:	f3ef 8311 	mrs	r3, BASEPRI
 800cfd8:	617b      	str	r3, [r7, #20]
  return(result);
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d007      	beq.n	800cff0 <osEventFlagsWait+0x5c>
 800cfe0:	4b26      	ldr	r3, [pc, #152]	@ (800d07c <osEventFlagsWait+0xe8>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d103      	bne.n	800cff0 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 800cfe8:	f06f 0305 	mvn.w	r3, #5
 800cfec:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfee:	e03f      	b.n	800d070 <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 800cffa:	2301      	movs	r3, #1
 800cffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cffe:	e001      	b.n	800d004 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 800d000:	2300      	movs	r3, #0
 800d002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f003 0302 	and.w	r3, r3, #2
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d002      	beq.n	800d014 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 800d00e:	2300      	movs	r3, #0
 800d010:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d012:	e001      	b.n	800d018 <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 800d014:	2301      	movs	r3, #1
 800d016:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d020:	68b9      	ldr	r1, [r7, #8]
 800d022:	6a38      	ldr	r0, [r7, #32]
 800d024:	f000 fd64 	bl	800daf0 <xEventGroupWaitBits>
 800d028:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f003 0301 	and.w	r3, r3, #1
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00e      	beq.n	800d052 <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d038:	429a      	cmp	r2, r3
 800d03a:	d019      	beq.n	800d070 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d003      	beq.n	800d04a <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 800d042:	f06f 0301 	mvn.w	r3, #1
 800d046:	627b      	str	r3, [r7, #36]	@ 0x24
 800d048:	e012      	b.n	800d070 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800d04a:	f06f 0302 	mvn.w	r3, #2
 800d04e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d050:	e00e      	b.n	800d070 <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d056:	4013      	ands	r3, r2
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d109      	bne.n	800d070 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d003      	beq.n	800d06a <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 800d062:	f06f 0301 	mvn.w	r3, #1
 800d066:	627b      	str	r3, [r7, #36]	@ 0x24
 800d068:	e002      	b.n	800d070 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800d06a:	f06f 0302 	mvn.w	r3, #2
 800d06e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 800d070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d072:	4618      	mov	r0, r3
 800d074:	3730      	adds	r7, #48	@ 0x30
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	2000d0f0 	.word	0x2000d0f0

0800d080 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d080:	b580      	push	{r7, lr}
 800d082:	b08a      	sub	sp, #40	@ 0x28
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d088:	2300      	movs	r3, #0
 800d08a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d08c:	f3ef 8305 	mrs	r3, IPSR
 800d090:	613b      	str	r3, [r7, #16]
  return(result);
 800d092:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800d094:	2b00      	cmp	r3, #0
 800d096:	f040 8085 	bne.w	800d1a4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d09a:	f3ef 8310 	mrs	r3, PRIMASK
 800d09e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d105      	bne.n	800d0b2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0a6:	f3ef 8311 	mrs	r3, BASEPRI
 800d0aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <osMutexNew+0x3a>
 800d0b2:	4b3f      	ldr	r3, [pc, #252]	@ (800d1b0 <osMutexNew+0x130>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d074      	beq.n	800d1a4 <osMutexNew+0x124>
    if (attr != NULL) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	623b      	str	r3, [r7, #32]
 800d0c6:	e001      	b.n	800d0cc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <osMutexNew+0x5c>
      rmtx = 1U;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	61fb      	str	r3, [r7, #28]
 800d0da:	e001      	b.n	800d0e0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	f003 0308 	and.w	r3, r3, #8
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d15c      	bne.n	800d1a4 <osMutexNew+0x124>
      mem = -1;
 800d0ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d0ee:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d015      	beq.n	800d122 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <osMutexNew+0x8c>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	2b4f      	cmp	r3, #79	@ 0x4f
 800d104:	d902      	bls.n	800d10c <osMutexNew+0x8c>
          mem = 1;
 800d106:	2301      	movs	r3, #1
 800d108:	61bb      	str	r3, [r7, #24]
 800d10a:	e00c      	b.n	800d126 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d108      	bne.n	800d126 <osMutexNew+0xa6>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d104      	bne.n	800d126 <osMutexNew+0xa6>
            mem = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	61bb      	str	r3, [r7, #24]
 800d120:	e001      	b.n	800d126 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d112      	bne.n	800d152 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d007      	beq.n	800d142 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	4619      	mov	r1, r3
 800d138:	2004      	movs	r0, #4
 800d13a:	f001 f8c6 	bl	800e2ca <xQueueCreateMutexStatic>
 800d13e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d140:	e016      	b.n	800d170 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	4619      	mov	r1, r3
 800d148:	2001      	movs	r0, #1
 800d14a:	f001 f8be 	bl	800e2ca <xQueueCreateMutexStatic>
 800d14e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d150:	e00e      	b.n	800d170 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10b      	bne.n	800d170 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d004      	beq.n	800d168 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d15e:	2004      	movs	r0, #4
 800d160:	f001 f89b 	bl	800e29a <xQueueCreateMutex>
 800d164:	6278      	str	r0, [r7, #36]	@ 0x24
 800d166:	e003      	b.n	800d170 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d168:	2001      	movs	r0, #1
 800d16a:	f001 f896 	bl	800e29a <xQueueCreateMutex>
 800d16e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00c      	beq.n	800d190 <osMutexNew+0x110>
        if (attr != NULL) {
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d003      	beq.n	800d184 <osMutexNew+0x104>
          name = attr->name;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	617b      	str	r3, [r7, #20]
 800d182:	e001      	b.n	800d188 <osMutexNew+0x108>
        } else {
          name = NULL;
 800d184:	2300      	movs	r3, #0
 800d186:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d188:	6979      	ldr	r1, [r7, #20]
 800d18a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d18c:	f001 fffc 	bl	800f188 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d192:	2b00      	cmp	r3, #0
 800d194:	d006      	beq.n	800d1a4 <osMutexNew+0x124>
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d003      	beq.n	800d1a4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19e:	f043 0301 	orr.w	r3, r3, #1
 800d1a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3728      	adds	r7, #40	@ 0x28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000d0f0 	.word	0x2000d0f0

0800d1b4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f023 0301 	bic.w	r3, r3, #1
 800d1c4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f003 0301 	and.w	r3, r3, #1
 800d1cc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1d2:	f3ef 8305 	mrs	r3, IPSR
 800d1d6:	613b      	str	r3, [r7, #16]
  return(result);
 800d1d8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10f      	bne.n	800d1fe <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1de:	f3ef 8310 	mrs	r3, PRIMASK
 800d1e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d105      	bne.n	800d1f6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1ea:	f3ef 8311 	mrs	r3, BASEPRI
 800d1ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d007      	beq.n	800d206 <osMutexAcquire+0x52>
 800d1f6:	4b1d      	ldr	r3, [pc, #116]	@ (800d26c <osMutexAcquire+0xb8>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b02      	cmp	r3, #2
 800d1fc:	d103      	bne.n	800d206 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d1fe:	f06f 0305 	mvn.w	r3, #5
 800d202:	61fb      	str	r3, [r7, #28]
 800d204:	e02c      	b.n	800d260 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d20c:	f06f 0303 	mvn.w	r3, #3
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	e025      	b.n	800d260 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d011      	beq.n	800d23e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	69b8      	ldr	r0, [r7, #24]
 800d21e:	f001 f8a6 	bl	800e36e <xQueueTakeMutexRecursive>
 800d222:	4603      	mov	r3, r0
 800d224:	2b01      	cmp	r3, #1
 800d226:	d01b      	beq.n	800d260 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d22e:	f06f 0301 	mvn.w	r3, #1
 800d232:	61fb      	str	r3, [r7, #28]
 800d234:	e014      	b.n	800d260 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d236:	f06f 0302 	mvn.w	r3, #2
 800d23a:	61fb      	str	r3, [r7, #28]
 800d23c:	e010      	b.n	800d260 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	69b8      	ldr	r0, [r7, #24]
 800d242:	f001 fc71 	bl	800eb28 <xQueueSemaphoreTake>
 800d246:	4603      	mov	r3, r0
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d009      	beq.n	800d260 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d003      	beq.n	800d25a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d252:	f06f 0301 	mvn.w	r3, #1
 800d256:	61fb      	str	r3, [r7, #28]
 800d258:	e002      	b.n	800d260 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d25a:	f06f 0302 	mvn.w	r3, #2
 800d25e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d260:	69fb      	ldr	r3, [r7, #28]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3720      	adds	r7, #32
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	2000d0f0 	.word	0x2000d0f0

0800d270 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f023 0301 	bic.w	r3, r3, #1
 800d27e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d288:	2300      	movs	r3, #0
 800d28a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d28c:	f3ef 8305 	mrs	r3, IPSR
 800d290:	613b      	str	r3, [r7, #16]
  return(result);
 800d292:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10f      	bne.n	800d2b8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d298:	f3ef 8310 	mrs	r3, PRIMASK
 800d29c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d105      	bne.n	800d2b0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2a4:	f3ef 8311 	mrs	r3, BASEPRI
 800d2a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d007      	beq.n	800d2c0 <osMutexRelease+0x50>
 800d2b0:	4b16      	ldr	r3, [pc, #88]	@ (800d30c <osMutexRelease+0x9c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d103      	bne.n	800d2c0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800d2b8:	f06f 0305 	mvn.w	r3, #5
 800d2bc:	61fb      	str	r3, [r7, #28]
 800d2be:	e01f      	b.n	800d300 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d103      	bne.n	800d2ce <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d2c6:	f06f 0303 	mvn.w	r3, #3
 800d2ca:	61fb      	str	r3, [r7, #28]
 800d2cc:	e018      	b.n	800d300 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d009      	beq.n	800d2e8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d2d4:	69b8      	ldr	r0, [r7, #24]
 800d2d6:	f001 f813 	bl	800e300 <xQueueGiveMutexRecursive>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d00f      	beq.n	800d300 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d2e0:	f06f 0302 	mvn.w	r3, #2
 800d2e4:	61fb      	str	r3, [r7, #28]
 800d2e6:	e00b      	b.n	800d300 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	69b8      	ldr	r0, [r7, #24]
 800d2f0:	f001 f8ec 	bl	800e4cc <xQueueGenericSend>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d002      	beq.n	800d300 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d2fa:	f06f 0302 	mvn.w	r3, #2
 800d2fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d300:	69fb      	ldr	r3, [r7, #28]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	2000d0f0 	.word	0x2000d0f0

0800d310 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d310:	b580      	push	{r7, lr}
 800d312:	b08c      	sub	sp, #48	@ 0x30
 800d314:	af02      	add	r7, sp, #8
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d31c:	2300      	movs	r3, #0
 800d31e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d320:	f3ef 8305 	mrs	r3, IPSR
 800d324:	61bb      	str	r3, [r7, #24]
  return(result);
 800d326:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f040 8086 	bne.w	800d43a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d32e:	f3ef 8310 	mrs	r3, PRIMASK
 800d332:	617b      	str	r3, [r7, #20]
  return(result);
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d105      	bne.n	800d346 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d33a:	f3ef 8311 	mrs	r3, BASEPRI
 800d33e:	613b      	str	r3, [r7, #16]
  return(result);
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <osSemaphoreNew+0x3e>
 800d346:	4b3f      	ldr	r3, [pc, #252]	@ (800d444 <osSemaphoreNew+0x134>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d075      	beq.n	800d43a <osSemaphoreNew+0x12a>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d072      	beq.n	800d43a <osSemaphoreNew+0x12a>
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d86e      	bhi.n	800d43a <osSemaphoreNew+0x12a>
    mem = -1;
 800d35c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d360:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d015      	beq.n	800d394 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d006      	beq.n	800d37e <osSemaphoreNew+0x6e>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	2b4f      	cmp	r3, #79	@ 0x4f
 800d376:	d902      	bls.n	800d37e <osSemaphoreNew+0x6e>
        mem = 1;
 800d378:	2301      	movs	r3, #1
 800d37a:	623b      	str	r3, [r7, #32]
 800d37c:	e00c      	b.n	800d398 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d108      	bne.n	800d398 <osSemaphoreNew+0x88>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d104      	bne.n	800d398 <osSemaphoreNew+0x88>
          mem = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	623b      	str	r3, [r7, #32]
 800d392:	e001      	b.n	800d398 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d39e:	d04c      	beq.n	800d43a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d128      	bne.n	800d3f8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d3a6:	6a3b      	ldr	r3, [r7, #32]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d10a      	bne.n	800d3c2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	2203      	movs	r2, #3
 800d3b2:	9200      	str	r2, [sp, #0]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	f000 fe67 	bl	800e08c <xQueueGenericCreateStatic>
 800d3be:	6278      	str	r0, [r7, #36]	@ 0x24
 800d3c0:	e005      	b.n	800d3ce <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d3c2:	2203      	movs	r2, #3
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	2001      	movs	r0, #1
 800d3c8:	f000 fee7 	bl	800e19a <xQueueGenericCreate>
 800d3cc:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d022      	beq.n	800d41a <osSemaphoreNew+0x10a>
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d01f      	beq.n	800d41a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d3da:	2300      	movs	r3, #0
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2100      	movs	r1, #0
 800d3e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3e2:	f001 f873 	bl	800e4cc <xQueueGenericSend>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d016      	beq.n	800d41a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d3ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3ee:	f001 fd7d 	bl	800eeec <vQueueDelete>
            hSemaphore = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3f6:	e010      	b.n	800d41a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d3f8:	6a3b      	ldr	r3, [r7, #32]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d108      	bne.n	800d410 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	461a      	mov	r2, r3
 800d404:	68b9      	ldr	r1, [r7, #8]
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f000 ffea 	bl	800e3e0 <xQueueCreateCountingSemaphoreStatic>
 800d40c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d40e:	e004      	b.n	800d41a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f001 f821 	bl	800e45a <xQueueCreateCountingSemaphore>
 800d418:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00c      	beq.n	800d43a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <osSemaphoreNew+0x11e>
          name = attr->name;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	61fb      	str	r3, [r7, #28]
 800d42c:	e001      	b.n	800d432 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d42e:	2300      	movs	r3, #0
 800d430:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d432:	69f9      	ldr	r1, [r7, #28]
 800d434:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d436:	f001 fea7 	bl	800f188 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3728      	adds	r7, #40	@ 0x28
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	2000d0f0 	.word	0x2000d0f0

0800d448 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d456:	2300      	movs	r3, #0
 800d458:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d103      	bne.n	800d468 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d460:	f06f 0303 	mvn.w	r3, #3
 800d464:	61fb      	str	r3, [r7, #28]
 800d466:	e04b      	b.n	800d500 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d468:	f3ef 8305 	mrs	r3, IPSR
 800d46c:	617b      	str	r3, [r7, #20]
  return(result);
 800d46e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10f      	bne.n	800d494 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d474:	f3ef 8310 	mrs	r3, PRIMASK
 800d478:	613b      	str	r3, [r7, #16]
  return(result);
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d105      	bne.n	800d48c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d480:	f3ef 8311 	mrs	r3, BASEPRI
 800d484:	60fb      	str	r3, [r7, #12]
  return(result);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d026      	beq.n	800d4da <osSemaphoreAcquire+0x92>
 800d48c:	4b1f      	ldr	r3, [pc, #124]	@ (800d50c <osSemaphoreAcquire+0xc4>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b02      	cmp	r3, #2
 800d492:	d122      	bne.n	800d4da <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d49a:	f06f 0303 	mvn.w	r3, #3
 800d49e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d4a0:	e02d      	b.n	800d4fe <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d4a6:	f107 0308 	add.w	r3, r7, #8
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	69b8      	ldr	r0, [r7, #24]
 800d4b0:	f001 fc52 	bl	800ed58 <xQueueReceiveFromISR>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d003      	beq.n	800d4c2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d4ba:	f06f 0302 	mvn.w	r3, #2
 800d4be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d4c0:	e01d      	b.n	800d4fe <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01a      	beq.n	800d4fe <osSemaphoreAcquire+0xb6>
 800d4c8:	4b11      	ldr	r3, [pc, #68]	@ (800d510 <osSemaphoreAcquire+0xc8>)
 800d4ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d4d8:	e011      	b.n	800d4fe <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	69b8      	ldr	r0, [r7, #24]
 800d4de:	f001 fb23 	bl	800eb28 <xQueueSemaphoreTake>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d00b      	beq.n	800d500 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d4ee:	f06f 0301 	mvn.w	r3, #1
 800d4f2:	61fb      	str	r3, [r7, #28]
 800d4f4:	e004      	b.n	800d500 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d4f6:	f06f 0302 	mvn.w	r3, #2
 800d4fa:	61fb      	str	r3, [r7, #28]
 800d4fc:	e000      	b.n	800d500 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d4fe:	bf00      	nop
      }
    }
  }

  return (stat);
 800d500:	69fb      	ldr	r3, [r7, #28]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	2000d0f0 	.word	0x2000d0f0
 800d510:	e000ed04 	.word	0xe000ed04

0800d514 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d520:	2300      	movs	r3, #0
 800d522:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d103      	bne.n	800d532 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d52a:	f06f 0303 	mvn.w	r3, #3
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	e03e      	b.n	800d5b0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d532:	f3ef 8305 	mrs	r3, IPSR
 800d536:	617b      	str	r3, [r7, #20]
  return(result);
 800d538:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10f      	bne.n	800d55e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d53e:	f3ef 8310 	mrs	r3, PRIMASK
 800d542:	613b      	str	r3, [r7, #16]
  return(result);
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d105      	bne.n	800d556 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d54a:	f3ef 8311 	mrs	r3, BASEPRI
 800d54e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d01e      	beq.n	800d594 <osSemaphoreRelease+0x80>
 800d556:	4b19      	ldr	r3, [pc, #100]	@ (800d5bc <osSemaphoreRelease+0xa8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	d11a      	bne.n	800d594 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d55e:	2300      	movs	r3, #0
 800d560:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d562:	f107 0308 	add.w	r3, r7, #8
 800d566:	4619      	mov	r1, r3
 800d568:	69b8      	ldr	r0, [r7, #24]
 800d56a:	f001 f95c 	bl	800e826 <xQueueGiveFromISR>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b01      	cmp	r3, #1
 800d572:	d003      	beq.n	800d57c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d574:	f06f 0302 	mvn.w	r3, #2
 800d578:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d57a:	e018      	b.n	800d5ae <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d015      	beq.n	800d5ae <osSemaphoreRelease+0x9a>
 800d582:	4b0f      	ldr	r3, [pc, #60]	@ (800d5c0 <osSemaphoreRelease+0xac>)
 800d584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d592:	e00c      	b.n	800d5ae <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d594:	2300      	movs	r3, #0
 800d596:	2200      	movs	r2, #0
 800d598:	2100      	movs	r1, #0
 800d59a:	69b8      	ldr	r0, [r7, #24]
 800d59c:	f000 ff96 	bl	800e4cc <xQueueGenericSend>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d004      	beq.n	800d5b0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d5a6:	f06f 0302 	mvn.w	r3, #2
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	e000      	b.n	800d5b0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d5ae:	bf00      	nop
    }
  }

  return (stat);
 800d5b0:	69fb      	ldr	r3, [r7, #28]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3720      	adds	r7, #32
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	2000d0f0 	.word	0x2000d0f0
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b088      	sub	sp, #32
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5d0:	f3ef 8305 	mrs	r3, IPSR
 800d5d4:	617b      	str	r3, [r7, #20]
  return(result);
 800d5d6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10f      	bne.n	800d5fc <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d5e0:	613b      	str	r3, [r7, #16]
  return(result);
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d105      	bne.n	800d5f4 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5e8:	f3ef 8311 	mrs	r3, BASEPRI
 800d5ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d007      	beq.n	800d604 <osSemaphoreDelete+0x40>
 800d5f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d62c <osSemaphoreDelete+0x68>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d103      	bne.n	800d604 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d5fc:	f06f 0305 	mvn.w	r3, #5
 800d600:	61fb      	str	r3, [r7, #28]
 800d602:	e00e      	b.n	800d622 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d103      	bne.n	800d612 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d60a:	f06f 0303 	mvn.w	r3, #3
 800d60e:	61fb      	str	r3, [r7, #28]
 800d610:	e007      	b.n	800d622 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d612:	69b8      	ldr	r0, [r7, #24]
 800d614:	f001 fde2 	bl	800f1dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d618:	2300      	movs	r3, #0
 800d61a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d61c:	69b8      	ldr	r0, [r7, #24]
 800d61e:	f001 fc65 	bl	800eeec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d622:	69fb      	ldr	r3, [r7, #28]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3720      	adds	r7, #32
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	2000d0f0 	.word	0x2000d0f0

0800d630 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d630:	b580      	push	{r7, lr}
 800d632:	b08c      	sub	sp, #48	@ 0x30
 800d634:	af02      	add	r7, sp, #8
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d63c:	2300      	movs	r3, #0
 800d63e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d640:	f3ef 8305 	mrs	r3, IPSR
 800d644:	61bb      	str	r3, [r7, #24]
  return(result);
 800d646:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d16f      	bne.n	800d72c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d64c:	f3ef 8310 	mrs	r3, PRIMASK
 800d650:	617b      	str	r3, [r7, #20]
  return(result);
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d105      	bne.n	800d664 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d658:	f3ef 8311 	mrs	r3, BASEPRI
 800d65c:	613b      	str	r3, [r7, #16]
  return(result);
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d003      	beq.n	800d66c <osMessageQueueNew+0x3c>
 800d664:	4b34      	ldr	r3, [pc, #208]	@ (800d738 <osMessageQueueNew+0x108>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d05f      	beq.n	800d72c <osMessageQueueNew+0xfc>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d05c      	beq.n	800d72c <osMessageQueueNew+0xfc>
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d059      	beq.n	800d72c <osMessageQueueNew+0xfc>
    mem = -1;
 800d678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d67c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d029      	beq.n	800d6d8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d012      	beq.n	800d6b2 <osMessageQueueNew+0x82>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	2b4f      	cmp	r3, #79	@ 0x4f
 800d692:	d90e      	bls.n	800d6b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00a      	beq.n	800d6b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	695a      	ldr	r2, [r3, #20]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68b9      	ldr	r1, [r7, #8]
 800d6a4:	fb01 f303 	mul.w	r3, r1, r3
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d302      	bcc.n	800d6b2 <osMessageQueueNew+0x82>
        mem = 1;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	623b      	str	r3, [r7, #32]
 800d6b0:	e014      	b.n	800d6dc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d110      	bne.n	800d6dc <osMessageQueueNew+0xac>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10c      	bne.n	800d6dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d108      	bne.n	800d6dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d104      	bne.n	800d6dc <osMessageQueueNew+0xac>
          mem = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	623b      	str	r3, [r7, #32]
 800d6d6:	e001      	b.n	800d6dc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d10b      	bne.n	800d6fa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	691a      	ldr	r2, [r3, #16]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	9100      	str	r1, [sp, #0]
 800d6ee:	68b9      	ldr	r1, [r7, #8]
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f000 fccb 	bl	800e08c <xQueueGenericCreateStatic>
 800d6f6:	6278      	str	r0, [r7, #36]	@ 0x24
 800d6f8:	e008      	b.n	800d70c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d105      	bne.n	800d70c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d700:	2200      	movs	r2, #0
 800d702:	68b9      	ldr	r1, [r7, #8]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 fd48 	bl	800e19a <xQueueGenericCreate>
 800d70a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00c      	beq.n	800d72c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	61fb      	str	r3, [r7, #28]
 800d71e:	e001      	b.n	800d724 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d720:	2300      	movs	r3, #0
 800d722:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d724:	69f9      	ldr	r1, [r7, #28]
 800d726:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d728:	f001 fd2e 	bl	800f188 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3728      	adds	r7, #40	@ 0x28
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	2000d0f0 	.word	0x2000d0f0

0800d73c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08a      	sub	sp, #40	@ 0x28
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	603b      	str	r3, [r7, #0]
 800d748:	4613      	mov	r3, r2
 800d74a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d750:	2300      	movs	r3, #0
 800d752:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d754:	f3ef 8305 	mrs	r3, IPSR
 800d758:	61fb      	str	r3, [r7, #28]
  return(result);
 800d75a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10f      	bne.n	800d780 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d760:	f3ef 8310 	mrs	r3, PRIMASK
 800d764:	61bb      	str	r3, [r7, #24]
  return(result);
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d105      	bne.n	800d778 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d76c:	f3ef 8311 	mrs	r3, BASEPRI
 800d770:	617b      	str	r3, [r7, #20]
  return(result);
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d02c      	beq.n	800d7d2 <osMessageQueuePut+0x96>
 800d778:	4b28      	ldr	r3, [pc, #160]	@ (800d81c <osMessageQueuePut+0xe0>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d128      	bne.n	800d7d2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d780:	6a3b      	ldr	r3, [r7, #32]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d005      	beq.n	800d792 <osMessageQueuePut+0x56>
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <osMessageQueuePut+0x56>
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d792:	f06f 0303 	mvn.w	r3, #3
 800d796:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d798:	e039      	b.n	800d80e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d79a:	2300      	movs	r3, #0
 800d79c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d79e:	f107 0210 	add.w	r2, r7, #16
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	68b9      	ldr	r1, [r7, #8]
 800d7a6:	6a38      	ldr	r0, [r7, #32]
 800d7a8:	f000 ff9a 	bl	800e6e0 <xQueueGenericSendFromISR>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d003      	beq.n	800d7ba <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d7b2:	f06f 0302 	mvn.w	r3, #2
 800d7b6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7b8:	e029      	b.n	800d80e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d026      	beq.n	800d80e <osMessageQueuePut+0xd2>
 800d7c0:	4b17      	ldr	r3, [pc, #92]	@ (800d820 <osMessageQueuePut+0xe4>)
 800d7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7d0:	e01d      	b.n	800d80e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d7d2:	6a3b      	ldr	r3, [r7, #32]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <osMessageQueuePut+0xa2>
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d103      	bne.n	800d7e6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d7de:	f06f 0303 	mvn.w	r3, #3
 800d7e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7e4:	e014      	b.n	800d810 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	683a      	ldr	r2, [r7, #0]
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	6a38      	ldr	r0, [r7, #32]
 800d7ee:	f000 fe6d 	bl	800e4cc <xQueueGenericSend>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d00b      	beq.n	800d810 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d7fe:	f06f 0301 	mvn.w	r3, #1
 800d802:	627b      	str	r3, [r7, #36]	@ 0x24
 800d804:	e004      	b.n	800d810 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d806:	f06f 0302 	mvn.w	r3, #2
 800d80a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d80c:	e000      	b.n	800d810 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d80e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d812:	4618      	mov	r0, r3
 800d814:	3728      	adds	r7, #40	@ 0x28
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	2000d0f0 	.word	0x2000d0f0
 800d820:	e000ed04 	.word	0xe000ed04

0800d824 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d824:	b580      	push	{r7, lr}
 800d826:	b08a      	sub	sp, #40	@ 0x28
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d836:	2300      	movs	r3, #0
 800d838:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d83a:	f3ef 8305 	mrs	r3, IPSR
 800d83e:	61fb      	str	r3, [r7, #28]
  return(result);
 800d840:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10f      	bne.n	800d866 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d846:	f3ef 8310 	mrs	r3, PRIMASK
 800d84a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d105      	bne.n	800d85e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d852:	f3ef 8311 	mrs	r3, BASEPRI
 800d856:	617b      	str	r3, [r7, #20]
  return(result);
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d02c      	beq.n	800d8b8 <osMessageQueueGet+0x94>
 800d85e:	4b28      	ldr	r3, [pc, #160]	@ (800d900 <osMessageQueueGet+0xdc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d128      	bne.n	800d8b8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d005      	beq.n	800d878 <osMessageQueueGet+0x54>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d002      	beq.n	800d878 <osMessageQueueGet+0x54>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d878:	f06f 0303 	mvn.w	r3, #3
 800d87c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d87e:	e038      	b.n	800d8f2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d880:	2300      	movs	r3, #0
 800d882:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d884:	f107 0310 	add.w	r3, r7, #16
 800d888:	461a      	mov	r2, r3
 800d88a:	68b9      	ldr	r1, [r7, #8]
 800d88c:	6a38      	ldr	r0, [r7, #32]
 800d88e:	f001 fa63 	bl	800ed58 <xQueueReceiveFromISR>
 800d892:	4603      	mov	r3, r0
 800d894:	2b01      	cmp	r3, #1
 800d896:	d003      	beq.n	800d8a0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d898:	f06f 0302 	mvn.w	r3, #2
 800d89c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d89e:	e028      	b.n	800d8f2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d025      	beq.n	800d8f2 <osMessageQueueGet+0xce>
 800d8a6:	4b17      	ldr	r3, [pc, #92]	@ (800d904 <osMessageQueueGet+0xe0>)
 800d8a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ac:	601a      	str	r2, [r3, #0]
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8b6:	e01c      	b.n	800d8f2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d002      	beq.n	800d8c4 <osMessageQueueGet+0xa0>
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d103      	bne.n	800d8cc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d8c4:	f06f 0303 	mvn.w	r3, #3
 800d8c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8ca:	e013      	b.n	800d8f4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	68b9      	ldr	r1, [r7, #8]
 800d8d0:	6a38      	ldr	r0, [r7, #32]
 800d8d2:	f001 f841 	bl	800e958 <xQueueReceive>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d00b      	beq.n	800d8f4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d003      	beq.n	800d8ea <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d8e2:	f06f 0301 	mvn.w	r3, #1
 800d8e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8e8:	e004      	b.n	800d8f4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d8ea:	f06f 0302 	mvn.w	r3, #2
 800d8ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8f0:	e000      	b.n	800d8f4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3728      	adds	r7, #40	@ 0x28
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	2000d0f0 	.word	0x2000d0f0
 800d904:	e000ed04 	.word	0xe000ed04

0800d908 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d908:	b580      	push	{r7, lr}
 800d90a:	b088      	sub	sp, #32
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d102      	bne.n	800d920 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d91a:	2300      	movs	r3, #0
 800d91c:	61fb      	str	r3, [r7, #28]
 800d91e:	e01e      	b.n	800d95e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d920:	f3ef 8305 	mrs	r3, IPSR
 800d924:	617b      	str	r3, [r7, #20]
  return(result);
 800d926:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10f      	bne.n	800d94c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d92c:	f3ef 8310 	mrs	r3, PRIMASK
 800d930:	613b      	str	r3, [r7, #16]
  return(result);
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d105      	bne.n	800d944 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d938:	f3ef 8311 	mrs	r3, BASEPRI
 800d93c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d008      	beq.n	800d956 <osMessageQueueGetCount+0x4e>
 800d944:	4b08      	ldr	r3, [pc, #32]	@ (800d968 <osMessageQueueGetCount+0x60>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	d104      	bne.n	800d956 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d94c:	69b8      	ldr	r0, [r7, #24]
 800d94e:	f001 faac 	bl	800eeaa <uxQueueMessagesWaitingFromISR>
 800d952:	61f8      	str	r0, [r7, #28]
 800d954:	e003      	b.n	800d95e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d956:	69b8      	ldr	r0, [r7, #24]
 800d958:	f001 fa86 	bl	800ee68 <uxQueueMessagesWaiting>
 800d95c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d95e:	69fb      	ldr	r3, [r7, #28]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3720      	adds	r7, #32
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	2000d0f0 	.word	0x2000d0f0

0800d96c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b088      	sub	sp, #32
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d978:	f3ef 8305 	mrs	r3, IPSR
 800d97c:	617b      	str	r3, [r7, #20]
  return(result);
 800d97e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10f      	bne.n	800d9a4 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d984:	f3ef 8310 	mrs	r3, PRIMASK
 800d988:	613b      	str	r3, [r7, #16]
  return(result);
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d105      	bne.n	800d99c <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d990:	f3ef 8311 	mrs	r3, BASEPRI
 800d994:	60fb      	str	r3, [r7, #12]
  return(result);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d007      	beq.n	800d9ac <osMessageQueueDelete+0x40>
 800d99c:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <osMessageQueueDelete+0x68>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d103      	bne.n	800d9ac <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d9a4:	f06f 0305 	mvn.w	r3, #5
 800d9a8:	61fb      	str	r3, [r7, #28]
 800d9aa:	e00e      	b.n	800d9ca <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d103      	bne.n	800d9ba <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d9b2:	f06f 0303 	mvn.w	r3, #3
 800d9b6:	61fb      	str	r3, [r7, #28]
 800d9b8:	e007      	b.n	800d9ca <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d9ba:	69b8      	ldr	r0, [r7, #24]
 800d9bc:	f001 fc0e 	bl	800f1dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d9c4:	69b8      	ldr	r0, [r7, #24]
 800d9c6:	f001 fa91 	bl	800eeec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d9ca:	69fb      	ldr	r3, [r7, #28]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3720      	adds	r7, #32
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	2000d0f0 	.word	0x2000d0f0

0800d9d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	4a07      	ldr	r2, [pc, #28]	@ (800da04 <vApplicationGetIdleTaskMemory+0x2c>)
 800d9e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	4a06      	ldr	r2, [pc, #24]	@ (800da08 <vApplicationGetIdleTaskMemory+0x30>)
 800d9ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9f6:	601a      	str	r2, [r3, #0]
}
 800d9f8:	bf00      	nop
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	2000d0f4 	.word	0x2000d0f4
 800da08:	2000d19c 	.word	0x2000d19c

0800da0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	4a07      	ldr	r2, [pc, #28]	@ (800da38 <vApplicationGetTimerTaskMemory+0x2c>)
 800da1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	4a06      	ldr	r2, [pc, #24]	@ (800da3c <vApplicationGetTimerTaskMemory+0x30>)
 800da22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800da2a:	601a      	str	r2, [r3, #0]
}
 800da2c:	bf00      	nop
 800da2e:	3714      	adds	r7, #20
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr
 800da38:	2000d99c 	.word	0x2000d99c
 800da3c:	2000da44 	.word	0x2000da44

0800da40 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10d      	bne.n	800da6a <xEventGroupCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da52:	b672      	cpsid	i
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	b662      	cpsie	i
 800da62:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800da64:	bf00      	nop
 800da66:	bf00      	nop
 800da68:	e7fd      	b.n	800da66 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800da6a:	2320      	movs	r3, #32
 800da6c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2b20      	cmp	r3, #32
 800da72:	d00d      	beq.n	800da90 <xEventGroupCreateStatic+0x50>
	__asm volatile
 800da74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da78:	b672      	cpsid	i
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	b662      	cpsie	i
 800da88:	60fb      	str	r3, [r7, #12]
}
 800da8a:	bf00      	nop
 800da8c:	bf00      	nop
 800da8e:	e7fd      	b.n	800da8c <xEventGroupCreateStatic+0x4c>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00a      	beq.n	800dab0 <xEventGroupCreateStatic+0x70>
		{
			pxEventBits->uxEventBits = 0;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2200      	movs	r2, #0
 800da9e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	3304      	adds	r3, #4
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 f9d1 	bl	800de4c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	2201      	movs	r2, #1
 800daae:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800dab0:	697b      	ldr	r3, [r7, #20]
	}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3718      	adds	r7, #24
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b082      	sub	sp, #8
 800dabe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800dac0:	2020      	movs	r0, #32
 800dac2:	f003 fab1 	bl	8011028 <pvPortMalloc>
 800dac6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00a      	beq.n	800dae4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	3304      	adds	r3, #4
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 f9b7 	bl	800de4c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800dae4:	687b      	ldr	r3, [r7, #4]
	}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
	...

0800daf0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b090      	sub	sp, #64	@ 0x40
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800db06:	2300      	movs	r3, #0
 800db08:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10d      	bne.n	800db2c <xEventGroupWaitBits+0x3c>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db14:	b672      	cpsid	i
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	b662      	cpsie	i
 800db24:	623b      	str	r3, [r7, #32]
}
 800db26:	bf00      	nop
 800db28:	bf00      	nop
 800db2a:	e7fd      	b.n	800db28 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db32:	d30d      	bcc.n	800db50 <xEventGroupWaitBits+0x60>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db38:	b672      	cpsid	i
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	b662      	cpsie	i
 800db48:	61fb      	str	r3, [r7, #28]
}
 800db4a:	bf00      	nop
 800db4c:	bf00      	nop
 800db4e:	e7fd      	b.n	800db4c <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10d      	bne.n	800db72 <xEventGroupWaitBits+0x82>
	__asm volatile
 800db56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5a:	b672      	cpsid	i
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	b662      	cpsie	i
 800db6a:	61bb      	str	r3, [r7, #24]
}
 800db6c:	bf00      	nop
 800db6e:	bf00      	nop
 800db70:	e7fd      	b.n	800db6e <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db72:	f002 fa95 	bl	80100a0 <xTaskGetSchedulerState>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d102      	bne.n	800db82 <xEventGroupWaitBits+0x92>
 800db7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <xEventGroupWaitBits+0x96>
 800db82:	2301      	movs	r3, #1
 800db84:	e000      	b.n	800db88 <xEventGroupWaitBits+0x98>
 800db86:	2300      	movs	r3, #0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10d      	bne.n	800dba8 <xEventGroupWaitBits+0xb8>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db90:	b672      	cpsid	i
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	b662      	cpsie	i
 800dba0:	617b      	str	r3, [r7, #20]
}
 800dba2:	bf00      	nop
 800dba4:	bf00      	nop
 800dba6:	e7fd      	b.n	800dba4 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 800dba8:	f001 fde8 	bl	800f77c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800dbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	68b9      	ldr	r1, [r7, #8]
 800dbb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbb8:	f000 f911 	bl	800ddde <prvTestWaitCondition>
 800dbbc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800dbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00e      	beq.n	800dbe2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800dbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d028      	beq.n	800dc24 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	43db      	mvns	r3, r3
 800dbda:	401a      	ands	r2, r3
 800dbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	e020      	b.n	800dc24 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800dbe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d104      	bne.n	800dbf2 <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800dbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800dbec:	2301      	movs	r3, #1
 800dbee:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbf0:	e018      	b.n	800dc24 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800dbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbfe:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d003      	beq.n	800dc0e <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800dc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc0c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800dc0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc10:	1d18      	adds	r0, r3, #4
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc16:	4313      	orrs	r3, r2
 800dc18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	f001 ffee 	bl	800fbfc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800dc20:	2300      	movs	r3, #0
 800dc22:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800dc24:	f001 fdb8 	bl	800f798 <xTaskResumeAll>
 800dc28:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800dc2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d031      	beq.n	800dc94 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 800dc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d107      	bne.n	800dc46 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 800dc36:	4b1a      	ldr	r3, [pc, #104]	@ (800dca0 <xEventGroupWaitBits+0x1b0>)
 800dc38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc3c:	601a      	str	r2, [r3, #0]
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800dc46:	f002 fbad 	bl	80103a4 <uxTaskResetEventItemValue>
 800dc4a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800dc4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d11a      	bne.n	800dc8c <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 800dc56:	f003 f8b9 	bl	8010dcc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800dc5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800dc60:	683a      	ldr	r2, [r7, #0]
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dc66:	f000 f8ba 	bl	800ddde <prvTestWaitCondition>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d009      	beq.n	800dc84 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	43db      	mvns	r3, r3
 800dc7e:	401a      	ands	r2, r3
 800dc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc82:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800dc84:	2301      	movs	r3, #1
 800dc86:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800dc88:	f003 f8d6 	bl	8010e38 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800dc8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800dc94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3740      	adds	r7, #64	@ 0x40
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	e000ed04 	.word	0xe000ed04

0800dca4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08e      	sub	sp, #56	@ 0x38
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d10d      	bne.n	800dcdc <xEventGroupSetBits+0x38>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc4:	b672      	cpsid	i
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	b662      	cpsie	i
 800dcd4:	613b      	str	r3, [r7, #16]
}
 800dcd6:	bf00      	nop
 800dcd8:	bf00      	nop
 800dcda:	e7fd      	b.n	800dcd8 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dce2:	d30d      	bcc.n	800dd00 <xEventGroupSetBits+0x5c>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce8:	b672      	cpsid	i
 800dcea:	f383 8811 	msr	BASEPRI, r3
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	b662      	cpsie	i
 800dcf8:	60fb      	str	r3, [r7, #12]
}
 800dcfa:	bf00      	nop
 800dcfc:	bf00      	nop
 800dcfe:	e7fd      	b.n	800dcfc <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800dd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd02:	3304      	adds	r3, #4
 800dd04:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd08:	3308      	adds	r3, #8
 800dd0a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800dd0c:	f001 fd36 	bl	800f77c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800dd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800dd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd20:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800dd22:	e03c      	b.n	800dd9e <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 800dd24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800dd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800dd30:	2300      	movs	r3, #0
 800dd32:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800dd3a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800dd42:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d108      	bne.n	800dd60 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800dd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	4013      	ands	r3, r2
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00b      	beq.n	800dd72 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd5e:	e008      	b.n	800dd72 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800dd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	4013      	ands	r3, r2
 800dd68:	69ba      	ldr	r2, [r7, #24]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d101      	bne.n	800dd72 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800dd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d010      	beq.n	800dd9a <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800dd82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	4313      	orrs	r3, r2
 800dd88:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800dd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dd92:	4619      	mov	r1, r3
 800dd94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dd96:	f002 f807 	bl	800fda8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800dd9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d1be      	bne.n	800dd24 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800dda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddac:	43db      	mvns	r3, r3
 800ddae:	401a      	ands	r2, r3
 800ddb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ddb4:	f001 fcf0 	bl	800f798 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ddb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddba:	681b      	ldr	r3, [r3, #0]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3738      	adds	r7, #56	@ 0x38
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ddce:	6839      	ldr	r1, [r7, #0]
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff ff67 	bl	800dca4 <xEventGroupSetBits>
}
 800ddd6:	bf00      	nop
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ddde:	b480      	push	{r7}
 800dde0:	b087      	sub	sp, #28
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	60f8      	str	r0, [r7, #12]
 800dde6:	60b9      	str	r1, [r7, #8]
 800dde8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800ddea:	2300      	movs	r3, #0
 800ddec:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d107      	bne.n	800de04 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ddf4:	68fa      	ldr	r2, [r7, #12]
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00a      	beq.n	800de14 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ddfe:	2301      	movs	r3, #1
 800de00:	617b      	str	r3, [r7, #20]
 800de02:	e007      	b.n	800de14 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	4013      	ands	r3, r2
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d101      	bne.n	800de14 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800de10:	2301      	movs	r3, #1
 800de12:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800de14:	697b      	ldr	r3, [r7, #20]
}
 800de16:	4618      	mov	r0, r3
 800de18:	371c      	adds	r7, #28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
	...

0800de24 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	68f9      	ldr	r1, [r7, #12]
 800de36:	4804      	ldr	r0, [pc, #16]	@ (800de48 <xEventGroupSetBitsFromISR+0x24>)
 800de38:	f002 fe9c 	bl	8010b74 <xTimerPendFunctionCallFromISR>
 800de3c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800de3e:	697b      	ldr	r3, [r7, #20]
	}
 800de40:	4618      	mov	r0, r3
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	0800ddc5 	.word	0x0800ddc5

0800de4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f103 0208 	add.w	r2, r3, #8
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f103 0208 	add.w	r2, r3, #8
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f103 0208 	add.w	r2, r3, #8
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de80:	bf00      	nop
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de9a:	bf00      	nop
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dea6:	b480      	push	{r7}
 800dea8:	b085      	sub	sp, #20
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
 800deae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	689a      	ldr	r2, [r3, #8]
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	683a      	ldr	r2, [r7, #0]
 800deca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	1c5a      	adds	r2, r3, #1
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	601a      	str	r2, [r3, #0]
}
 800dee2:	bf00      	nop
 800dee4:	3714      	adds	r7, #20
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800deee:	b480      	push	{r7}
 800def0:	b085      	sub	sp, #20
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df04:	d103      	bne.n	800df0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	e00c      	b.n	800df28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	3308      	adds	r3, #8
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	e002      	b.n	800df1c <vListInsert+0x2e>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	429a      	cmp	r2, r3
 800df26:	d2f6      	bcs.n	800df16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	683a      	ldr	r2, [r7, #0]
 800df36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	1c5a      	adds	r2, r3, #1
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	601a      	str	r2, [r3, #0]
}
 800df54:	bf00      	nop
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	6892      	ldr	r2, [r2, #8]
 800df76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	6852      	ldr	r2, [r2, #4]
 800df80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d103      	bne.n	800df94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	689a      	ldr	r2, [r3, #8]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	1e5a      	subs	r2, r3, #1
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10d      	bne.n	800dfe4 <xQueueGenericReset+0x30>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfcc:	b672      	cpsid	i
 800dfce:	f383 8811 	msr	BASEPRI, r3
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	f3bf 8f4f 	dsb	sy
 800dfda:	b662      	cpsie	i
 800dfdc:	60bb      	str	r3, [r7, #8]
}
 800dfde:	bf00      	nop
 800dfe0:	bf00      	nop
 800dfe2:	e7fd      	b.n	800dfe0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800dfe4:	f002 fef2 	bl	8010dcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dff0:	68f9      	ldr	r1, [r7, #12]
 800dff2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dff4:	fb01 f303 	mul.w	r3, r1, r3
 800dff8:	441a      	add	r2, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2200      	movs	r2, #0
 800e002:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e014:	3b01      	subs	r3, #1
 800e016:	68f9      	ldr	r1, [r7, #12]
 800e018:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e01a:	fb01 f303 	mul.w	r3, r1, r3
 800e01e:	441a      	add	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	22ff      	movs	r2, #255	@ 0xff
 800e028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	22ff      	movs	r2, #255	@ 0xff
 800e030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d114      	bne.n	800e064 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	691b      	ldr	r3, [r3, #16]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d01a      	beq.n	800e078 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3310      	adds	r3, #16
 800e046:	4618      	mov	r0, r3
 800e048:	f001 fe48 	bl	800fcdc <xTaskRemoveFromEventList>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d012      	beq.n	800e078 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e052:	4b0d      	ldr	r3, [pc, #52]	@ (800e088 <xQueueGenericReset+0xd4>)
 800e054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	e009      	b.n	800e078 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3310      	adds	r3, #16
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff feef 	bl	800de4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3324      	adds	r3, #36	@ 0x24
 800e072:	4618      	mov	r0, r3
 800e074:	f7ff feea 	bl	800de4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e078:	f002 fede 	bl	8010e38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e07c:	2301      	movs	r3, #1
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08e      	sub	sp, #56	@ 0x38
 800e090:	af02      	add	r7, sp, #8
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10d      	bne.n	800e0bc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a4:	b672      	cpsid	i
 800e0a6:	f383 8811 	msr	BASEPRI, r3
 800e0aa:	f3bf 8f6f 	isb	sy
 800e0ae:	f3bf 8f4f 	dsb	sy
 800e0b2:	b662      	cpsie	i
 800e0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e0b6:	bf00      	nop
 800e0b8:	bf00      	nop
 800e0ba:	e7fd      	b.n	800e0b8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10d      	bne.n	800e0de <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800e0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c6:	b672      	cpsid	i
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	b662      	cpsie	i
 800e0d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e0d8:	bf00      	nop
 800e0da:	bf00      	nop
 800e0dc:	e7fd      	b.n	800e0da <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <xQueueGenericCreateStatic+0x5e>
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <xQueueGenericCreateStatic+0x62>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e000      	b.n	800e0f0 <xQueueGenericCreateStatic+0x64>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10d      	bne.n	800e110 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f8:	b672      	cpsid	i
 800e0fa:	f383 8811 	msr	BASEPRI, r3
 800e0fe:	f3bf 8f6f 	isb	sy
 800e102:	f3bf 8f4f 	dsb	sy
 800e106:	b662      	cpsie	i
 800e108:	623b      	str	r3, [r7, #32]
}
 800e10a:	bf00      	nop
 800e10c:	bf00      	nop
 800e10e:	e7fd      	b.n	800e10c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d102      	bne.n	800e11c <xQueueGenericCreateStatic+0x90>
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <xQueueGenericCreateStatic+0x94>
 800e11c:	2301      	movs	r3, #1
 800e11e:	e000      	b.n	800e122 <xQueueGenericCreateStatic+0x96>
 800e120:	2300      	movs	r3, #0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10d      	bne.n	800e142 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e12a:	b672      	cpsid	i
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	b662      	cpsie	i
 800e13a:	61fb      	str	r3, [r7, #28]
}
 800e13c:	bf00      	nop
 800e13e:	bf00      	nop
 800e140:	e7fd      	b.n	800e13e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e142:	2350      	movs	r3, #80	@ 0x50
 800e144:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	2b50      	cmp	r3, #80	@ 0x50
 800e14a:	d00d      	beq.n	800e168 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e150:	b672      	cpsid	i
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	b662      	cpsie	i
 800e160:	61bb      	str	r3, [r7, #24]
}
 800e162:	bf00      	nop
 800e164:	bf00      	nop
 800e166:	e7fd      	b.n	800e164 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e168:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00d      	beq.n	800e190 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e17c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	4613      	mov	r3, r2
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	68b9      	ldr	r1, [r7, #8]
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 f848 	bl	800e220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e192:	4618      	mov	r0, r3
 800e194:	3730      	adds	r7, #48	@ 0x30
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b08a      	sub	sp, #40	@ 0x28
 800e19e:	af02      	add	r7, sp, #8
 800e1a0:	60f8      	str	r0, [r7, #12]
 800e1a2:	60b9      	str	r1, [r7, #8]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d10d      	bne.n	800e1ca <xQueueGenericCreate+0x30>
	__asm volatile
 800e1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b2:	b672      	cpsid	i
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	b662      	cpsie	i
 800e1c2:	613b      	str	r3, [r7, #16]
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop
 800e1c8:	e7fd      	b.n	800e1c6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d102      	bne.n	800e1d6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61fb      	str	r3, [r7, #28]
 800e1d4:	e004      	b.n	800e1e0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	fb02 f303 	mul.w	r3, r2, r3
 800e1de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	3350      	adds	r3, #80	@ 0x50
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f002 ff1f 	bl	8011028 <pvPortMalloc>
 800e1ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d011      	beq.n	800e216 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	3350      	adds	r3, #80	@ 0x50
 800e1fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e204:	79fa      	ldrb	r2, [r7, #7]
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	4613      	mov	r3, r2
 800e20c:	697a      	ldr	r2, [r7, #20]
 800e20e:	68b9      	ldr	r1, [r7, #8]
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f000 f805 	bl	800e220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e216:	69bb      	ldr	r3, [r7, #24]
	}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d103      	bne.n	800e23c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	69ba      	ldr	r2, [r7, #24]
 800e238:	601a      	str	r2, [r3, #0]
 800e23a:	e002      	b.n	800e242 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e24e:	2101      	movs	r1, #1
 800e250:	69b8      	ldr	r0, [r7, #24]
 800e252:	f7ff feaf 	bl	800dfb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	78fa      	ldrb	r2, [r7, #3]
 800e25a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e25e:	bf00      	nop
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e266:	b580      	push	{r7, lr}
 800e268:	b082      	sub	sp, #8
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00e      	beq.n	800e292 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e286:	2300      	movs	r3, #0
 800e288:	2200      	movs	r2, #0
 800e28a:	2100      	movs	r1, #0
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f91d 	bl	800e4cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e292:	bf00      	nop
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b086      	sub	sp, #24
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	6939      	ldr	r1, [r7, #16]
 800e2b2:	6978      	ldr	r0, [r7, #20]
 800e2b4:	f7ff ff71 	bl	800e19a <xQueueGenericCreate>
 800e2b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f7ff ffd3 	bl	800e266 <prvInitialiseMutex>

		return xNewQueue;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
	}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b088      	sub	sp, #32
 800e2ce:	af02      	add	r7, sp, #8
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	6039      	str	r1, [r7, #0]
 800e2d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	2300      	movs	r3, #0
 800e2dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	6939      	ldr	r1, [r7, #16]
 800e2e8:	6978      	ldr	r0, [r7, #20]
 800e2ea:	f7ff fecf 	bl	800e08c <xQueueGenericCreateStatic>
 800e2ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff ffb8 	bl	800e266 <prvInitialiseMutex>

		return xNewQueue;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
	}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e300:	b590      	push	{r4, r7, lr}
 800e302:	b087      	sub	sp, #28
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10d      	bne.n	800e32e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e316:	b672      	cpsid	i
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	b662      	cpsie	i
 800e326:	60fb      	str	r3, [r7, #12]
}
 800e328:	bf00      	nop
 800e32a:	bf00      	nop
 800e32c:	e7fd      	b.n	800e32a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	689c      	ldr	r4, [r3, #8]
 800e332:	f001 fea5 	bl	8010080 <xTaskGetCurrentTaskHandle>
 800e336:	4603      	mov	r3, r0
 800e338:	429c      	cmp	r4, r3
 800e33a:	d111      	bne.n	800e360 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	1e5a      	subs	r2, r3, #1
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d105      	bne.n	800e35a <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e34e:	2300      	movs	r3, #0
 800e350:	2200      	movs	r2, #0
 800e352:	2100      	movs	r1, #0
 800e354:	6938      	ldr	r0, [r7, #16]
 800e356:	f000 f8b9 	bl	800e4cc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e35a:	2301      	movs	r3, #1
 800e35c:	617b      	str	r3, [r7, #20]
 800e35e:	e001      	b.n	800e364 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e360:	2300      	movs	r3, #0
 800e362:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e364:	697b      	ldr	r3, [r7, #20]
	}
 800e366:	4618      	mov	r0, r3
 800e368:	371c      	adds	r7, #28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd90      	pop	{r4, r7, pc}

0800e36e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e36e:	b590      	push	{r4, r7, lr}
 800e370:	b087      	sub	sp, #28
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d10d      	bne.n	800e39e <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e386:	b672      	cpsid	i
 800e388:	f383 8811 	msr	BASEPRI, r3
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	f3bf 8f4f 	dsb	sy
 800e394:	b662      	cpsie	i
 800e396:	60fb      	str	r3, [r7, #12]
}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	e7fd      	b.n	800e39a <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	689c      	ldr	r4, [r3, #8]
 800e3a2:	f001 fe6d 	bl	8010080 <xTaskGetCurrentTaskHandle>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	429c      	cmp	r4, r3
 800e3aa:	d107      	bne.n	800e3bc <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	617b      	str	r3, [r7, #20]
 800e3ba:	e00c      	b.n	800e3d6 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6938      	ldr	r0, [r7, #16]
 800e3c0:	f000 fbb2 	bl	800eb28 <xQueueSemaphoreTake>
 800e3c4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d004      	beq.n	800e3d6 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	1c5a      	adds	r2, r3, #1
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e3d6:	697b      	ldr	r3, [r7, #20]
	}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	371c      	adds	r7, #28
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd90      	pop	{r4, r7, pc}

0800e3e0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08a      	sub	sp, #40	@ 0x28
 800e3e4:	af02      	add	r7, sp, #8
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10d      	bne.n	800e40e <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f6:	b672      	cpsid	i
 800e3f8:	f383 8811 	msr	BASEPRI, r3
 800e3fc:	f3bf 8f6f 	isb	sy
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	b662      	cpsie	i
 800e406:	61bb      	str	r3, [r7, #24]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e40e:	68ba      	ldr	r2, [r7, #8]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	429a      	cmp	r2, r3
 800e414:	d90d      	bls.n	800e432 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41a:	b672      	cpsid	i
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	b662      	cpsie	i
 800e42a:	617b      	str	r3, [r7, #20]
}
 800e42c:	bf00      	nop
 800e42e:	bf00      	nop
 800e430:	e7fd      	b.n	800e42e <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e432:	2302      	movs	r3, #2
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	2100      	movs	r1, #0
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff fe25 	bl	800e08c <xQueueGenericCreateStatic>
 800e442:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d002      	beq.n	800e450 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e450:	69fb      	ldr	r3, [r7, #28]
	}
 800e452:	4618      	mov	r0, r3
 800e454:	3720      	adds	r7, #32
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b086      	sub	sp, #24
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
 800e462:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10d      	bne.n	800e486 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46e:	b672      	cpsid	i
 800e470:	f383 8811 	msr	BASEPRI, r3
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	b662      	cpsie	i
 800e47e:	613b      	str	r3, [r7, #16]
}
 800e480:	bf00      	nop
 800e482:	bf00      	nop
 800e484:	e7fd      	b.n	800e482 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d90d      	bls.n	800e4aa <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e492:	b672      	cpsid	i
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	b662      	cpsie	i
 800e4a2:	60fb      	str	r3, [r7, #12]
}
 800e4a4:	bf00      	nop
 800e4a6:	bf00      	nop
 800e4a8:	e7fd      	b.n	800e4a6 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	2100      	movs	r1, #0
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f7ff fe73 	bl	800e19a <xQueueGenericCreate>
 800e4b4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d002      	beq.n	800e4c2 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e4c2:	697b      	ldr	r3, [r7, #20]
	}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3718      	adds	r7, #24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b08e      	sub	sp, #56	@ 0x38
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10d      	bne.n	800e504 <xQueueGenericSend+0x38>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ec:	b672      	cpsid	i
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	b662      	cpsie	i
 800e4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e4fe:	bf00      	nop
 800e500:	bf00      	nop
 800e502:	e7fd      	b.n	800e500 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d103      	bne.n	800e512 <xQueueGenericSend+0x46>
 800e50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d101      	bne.n	800e516 <xQueueGenericSend+0x4a>
 800e512:	2301      	movs	r3, #1
 800e514:	e000      	b.n	800e518 <xQueueGenericSend+0x4c>
 800e516:	2300      	movs	r3, #0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10d      	bne.n	800e538 <xQueueGenericSend+0x6c>
	__asm volatile
 800e51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e520:	b672      	cpsid	i
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	b662      	cpsie	i
 800e530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e532:	bf00      	nop
 800e534:	bf00      	nop
 800e536:	e7fd      	b.n	800e534 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d103      	bne.n	800e546 <xQueueGenericSend+0x7a>
 800e53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e542:	2b01      	cmp	r3, #1
 800e544:	d101      	bne.n	800e54a <xQueueGenericSend+0x7e>
 800e546:	2301      	movs	r3, #1
 800e548:	e000      	b.n	800e54c <xQueueGenericSend+0x80>
 800e54a:	2300      	movs	r3, #0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10d      	bne.n	800e56c <xQueueGenericSend+0xa0>
	__asm volatile
 800e550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e554:	b672      	cpsid	i
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	b662      	cpsie	i
 800e564:	623b      	str	r3, [r7, #32]
}
 800e566:	bf00      	nop
 800e568:	bf00      	nop
 800e56a:	e7fd      	b.n	800e568 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e56c:	f001 fd98 	bl	80100a0 <xTaskGetSchedulerState>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d102      	bne.n	800e57c <xQueueGenericSend+0xb0>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d101      	bne.n	800e580 <xQueueGenericSend+0xb4>
 800e57c:	2301      	movs	r3, #1
 800e57e:	e000      	b.n	800e582 <xQueueGenericSend+0xb6>
 800e580:	2300      	movs	r3, #0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10d      	bne.n	800e5a2 <xQueueGenericSend+0xd6>
	__asm volatile
 800e586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58a:	b672      	cpsid	i
 800e58c:	f383 8811 	msr	BASEPRI, r3
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	b662      	cpsie	i
 800e59a:	61fb      	str	r3, [r7, #28]
}
 800e59c:	bf00      	nop
 800e59e:	bf00      	nop
 800e5a0:	e7fd      	b.n	800e59e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5a2:	f002 fc13 	bl	8010dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d302      	bcc.n	800e5b8 <xQueueGenericSend+0xec>
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d129      	bne.n	800e60c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5b8:	683a      	ldr	r2, [r7, #0]
 800e5ba:	68b9      	ldr	r1, [r7, #8]
 800e5bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5be:	f000 fcd3 	bl	800ef68 <prvCopyDataToQueue>
 800e5c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d010      	beq.n	800e5ee <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ce:	3324      	adds	r3, #36	@ 0x24
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f001 fb83 	bl	800fcdc <xTaskRemoveFromEventList>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d013      	beq.n	800e604 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e5dc:	4b3f      	ldr	r3, [pc, #252]	@ (800e6dc <xQueueGenericSend+0x210>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	e00a      	b.n	800e604 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d007      	beq.n	800e604 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e5f4:	4b39      	ldr	r3, [pc, #228]	@ (800e6dc <xQueueGenericSend+0x210>)
 800e5f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5fa:	601a      	str	r2, [r3, #0]
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e604:	f002 fc18 	bl	8010e38 <vPortExitCritical>
				return pdPASS;
 800e608:	2301      	movs	r3, #1
 800e60a:	e063      	b.n	800e6d4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d103      	bne.n	800e61a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e612:	f002 fc11 	bl	8010e38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e616:	2300      	movs	r3, #0
 800e618:	e05c      	b.n	800e6d4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d106      	bne.n	800e62e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e620:	f107 0314 	add.w	r3, r7, #20
 800e624:	4618      	mov	r0, r3
 800e626:	f001 fc27 	bl	800fe78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e62a:	2301      	movs	r3, #1
 800e62c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e62e:	f002 fc03 	bl	8010e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e632:	f001 f8a3 	bl	800f77c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e636:	f002 fbc9 	bl	8010dcc <vPortEnterCritical>
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e640:	b25b      	sxtb	r3, r3
 800e642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e646:	d103      	bne.n	800e650 <xQueueGenericSend+0x184>
 800e648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64a:	2200      	movs	r2, #0
 800e64c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e656:	b25b      	sxtb	r3, r3
 800e658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e65c:	d103      	bne.n	800e666 <xQueueGenericSend+0x19a>
 800e65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e660:	2200      	movs	r2, #0
 800e662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e666:	f002 fbe7 	bl	8010e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e66a:	1d3a      	adds	r2, r7, #4
 800e66c:	f107 0314 	add.w	r3, r7, #20
 800e670:	4611      	mov	r1, r2
 800e672:	4618      	mov	r0, r3
 800e674:	f001 fc16 	bl	800fea4 <xTaskCheckForTimeOut>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d124      	bne.n	800e6c8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e67e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e680:	f000 fd6a 	bl	800f158 <prvIsQueueFull>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d018      	beq.n	800e6bc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	3310      	adds	r3, #16
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	4611      	mov	r1, r2
 800e692:	4618      	mov	r0, r3
 800e694:	f001 fa8a 	bl	800fbac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e69a:	f000 fcf5 	bl	800f088 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e69e:	f001 f87b 	bl	800f798 <xTaskResumeAll>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f47f af7c 	bne.w	800e5a2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800e6dc <xQueueGenericSend+0x210>)
 800e6ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	e772      	b.n	800e5a2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e6bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6be:	f000 fce3 	bl	800f088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6c2:	f001 f869 	bl	800f798 <xTaskResumeAll>
 800e6c6:	e76c      	b.n	800e5a2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e6c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6ca:	f000 fcdd 	bl	800f088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6ce:	f001 f863 	bl	800f798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e6d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3738      	adds	r7, #56	@ 0x38
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	e000ed04 	.word	0xe000ed04

0800e6e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b08e      	sub	sp, #56	@ 0x38
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10d      	bne.n	800e714 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fc:	b672      	cpsid	i
 800e6fe:	f383 8811 	msr	BASEPRI, r3
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	f3bf 8f4f 	dsb	sy
 800e70a:	b662      	cpsie	i
 800e70c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e70e:	bf00      	nop
 800e710:	bf00      	nop
 800e712:	e7fd      	b.n	800e710 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d103      	bne.n	800e722 <xQueueGenericSendFromISR+0x42>
 800e71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d101      	bne.n	800e726 <xQueueGenericSendFromISR+0x46>
 800e722:	2301      	movs	r3, #1
 800e724:	e000      	b.n	800e728 <xQueueGenericSendFromISR+0x48>
 800e726:	2300      	movs	r3, #0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10d      	bne.n	800e748 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e730:	b672      	cpsid	i
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	b662      	cpsie	i
 800e740:	623b      	str	r3, [r7, #32]
}
 800e742:	bf00      	nop
 800e744:	bf00      	nop
 800e746:	e7fd      	b.n	800e744 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d103      	bne.n	800e756 <xQueueGenericSendFromISR+0x76>
 800e74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e752:	2b01      	cmp	r3, #1
 800e754:	d101      	bne.n	800e75a <xQueueGenericSendFromISR+0x7a>
 800e756:	2301      	movs	r3, #1
 800e758:	e000      	b.n	800e75c <xQueueGenericSendFromISR+0x7c>
 800e75a:	2300      	movs	r3, #0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10d      	bne.n	800e77c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e764:	b672      	cpsid	i
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	b662      	cpsie	i
 800e774:	61fb      	str	r3, [r7, #28]
}
 800e776:	bf00      	nop
 800e778:	bf00      	nop
 800e77a:	e7fd      	b.n	800e778 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e77c:	f002 fc0e 	bl	8010f9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e780:	f3ef 8211 	mrs	r2, BASEPRI
 800e784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e788:	b672      	cpsid	i
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	b662      	cpsie	i
 800e798:	61ba      	str	r2, [r7, #24]
 800e79a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e79c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d302      	bcc.n	800e7b2 <xQueueGenericSendFromISR+0xd2>
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d12c      	bne.n	800e80c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	68b9      	ldr	r1, [r7, #8]
 800e7c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7c2:	f000 fbd1 	bl	800ef68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e7c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7ce:	d112      	bne.n	800e7f6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d016      	beq.n	800e806 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7da:	3324      	adds	r3, #36	@ 0x24
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f001 fa7d 	bl	800fcdc <xTaskRemoveFromEventList>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d00e      	beq.n	800e806 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00b      	beq.n	800e806 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	e007      	b.n	800e806 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e7f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	b25a      	sxtb	r2, r3
 800e800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e806:	2301      	movs	r3, #1
 800e808:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e80a:	e001      	b.n	800e810 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e80c:	2300      	movs	r3, #0
 800e80e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e812:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e81a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3738      	adds	r7, #56	@ 0x38
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b08e      	sub	sp, #56	@ 0x38
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10d      	bne.n	800e856 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83e:	b672      	cpsid	i
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	b662      	cpsie	i
 800e84e:	623b      	str	r3, [r7, #32]
}
 800e850:	bf00      	nop
 800e852:	bf00      	nop
 800e854:	e7fd      	b.n	800e852 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00d      	beq.n	800e87a <xQueueGiveFromISR+0x54>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e862:	b672      	cpsid	i
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	b662      	cpsie	i
 800e872:	61fb      	str	r3, [r7, #28]
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d103      	bne.n	800e88a <xQueueGiveFromISR+0x64>
 800e882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d101      	bne.n	800e88e <xQueueGiveFromISR+0x68>
 800e88a:	2301      	movs	r3, #1
 800e88c:	e000      	b.n	800e890 <xQueueGiveFromISR+0x6a>
 800e88e:	2300      	movs	r3, #0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10d      	bne.n	800e8b0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e898:	b672      	cpsid	i
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	b662      	cpsie	i
 800e8a8:	61bb      	str	r3, [r7, #24]
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	e7fd      	b.n	800e8ac <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8b0:	f002 fb74 	bl	8010f9c <vPortValidateInterruptPriority>
	__asm volatile
 800e8b4:	f3ef 8211 	mrs	r2, BASEPRI
 800e8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8bc:	b672      	cpsid	i
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	b662      	cpsie	i
 800e8cc:	617a      	str	r2, [r7, #20]
 800e8ce:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e8d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8d8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d22b      	bcs.n	800e93c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8f0:	1c5a      	adds	r2, r3, #1
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f4:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e8fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8fe:	d112      	bne.n	800e926 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e904:	2b00      	cmp	r3, #0
 800e906:	d016      	beq.n	800e936 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90a:	3324      	adds	r3, #36	@ 0x24
 800e90c:	4618      	mov	r0, r3
 800e90e:	f001 f9e5 	bl	800fcdc <xTaskRemoveFromEventList>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00e      	beq.n	800e936 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00b      	beq.n	800e936 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	2201      	movs	r2, #1
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	e007      	b.n	800e936 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e92a:	3301      	adds	r3, #1
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	b25a      	sxtb	r2, r3
 800e930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e936:	2301      	movs	r3, #1
 800e938:	637b      	str	r3, [r7, #52]	@ 0x34
 800e93a:	e001      	b.n	800e940 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e93c:	2300      	movs	r3, #0
 800e93e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e942:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f383 8811 	msr	BASEPRI, r3
}
 800e94a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3738      	adds	r7, #56	@ 0x38
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08c      	sub	sp, #48	@ 0x30
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e964:	2300      	movs	r3, #0
 800e966:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d10d      	bne.n	800e98e <xQueueReceive+0x36>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e976:	b672      	cpsid	i
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	b662      	cpsie	i
 800e986:	623b      	str	r3, [r7, #32]
}
 800e988:	bf00      	nop
 800e98a:	bf00      	nop
 800e98c:	e7fd      	b.n	800e98a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d103      	bne.n	800e99c <xQueueReceive+0x44>
 800e994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d101      	bne.n	800e9a0 <xQueueReceive+0x48>
 800e99c:	2301      	movs	r3, #1
 800e99e:	e000      	b.n	800e9a2 <xQueueReceive+0x4a>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d10d      	bne.n	800e9c2 <xQueueReceive+0x6a>
	__asm volatile
 800e9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9aa:	b672      	cpsid	i
 800e9ac:	f383 8811 	msr	BASEPRI, r3
 800e9b0:	f3bf 8f6f 	isb	sy
 800e9b4:	f3bf 8f4f 	dsb	sy
 800e9b8:	b662      	cpsie	i
 800e9ba:	61fb      	str	r3, [r7, #28]
}
 800e9bc:	bf00      	nop
 800e9be:	bf00      	nop
 800e9c0:	e7fd      	b.n	800e9be <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9c2:	f001 fb6d 	bl	80100a0 <xTaskGetSchedulerState>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d102      	bne.n	800e9d2 <xQueueReceive+0x7a>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <xQueueReceive+0x7e>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e000      	b.n	800e9d8 <xQueueReceive+0x80>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10d      	bne.n	800e9f8 <xQueueReceive+0xa0>
	__asm volatile
 800e9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e0:	b672      	cpsid	i
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	b662      	cpsie	i
 800e9f0:	61bb      	str	r3, [r7, #24]
}
 800e9f2:	bf00      	nop
 800e9f4:	bf00      	nop
 800e9f6:	e7fd      	b.n	800e9f4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9f8:	f002 f9e8 	bl	8010dcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea00:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d01f      	beq.n	800ea48 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea08:	68b9      	ldr	r1, [r7, #8]
 800ea0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea0c:	f000 fb16 	bl	800f03c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea12:	1e5a      	subs	r2, r3, #1
 800ea14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea16:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00f      	beq.n	800ea40 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea22:	3310      	adds	r3, #16
 800ea24:	4618      	mov	r0, r3
 800ea26:	f001 f959 	bl	800fcdc <xTaskRemoveFromEventList>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d007      	beq.n	800ea40 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea30:	4b3c      	ldr	r3, [pc, #240]	@ (800eb24 <xQueueReceive+0x1cc>)
 800ea32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea36:	601a      	str	r2, [r3, #0]
 800ea38:	f3bf 8f4f 	dsb	sy
 800ea3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea40:	f002 f9fa 	bl	8010e38 <vPortExitCritical>
				return pdPASS;
 800ea44:	2301      	movs	r3, #1
 800ea46:	e069      	b.n	800eb1c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d103      	bne.n	800ea56 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea4e:	f002 f9f3 	bl	8010e38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea52:	2300      	movs	r3, #0
 800ea54:	e062      	b.n	800eb1c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d106      	bne.n	800ea6a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea5c:	f107 0310 	add.w	r3, r7, #16
 800ea60:	4618      	mov	r0, r3
 800ea62:	f001 fa09 	bl	800fe78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea66:	2301      	movs	r3, #1
 800ea68:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea6a:	f002 f9e5 	bl	8010e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea6e:	f000 fe85 	bl	800f77c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea72:	f002 f9ab 	bl	8010dcc <vPortEnterCritical>
 800ea76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea82:	d103      	bne.n	800ea8c <xQueueReceive+0x134>
 800ea84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea92:	b25b      	sxtb	r3, r3
 800ea94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea98:	d103      	bne.n	800eaa2 <xQueueReceive+0x14a>
 800ea9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eaa2:	f002 f9c9 	bl	8010e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eaa6:	1d3a      	adds	r2, r7, #4
 800eaa8:	f107 0310 	add.w	r3, r7, #16
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f001 f9f8 	bl	800fea4 <xTaskCheckForTimeOut>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d123      	bne.n	800eb02 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eaba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eabc:	f000 fb36 	bl	800f12c <prvIsQueueEmpty>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d017      	beq.n	800eaf6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac8:	3324      	adds	r3, #36	@ 0x24
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	4611      	mov	r1, r2
 800eace:	4618      	mov	r0, r3
 800ead0:	f001 f86c 	bl	800fbac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ead4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ead6:	f000 fad7 	bl	800f088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eada:	f000 fe5d 	bl	800f798 <xTaskResumeAll>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d189      	bne.n	800e9f8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800eae4:	4b0f      	ldr	r3, [pc, #60]	@ (800eb24 <xQueueReceive+0x1cc>)
 800eae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	e780      	b.n	800e9f8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eaf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaf8:	f000 fac6 	bl	800f088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eafc:	f000 fe4c 	bl	800f798 <xTaskResumeAll>
 800eb00:	e77a      	b.n	800e9f8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eb02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb04:	f000 fac0 	bl	800f088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb08:	f000 fe46 	bl	800f798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb0e:	f000 fb0d 	bl	800f12c <prvIsQueueEmpty>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	f43f af6f 	beq.w	800e9f8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3730      	adds	r7, #48	@ 0x30
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	e000ed04 	.word	0xe000ed04

0800eb28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08e      	sub	sp, #56	@ 0x38
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb32:	2300      	movs	r3, #0
 800eb34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10d      	bne.n	800eb60 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800eb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb48:	b672      	cpsid	i
 800eb4a:	f383 8811 	msr	BASEPRI, r3
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	b662      	cpsie	i
 800eb58:	623b      	str	r3, [r7, #32]
}
 800eb5a:	bf00      	nop
 800eb5c:	bf00      	nop
 800eb5e:	e7fd      	b.n	800eb5c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00d      	beq.n	800eb84 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800eb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6c:	b672      	cpsid	i
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	b662      	cpsie	i
 800eb7c:	61fb      	str	r3, [r7, #28]
}
 800eb7e:	bf00      	nop
 800eb80:	bf00      	nop
 800eb82:	e7fd      	b.n	800eb80 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb84:	f001 fa8c 	bl	80100a0 <xTaskGetSchedulerState>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d102      	bne.n	800eb94 <xQueueSemaphoreTake+0x6c>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d101      	bne.n	800eb98 <xQueueSemaphoreTake+0x70>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e000      	b.n	800eb9a <xQueueSemaphoreTake+0x72>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10d      	bne.n	800ebba <xQueueSemaphoreTake+0x92>
	__asm volatile
 800eb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba2:	b672      	cpsid	i
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	b662      	cpsie	i
 800ebb2:	61bb      	str	r3, [r7, #24]
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop
 800ebb8:	e7fd      	b.n	800ebb6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebba:	f002 f907 	bl	8010dcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ebbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebc2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ebc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d024      	beq.n	800ec14 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ebca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebcc:	1e5a      	subs	r2, r3, #1
 800ebce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d104      	bne.n	800ebe4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ebda:	f001 fbfb 	bl	80103d4 <pvTaskIncrementMutexHeldCount>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00f      	beq.n	800ec0c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebee:	3310      	adds	r3, #16
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f001 f873 	bl	800fcdc <xTaskRemoveFromEventList>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d007      	beq.n	800ec0c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ebfc:	4b55      	ldr	r3, [pc, #340]	@ (800ed54 <xQueueSemaphoreTake+0x22c>)
 800ebfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec0c:	f002 f914 	bl	8010e38 <vPortExitCritical>
				return pdPASS;
 800ec10:	2301      	movs	r3, #1
 800ec12:	e09a      	b.n	800ed4a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d114      	bne.n	800ec44 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00d      	beq.n	800ec3c <xQueueSemaphoreTake+0x114>
	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec24:	b672      	cpsid	i
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	b662      	cpsie	i
 800ec34:	617b      	str	r3, [r7, #20]
}
 800ec36:	bf00      	nop
 800ec38:	bf00      	nop
 800ec3a:	e7fd      	b.n	800ec38 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ec3c:	f002 f8fc 	bl	8010e38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec40:	2300      	movs	r3, #0
 800ec42:	e082      	b.n	800ed4a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d106      	bne.n	800ec58 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec4a:	f107 030c 	add.w	r3, r7, #12
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 f912 	bl	800fe78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec54:	2301      	movs	r3, #1
 800ec56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec58:	f002 f8ee 	bl	8010e38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec5c:	f000 fd8e 	bl	800f77c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec60:	f002 f8b4 	bl	8010dcc <vPortEnterCritical>
 800ec64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec6a:	b25b      	sxtb	r3, r3
 800ec6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec70:	d103      	bne.n	800ec7a <xQueueSemaphoreTake+0x152>
 800ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec74:	2200      	movs	r2, #0
 800ec76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec80:	b25b      	sxtb	r3, r3
 800ec82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec86:	d103      	bne.n	800ec90 <xQueueSemaphoreTake+0x168>
 800ec88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec90:	f002 f8d2 	bl	8010e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec94:	463a      	mov	r2, r7
 800ec96:	f107 030c 	add.w	r3, r7, #12
 800ec9a:	4611      	mov	r1, r2
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f001 f901 	bl	800fea4 <xTaskCheckForTimeOut>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d132      	bne.n	800ed0e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ecaa:	f000 fa3f 	bl	800f12c <prvIsQueueEmpty>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d026      	beq.n	800ed02 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d109      	bne.n	800ecd0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ecbc:	f002 f886 	bl	8010dcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f001 fa09 	bl	80100dc <xTaskPriorityInherit>
 800ecca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800eccc:	f002 f8b4 	bl	8010e38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	3324      	adds	r3, #36	@ 0x24
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	4611      	mov	r1, r2
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 ff67 	bl	800fbac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ecde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ece0:	f000 f9d2 	bl	800f088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ece4:	f000 fd58 	bl	800f798 <xTaskResumeAll>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f47f af65 	bne.w	800ebba <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ecf0:	4b18      	ldr	r3, [pc, #96]	@ (800ed54 <xQueueSemaphoreTake+0x22c>)
 800ecf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	e75b      	b.n	800ebba <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ed02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed04:	f000 f9c0 	bl	800f088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed08:	f000 fd46 	bl	800f798 <xTaskResumeAll>
 800ed0c:	e755      	b.n	800ebba <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ed0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed10:	f000 f9ba 	bl	800f088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed14:	f000 fd40 	bl	800f798 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed1a:	f000 fa07 	bl	800f12c <prvIsQueueEmpty>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f43f af4a 	beq.w	800ebba <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ed26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00d      	beq.n	800ed48 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ed2c:	f002 f84e 	bl	8010dcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ed30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed32:	f000 f901 	bl	800ef38 <prvGetDisinheritPriorityAfterTimeout>
 800ed36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f001 faa8 	bl	8010294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ed44:	f002 f878 	bl	8010e38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3738      	adds	r7, #56	@ 0x38
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	e000ed04 	.word	0xe000ed04

0800ed58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b08e      	sub	sp, #56	@ 0x38
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ed68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10d      	bne.n	800ed8a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ed6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed72:	b672      	cpsid	i
 800ed74:	f383 8811 	msr	BASEPRI, r3
 800ed78:	f3bf 8f6f 	isb	sy
 800ed7c:	f3bf 8f4f 	dsb	sy
 800ed80:	b662      	cpsie	i
 800ed82:	623b      	str	r3, [r7, #32]
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
 800ed88:	e7fd      	b.n	800ed86 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d103      	bne.n	800ed98 <xQueueReceiveFromISR+0x40>
 800ed90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d101      	bne.n	800ed9c <xQueueReceiveFromISR+0x44>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e000      	b.n	800ed9e <xQueueReceiveFromISR+0x46>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d10d      	bne.n	800edbe <xQueueReceiveFromISR+0x66>
	__asm volatile
 800eda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda6:	b672      	cpsid	i
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	b662      	cpsie	i
 800edb6:	61fb      	str	r3, [r7, #28]
}
 800edb8:	bf00      	nop
 800edba:	bf00      	nop
 800edbc:	e7fd      	b.n	800edba <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edbe:	f002 f8ed 	bl	8010f9c <vPortValidateInterruptPriority>
	__asm volatile
 800edc2:	f3ef 8211 	mrs	r2, BASEPRI
 800edc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edca:	b672      	cpsid	i
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	b662      	cpsie	i
 800edda:	61ba      	str	r2, [r7, #24]
 800eddc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800edde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ede0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ede2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ede8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edea:	2b00      	cmp	r3, #0
 800edec:	d02f      	beq.n	800ee4e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800edee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800edf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800edf8:	68b9      	ldr	r1, [r7, #8]
 800edfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800edfc:	f000 f91e 	bl	800f03c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee02:	1e5a      	subs	r2, r3, #1
 800ee04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee06:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ee08:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ee0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee10:	d112      	bne.n	800ee38 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d016      	beq.n	800ee48 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee1c:	3310      	adds	r3, #16
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f000 ff5c 	bl	800fcdc <xTaskRemoveFromEventList>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00e      	beq.n	800ee48 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d00b      	beq.n	800ee48 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	e007      	b.n	800ee48 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ee38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	b25a      	sxtb	r2, r3
 800ee42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee4c:	e001      	b.n	800ee52 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	f383 8811 	msr	BASEPRI, r3
}
 800ee5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3738      	adds	r7, #56	@ 0x38
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d10d      	bne.n	800ee92 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800ee76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee7a:	b672      	cpsid	i
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	b662      	cpsie	i
 800ee8a:	60bb      	str	r3, [r7, #8]
}
 800ee8c:	bf00      	nop
 800ee8e:	bf00      	nop
 800ee90:	e7fd      	b.n	800ee8e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800ee92:	f001 ff9b 	bl	8010dcc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee9a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ee9c:	f001 ffcc 	bl	8010e38 <vPortExitCritical>

	return uxReturn;
 800eea0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800eeaa:	b480      	push	{r7}
 800eeac:	b087      	sub	sp, #28
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d10d      	bne.n	800eed8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec0:	b672      	cpsid	i
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	b662      	cpsie	i
 800eed0:	60fb      	str	r3, [r7, #12]
}
 800eed2:	bf00      	nop
 800eed4:	bf00      	nop
 800eed6:	e7fd      	b.n	800eed4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eedc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800eede:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800eee0:	4618      	mov	r0, r3
 800eee2:	371c      	adds	r7, #28
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d10d      	bne.n	800ef1a <vQueueDelete+0x2e>
	__asm volatile
 800eefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef02:	b672      	cpsid	i
 800ef04:	f383 8811 	msr	BASEPRI, r3
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	b662      	cpsie	i
 800ef12:	60bb      	str	r3, [r7, #8]
}
 800ef14:	bf00      	nop
 800ef16:	bf00      	nop
 800ef18:	e7fd      	b.n	800ef16 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f000 f95e 	bl	800f1dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d102      	bne.n	800ef30 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f002 f94e 	bl	80111cc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ef30:	bf00      	nop
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d006      	beq.n	800ef56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ef52:	60fb      	str	r3, [r7, #12]
 800ef54:	e001      	b.n	800ef5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ef56:	2300      	movs	r3, #0
 800ef58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
	}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef74:	2300      	movs	r3, #0
 800ef76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10d      	bne.n	800efa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d14d      	bne.n	800f02a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f001 f90a 	bl	80101ac <xTaskPriorityDisinherit>
 800ef98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	609a      	str	r2, [r3, #8]
 800efa0:	e043      	b.n	800f02a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d119      	bne.n	800efdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6858      	ldr	r0, [r3, #4]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efb0:	461a      	mov	r2, r3
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	f012 fcb9 	bl	802192a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	685a      	ldr	r2, [r3, #4]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efc0:	441a      	add	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d32b      	bcc.n	800f02a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	605a      	str	r2, [r3, #4]
 800efda:	e026      	b.n	800f02a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	68d8      	ldr	r0, [r3, #12]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efe4:	461a      	mov	r2, r3
 800efe6:	68b9      	ldr	r1, [r7, #8]
 800efe8:	f012 fc9f 	bl	802192a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	68da      	ldr	r2, [r3, #12]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eff4:	425b      	negs	r3, r3
 800eff6:	441a      	add	r2, r3
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	429a      	cmp	r2, r3
 800f006:	d207      	bcs.n	800f018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	689a      	ldr	r2, [r3, #8]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f010:	425b      	negs	r3, r3
 800f012:	441a      	add	r2, r3
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2b02      	cmp	r3, #2
 800f01c:	d105      	bne.n	800f02a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	3b01      	subs	r3, #1
 800f028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	1c5a      	adds	r2, r3, #1
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f032:	697b      	ldr	r3, [r7, #20]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d018      	beq.n	800f080 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68da      	ldr	r2, [r3, #12]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f056:	441a      	add	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	68da      	ldr	r2, [r3, #12]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	429a      	cmp	r2, r3
 800f066:	d303      	bcc.n	800f070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	68d9      	ldr	r1, [r3, #12]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f078:	461a      	mov	r2, r3
 800f07a:	6838      	ldr	r0, [r7, #0]
 800f07c:	f012 fc55 	bl	802192a <memcpy>
	}
}
 800f080:	bf00      	nop
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f090:	f001 fe9c 	bl	8010dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f09a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f09c:	e011      	b.n	800f0c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d012      	beq.n	800f0cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	3324      	adds	r3, #36	@ 0x24
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f000 fe16 	bl	800fcdc <xTaskRemoveFromEventList>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f0b6:	f000 ff5d 	bl	800ff74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
 800f0bc:	3b01      	subs	r3, #1
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	dce9      	bgt.n	800f09e <prvUnlockQueue+0x16>
 800f0ca:	e000      	b.n	800f0ce <prvUnlockQueue+0x46>
					break;
 800f0cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	22ff      	movs	r2, #255	@ 0xff
 800f0d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f0d6:	f001 feaf 	bl	8010e38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f0da:	f001 fe77 	bl	8010dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0e6:	e011      	b.n	800f10c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d012      	beq.n	800f116 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3310      	adds	r3, #16
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 fdf1 	bl	800fcdc <xTaskRemoveFromEventList>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f100:	f000 ff38 	bl	800ff74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f104:	7bbb      	ldrb	r3, [r7, #14]
 800f106:	3b01      	subs	r3, #1
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f10c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f110:	2b00      	cmp	r3, #0
 800f112:	dce9      	bgt.n	800f0e8 <prvUnlockQueue+0x60>
 800f114:	e000      	b.n	800f118 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f116:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	22ff      	movs	r2, #255	@ 0xff
 800f11c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f120:	f001 fe8a 	bl	8010e38 <vPortExitCritical>
}
 800f124:	bf00      	nop
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f134:	f001 fe4a 	bl	8010dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f140:	2301      	movs	r3, #1
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	e001      	b.n	800f14a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f146:	2300      	movs	r3, #0
 800f148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f14a:	f001 fe75 	bl	8010e38 <vPortExitCritical>

	return xReturn;
 800f14e:	68fb      	ldr	r3, [r7, #12]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f160:	f001 fe34 	bl	8010dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d102      	bne.n	800f176 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f170:	2301      	movs	r3, #1
 800f172:	60fb      	str	r3, [r7, #12]
 800f174:	e001      	b.n	800f17a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f176:	2300      	movs	r3, #0
 800f178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f17a:	f001 fe5d 	bl	8010e38 <vPortExitCritical>

	return xReturn;
 800f17e:	68fb      	ldr	r3, [r7, #12]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
 800f196:	e014      	b.n	800f1c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f198:	4a0f      	ldr	r2, [pc, #60]	@ (800f1d8 <vQueueAddToRegistry+0x50>)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d10b      	bne.n	800f1bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f1a4:	490c      	ldr	r1, [pc, #48]	@ (800f1d8 <vQueueAddToRegistry+0x50>)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	683a      	ldr	r2, [r7, #0]
 800f1aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f1ae:	4a0a      	ldr	r2, [pc, #40]	@ (800f1d8 <vQueueAddToRegistry+0x50>)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	00db      	lsls	r3, r3, #3
 800f1b4:	4413      	add	r3, r2
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f1ba:	e006      	b.n	800f1ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	60fb      	str	r3, [r7, #12]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b0b      	cmp	r3, #11
 800f1c6:	d9e7      	bls.n	800f198 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f1c8:	bf00      	nop
 800f1ca:	bf00      	nop
 800f1cc:	3714      	adds	r7, #20
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d4:	4770      	bx	lr
 800f1d6:	bf00      	nop
 800f1d8:	2000ea44 	.word	0x2000ea44

0800f1dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	60fb      	str	r3, [r7, #12]
 800f1e8:	e016      	b.n	800f218 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f1ea:	4a10      	ldr	r2, [pc, #64]	@ (800f22c <vQueueUnregisterQueue+0x50>)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	00db      	lsls	r3, r3, #3
 800f1f0:	4413      	add	r3, r2
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d10b      	bne.n	800f212 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f1fa:	4a0c      	ldr	r2, [pc, #48]	@ (800f22c <vQueueUnregisterQueue+0x50>)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2100      	movs	r1, #0
 800f200:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f204:	4a09      	ldr	r2, [pc, #36]	@ (800f22c <vQueueUnregisterQueue+0x50>)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	4413      	add	r3, r2
 800f20c:	2200      	movs	r2, #0
 800f20e:	605a      	str	r2, [r3, #4]
				break;
 800f210:	e006      	b.n	800f220 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	3301      	adds	r3, #1
 800f216:	60fb      	str	r3, [r7, #12]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2b0b      	cmp	r3, #11
 800f21c:	d9e5      	bls.n	800f1ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f21e:	bf00      	nop
 800f220:	bf00      	nop
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	2000ea44 	.word	0x2000ea44

0800f230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f240:	f001 fdc4 	bl	8010dcc <vPortEnterCritical>
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f24a:	b25b      	sxtb	r3, r3
 800f24c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f250:	d103      	bne.n	800f25a <vQueueWaitForMessageRestricted+0x2a>
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f260:	b25b      	sxtb	r3, r3
 800f262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f266:	d103      	bne.n	800f270 <vQueueWaitForMessageRestricted+0x40>
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f270:	f001 fde2 	bl	8010e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d106      	bne.n	800f28a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	3324      	adds	r3, #36	@ 0x24
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	68b9      	ldr	r1, [r7, #8]
 800f284:	4618      	mov	r0, r3
 800f286:	f000 fcfb 	bl	800fc80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f28a:	6978      	ldr	r0, [r7, #20]
 800f28c:	f7ff fefc 	bl	800f088 <prvUnlockQueue>
	}
 800f290:	bf00      	nop
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b08e      	sub	sp, #56	@ 0x38
 800f29c:	af04      	add	r7, sp, #16
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
 800f2a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d10d      	bne.n	800f2c8 <xTaskCreateStatic+0x30>
	__asm volatile
 800f2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b0:	b672      	cpsid	i
 800f2b2:	f383 8811 	msr	BASEPRI, r3
 800f2b6:	f3bf 8f6f 	isb	sy
 800f2ba:	f3bf 8f4f 	dsb	sy
 800f2be:	b662      	cpsie	i
 800f2c0:	623b      	str	r3, [r7, #32]
}
 800f2c2:	bf00      	nop
 800f2c4:	bf00      	nop
 800f2c6:	e7fd      	b.n	800f2c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d10d      	bne.n	800f2ea <xTaskCreateStatic+0x52>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d2:	b672      	cpsid	i
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	b662      	cpsie	i
 800f2e2:	61fb      	str	r3, [r7, #28]
}
 800f2e4:	bf00      	nop
 800f2e6:	bf00      	nop
 800f2e8:	e7fd      	b.n	800f2e6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f2ea:	23a8      	movs	r3, #168	@ 0xa8
 800f2ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	2ba8      	cmp	r3, #168	@ 0xa8
 800f2f2:	d00d      	beq.n	800f310 <xTaskCreateStatic+0x78>
	__asm volatile
 800f2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f8:	b672      	cpsid	i
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	b662      	cpsie	i
 800f308:	61bb      	str	r3, [r7, #24]
}
 800f30a:	bf00      	nop
 800f30c:	bf00      	nop
 800f30e:	e7fd      	b.n	800f30c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f310:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f314:	2b00      	cmp	r3, #0
 800f316:	d01e      	beq.n	800f356 <xTaskCreateStatic+0xbe>
 800f318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d01b      	beq.n	800f356 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f320:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f326:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f32a:	2202      	movs	r2, #2
 800f32c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f330:	2300      	movs	r3, #0
 800f332:	9303      	str	r3, [sp, #12]
 800f334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f336:	9302      	str	r3, [sp, #8]
 800f338:	f107 0314 	add.w	r3, r7, #20
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	68b9      	ldr	r1, [r7, #8]
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f000 f851 	bl	800f3f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f34e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f350:	f000 f8f8 	bl	800f544 <prvAddNewTaskToReadyList>
 800f354:	e001      	b.n	800f35a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f356:	2300      	movs	r3, #0
 800f358:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f35a:	697b      	ldr	r3, [r7, #20]
	}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3728      	adds	r7, #40	@ 0x28
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08c      	sub	sp, #48	@ 0x30
 800f368:	af04      	add	r7, sp, #16
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	603b      	str	r3, [r7, #0]
 800f370:	4613      	mov	r3, r2
 800f372:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f374:	88fb      	ldrh	r3, [r7, #6]
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4618      	mov	r0, r3
 800f37a:	f001 fe55 	bl	8011028 <pvPortMalloc>
 800f37e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00e      	beq.n	800f3a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f386:	20a8      	movs	r0, #168	@ 0xa8
 800f388:	f001 fe4e 	bl	8011028 <pvPortMalloc>
 800f38c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d003      	beq.n	800f39c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	631a      	str	r2, [r3, #48]	@ 0x30
 800f39a:	e005      	b.n	800f3a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f39c:	6978      	ldr	r0, [r7, #20]
 800f39e:	f001 ff15 	bl	80111cc <vPortFree>
 800f3a2:	e001      	b.n	800f3a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d017      	beq.n	800f3de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f3b6:	88fa      	ldrh	r2, [r7, #6]
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	9303      	str	r3, [sp, #12]
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	9302      	str	r3, [sp, #8]
 800f3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c2:	9301      	str	r3, [sp, #4]
 800f3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	68b9      	ldr	r1, [r7, #8]
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f000 f80f 	bl	800f3f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3d2:	69f8      	ldr	r0, [r7, #28]
 800f3d4:	f000 f8b6 	bl	800f544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	61bb      	str	r3, [r7, #24]
 800f3dc:	e002      	b.n	800f3e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f3de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f3e4:	69bb      	ldr	r3, [r7, #24]
	}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3720      	adds	r7, #32
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b088      	sub	sp, #32
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	607a      	str	r2, [r7, #4]
 800f3fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f400:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	461a      	mov	r2, r3
 800f408:	21a5      	movs	r1, #165	@ 0xa5
 800f40a:	f012 fa19 	bl	8021840 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f412:	6879      	ldr	r1, [r7, #4]
 800f414:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f418:	440b      	add	r3, r1
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4413      	add	r3, r2
 800f41e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	f023 0307 	bic.w	r3, r3, #7
 800f426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	f003 0307 	and.w	r3, r3, #7
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00d      	beq.n	800f44e <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f436:	b672      	cpsid	i
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	b662      	cpsie	i
 800f446:	617b      	str	r3, [r7, #20]
}
 800f448:	bf00      	nop
 800f44a:	bf00      	nop
 800f44c:	e7fd      	b.n	800f44a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d01f      	beq.n	800f494 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f454:	2300      	movs	r3, #0
 800f456:	61fb      	str	r3, [r7, #28]
 800f458:	e012      	b.n	800f480 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	4413      	add	r3, r2
 800f460:	7819      	ldrb	r1, [r3, #0]
 800f462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	4413      	add	r3, r2
 800f468:	3334      	adds	r3, #52	@ 0x34
 800f46a:	460a      	mov	r2, r1
 800f46c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	4413      	add	r3, r2
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d006      	beq.n	800f488 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	3301      	adds	r3, #1
 800f47e:	61fb      	str	r3, [r7, #28]
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	2b0f      	cmp	r3, #15
 800f484:	d9e9      	bls.n	800f45a <prvInitialiseNewTask+0x6a>
 800f486:	e000      	b.n	800f48a <prvInitialiseNewTask+0x9a>
			{
				break;
 800f488:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f492:	e003      	b.n	800f49c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f496:	2200      	movs	r2, #0
 800f498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49e:	2b37      	cmp	r3, #55	@ 0x37
 800f4a0:	d901      	bls.n	800f4a6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f4a2:	2337      	movs	r3, #55	@ 0x37
 800f4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fe fce5 	bl	800de8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c4:	3318      	adds	r3, #24
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fe fce0 	bl	800de8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f4:	3354      	adds	r3, #84	@ 0x54
 800f4f6:	224c      	movs	r2, #76	@ 0x4c
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f012 f9a0 	bl	8021840 <memset>
 800f500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f502:	4a0d      	ldr	r2, [pc, #52]	@ (800f538 <prvInitialiseNewTask+0x148>)
 800f504:	659a      	str	r2, [r3, #88]	@ 0x58
 800f506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f508:	4a0c      	ldr	r2, [pc, #48]	@ (800f53c <prvInitialiseNewTask+0x14c>)
 800f50a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f50e:	4a0c      	ldr	r2, [pc, #48]	@ (800f540 <prvInitialiseNewTask+0x150>)
 800f510:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f512:	683a      	ldr	r2, [r7, #0]
 800f514:	68f9      	ldr	r1, [r7, #12]
 800f516:	69b8      	ldr	r0, [r7, #24]
 800f518:	f001 fb4c 	bl	8010bb4 <pxPortInitialiseStack>
 800f51c:	4602      	mov	r2, r0
 800f51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f520:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f524:	2b00      	cmp	r3, #0
 800f526:	d002      	beq.n	800f52e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f52a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f52c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f52e:	bf00      	nop
 800f530:	3720      	adds	r7, #32
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	2002d804 	.word	0x2002d804
 800f53c:	2002d86c 	.word	0x2002d86c
 800f540:	2002d8d4 	.word	0x2002d8d4

0800f544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f54c:	f001 fc3e 	bl	8010dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f550:	4b2d      	ldr	r3, [pc, #180]	@ (800f608 <prvAddNewTaskToReadyList+0xc4>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	3301      	adds	r3, #1
 800f556:	4a2c      	ldr	r2, [pc, #176]	@ (800f608 <prvAddNewTaskToReadyList+0xc4>)
 800f558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f55a:	4b2c      	ldr	r3, [pc, #176]	@ (800f60c <prvAddNewTaskToReadyList+0xc8>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f562:	4a2a      	ldr	r2, [pc, #168]	@ (800f60c <prvAddNewTaskToReadyList+0xc8>)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f568:	4b27      	ldr	r3, [pc, #156]	@ (800f608 <prvAddNewTaskToReadyList+0xc4>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d110      	bne.n	800f592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f570:	f000 fd24 	bl	800ffbc <prvInitialiseTaskLists>
 800f574:	e00d      	b.n	800f592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f576:	4b26      	ldr	r3, [pc, #152]	@ (800f610 <prvAddNewTaskToReadyList+0xcc>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d109      	bne.n	800f592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f57e:	4b23      	ldr	r3, [pc, #140]	@ (800f60c <prvAddNewTaskToReadyList+0xc8>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f588:	429a      	cmp	r2, r3
 800f58a:	d802      	bhi.n	800f592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f58c:	4a1f      	ldr	r2, [pc, #124]	@ (800f60c <prvAddNewTaskToReadyList+0xc8>)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f592:	4b20      	ldr	r3, [pc, #128]	@ (800f614 <prvAddNewTaskToReadyList+0xd0>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3301      	adds	r3, #1
 800f598:	4a1e      	ldr	r2, [pc, #120]	@ (800f614 <prvAddNewTaskToReadyList+0xd0>)
 800f59a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f59c:	4b1d      	ldr	r3, [pc, #116]	@ (800f614 <prvAddNewTaskToReadyList+0xd0>)
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a8:	4b1b      	ldr	r3, [pc, #108]	@ (800f618 <prvAddNewTaskToReadyList+0xd4>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d903      	bls.n	800f5b8 <prvAddNewTaskToReadyList+0x74>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b4:	4a18      	ldr	r2, [pc, #96]	@ (800f618 <prvAddNewTaskToReadyList+0xd4>)
 800f5b6:	6013      	str	r3, [r2, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5bc:	4613      	mov	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4a15      	ldr	r2, [pc, #84]	@ (800f61c <prvAddNewTaskToReadyList+0xd8>)
 800f5c6:	441a      	add	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	4610      	mov	r0, r2
 800f5d0:	f7fe fc69 	bl	800dea6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f5d4:	f001 fc30 	bl	8010e38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f5d8:	4b0d      	ldr	r3, [pc, #52]	@ (800f610 <prvAddNewTaskToReadyList+0xcc>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00e      	beq.n	800f5fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f5e0:	4b0a      	ldr	r3, [pc, #40]	@ (800f60c <prvAddNewTaskToReadyList+0xc8>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d207      	bcs.n	800f5fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f620 <prvAddNewTaskToReadyList+0xdc>)
 800f5f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5f4:	601a      	str	r2, [r3, #0]
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5fe:	bf00      	nop
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	2000ef60 	.word	0x2000ef60
 800f60c:	2000eaa4 	.word	0x2000eaa4
 800f610:	2000ef6c 	.word	0x2000ef6c
 800f614:	2000ef7c 	.word	0x2000ef7c
 800f618:	2000ef68 	.word	0x2000ef68
 800f61c:	2000eaa8 	.word	0x2000eaa8
 800f620:	e000ed04 	.word	0xe000ed04

0800f624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f62c:	2300      	movs	r3, #0
 800f62e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d01a      	beq.n	800f66c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f636:	4b15      	ldr	r3, [pc, #84]	@ (800f68c <vTaskDelay+0x68>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00d      	beq.n	800f65a <vTaskDelay+0x36>
	__asm volatile
 800f63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f642:	b672      	cpsid	i
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	b662      	cpsie	i
 800f652:	60bb      	str	r3, [r7, #8]
}
 800f654:	bf00      	nop
 800f656:	bf00      	nop
 800f658:	e7fd      	b.n	800f656 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f65a:	f000 f88f 	bl	800f77c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f65e:	2100      	movs	r1, #0
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fecb 	bl	80103fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f666:	f000 f897 	bl	800f798 <xTaskResumeAll>
 800f66a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d107      	bne.n	800f682 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f672:	4b07      	ldr	r3, [pc, #28]	@ (800f690 <vTaskDelay+0x6c>)
 800f674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f678:	601a      	str	r2, [r3, #0]
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f682:	bf00      	nop
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	2000ef88 	.word	0x2000ef88
 800f690:	e000ed04 	.word	0xe000ed04

0800f694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b08a      	sub	sp, #40	@ 0x28
 800f698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f69a:	2300      	movs	r3, #0
 800f69c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f6a2:	463a      	mov	r2, r7
 800f6a4:	1d39      	adds	r1, r7, #4
 800f6a6:	f107 0308 	add.w	r3, r7, #8
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fe f994 	bl	800d9d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f6b0:	6839      	ldr	r1, [r7, #0]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	68ba      	ldr	r2, [r7, #8]
 800f6b6:	9202      	str	r2, [sp, #8]
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	2300      	movs	r3, #0
 800f6c0:	460a      	mov	r2, r1
 800f6c2:	4926      	ldr	r1, [pc, #152]	@ (800f75c <vTaskStartScheduler+0xc8>)
 800f6c4:	4826      	ldr	r0, [pc, #152]	@ (800f760 <vTaskStartScheduler+0xcc>)
 800f6c6:	f7ff fde7 	bl	800f298 <xTaskCreateStatic>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	4a25      	ldr	r2, [pc, #148]	@ (800f764 <vTaskStartScheduler+0xd0>)
 800f6ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f6d0:	4b24      	ldr	r3, [pc, #144]	@ (800f764 <vTaskStartScheduler+0xd0>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	617b      	str	r3, [r7, #20]
 800f6dc:	e001      	b.n	800f6e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d102      	bne.n	800f6ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f6e8:	f000 fedc 	bl	80104a4 <xTimerCreateTimerTask>
 800f6ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d11d      	bne.n	800f730 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f8:	b672      	cpsid	i
 800f6fa:	f383 8811 	msr	BASEPRI, r3
 800f6fe:	f3bf 8f6f 	isb	sy
 800f702:	f3bf 8f4f 	dsb	sy
 800f706:	b662      	cpsie	i
 800f708:	613b      	str	r3, [r7, #16]
}
 800f70a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f70c:	4b16      	ldr	r3, [pc, #88]	@ (800f768 <vTaskStartScheduler+0xd4>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	3354      	adds	r3, #84	@ 0x54
 800f712:	4a16      	ldr	r2, [pc, #88]	@ (800f76c <vTaskStartScheduler+0xd8>)
 800f714:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f716:	4b16      	ldr	r3, [pc, #88]	@ (800f770 <vTaskStartScheduler+0xdc>)
 800f718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f71c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f71e:	4b15      	ldr	r3, [pc, #84]	@ (800f774 <vTaskStartScheduler+0xe0>)
 800f720:	2201      	movs	r2, #1
 800f722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f724:	4b14      	ldr	r3, [pc, #80]	@ (800f778 <vTaskStartScheduler+0xe4>)
 800f726:	2200      	movs	r2, #0
 800f728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f72a:	f001 fad1 	bl	8010cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f72e:	e011      	b.n	800f754 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f736:	d10d      	bne.n	800f754 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73c:	b672      	cpsid	i
 800f73e:	f383 8811 	msr	BASEPRI, r3
 800f742:	f3bf 8f6f 	isb	sy
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	b662      	cpsie	i
 800f74c:	60fb      	str	r3, [r7, #12]
}
 800f74e:	bf00      	nop
 800f750:	bf00      	nop
 800f752:	e7fd      	b.n	800f750 <vTaskStartScheduler+0xbc>
}
 800f754:	bf00      	nop
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	080227d8 	.word	0x080227d8
 800f760:	0800ff8d 	.word	0x0800ff8d
 800f764:	2000ef84 	.word	0x2000ef84
 800f768:	2000eaa4 	.word	0x2000eaa4
 800f76c:	20000080 	.word	0x20000080
 800f770:	2000ef80 	.word	0x2000ef80
 800f774:	2000ef6c 	.word	0x2000ef6c
 800f778:	2000ef64 	.word	0x2000ef64

0800f77c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f77c:	b480      	push	{r7}
 800f77e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f780:	4b04      	ldr	r3, [pc, #16]	@ (800f794 <vTaskSuspendAll+0x18>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	3301      	adds	r3, #1
 800f786:	4a03      	ldr	r2, [pc, #12]	@ (800f794 <vTaskSuspendAll+0x18>)
 800f788:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f78a:	bf00      	nop
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr
 800f794:	2000ef88 	.word	0x2000ef88

0800f798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7a6:	4b43      	ldr	r3, [pc, #268]	@ (800f8b4 <xTaskResumeAll+0x11c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d10d      	bne.n	800f7ca <xTaskResumeAll+0x32>
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b2:	b672      	cpsid	i
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	b662      	cpsie	i
 800f7c2:	603b      	str	r3, [r7, #0]
}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	e7fd      	b.n	800f7c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7ca:	f001 faff 	bl	8010dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f7ce:	4b39      	ldr	r3, [pc, #228]	@ (800f8b4 <xTaskResumeAll+0x11c>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	4a37      	ldr	r2, [pc, #220]	@ (800f8b4 <xTaskResumeAll+0x11c>)
 800f7d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7d8:	4b36      	ldr	r3, [pc, #216]	@ (800f8b4 <xTaskResumeAll+0x11c>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d162      	bne.n	800f8a6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7e0:	4b35      	ldr	r3, [pc, #212]	@ (800f8b8 <xTaskResumeAll+0x120>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d05e      	beq.n	800f8a6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7e8:	e02f      	b.n	800f84a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ea:	4b34      	ldr	r3, [pc, #208]	@ (800f8bc <xTaskResumeAll+0x124>)
 800f7ec:	68db      	ldr	r3, [r3, #12]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	3318      	adds	r3, #24
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fe fbb2 	bl	800df60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	3304      	adds	r3, #4
 800f800:	4618      	mov	r0, r3
 800f802:	f7fe fbad 	bl	800df60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f80a:	4b2d      	ldr	r3, [pc, #180]	@ (800f8c0 <xTaskResumeAll+0x128>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d903      	bls.n	800f81a <xTaskResumeAll+0x82>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f816:	4a2a      	ldr	r2, [pc, #168]	@ (800f8c0 <xTaskResumeAll+0x128>)
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f81e:	4613      	mov	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4a27      	ldr	r2, [pc, #156]	@ (800f8c4 <xTaskResumeAll+0x12c>)
 800f828:	441a      	add	r2, r3
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	3304      	adds	r3, #4
 800f82e:	4619      	mov	r1, r3
 800f830:	4610      	mov	r0, r2
 800f832:	f7fe fb38 	bl	800dea6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f83a:	4b23      	ldr	r3, [pc, #140]	@ (800f8c8 <xTaskResumeAll+0x130>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f840:	429a      	cmp	r2, r3
 800f842:	d302      	bcc.n	800f84a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f844:	4b21      	ldr	r3, [pc, #132]	@ (800f8cc <xTaskResumeAll+0x134>)
 800f846:	2201      	movs	r2, #1
 800f848:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f84a:	4b1c      	ldr	r3, [pc, #112]	@ (800f8bc <xTaskResumeAll+0x124>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1cb      	bne.n	800f7ea <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f858:	f000 fbf2 	bl	8010040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f85c:	4b1c      	ldr	r3, [pc, #112]	@ (800f8d0 <xTaskResumeAll+0x138>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d010      	beq.n	800f88a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f868:	f000 f858 	bl	800f91c <xTaskIncrementTick>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d002      	beq.n	800f878 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f872:	4b16      	ldr	r3, [pc, #88]	@ (800f8cc <xTaskResumeAll+0x134>)
 800f874:	2201      	movs	r2, #1
 800f876:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1f1      	bne.n	800f868 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f884:	4b12      	ldr	r3, [pc, #72]	@ (800f8d0 <xTaskResumeAll+0x138>)
 800f886:	2200      	movs	r2, #0
 800f888:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f88a:	4b10      	ldr	r3, [pc, #64]	@ (800f8cc <xTaskResumeAll+0x134>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d009      	beq.n	800f8a6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f892:	2301      	movs	r3, #1
 800f894:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f896:	4b0f      	ldr	r3, [pc, #60]	@ (800f8d4 <xTaskResumeAll+0x13c>)
 800f898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f89c:	601a      	str	r2, [r3, #0]
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8a6:	f001 fac7 	bl	8010e38 <vPortExitCritical>

	return xAlreadyYielded;
 800f8aa:	68bb      	ldr	r3, [r7, #8]
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	2000ef88 	.word	0x2000ef88
 800f8b8:	2000ef60 	.word	0x2000ef60
 800f8bc:	2000ef38 	.word	0x2000ef38
 800f8c0:	2000ef68 	.word	0x2000ef68
 800f8c4:	2000eaa8 	.word	0x2000eaa8
 800f8c8:	2000eaa4 	.word	0x2000eaa4
 800f8cc:	2000ef74 	.word	0x2000ef74
 800f8d0:	2000ef70 	.word	0x2000ef70
 800f8d4:	e000ed04 	.word	0xe000ed04

0800f8d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f8de:	4b05      	ldr	r3, [pc, #20]	@ (800f8f4 <xTaskGetTickCount+0x1c>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f8e4:	687b      	ldr	r3, [r7, #4]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	2000ef64 	.word	0x2000ef64

0800f8f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8fe:	f001 fb4d 	bl	8010f9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f902:	2300      	movs	r3, #0
 800f904:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f906:	4b04      	ldr	r3, [pc, #16]	@ (800f918 <xTaskGetTickCountFromISR+0x20>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f90c:	683b      	ldr	r3, [r7, #0]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	2000ef64 	.word	0x2000ef64

0800f91c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b086      	sub	sp, #24
 800f920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f922:	2300      	movs	r3, #0
 800f924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f926:	4b50      	ldr	r3, [pc, #320]	@ (800fa68 <xTaskIncrementTick+0x14c>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	f040 808c 	bne.w	800fa48 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f930:	4b4e      	ldr	r3, [pc, #312]	@ (800fa6c <xTaskIncrementTick+0x150>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	3301      	adds	r3, #1
 800f936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f938:	4a4c      	ldr	r2, [pc, #304]	@ (800fa6c <xTaskIncrementTick+0x150>)
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d123      	bne.n	800f98c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f944:	4b4a      	ldr	r3, [pc, #296]	@ (800fa70 <xTaskIncrementTick+0x154>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00d      	beq.n	800f96a <xTaskIncrementTick+0x4e>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f952:	b672      	cpsid	i
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	b662      	cpsie	i
 800f962:	603b      	str	r3, [r7, #0]
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop
 800f968:	e7fd      	b.n	800f966 <xTaskIncrementTick+0x4a>
 800f96a:	4b41      	ldr	r3, [pc, #260]	@ (800fa70 <xTaskIncrementTick+0x154>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	4b40      	ldr	r3, [pc, #256]	@ (800fa74 <xTaskIncrementTick+0x158>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a3e      	ldr	r2, [pc, #248]	@ (800fa70 <xTaskIncrementTick+0x154>)
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	4a3e      	ldr	r2, [pc, #248]	@ (800fa74 <xTaskIncrementTick+0x158>)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6013      	str	r3, [r2, #0]
 800f97e:	4b3e      	ldr	r3, [pc, #248]	@ (800fa78 <xTaskIncrementTick+0x15c>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	4a3c      	ldr	r2, [pc, #240]	@ (800fa78 <xTaskIncrementTick+0x15c>)
 800f986:	6013      	str	r3, [r2, #0]
 800f988:	f000 fb5a 	bl	8010040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f98c:	4b3b      	ldr	r3, [pc, #236]	@ (800fa7c <xTaskIncrementTick+0x160>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	693a      	ldr	r2, [r7, #16]
 800f992:	429a      	cmp	r2, r3
 800f994:	d349      	bcc.n	800fa2a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f996:	4b36      	ldr	r3, [pc, #216]	@ (800fa70 <xTaskIncrementTick+0x154>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d104      	bne.n	800f9aa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9a0:	4b36      	ldr	r3, [pc, #216]	@ (800fa7c <xTaskIncrementTick+0x160>)
 800f9a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9a6:	601a      	str	r2, [r3, #0]
					break;
 800f9a8:	e03f      	b.n	800fa2a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9aa:	4b31      	ldr	r3, [pc, #196]	@ (800fa70 <xTaskIncrementTick+0x154>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9ba:	693a      	ldr	r2, [r7, #16]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d203      	bcs.n	800f9ca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9c2:	4a2e      	ldr	r2, [pc, #184]	@ (800fa7c <xTaskIncrementTick+0x160>)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9c8:	e02f      	b.n	800fa2a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	3304      	adds	r3, #4
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fe fac6 	bl	800df60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d004      	beq.n	800f9e6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	3318      	adds	r3, #24
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7fe fabd 	bl	800df60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9ea:	4b25      	ldr	r3, [pc, #148]	@ (800fa80 <xTaskIncrementTick+0x164>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d903      	bls.n	800f9fa <xTaskIncrementTick+0xde>
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9f6:	4a22      	ldr	r2, [pc, #136]	@ (800fa80 <xTaskIncrementTick+0x164>)
 800f9f8:	6013      	str	r3, [r2, #0]
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9fe:	4613      	mov	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	4a1f      	ldr	r2, [pc, #124]	@ (800fa84 <xTaskIncrementTick+0x168>)
 800fa08:	441a      	add	r2, r3
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	3304      	adds	r3, #4
 800fa0e:	4619      	mov	r1, r3
 800fa10:	4610      	mov	r0, r2
 800fa12:	f7fe fa48 	bl	800dea6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa1a:	4b1b      	ldr	r3, [pc, #108]	@ (800fa88 <xTaskIncrementTick+0x16c>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d3b8      	bcc.n	800f996 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800fa24:	2301      	movs	r3, #1
 800fa26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa28:	e7b5      	b.n	800f996 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa2a:	4b17      	ldr	r3, [pc, #92]	@ (800fa88 <xTaskIncrementTick+0x16c>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa30:	4914      	ldr	r1, [pc, #80]	@ (800fa84 <xTaskIncrementTick+0x168>)
 800fa32:	4613      	mov	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	4413      	add	r3, r2
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	440b      	add	r3, r1
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d907      	bls.n	800fa52 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800fa42:	2301      	movs	r3, #1
 800fa44:	617b      	str	r3, [r7, #20]
 800fa46:	e004      	b.n	800fa52 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fa48:	4b10      	ldr	r3, [pc, #64]	@ (800fa8c <xTaskIncrementTick+0x170>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	4a0f      	ldr	r2, [pc, #60]	@ (800fa8c <xTaskIncrementTick+0x170>)
 800fa50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fa52:	4b0f      	ldr	r3, [pc, #60]	@ (800fa90 <xTaskIncrementTick+0x174>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d001      	beq.n	800fa5e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fa5e:	697b      	ldr	r3, [r7, #20]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	2000ef88 	.word	0x2000ef88
 800fa6c:	2000ef64 	.word	0x2000ef64
 800fa70:	2000ef30 	.word	0x2000ef30
 800fa74:	2000ef34 	.word	0x2000ef34
 800fa78:	2000ef78 	.word	0x2000ef78
 800fa7c:	2000ef80 	.word	0x2000ef80
 800fa80:	2000ef68 	.word	0x2000ef68
 800fa84:	2000eaa8 	.word	0x2000eaa8
 800fa88:	2000eaa4 	.word	0x2000eaa4
 800fa8c:	2000ef70 	.word	0x2000ef70
 800fa90:	2000ef74 	.word	0x2000ef74

0800fa94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa9a:	4b3e      	ldr	r3, [pc, #248]	@ (800fb94 <vTaskSwitchContext+0x100>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800faa2:	4b3d      	ldr	r3, [pc, #244]	@ (800fb98 <vTaskSwitchContext+0x104>)
 800faa4:	2201      	movs	r2, #1
 800faa6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800faa8:	e070      	b.n	800fb8c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800faaa:	4b3b      	ldr	r3, [pc, #236]	@ (800fb98 <vTaskSwitchContext+0x104>)
 800faac:	2200      	movs	r2, #0
 800faae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fab0:	4b3a      	ldr	r3, [pc, #232]	@ (800fb9c <vTaskSwitchContext+0x108>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fab6:	613b      	str	r3, [r7, #16]
 800fab8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800fabc:	60fb      	str	r3, [r7, #12]
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d111      	bne.n	800faec <vTaskSwitchContext+0x58>
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	3304      	adds	r3, #4
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d10b      	bne.n	800faec <vTaskSwitchContext+0x58>
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	3308      	adds	r3, #8
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d105      	bne.n	800faec <vTaskSwitchContext+0x58>
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	330c      	adds	r3, #12
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d008      	beq.n	800fafe <vTaskSwitchContext+0x6a>
 800faec:	4b2b      	ldr	r3, [pc, #172]	@ (800fb9c <vTaskSwitchContext+0x108>)
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	4b2a      	ldr	r3, [pc, #168]	@ (800fb9c <vTaskSwitchContext+0x108>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	3334      	adds	r3, #52	@ 0x34
 800faf6:	4619      	mov	r1, r3
 800faf8:	4610      	mov	r0, r2
 800fafa:	f7f0 fef7 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fafe:	4b28      	ldr	r3, [pc, #160]	@ (800fba0 <vTaskSwitchContext+0x10c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	617b      	str	r3, [r7, #20]
 800fb04:	e013      	b.n	800fb2e <vTaskSwitchContext+0x9a>
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d10d      	bne.n	800fb28 <vTaskSwitchContext+0x94>
	__asm volatile
 800fb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb10:	b672      	cpsid	i
 800fb12:	f383 8811 	msr	BASEPRI, r3
 800fb16:	f3bf 8f6f 	isb	sy
 800fb1a:	f3bf 8f4f 	dsb	sy
 800fb1e:	b662      	cpsie	i
 800fb20:	607b      	str	r3, [r7, #4]
}
 800fb22:	bf00      	nop
 800fb24:	bf00      	nop
 800fb26:	e7fd      	b.n	800fb24 <vTaskSwitchContext+0x90>
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	3b01      	subs	r3, #1
 800fb2c:	617b      	str	r3, [r7, #20]
 800fb2e:	491d      	ldr	r1, [pc, #116]	@ (800fba4 <vTaskSwitchContext+0x110>)
 800fb30:	697a      	ldr	r2, [r7, #20]
 800fb32:	4613      	mov	r3, r2
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	4413      	add	r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	440b      	add	r3, r1
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d0e1      	beq.n	800fb06 <vTaskSwitchContext+0x72>
 800fb42:	697a      	ldr	r2, [r7, #20]
 800fb44:	4613      	mov	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4413      	add	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	4a15      	ldr	r2, [pc, #84]	@ (800fba4 <vTaskSwitchContext+0x110>)
 800fb4e:	4413      	add	r3, r2
 800fb50:	60bb      	str	r3, [r7, #8]
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	605a      	str	r2, [r3, #4]
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	685a      	ldr	r2, [r3, #4]
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	3308      	adds	r3, #8
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d104      	bne.n	800fb72 <vTaskSwitchContext+0xde>
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	685a      	ldr	r2, [r3, #4]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	605a      	str	r2, [r3, #4]
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	4a08      	ldr	r2, [pc, #32]	@ (800fb9c <vTaskSwitchContext+0x108>)
 800fb7a:	6013      	str	r3, [r2, #0]
 800fb7c:	4a08      	ldr	r2, [pc, #32]	@ (800fba0 <vTaskSwitchContext+0x10c>)
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb82:	4b06      	ldr	r3, [pc, #24]	@ (800fb9c <vTaskSwitchContext+0x108>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3354      	adds	r3, #84	@ 0x54
 800fb88:	4a07      	ldr	r2, [pc, #28]	@ (800fba8 <vTaskSwitchContext+0x114>)
 800fb8a:	6013      	str	r3, [r2, #0]
}
 800fb8c:	bf00      	nop
 800fb8e:	3718      	adds	r7, #24
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	2000ef88 	.word	0x2000ef88
 800fb98:	2000ef74 	.word	0x2000ef74
 800fb9c:	2000eaa4 	.word	0x2000eaa4
 800fba0:	2000ef68 	.word	0x2000ef68
 800fba4:	2000eaa8 	.word	0x2000eaa8
 800fba8:	20000080 	.word	0x20000080

0800fbac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b084      	sub	sp, #16
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10d      	bne.n	800fbd8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800fbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc0:	b672      	cpsid	i
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	b662      	cpsie	i
 800fbd0:	60fb      	str	r3, [r7, #12]
}
 800fbd2:	bf00      	nop
 800fbd4:	bf00      	nop
 800fbd6:	e7fd      	b.n	800fbd4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbd8:	4b07      	ldr	r3, [pc, #28]	@ (800fbf8 <vTaskPlaceOnEventList+0x4c>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	3318      	adds	r3, #24
 800fbde:	4619      	mov	r1, r3
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7fe f984 	bl	800deee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbe6:	2101      	movs	r1, #1
 800fbe8:	6838      	ldr	r0, [r7, #0]
 800fbea:	f000 fc07 	bl	80103fc <prvAddCurrentTaskToDelayedList>
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	2000eaa4 	.word	0x2000eaa4

0800fbfc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d10d      	bne.n	800fc2a <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc12:	b672      	cpsid	i
 800fc14:	f383 8811 	msr	BASEPRI, r3
 800fc18:	f3bf 8f6f 	isb	sy
 800fc1c:	f3bf 8f4f 	dsb	sy
 800fc20:	b662      	cpsie	i
 800fc22:	617b      	str	r3, [r7, #20]
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	e7fd      	b.n	800fc26 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fc2a:	4b13      	ldr	r3, [pc, #76]	@ (800fc78 <vTaskPlaceOnUnorderedEventList+0x7c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d10d      	bne.n	800fc4e <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 800fc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc36:	b672      	cpsid	i
 800fc38:	f383 8811 	msr	BASEPRI, r3
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	b662      	cpsie	i
 800fc46:	613b      	str	r3, [r7, #16]
}
 800fc48:	bf00      	nop
 800fc4a:	bf00      	nop
 800fc4c:	e7fd      	b.n	800fc4a <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fc4e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc7c <vTaskPlaceOnUnorderedEventList+0x80>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68ba      	ldr	r2, [r7, #8]
 800fc54:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800fc58:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc5a:	4b08      	ldr	r3, [pc, #32]	@ (800fc7c <vTaskPlaceOnUnorderedEventList+0x80>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	3318      	adds	r3, #24
 800fc60:	4619      	mov	r1, r3
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f7fe f91f 	bl	800dea6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fc68:	2101      	movs	r1, #1
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fbc6 	bl	80103fc <prvAddCurrentTaskToDelayedList>
}
 800fc70:	bf00      	nop
 800fc72:	3718      	adds	r7, #24
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	2000ef88 	.word	0x2000ef88
 800fc7c:	2000eaa4 	.word	0x2000eaa4

0800fc80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b086      	sub	sp, #24
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10d      	bne.n	800fcae <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800fc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc96:	b672      	cpsid	i
 800fc98:	f383 8811 	msr	BASEPRI, r3
 800fc9c:	f3bf 8f6f 	isb	sy
 800fca0:	f3bf 8f4f 	dsb	sy
 800fca4:	b662      	cpsie	i
 800fca6:	617b      	str	r3, [r7, #20]
}
 800fca8:	bf00      	nop
 800fcaa:	bf00      	nop
 800fcac:	e7fd      	b.n	800fcaa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fcae:	4b0a      	ldr	r3, [pc, #40]	@ (800fcd8 <vTaskPlaceOnEventListRestricted+0x58>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	3318      	adds	r3, #24
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f7fe f8f5 	bl	800dea6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d002      	beq.n	800fcc8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800fcc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fcc6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fcc8:	6879      	ldr	r1, [r7, #4]
 800fcca:	68b8      	ldr	r0, [r7, #8]
 800fccc:	f000 fb96 	bl	80103fc <prvAddCurrentTaskToDelayedList>
	}
 800fcd0:	bf00      	nop
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}
 800fcd8:	2000eaa4 	.word	0x2000eaa4

0800fcdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b086      	sub	sp, #24
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10d      	bne.n	800fd0e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800fcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf6:	b672      	cpsid	i
 800fcf8:	f383 8811 	msr	BASEPRI, r3
 800fcfc:	f3bf 8f6f 	isb	sy
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	b662      	cpsie	i
 800fd06:	60fb      	str	r3, [r7, #12]
}
 800fd08:	bf00      	nop
 800fd0a:	bf00      	nop
 800fd0c:	e7fd      	b.n	800fd0a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	3318      	adds	r3, #24
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fe f924 	bl	800df60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd18:	4b1d      	ldr	r3, [pc, #116]	@ (800fd90 <xTaskRemoveFromEventList+0xb4>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d11d      	bne.n	800fd5c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	3304      	adds	r3, #4
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7fe f91b 	bl	800df60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd2e:	4b19      	ldr	r3, [pc, #100]	@ (800fd94 <xTaskRemoveFromEventList+0xb8>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d903      	bls.n	800fd3e <xTaskRemoveFromEventList+0x62>
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd3a:	4a16      	ldr	r2, [pc, #88]	@ (800fd94 <xTaskRemoveFromEventList+0xb8>)
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd42:	4613      	mov	r3, r2
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	4413      	add	r3, r2
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	4a13      	ldr	r2, [pc, #76]	@ (800fd98 <xTaskRemoveFromEventList+0xbc>)
 800fd4c:	441a      	add	r2, r3
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	3304      	adds	r3, #4
 800fd52:	4619      	mov	r1, r3
 800fd54:	4610      	mov	r0, r2
 800fd56:	f7fe f8a6 	bl	800dea6 <vListInsertEnd>
 800fd5a:	e005      	b.n	800fd68 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	3318      	adds	r3, #24
 800fd60:	4619      	mov	r1, r3
 800fd62:	480e      	ldr	r0, [pc, #56]	@ (800fd9c <xTaskRemoveFromEventList+0xc0>)
 800fd64:	f7fe f89f 	bl	800dea6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd6c:	4b0c      	ldr	r3, [pc, #48]	@ (800fda0 <xTaskRemoveFromEventList+0xc4>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d905      	bls.n	800fd82 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fd76:	2301      	movs	r3, #1
 800fd78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fd7a:	4b0a      	ldr	r3, [pc, #40]	@ (800fda4 <xTaskRemoveFromEventList+0xc8>)
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	601a      	str	r2, [r3, #0]
 800fd80:	e001      	b.n	800fd86 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800fd82:	2300      	movs	r3, #0
 800fd84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fd86:	697b      	ldr	r3, [r7, #20]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3718      	adds	r7, #24
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	2000ef88 	.word	0x2000ef88
 800fd94:	2000ef68 	.word	0x2000ef68
 800fd98:	2000eaa8 	.word	0x2000eaa8
 800fd9c:	2000ef38 	.word	0x2000ef38
 800fda0:	2000eaa4 	.word	0x2000eaa4
 800fda4:	2000ef74 	.word	0x2000ef74

0800fda8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b086      	sub	sp, #24
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fdb2:	4b2c      	ldr	r3, [pc, #176]	@ (800fe64 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d10d      	bne.n	800fdd6 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 800fdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdbe:	b672      	cpsid	i
 800fdc0:	f383 8811 	msr	BASEPRI, r3
 800fdc4:	f3bf 8f6f 	isb	sy
 800fdc8:	f3bf 8f4f 	dsb	sy
 800fdcc:	b662      	cpsie	i
 800fdce:	613b      	str	r3, [r7, #16]
}
 800fdd0:	bf00      	nop
 800fdd2:	bf00      	nop
 800fdd4:	e7fd      	b.n	800fdd2 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10d      	bne.n	800fe08 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 800fdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdf0:	b672      	cpsid	i
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	b662      	cpsie	i
 800fe00:	60fb      	str	r3, [r7, #12]
}
 800fe02:	bf00      	nop
 800fe04:	bf00      	nop
 800fe06:	e7fd      	b.n	800fe04 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f7fe f8a9 	bl	800df60 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	3304      	adds	r3, #4
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fe f8a4 	bl	800df60 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe1c:	4b12      	ldr	r3, [pc, #72]	@ (800fe68 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d903      	bls.n	800fe2c <vTaskRemoveFromUnorderedEventList+0x84>
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe28:	4a0f      	ldr	r2, [pc, #60]	@ (800fe68 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fe2a:	6013      	str	r3, [r2, #0]
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe30:	4613      	mov	r3, r2
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	4413      	add	r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4a0c      	ldr	r2, [pc, #48]	@ (800fe6c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800fe3a:	441a      	add	r2, r3
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	3304      	adds	r3, #4
 800fe40:	4619      	mov	r1, r3
 800fe42:	4610      	mov	r0, r2
 800fe44:	f7fe f82f 	bl	800dea6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe4c:	4b08      	ldr	r3, [pc, #32]	@ (800fe70 <vTaskRemoveFromUnorderedEventList+0xc8>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d902      	bls.n	800fe5c <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800fe56:	4b07      	ldr	r3, [pc, #28]	@ (800fe74 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800fe58:	2201      	movs	r2, #1
 800fe5a:	601a      	str	r2, [r3, #0]
	}
}
 800fe5c:	bf00      	nop
 800fe5e:	3718      	adds	r7, #24
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	2000ef88 	.word	0x2000ef88
 800fe68:	2000ef68 	.word	0x2000ef68
 800fe6c:	2000eaa8 	.word	0x2000eaa8
 800fe70:	2000eaa4 	.word	0x2000eaa4
 800fe74:	2000ef74 	.word	0x2000ef74

0800fe78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe80:	4b06      	ldr	r3, [pc, #24]	@ (800fe9c <vTaskInternalSetTimeOutState+0x24>)
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe88:	4b05      	ldr	r3, [pc, #20]	@ (800fea0 <vTaskInternalSetTimeOutState+0x28>)
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	605a      	str	r2, [r3, #4]
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	2000ef78 	.word	0x2000ef78
 800fea0:	2000ef64 	.word	0x2000ef64

0800fea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b088      	sub	sp, #32
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10d      	bne.n	800fed0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800feb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb8:	b672      	cpsid	i
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	b662      	cpsie	i
 800fec8:	613b      	str	r3, [r7, #16]
}
 800feca:	bf00      	nop
 800fecc:	bf00      	nop
 800fece:	e7fd      	b.n	800fecc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10d      	bne.n	800fef2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feda:	b672      	cpsid	i
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	b662      	cpsie	i
 800feea:	60fb      	str	r3, [r7, #12]
}
 800feec:	bf00      	nop
 800feee:	bf00      	nop
 800fef0:	e7fd      	b.n	800feee <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fef2:	f000 ff6b 	bl	8010dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fef6:	4b1d      	ldr	r3, [pc, #116]	@ (800ff6c <xTaskCheckForTimeOut+0xc8>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	69ba      	ldr	r2, [r7, #24]
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff0e:	d102      	bne.n	800ff16 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff10:	2300      	movs	r3, #0
 800ff12:	61fb      	str	r3, [r7, #28]
 800ff14:	e023      	b.n	800ff5e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	4b15      	ldr	r3, [pc, #84]	@ (800ff70 <xTaskCheckForTimeOut+0xcc>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d007      	beq.n	800ff32 <xTaskCheckForTimeOut+0x8e>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	69ba      	ldr	r2, [r7, #24]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d302      	bcc.n	800ff32 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	61fb      	str	r3, [r7, #28]
 800ff30:	e015      	b.n	800ff5e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d20b      	bcs.n	800ff54 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	1ad2      	subs	r2, r2, r3
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7ff ff95 	bl	800fe78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	61fb      	str	r3, [r7, #28]
 800ff52:	e004      	b.n	800ff5e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2200      	movs	r2, #0
 800ff58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff5e:	f000 ff6b 	bl	8010e38 <vPortExitCritical>

	return xReturn;
 800ff62:	69fb      	ldr	r3, [r7, #28]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3720      	adds	r7, #32
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	2000ef64 	.word	0x2000ef64
 800ff70:	2000ef78 	.word	0x2000ef78

0800ff74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff74:	b480      	push	{r7}
 800ff76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff78:	4b03      	ldr	r3, [pc, #12]	@ (800ff88 <vTaskMissedYield+0x14>)
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]
}
 800ff7e:	bf00      	nop
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	2000ef74 	.word	0x2000ef74

0800ff8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff94:	f000 f84c 	bl	8010030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff98:	4b06      	ldr	r3, [pc, #24]	@ (800ffb4 <prvIdleTask+0x28>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d9f9      	bls.n	800ff94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ffa0:	4b05      	ldr	r3, [pc, #20]	@ (800ffb8 <prvIdleTask+0x2c>)
 800ffa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ffb0:	e7f0      	b.n	800ff94 <prvIdleTask+0x8>
 800ffb2:	bf00      	nop
 800ffb4:	2000eaa8 	.word	0x2000eaa8
 800ffb8:	e000ed04 	.word	0xe000ed04

0800ffbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	607b      	str	r3, [r7, #4]
 800ffc6:	e00c      	b.n	800ffe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4a10      	ldr	r2, [pc, #64]	@ (8010014 <prvInitialiseTaskLists+0x58>)
 800ffd4:	4413      	add	r3, r2
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fd ff38 	bl	800de4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	607b      	str	r3, [r7, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b37      	cmp	r3, #55	@ 0x37
 800ffe6:	d9ef      	bls.n	800ffc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffe8:	480b      	ldr	r0, [pc, #44]	@ (8010018 <prvInitialiseTaskLists+0x5c>)
 800ffea:	f7fd ff2f 	bl	800de4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffee:	480b      	ldr	r0, [pc, #44]	@ (801001c <prvInitialiseTaskLists+0x60>)
 800fff0:	f7fd ff2c 	bl	800de4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fff4:	480a      	ldr	r0, [pc, #40]	@ (8010020 <prvInitialiseTaskLists+0x64>)
 800fff6:	f7fd ff29 	bl	800de4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fffa:	480a      	ldr	r0, [pc, #40]	@ (8010024 <prvInitialiseTaskLists+0x68>)
 800fffc:	f7fd ff26 	bl	800de4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010000:	4b09      	ldr	r3, [pc, #36]	@ (8010028 <prvInitialiseTaskLists+0x6c>)
 8010002:	4a05      	ldr	r2, [pc, #20]	@ (8010018 <prvInitialiseTaskLists+0x5c>)
 8010004:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010006:	4b09      	ldr	r3, [pc, #36]	@ (801002c <prvInitialiseTaskLists+0x70>)
 8010008:	4a04      	ldr	r2, [pc, #16]	@ (801001c <prvInitialiseTaskLists+0x60>)
 801000a:	601a      	str	r2, [r3, #0]
}
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	2000eaa8 	.word	0x2000eaa8
 8010018:	2000ef08 	.word	0x2000ef08
 801001c:	2000ef1c 	.word	0x2000ef1c
 8010020:	2000ef38 	.word	0x2000ef38
 8010024:	2000ef4c 	.word	0x2000ef4c
 8010028:	2000ef30 	.word	0x2000ef30
 801002c:	2000ef34 	.word	0x2000ef34

08010030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010030:	b480      	push	{r7}
 8010032:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010034:	bf00      	nop
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr
	...

08010040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010046:	4b0c      	ldr	r3, [pc, #48]	@ (8010078 <prvResetNextTaskUnblockTime+0x38>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d104      	bne.n	801005a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010050:	4b0a      	ldr	r3, [pc, #40]	@ (801007c <prvResetNextTaskUnblockTime+0x3c>)
 8010052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010058:	e008      	b.n	801006c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801005a:	4b07      	ldr	r3, [pc, #28]	@ (8010078 <prvResetNextTaskUnblockTime+0x38>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	4a04      	ldr	r2, [pc, #16]	@ (801007c <prvResetNextTaskUnblockTime+0x3c>)
 801006a:	6013      	str	r3, [r2, #0]
}
 801006c:	bf00      	nop
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	2000ef30 	.word	0x2000ef30
 801007c:	2000ef80 	.word	0x2000ef80

08010080 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010086:	4b05      	ldr	r3, [pc, #20]	@ (801009c <xTaskGetCurrentTaskHandle+0x1c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801008c:	687b      	ldr	r3, [r7, #4]
	}
 801008e:	4618      	mov	r0, r3
 8010090:	370c      	adds	r7, #12
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	2000eaa4 	.word	0x2000eaa4

080100a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80100a6:	4b0b      	ldr	r3, [pc, #44]	@ (80100d4 <xTaskGetSchedulerState+0x34>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d102      	bne.n	80100b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80100ae:	2301      	movs	r3, #1
 80100b0:	607b      	str	r3, [r7, #4]
 80100b2:	e008      	b.n	80100c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100b4:	4b08      	ldr	r3, [pc, #32]	@ (80100d8 <xTaskGetSchedulerState+0x38>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d102      	bne.n	80100c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80100bc:	2302      	movs	r3, #2
 80100be:	607b      	str	r3, [r7, #4]
 80100c0:	e001      	b.n	80100c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80100c2:	2300      	movs	r3, #0
 80100c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80100c6:	687b      	ldr	r3, [r7, #4]
	}
 80100c8:	4618      	mov	r0, r3
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr
 80100d4:	2000ef6c 	.word	0x2000ef6c
 80100d8:	2000ef88 	.word	0x2000ef88

080100dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80100e8:	2300      	movs	r3, #0
 80100ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d051      	beq.n	8010196 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100f6:	4b2a      	ldr	r3, [pc, #168]	@ (80101a0 <xTaskPriorityInherit+0xc4>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d241      	bcs.n	8010184 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	699b      	ldr	r3, [r3, #24]
 8010104:	2b00      	cmp	r3, #0
 8010106:	db06      	blt.n	8010116 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010108:	4b25      	ldr	r3, [pc, #148]	@ (80101a0 <xTaskPriorityInherit+0xc4>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801010e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	6959      	ldr	r1, [r3, #20]
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801011e:	4613      	mov	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4413      	add	r3, r2
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	4a1f      	ldr	r2, [pc, #124]	@ (80101a4 <xTaskPriorityInherit+0xc8>)
 8010128:	4413      	add	r3, r2
 801012a:	4299      	cmp	r1, r3
 801012c:	d122      	bne.n	8010174 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	3304      	adds	r3, #4
 8010132:	4618      	mov	r0, r3
 8010134:	f7fd ff14 	bl	800df60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010138:	4b19      	ldr	r3, [pc, #100]	@ (80101a0 <xTaskPriorityInherit+0xc4>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010146:	4b18      	ldr	r3, [pc, #96]	@ (80101a8 <xTaskPriorityInherit+0xcc>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	429a      	cmp	r2, r3
 801014c:	d903      	bls.n	8010156 <xTaskPriorityInherit+0x7a>
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010152:	4a15      	ldr	r2, [pc, #84]	@ (80101a8 <xTaskPriorityInherit+0xcc>)
 8010154:	6013      	str	r3, [r2, #0]
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801015a:	4613      	mov	r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	4413      	add	r3, r2
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	4a10      	ldr	r2, [pc, #64]	@ (80101a4 <xTaskPriorityInherit+0xc8>)
 8010164:	441a      	add	r2, r3
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	3304      	adds	r3, #4
 801016a:	4619      	mov	r1, r3
 801016c:	4610      	mov	r0, r2
 801016e:	f7fd fe9a 	bl	800dea6 <vListInsertEnd>
 8010172:	e004      	b.n	801017e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010174:	4b0a      	ldr	r3, [pc, #40]	@ (80101a0 <xTaskPriorityInherit+0xc4>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801017e:	2301      	movs	r3, #1
 8010180:	60fb      	str	r3, [r7, #12]
 8010182:	e008      	b.n	8010196 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010188:	4b05      	ldr	r3, [pc, #20]	@ (80101a0 <xTaskPriorityInherit+0xc4>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801018e:	429a      	cmp	r2, r3
 8010190:	d201      	bcs.n	8010196 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010192:	2301      	movs	r3, #1
 8010194:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010196:	68fb      	ldr	r3, [r7, #12]
	}
 8010198:	4618      	mov	r0, r3
 801019a:	3710      	adds	r7, #16
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	2000eaa4 	.word	0x2000eaa4
 80101a4:	2000eaa8 	.word	0x2000eaa8
 80101a8:	2000ef68 	.word	0x2000ef68

080101ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b086      	sub	sp, #24
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80101b8:	2300      	movs	r3, #0
 80101ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d05c      	beq.n	801027c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80101c2:	4b31      	ldr	r3, [pc, #196]	@ (8010288 <xTaskPriorityDisinherit+0xdc>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	693a      	ldr	r2, [r7, #16]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d00d      	beq.n	80101e8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80101cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d0:	b672      	cpsid	i
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	b662      	cpsie	i
 80101e0:	60fb      	str	r3, [r7, #12]
}
 80101e2:	bf00      	nop
 80101e4:	bf00      	nop
 80101e6:	e7fd      	b.n	80101e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d10d      	bne.n	801020c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80101f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101f4:	b672      	cpsid	i
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	b662      	cpsie	i
 8010204:	60bb      	str	r3, [r7, #8]
}
 8010206:	bf00      	nop
 8010208:	bf00      	nop
 801020a:	e7fd      	b.n	8010208 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010210:	1e5a      	subs	r2, r3, #1
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801021e:	429a      	cmp	r2, r3
 8010220:	d02c      	beq.n	801027c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010226:	2b00      	cmp	r3, #0
 8010228:	d128      	bne.n	801027c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	3304      	adds	r3, #4
 801022e:	4618      	mov	r0, r3
 8010230:	f7fd fe96 	bl	800df60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010240:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801024c:	4b0f      	ldr	r3, [pc, #60]	@ (801028c <xTaskPriorityDisinherit+0xe0>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	429a      	cmp	r2, r3
 8010252:	d903      	bls.n	801025c <xTaskPriorityDisinherit+0xb0>
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010258:	4a0c      	ldr	r2, [pc, #48]	@ (801028c <xTaskPriorityDisinherit+0xe0>)
 801025a:	6013      	str	r3, [r2, #0]
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010260:	4613      	mov	r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	4413      	add	r3, r2
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	4a09      	ldr	r2, [pc, #36]	@ (8010290 <xTaskPriorityDisinherit+0xe4>)
 801026a:	441a      	add	r2, r3
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	3304      	adds	r3, #4
 8010270:	4619      	mov	r1, r3
 8010272:	4610      	mov	r0, r2
 8010274:	f7fd fe17 	bl	800dea6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010278:	2301      	movs	r3, #1
 801027a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801027c:	697b      	ldr	r3, [r7, #20]
	}
 801027e:	4618      	mov	r0, r3
 8010280:	3718      	adds	r7, #24
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	2000eaa4 	.word	0x2000eaa4
 801028c:	2000ef68 	.word	0x2000ef68
 8010290:	2000eaa8 	.word	0x2000eaa8

08010294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80102a2:	2301      	movs	r3, #1
 80102a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d070      	beq.n	801038e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10d      	bne.n	80102d0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80102b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b8:	b672      	cpsid	i
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	b662      	cpsie	i
 80102c8:	60fb      	str	r3, [r7, #12]
}
 80102ca:	bf00      	nop
 80102cc:	bf00      	nop
 80102ce:	e7fd      	b.n	80102cc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80102d4:	683a      	ldr	r2, [r7, #0]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d902      	bls.n	80102e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	61fb      	str	r3, [r7, #28]
 80102de:	e002      	b.n	80102e6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80102e0:	69bb      	ldr	r3, [r7, #24]
 80102e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80102e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ea:	69fa      	ldr	r2, [r7, #28]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d04e      	beq.n	801038e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102f4:	697a      	ldr	r2, [r7, #20]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d149      	bne.n	801038e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80102fa:	4b27      	ldr	r3, [pc, #156]	@ (8010398 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	69ba      	ldr	r2, [r7, #24]
 8010300:	429a      	cmp	r2, r3
 8010302:	d10d      	bne.n	8010320 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010308:	b672      	cpsid	i
 801030a:	f383 8811 	msr	BASEPRI, r3
 801030e:	f3bf 8f6f 	isb	sy
 8010312:	f3bf 8f4f 	dsb	sy
 8010316:	b662      	cpsie	i
 8010318:	60bb      	str	r3, [r7, #8]
}
 801031a:	bf00      	nop
 801031c:	bf00      	nop
 801031e:	e7fd      	b.n	801031c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010324:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	69fa      	ldr	r2, [r7, #28]
 801032a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	2b00      	cmp	r3, #0
 8010332:	db04      	blt.n	801033e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	6959      	ldr	r1, [r3, #20]
 8010342:	693a      	ldr	r2, [r7, #16]
 8010344:	4613      	mov	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	4a13      	ldr	r2, [pc, #76]	@ (801039c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801034e:	4413      	add	r3, r2
 8010350:	4299      	cmp	r1, r3
 8010352:	d11c      	bne.n	801038e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	3304      	adds	r3, #4
 8010358:	4618      	mov	r0, r3
 801035a:	f7fd fe01 	bl	800df60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010362:	4b0f      	ldr	r3, [pc, #60]	@ (80103a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	429a      	cmp	r2, r3
 8010368:	d903      	bls.n	8010372 <vTaskPriorityDisinheritAfterTimeout+0xde>
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036e:	4a0c      	ldr	r2, [pc, #48]	@ (80103a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010370:	6013      	str	r3, [r2, #0]
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010376:	4613      	mov	r3, r2
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	4413      	add	r3, r2
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	4a07      	ldr	r2, [pc, #28]	@ (801039c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010380:	441a      	add	r2, r3
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	3304      	adds	r3, #4
 8010386:	4619      	mov	r1, r3
 8010388:	4610      	mov	r0, r2
 801038a:	f7fd fd8c 	bl	800dea6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801038e:	bf00      	nop
 8010390:	3720      	adds	r7, #32
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	2000eaa4 	.word	0x2000eaa4
 801039c:	2000eaa8 	.word	0x2000eaa8
 80103a0:	2000ef68 	.word	0x2000ef68

080103a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80103aa:	4b09      	ldr	r3, [pc, #36]	@ (80103d0 <uxTaskResetEventItemValue+0x2c>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	699b      	ldr	r3, [r3, #24]
 80103b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103b2:	4b07      	ldr	r3, [pc, #28]	@ (80103d0 <uxTaskResetEventItemValue+0x2c>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103b8:	4b05      	ldr	r3, [pc, #20]	@ (80103d0 <uxTaskResetEventItemValue+0x2c>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80103c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80103c2:	687b      	ldr	r3, [r7, #4]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr
 80103d0:	2000eaa4 	.word	0x2000eaa4

080103d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80103d4:	b480      	push	{r7}
 80103d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80103d8:	4b07      	ldr	r3, [pc, #28]	@ (80103f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d004      	beq.n	80103ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80103e0:	4b05      	ldr	r3, [pc, #20]	@ (80103f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80103e6:	3201      	adds	r2, #1
 80103e8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80103ea:	4b03      	ldr	r3, [pc, #12]	@ (80103f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80103ec:	681b      	ldr	r3, [r3, #0]
	}
 80103ee:	4618      	mov	r0, r3
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	2000eaa4 	.word	0x2000eaa4

080103fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010406:	4b21      	ldr	r3, [pc, #132]	@ (801048c <prvAddCurrentTaskToDelayedList+0x90>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801040c:	4b20      	ldr	r3, [pc, #128]	@ (8010490 <prvAddCurrentTaskToDelayedList+0x94>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	3304      	adds	r3, #4
 8010412:	4618      	mov	r0, r3
 8010414:	f7fd fda4 	bl	800df60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801041e:	d10a      	bne.n	8010436 <prvAddCurrentTaskToDelayedList+0x3a>
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d007      	beq.n	8010436 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010426:	4b1a      	ldr	r3, [pc, #104]	@ (8010490 <prvAddCurrentTaskToDelayedList+0x94>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	3304      	adds	r3, #4
 801042c:	4619      	mov	r1, r3
 801042e:	4819      	ldr	r0, [pc, #100]	@ (8010494 <prvAddCurrentTaskToDelayedList+0x98>)
 8010430:	f7fd fd39 	bl	800dea6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010434:	e026      	b.n	8010484 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010436:	68fa      	ldr	r2, [r7, #12]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	4413      	add	r3, r2
 801043c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801043e:	4b14      	ldr	r3, [pc, #80]	@ (8010490 <prvAddCurrentTaskToDelayedList+0x94>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010446:	68ba      	ldr	r2, [r7, #8]
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	429a      	cmp	r2, r3
 801044c:	d209      	bcs.n	8010462 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801044e:	4b12      	ldr	r3, [pc, #72]	@ (8010498 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	4b0f      	ldr	r3, [pc, #60]	@ (8010490 <prvAddCurrentTaskToDelayedList+0x94>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	3304      	adds	r3, #4
 8010458:	4619      	mov	r1, r3
 801045a:	4610      	mov	r0, r2
 801045c:	f7fd fd47 	bl	800deee <vListInsert>
}
 8010460:	e010      	b.n	8010484 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010462:	4b0e      	ldr	r3, [pc, #56]	@ (801049c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	4b0a      	ldr	r3, [pc, #40]	@ (8010490 <prvAddCurrentTaskToDelayedList+0x94>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	3304      	adds	r3, #4
 801046c:	4619      	mov	r1, r3
 801046e:	4610      	mov	r0, r2
 8010470:	f7fd fd3d 	bl	800deee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010474:	4b0a      	ldr	r3, [pc, #40]	@ (80104a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	68ba      	ldr	r2, [r7, #8]
 801047a:	429a      	cmp	r2, r3
 801047c:	d202      	bcs.n	8010484 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801047e:	4a08      	ldr	r2, [pc, #32]	@ (80104a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	6013      	str	r3, [r2, #0]
}
 8010484:	bf00      	nop
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	2000ef64 	.word	0x2000ef64
 8010490:	2000eaa4 	.word	0x2000eaa4
 8010494:	2000ef4c 	.word	0x2000ef4c
 8010498:	2000ef34 	.word	0x2000ef34
 801049c:	2000ef30 	.word	0x2000ef30
 80104a0:	2000ef80 	.word	0x2000ef80

080104a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b08a      	sub	sp, #40	@ 0x28
 80104a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80104aa:	2300      	movs	r3, #0
 80104ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80104ae:	f000 fb21 	bl	8010af4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80104b2:	4b1e      	ldr	r3, [pc, #120]	@ (801052c <xTimerCreateTimerTask+0x88>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d021      	beq.n	80104fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80104be:	2300      	movs	r3, #0
 80104c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80104c2:	1d3a      	adds	r2, r7, #4
 80104c4:	f107 0108 	add.w	r1, r7, #8
 80104c8:	f107 030c 	add.w	r3, r7, #12
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fd fa9d 	bl	800da0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80104d2:	6879      	ldr	r1, [r7, #4]
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	68fa      	ldr	r2, [r7, #12]
 80104d8:	9202      	str	r2, [sp, #8]
 80104da:	9301      	str	r3, [sp, #4]
 80104dc:	2302      	movs	r3, #2
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	2300      	movs	r3, #0
 80104e2:	460a      	mov	r2, r1
 80104e4:	4912      	ldr	r1, [pc, #72]	@ (8010530 <xTimerCreateTimerTask+0x8c>)
 80104e6:	4813      	ldr	r0, [pc, #76]	@ (8010534 <xTimerCreateTimerTask+0x90>)
 80104e8:	f7fe fed6 	bl	800f298 <xTaskCreateStatic>
 80104ec:	4603      	mov	r3, r0
 80104ee:	4a12      	ldr	r2, [pc, #72]	@ (8010538 <xTimerCreateTimerTask+0x94>)
 80104f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80104f2:	4b11      	ldr	r3, [pc, #68]	@ (8010538 <xTimerCreateTimerTask+0x94>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d001      	beq.n	80104fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80104fa:	2301      	movs	r3, #1
 80104fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10d      	bne.n	8010520 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8010504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010508:	b672      	cpsid	i
 801050a:	f383 8811 	msr	BASEPRI, r3
 801050e:	f3bf 8f6f 	isb	sy
 8010512:	f3bf 8f4f 	dsb	sy
 8010516:	b662      	cpsie	i
 8010518:	613b      	str	r3, [r7, #16]
}
 801051a:	bf00      	nop
 801051c:	bf00      	nop
 801051e:	e7fd      	b.n	801051c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010520:	697b      	ldr	r3, [r7, #20]
}
 8010522:	4618      	mov	r0, r3
 8010524:	3718      	adds	r7, #24
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	2000efbc 	.word	0x2000efbc
 8010530:	080227e0 	.word	0x080227e0
 8010534:	0801067d 	.word	0x0801067d
 8010538:	2000efc0 	.word	0x2000efc0

0801053c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b08a      	sub	sp, #40	@ 0x28
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801054a:	2300      	movs	r3, #0
 801054c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d10d      	bne.n	8010570 <xTimerGenericCommand+0x34>
	__asm volatile
 8010554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010558:	b672      	cpsid	i
 801055a:	f383 8811 	msr	BASEPRI, r3
 801055e:	f3bf 8f6f 	isb	sy
 8010562:	f3bf 8f4f 	dsb	sy
 8010566:	b662      	cpsie	i
 8010568:	623b      	str	r3, [r7, #32]
}
 801056a:	bf00      	nop
 801056c:	bf00      	nop
 801056e:	e7fd      	b.n	801056c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010570:	4b19      	ldr	r3, [pc, #100]	@ (80105d8 <xTimerGenericCommand+0x9c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d02a      	beq.n	80105ce <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	2b05      	cmp	r3, #5
 8010588:	dc18      	bgt.n	80105bc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801058a:	f7ff fd89 	bl	80100a0 <xTaskGetSchedulerState>
 801058e:	4603      	mov	r3, r0
 8010590:	2b02      	cmp	r3, #2
 8010592:	d109      	bne.n	80105a8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010594:	4b10      	ldr	r3, [pc, #64]	@ (80105d8 <xTimerGenericCommand+0x9c>)
 8010596:	6818      	ldr	r0, [r3, #0]
 8010598:	f107 0110 	add.w	r1, r7, #16
 801059c:	2300      	movs	r3, #0
 801059e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105a0:	f7fd ff94 	bl	800e4cc <xQueueGenericSend>
 80105a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80105a6:	e012      	b.n	80105ce <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80105a8:	4b0b      	ldr	r3, [pc, #44]	@ (80105d8 <xTimerGenericCommand+0x9c>)
 80105aa:	6818      	ldr	r0, [r3, #0]
 80105ac:	f107 0110 	add.w	r1, r7, #16
 80105b0:	2300      	movs	r3, #0
 80105b2:	2200      	movs	r2, #0
 80105b4:	f7fd ff8a 	bl	800e4cc <xQueueGenericSend>
 80105b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80105ba:	e008      	b.n	80105ce <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105bc:	4b06      	ldr	r3, [pc, #24]	@ (80105d8 <xTimerGenericCommand+0x9c>)
 80105be:	6818      	ldr	r0, [r3, #0]
 80105c0:	f107 0110 	add.w	r1, r7, #16
 80105c4:	2300      	movs	r3, #0
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	f7fe f88a 	bl	800e6e0 <xQueueGenericSendFromISR>
 80105cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80105ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3728      	adds	r7, #40	@ 0x28
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	2000efbc 	.word	0x2000efbc

080105dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b088      	sub	sp, #32
 80105e0:	af02      	add	r7, sp, #8
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105e6:	4b24      	ldr	r3, [pc, #144]	@ (8010678 <prvProcessExpiredTimer+0x9c>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	3304      	adds	r3, #4
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fd fcb3 	bl	800df60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010600:	f003 0304 	and.w	r3, r3, #4
 8010604:	2b00      	cmp	r3, #0
 8010606:	d025      	beq.n	8010654 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	699a      	ldr	r2, [r3, #24]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	18d1      	adds	r1, r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	6978      	ldr	r0, [r7, #20]
 8010616:	f000 f8d7 	bl	80107c8 <prvInsertTimerInActiveList>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d022      	beq.n	8010666 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010620:	2300      	movs	r3, #0
 8010622:	9300      	str	r3, [sp, #0]
 8010624:	2300      	movs	r3, #0
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	2100      	movs	r1, #0
 801062a:	6978      	ldr	r0, [r7, #20]
 801062c:	f7ff ff86 	bl	801053c <xTimerGenericCommand>
 8010630:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d116      	bne.n	8010666 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801063c:	b672      	cpsid	i
 801063e:	f383 8811 	msr	BASEPRI, r3
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	b662      	cpsie	i
 801064c:	60fb      	str	r3, [r7, #12]
}
 801064e:	bf00      	nop
 8010650:	bf00      	nop
 8010652:	e7fd      	b.n	8010650 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801065a:	f023 0301 	bic.w	r3, r3, #1
 801065e:	b2da      	uxtb	r2, r3
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	6a1b      	ldr	r3, [r3, #32]
 801066a:	6978      	ldr	r0, [r7, #20]
 801066c:	4798      	blx	r3
}
 801066e:	bf00      	nop
 8010670:	3718      	adds	r7, #24
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	2000efb4 	.word	0x2000efb4

0801067c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010684:	f107 0308 	add.w	r3, r7, #8
 8010688:	4618      	mov	r0, r3
 801068a:	f000 f859 	bl	8010740 <prvGetNextExpireTime>
 801068e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	4619      	mov	r1, r3
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f000 f805 	bl	80106a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801069a:	f000 f8d7 	bl	801084c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801069e:	bf00      	nop
 80106a0:	e7f0      	b.n	8010684 <prvTimerTask+0x8>
	...

080106a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80106ae:	f7ff f865 	bl	800f77c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106b2:	f107 0308 	add.w	r3, r7, #8
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 f866 	bl	8010788 <prvSampleTimeNow>
 80106bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d130      	bne.n	8010726 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d10a      	bne.n	80106e0 <prvProcessTimerOrBlockTask+0x3c>
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d806      	bhi.n	80106e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80106d2:	f7ff f861 	bl	800f798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80106d6:	68f9      	ldr	r1, [r7, #12]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7ff ff7f 	bl	80105dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80106de:	e024      	b.n	801072a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d008      	beq.n	80106f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80106e6:	4b13      	ldr	r3, [pc, #76]	@ (8010734 <prvProcessTimerOrBlockTask+0x90>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d101      	bne.n	80106f4 <prvProcessTimerOrBlockTask+0x50>
 80106f0:	2301      	movs	r3, #1
 80106f2:	e000      	b.n	80106f6 <prvProcessTimerOrBlockTask+0x52>
 80106f4:	2300      	movs	r3, #0
 80106f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80106f8:	4b0f      	ldr	r3, [pc, #60]	@ (8010738 <prvProcessTimerOrBlockTask+0x94>)
 80106fa:	6818      	ldr	r0, [r3, #0]
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	683a      	ldr	r2, [r7, #0]
 8010704:	4619      	mov	r1, r3
 8010706:	f7fe fd93 	bl	800f230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801070a:	f7ff f845 	bl	800f798 <xTaskResumeAll>
 801070e:	4603      	mov	r3, r0
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10a      	bne.n	801072a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010714:	4b09      	ldr	r3, [pc, #36]	@ (801073c <prvProcessTimerOrBlockTask+0x98>)
 8010716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801071a:	601a      	str	r2, [r3, #0]
 801071c:	f3bf 8f4f 	dsb	sy
 8010720:	f3bf 8f6f 	isb	sy
}
 8010724:	e001      	b.n	801072a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010726:	f7ff f837 	bl	800f798 <xTaskResumeAll>
}
 801072a:	bf00      	nop
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	2000efb8 	.word	0x2000efb8
 8010738:	2000efbc 	.word	0x2000efbc
 801073c:	e000ed04 	.word	0xe000ed04

08010740 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010740:	b480      	push	{r7}
 8010742:	b085      	sub	sp, #20
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010748:	4b0e      	ldr	r3, [pc, #56]	@ (8010784 <prvGetNextExpireTime+0x44>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d101      	bne.n	8010756 <prvGetNextExpireTime+0x16>
 8010752:	2201      	movs	r2, #1
 8010754:	e000      	b.n	8010758 <prvGetNextExpireTime+0x18>
 8010756:	2200      	movs	r2, #0
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d105      	bne.n	8010770 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010764:	4b07      	ldr	r3, [pc, #28]	@ (8010784 <prvGetNextExpireTime+0x44>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	60fb      	str	r3, [r7, #12]
 801076e:	e001      	b.n	8010774 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010770:	2300      	movs	r3, #0
 8010772:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010774:	68fb      	ldr	r3, [r7, #12]
}
 8010776:	4618      	mov	r0, r3
 8010778:	3714      	adds	r7, #20
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop
 8010784:	2000efb4 	.word	0x2000efb4

08010788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010790:	f7ff f8a2 	bl	800f8d8 <xTaskGetTickCount>
 8010794:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010796:	4b0b      	ldr	r3, [pc, #44]	@ (80107c4 <prvSampleTimeNow+0x3c>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	429a      	cmp	r2, r3
 801079e:	d205      	bcs.n	80107ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80107a0:	f000 f940 	bl	8010a24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2201      	movs	r2, #1
 80107a8:	601a      	str	r2, [r3, #0]
 80107aa:	e002      	b.n	80107b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80107b2:	4a04      	ldr	r2, [pc, #16]	@ (80107c4 <prvSampleTimeNow+0x3c>)
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80107b8:	68fb      	ldr	r3, [r7, #12]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	2000efc4 	.word	0x2000efc4

080107c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b086      	sub	sp, #24
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	607a      	str	r2, [r7, #4]
 80107d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80107d6:	2300      	movs	r3, #0
 80107d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80107e6:	68ba      	ldr	r2, [r7, #8]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d812      	bhi.n	8010814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	1ad2      	subs	r2, r2, r3
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	699b      	ldr	r3, [r3, #24]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d302      	bcc.n	8010802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80107fc:	2301      	movs	r3, #1
 80107fe:	617b      	str	r3, [r7, #20]
 8010800:	e01b      	b.n	801083a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010802:	4b10      	ldr	r3, [pc, #64]	@ (8010844 <prvInsertTimerInActiveList+0x7c>)
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	3304      	adds	r3, #4
 801080a:	4619      	mov	r1, r3
 801080c:	4610      	mov	r0, r2
 801080e:	f7fd fb6e 	bl	800deee <vListInsert>
 8010812:	e012      	b.n	801083a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	429a      	cmp	r2, r3
 801081a:	d206      	bcs.n	801082a <prvInsertTimerInActiveList+0x62>
 801081c:	68ba      	ldr	r2, [r7, #8]
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	429a      	cmp	r2, r3
 8010822:	d302      	bcc.n	801082a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010824:	2301      	movs	r3, #1
 8010826:	617b      	str	r3, [r7, #20]
 8010828:	e007      	b.n	801083a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801082a:	4b07      	ldr	r3, [pc, #28]	@ (8010848 <prvInsertTimerInActiveList+0x80>)
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3304      	adds	r3, #4
 8010832:	4619      	mov	r1, r3
 8010834:	4610      	mov	r0, r2
 8010836:	f7fd fb5a 	bl	800deee <vListInsert>
		}
	}

	return xProcessTimerNow;
 801083a:	697b      	ldr	r3, [r7, #20]
}
 801083c:	4618      	mov	r0, r3
 801083e:	3718      	adds	r7, #24
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	2000efb8 	.word	0x2000efb8
 8010848:	2000efb4 	.word	0x2000efb4

0801084c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b08e      	sub	sp, #56	@ 0x38
 8010850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010852:	e0d4      	b.n	80109fe <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	da1b      	bge.n	8010892 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801085a:	1d3b      	adds	r3, r7, #4
 801085c:	3304      	adds	r3, #4
 801085e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010862:	2b00      	cmp	r3, #0
 8010864:	d10d      	bne.n	8010882 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8010866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086a:	b672      	cpsid	i
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	b662      	cpsie	i
 801087a:	61fb      	str	r3, [r7, #28]
}
 801087c:	bf00      	nop
 801087e:	bf00      	nop
 8010880:	e7fd      	b.n	801087e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010888:	6850      	ldr	r0, [r2, #4]
 801088a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801088c:	6892      	ldr	r2, [r2, #8]
 801088e:	4611      	mov	r1, r2
 8010890:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	f2c0 80b2 	blt.w	80109fe <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801089e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a0:	695b      	ldr	r3, [r3, #20]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d004      	beq.n	80108b0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a8:	3304      	adds	r3, #4
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fd fb58 	bl	800df60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108b0:	463b      	mov	r3, r7
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7ff ff68 	bl	8010788 <prvSampleTimeNow>
 80108b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2b09      	cmp	r3, #9
 80108be:	f200 809b 	bhi.w	80109f8 <prvProcessReceivedCommands+0x1ac>
 80108c2:	a201      	add	r2, pc, #4	@ (adr r2, 80108c8 <prvProcessReceivedCommands+0x7c>)
 80108c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c8:	080108f1 	.word	0x080108f1
 80108cc:	080108f1 	.word	0x080108f1
 80108d0:	080108f1 	.word	0x080108f1
 80108d4:	0801096b 	.word	0x0801096b
 80108d8:	0801097f 	.word	0x0801097f
 80108dc:	080109cf 	.word	0x080109cf
 80108e0:	080108f1 	.word	0x080108f1
 80108e4:	080108f1 	.word	0x080108f1
 80108e8:	0801096b 	.word	0x0801096b
 80108ec:	0801097f 	.word	0x0801097f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108f6:	f043 0301 	orr.w	r3, r3, #1
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010902:	68ba      	ldr	r2, [r7, #8]
 8010904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010906:	699b      	ldr	r3, [r3, #24]
 8010908:	18d1      	adds	r1, r2, r3
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801090e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010910:	f7ff ff5a 	bl	80107c8 <prvInsertTimerInActiveList>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d070      	beq.n	80109fc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801091a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801091c:	6a1b      	ldr	r3, [r3, #32]
 801091e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010920:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010928:	f003 0304 	and.w	r3, r3, #4
 801092c:	2b00      	cmp	r3, #0
 801092e:	d065      	beq.n	80109fc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010930:	68ba      	ldr	r2, [r7, #8]
 8010932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010934:	699b      	ldr	r3, [r3, #24]
 8010936:	441a      	add	r2, r3
 8010938:	2300      	movs	r3, #0
 801093a:	9300      	str	r3, [sp, #0]
 801093c:	2300      	movs	r3, #0
 801093e:	2100      	movs	r1, #0
 8010940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010942:	f7ff fdfb 	bl	801053c <xTimerGenericCommand>
 8010946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010948:	6a3b      	ldr	r3, [r7, #32]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d156      	bne.n	80109fc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801094e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010952:	b672      	cpsid	i
 8010954:	f383 8811 	msr	BASEPRI, r3
 8010958:	f3bf 8f6f 	isb	sy
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	b662      	cpsie	i
 8010962:	61bb      	str	r3, [r7, #24]
}
 8010964:	bf00      	nop
 8010966:	bf00      	nop
 8010968:	e7fd      	b.n	8010966 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801096a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801096c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010970:	f023 0301 	bic.w	r3, r3, #1
 8010974:	b2da      	uxtb	r2, r3
 8010976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010978:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801097c:	e03f      	b.n	80109fe <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801097e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010984:	f043 0301 	orr.w	r3, r3, #1
 8010988:	b2da      	uxtb	r2, r3
 801098a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801098c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010994:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010998:	699b      	ldr	r3, [r3, #24]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d10d      	bne.n	80109ba <prvProcessReceivedCommands+0x16e>
	__asm volatile
 801099e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a2:	b672      	cpsid	i
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	b662      	cpsie	i
 80109b2:	617b      	str	r3, [r7, #20]
}
 80109b4:	bf00      	nop
 80109b6:	bf00      	nop
 80109b8:	e7fd      	b.n	80109b6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80109ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109bc:	699a      	ldr	r2, [r3, #24]
 80109be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c0:	18d1      	adds	r1, r2, r3
 80109c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109c8:	f7ff fefe 	bl	80107c8 <prvInsertTimerInActiveList>
					break;
 80109cc:	e017      	b.n	80109fe <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80109ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109d4:	f003 0302 	and.w	r3, r3, #2
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d103      	bne.n	80109e4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80109dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109de:	f000 fbf5 	bl	80111cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80109e2:	e00c      	b.n	80109fe <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109ea:	f023 0301 	bic.w	r3, r3, #1
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80109f6:	e002      	b.n	80109fe <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80109f8:	bf00      	nop
 80109fa:	e000      	b.n	80109fe <prvProcessReceivedCommands+0x1b2>
					break;
 80109fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109fe:	4b08      	ldr	r3, [pc, #32]	@ (8010a20 <prvProcessReceivedCommands+0x1d4>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	1d39      	adds	r1, r7, #4
 8010a04:	2200      	movs	r2, #0
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fd ffa6 	bl	800e958 <xQueueReceive>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f47f af20 	bne.w	8010854 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010a14:	bf00      	nop
 8010a16:	bf00      	nop
 8010a18:	3730      	adds	r7, #48	@ 0x30
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	2000efbc 	.word	0x2000efbc

08010a24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b088      	sub	sp, #32
 8010a28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a2a:	e04b      	b.n	8010ac4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a36:	4b2d      	ldr	r3, [pc, #180]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	3304      	adds	r3, #4
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fd fa8b 	bl	800df60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d031      	beq.n	8010ac4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	699b      	ldr	r3, [r3, #24]
 8010a64:	693a      	ldr	r2, [r7, #16]
 8010a66:	4413      	add	r3, r2
 8010a68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a6a:	68ba      	ldr	r2, [r7, #8]
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d90e      	bls.n	8010a90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	3304      	adds	r3, #4
 8010a86:	4619      	mov	r1, r3
 8010a88:	4610      	mov	r0, r2
 8010a8a:	f7fd fa30 	bl	800deee <vListInsert>
 8010a8e:	e019      	b.n	8010ac4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a90:	2300      	movs	r3, #0
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	2300      	movs	r3, #0
 8010a96:	693a      	ldr	r2, [r7, #16]
 8010a98:	2100      	movs	r1, #0
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f7ff fd4e 	bl	801053c <xTimerGenericCommand>
 8010aa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10d      	bne.n	8010ac4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8010aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aac:	b672      	cpsid	i
 8010aae:	f383 8811 	msr	BASEPRI, r3
 8010ab2:	f3bf 8f6f 	isb	sy
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	b662      	cpsie	i
 8010abc:	603b      	str	r3, [r7, #0]
}
 8010abe:	bf00      	nop
 8010ac0:	bf00      	nop
 8010ac2:	e7fd      	b.n	8010ac0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ac4:	4b09      	ldr	r3, [pc, #36]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1ae      	bne.n	8010a2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010ace:	4b07      	ldr	r3, [pc, #28]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010ad4:	4b06      	ldr	r3, [pc, #24]	@ (8010af0 <prvSwitchTimerLists+0xcc>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a04      	ldr	r2, [pc, #16]	@ (8010aec <prvSwitchTimerLists+0xc8>)
 8010ada:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010adc:	4a04      	ldr	r2, [pc, #16]	@ (8010af0 <prvSwitchTimerLists+0xcc>)
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	6013      	str	r3, [r2, #0]
}
 8010ae2:	bf00      	nop
 8010ae4:	3718      	adds	r7, #24
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	2000efb4 	.word	0x2000efb4
 8010af0:	2000efb8 	.word	0x2000efb8

08010af4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010afa:	f000 f967 	bl	8010dcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010afe:	4b15      	ldr	r3, [pc, #84]	@ (8010b54 <prvCheckForValidListAndQueue+0x60>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d120      	bne.n	8010b48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010b06:	4814      	ldr	r0, [pc, #80]	@ (8010b58 <prvCheckForValidListAndQueue+0x64>)
 8010b08:	f7fd f9a0 	bl	800de4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010b0c:	4813      	ldr	r0, [pc, #76]	@ (8010b5c <prvCheckForValidListAndQueue+0x68>)
 8010b0e:	f7fd f99d 	bl	800de4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010b12:	4b13      	ldr	r3, [pc, #76]	@ (8010b60 <prvCheckForValidListAndQueue+0x6c>)
 8010b14:	4a10      	ldr	r2, [pc, #64]	@ (8010b58 <prvCheckForValidListAndQueue+0x64>)
 8010b16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010b18:	4b12      	ldr	r3, [pc, #72]	@ (8010b64 <prvCheckForValidListAndQueue+0x70>)
 8010b1a:	4a10      	ldr	r2, [pc, #64]	@ (8010b5c <prvCheckForValidListAndQueue+0x68>)
 8010b1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b1e:	2300      	movs	r3, #0
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	4b11      	ldr	r3, [pc, #68]	@ (8010b68 <prvCheckForValidListAndQueue+0x74>)
 8010b24:	4a11      	ldr	r2, [pc, #68]	@ (8010b6c <prvCheckForValidListAndQueue+0x78>)
 8010b26:	2110      	movs	r1, #16
 8010b28:	200a      	movs	r0, #10
 8010b2a:	f7fd faaf 	bl	800e08c <xQueueGenericCreateStatic>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	4a08      	ldr	r2, [pc, #32]	@ (8010b54 <prvCheckForValidListAndQueue+0x60>)
 8010b32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b34:	4b07      	ldr	r3, [pc, #28]	@ (8010b54 <prvCheckForValidListAndQueue+0x60>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d005      	beq.n	8010b48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b3c:	4b05      	ldr	r3, [pc, #20]	@ (8010b54 <prvCheckForValidListAndQueue+0x60>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	490b      	ldr	r1, [pc, #44]	@ (8010b70 <prvCheckForValidListAndQueue+0x7c>)
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fe fb20 	bl	800f188 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b48:	f000 f976 	bl	8010e38 <vPortExitCritical>
}
 8010b4c:	bf00      	nop
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	2000efbc 	.word	0x2000efbc
 8010b58:	2000ef8c 	.word	0x2000ef8c
 8010b5c:	2000efa0 	.word	0x2000efa0
 8010b60:	2000efb4 	.word	0x2000efb4
 8010b64:	2000efb8 	.word	0x2000efb8
 8010b68:	2000f068 	.word	0x2000f068
 8010b6c:	2000efc8 	.word	0x2000efc8
 8010b70:	080227e8 	.word	0x080227e8

08010b74 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b08a      	sub	sp, #40	@ 0x28
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
 8010b80:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010b82:	f06f 0301 	mvn.w	r3, #1
 8010b86:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010b94:	4b06      	ldr	r3, [pc, #24]	@ (8010bb0 <xTimerPendFunctionCallFromISR+0x3c>)
 8010b96:	6818      	ldr	r0, [r3, #0]
 8010b98:	f107 0114 	add.w	r1, r7, #20
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	683a      	ldr	r2, [r7, #0]
 8010ba0:	f7fd fd9e 	bl	800e6e0 <xQueueGenericSendFromISR>
 8010ba4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3728      	adds	r7, #40	@ 0x28
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	2000efbc 	.word	0x2000efbc

08010bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	3b04      	subs	r3, #4
 8010bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	3b04      	subs	r3, #4
 8010bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	f023 0201 	bic.w	r2, r3, #1
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	3b04      	subs	r3, #4
 8010be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010be4:	4a0c      	ldr	r2, [pc, #48]	@ (8010c18 <pxPortInitialiseStack+0x64>)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	3b14      	subs	r3, #20
 8010bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3b04      	subs	r3, #4
 8010bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f06f 0202 	mvn.w	r2, #2
 8010c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	3b20      	subs	r3, #32
 8010c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3714      	adds	r7, #20
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr
 8010c18:	08010c1d 	.word	0x08010c1d

08010c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c26:	4b15      	ldr	r3, [pc, #84]	@ (8010c7c <prvTaskExitError+0x60>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010c2e:	d00d      	beq.n	8010c4c <prvTaskExitError+0x30>
	__asm volatile
 8010c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c34:	b672      	cpsid	i
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	b662      	cpsie	i
 8010c44:	60fb      	str	r3, [r7, #12]
}
 8010c46:	bf00      	nop
 8010c48:	bf00      	nop
 8010c4a:	e7fd      	b.n	8010c48 <prvTaskExitError+0x2c>
	__asm volatile
 8010c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c50:	b672      	cpsid	i
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	b662      	cpsie	i
 8010c60:	60bb      	str	r3, [r7, #8]
}
 8010c62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c64:	bf00      	nop
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d0fc      	beq.n	8010c66 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c6c:	bf00      	nop
 8010c6e:	bf00      	nop
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	20000020 	.word	0x20000020

08010c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c80:	4b07      	ldr	r3, [pc, #28]	@ (8010ca0 <pxCurrentTCBConst2>)
 8010c82:	6819      	ldr	r1, [r3, #0]
 8010c84:	6808      	ldr	r0, [r1, #0]
 8010c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8a:	f380 8809 	msr	PSP, r0
 8010c8e:	f3bf 8f6f 	isb	sy
 8010c92:	f04f 0000 	mov.w	r0, #0
 8010c96:	f380 8811 	msr	BASEPRI, r0
 8010c9a:	4770      	bx	lr
 8010c9c:	f3af 8000 	nop.w

08010ca0 <pxCurrentTCBConst2>:
 8010ca0:	2000eaa4 	.word	0x2000eaa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010ca4:	bf00      	nop
 8010ca6:	bf00      	nop

08010ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010ca8:	4808      	ldr	r0, [pc, #32]	@ (8010ccc <prvPortStartFirstTask+0x24>)
 8010caa:	6800      	ldr	r0, [r0, #0]
 8010cac:	6800      	ldr	r0, [r0, #0]
 8010cae:	f380 8808 	msr	MSP, r0
 8010cb2:	f04f 0000 	mov.w	r0, #0
 8010cb6:	f380 8814 	msr	CONTROL, r0
 8010cba:	b662      	cpsie	i
 8010cbc:	b661      	cpsie	f
 8010cbe:	f3bf 8f4f 	dsb	sy
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	df00      	svc	0
 8010cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010cca:	bf00      	nop
 8010ccc:	e000ed08 	.word	0xe000ed08

08010cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cd6:	4b37      	ldr	r3, [pc, #220]	@ (8010db4 <xPortStartScheduler+0xe4>)
 8010cd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	22ff      	movs	r2, #255	@ 0xff
 8010ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8010db8 <xPortStartScheduler+0xe8>)
 8010cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d00:	2207      	movs	r2, #7
 8010d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d04:	e009      	b.n	8010d1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010d06:	4b2d      	ldr	r3, [pc, #180]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d10:	78fb      	ldrb	r3, [r7, #3]
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	005b      	lsls	r3, r3, #1
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d1a:	78fb      	ldrb	r3, [r7, #3]
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d22:	2b80      	cmp	r3, #128	@ 0x80
 8010d24:	d0ef      	beq.n	8010d06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d26:	4b25      	ldr	r3, [pc, #148]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f1c3 0307 	rsb	r3, r3, #7
 8010d2e:	2b04      	cmp	r3, #4
 8010d30:	d00d      	beq.n	8010d4e <xPortStartScheduler+0x7e>
	__asm volatile
 8010d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d36:	b672      	cpsid	i
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	b662      	cpsie	i
 8010d46:	60bb      	str	r3, [r7, #8]
}
 8010d48:	bf00      	nop
 8010d4a:	bf00      	nop
 8010d4c:	e7fd      	b.n	8010d4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	021b      	lsls	r3, r3, #8
 8010d54:	4a19      	ldr	r2, [pc, #100]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d58:	4b18      	ldr	r3, [pc, #96]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010d60:	4a16      	ldr	r2, [pc, #88]	@ (8010dbc <xPortStartScheduler+0xec>)
 8010d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d6c:	4b14      	ldr	r3, [pc, #80]	@ (8010dc0 <xPortStartScheduler+0xf0>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a13      	ldr	r2, [pc, #76]	@ (8010dc0 <xPortStartScheduler+0xf0>)
 8010d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d78:	4b11      	ldr	r3, [pc, #68]	@ (8010dc0 <xPortStartScheduler+0xf0>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a10      	ldr	r2, [pc, #64]	@ (8010dc0 <xPortStartScheduler+0xf0>)
 8010d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d84:	f000 f8dc 	bl	8010f40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d88:	4b0e      	ldr	r3, [pc, #56]	@ (8010dc4 <xPortStartScheduler+0xf4>)
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d8e:	f000 f8fb 	bl	8010f88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d92:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc8 <xPortStartScheduler+0xf8>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4a0c      	ldr	r2, [pc, #48]	@ (8010dc8 <xPortStartScheduler+0xf8>)
 8010d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d9e:	f7ff ff83 	bl	8010ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010da2:	f7fe fe77 	bl	800fa94 <vTaskSwitchContext>
	prvTaskExitError();
 8010da6:	f7ff ff39 	bl	8010c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010daa:	2300      	movs	r3, #0
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3710      	adds	r7, #16
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	e000e400 	.word	0xe000e400
 8010db8:	2000f0b8 	.word	0x2000f0b8
 8010dbc:	2000f0bc 	.word	0x2000f0bc
 8010dc0:	e000ed20 	.word	0xe000ed20
 8010dc4:	20000020 	.word	0x20000020
 8010dc8:	e000ef34 	.word	0xe000ef34

08010dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8010dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd6:	b672      	cpsid	i
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	b662      	cpsie	i
 8010de6:	607b      	str	r3, [r7, #4]
}
 8010de8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010dea:	4b11      	ldr	r3, [pc, #68]	@ (8010e30 <vPortEnterCritical+0x64>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	3301      	adds	r3, #1
 8010df0:	4a0f      	ldr	r2, [pc, #60]	@ (8010e30 <vPortEnterCritical+0x64>)
 8010df2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010df4:	4b0e      	ldr	r3, [pc, #56]	@ (8010e30 <vPortEnterCritical+0x64>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b01      	cmp	r3, #1
 8010dfa:	d112      	bne.n	8010e22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8010e34 <vPortEnterCritical+0x68>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d00d      	beq.n	8010e22 <vPortEnterCritical+0x56>
	__asm volatile
 8010e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e0a:	b672      	cpsid	i
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	b662      	cpsie	i
 8010e1a:	603b      	str	r3, [r7, #0]
}
 8010e1c:	bf00      	nop
 8010e1e:	bf00      	nop
 8010e20:	e7fd      	b.n	8010e1e <vPortEnterCritical+0x52>
	}
}
 8010e22:	bf00      	nop
 8010e24:	370c      	adds	r7, #12
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	20000020 	.word	0x20000020
 8010e34:	e000ed04 	.word	0xe000ed04

08010e38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e3e:	4b13      	ldr	r3, [pc, #76]	@ (8010e8c <vPortExitCritical+0x54>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10d      	bne.n	8010e62 <vPortExitCritical+0x2a>
	__asm volatile
 8010e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e4a:	b672      	cpsid	i
 8010e4c:	f383 8811 	msr	BASEPRI, r3
 8010e50:	f3bf 8f6f 	isb	sy
 8010e54:	f3bf 8f4f 	dsb	sy
 8010e58:	b662      	cpsie	i
 8010e5a:	607b      	str	r3, [r7, #4]
}
 8010e5c:	bf00      	nop
 8010e5e:	bf00      	nop
 8010e60:	e7fd      	b.n	8010e5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010e62:	4b0a      	ldr	r3, [pc, #40]	@ (8010e8c <vPortExitCritical+0x54>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	3b01      	subs	r3, #1
 8010e68:	4a08      	ldr	r2, [pc, #32]	@ (8010e8c <vPortExitCritical+0x54>)
 8010e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e6c:	4b07      	ldr	r3, [pc, #28]	@ (8010e8c <vPortExitCritical+0x54>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d105      	bne.n	8010e80 <vPortExitCritical+0x48>
 8010e74:	2300      	movs	r3, #0
 8010e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	f383 8811 	msr	BASEPRI, r3
}
 8010e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr
 8010e8c:	20000020 	.word	0x20000020

08010e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e90:	f3ef 8009 	mrs	r0, PSP
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	4b15      	ldr	r3, [pc, #84]	@ (8010ef0 <pxCurrentTCBConst>)
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	f01e 0f10 	tst.w	lr, #16
 8010ea0:	bf08      	it	eq
 8010ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eaa:	6010      	str	r0, [r2, #0]
 8010eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010eb4:	b672      	cpsid	i
 8010eb6:	f380 8811 	msr	BASEPRI, r0
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	f3bf 8f6f 	isb	sy
 8010ec2:	b662      	cpsie	i
 8010ec4:	f7fe fde6 	bl	800fa94 <vTaskSwitchContext>
 8010ec8:	f04f 0000 	mov.w	r0, #0
 8010ecc:	f380 8811 	msr	BASEPRI, r0
 8010ed0:	bc09      	pop	{r0, r3}
 8010ed2:	6819      	ldr	r1, [r3, #0]
 8010ed4:	6808      	ldr	r0, [r1, #0]
 8010ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eda:	f01e 0f10 	tst.w	lr, #16
 8010ede:	bf08      	it	eq
 8010ee0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ee4:	f380 8809 	msr	PSP, r0
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	4770      	bx	lr
 8010eee:	bf00      	nop

08010ef0 <pxCurrentTCBConst>:
 8010ef0:	2000eaa4 	.word	0x2000eaa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ef4:	bf00      	nop
 8010ef6:	bf00      	nop

08010ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f02:	b672      	cpsid	i
 8010f04:	f383 8811 	msr	BASEPRI, r3
 8010f08:	f3bf 8f6f 	isb	sy
 8010f0c:	f3bf 8f4f 	dsb	sy
 8010f10:	b662      	cpsie	i
 8010f12:	607b      	str	r3, [r7, #4]
}
 8010f14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f16:	f7fe fd01 	bl	800f91c <xTaskIncrementTick>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d003      	beq.n	8010f28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f20:	4b06      	ldr	r3, [pc, #24]	@ (8010f3c <SysTick_Handler+0x44>)
 8010f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f26:	601a      	str	r2, [r3, #0]
 8010f28:	2300      	movs	r3, #0
 8010f2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	f383 8811 	msr	BASEPRI, r3
}
 8010f32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f34:	bf00      	nop
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	e000ed04 	.word	0xe000ed04

08010f40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f40:	b480      	push	{r7}
 8010f42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f44:	4b0b      	ldr	r3, [pc, #44]	@ (8010f74 <vPortSetupTimerInterrupt+0x34>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8010f78 <vPortSetupTimerInterrupt+0x38>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f50:	4b0a      	ldr	r3, [pc, #40]	@ (8010f7c <vPortSetupTimerInterrupt+0x3c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a0a      	ldr	r2, [pc, #40]	@ (8010f80 <vPortSetupTimerInterrupt+0x40>)
 8010f56:	fba2 2303 	umull	r2, r3, r2, r3
 8010f5a:	099b      	lsrs	r3, r3, #6
 8010f5c:	4a09      	ldr	r2, [pc, #36]	@ (8010f84 <vPortSetupTimerInterrupt+0x44>)
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f62:	4b04      	ldr	r3, [pc, #16]	@ (8010f74 <vPortSetupTimerInterrupt+0x34>)
 8010f64:	2207      	movs	r2, #7
 8010f66:	601a      	str	r2, [r3, #0]
}
 8010f68:	bf00      	nop
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	e000e010 	.word	0xe000e010
 8010f78:	e000e018 	.word	0xe000e018
 8010f7c:	20000000 	.word	0x20000000
 8010f80:	10624dd3 	.word	0x10624dd3
 8010f84:	e000e014 	.word	0xe000e014

08010f88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010f98 <vPortEnableVFP+0x10>
 8010f8c:	6801      	ldr	r1, [r0, #0]
 8010f8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010f92:	6001      	str	r1, [r0, #0]
 8010f94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f96:	bf00      	nop
 8010f98:	e000ed88 	.word	0xe000ed88

08010f9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010fa2:	f3ef 8305 	mrs	r3, IPSR
 8010fa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2b0f      	cmp	r3, #15
 8010fac:	d917      	bls.n	8010fde <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010fae:	4a1a      	ldr	r2, [pc, #104]	@ (8011018 <vPortValidateInterruptPriority+0x7c>)
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010fb8:	4b18      	ldr	r3, [pc, #96]	@ (801101c <vPortValidateInterruptPriority+0x80>)
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	7afa      	ldrb	r2, [r7, #11]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d20d      	bcs.n	8010fde <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc6:	b672      	cpsid	i
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	b662      	cpsie	i
 8010fd6:	607b      	str	r3, [r7, #4]
}
 8010fd8:	bf00      	nop
 8010fda:	bf00      	nop
 8010fdc:	e7fd      	b.n	8010fda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010fde:	4b10      	ldr	r3, [pc, #64]	@ (8011020 <vPortValidateInterruptPriority+0x84>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8011024 <vPortValidateInterruptPriority+0x88>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d90d      	bls.n	801100a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ff2:	b672      	cpsid	i
 8010ff4:	f383 8811 	msr	BASEPRI, r3
 8010ff8:	f3bf 8f6f 	isb	sy
 8010ffc:	f3bf 8f4f 	dsb	sy
 8011000:	b662      	cpsie	i
 8011002:	603b      	str	r3, [r7, #0]
}
 8011004:	bf00      	nop
 8011006:	bf00      	nop
 8011008:	e7fd      	b.n	8011006 <vPortValidateInterruptPriority+0x6a>
	}
 801100a:	bf00      	nop
 801100c:	3714      	adds	r7, #20
 801100e:	46bd      	mov	sp, r7
 8011010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011014:	4770      	bx	lr
 8011016:	bf00      	nop
 8011018:	e000e3f0 	.word	0xe000e3f0
 801101c:	2000f0b8 	.word	0x2000f0b8
 8011020:	e000ed0c 	.word	0xe000ed0c
 8011024:	2000f0bc 	.word	0x2000f0bc

08011028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b08a      	sub	sp, #40	@ 0x28
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011030:	2300      	movs	r3, #0
 8011032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011034:	f7fe fba2 	bl	800f77c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011038:	4b5f      	ldr	r3, [pc, #380]	@ (80111b8 <pvPortMalloc+0x190>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d101      	bne.n	8011044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011040:	f000 f93c 	bl	80112bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011044:	4b5d      	ldr	r3, [pc, #372]	@ (80111bc <pvPortMalloc+0x194>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	4013      	ands	r3, r2
 801104c:	2b00      	cmp	r3, #0
 801104e:	f040 8094 	bne.w	801117a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d020      	beq.n	801109a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8011058:	2208      	movs	r2, #8
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4413      	add	r3, r2
 801105e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f003 0307 	and.w	r3, r3, #7
 8011066:	2b00      	cmp	r3, #0
 8011068:	d017      	beq.n	801109a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f023 0307 	bic.w	r3, r3, #7
 8011070:	3308      	adds	r3, #8
 8011072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f003 0307 	and.w	r3, r3, #7
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00d      	beq.n	801109a <pvPortMalloc+0x72>
	__asm volatile
 801107e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011082:	b672      	cpsid	i
 8011084:	f383 8811 	msr	BASEPRI, r3
 8011088:	f3bf 8f6f 	isb	sy
 801108c:	f3bf 8f4f 	dsb	sy
 8011090:	b662      	cpsie	i
 8011092:	617b      	str	r3, [r7, #20]
}
 8011094:	bf00      	nop
 8011096:	bf00      	nop
 8011098:	e7fd      	b.n	8011096 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d06c      	beq.n	801117a <pvPortMalloc+0x152>
 80110a0:	4b47      	ldr	r3, [pc, #284]	@ (80111c0 <pvPortMalloc+0x198>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d867      	bhi.n	801117a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80110aa:	4b46      	ldr	r3, [pc, #280]	@ (80111c4 <pvPortMalloc+0x19c>)
 80110ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80110ae:	4b45      	ldr	r3, [pc, #276]	@ (80111c4 <pvPortMalloc+0x19c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110b4:	e004      	b.n	80110c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80110b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80110ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d903      	bls.n	80110d2 <pvPortMalloc+0xaa>
 80110ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1f1      	bne.n	80110b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80110d2:	4b39      	ldr	r3, [pc, #228]	@ (80111b8 <pvPortMalloc+0x190>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110d8:	429a      	cmp	r2, r3
 80110da:	d04e      	beq.n	801117a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2208      	movs	r2, #8
 80110e2:	4413      	add	r3, r2
 80110e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80110ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f0:	685a      	ldr	r2, [r3, #4]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	1ad2      	subs	r2, r2, r3
 80110f6:	2308      	movs	r3, #8
 80110f8:	005b      	lsls	r3, r3, #1
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d922      	bls.n	8011144 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80110fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4413      	add	r3, r2
 8011104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	f003 0307 	and.w	r3, r3, #7
 801110c:	2b00      	cmp	r3, #0
 801110e:	d00d      	beq.n	801112c <pvPortMalloc+0x104>
	__asm volatile
 8011110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011114:	b672      	cpsid	i
 8011116:	f383 8811 	msr	BASEPRI, r3
 801111a:	f3bf 8f6f 	isb	sy
 801111e:	f3bf 8f4f 	dsb	sy
 8011122:	b662      	cpsie	i
 8011124:	613b      	str	r3, [r7, #16]
}
 8011126:	bf00      	nop
 8011128:	bf00      	nop
 801112a:	e7fd      	b.n	8011128 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112e:	685a      	ldr	r2, [r3, #4]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	1ad2      	subs	r2, r2, r3
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801113e:	69b8      	ldr	r0, [r7, #24]
 8011140:	f000 f91e 	bl	8011380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011144:	4b1e      	ldr	r3, [pc, #120]	@ (80111c0 <pvPortMalloc+0x198>)
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	4a1c      	ldr	r2, [pc, #112]	@ (80111c0 <pvPortMalloc+0x198>)
 8011150:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011152:	4b1b      	ldr	r3, [pc, #108]	@ (80111c0 <pvPortMalloc+0x198>)
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	4b1c      	ldr	r3, [pc, #112]	@ (80111c8 <pvPortMalloc+0x1a0>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	429a      	cmp	r2, r3
 801115c:	d203      	bcs.n	8011166 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801115e:	4b18      	ldr	r3, [pc, #96]	@ (80111c0 <pvPortMalloc+0x198>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	4a19      	ldr	r2, [pc, #100]	@ (80111c8 <pvPortMalloc+0x1a0>)
 8011164:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011168:	685a      	ldr	r2, [r3, #4]
 801116a:	4b14      	ldr	r3, [pc, #80]	@ (80111bc <pvPortMalloc+0x194>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	431a      	orrs	r2, r3
 8011170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011172:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011176:	2200      	movs	r2, #0
 8011178:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801117a:	f7fe fb0d 	bl	800f798 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011184:	f7ef fbc2 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	f003 0307 	and.w	r3, r3, #7
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00d      	beq.n	80111ae <pvPortMalloc+0x186>
	__asm volatile
 8011192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011196:	b672      	cpsid	i
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	b662      	cpsie	i
 80111a6:	60fb      	str	r3, [r7, #12]
}
 80111a8:	bf00      	nop
 80111aa:	bf00      	nop
 80111ac:	e7fd      	b.n	80111aa <pvPortMalloc+0x182>
	return pvReturn;
 80111ae:	69fb      	ldr	r3, [r7, #28]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3728      	adds	r7, #40	@ 0x28
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	200270c8 	.word	0x200270c8
 80111bc:	200270d4 	.word	0x200270d4
 80111c0:	200270cc 	.word	0x200270cc
 80111c4:	200270c0 	.word	0x200270c0
 80111c8:	200270d0 	.word	0x200270d0

080111cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b086      	sub	sp, #24
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d04e      	beq.n	801127c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80111de:	2308      	movs	r3, #8
 80111e0:	425b      	negs	r3, r3
 80111e2:	697a      	ldr	r2, [r7, #20]
 80111e4:	4413      	add	r3, r2
 80111e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	685a      	ldr	r2, [r3, #4]
 80111f0:	4b24      	ldr	r3, [pc, #144]	@ (8011284 <vPortFree+0xb8>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4013      	ands	r3, r2
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d10d      	bne.n	8011216 <vPortFree+0x4a>
	__asm volatile
 80111fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111fe:	b672      	cpsid	i
 8011200:	f383 8811 	msr	BASEPRI, r3
 8011204:	f3bf 8f6f 	isb	sy
 8011208:	f3bf 8f4f 	dsb	sy
 801120c:	b662      	cpsie	i
 801120e:	60fb      	str	r3, [r7, #12]
}
 8011210:	bf00      	nop
 8011212:	bf00      	nop
 8011214:	e7fd      	b.n	8011212 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00d      	beq.n	801123a <vPortFree+0x6e>
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011222:	b672      	cpsid	i
 8011224:	f383 8811 	msr	BASEPRI, r3
 8011228:	f3bf 8f6f 	isb	sy
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	b662      	cpsie	i
 8011232:	60bb      	str	r3, [r7, #8]
}
 8011234:	bf00      	nop
 8011236:	bf00      	nop
 8011238:	e7fd      	b.n	8011236 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	685a      	ldr	r2, [r3, #4]
 801123e:	4b11      	ldr	r3, [pc, #68]	@ (8011284 <vPortFree+0xb8>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	4013      	ands	r3, r2
 8011244:	2b00      	cmp	r3, #0
 8011246:	d019      	beq.n	801127c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d115      	bne.n	801127c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	685a      	ldr	r2, [r3, #4]
 8011254:	4b0b      	ldr	r3, [pc, #44]	@ (8011284 <vPortFree+0xb8>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	43db      	mvns	r3, r3
 801125a:	401a      	ands	r2, r3
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011260:	f7fe fa8c 	bl	800f77c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	685a      	ldr	r2, [r3, #4]
 8011268:	4b07      	ldr	r3, [pc, #28]	@ (8011288 <vPortFree+0xbc>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4413      	add	r3, r2
 801126e:	4a06      	ldr	r2, [pc, #24]	@ (8011288 <vPortFree+0xbc>)
 8011270:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011272:	6938      	ldr	r0, [r7, #16]
 8011274:	f000 f884 	bl	8011380 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011278:	f7fe fa8e 	bl	800f798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801127c:	bf00      	nop
 801127e:	3718      	adds	r7, #24
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	200270d4 	.word	0x200270d4
 8011288:	200270cc 	.word	0x200270cc

0801128c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801128c:	b480      	push	{r7}
 801128e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8011290:	4b03      	ldr	r3, [pc, #12]	@ (80112a0 <xPortGetFreeHeapSize+0x14>)
 8011292:	681b      	ldr	r3, [r3, #0]
}
 8011294:	4618      	mov	r0, r3
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	200270cc 	.word	0x200270cc

080112a4 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80112a4:	b480      	push	{r7}
 80112a6:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80112a8:	4b03      	ldr	r3, [pc, #12]	@ (80112b8 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80112aa:	681b      	ldr	r3, [r3, #0]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop
 80112b8:	200270d0 	.word	0x200270d0

080112bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80112bc:	b480      	push	{r7}
 80112be:	b085      	sub	sp, #20
 80112c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80112c2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 80112c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80112c8:	4b27      	ldr	r3, [pc, #156]	@ (8011368 <prvHeapInit+0xac>)
 80112ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	f003 0307 	and.w	r3, r3, #7
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00c      	beq.n	80112f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	3307      	adds	r3, #7
 80112da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f023 0307 	bic.w	r3, r3, #7
 80112e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	1ad3      	subs	r3, r2, r3
 80112ea:	4a1f      	ldr	r2, [pc, #124]	@ (8011368 <prvHeapInit+0xac>)
 80112ec:	4413      	add	r3, r2
 80112ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112f4:	4a1d      	ldr	r2, [pc, #116]	@ (801136c <prvHeapInit+0xb0>)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112fa:	4b1c      	ldr	r3, [pc, #112]	@ (801136c <prvHeapInit+0xb0>)
 80112fc:	2200      	movs	r2, #0
 80112fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	68ba      	ldr	r2, [r7, #8]
 8011304:	4413      	add	r3, r2
 8011306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011308:	2208      	movs	r2, #8
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	1a9b      	subs	r3, r3, r2
 801130e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f023 0307 	bic.w	r3, r3, #7
 8011316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	4a15      	ldr	r2, [pc, #84]	@ (8011370 <prvHeapInit+0xb4>)
 801131c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801131e:	4b14      	ldr	r3, [pc, #80]	@ (8011370 <prvHeapInit+0xb4>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2200      	movs	r2, #0
 8011324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011326:	4b12      	ldr	r3, [pc, #72]	@ (8011370 <prvHeapInit+0xb4>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2200      	movs	r2, #0
 801132c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	1ad2      	subs	r2, r2, r3
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801133c:	4b0c      	ldr	r3, [pc, #48]	@ (8011370 <prvHeapInit+0xb4>)
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	4a0a      	ldr	r2, [pc, #40]	@ (8011374 <prvHeapInit+0xb8>)
 801134a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	4a09      	ldr	r2, [pc, #36]	@ (8011378 <prvHeapInit+0xbc>)
 8011352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011354:	4b09      	ldr	r3, [pc, #36]	@ (801137c <prvHeapInit+0xc0>)
 8011356:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801135a:	601a      	str	r2, [r3, #0]
}
 801135c:	bf00      	nop
 801135e:	3714      	adds	r7, #20
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr
 8011368:	2000f0c0 	.word	0x2000f0c0
 801136c:	200270c0 	.word	0x200270c0
 8011370:	200270c8 	.word	0x200270c8
 8011374:	200270d0 	.word	0x200270d0
 8011378:	200270cc 	.word	0x200270cc
 801137c:	200270d4 	.word	0x200270d4

08011380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011380:	b480      	push	{r7}
 8011382:	b085      	sub	sp, #20
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011388:	4b28      	ldr	r3, [pc, #160]	@ (801142c <prvInsertBlockIntoFreeList+0xac>)
 801138a:	60fb      	str	r3, [r7, #12]
 801138c:	e002      	b.n	8011394 <prvInsertBlockIntoFreeList+0x14>
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	60fb      	str	r3, [r7, #12]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	687a      	ldr	r2, [r7, #4]
 801139a:	429a      	cmp	r2, r3
 801139c:	d8f7      	bhi.n	801138e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	4413      	add	r3, r2
 80113aa:	687a      	ldr	r2, [r7, #4]
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d108      	bne.n	80113c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	685a      	ldr	r2, [r3, #4]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	441a      	add	r2, r3
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	68ba      	ldr	r2, [r7, #8]
 80113cc:	441a      	add	r2, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d118      	bne.n	8011408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	4b15      	ldr	r3, [pc, #84]	@ (8011430 <prvInsertBlockIntoFreeList+0xb0>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	429a      	cmp	r2, r3
 80113e0:	d00d      	beq.n	80113fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685a      	ldr	r2, [r3, #4]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	441a      	add	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	e008      	b.n	8011410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80113fe:	4b0c      	ldr	r3, [pc, #48]	@ (8011430 <prvInsertBlockIntoFreeList+0xb0>)
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	601a      	str	r2, [r3, #0]
 8011406:	e003      	b.n	8011410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011410:	68fa      	ldr	r2, [r7, #12]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	429a      	cmp	r2, r3
 8011416:	d002      	beq.n	801141e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	687a      	ldr	r2, [r7, #4]
 801141c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801141e:	bf00      	nop
 8011420:	3714      	adds	r7, #20
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr
 801142a:	bf00      	nop
 801142c:	200270c0 	.word	0x200270c0
 8011430:	200270c8 	.word	0x200270c8

08011434 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	22fa      	movs	r2, #250	@ 0xfa
 8011442:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	330c      	adds	r3, #12
 801144a:	461a      	mov	r2, r3
 801144c:	6839      	ldr	r1, [r7, #0]
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f002 f9c2 	bl	80137d8 <tcpip_send_msg_wait_sem>
 8011454:	4603      	mov	r3, r0
 8011456:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d103      	bne.n	8011468 <netconn_apimsg+0x34>
    return apimsg->err;
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011466:	e001      	b.n	801146c <netconn_apimsg+0x38>
  }
  return err;
 8011468:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b08c      	sub	sp, #48	@ 0x30
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	603a      	str	r2, [r7, #0]
 801147e:	71fb      	strb	r3, [r7, #7]
 8011480:	460b      	mov	r3, r1
 8011482:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011484:	79fb      	ldrb	r3, [r7, #7]
 8011486:	6839      	ldr	r1, [r7, #0]
 8011488:	4618      	mov	r0, r3
 801148a:	f000 ff61 	bl	8012350 <netconn_alloc>
 801148e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8011490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011492:	2b00      	cmp	r3, #0
 8011494:	d054      	beq.n	8011540 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8011496:	79bb      	ldrb	r3, [r7, #6]
 8011498:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801149a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801149e:	f107 0308 	add.w	r3, r7, #8
 80114a2:	4619      	mov	r1, r3
 80114a4:	4829      	ldr	r0, [pc, #164]	@ (801154c <netconn_new_with_proto_and_callback+0xd8>)
 80114a6:	f7ff ffc5 	bl	8011434 <netconn_apimsg>
 80114aa:	4603      	mov	r3, r0
 80114ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80114b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d043      	beq.n	8011540 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80114b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d005      	beq.n	80114cc <netconn_new_with_proto_and_callback+0x58>
 80114c0:	4b23      	ldr	r3, [pc, #140]	@ (8011550 <netconn_new_with_proto_and_callback+0xdc>)
 80114c2:	22a3      	movs	r2, #163	@ 0xa3
 80114c4:	4923      	ldr	r1, [pc, #140]	@ (8011554 <netconn_new_with_proto_and_callback+0xe0>)
 80114c6:	4824      	ldr	r0, [pc, #144]	@ (8011558 <netconn_new_with_proto_and_callback+0xe4>)
 80114c8:	f010 f85a 	bl	8021580 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80114cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ce:	3310      	adds	r3, #16
 80114d0:	4618      	mov	r0, r3
 80114d2:	f00e fd59 	bl	801ff88 <sys_mbox_valid>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d105      	bne.n	80114e8 <netconn_new_with_proto_and_callback+0x74>
 80114dc:	4b1c      	ldr	r3, [pc, #112]	@ (8011550 <netconn_new_with_proto_and_callback+0xdc>)
 80114de:	22a4      	movs	r2, #164	@ 0xa4
 80114e0:	491e      	ldr	r1, [pc, #120]	@ (801155c <netconn_new_with_proto_and_callback+0xe8>)
 80114e2:	481d      	ldr	r0, [pc, #116]	@ (8011558 <netconn_new_with_proto_and_callback+0xe4>)
 80114e4:	f010 f84c 	bl	8021580 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80114e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ea:	3314      	adds	r3, #20
 80114ec:	4618      	mov	r0, r3
 80114ee:	f00e fd4b 	bl	801ff88 <sys_mbox_valid>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d005      	beq.n	8011504 <netconn_new_with_proto_and_callback+0x90>
 80114f8:	4b15      	ldr	r3, [pc, #84]	@ (8011550 <netconn_new_with_proto_and_callback+0xdc>)
 80114fa:	22a6      	movs	r2, #166	@ 0xa6
 80114fc:	4918      	ldr	r1, [pc, #96]	@ (8011560 <netconn_new_with_proto_and_callback+0xec>)
 80114fe:	4816      	ldr	r0, [pc, #88]	@ (8011558 <netconn_new_with_proto_and_callback+0xe4>)
 8011500:	f010 f83e 	bl	8021580 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8011504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011506:	330c      	adds	r3, #12
 8011508:	4618      	mov	r0, r3
 801150a:	f00e fdf7 	bl	80200fc <sys_sem_valid>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d105      	bne.n	8011520 <netconn_new_with_proto_and_callback+0xac>
 8011514:	4b0e      	ldr	r3, [pc, #56]	@ (8011550 <netconn_new_with_proto_and_callback+0xdc>)
 8011516:	22a9      	movs	r2, #169	@ 0xa9
 8011518:	4912      	ldr	r1, [pc, #72]	@ (8011564 <netconn_new_with_proto_and_callback+0xf0>)
 801151a:	480f      	ldr	r0, [pc, #60]	@ (8011558 <netconn_new_with_proto_and_callback+0xe4>)
 801151c:	f010 f830 	bl	8021580 <iprintf>
      sys_sem_free(&conn->op_completed);
 8011520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011522:	330c      	adds	r3, #12
 8011524:	4618      	mov	r0, r3
 8011526:	f00e fdd1 	bl	80200cc <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	3310      	adds	r3, #16
 801152e:	4618      	mov	r0, r3
 8011530:	f00e fc96 	bl	801fe60 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011534:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011536:	2007      	movs	r0, #7
 8011538:	f002 fff6 	bl	8014528 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801153c:	2300      	movs	r3, #0
 801153e:	e000      	b.n	8011542 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8011540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011542:	4618      	mov	r0, r3
 8011544:	3730      	adds	r7, #48	@ 0x30
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	08012325 	.word	0x08012325
 8011550:	080227f0 	.word	0x080227f0
 8011554:	08022824 	.word	0x08022824
 8011558:	08022848 	.word	0x08022848
 801155c:	08022870 	.word	0x08022870
 8011560:	08022888 	.word	0x08022888
 8011564:	080228ac 	.word	0x080228ac

08011568 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b08c      	sub	sp, #48	@ 0x30
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d101      	bne.n	801157a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011576:	2300      	movs	r3, #0
 8011578:	e014      	b.n	80115a4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801157e:	2329      	movs	r3, #41	@ 0x29
 8011580:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8011582:	f107 030c 	add.w	r3, r7, #12
 8011586:	4619      	mov	r1, r3
 8011588:	4808      	ldr	r0, [pc, #32]	@ (80115ac <netconn_prepare_delete+0x44>)
 801158a:	f7ff ff53 	bl	8011434 <netconn_apimsg>
 801158e:	4603      	mov	r3, r0
 8011590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011594:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011598:	2b00      	cmp	r3, #0
 801159a:	d002      	beq.n	80115a2 <netconn_prepare_delete+0x3a>
    return err;
 801159c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80115a0:	e000      	b.n	80115a4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80115a2:	2300      	movs	r3, #0
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3730      	adds	r7, #48	@ 0x30
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	08012891 	.word	0x08012891

080115b0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <netconn_delete+0x12>
    return ERR_OK;
 80115be:	2300      	movs	r3, #0
 80115c0:	e00d      	b.n	80115de <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7ff ffd0 	bl	8011568 <netconn_prepare_delete>
 80115c8:	4603      	mov	r3, r0
 80115ca:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80115cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d102      	bne.n	80115da <netconn_delete+0x2a>
    netconn_free(conn);
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f000 ff29 	bl	801242c <netconn_free>
  }
  return err;
 80115da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3710      	adds	r7, #16
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
	...

080115e8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b08e      	sub	sp, #56	@ 0x38
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	4613      	mov	r3, r2
 80115f4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d109      	bne.n	8011610 <netconn_bind+0x28>
 80115fc:	4b11      	ldr	r3, [pc, #68]	@ (8011644 <netconn_bind+0x5c>)
 80115fe:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8011602:	4911      	ldr	r1, [pc, #68]	@ (8011648 <netconn_bind+0x60>)
 8011604:	4811      	ldr	r0, [pc, #68]	@ (801164c <netconn_bind+0x64>)
 8011606:	f00f ffbb 	bl	8021580 <iprintf>
 801160a:	f06f 030f 	mvn.w	r3, #15
 801160e:	e015      	b.n	801163c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d101      	bne.n	801161a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8011616:	4b0e      	ldr	r3, [pc, #56]	@ (8011650 <netconn_bind+0x68>)
 8011618:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011622:	88fb      	ldrh	r3, [r7, #6]
 8011624:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011626:	f107 0314 	add.w	r3, r7, #20
 801162a:	4619      	mov	r1, r3
 801162c:	4809      	ldr	r0, [pc, #36]	@ (8011654 <netconn_bind+0x6c>)
 801162e:	f7ff ff01 	bl	8011434 <netconn_apimsg>
 8011632:	4603      	mov	r3, r0
 8011634:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011638:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801163c:	4618      	mov	r0, r3
 801163e:	3738      	adds	r7, #56	@ 0x38
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	080227f0 	.word	0x080227f0
 8011648:	08022928 	.word	0x08022928
 801164c:	08022848 	.word	0x08022848
 8011650:	08027410 	.word	0x08027410
 8011654:	08012a59 	.word	0x08012a59

08011658 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b08e      	sub	sp, #56	@ 0x38
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	4613      	mov	r3, r2
 8011664:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d109      	bne.n	8011680 <netconn_connect+0x28>
 801166c:	4b11      	ldr	r3, [pc, #68]	@ (80116b4 <netconn_connect+0x5c>)
 801166e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8011672:	4911      	ldr	r1, [pc, #68]	@ (80116b8 <netconn_connect+0x60>)
 8011674:	4811      	ldr	r0, [pc, #68]	@ (80116bc <netconn_connect+0x64>)
 8011676:	f00f ff83 	bl	8021580 <iprintf>
 801167a:	f06f 030f 	mvn.w	r3, #15
 801167e:	e015      	b.n	80116ac <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d101      	bne.n	801168a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8011686:	4b0e      	ldr	r3, [pc, #56]	@ (80116c0 <netconn_connect+0x68>)
 8011688:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011692:	88fb      	ldrh	r3, [r7, #6]
 8011694:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8011696:	f107 0314 	add.w	r3, r7, #20
 801169a:	4619      	mov	r1, r3
 801169c:	4809      	ldr	r0, [pc, #36]	@ (80116c4 <netconn_connect+0x6c>)
 801169e:	f7ff fec9 	bl	8011434 <netconn_apimsg>
 80116a2:	4603      	mov	r3, r0
 80116a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80116a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3738      	adds	r7, #56	@ 0x38
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	080227f0 	.word	0x080227f0
 80116b8:	08022964 	.word	0x08022964
 80116bc:	08022848 	.word	0x08022848
 80116c0:	08027410 	.word	0x08027410
 80116c4:	08012bed 	.word	0x08012bed

080116c8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b08c      	sub	sp, #48	@ 0x30
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d109      	bne.n	80116ea <netconn_disconnect+0x22>
 80116d6:	4b0d      	ldr	r3, [pc, #52]	@ (801170c <netconn_disconnect+0x44>)
 80116d8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80116dc:	490c      	ldr	r1, [pc, #48]	@ (8011710 <netconn_disconnect+0x48>)
 80116de:	480d      	ldr	r0, [pc, #52]	@ (8011714 <netconn_disconnect+0x4c>)
 80116e0:	f00f ff4e 	bl	8021580 <iprintf>
 80116e4:	f06f 030f 	mvn.w	r3, #15
 80116e8:	e00c      	b.n	8011704 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 80116ee:	f107 030c 	add.w	r3, r7, #12
 80116f2:	4619      	mov	r1, r3
 80116f4:	4808      	ldr	r0, [pc, #32]	@ (8011718 <netconn_disconnect+0x50>)
 80116f6:	f7ff fe9d 	bl	8011434 <netconn_apimsg>
 80116fa:	4603      	mov	r3, r0
 80116fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011700:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011704:	4618      	mov	r0, r3
 8011706:	3730      	adds	r7, #48	@ 0x30
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	080227f0 	.word	0x080227f0
 8011710:	08022984 	.word	0x08022984
 8011714:	08022848 	.word	0x08022848
 8011718:	08012d69 	.word	0x08012d69

0801171c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b088      	sub	sp, #32
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	4613      	mov	r3, r2
 8011728:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801172a:	2300      	movs	r3, #0
 801172c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d109      	bne.n	8011748 <netconn_recv_data+0x2c>
 8011734:	4b58      	ldr	r3, [pc, #352]	@ (8011898 <netconn_recv_data+0x17c>)
 8011736:	f44f 7212 	mov.w	r2, #584	@ 0x248
 801173a:	4958      	ldr	r1, [pc, #352]	@ (801189c <netconn_recv_data+0x180>)
 801173c:	4858      	ldr	r0, [pc, #352]	@ (80118a0 <netconn_recv_data+0x184>)
 801173e:	f00f ff1f 	bl	8021580 <iprintf>
 8011742:	f06f 030f 	mvn.w	r3, #15
 8011746:	e0a2      	b.n	801188e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	2200      	movs	r2, #0
 801174c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d109      	bne.n	8011768 <netconn_recv_data+0x4c>
 8011754:	4b50      	ldr	r3, [pc, #320]	@ (8011898 <netconn_recv_data+0x17c>)
 8011756:	f240 224a 	movw	r2, #586	@ 0x24a
 801175a:	4952      	ldr	r1, [pc, #328]	@ (80118a4 <netconn_recv_data+0x188>)
 801175c:	4850      	ldr	r0, [pc, #320]	@ (80118a0 <netconn_recv_data+0x184>)
 801175e:	f00f ff0f 	bl	8021580 <iprintf>
 8011762:	f06f 030f 	mvn.w	r3, #15
 8011766:	e092      	b.n	801188e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	3310      	adds	r3, #16
 801176c:	4618      	mov	r0, r3
 801176e:	f00e fc0b 	bl	801ff88 <sys_mbox_valid>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d10e      	bne.n	8011796 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f000 fa23 	bl	8011bc4 <netconn_err>
 801177e:	4603      	mov	r3, r0
 8011780:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8011782:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d002      	beq.n	8011790 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801178a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801178e:	e07e      	b.n	801188e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011790:	f06f 030a 	mvn.w	r3, #10
 8011794:	e07b      	b.n	801188e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	7f1b      	ldrb	r3, [r3, #28]
 801179a:	f003 0302 	and.w	r3, r3, #2
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d10f      	bne.n	80117c2 <netconn_recv_data+0xa6>
 80117a2:	79fb      	ldrb	r3, [r7, #7]
 80117a4:	f003 0304 	and.w	r3, r3, #4
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d10a      	bne.n	80117c2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	7f1b      	ldrb	r3, [r3, #28]
 80117b0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d104      	bne.n	80117c2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d023      	beq.n	801180a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	3310      	adds	r3, #16
 80117c6:	f107 0218 	add.w	r2, r7, #24
 80117ca:	4611      	mov	r1, r2
 80117cc:	4618      	mov	r0, r3
 80117ce:	f00e fbc4 	bl	801ff5a <sys_arch_mbox_tryfetch>
 80117d2:	4603      	mov	r3, r0
 80117d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80117d8:	d11f      	bne.n	801181a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f000 f9f2 	bl	8011bc4 <netconn_err>
 80117e0:	4603      	mov	r3, r0
 80117e2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80117e4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d002      	beq.n	80117f2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80117ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80117f0:	e04d      	b.n	801188e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	7f1b      	ldrb	r3, [r3, #28]
 80117f6:	f003 0301 	and.w	r3, r3, #1
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d002      	beq.n	8011804 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80117fe:	f06f 030a 	mvn.w	r3, #10
 8011802:	e044      	b.n	801188e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8011804:	f06f 0306 	mvn.w	r3, #6
 8011808:	e041      	b.n	801188e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	3310      	adds	r3, #16
 801180e:	f107 0118 	add.w	r1, r7, #24
 8011812:	2200      	movs	r2, #0
 8011814:	4618      	mov	r0, r3
 8011816:	f00e fb6f 	bl	801fef8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011822:	2b10      	cmp	r3, #16
 8011824:	d117      	bne.n	8011856 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	f107 0217 	add.w	r2, r7, #23
 801182c:	4611      	mov	r1, r2
 801182e:	4618      	mov	r0, r3
 8011830:	f000 fa1a 	bl	8011c68 <lwip_netconn_is_err_msg>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d009      	beq.n	801184e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801183a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801183e:	f113 0f0f 	cmn.w	r3, #15
 8011842:	d101      	bne.n	8011848 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8011844:	2300      	movs	r3, #0
 8011846:	e022      	b.n	801188e <netconn_recv_data+0x172>
      }
      return err;
 8011848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801184c:	e01f      	b.n	801188e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	891b      	ldrh	r3, [r3, #8]
 8011852:	83fb      	strh	r3, [r7, #30]
 8011854:	e00d      	b.n	8011872 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d106      	bne.n	801186a <netconn_recv_data+0x14e>
 801185c:	4b0e      	ldr	r3, [pc, #56]	@ (8011898 <netconn_recv_data+0x17c>)
 801185e:	f240 2291 	movw	r2, #657	@ 0x291
 8011862:	4911      	ldr	r1, [pc, #68]	@ (80118a8 <netconn_recv_data+0x18c>)
 8011864:	480e      	ldr	r0, [pc, #56]	@ (80118a0 <netconn_recv_data+0x184>)
 8011866:	f00f fe8b 	bl	8021580 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	891b      	ldrh	r3, [r3, #8]
 8011870:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011876:	2b00      	cmp	r3, #0
 8011878:	d005      	beq.n	8011886 <netconn_recv_data+0x16a>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801187e:	8bfa      	ldrh	r2, [r7, #30]
 8011880:	2101      	movs	r1, #1
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8011886:	69ba      	ldr	r2, [r7, #24]
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801188c:	2300      	movs	r3, #0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3720      	adds	r7, #32
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	080227f0 	.word	0x080227f0
 801189c:	08022a08 	.word	0x08022a08
 80118a0:	08022848 	.word	0x08022848
 80118a4:	08022a28 	.word	0x08022a28
 80118a8:	08022a44 	.word	0x08022a44

080118ac <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d005      	beq.n	80118ca <netconn_tcp_recvd_msg+0x1e>
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80118c6:	2b10      	cmp	r3, #16
 80118c8:	d009      	beq.n	80118de <netconn_tcp_recvd_msg+0x32>
 80118ca:	4b0c      	ldr	r3, [pc, #48]	@ (80118fc <netconn_tcp_recvd_msg+0x50>)
 80118cc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80118d0:	490b      	ldr	r1, [pc, #44]	@ (8011900 <netconn_tcp_recvd_msg+0x54>)
 80118d2:	480c      	ldr	r0, [pc, #48]	@ (8011904 <netconn_tcp_recvd_msg+0x58>)
 80118d4:	f00f fe54 	bl	8021580 <iprintf>
 80118d8:	f06f 030f 	mvn.w	r3, #15
 80118dc:	e00a      	b.n	80118f4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	68ba      	ldr	r2, [r7, #8]
 80118e8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80118ea:	6879      	ldr	r1, [r7, #4]
 80118ec:	4806      	ldr	r0, [pc, #24]	@ (8011908 <netconn_tcp_recvd_msg+0x5c>)
 80118ee:	f7ff fda1 	bl	8011434 <netconn_apimsg>
 80118f2:	4603      	mov	r3, r0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	080227f0 	.word	0x080227f0
 8011900:	08022a50 	.word	0x08022a50
 8011904:	08022848 	.word	0x08022848
 8011908:	08012e3f 	.word	0x08012e3f

0801190c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b090      	sub	sp, #64	@ 0x40
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	4613      	mov	r3, r2
 8011918:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3310      	adds	r3, #16
 801191e:	4618      	mov	r0, r3
 8011920:	f00e fb32 	bl	801ff88 <sys_mbox_valid>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d102      	bne.n	8011930 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801192a:	f06f 030a 	mvn.w	r3, #10
 801192e:	e06d      	b.n	8011a0c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	7f1b      	ldrb	r3, [r3, #28]
 8011934:	b25b      	sxtb	r3, r3
 8011936:	2b00      	cmp	r3, #0
 8011938:	da07      	bge.n	801194a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	7f1b      	ldrb	r3, [r3, #28]
 801193e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011942:	b2da      	uxtb	r2, r3
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011948:	e039      	b.n	80119be <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801194a:	79fb      	ldrb	r3, [r7, #7]
 801194c:	461a      	mov	r2, r3
 801194e:	68b9      	ldr	r1, [r7, #8]
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f7ff fee3 	bl	801171c <netconn_recv_data>
 8011956:	4603      	mov	r3, r0
 8011958:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 801195c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011960:	2b00      	cmp	r3, #0
 8011962:	d002      	beq.n	801196a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8011964:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011968:	e050      	b.n	8011a0c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011970:	79fb      	ldrb	r3, [r7, #7]
 8011972:	f003 0308 	and.w	r3, r3, #8
 8011976:	2b00      	cmp	r3, #0
 8011978:	d10e      	bne.n	8011998 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801197a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801197c:	2b00      	cmp	r3, #0
 801197e:	d002      	beq.n	8011986 <netconn_recv_data_tcp+0x7a>
 8011980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011982:	891b      	ldrh	r3, [r3, #8]
 8011984:	e000      	b.n	8011988 <netconn_recv_data_tcp+0x7c>
 8011986:	2301      	movs	r3, #1
 8011988:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801198a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801198c:	f107 0214 	add.w	r2, r7, #20
 8011990:	4619      	mov	r1, r3
 8011992:	68f8      	ldr	r0, [r7, #12]
 8011994:	f7ff ff8a 	bl	80118ac <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801199a:	2b00      	cmp	r3, #0
 801199c:	d134      	bne.n	8011a08 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801199e:	79fb      	ldrb	r3, [r7, #7]
 80119a0:	f003 0310 	and.w	r3, r3, #16
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d009      	beq.n	80119bc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	7f1b      	ldrb	r3, [r3, #28]
 80119ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80119b0:	b2da      	uxtb	r2, r3
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80119b6:	f06f 0306 	mvn.w	r3, #6
 80119ba:	e027      	b.n	8011a0c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80119bc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d005      	beq.n	80119d2 <netconn_recv_data_tcp+0xc6>
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ca:	2200      	movs	r2, #0
 80119cc:	2101      	movs	r1, #1
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d10f      	bne.n	80119fa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80119da:	68f8      	ldr	r0, [r7, #12]
 80119dc:	f000 f8f2 	bl	8011bc4 <netconn_err>
 80119e0:	4603      	mov	r3, r0
 80119e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80119e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d002      	beq.n	80119f4 <netconn_recv_data_tcp+0xe8>
          return err;
 80119ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80119f2:	e00b      	b.n	8011a0c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80119f4:	f06f 030d 	mvn.w	r3, #13
 80119f8:	e008      	b.n	8011a0c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80119fa:	2101      	movs	r1, #1
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f000 f8b1 	bl	8011b64 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8011a02:	f06f 030e 	mvn.w	r3, #14
 8011a06:	e001      	b.n	8011a0c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011a08:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3740      	adds	r7, #64	@ 0x40
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b086      	sub	sp, #24
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d109      	bne.n	8011a3c <netconn_recv+0x28>
 8011a28:	4b32      	ldr	r3, [pc, #200]	@ (8011af4 <netconn_recv+0xe0>)
 8011a2a:	f240 3263 	movw	r2, #867	@ 0x363
 8011a2e:	4932      	ldr	r1, [pc, #200]	@ (8011af8 <netconn_recv+0xe4>)
 8011a30:	4832      	ldr	r0, [pc, #200]	@ (8011afc <netconn_recv+0xe8>)
 8011a32:	f00f fda5 	bl	8021580 <iprintf>
 8011a36:	f06f 030f 	mvn.w	r3, #15
 8011a3a:	e056      	b.n	8011aea <netconn_recv+0xd6>
  *new_buf = NULL;
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d109      	bne.n	8011a5c <netconn_recv+0x48>
 8011a48:	4b2a      	ldr	r3, [pc, #168]	@ (8011af4 <netconn_recv+0xe0>)
 8011a4a:	f240 3265 	movw	r2, #869	@ 0x365
 8011a4e:	492c      	ldr	r1, [pc, #176]	@ (8011b00 <netconn_recv+0xec>)
 8011a50:	482a      	ldr	r0, [pc, #168]	@ (8011afc <netconn_recv+0xe8>)
 8011a52:	f00f fd95 	bl	8021580 <iprintf>
 8011a56:	f06f 030f 	mvn.w	r3, #15
 8011a5a:	e046      	b.n	8011aea <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a64:	2b10      	cmp	r3, #16
 8011a66:	d13a      	bne.n	8011ade <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011a6c:	2006      	movs	r0, #6
 8011a6e:	f002 fcdf 	bl	8014430 <memp_malloc>
 8011a72:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d102      	bne.n	8011a80 <netconn_recv+0x6c>
      return ERR_MEM;
 8011a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a7e:	e034      	b.n	8011aea <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011a80:	f107 030c 	add.w	r3, r7, #12
 8011a84:	2200      	movs	r2, #0
 8011a86:	4619      	mov	r1, r3
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff ff3f 	bl	801190c <netconn_recv_data_tcp>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011a92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d006      	beq.n	8011aa8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011a9a:	6979      	ldr	r1, [r7, #20]
 8011a9c:	2006      	movs	r0, #6
 8011a9e:	f002 fd43 	bl	8014528 <memp_free>
      return err;
 8011aa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011aa6:	e020      	b.n	8011aea <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d106      	bne.n	8011abc <netconn_recv+0xa8>
 8011aae:	4b11      	ldr	r3, [pc, #68]	@ (8011af4 <netconn_recv+0xe0>)
 8011ab0:	f240 3279 	movw	r2, #889	@ 0x379
 8011ab4:	4913      	ldr	r1, [pc, #76]	@ (8011b04 <netconn_recv+0xf0>)
 8011ab6:	4811      	ldr	r0, [pc, #68]	@ (8011afc <netconn_recv+0xe8>)
 8011ab8:	f00f fd62 	bl	8021580 <iprintf>

    buf->p = p;
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	2200      	movs	r2, #0
 8011acc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	697a      	ldr	r2, [r7, #20]
 8011ad8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011ada:	2300      	movs	r3, #0
 8011adc:	e005      	b.n	8011aea <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011ade:	2200      	movs	r2, #0
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7ff fe1a 	bl	801171c <netconn_recv_data>
 8011ae8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3718      	adds	r7, #24
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	080227f0 	.word	0x080227f0
 8011af8:	08022a08 	.word	0x08022a08
 8011afc:	08022848 	.word	0x08022848
 8011b00:	08022a28 	.word	0x08022a28
 8011b04:	08022aa0 	.word	0x08022aa0

08011b08 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b08c      	sub	sp, #48	@ 0x30
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d109      	bne.n	8011b2c <netconn_send+0x24>
 8011b18:	4b0e      	ldr	r3, [pc, #56]	@ (8011b54 <netconn_send+0x4c>)
 8011b1a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8011b1e:	490e      	ldr	r1, [pc, #56]	@ (8011b58 <netconn_send+0x50>)
 8011b20:	480e      	ldr	r0, [pc, #56]	@ (8011b5c <netconn_send+0x54>)
 8011b22:	f00f fd2d 	bl	8021580 <iprintf>
 8011b26:	f06f 030f 	mvn.w	r3, #15
 8011b2a:	e00e      	b.n	8011b4a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011b34:	f107 030c 	add.w	r3, r7, #12
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4809      	ldr	r0, [pc, #36]	@ (8011b60 <netconn_send+0x58>)
 8011b3c:	f7ff fc7a 	bl	8011434 <netconn_apimsg>
 8011b40:	4603      	mov	r3, r0
 8011b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011b46:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3730      	adds	r7, #48	@ 0x30
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	080227f0 	.word	0x080227f0
 8011b58:	08022aac 	.word	0x08022aac
 8011b5c:	08022848 	.word	0x08022848
 8011b60:	08012da5 	.word	0x08012da5

08011b64 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b08c      	sub	sp, #48	@ 0x30
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d109      	bne.n	8011b8a <netconn_close_shutdown+0x26>
 8011b76:	4b0f      	ldr	r3, [pc, #60]	@ (8011bb4 <netconn_close_shutdown+0x50>)
 8011b78:	f240 4247 	movw	r2, #1095	@ 0x447
 8011b7c:	490e      	ldr	r1, [pc, #56]	@ (8011bb8 <netconn_close_shutdown+0x54>)
 8011b7e:	480f      	ldr	r0, [pc, #60]	@ (8011bbc <netconn_close_shutdown+0x58>)
 8011b80:	f00f fcfe 	bl	8021580 <iprintf>
 8011b84:	f06f 030f 	mvn.w	r3, #15
 8011b88:	e010      	b.n	8011bac <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8011b8e:	78fb      	ldrb	r3, [r7, #3]
 8011b90:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011b92:	2329      	movs	r3, #41	@ 0x29
 8011b94:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011b96:	f107 030c 	add.w	r3, r7, #12
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	4808      	ldr	r0, [pc, #32]	@ (8011bc0 <netconn_close_shutdown+0x5c>)
 8011b9e:	f7ff fc49 	bl	8011434 <netconn_apimsg>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011ba8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3730      	adds	r7, #48	@ 0x30
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	080227f0 	.word	0x080227f0
 8011bb8:	08022b2c 	.word	0x08022b2c
 8011bbc:	08022848 	.word	0x08022848
 8011bc0:	08013241 	.word	0x08013241

08011bc4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <netconn_err+0x12>
    return ERR_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	e00d      	b.n	8011bf2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011bd6:	f00e fb2d 	bl	8020234 <sys_arch_protect>
 8011bda:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	7a1b      	ldrb	r3, [r3, #8]
 8011be0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2200      	movs	r2, #0
 8011be6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f00e fb31 	bl	8020250 <sys_arch_unprotect>
  return err;
 8011bee:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3710      	adds	r7, #16
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
	...

08011bfc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	4603      	mov	r3, r0
 8011c04:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c0a:	f113 0f0d 	cmn.w	r3, #13
 8011c0e:	d009      	beq.n	8011c24 <lwip_netconn_err_to_msg+0x28>
 8011c10:	f113 0f0d 	cmn.w	r3, #13
 8011c14:	dc0c      	bgt.n	8011c30 <lwip_netconn_err_to_msg+0x34>
 8011c16:	f113 0f0f 	cmn.w	r3, #15
 8011c1a:	d007      	beq.n	8011c2c <lwip_netconn_err_to_msg+0x30>
 8011c1c:	f113 0f0e 	cmn.w	r3, #14
 8011c20:	d002      	beq.n	8011c28 <lwip_netconn_err_to_msg+0x2c>
 8011c22:	e005      	b.n	8011c30 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011c24:	4b0a      	ldr	r3, [pc, #40]	@ (8011c50 <lwip_netconn_err_to_msg+0x54>)
 8011c26:	e00e      	b.n	8011c46 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011c28:	4b0a      	ldr	r3, [pc, #40]	@ (8011c54 <lwip_netconn_err_to_msg+0x58>)
 8011c2a:	e00c      	b.n	8011c46 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8011c58 <lwip_netconn_err_to_msg+0x5c>)
 8011c2e:	e00a      	b.n	8011c46 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d005      	beq.n	8011c44 <lwip_netconn_err_to_msg+0x48>
 8011c38:	4b08      	ldr	r3, [pc, #32]	@ (8011c5c <lwip_netconn_err_to_msg+0x60>)
 8011c3a:	227d      	movs	r2, #125	@ 0x7d
 8011c3c:	4908      	ldr	r1, [pc, #32]	@ (8011c60 <lwip_netconn_err_to_msg+0x64>)
 8011c3e:	4809      	ldr	r0, [pc, #36]	@ (8011c64 <lwip_netconn_err_to_msg+0x68>)
 8011c40:	f00f fc9e 	bl	8021580 <iprintf>
      return NULL;
 8011c44:	2300      	movs	r3, #0
  }
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	08027294 	.word	0x08027294
 8011c54:	08027295 	.word	0x08027295
 8011c58:	08027296 	.word	0x08027296
 8011c5c:	08022b48 	.word	0x08022b48
 8011c60:	08022b7c 	.word	0x08022b7c
 8011c64:	08022b8c 	.word	0x08022b8c

08011c68 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d105      	bne.n	8011c84 <lwip_netconn_is_err_msg+0x1c>
 8011c78:	4b12      	ldr	r3, [pc, #72]	@ (8011cc4 <lwip_netconn_is_err_msg+0x5c>)
 8011c7a:	2285      	movs	r2, #133	@ 0x85
 8011c7c:	4912      	ldr	r1, [pc, #72]	@ (8011cc8 <lwip_netconn_is_err_msg+0x60>)
 8011c7e:	4813      	ldr	r0, [pc, #76]	@ (8011ccc <lwip_netconn_is_err_msg+0x64>)
 8011c80:	f00f fc7e 	bl	8021580 <iprintf>

  if (msg == &netconn_aborted) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	4a12      	ldr	r2, [pc, #72]	@ (8011cd0 <lwip_netconn_is_err_msg+0x68>)
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	d104      	bne.n	8011c96 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	22f3      	movs	r2, #243	@ 0xf3
 8011c90:	701a      	strb	r2, [r3, #0]
    return 1;
 8011c92:	2301      	movs	r3, #1
 8011c94:	e012      	b.n	8011cbc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4a0e      	ldr	r2, [pc, #56]	@ (8011cd4 <lwip_netconn_is_err_msg+0x6c>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d104      	bne.n	8011ca8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	22f2      	movs	r2, #242	@ 0xf2
 8011ca2:	701a      	strb	r2, [r3, #0]
    return 1;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e009      	b.n	8011cbc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4a0b      	ldr	r2, [pc, #44]	@ (8011cd8 <lwip_netconn_is_err_msg+0x70>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d104      	bne.n	8011cba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	22f1      	movs	r2, #241	@ 0xf1
 8011cb4:	701a      	strb	r2, [r3, #0]
    return 1;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e000      	b.n	8011cbc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	08022b48 	.word	0x08022b48
 8011cc8:	08022bb4 	.word	0x08022bb4
 8011ccc:	08022b8c 	.word	0x08022b8c
 8011cd0:	08027294 	.word	0x08027294
 8011cd4:	08027295 	.word	0x08027295
 8011cd8:	08027296 	.word	0x08027296

08011cdc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b088      	sub	sp, #32
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
 8011ce8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d105      	bne.n	8011cfc <recv_udp+0x20>
 8011cf0:	4b34      	ldr	r3, [pc, #208]	@ (8011dc4 <recv_udp+0xe8>)
 8011cf2:	22e5      	movs	r2, #229	@ 0xe5
 8011cf4:	4934      	ldr	r1, [pc, #208]	@ (8011dc8 <recv_udp+0xec>)
 8011cf6:	4835      	ldr	r0, [pc, #212]	@ (8011dcc <recv_udp+0xf0>)
 8011cf8:	f00f fc42 	bl	8021580 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d105      	bne.n	8011d0e <recv_udp+0x32>
 8011d02:	4b30      	ldr	r3, [pc, #192]	@ (8011dc4 <recv_udp+0xe8>)
 8011d04:	22e6      	movs	r2, #230	@ 0xe6
 8011d06:	4932      	ldr	r1, [pc, #200]	@ (8011dd0 <recv_udp+0xf4>)
 8011d08:	4830      	ldr	r0, [pc, #192]	@ (8011dcc <recv_udp+0xf0>)
 8011d0a:	f00f fc39 	bl	8021580 <iprintf>
  conn = (struct netconn *)arg;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d103      	bne.n	8011d20 <recv_udp+0x44>
    pbuf_free(p);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f003 fbeb 	bl	80154f4 <pbuf_free>
    return;
 8011d1e:	e04d      	b.n	8011dbc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	68ba      	ldr	r2, [r7, #8]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d005      	beq.n	8011d36 <recv_udp+0x5a>
 8011d2a:	4b26      	ldr	r3, [pc, #152]	@ (8011dc4 <recv_udp+0xe8>)
 8011d2c:	22ee      	movs	r2, #238	@ 0xee
 8011d2e:	4929      	ldr	r1, [pc, #164]	@ (8011dd4 <recv_udp+0xf8>)
 8011d30:	4826      	ldr	r0, [pc, #152]	@ (8011dcc <recv_udp+0xf0>)
 8011d32:	f00f fc25 	bl	8021580 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	3310      	adds	r3, #16
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f00e f924 	bl	801ff88 <sys_mbox_valid>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d103      	bne.n	8011d4e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f003 fbd4 	bl	80154f4 <pbuf_free>
    return;
 8011d4c:	e036      	b.n	8011dbc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011d4e:	2006      	movs	r0, #6
 8011d50:	f002 fb6e 	bl	8014430 <memp_malloc>
 8011d54:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d103      	bne.n	8011d64 <recv_udp+0x88>
    pbuf_free(p);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f003 fbc9 	bl	80154f4 <pbuf_free>
    return;
 8011d62:	e02b      	b.n	8011dbc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	687a      	ldr	r2, [r7, #4]
 8011d6e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d002      	beq.n	8011d7c <recv_udp+0xa0>
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	e000      	b.n	8011d7e <recv_udp+0xa2>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	69ba      	ldr	r2, [r7, #24]
 8011d80:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011d82:	69bb      	ldr	r3, [r7, #24]
 8011d84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011d86:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	891b      	ldrh	r3, [r3, #8]
 8011d8c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	3310      	adds	r3, #16
 8011d92:	69b9      	ldr	r1, [r7, #24]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f00e f88b 	bl	801feb0 <sys_mbox_trypost>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d003      	beq.n	8011da8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011da0:	69b8      	ldr	r0, [r7, #24]
 8011da2:	f001 fb0d 	bl	80133c0 <netbuf_delete>
    return;
 8011da6:	e009      	b.n	8011dbc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d005      	beq.n	8011dbc <recv_udp+0xe0>
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db4:	8afa      	ldrh	r2, [r7, #22]
 8011db6:	2100      	movs	r1, #0
 8011db8:	69f8      	ldr	r0, [r7, #28]
 8011dba:	4798      	blx	r3
  }
}
 8011dbc:	3720      	adds	r7, #32
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	08022b48 	.word	0x08022b48
 8011dc8:	08022bc0 	.word	0x08022bc0
 8011dcc:	08022b8c 	.word	0x08022b8c
 8011dd0:	08022be4 	.word	0x08022be4
 8011dd4:	08022c04 	.word	0x08022c04

08011dd8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b088      	sub	sp, #32
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
 8011de4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d106      	bne.n	8011dfa <recv_tcp+0x22>
 8011dec:	4b36      	ldr	r3, [pc, #216]	@ (8011ec8 <recv_tcp+0xf0>)
 8011dee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011df2:	4936      	ldr	r1, [pc, #216]	@ (8011ecc <recv_tcp+0xf4>)
 8011df4:	4836      	ldr	r0, [pc, #216]	@ (8011ed0 <recv_tcp+0xf8>)
 8011df6:	f00f fbc3 	bl	8021580 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d106      	bne.n	8011e0e <recv_tcp+0x36>
 8011e00:	4b31      	ldr	r3, [pc, #196]	@ (8011ec8 <recv_tcp+0xf0>)
 8011e02:	f240 122d 	movw	r2, #301	@ 0x12d
 8011e06:	4933      	ldr	r1, [pc, #204]	@ (8011ed4 <recv_tcp+0xfc>)
 8011e08:	4831      	ldr	r0, [pc, #196]	@ (8011ed0 <recv_tcp+0xf8>)
 8011e0a:	f00f fbb9 	bl	8021580 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d006      	beq.n	8011e24 <recv_tcp+0x4c>
 8011e16:	4b2c      	ldr	r3, [pc, #176]	@ (8011ec8 <recv_tcp+0xf0>)
 8011e18:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011e1c:	492e      	ldr	r1, [pc, #184]	@ (8011ed8 <recv_tcp+0x100>)
 8011e1e:	482c      	ldr	r0, [pc, #176]	@ (8011ed0 <recv_tcp+0xf8>)
 8011e20:	f00f fbae 	bl	8021580 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d102      	bne.n	8011e34 <recv_tcp+0x5c>
    return ERR_VAL;
 8011e2e:	f06f 0305 	mvn.w	r3, #5
 8011e32:	e045      	b.n	8011ec0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d006      	beq.n	8011e4c <recv_tcp+0x74>
 8011e3e:	4b22      	ldr	r3, [pc, #136]	@ (8011ec8 <recv_tcp+0xf0>)
 8011e40:	f240 1235 	movw	r2, #309	@ 0x135
 8011e44:	4925      	ldr	r1, [pc, #148]	@ (8011edc <recv_tcp+0x104>)
 8011e46:	4822      	ldr	r0, [pc, #136]	@ (8011ed0 <recv_tcp+0xf8>)
 8011e48:	f00f fb9a 	bl	8021580 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	3310      	adds	r3, #16
 8011e50:	4618      	mov	r0, r3
 8011e52:	f00e f899 	bl	801ff88 <sys_mbox_valid>
 8011e56:	4603      	mov	r3, r0
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d10d      	bne.n	8011e78 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d008      	beq.n	8011e74 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	891b      	ldrh	r3, [r3, #8]
 8011e66:	4619      	mov	r1, r3
 8011e68:	68b8      	ldr	r0, [r7, #8]
 8011e6a:	f004 fbeb 	bl	8016644 <tcp_recved>
      pbuf_free(p);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f003 fb40 	bl	80154f4 <pbuf_free>
    }
    return ERR_OK;
 8011e74:	2300      	movs	r3, #0
 8011e76:	e023      	b.n	8011ec0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d005      	beq.n	8011e8a <recv_tcp+0xb2>
    msg = p;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	891b      	ldrh	r3, [r3, #8]
 8011e86:	83fb      	strh	r3, [r7, #30]
 8011e88:	e003      	b.n	8011e92 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011e8a:	4b15      	ldr	r3, [pc, #84]	@ (8011ee0 <recv_tcp+0x108>)
 8011e8c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	3310      	adds	r3, #16
 8011e96:	69b9      	ldr	r1, [r7, #24]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f00e f809 	bl	801feb0 <sys_mbox_trypost>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d002      	beq.n	8011eaa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011ea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ea8:	e00a      	b.n	8011ec0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d005      	beq.n	8011ebe <recv_tcp+0xe6>
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eb6:	8bfa      	ldrh	r2, [r7, #30]
 8011eb8:	2100      	movs	r1, #0
 8011eba:	6978      	ldr	r0, [r7, #20]
 8011ebc:	4798      	blx	r3
  }

  return ERR_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3720      	adds	r7, #32
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	08022b48 	.word	0x08022b48
 8011ecc:	08022c24 	.word	0x08022c24
 8011ed0:	08022b8c 	.word	0x08022b8c
 8011ed4:	08022c48 	.word	0x08022c48
 8011ed8:	08022c68 	.word	0x08022c68
 8011edc:	08022c80 	.word	0x08022c80
 8011ee0:	08027296 	.word	0x08027296

08011ee4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d106      	bne.n	8011f06 <poll_tcp+0x22>
 8011ef8:	4b29      	ldr	r3, [pc, #164]	@ (8011fa0 <poll_tcp+0xbc>)
 8011efa:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011efe:	4929      	ldr	r1, [pc, #164]	@ (8011fa4 <poll_tcp+0xc0>)
 8011f00:	4829      	ldr	r0, [pc, #164]	@ (8011fa8 <poll_tcp+0xc4>)
 8011f02:	f00f fb3d 	bl	8021580 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	785b      	ldrb	r3, [r3, #1]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d104      	bne.n	8011f18 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011f0e:	2101      	movs	r1, #1
 8011f10:	68f8      	ldr	r0, [r7, #12]
 8011f12:	f000 ffc9 	bl	8012ea8 <lwip_netconn_do_writemore>
 8011f16:	e016      	b.n	8011f46 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	785b      	ldrb	r3, [r3, #1]
 8011f1c:	2b04      	cmp	r3, #4
 8011f1e:	d112      	bne.n	8011f46 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6a1b      	ldr	r3, [r3, #32]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d00a      	beq.n	8011f3e <poll_tcp+0x5a>
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6a1b      	ldr	r3, [r3, #32]
 8011f2c:	7a5b      	ldrb	r3, [r3, #9]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d005      	beq.n	8011f3e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	6a1b      	ldr	r3, [r3, #32]
 8011f36:	7a5a      	ldrb	r2, [r3, #9]
 8011f38:	3a01      	subs	r2, #1
 8011f3a:	b2d2      	uxtb	r2, r2
 8011f3c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011f3e:	2101      	movs	r1, #1
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f000 fb3b 	bl	80125bc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	7f1b      	ldrb	r3, [r3, #28]
 8011f4a:	f003 0310 	and.w	r3, r3, #16
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d021      	beq.n	8011f96 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d01d      	beq.n	8011f96 <poll_tcp+0xb2>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011f62:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011f66:	d316      	bcc.n	8011f96 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011f70:	2b04      	cmp	r3, #4
 8011f72:	d810      	bhi.n	8011f96 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	7f1b      	ldrb	r3, [r3, #28]
 8011f78:	f023 0310 	bic.w	r3, r3, #16
 8011f7c:	b2da      	uxtb	r2, r3
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d005      	beq.n	8011f96 <poll_tcp+0xb2>
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f8e:	2200      	movs	r2, #0
 8011f90:	2102      	movs	r1, #2
 8011f92:	68f8      	ldr	r0, [r7, #12]
 8011f94:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011f96:	2300      	movs	r3, #0
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	08022b48 	.word	0x08022b48
 8011fa4:	08022ca0 	.word	0x08022ca0
 8011fa8:	08022b8c 	.word	0x08022b8c

08011fac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b086      	sub	sp, #24
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	60b9      	str	r1, [r7, #8]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d106      	bne.n	8011fd2 <sent_tcp+0x26>
 8011fc4:	4b20      	ldr	r3, [pc, #128]	@ (8012048 <sent_tcp+0x9c>)
 8011fc6:	f240 1293 	movw	r2, #403	@ 0x193
 8011fca:	4920      	ldr	r1, [pc, #128]	@ (801204c <sent_tcp+0xa0>)
 8011fcc:	4820      	ldr	r0, [pc, #128]	@ (8012050 <sent_tcp+0xa4>)
 8011fce:	f00f fad7 	bl	8021580 <iprintf>

  if (conn) {
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d032      	beq.n	801203e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	785b      	ldrb	r3, [r3, #1]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d104      	bne.n	8011fea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011fe0:	2101      	movs	r1, #1
 8011fe2:	6978      	ldr	r0, [r7, #20]
 8011fe4:	f000 ff60 	bl	8012ea8 <lwip_netconn_do_writemore>
 8011fe8:	e007      	b.n	8011ffa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	785b      	ldrb	r3, [r3, #1]
 8011fee:	2b04      	cmp	r3, #4
 8011ff0:	d103      	bne.n	8011ffa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	6978      	ldr	r0, [r7, #20]
 8011ff6:	f000 fae1 	bl	80125bc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d01d      	beq.n	801203e <sent_tcp+0x92>
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801200a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801200e:	d316      	bcc.n	801203e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012018:	2b04      	cmp	r3, #4
 801201a:	d810      	bhi.n	801203e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	7f1b      	ldrb	r3, [r3, #28]
 8012020:	f023 0310 	bic.w	r3, r3, #16
 8012024:	b2da      	uxtb	r2, r3
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801202e:	2b00      	cmp	r3, #0
 8012030:	d005      	beq.n	801203e <sent_tcp+0x92>
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012036:	88fa      	ldrh	r2, [r7, #6]
 8012038:	2102      	movs	r1, #2
 801203a:	6978      	ldr	r0, [r7, #20]
 801203c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801203e:	2300      	movs	r3, #0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	08022b48 	.word	0x08022b48
 801204c:	08022ca0 	.word	0x08022ca0
 8012050:	08022b8c 	.word	0x08022b8c

08012054 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b088      	sub	sp, #32
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	460b      	mov	r3, r1
 801205e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d106      	bne.n	8012078 <err_tcp+0x24>
 801206a:	4b5f      	ldr	r3, [pc, #380]	@ (80121e8 <err_tcp+0x194>)
 801206c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8012070:	495e      	ldr	r1, [pc, #376]	@ (80121ec <err_tcp+0x198>)
 8012072:	485f      	ldr	r0, [pc, #380]	@ (80121f0 <err_tcp+0x19c>)
 8012074:	f00f fa84 	bl	8021580 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8012078:	f00e f8dc 	bl	8020234 <sys_arch_protect>
 801207c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	2200      	movs	r2, #0
 8012082:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	78fa      	ldrb	r2, [r7, #3]
 8012088:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	7f1b      	ldrb	r3, [r3, #28]
 801208e:	f043 0301 	orr.w	r3, r3, #1
 8012092:	b2da      	uxtb	r2, r3
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	785b      	ldrb	r3, [r3, #1]
 801209c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	2200      	movs	r2, #0
 80120a2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80120a4:	69b8      	ldr	r0, [r7, #24]
 80120a6:	f00e f8d3 	bl	8020250 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d005      	beq.n	80120be <err_tcp+0x6a>
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b6:	2200      	movs	r2, #0
 80120b8:	2104      	movs	r1, #4
 80120ba:	69f8      	ldr	r0, [r7, #28]
 80120bc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d005      	beq.n	80120d2 <err_tcp+0x7e>
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ca:	2200      	movs	r2, #0
 80120cc:	2100      	movs	r1, #0
 80120ce:	69f8      	ldr	r0, [r7, #28]
 80120d0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80120d2:	69fb      	ldr	r3, [r7, #28]
 80120d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d005      	beq.n	80120e6 <err_tcp+0x92>
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120de:	2200      	movs	r2, #0
 80120e0:	2102      	movs	r1, #2
 80120e2:	69f8      	ldr	r0, [r7, #28]
 80120e4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80120e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7ff fd86 	bl	8011bfc <lwip_netconn_err_to_msg>
 80120f0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	3310      	adds	r3, #16
 80120f6:	4618      	mov	r0, r3
 80120f8:	f00d ff46 	bl	801ff88 <sys_mbox_valid>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d005      	beq.n	801210e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	3310      	adds	r3, #16
 8012106:	6939      	ldr	r1, [r7, #16]
 8012108:	4618      	mov	r0, r3
 801210a:	f00d fed1 	bl	801feb0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	3314      	adds	r3, #20
 8012112:	4618      	mov	r0, r3
 8012114:	f00d ff38 	bl	801ff88 <sys_mbox_valid>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d005      	beq.n	801212a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	3314      	adds	r3, #20
 8012122:	6939      	ldr	r1, [r7, #16]
 8012124:	4618      	mov	r0, r3
 8012126:	f00d fec3 	bl	801feb0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801212a:	7dfb      	ldrb	r3, [r7, #23]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d005      	beq.n	801213c <err_tcp+0xe8>
 8012130:	7dfb      	ldrb	r3, [r7, #23]
 8012132:	2b04      	cmp	r3, #4
 8012134:	d002      	beq.n	801213c <err_tcp+0xe8>
 8012136:	7dfb      	ldrb	r3, [r7, #23]
 8012138:	2b03      	cmp	r3, #3
 801213a:	d143      	bne.n	80121c4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	7f1b      	ldrb	r3, [r3, #28]
 8012140:	f003 0304 	and.w	r3, r3, #4
 8012144:	2b00      	cmp	r3, #0
 8012146:	bf14      	ite	ne
 8012148:	2301      	movne	r3, #1
 801214a:	2300      	moveq	r3, #0
 801214c:	b2db      	uxtb	r3, r3
 801214e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	7f1b      	ldrb	r3, [r3, #28]
 8012154:	f023 0304 	bic.w	r3, r3, #4
 8012158:	b2da      	uxtb	r2, r3
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d13b      	bne.n	80121dc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	6a1b      	ldr	r3, [r3, #32]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d106      	bne.n	801217a <err_tcp+0x126>
 801216c:	4b1e      	ldr	r3, [pc, #120]	@ (80121e8 <err_tcp+0x194>)
 801216e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012172:	4920      	ldr	r1, [pc, #128]	@ (80121f4 <err_tcp+0x1a0>)
 8012174:	481e      	ldr	r0, [pc, #120]	@ (80121f0 <err_tcp+0x19c>)
 8012176:	f00f fa03 	bl	8021580 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 801217a:	7dfb      	ldrb	r3, [r7, #23]
 801217c:	2b04      	cmp	r3, #4
 801217e:	d104      	bne.n	801218a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	6a1b      	ldr	r3, [r3, #32]
 8012184:	2200      	movs	r2, #0
 8012186:	711a      	strb	r2, [r3, #4]
 8012188:	e003      	b.n	8012192 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	6a1b      	ldr	r3, [r3, #32]
 801218e:	78fa      	ldrb	r2, [r7, #3]
 8012190:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	6a1b      	ldr	r3, [r3, #32]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	330c      	adds	r3, #12
 801219a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 801219c:	68b8      	ldr	r0, [r7, #8]
 801219e:	f00d ffad 	bl	80200fc <sys_sem_valid>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d106      	bne.n	80121b6 <err_tcp+0x162>
 80121a8:	4b0f      	ldr	r3, [pc, #60]	@ (80121e8 <err_tcp+0x194>)
 80121aa:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80121ae:	4912      	ldr	r1, [pc, #72]	@ (80121f8 <err_tcp+0x1a4>)
 80121b0:	480f      	ldr	r0, [pc, #60]	@ (80121f0 <err_tcp+0x19c>)
 80121b2:	f00f f9e5 	bl	8021580 <iprintf>
      conn->current_msg = NULL;
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	2200      	movs	r2, #0
 80121ba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80121bc:	68b8      	ldr	r0, [r7, #8]
 80121be:	f00d ff78 	bl	80200b2 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80121c2:	e00b      	b.n	80121dc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	6a1b      	ldr	r3, [r3, #32]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d008      	beq.n	80121de <err_tcp+0x18a>
 80121cc:	4b06      	ldr	r3, [pc, #24]	@ (80121e8 <err_tcp+0x194>)
 80121ce:	f240 12f7 	movw	r2, #503	@ 0x1f7
 80121d2:	490a      	ldr	r1, [pc, #40]	@ (80121fc <err_tcp+0x1a8>)
 80121d4:	4806      	ldr	r0, [pc, #24]	@ (80121f0 <err_tcp+0x19c>)
 80121d6:	f00f f9d3 	bl	8021580 <iprintf>
  }
}
 80121da:	e000      	b.n	80121de <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80121dc:	bf00      	nop
}
 80121de:	bf00      	nop
 80121e0:	3720      	adds	r7, #32
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	08022b48 	.word	0x08022b48
 80121ec:	08022ca0 	.word	0x08022ca0
 80121f0:	08022b8c 	.word	0x08022b8c
 80121f4:	08022cb0 	.word	0x08022cb0
 80121f8:	08022ccc 	.word	0x08022ccc
 80121fc:	08022ce8 	.word	0x08022ce8

08012200 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801220e:	6879      	ldr	r1, [r7, #4]
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f005 fa21 	bl	8017658 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012216:	490a      	ldr	r1, [pc, #40]	@ (8012240 <setup_tcp+0x40>)
 8012218:	68f8      	ldr	r0, [r7, #12]
 801221a:	f005 fa2f 	bl	801767c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801221e:	4909      	ldr	r1, [pc, #36]	@ (8012244 <setup_tcp+0x44>)
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f005 fa4d 	bl	80176c0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012226:	2202      	movs	r2, #2
 8012228:	4907      	ldr	r1, [pc, #28]	@ (8012248 <setup_tcp+0x48>)
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f005 faa4 	bl	8017778 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8012230:	4906      	ldr	r1, [pc, #24]	@ (801224c <setup_tcp+0x4c>)
 8012232:	68f8      	ldr	r0, [r7, #12]
 8012234:	f005 fa66 	bl	8017704 <tcp_err>
}
 8012238:	bf00      	nop
 801223a:	3710      	adds	r7, #16
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	08011dd9 	.word	0x08011dd9
 8012244:	08011fad 	.word	0x08011fad
 8012248:	08011ee5 	.word	0x08011ee5
 801224c:	08012055 	.word	0x08012055

08012250 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8012250:	b590      	push	{r4, r7, lr}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012258:	2300      	movs	r3, #0
 801225a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d006      	beq.n	8012274 <pcb_new+0x24>
 8012266:	4b2b      	ldr	r3, [pc, #172]	@ (8012314 <pcb_new+0xc4>)
 8012268:	f240 2265 	movw	r2, #613	@ 0x265
 801226c:	492a      	ldr	r1, [pc, #168]	@ (8012318 <pcb_new+0xc8>)
 801226e:	482b      	ldr	r0, [pc, #172]	@ (801231c <pcb_new+0xcc>)
 8012270:	f00f f986 	bl	8021580 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801227e:	2b10      	cmp	r3, #16
 8012280:	d022      	beq.n	80122c8 <pcb_new+0x78>
 8012282:	2b20      	cmp	r3, #32
 8012284:	d133      	bne.n	80122ee <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681c      	ldr	r4, [r3, #0]
 801228a:	7bfb      	ldrb	r3, [r7, #15]
 801228c:	4618      	mov	r0, r3
 801228e:	f00b f864 	bl	801d35a <udp_new_ip_type>
 8012292:	4603      	mov	r3, r0
 8012294:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d02a      	beq.n	80122f6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	2b22      	cmp	r3, #34	@ 0x22
 80122a8:	d104      	bne.n	80122b4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	2201      	movs	r2, #1
 80122b2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	6858      	ldr	r0, [r3, #4]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	461a      	mov	r2, r3
 80122c0:	4917      	ldr	r1, [pc, #92]	@ (8012320 <pcb_new+0xd0>)
 80122c2:	f00a ffd1 	bl	801d268 <udp_recv>
      }
      break;
 80122c6:	e016      	b.n	80122f6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681c      	ldr	r4, [r3, #0]
 80122cc:	7bfb      	ldrb	r3, [r7, #15]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f005 f9b4 	bl	801763c <tcp_new_ip_type>
 80122d4:	4603      	mov	r3, r0
 80122d6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d00b      	beq.n	80122fa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7ff ff8a 	bl	8012200 <setup_tcp>
      }
      break;
 80122ec:	e005      	b.n	80122fa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	22fa      	movs	r2, #250	@ 0xfa
 80122f2:	711a      	strb	r2, [r3, #4]
      return;
 80122f4:	e00a      	b.n	801230c <pcb_new+0xbc>
      break;
 80122f6:	bf00      	nop
 80122f8:	e000      	b.n	80122fc <pcb_new+0xac>
      break;
 80122fa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d102      	bne.n	801230c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	22ff      	movs	r2, #255	@ 0xff
 801230a:	711a      	strb	r2, [r3, #4]
  }
}
 801230c:	3714      	adds	r7, #20
 801230e:	46bd      	mov	sp, r7
 8012310:	bd90      	pop	{r4, r7, pc}
 8012312:	bf00      	nop
 8012314:	08022b48 	.word	0x08022b48
 8012318:	08022d2c 	.word	0x08022d2c
 801231c:	08022b8c 	.word	0x08022b8c
 8012320:	08011cdd 	.word	0x08011cdd

08012324 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2200      	movs	r2, #0
 8012334:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d102      	bne.n	8012346 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7ff ff85 	bl	8012250 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012346:	bf00      	nop
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
	...

08012350 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b086      	sub	sp, #24
 8012354:	af00      	add	r7, sp, #0
 8012356:	4603      	mov	r3, r0
 8012358:	6039      	str	r1, [r7, #0]
 801235a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 801235c:	2300      	movs	r3, #0
 801235e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012360:	2007      	movs	r0, #7
 8012362:	f002 f865 	bl	8014430 <memp_malloc>
 8012366:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d101      	bne.n	8012372 <netconn_alloc+0x22>
    return NULL;
 801236e:	2300      	movs	r3, #0
 8012370:	e052      	b.n	8012418 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2200      	movs	r2, #0
 8012376:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	79fa      	ldrb	r2, [r7, #7]
 801237c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8012384:	79fb      	ldrb	r3, [r7, #7]
 8012386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801238a:	2b10      	cmp	r3, #16
 801238c:	d004      	beq.n	8012398 <netconn_alloc+0x48>
 801238e:	2b20      	cmp	r3, #32
 8012390:	d105      	bne.n	801239e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8012392:	2306      	movs	r3, #6
 8012394:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012396:	e00a      	b.n	80123ae <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012398:	2306      	movs	r3, #6
 801239a:	617b      	str	r3, [r7, #20]
      break;
 801239c:	e007      	b.n	80123ae <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801239e:	4b20      	ldr	r3, [pc, #128]	@ (8012420 <netconn_alloc+0xd0>)
 80123a0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80123a4:	491f      	ldr	r1, [pc, #124]	@ (8012424 <netconn_alloc+0xd4>)
 80123a6:	4820      	ldr	r0, [pc, #128]	@ (8012428 <netconn_alloc+0xd8>)
 80123a8:	f00f f8ea 	bl	8021580 <iprintf>
      goto free_and_return;
 80123ac:	e02f      	b.n	801240e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	3310      	adds	r3, #16
 80123b2:	6979      	ldr	r1, [r7, #20]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f00d fd21 	bl	801fdfc <sys_mbox_new>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d125      	bne.n	801240c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	330c      	adds	r3, #12
 80123c4:	2100      	movs	r1, #0
 80123c6:	4618      	mov	r0, r3
 80123c8:	f00d fdfc 	bl	801ffc4 <sys_sem_new>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d005      	beq.n	80123de <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	3310      	adds	r3, #16
 80123d6:	4618      	mov	r0, r3
 80123d8:	f00d fd42 	bl	801fe60 <sys_mbox_free>
    goto free_and_return;
 80123dc:	e017      	b.n	801240e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	3314      	adds	r3, #20
 80123e2:	4618      	mov	r0, r3
 80123e4:	f00d fde1 	bl	801ffaa <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2200      	movs	r2, #0
 80123ec:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123f4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2200      	movs	r2, #0
 8012400:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	7cfa      	ldrb	r2, [r7, #19]
 8012406:	771a      	strb	r2, [r3, #28]
  return conn;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	e005      	b.n	8012418 <netconn_alloc+0xc8>
    goto free_and_return;
 801240c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801240e:	68f9      	ldr	r1, [r7, #12]
 8012410:	2007      	movs	r0, #7
 8012412:	f002 f889 	bl	8014528 <memp_free>
  return NULL;
 8012416:	2300      	movs	r3, #0
}
 8012418:	4618      	mov	r0, r3
 801241a:	3718      	adds	r7, #24
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}
 8012420:	08022b48 	.word	0x08022b48
 8012424:	08022d4c 	.word	0x08022d4c
 8012428:	08022b8c 	.word	0x08022b8c

0801242c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d006      	beq.n	801244a <netconn_free+0x1e>
 801243c:	4b1b      	ldr	r3, [pc, #108]	@ (80124ac <netconn_free+0x80>)
 801243e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012442:	491b      	ldr	r1, [pc, #108]	@ (80124b0 <netconn_free+0x84>)
 8012444:	481b      	ldr	r0, [pc, #108]	@ (80124b4 <netconn_free+0x88>)
 8012446:	f00f f89b 	bl	8021580 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	3310      	adds	r3, #16
 801244e:	4618      	mov	r0, r3
 8012450:	f00d fd9a 	bl	801ff88 <sys_mbox_valid>
 8012454:	4603      	mov	r3, r0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d006      	beq.n	8012468 <netconn_free+0x3c>
 801245a:	4b14      	ldr	r3, [pc, #80]	@ (80124ac <netconn_free+0x80>)
 801245c:	f240 3223 	movw	r2, #803	@ 0x323
 8012460:	4915      	ldr	r1, [pc, #84]	@ (80124b8 <netconn_free+0x8c>)
 8012462:	4814      	ldr	r0, [pc, #80]	@ (80124b4 <netconn_free+0x88>)
 8012464:	f00f f88c 	bl	8021580 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	3314      	adds	r3, #20
 801246c:	4618      	mov	r0, r3
 801246e:	f00d fd8b 	bl	801ff88 <sys_mbox_valid>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	d006      	beq.n	8012486 <netconn_free+0x5a>
 8012478:	4b0c      	ldr	r3, [pc, #48]	@ (80124ac <netconn_free+0x80>)
 801247a:	f240 3226 	movw	r2, #806	@ 0x326
 801247e:	490f      	ldr	r1, [pc, #60]	@ (80124bc <netconn_free+0x90>)
 8012480:	480c      	ldr	r0, [pc, #48]	@ (80124b4 <netconn_free+0x88>)
 8012482:	f00f f87d 	bl	8021580 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	330c      	adds	r3, #12
 801248a:	4618      	mov	r0, r3
 801248c:	f00d fe1e 	bl	80200cc <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	330c      	adds	r3, #12
 8012494:	4618      	mov	r0, r3
 8012496:	f00d fe42 	bl	802011e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801249a:	6879      	ldr	r1, [r7, #4]
 801249c:	2007      	movs	r0, #7
 801249e:	f002 f843 	bl	8014528 <memp_free>
}
 80124a2:	bf00      	nop
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	08022b48 	.word	0x08022b48
 80124b0:	08022d74 	.word	0x08022d74
 80124b4:	08022b8c 	.word	0x08022b8c
 80124b8:	08022da4 	.word	0x08022da4
 80124bc:	08022de0 	.word	0x08022de0

080124c0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b086      	sub	sp, #24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	3310      	adds	r3, #16
 80124cc:	4618      	mov	r0, r3
 80124ce:	f00d fd5b 	bl	801ff88 <sys_mbox_valid>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d02f      	beq.n	8012538 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80124d8:	e018      	b.n	801250c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124e2:	2b10      	cmp	r3, #16
 80124e4:	d10e      	bne.n	8012504 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	f107 020f 	add.w	r2, r7, #15
 80124ec:	4611      	mov	r1, r2
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7ff fbba 	bl	8011c68 <lwip_netconn_is_err_msg>
 80124f4:	4603      	mov	r3, r0
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d108      	bne.n	801250c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f002 fff9 	bl	80154f4 <pbuf_free>
 8012502:	e003      	b.n	801250c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	4618      	mov	r0, r3
 8012508:	f000 ff5a 	bl	80133c0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	3310      	adds	r3, #16
 8012510:	f107 0210 	add.w	r2, r7, #16
 8012514:	4611      	mov	r1, r2
 8012516:	4618      	mov	r0, r3
 8012518:	f00d fd1f 	bl	801ff5a <sys_arch_mbox_tryfetch>
 801251c:	4603      	mov	r3, r0
 801251e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012522:	d1da      	bne.n	80124da <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	3310      	adds	r3, #16
 8012528:	4618      	mov	r0, r3
 801252a:	f00d fc99 	bl	801fe60 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	3310      	adds	r3, #16
 8012532:	4618      	mov	r0, r3
 8012534:	f00d fd39 	bl	801ffaa <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	3314      	adds	r3, #20
 801253c:	4618      	mov	r0, r3
 801253e:	f00d fd23 	bl	801ff88 <sys_mbox_valid>
 8012542:	4603      	mov	r3, r0
 8012544:	2b00      	cmp	r3, #0
 8012546:	d034      	beq.n	80125b2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012548:	e01d      	b.n	8012586 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	f107 020e 	add.w	r2, r7, #14
 8012550:	4611      	mov	r1, r2
 8012552:	4618      	mov	r0, r3
 8012554:	f7ff fb88 	bl	8011c68 <lwip_netconn_is_err_msg>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d113      	bne.n	8012586 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8012562:	6978      	ldr	r0, [r7, #20]
 8012564:	f7ff ffac 	bl	80124c0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d007      	beq.n	8012580 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	4618      	mov	r0, r3
 8012576:	f003 ff67 	bl	8016448 <tcp_abort>
            newconn->pcb.tcp = NULL;
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	2200      	movs	r2, #0
 801257e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8012580:	6978      	ldr	r0, [r7, #20]
 8012582:	f7ff ff53 	bl	801242c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	3314      	adds	r3, #20
 801258a:	f107 0210 	add.w	r2, r7, #16
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f00d fce2 	bl	801ff5a <sys_arch_mbox_tryfetch>
 8012596:	4603      	mov	r3, r0
 8012598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801259c:	d1d5      	bne.n	801254a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	3314      	adds	r3, #20
 80125a2:	4618      	mov	r0, r3
 80125a4:	f00d fc5c 	bl	801fe60 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	3314      	adds	r3, #20
 80125ac:	4618      	mov	r0, r3
 80125ae:	f00d fcfc 	bl	801ffaa <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80125b2:	bf00      	nop
 80125b4:	3718      	adds	r7, #24
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
	...

080125bc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b086      	sub	sp, #24
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	460b      	mov	r3, r1
 80125c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80125c8:	2300      	movs	r3, #0
 80125ca:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d106      	bne.n	80125e0 <lwip_netconn_do_close_internal+0x24>
 80125d2:	4b87      	ldr	r3, [pc, #540]	@ (80127f0 <lwip_netconn_do_close_internal+0x234>)
 80125d4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80125d8:	4986      	ldr	r1, [pc, #536]	@ (80127f4 <lwip_netconn_do_close_internal+0x238>)
 80125da:	4887      	ldr	r0, [pc, #540]	@ (80127f8 <lwip_netconn_do_close_internal+0x23c>)
 80125dc:	f00e ffd0 	bl	8021580 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125e8:	2b10      	cmp	r3, #16
 80125ea:	d006      	beq.n	80125fa <lwip_netconn_do_close_internal+0x3e>
 80125ec:	4b80      	ldr	r3, [pc, #512]	@ (80127f0 <lwip_netconn_do_close_internal+0x234>)
 80125ee:	f240 32a3 	movw	r2, #931	@ 0x3a3
 80125f2:	4982      	ldr	r1, [pc, #520]	@ (80127fc <lwip_netconn_do_close_internal+0x240>)
 80125f4:	4880      	ldr	r0, [pc, #512]	@ (80127f8 <lwip_netconn_do_close_internal+0x23c>)
 80125f6:	f00e ffc3 	bl	8021580 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	785b      	ldrb	r3, [r3, #1]
 80125fe:	2b04      	cmp	r3, #4
 8012600:	d006      	beq.n	8012610 <lwip_netconn_do_close_internal+0x54>
 8012602:	4b7b      	ldr	r3, [pc, #492]	@ (80127f0 <lwip_netconn_do_close_internal+0x234>)
 8012604:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8012608:	497d      	ldr	r1, [pc, #500]	@ (8012800 <lwip_netconn_do_close_internal+0x244>)
 801260a:	487b      	ldr	r0, [pc, #492]	@ (80127f8 <lwip_netconn_do_close_internal+0x23c>)
 801260c:	f00e ffb8 	bl	8021580 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d106      	bne.n	8012626 <lwip_netconn_do_close_internal+0x6a>
 8012618:	4b75      	ldr	r3, [pc, #468]	@ (80127f0 <lwip_netconn_do_close_internal+0x234>)
 801261a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801261e:	4979      	ldr	r1, [pc, #484]	@ (8012804 <lwip_netconn_do_close_internal+0x248>)
 8012620:	4875      	ldr	r0, [pc, #468]	@ (80127f8 <lwip_netconn_do_close_internal+0x23c>)
 8012622:	f00e ffad 	bl	8021580 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6a1b      	ldr	r3, [r3, #32]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d106      	bne.n	801263c <lwip_netconn_do_close_internal+0x80>
 801262e:	4b70      	ldr	r3, [pc, #448]	@ (80127f0 <lwip_netconn_do_close_internal+0x234>)
 8012630:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012634:	4974      	ldr	r1, [pc, #464]	@ (8012808 <lwip_netconn_do_close_internal+0x24c>)
 8012636:	4870      	ldr	r0, [pc, #448]	@ (80127f8 <lwip_netconn_do_close_internal+0x23c>)
 8012638:	f00e ffa2 	bl	8021580 <iprintf>

  tpcb = conn->pcb.tcp;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6a1b      	ldr	r3, [r3, #32]
 8012646:	7a1b      	ldrb	r3, [r3, #8]
 8012648:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801264a:	7bfb      	ldrb	r3, [r7, #15]
 801264c:	f003 0301 	and.w	r3, r3, #1
 8012650:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8012652:	7bfb      	ldrb	r3, [r7, #15]
 8012654:	f003 0302 	and.w	r3, r3, #2
 8012658:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801265a:	7bfb      	ldrb	r3, [r7, #15]
 801265c:	2b03      	cmp	r3, #3
 801265e:	d102      	bne.n	8012666 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8012660:	2301      	movs	r3, #1
 8012662:	75bb      	strb	r3, [r7, #22]
 8012664:	e01f      	b.n	80126a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012666:	7bbb      	ldrb	r3, [r7, #14]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00e      	beq.n	801268a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8012670:	2b05      	cmp	r3, #5
 8012672:	d007      	beq.n	8012684 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012674:	693b      	ldr	r3, [r7, #16]
 8012676:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012678:	2b06      	cmp	r3, #6
 801267a:	d003      	beq.n	8012684 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8012680:	2b08      	cmp	r3, #8
 8012682:	d102      	bne.n	801268a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012684:	2301      	movs	r3, #1
 8012686:	75bb      	strb	r3, [r7, #22]
 8012688:	e00d      	b.n	80126a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801268a:	7b7b      	ldrb	r3, [r7, #13]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d008      	beq.n	80126a2 <lwip_netconn_do_close_internal+0xe6>
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	8b5b      	ldrh	r3, [r3, #26]
 8012694:	f003 0310 	and.w	r3, r3, #16
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801269c:	2301      	movs	r3, #1
 801269e:	75bb      	strb	r3, [r7, #22]
 80126a0:	e001      	b.n	80126a6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80126a6:	7dbb      	ldrb	r3, [r7, #22]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d003      	beq.n	80126b4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80126ac:	2100      	movs	r1, #0
 80126ae:	6938      	ldr	r0, [r7, #16]
 80126b0:	f004 ffd2 	bl	8017658 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	7d1b      	ldrb	r3, [r3, #20]
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d104      	bne.n	80126c6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80126bc:	2100      	movs	r1, #0
 80126be:	6938      	ldr	r0, [r7, #16]
 80126c0:	f005 f842 	bl	8017748 <tcp_accept>
 80126c4:	e01d      	b.n	8012702 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80126c6:	7bbb      	ldrb	r3, [r7, #14]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d007      	beq.n	80126dc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80126cc:	2100      	movs	r1, #0
 80126ce:	6938      	ldr	r0, [r7, #16]
 80126d0:	f004 ffd4 	bl	801767c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80126d4:	2100      	movs	r1, #0
 80126d6:	6938      	ldr	r0, [r7, #16]
 80126d8:	f005 f836 	bl	8017748 <tcp_accept>
    }
    if (shut_tx) {
 80126dc:	7b7b      	ldrb	r3, [r7, #13]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d003      	beq.n	80126ea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80126e2:	2100      	movs	r1, #0
 80126e4:	6938      	ldr	r0, [r7, #16]
 80126e6:	f004 ffeb 	bl	80176c0 <tcp_sent>
    }
    if (shut_close) {
 80126ea:	7dbb      	ldrb	r3, [r7, #22]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d008      	beq.n	8012702 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80126f0:	2200      	movs	r2, #0
 80126f2:	2100      	movs	r1, #0
 80126f4:	6938      	ldr	r0, [r7, #16]
 80126f6:	f005 f83f 	bl	8017778 <tcp_poll>
      tcp_err(tpcb, NULL);
 80126fa:	2100      	movs	r1, #0
 80126fc:	6938      	ldr	r0, [r7, #16]
 80126fe:	f005 f801 	bl	8017704 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8012702:	7dbb      	ldrb	r3, [r7, #22]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d005      	beq.n	8012714 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012708:	6938      	ldr	r0, [r7, #16]
 801270a:	f003 fd57 	bl	80161bc <tcp_close>
 801270e:	4603      	mov	r3, r0
 8012710:	75fb      	strb	r3, [r7, #23]
 8012712:	e007      	b.n	8012724 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012714:	7bbb      	ldrb	r3, [r7, #14]
 8012716:	7b7a      	ldrb	r2, [r7, #13]
 8012718:	4619      	mov	r1, r3
 801271a:	6938      	ldr	r0, [r7, #16]
 801271c:	f003 fd7a 	bl	8016214 <tcp_shutdown>
 8012720:	4603      	mov	r3, r0
 8012722:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d102      	bne.n	8012732 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801272c:	2301      	movs	r3, #1
 801272e:	757b      	strb	r3, [r7, #21]
 8012730:	e016      	b.n	8012760 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8012732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801273a:	d10f      	bne.n	801275c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6a1b      	ldr	r3, [r3, #32]
 8012740:	7a5b      	ldrb	r3, [r3, #9]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10c      	bne.n	8012760 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012746:	2301      	movs	r3, #1
 8012748:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801274a:	7dbb      	ldrb	r3, [r7, #22]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d007      	beq.n	8012760 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8012750:	6938      	ldr	r0, [r7, #16]
 8012752:	f003 fe79 	bl	8016448 <tcp_abort>
          err = ERR_OK;
 8012756:	2300      	movs	r3, #0
 8012758:	75fb      	strb	r3, [r7, #23]
 801275a:	e001      	b.n	8012760 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801275c:	2301      	movs	r3, #1
 801275e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8012760:	7d7b      	ldrb	r3, [r7, #21]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d052      	beq.n	801280c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6a1b      	ldr	r3, [r3, #32]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	330c      	adds	r3, #12
 801276e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6a1b      	ldr	r3, [r3, #32]
 8012774:	7dfa      	ldrb	r2, [r7, #23]
 8012776:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2200      	movs	r2, #0
 8012782:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d129      	bne.n	80127e0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801278c:	7dbb      	ldrb	r3, [r7, #22]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d00c      	beq.n	80127ac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2200      	movs	r2, #0
 8012796:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801279c:	2b00      	cmp	r3, #0
 801279e:	d005      	beq.n	80127ac <lwip_netconn_do_close_internal+0x1f0>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127a4:	2200      	movs	r2, #0
 80127a6:	2104      	movs	r1, #4
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	4798      	blx	r3
      }
      if (shut_rx) {
 80127ac:	7bbb      	ldrb	r3, [r7, #14]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d009      	beq.n	80127c6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d005      	beq.n	80127c6 <lwip_netconn_do_close_internal+0x20a>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127be:	2200      	movs	r2, #0
 80127c0:	2100      	movs	r1, #0
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	4798      	blx	r3
      }
      if (shut_tx) {
 80127c6:	7b7b      	ldrb	r3, [r7, #13]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d009      	beq.n	80127e0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d005      	beq.n	80127e0 <lwip_netconn_do_close_internal+0x224>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127d8:	2200      	movs	r2, #0
 80127da:	2102      	movs	r1, #2
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80127e0:	78fb      	ldrb	r3, [r7, #3]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d002      	beq.n	80127ec <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80127e6:	68b8      	ldr	r0, [r7, #8]
 80127e8:	f00d fc63 	bl	80200b2 <sys_sem_signal>
    }
    return ERR_OK;
 80127ec:	2300      	movs	r3, #0
 80127ee:	e03c      	b.n	801286a <lwip_netconn_do_close_internal+0x2ae>
 80127f0:	08022b48 	.word	0x08022b48
 80127f4:	08022e1c 	.word	0x08022e1c
 80127f8:	08022b8c 	.word	0x08022b8c
 80127fc:	08022e2c 	.word	0x08022e2c
 8012800:	08022e4c 	.word	0x08022e4c
 8012804:	08022e70 	.word	0x08022e70
 8012808:	08022cb0 	.word	0x08022cb0
  }
  if (!close_finished) {
 801280c:	7d7b      	ldrb	r3, [r7, #21]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d11e      	bne.n	8012850 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	7d1b      	ldrb	r3, [r3, #20]
 8012816:	2b01      	cmp	r3, #1
 8012818:	d106      	bne.n	8012828 <lwip_netconn_do_close_internal+0x26c>
 801281a:	4b16      	ldr	r3, [pc, #88]	@ (8012874 <lwip_netconn_do_close_internal+0x2b8>)
 801281c:	f240 4241 	movw	r2, #1089	@ 0x441
 8012820:	4915      	ldr	r1, [pc, #84]	@ (8012878 <lwip_netconn_do_close_internal+0x2bc>)
 8012822:	4816      	ldr	r0, [pc, #88]	@ (801287c <lwip_netconn_do_close_internal+0x2c0>)
 8012824:	f00e feac 	bl	8021580 <iprintf>
    if (shut_tx) {
 8012828:	7b7b      	ldrb	r3, [r7, #13]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d003      	beq.n	8012836 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801282e:	4914      	ldr	r1, [pc, #80]	@ (8012880 <lwip_netconn_do_close_internal+0x2c4>)
 8012830:	6938      	ldr	r0, [r7, #16]
 8012832:	f004 ff45 	bl	80176c0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012836:	2201      	movs	r2, #1
 8012838:	4912      	ldr	r1, [pc, #72]	@ (8012884 <lwip_netconn_do_close_internal+0x2c8>)
 801283a:	6938      	ldr	r0, [r7, #16]
 801283c:	f004 ff9c 	bl	8017778 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8012840:	4911      	ldr	r1, [pc, #68]	@ (8012888 <lwip_netconn_do_close_internal+0x2cc>)
 8012842:	6938      	ldr	r0, [r7, #16]
 8012844:	f004 ff5e 	bl	8017704 <tcp_err>
    tcp_arg(tpcb, conn);
 8012848:	6879      	ldr	r1, [r7, #4]
 801284a:	6938      	ldr	r0, [r7, #16]
 801284c:	f004 ff04 	bl	8017658 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d106      	bne.n	8012866 <lwip_netconn_do_close_internal+0x2aa>
 8012858:	4b06      	ldr	r3, [pc, #24]	@ (8012874 <lwip_netconn_do_close_internal+0x2b8>)
 801285a:	f240 424d 	movw	r2, #1101	@ 0x44d
 801285e:	490b      	ldr	r1, [pc, #44]	@ (801288c <lwip_netconn_do_close_internal+0x2d0>)
 8012860:	4806      	ldr	r0, [pc, #24]	@ (801287c <lwip_netconn_do_close_internal+0x2c0>)
 8012862:	f00e fe8d 	bl	8021580 <iprintf>
  return err;
 8012866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801286a:	4618      	mov	r0, r3
 801286c:	3718      	adds	r7, #24
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	08022b48 	.word	0x08022b48
 8012878:	08022e84 	.word	0x08022e84
 801287c:	08022b8c 	.word	0x08022b8c
 8012880:	08011fad 	.word	0x08011fad
 8012884:	08011ee5 	.word	0x08011ee5
 8012888:	08012055 	.word	0x08012055
 801288c:	08022ea8 	.word	0x08022ea8

08012890 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	785b      	ldrb	r3, [r3, #1]
 80128a2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80128a4:	7afb      	ldrb	r3, [r7, #11]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00d      	beq.n	80128c6 <lwip_netconn_do_delconn+0x36>
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80128b4:	2b10      	cmp	r3, #16
 80128b6:	d006      	beq.n	80128c6 <lwip_netconn_do_delconn+0x36>
 80128b8:	4b60      	ldr	r3, [pc, #384]	@ (8012a3c <lwip_netconn_do_delconn+0x1ac>)
 80128ba:	f240 425e 	movw	r2, #1118	@ 0x45e
 80128be:	4960      	ldr	r1, [pc, #384]	@ (8012a40 <lwip_netconn_do_delconn+0x1b0>)
 80128c0:	4860      	ldr	r0, [pc, #384]	@ (8012a44 <lwip_netconn_do_delconn+0x1b4>)
 80128c2:	f00e fe5d 	bl	8021580 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80128c6:	7afb      	ldrb	r3, [r7, #11]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d005      	beq.n	80128d8 <lwip_netconn_do_delconn+0x48>
 80128cc:	7afb      	ldrb	r3, [r7, #11]
 80128ce:	2b02      	cmp	r3, #2
 80128d0:	d002      	beq.n	80128d8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80128d2:	7afb      	ldrb	r3, [r7, #11]
 80128d4:	2b03      	cmp	r3, #3
 80128d6:	d109      	bne.n	80128ec <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80128d8:	7afb      	ldrb	r3, [r7, #11]
 80128da:	2b03      	cmp	r3, #3
 80128dc:	d10a      	bne.n	80128f4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	7f1b      	ldrb	r3, [r3, #28]
 80128e4:	f003 0304 	and.w	r3, r3, #4
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d103      	bne.n	80128f4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	22fb      	movs	r2, #251	@ 0xfb
 80128f0:	711a      	strb	r2, [r3, #4]
 80128f2:	e097      	b.n	8012a24 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80128f4:	7afb      	ldrb	r3, [r7, #11]
 80128f6:	2b03      	cmp	r3, #3
 80128f8:	d10d      	bne.n	8012916 <lwip_netconn_do_delconn+0x86>
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	7f1b      	ldrb	r3, [r3, #28]
 8012900:	f003 0304 	and.w	r3, r3, #4
 8012904:	2b00      	cmp	r3, #0
 8012906:	d106      	bne.n	8012916 <lwip_netconn_do_delconn+0x86>
 8012908:	4b4c      	ldr	r3, [pc, #304]	@ (8012a3c <lwip_netconn_do_delconn+0x1ac>)
 801290a:	f240 427a 	movw	r2, #1146	@ 0x47a
 801290e:	494e      	ldr	r1, [pc, #312]	@ (8012a48 <lwip_netconn_do_delconn+0x1b8>)
 8012910:	484c      	ldr	r0, [pc, #304]	@ (8012a44 <lwip_netconn_do_delconn+0x1b4>)
 8012912:	f00e fe35 	bl	8021580 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2200      	movs	r2, #0
 801291a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	4618      	mov	r0, r3
 8012922:	f7ff fdcd 	bl	80124c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d05f      	beq.n	80129f0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801293a:	2b10      	cmp	r3, #16
 801293c:	d00d      	beq.n	801295a <lwip_netconn_do_delconn+0xca>
 801293e:	2b20      	cmp	r3, #32
 8012940:	d151      	bne.n	80129e6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	2200      	movs	r2, #0
 801294a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	4618      	mov	r0, r3
 8012954:	f00a fca8 	bl	801d2a8 <udp_remove>
          break;
 8012958:	e046      	b.n	80129e8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	6a1b      	ldr	r3, [r3, #32]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d006      	beq.n	8012972 <lwip_netconn_do_delconn+0xe2>
 8012964:	4b35      	ldr	r3, [pc, #212]	@ (8012a3c <lwip_netconn_do_delconn+0x1ac>)
 8012966:	f240 4294 	movw	r2, #1172	@ 0x494
 801296a:	4938      	ldr	r1, [pc, #224]	@ (8012a4c <lwip_netconn_do_delconn+0x1bc>)
 801296c:	4835      	ldr	r0, [pc, #212]	@ (8012a44 <lwip_netconn_do_delconn+0x1b4>)
 801296e:	f00e fe07 	bl	8021580 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2204      	movs	r2, #4
 8012978:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2203      	movs	r2, #3
 801297e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2100      	movs	r1, #0
 801298e:	4618      	mov	r0, r3
 8012990:	f7ff fe14 	bl	80125bc <lwip_netconn_do_close_internal>
 8012994:	4603      	mov	r3, r0
 8012996:	2b00      	cmp	r3, #0
 8012998:	d04b      	beq.n	8012a32 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	785b      	ldrb	r3, [r3, #1]
 80129a0:	2b04      	cmp	r3, #4
 80129a2:	d006      	beq.n	80129b2 <lwip_netconn_do_delconn+0x122>
 80129a4:	4b25      	ldr	r3, [pc, #148]	@ (8012a3c <lwip_netconn_do_delconn+0x1ac>)
 80129a6:	f240 429a 	movw	r2, #1178	@ 0x49a
 80129aa:	4929      	ldr	r1, [pc, #164]	@ (8012a50 <lwip_netconn_do_delconn+0x1c0>)
 80129ac:	4825      	ldr	r0, [pc, #148]	@ (8012a44 <lwip_netconn_do_delconn+0x1b4>)
 80129ae:	f00e fde7 	bl	8021580 <iprintf>
            UNLOCK_TCPIP_CORE();
 80129b2:	4828      	ldr	r0, [pc, #160]	@ (8012a54 <lwip_netconn_do_delconn+0x1c4>)
 80129b4:	f00d fc11 	bl	80201da <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	330c      	adds	r3, #12
 80129be:	2100      	movs	r1, #0
 80129c0:	4618      	mov	r0, r3
 80129c2:	f00d fb45 	bl	8020050 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80129c6:	4823      	ldr	r0, [pc, #140]	@ (8012a54 <lwip_netconn_do_delconn+0x1c4>)
 80129c8:	f00d fbf8 	bl	80201bc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	785b      	ldrb	r3, [r3, #1]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d02d      	beq.n	8012a32 <lwip_netconn_do_delconn+0x1a2>
 80129d6:	4b19      	ldr	r3, [pc, #100]	@ (8012a3c <lwip_netconn_do_delconn+0x1ac>)
 80129d8:	f240 429e 	movw	r2, #1182	@ 0x49e
 80129dc:	491c      	ldr	r1, [pc, #112]	@ (8012a50 <lwip_netconn_do_delconn+0x1c0>)
 80129de:	4819      	ldr	r0, [pc, #100]	@ (8012a44 <lwip_netconn_do_delconn+0x1b4>)
 80129e0:	f00e fdce 	bl	8021580 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80129e4:	e025      	b.n	8012a32 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80129e6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2200      	movs	r2, #0
 80129ee:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d007      	beq.n	8012a0a <lwip_netconn_do_delconn+0x17a>
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	6810      	ldr	r0, [r2, #0]
 8012a04:	2200      	movs	r2, #0
 8012a06:	2100      	movs	r1, #0
 8012a08:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d007      	beq.n	8012a24 <lwip_netconn_do_delconn+0x194>
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a1a:	68fa      	ldr	r2, [r7, #12]
 8012a1c:	6810      	ldr	r0, [r2, #0]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	2102      	movs	r1, #2
 8012a22:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	330c      	adds	r3, #12
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f00d fb66 	bl	80200fc <sys_sem_valid>
 8012a30:	e000      	b.n	8012a34 <lwip_netconn_do_delconn+0x1a4>
          return;
 8012a32:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	08022b48 	.word	0x08022b48
 8012a40:	08022eb8 	.word	0x08022eb8
 8012a44:	08022b8c 	.word	0x08022b8c
 8012a48:	08022ecc 	.word	0x08022ecc
 8012a4c:	08022eec 	.word	0x08022eec
 8012a50:	08022f08 	.word	0x08022f08
 8012a54:	200270e4 	.word	0x200270e4

08012a58 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d025      	beq.n	8012aba <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012a78:	2b10      	cmp	r3, #16
 8012a7a:	d00e      	beq.n	8012a9a <lwip_netconn_do_bind+0x42>
 8012a7c:	2b20      	cmp	r3, #32
 8012a7e:	d119      	bne.n	8012ab4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	6858      	ldr	r0, [r3, #4]
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	6899      	ldr	r1, [r3, #8]
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	899b      	ldrh	r3, [r3, #12]
 8012a8e:	461a      	mov	r2, r3
 8012a90:	f00a fa40 	bl	801cf14 <udp_bind>
 8012a94:	4603      	mov	r3, r0
 8012a96:	73fb      	strb	r3, [r7, #15]
        break;
 8012a98:	e011      	b.n	8012abe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	6858      	ldr	r0, [r3, #4]
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	6899      	ldr	r1, [r3, #8]
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	899b      	ldrh	r3, [r3, #12]
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	f003 fcd9 	bl	8016460 <tcp_bind>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8012ab2:	e004      	b.n	8012abe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012ab4:	23fa      	movs	r3, #250	@ 0xfa
 8012ab6:	73fb      	strb	r3, [r7, #15]
        break;
 8012ab8:	e001      	b.n	8012abe <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8012aba:	23fa      	movs	r3, #250	@ 0xfa
 8012abc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	7bfa      	ldrb	r2, [r7, #15]
 8012ac2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012ac4:	bf00      	nop
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b088      	sub	sp, #32
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	60f8      	str	r0, [r7, #12]
 8012ad4:	60b9      	str	r1, [r7, #8]
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8012ada:	2300      	movs	r3, #0
 8012adc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d102      	bne.n	8012aee <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8012ae8:	f06f 0305 	mvn.w	r3, #5
 8012aec:	e070      	b.n	8012bd0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	785b      	ldrb	r3, [r3, #1]
 8012af2:	2b03      	cmp	r3, #3
 8012af4:	d006      	beq.n	8012b04 <lwip_netconn_do_connected+0x38>
 8012af6:	4b38      	ldr	r3, [pc, #224]	@ (8012bd8 <lwip_netconn_do_connected+0x10c>)
 8012af8:	f240 5223 	movw	r2, #1315	@ 0x523
 8012afc:	4937      	ldr	r1, [pc, #220]	@ (8012bdc <lwip_netconn_do_connected+0x110>)
 8012afe:	4838      	ldr	r0, [pc, #224]	@ (8012be0 <lwip_netconn_do_connected+0x114>)
 8012b00:	f00e fd3e 	bl	8021580 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	6a1b      	ldr	r3, [r3, #32]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d10c      	bne.n	8012b26 <lwip_netconn_do_connected+0x5a>
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	7f1b      	ldrb	r3, [r3, #28]
 8012b10:	f003 0304 	and.w	r3, r3, #4
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d106      	bne.n	8012b26 <lwip_netconn_do_connected+0x5a>
 8012b18:	4b2f      	ldr	r3, [pc, #188]	@ (8012bd8 <lwip_netconn_do_connected+0x10c>)
 8012b1a:	f240 5224 	movw	r2, #1316	@ 0x524
 8012b1e:	4931      	ldr	r1, [pc, #196]	@ (8012be4 <lwip_netconn_do_connected+0x118>)
 8012b20:	482f      	ldr	r0, [pc, #188]	@ (8012be0 <lwip_netconn_do_connected+0x114>)
 8012b22:	f00e fd2d 	bl	8021580 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8012b26:	69bb      	ldr	r3, [r7, #24]
 8012b28:	6a1b      	ldr	r3, [r3, #32]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d008      	beq.n	8012b40 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	6a1b      	ldr	r3, [r3, #32]
 8012b32:	79fa      	ldrb	r2, [r7, #7]
 8012b34:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012b36:	69bb      	ldr	r3, [r7, #24]
 8012b38:	6a1b      	ldr	r3, [r3, #32]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	330c      	adds	r3, #12
 8012b3e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012b48:	2b10      	cmp	r3, #16
 8012b4a:	d106      	bne.n	8012b5a <lwip_netconn_do_connected+0x8e>
 8012b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d102      	bne.n	8012b5a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8012b54:	69b8      	ldr	r0, [r7, #24]
 8012b56:	f7ff fb53 	bl	8012200 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	7f1b      	ldrb	r3, [r3, #28]
 8012b5e:	f003 0304 	and.w	r3, r3, #4
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	bf0c      	ite	eq
 8012b66:	2301      	moveq	r3, #1
 8012b68:	2300      	movne	r3, #0
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8012b6e:	69bb      	ldr	r3, [r7, #24]
 8012b70:	7f1b      	ldrb	r3, [r3, #28]
 8012b72:	f023 0304 	bic.w	r3, r3, #4
 8012b76:	b2da      	uxtb	r2, r3
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d002      	beq.n	8012b88 <lwip_netconn_do_connected+0xbc>
 8012b82:	69fb      	ldr	r3, [r7, #28]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d10c      	bne.n	8012ba2 <lwip_netconn_do_connected+0xd6>
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d102      	bne.n	8012b94 <lwip_netconn_do_connected+0xc8>
 8012b8e:	69fb      	ldr	r3, [r7, #28]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d006      	beq.n	8012ba2 <lwip_netconn_do_connected+0xd6>
 8012b94:	4b10      	ldr	r3, [pc, #64]	@ (8012bd8 <lwip_netconn_do_connected+0x10c>)
 8012b96:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8012b9a:	4913      	ldr	r1, [pc, #76]	@ (8012be8 <lwip_netconn_do_connected+0x11c>)
 8012b9c:	4810      	ldr	r0, [pc, #64]	@ (8012be0 <lwip_netconn_do_connected+0x114>)
 8012b9e:	f00e fcef 	bl	8021580 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	2200      	movs	r2, #0
 8012bac:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d005      	beq.n	8012bc2 <lwip_netconn_do_connected+0xf6>
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bba:	2200      	movs	r2, #0
 8012bbc:	2102      	movs	r1, #2
 8012bbe:	69b8      	ldr	r0, [r7, #24]
 8012bc0:	4798      	blx	r3

  if (was_blocking) {
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d002      	beq.n	8012bce <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8012bc8:	69f8      	ldr	r0, [r7, #28]
 8012bca:	f00d fa72 	bl	80200b2 <sys_sem_signal>
  }
  return ERR_OK;
 8012bce:	2300      	movs	r3, #0
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3720      	adds	r7, #32
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	08022b48 	.word	0x08022b48
 8012bdc:	08022f10 	.word	0x08022f10
 8012be0:	08022b8c 	.word	0x08022b8c
 8012be4:	08022f30 	.word	0x08022f30
 8012be8:	08022f70 	.word	0x08022f70

08012bec <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b086      	sub	sp, #24
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8012c02:	23f1      	movs	r3, #241	@ 0xf1
 8012c04:	75fb      	strb	r3, [r7, #23]
 8012c06:	e09b      	b.n	8012d40 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012c12:	2b10      	cmp	r3, #16
 8012c14:	d00f      	beq.n	8012c36 <lwip_netconn_do_connect+0x4a>
 8012c16:	2b20      	cmp	r3, #32
 8012c18:	f040 8087 	bne.w	8012d2a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	6858      	ldr	r0, [r3, #4]
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	6899      	ldr	r1, [r3, #8]
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	899b      	ldrh	r3, [r3, #12]
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	f00a fa60 	bl	801d0f0 <udp_connect>
 8012c30:	4603      	mov	r3, r0
 8012c32:	75fb      	strb	r3, [r7, #23]
        break;
 8012c34:	e084      	b.n	8012d40 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	785b      	ldrb	r3, [r3, #1]
 8012c3c:	2b03      	cmp	r3, #3
 8012c3e:	d102      	bne.n	8012c46 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8012c40:	23f7      	movs	r3, #247	@ 0xf7
 8012c42:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8012c44:	e07b      	b.n	8012d3e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	785b      	ldrb	r3, [r3, #1]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d002      	beq.n	8012c56 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8012c50:	23f6      	movs	r3, #246	@ 0xf6
 8012c52:	75fb      	strb	r3, [r7, #23]
        break;
 8012c54:	e073      	b.n	8012d3e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff fad0 	bl	8012200 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	6858      	ldr	r0, [r3, #4]
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	6899      	ldr	r1, [r3, #8]
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	899a      	ldrh	r2, [r3, #12]
 8012c6e:	4b38      	ldr	r3, [pc, #224]	@ (8012d50 <lwip_netconn_do_connect+0x164>)
 8012c70:	f003 fd7e 	bl	8016770 <tcp_connect>
 8012c74:	4603      	mov	r3, r0
 8012c76:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8012c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d15e      	bne.n	8012d3e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	7f1b      	ldrb	r3, [r3, #28]
 8012c86:	f003 0302 	and.w	r3, r3, #2
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	bf14      	ite	ne
 8012c8e:	2301      	movne	r3, #1
 8012c90:	2300      	moveq	r3, #0
 8012c92:	b2db      	uxtb	r3, r3
 8012c94:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2203      	movs	r2, #3
 8012c9c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8012c9e:	7bfb      	ldrb	r3, [r7, #15]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d009      	beq.n	8012cb8 <lwip_netconn_do_connect+0xcc>
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	7f1a      	ldrb	r2, [r3, #28]
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f042 0204 	orr.w	r2, r2, #4
 8012cb2:	b2d2      	uxtb	r2, r2
 8012cb4:	771a      	strb	r2, [r3, #28]
 8012cb6:	e008      	b.n	8012cca <lwip_netconn_do_connect+0xde>
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	7f1a      	ldrb	r2, [r3, #28]
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	f022 0204 	bic.w	r2, r2, #4
 8012cc6:	b2d2      	uxtb	r2, r2
 8012cc8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8012cca:	7bfb      	ldrb	r3, [r7, #15]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d002      	beq.n	8012cd6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8012cd0:	23fb      	movs	r3, #251	@ 0xfb
 8012cd2:	75fb      	strb	r3, [r7, #23]
        break;
 8012cd4:	e033      	b.n	8012d3e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8012cd6:	693b      	ldr	r3, [r7, #16]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	693a      	ldr	r2, [r7, #16]
 8012cdc:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	785b      	ldrb	r3, [r3, #1]
 8012ce4:	2b03      	cmp	r3, #3
 8012ce6:	d006      	beq.n	8012cf6 <lwip_netconn_do_connect+0x10a>
 8012ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8012d54 <lwip_netconn_do_connect+0x168>)
 8012cea:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8012cee:	491a      	ldr	r1, [pc, #104]	@ (8012d58 <lwip_netconn_do_connect+0x16c>)
 8012cf0:	481a      	ldr	r0, [pc, #104]	@ (8012d5c <lwip_netconn_do_connect+0x170>)
 8012cf2:	f00e fc45 	bl	8021580 <iprintf>
              UNLOCK_TCPIP_CORE();
 8012cf6:	481a      	ldr	r0, [pc, #104]	@ (8012d60 <lwip_netconn_do_connect+0x174>)
 8012cf8:	f00d fa6f 	bl	80201da <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	330c      	adds	r3, #12
 8012d02:	2100      	movs	r1, #0
 8012d04:	4618      	mov	r0, r3
 8012d06:	f00d f9a3 	bl	8020050 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8012d0a:	4815      	ldr	r0, [pc, #84]	@ (8012d60 <lwip_netconn_do_connect+0x174>)
 8012d0c:	f00d fa56 	bl	80201bc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	785b      	ldrb	r3, [r3, #1]
 8012d16:	2b03      	cmp	r3, #3
 8012d18:	d116      	bne.n	8012d48 <lwip_netconn_do_connect+0x15c>
 8012d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8012d54 <lwip_netconn_do_connect+0x168>)
 8012d1c:	f240 5274 	movw	r2, #1396	@ 0x574
 8012d20:	490d      	ldr	r1, [pc, #52]	@ (8012d58 <lwip_netconn_do_connect+0x16c>)
 8012d22:	480e      	ldr	r0, [pc, #56]	@ (8012d5c <lwip_netconn_do_connect+0x170>)
 8012d24:	f00e fc2c 	bl	8021580 <iprintf>
              return;
 8012d28:	e00e      	b.n	8012d48 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8012d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8012d54 <lwip_netconn_do_connect+0x168>)
 8012d2c:	f240 527d 	movw	r2, #1405	@ 0x57d
 8012d30:	490c      	ldr	r1, [pc, #48]	@ (8012d64 <lwip_netconn_do_connect+0x178>)
 8012d32:	480a      	ldr	r0, [pc, #40]	@ (8012d5c <lwip_netconn_do_connect+0x170>)
 8012d34:	f00e fc24 	bl	8021580 <iprintf>
 8012d38:	23fa      	movs	r3, #250	@ 0xfa
 8012d3a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8012d3c:	e000      	b.n	8012d40 <lwip_netconn_do_connect+0x154>
        break;
 8012d3e:	bf00      	nop
    }
  }
  msg->err = err;
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	7dfa      	ldrb	r2, [r7, #23]
 8012d44:	711a      	strb	r2, [r3, #4]
 8012d46:	e000      	b.n	8012d4a <lwip_netconn_do_connect+0x15e>
              return;
 8012d48:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8012d4a:	3718      	adds	r7, #24
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	08012acd 	.word	0x08012acd
 8012d54:	08022b48 	.word	0x08022b48
 8012d58:	08022f08 	.word	0x08022f08
 8012d5c:	08022b8c 	.word	0x08022b8c
 8012d60:	200270e4 	.word	0x200270e4
 8012d64:	08022f90 	.word	0x08022f90

08012d68 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012d7e:	2b20      	cmp	r3, #32
 8012d80:	d109      	bne.n	8012d96 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f00a fa45 	bl	801d218 <udp_disconnect>
    msg->err = ERR_OK;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	2200      	movs	r2, #0
 8012d92:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012d94:	e002      	b.n	8012d9c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	22fa      	movs	r2, #250	@ 0xfa
 8012d9a:	711a      	strb	r2, [r3, #4]
}
 8012d9c:	bf00      	nop
 8012d9e:	3710      	adds	r7, #16
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7fe ff05 	bl	8011bc4 <netconn_err>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d134      	bne.n	8012e30 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d02d      	beq.n	8012e2c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012dda:	2b20      	cmp	r3, #32
 8012ddc:	d123      	bne.n	8012e26 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10c      	bne.n	8012e02 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	685a      	ldr	r2, [r3, #4]
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	689b      	ldr	r3, [r3, #8]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4619      	mov	r1, r3
 8012df6:	4610      	mov	r0, r2
 8012df8:	f009 fe1c 	bl	801ca34 <udp_send>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012e00:	e016      	b.n	8012e30 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	6858      	ldr	r0, [r3, #4]
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	689b      	ldr	r3, [r3, #8]
 8012e0c:	6819      	ldr	r1, [r3, #0]
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f103 0208 	add.w	r2, r3, #8
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	899b      	ldrh	r3, [r3, #12]
 8012e1c:	f009 fe3e 	bl	801ca9c <udp_sendto>
 8012e20:	4603      	mov	r3, r0
 8012e22:	73fb      	strb	r3, [r7, #15]
          break;
 8012e24:	e004      	b.n	8012e30 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012e26:	23f5      	movs	r3, #245	@ 0xf5
 8012e28:	73fb      	strb	r3, [r7, #15]
          break;
 8012e2a:	e001      	b.n	8012e30 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012e2c:	23f5      	movs	r3, #245	@ 0xf5
 8012e2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	7bfa      	ldrb	r2, [r7, #15]
 8012e34:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012e36:	bf00      	nop
 8012e38:	3710      	adds	r7, #16
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}

08012e3e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8012e3e:	b580      	push	{r7, lr}
 8012e40:	b086      	sub	sp, #24
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d022      	beq.n	8012ea0 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012e64:	2b10      	cmp	r3, #16
 8012e66:	d11b      	bne.n	8012ea0 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	689b      	ldr	r3, [r3, #8]
 8012e6c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e74:	d202      	bcs.n	8012e7c <lwip_netconn_do_recv+0x3e>
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	e001      	b.n	8012e80 <lwip_netconn_do_recv+0x42>
 8012e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e80:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	89fa      	ldrh	r2, [r7, #14]
 8012e8a:	4611      	mov	r1, r2
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f003 fbd9 	bl	8016644 <tcp_recved>
        remaining -= recved;
 8012e92:	89fb      	ldrh	r3, [r7, #14]
 8012e94:	697a      	ldr	r2, [r7, #20]
 8012e96:	1ad3      	subs	r3, r2, r3
 8012e98:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d1e6      	bne.n	8012e6e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012ea0:	bf00      	nop
 8012ea2:	3718      	adds	r7, #24
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b088      	sub	sp, #32
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d106      	bne.n	8012ecc <lwip_netconn_do_writemore+0x24>
 8012ebe:	4b96      	ldr	r3, [pc, #600]	@ (8013118 <lwip_netconn_do_writemore+0x270>)
 8012ec0:	f240 6273 	movw	r2, #1651	@ 0x673
 8012ec4:	4995      	ldr	r1, [pc, #596]	@ (801311c <lwip_netconn_do_writemore+0x274>)
 8012ec6:	4896      	ldr	r0, [pc, #600]	@ (8013120 <lwip_netconn_do_writemore+0x278>)
 8012ec8:	f00e fb5a 	bl	8021580 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	785b      	ldrb	r3, [r3, #1]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d006      	beq.n	8012ee2 <lwip_netconn_do_writemore+0x3a>
 8012ed4:	4b90      	ldr	r3, [pc, #576]	@ (8013118 <lwip_netconn_do_writemore+0x270>)
 8012ed6:	f240 6274 	movw	r2, #1652	@ 0x674
 8012eda:	4992      	ldr	r1, [pc, #584]	@ (8013124 <lwip_netconn_do_writemore+0x27c>)
 8012edc:	4890      	ldr	r0, [pc, #576]	@ (8013120 <lwip_netconn_do_writemore+0x278>)
 8012ede:	f00e fb4f 	bl	8021580 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6a1b      	ldr	r3, [r3, #32]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d106      	bne.n	8012ef8 <lwip_netconn_do_writemore+0x50>
 8012eea:	4b8b      	ldr	r3, [pc, #556]	@ (8013118 <lwip_netconn_do_writemore+0x270>)
 8012eec:	f240 6275 	movw	r2, #1653	@ 0x675
 8012ef0:	498d      	ldr	r1, [pc, #564]	@ (8013128 <lwip_netconn_do_writemore+0x280>)
 8012ef2:	488b      	ldr	r0, [pc, #556]	@ (8013120 <lwip_netconn_do_writemore+0x278>)
 8012ef4:	f00e fb44 	bl	8021580 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d106      	bne.n	8012f0e <lwip_netconn_do_writemore+0x66>
 8012f00:	4b85      	ldr	r3, [pc, #532]	@ (8013118 <lwip_netconn_do_writemore+0x270>)
 8012f02:	f240 6276 	movw	r2, #1654	@ 0x676
 8012f06:	4989      	ldr	r1, [pc, #548]	@ (801312c <lwip_netconn_do_writemore+0x284>)
 8012f08:	4885      	ldr	r0, [pc, #532]	@ (8013120 <lwip_netconn_do_writemore+0x278>)
 8012f0a:	f00e fb39 	bl	8021580 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6a1b      	ldr	r3, [r3, #32]
 8012f12:	699a      	ldr	r2, [r3, #24]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6a1b      	ldr	r3, [r3, #32]
 8012f18:	695b      	ldr	r3, [r3, #20]
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d306      	bcc.n	8012f2c <lwip_netconn_do_writemore+0x84>
 8012f1e:	4b7e      	ldr	r3, [pc, #504]	@ (8013118 <lwip_netconn_do_writemore+0x270>)
 8012f20:	f240 6277 	movw	r2, #1655	@ 0x677
 8012f24:	4982      	ldr	r1, [pc, #520]	@ (8013130 <lwip_netconn_do_writemore+0x288>)
 8012f26:	487e      	ldr	r0, [pc, #504]	@ (8013120 <lwip_netconn_do_writemore+0x278>)
 8012f28:	f00e fb2a 	bl	8021580 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6a1b      	ldr	r3, [r3, #32]
 8012f30:	899b      	ldrh	r3, [r3, #12]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d106      	bne.n	8012f44 <lwip_netconn_do_writemore+0x9c>
 8012f36:	4b78      	ldr	r3, [pc, #480]	@ (8013118 <lwip_netconn_do_writemore+0x270>)
 8012f38:	f240 6279 	movw	r2, #1657	@ 0x679
 8012f3c:	497d      	ldr	r1, [pc, #500]	@ (8013134 <lwip_netconn_do_writemore+0x28c>)
 8012f3e:	4878      	ldr	r0, [pc, #480]	@ (8013120 <lwip_netconn_do_writemore+0x278>)
 8012f40:	f00e fb1e 	bl	8021580 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6a1b      	ldr	r3, [r3, #32]
 8012f48:	7f1b      	ldrb	r3, [r3, #28]
 8012f4a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	7f1b      	ldrb	r3, [r3, #28]
 8012f50:	f003 0302 	and.w	r3, r3, #2
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d104      	bne.n	8012f62 <lwip_netconn_do_writemore+0xba>
 8012f58:	7ebb      	ldrb	r3, [r7, #26]
 8012f5a:	f003 0304 	and.w	r3, r3, #4
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d001      	beq.n	8012f66 <lwip_netconn_do_writemore+0xbe>
 8012f62:	2301      	movs	r3, #1
 8012f64:	e000      	b.n	8012f68 <lwip_netconn_do_writemore+0xc0>
 8012f66:	2300      	movs	r3, #0
 8012f68:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6a1b      	ldr	r3, [r3, #32]
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	4413      	add	r3, r2
 8012f7a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6a1b      	ldr	r3, [r3, #32]
 8012f80:	689b      	ldr	r3, [r3, #8]
 8012f82:	685a      	ldr	r2, [r3, #4]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6a1b      	ldr	r3, [r3, #32]
 8012f88:	691b      	ldr	r3, [r3, #16]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f94:	d307      	bcc.n	8012fa6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012f9a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012f9c:	7ebb      	ldrb	r3, [r7, #26]
 8012f9e:	f043 0302 	orr.w	r3, r3, #2
 8012fa2:	76bb      	strb	r3, [r7, #26]
 8012fa4:	e001      	b.n	8012faa <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012fb2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012fb4:	89fa      	ldrh	r2, [r7, #14]
 8012fb6:	8bbb      	ldrh	r3, [r7, #28]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d216      	bcs.n	8012fea <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012fbc:	89fb      	ldrh	r3, [r7, #14]
 8012fbe:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012fc0:	7e3b      	ldrb	r3, [r7, #24]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d00d      	beq.n	8012fe2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012fc6:	8bbb      	ldrh	r3, [r7, #28]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d10e      	bne.n	8012fea <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6a1b      	ldr	r3, [r3, #32]
 8012fd0:	699b      	ldr	r3, [r3, #24]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d102      	bne.n	8012fdc <lwip_netconn_do_writemore+0x134>
 8012fd6:	f06f 0306 	mvn.w	r3, #6
 8012fda:	e000      	b.n	8012fde <lwip_netconn_do_writemore+0x136>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012fe0:	e07d      	b.n	80130de <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012fe2:	7ebb      	ldrb	r3, [r7, #26]
 8012fe4:	f043 0302 	orr.w	r3, r3, #2
 8012fe8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6a1b      	ldr	r3, [r3, #32]
 8012fee:	691a      	ldr	r2, [r3, #16]
 8012ff0:	8bbb      	ldrh	r3, [r7, #28]
 8012ff2:	441a      	add	r2, r3
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6a1b      	ldr	r3, [r3, #32]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	685b      	ldr	r3, [r3, #4]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d906      	bls.n	801300e <lwip_netconn_do_writemore+0x166>
 8013000:	4b45      	ldr	r3, [pc, #276]	@ (8013118 <lwip_netconn_do_writemore+0x270>)
 8013002:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8013006:	494c      	ldr	r1, [pc, #304]	@ (8013138 <lwip_netconn_do_writemore+0x290>)
 8013008:	4845      	ldr	r0, [pc, #276]	@ (8013120 <lwip_netconn_do_writemore+0x278>)
 801300a:	f00e fab9 	bl	8021580 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801300e:	8bbb      	ldrh	r3, [r7, #28]
 8013010:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013014:	4293      	cmp	r3, r2
 8013016:	d103      	bne.n	8013020 <lwip_netconn_do_writemore+0x178>
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801301e:	d209      	bcs.n	8013034 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8013024:	8bba      	ldrh	r2, [r7, #28]
 8013026:	429a      	cmp	r2, r3
 8013028:	d10b      	bne.n	8013042 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6a1b      	ldr	r3, [r3, #32]
 801302e:	899b      	ldrh	r3, [r3, #12]
 8013030:	2b01      	cmp	r3, #1
 8013032:	d906      	bls.n	8013042 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8013034:	2301      	movs	r3, #1
 8013036:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8013038:	7ebb      	ldrb	r3, [r7, #26]
 801303a:	f043 0302 	orr.w	r3, r3, #2
 801303e:	76bb      	strb	r3, [r7, #26]
 8013040:	e001      	b.n	8013046 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8013042:	2300      	movs	r3, #0
 8013044:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6858      	ldr	r0, [r3, #4]
 801304a:	7ebb      	ldrb	r3, [r7, #26]
 801304c:	8bba      	ldrh	r2, [r7, #28]
 801304e:	6979      	ldr	r1, [r7, #20]
 8013050:	f007 fac2 	bl	801a5d8 <tcp_write>
 8013054:	4603      	mov	r3, r0
 8013056:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8013058:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d12c      	bne.n	80130ba <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6a1b      	ldr	r3, [r3, #32]
 8013064:	6999      	ldr	r1, [r3, #24]
 8013066:	8bba      	ldrh	r2, [r7, #28]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6a1b      	ldr	r3, [r3, #32]
 801306c:	440a      	add	r2, r1
 801306e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6a1b      	ldr	r3, [r3, #32]
 8013074:	6919      	ldr	r1, [r3, #16]
 8013076:	8bba      	ldrh	r2, [r7, #28]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6a1b      	ldr	r3, [r3, #32]
 801307c:	440a      	add	r2, r1
 801307e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6a1b      	ldr	r3, [r3, #32]
 8013084:	691a      	ldr	r2, [r3, #16]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6a1b      	ldr	r3, [r3, #32]
 801308a:	689b      	ldr	r3, [r3, #8]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	429a      	cmp	r2, r3
 8013090:	d113      	bne.n	80130ba <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6a1b      	ldr	r3, [r3, #32]
 8013096:	899a      	ldrh	r2, [r3, #12]
 8013098:	3a01      	subs	r2, #1
 801309a:	b292      	uxth	r2, r2
 801309c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a1b      	ldr	r3, [r3, #32]
 80130a2:	899b      	ldrh	r3, [r3, #12]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d008      	beq.n	80130ba <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6a1b      	ldr	r3, [r3, #32]
 80130ac:	689a      	ldr	r2, [r3, #8]
 80130ae:	3208      	adds	r2, #8
 80130b0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6a1b      	ldr	r3, [r3, #32]
 80130b6:	2200      	movs	r2, #0
 80130b8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80130ba:	7e7b      	ldrb	r3, [r7, #25]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d004      	beq.n	80130ca <lwip_netconn_do_writemore+0x222>
 80130c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	f43f af50 	beq.w	8012f6a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80130ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d004      	beq.n	80130dc <lwip_netconn_do_writemore+0x234>
 80130d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80130da:	d146      	bne.n	801316a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80130dc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80130de:	7e3b      	ldrb	r3, [r7, #24]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d02b      	beq.n	801313c <lwip_netconn_do_writemore+0x294>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6a1b      	ldr	r3, [r3, #32]
 80130e8:	699a      	ldr	r2, [r3, #24]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6a1b      	ldr	r3, [r3, #32]
 80130ee:	695b      	ldr	r3, [r3, #20]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d223      	bcs.n	801313c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d005      	beq.n	8013108 <lwip_netconn_do_writemore+0x260>
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013100:	2200      	movs	r2, #0
 8013102:	2103      	movs	r1, #3
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	7f1b      	ldrb	r3, [r3, #28]
 801310c:	f043 0310 	orr.w	r3, r3, #16
 8013110:	b2da      	uxtb	r2, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	771a      	strb	r2, [r3, #28]
 8013116:	e028      	b.n	801316a <lwip_netconn_do_writemore+0x2c2>
 8013118:	08022b48 	.word	0x08022b48
 801311c:	08022ca0 	.word	0x08022ca0
 8013120:	08022b8c 	.word	0x08022b8c
 8013124:	08022fa8 	.word	0x08022fa8
 8013128:	08022cb0 	.word	0x08022cb0
 801312c:	08022fc8 	.word	0x08022fc8
 8013130:	08022fe0 	.word	0x08022fe0
 8013134:	08023020 	.word	0x08023020
 8013138:	08023048 	.word	0x08023048
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013144:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8013148:	d305      	bcc.n	8013156 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8013152:	2b04      	cmp	r3, #4
 8013154:	d909      	bls.n	801316a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801315a:	2b00      	cmp	r3, #0
 801315c:	d005      	beq.n	801316a <lwip_netconn_do_writemore+0x2c2>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013162:	2200      	movs	r2, #0
 8013164:	2103      	movs	r1, #3
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801316a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d11d      	bne.n	80131ae <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6a1b      	ldr	r3, [r3, #32]
 8013176:	699a      	ldr	r2, [r3, #24]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6a1b      	ldr	r3, [r3, #32]
 801317c:	695b      	ldr	r3, [r3, #20]
 801317e:	429a      	cmp	r2, r3
 8013180:	d002      	beq.n	8013188 <lwip_netconn_do_writemore+0x2e0>
 8013182:	7e3b      	ldrb	r3, [r7, #24]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d001      	beq.n	801318c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8013188:	2301      	movs	r3, #1
 801318a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	4618      	mov	r0, r3
 8013192:	f008 f88f 	bl	801b2b4 <tcp_output>
 8013196:	4603      	mov	r3, r0
 8013198:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801319a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801319e:	f113 0f04 	cmn.w	r3, #4
 80131a2:	d12c      	bne.n	80131fe <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80131a4:	7b3b      	ldrb	r3, [r7, #12]
 80131a6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80131a8:	2301      	movs	r3, #1
 80131aa:	76fb      	strb	r3, [r7, #27]
 80131ac:	e027      	b.n	80131fe <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80131ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80131b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80131b6:	d120      	bne.n	80131fa <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	4618      	mov	r0, r3
 80131be:	f008 f879 	bl	801b2b4 <tcp_output>
 80131c2:	4603      	mov	r3, r0
 80131c4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80131c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80131ca:	f113 0f04 	cmn.w	r3, #4
 80131ce:	d104      	bne.n	80131da <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80131d0:	7b7b      	ldrb	r3, [r7, #13]
 80131d2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80131d4:	2301      	movs	r3, #1
 80131d6:	76fb      	strb	r3, [r7, #27]
 80131d8:	e011      	b.n	80131fe <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80131da:	7e3b      	ldrb	r3, [r7, #24]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00e      	beq.n	80131fe <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6a1b      	ldr	r3, [r3, #32]
 80131e4:	699b      	ldr	r3, [r3, #24]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d102      	bne.n	80131f0 <lwip_netconn_do_writemore+0x348>
 80131ea:	f06f 0306 	mvn.w	r3, #6
 80131ee:	e000      	b.n	80131f2 <lwip_netconn_do_writemore+0x34a>
 80131f0:	2300      	movs	r3, #0
 80131f2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80131f4:	2301      	movs	r3, #1
 80131f6:	76fb      	strb	r3, [r7, #27]
 80131f8:	e001      	b.n	80131fe <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80131fa:	2301      	movs	r3, #1
 80131fc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80131fe:	7efb      	ldrb	r3, [r7, #27]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d015      	beq.n	8013230 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6a1b      	ldr	r3, [r3, #32]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	330c      	adds	r3, #12
 801320c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6a1b      	ldr	r3, [r3, #32]
 8013212:	7ffa      	ldrb	r2, [r7, #31]
 8013214:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013222:	78fb      	ldrb	r3, [r7, #3]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d006      	beq.n	8013236 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8013228:	68b8      	ldr	r0, [r7, #8]
 801322a:	f00c ff42 	bl	80200b2 <sys_sem_signal>
 801322e:	e002      	b.n	8013236 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8013230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013234:	e000      	b.n	8013238 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	3720      	adds	r7, #32
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	785b      	ldrb	r3, [r3, #1]
 8013252:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d069      	beq.n	8013332 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8013268:	2b10      	cmp	r3, #16
 801326a:	d162      	bne.n	8013332 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013270:	2b03      	cmp	r3, #3
 8013272:	d002      	beq.n	801327a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013274:	7afb      	ldrb	r3, [r7, #11]
 8013276:	2b02      	cmp	r3, #2
 8013278:	d05b      	beq.n	8013332 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801327a:	7afb      	ldrb	r3, [r7, #11]
 801327c:	2b03      	cmp	r3, #3
 801327e:	d103      	bne.n	8013288 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	22f5      	movs	r2, #245	@ 0xf5
 8013284:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013286:	e059      	b.n	801333c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8013288:	7afb      	ldrb	r3, [r7, #11]
 801328a:	2b01      	cmp	r3, #1
 801328c:	d103      	bne.n	8013296 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	22fb      	movs	r2, #251	@ 0xfb
 8013292:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013294:	e052      	b.n	801333c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	7a1b      	ldrb	r3, [r3, #8]
 801329a:	f003 0301 	and.w	r3, r3, #1
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d004      	beq.n	80132ac <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7ff f90a 	bl	80124c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	6a1b      	ldr	r3, [r3, #32]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d006      	beq.n	80132c4 <lwip_netconn_do_close+0x84>
 80132b6:	4b23      	ldr	r3, [pc, #140]	@ (8013344 <lwip_netconn_do_close+0x104>)
 80132b8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80132bc:	4922      	ldr	r1, [pc, #136]	@ (8013348 <lwip_netconn_do_close+0x108>)
 80132be:	4823      	ldr	r0, [pc, #140]	@ (801334c <lwip_netconn_do_close+0x10c>)
 80132c0:	f00e f95e 	bl	8021580 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2204      	movs	r2, #4
 80132ca:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	68fa      	ldr	r2, [r7, #12]
 80132d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2100      	movs	r1, #0
 80132da:	4618      	mov	r0, r3
 80132dc:	f7ff f96e 	bl	80125bc <lwip_netconn_do_close_internal>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d029      	beq.n	801333a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	785b      	ldrb	r3, [r3, #1]
 80132ec:	2b04      	cmp	r3, #4
 80132ee:	d006      	beq.n	80132fe <lwip_netconn_do_close+0xbe>
 80132f0:	4b14      	ldr	r3, [pc, #80]	@ (8013344 <lwip_netconn_do_close+0x104>)
 80132f2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80132f6:	4916      	ldr	r1, [pc, #88]	@ (8013350 <lwip_netconn_do_close+0x110>)
 80132f8:	4814      	ldr	r0, [pc, #80]	@ (801334c <lwip_netconn_do_close+0x10c>)
 80132fa:	f00e f941 	bl	8021580 <iprintf>
        UNLOCK_TCPIP_CORE();
 80132fe:	4815      	ldr	r0, [pc, #84]	@ (8013354 <lwip_netconn_do_close+0x114>)
 8013300:	f00c ff6b 	bl	80201da <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	330c      	adds	r3, #12
 801330a:	2100      	movs	r1, #0
 801330c:	4618      	mov	r0, r3
 801330e:	f00c fe9f 	bl	8020050 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8013312:	4810      	ldr	r0, [pc, #64]	@ (8013354 <lwip_netconn_do_close+0x114>)
 8013314:	f00c ff52 	bl	80201bc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	785b      	ldrb	r3, [r3, #1]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d00b      	beq.n	801333a <lwip_netconn_do_close+0xfa>
 8013322:	4b08      	ldr	r3, [pc, #32]	@ (8013344 <lwip_netconn_do_close+0x104>)
 8013324:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8013328:	4909      	ldr	r1, [pc, #36]	@ (8013350 <lwip_netconn_do_close+0x110>)
 801332a:	4808      	ldr	r0, [pc, #32]	@ (801334c <lwip_netconn_do_close+0x10c>)
 801332c:	f00e f928 	bl	8021580 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8013330:	e003      	b.n	801333a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	22f5      	movs	r2, #245	@ 0xf5
 8013336:	711a      	strb	r2, [r3, #4]
 8013338:	e000      	b.n	801333c <lwip_netconn_do_close+0xfc>
      return;
 801333a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 801333c:	3710      	adds	r7, #16
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	08022b48 	.word	0x08022b48
 8013348:	08022eec 	.word	0x08022eec
 801334c:	08022b8c 	.word	0x08022b8c
 8013350:	08022f08 	.word	0x08022f08
 8013354:	200270e4 	.word	0x200270e4

08013358 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8013358:	b480      	push	{r7}
 801335a:	b083      	sub	sp, #12
 801335c:	af00      	add	r7, sp, #0
 801335e:	4603      	mov	r3, r0
 8013360:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8013362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013366:	2b00      	cmp	r3, #0
 8013368:	dc04      	bgt.n	8013374 <lwip_strerr+0x1c>
 801336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801336e:	f113 0f10 	cmn.w	r3, #16
 8013372:	da01      	bge.n	8013378 <lwip_strerr+0x20>
    return "Unknown error.";
 8013374:	4b06      	ldr	r3, [pc, #24]	@ (8013390 <lwip_strerr+0x38>)
 8013376:	e005      	b.n	8013384 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8013378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801337c:	425b      	negs	r3, r3
 801337e:	4a05      	ldr	r2, [pc, #20]	@ (8013394 <lwip_strerr+0x3c>)
 8013380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8013384:	4618      	mov	r0, r3
 8013386:	370c      	adds	r7, #12
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr
 8013390:	080231dc 	.word	0x080231dc
 8013394:	20000024 	.word	0x20000024

08013398 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801339e:	2006      	movs	r0, #6
 80133a0:	f001 f846 	bl	8014430 <memp_malloc>
 80133a4:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d004      	beq.n	80133b6 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80133ac:	2210      	movs	r2, #16
 80133ae:	2100      	movs	r1, #0
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f00e fa45 	bl	8021840 <memset>
  }
  return buf;
 80133b6:	687b      	ldr	r3, [r7, #4]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d013      	beq.n	80133f6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00b      	beq.n	80133ee <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4618      	mov	r0, r3
 80133dc:	f002 f88a 	bl	80154f4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	605a      	str	r2, [r3, #4]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685a      	ldr	r2, [r3, #4]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80133ee:	6879      	ldr	r1, [r7, #4]
 80133f0:	2006      	movs	r0, #6
 80133f2:	f001 f899 	bl	8014528 <memp_free>
  }
}
 80133f6:	bf00      	nop
 80133f8:	3708      	adds	r7, #8
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}
	...

08013400 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b082      	sub	sp, #8
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	460b      	mov	r3, r1
 801340a:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d107      	bne.n	8013422 <netbuf_alloc+0x22>
 8013412:	4b1c      	ldr	r3, [pc, #112]	@ (8013484 <netbuf_alloc+0x84>)
 8013414:	2268      	movs	r2, #104	@ 0x68
 8013416:	491c      	ldr	r1, [pc, #112]	@ (8013488 <netbuf_alloc+0x88>)
 8013418:	481c      	ldr	r0, [pc, #112]	@ (801348c <netbuf_alloc+0x8c>)
 801341a:	f00e f8b1 	bl	8021580 <iprintf>
 801341e:	2300      	movs	r3, #0
 8013420:	e02b      	b.n	801347a <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d004      	beq.n	8013434 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	4618      	mov	r0, r3
 8013430:	f002 f860 	bl	80154f4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8013434:	887b      	ldrh	r3, [r7, #2]
 8013436:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801343a:	4619      	mov	r1, r3
 801343c:	2036      	movs	r0, #54	@ 0x36
 801343e:	f001 fd2d 	bl	8014e9c <pbuf_alloc>
 8013442:	4602      	mov	r2, r0
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <netbuf_alloc+0x54>
    return NULL;
 8013450:	2300      	movs	r3, #0
 8013452:	e012      	b.n	801347a <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	895b      	ldrh	r3, [r3, #10]
 801345a:	887a      	ldrh	r2, [r7, #2]
 801345c:	429a      	cmp	r2, r3
 801345e:	d905      	bls.n	801346c <netbuf_alloc+0x6c>
 8013460:	4b08      	ldr	r3, [pc, #32]	@ (8013484 <netbuf_alloc+0x84>)
 8013462:	2272      	movs	r2, #114	@ 0x72
 8013464:	490a      	ldr	r1, [pc, #40]	@ (8013490 <netbuf_alloc+0x90>)
 8013466:	4809      	ldr	r0, [pc, #36]	@ (801348c <netbuf_alloc+0x8c>)
 8013468:	f00e f88a 	bl	8021580 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	685b      	ldr	r3, [r3, #4]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3708      	adds	r7, #8
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	080231ec 	.word	0x080231ec
 8013488:	08023220 	.word	0x08023220
 801348c:	0802323c 	.word	0x0802323c
 8013490:	08023264 	.word	0x08023264

08013494 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b084      	sub	sp, #16
 8013498:	af00      	add	r7, sp, #0
 801349a:	60f8      	str	r0, [r7, #12]
 801349c:	60b9      	str	r1, [r7, #8]
 801349e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d108      	bne.n	80134b8 <netbuf_data+0x24>
 80134a6:	4b1b      	ldr	r3, [pc, #108]	@ (8013514 <netbuf_data+0x80>)
 80134a8:	22c6      	movs	r2, #198	@ 0xc6
 80134aa:	491b      	ldr	r1, [pc, #108]	@ (8013518 <netbuf_data+0x84>)
 80134ac:	481b      	ldr	r0, [pc, #108]	@ (801351c <netbuf_data+0x88>)
 80134ae:	f00e f867 	bl	8021580 <iprintf>
 80134b2:	f06f 030f 	mvn.w	r3, #15
 80134b6:	e029      	b.n	801350c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d108      	bne.n	80134d0 <netbuf_data+0x3c>
 80134be:	4b15      	ldr	r3, [pc, #84]	@ (8013514 <netbuf_data+0x80>)
 80134c0:	22c7      	movs	r2, #199	@ 0xc7
 80134c2:	4917      	ldr	r1, [pc, #92]	@ (8013520 <netbuf_data+0x8c>)
 80134c4:	4815      	ldr	r0, [pc, #84]	@ (801351c <netbuf_data+0x88>)
 80134c6:	f00e f85b 	bl	8021580 <iprintf>
 80134ca:	f06f 030f 	mvn.w	r3, #15
 80134ce:	e01d      	b.n	801350c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d108      	bne.n	80134e8 <netbuf_data+0x54>
 80134d6:	4b0f      	ldr	r3, [pc, #60]	@ (8013514 <netbuf_data+0x80>)
 80134d8:	22c8      	movs	r2, #200	@ 0xc8
 80134da:	4912      	ldr	r1, [pc, #72]	@ (8013524 <netbuf_data+0x90>)
 80134dc:	480f      	ldr	r0, [pc, #60]	@ (801351c <netbuf_data+0x88>)
 80134de:	f00e f84f 	bl	8021580 <iprintf>
 80134e2:	f06f 030f 	mvn.w	r3, #15
 80134e6:	e011      	b.n	801350c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d102      	bne.n	80134f6 <netbuf_data+0x62>
    return ERR_BUF;
 80134f0:	f06f 0301 	mvn.w	r3, #1
 80134f4:	e00a      	b.n	801350c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	685a      	ldr	r2, [r3, #4]
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	895a      	ldrh	r2, [r3, #10]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801350a:	2300      	movs	r3, #0
}
 801350c:	4618      	mov	r0, r3
 801350e:	3710      	adds	r7, #16
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	080231ec 	.word	0x080231ec
 8013518:	080232f4 	.word	0x080232f4
 801351c:	0802323c 	.word	0x0802323c
 8013520:	08023310 	.word	0x08023310
 8013524:	08023330 	.word	0x08023330

08013528 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b084      	sub	sp, #16
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013532:	f008 ff97 	bl	801c464 <sys_timeouts_sleeptime>
 8013536:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801353e:	d10b      	bne.n	8013558 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013540:	4813      	ldr	r0, [pc, #76]	@ (8013590 <tcpip_timeouts_mbox_fetch+0x68>)
 8013542:	f00c fe4a 	bl	80201da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013546:	2200      	movs	r2, #0
 8013548:	6839      	ldr	r1, [r7, #0]
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f00c fcd4 	bl	801fef8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013550:	480f      	ldr	r0, [pc, #60]	@ (8013590 <tcpip_timeouts_mbox_fetch+0x68>)
 8013552:	f00c fe33 	bl	80201bc <sys_mutex_lock>
    return;
 8013556:	e018      	b.n	801358a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d102      	bne.n	8013564 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801355e:	f008 ff47 	bl	801c3f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013562:	e7e6      	b.n	8013532 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013564:	480a      	ldr	r0, [pc, #40]	@ (8013590 <tcpip_timeouts_mbox_fetch+0x68>)
 8013566:	f00c fe38 	bl	80201da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801356a:	68fa      	ldr	r2, [r7, #12]
 801356c:	6839      	ldr	r1, [r7, #0]
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f00c fcc2 	bl	801fef8 <sys_arch_mbox_fetch>
 8013574:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8013576:	4806      	ldr	r0, [pc, #24]	@ (8013590 <tcpip_timeouts_mbox_fetch+0x68>)
 8013578:	f00c fe20 	bl	80201bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013582:	d102      	bne.n	801358a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013584:	f008 ff34 	bl	801c3f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013588:	e7d3      	b.n	8013532 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	200270e4 	.word	0x200270e4

08013594 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801359c:	4810      	ldr	r0, [pc, #64]	@ (80135e0 <tcpip_thread+0x4c>)
 801359e:	f00c fe0d 	bl	80201bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80135a2:	4b10      	ldr	r3, [pc, #64]	@ (80135e4 <tcpip_thread+0x50>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d005      	beq.n	80135b6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80135aa:	4b0e      	ldr	r3, [pc, #56]	@ (80135e4 <tcpip_thread+0x50>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	4a0e      	ldr	r2, [pc, #56]	@ (80135e8 <tcpip_thread+0x54>)
 80135b0:	6812      	ldr	r2, [r2, #0]
 80135b2:	4610      	mov	r0, r2
 80135b4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80135b6:	f107 030c 	add.w	r3, r7, #12
 80135ba:	4619      	mov	r1, r3
 80135bc:	480b      	ldr	r0, [pc, #44]	@ (80135ec <tcpip_thread+0x58>)
 80135be:	f7ff ffb3 	bl	8013528 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d106      	bne.n	80135d6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80135c8:	4b09      	ldr	r3, [pc, #36]	@ (80135f0 <tcpip_thread+0x5c>)
 80135ca:	2291      	movs	r2, #145	@ 0x91
 80135cc:	4909      	ldr	r1, [pc, #36]	@ (80135f4 <tcpip_thread+0x60>)
 80135ce:	480a      	ldr	r0, [pc, #40]	@ (80135f8 <tcpip_thread+0x64>)
 80135d0:	f00d ffd6 	bl	8021580 <iprintf>
      continue;
 80135d4:	e003      	b.n	80135de <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	4618      	mov	r0, r3
 80135da:	f000 f80f 	bl	80135fc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80135de:	e7ea      	b.n	80135b6 <tcpip_thread+0x22>
 80135e0:	200270e4 	.word	0x200270e4
 80135e4:	200270d8 	.word	0x200270d8
 80135e8:	200270dc 	.word	0x200270dc
 80135ec:	200270e0 	.word	0x200270e0
 80135f0:	08023384 	.word	0x08023384
 80135f4:	080233b4 	.word	0x080233b4
 80135f8:	080233d4 	.word	0x080233d4

080135fc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	2b02      	cmp	r3, #2
 801360a:	d026      	beq.n	801365a <tcpip_thread_handle_msg+0x5e>
 801360c:	2b02      	cmp	r3, #2
 801360e:	dc2b      	bgt.n	8013668 <tcpip_thread_handle_msg+0x6c>
 8013610:	2b00      	cmp	r3, #0
 8013612:	d002      	beq.n	801361a <tcpip_thread_handle_msg+0x1e>
 8013614:	2b01      	cmp	r3, #1
 8013616:	d015      	beq.n	8013644 <tcpip_thread_handle_msg+0x48>
 8013618:	e026      	b.n	8013668 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	687a      	ldr	r2, [r7, #4]
 8013620:	6850      	ldr	r0, [r2, #4]
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	6892      	ldr	r2, [r2, #8]
 8013626:	4611      	mov	r1, r2
 8013628:	4798      	blx	r3
 801362a:	4603      	mov	r3, r0
 801362c:	2b00      	cmp	r3, #0
 801362e:	d004      	beq.n	801363a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	685b      	ldr	r3, [r3, #4]
 8013634:	4618      	mov	r0, r3
 8013636:	f001 ff5d 	bl	80154f4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801363a:	6879      	ldr	r1, [r7, #4]
 801363c:	2009      	movs	r0, #9
 801363e:	f000 ff73 	bl	8014528 <memp_free>
      break;
 8013642:	e018      	b.n	8013676 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	6892      	ldr	r2, [r2, #8]
 801364c:	4610      	mov	r0, r2
 801364e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013650:	6879      	ldr	r1, [r7, #4]
 8013652:	2008      	movs	r0, #8
 8013654:	f000 ff68 	bl	8014528 <memp_free>
      break;
 8013658:	e00d      	b.n	8013676 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	6892      	ldr	r2, [r2, #8]
 8013662:	4610      	mov	r0, r2
 8013664:	4798      	blx	r3
      break;
 8013666:	e006      	b.n	8013676 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013668:	4b05      	ldr	r3, [pc, #20]	@ (8013680 <tcpip_thread_handle_msg+0x84>)
 801366a:	22cf      	movs	r2, #207	@ 0xcf
 801366c:	4905      	ldr	r1, [pc, #20]	@ (8013684 <tcpip_thread_handle_msg+0x88>)
 801366e:	4806      	ldr	r0, [pc, #24]	@ (8013688 <tcpip_thread_handle_msg+0x8c>)
 8013670:	f00d ff86 	bl	8021580 <iprintf>
      break;
 8013674:	bf00      	nop
  }
}
 8013676:	bf00      	nop
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	08023384 	.word	0x08023384
 8013684:	080233b4 	.word	0x080233b4
 8013688:	080233d4 	.word	0x080233d4

0801368c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b086      	sub	sp, #24
 8013690:	af00      	add	r7, sp, #0
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013698:	481a      	ldr	r0, [pc, #104]	@ (8013704 <tcpip_inpkt+0x78>)
 801369a:	f00c fc75 	bl	801ff88 <sys_mbox_valid>
 801369e:	4603      	mov	r3, r0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d105      	bne.n	80136b0 <tcpip_inpkt+0x24>
 80136a4:	4b18      	ldr	r3, [pc, #96]	@ (8013708 <tcpip_inpkt+0x7c>)
 80136a6:	22fc      	movs	r2, #252	@ 0xfc
 80136a8:	4918      	ldr	r1, [pc, #96]	@ (801370c <tcpip_inpkt+0x80>)
 80136aa:	4819      	ldr	r0, [pc, #100]	@ (8013710 <tcpip_inpkt+0x84>)
 80136ac:	f00d ff68 	bl	8021580 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80136b0:	2009      	movs	r0, #9
 80136b2:	f000 febd 	bl	8014430 <memp_malloc>
 80136b6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d102      	bne.n	80136c4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80136be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80136c2:	e01a      	b.n	80136fa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	2200      	movs	r2, #0
 80136c8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	68fa      	ldr	r2, [r7, #12]
 80136ce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	68ba      	ldr	r2, [r7, #8]
 80136d4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80136dc:	6979      	ldr	r1, [r7, #20]
 80136de:	4809      	ldr	r0, [pc, #36]	@ (8013704 <tcpip_inpkt+0x78>)
 80136e0:	f00c fbe6 	bl	801feb0 <sys_mbox_trypost>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d006      	beq.n	80136f8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80136ea:	6979      	ldr	r1, [r7, #20]
 80136ec:	2009      	movs	r0, #9
 80136ee:	f000 ff1b 	bl	8014528 <memp_free>
    return ERR_MEM;
 80136f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80136f6:	e000      	b.n	80136fa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80136f8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3718      	adds	r7, #24
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	200270e0 	.word	0x200270e0
 8013708:	08023384 	.word	0x08023384
 801370c:	080233fc 	.word	0x080233fc
 8013710:	080233d4 	.word	0x080233d4

08013714 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013724:	f003 0318 	and.w	r3, r3, #24
 8013728:	2b00      	cmp	r3, #0
 801372a:	d006      	beq.n	801373a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801372c:	4a08      	ldr	r2, [pc, #32]	@ (8013750 <tcpip_input+0x3c>)
 801372e:	6839      	ldr	r1, [r7, #0]
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7ff ffab 	bl	801368c <tcpip_inpkt>
 8013736:	4603      	mov	r3, r0
 8013738:	e005      	b.n	8013746 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801373a:	4a06      	ldr	r2, [pc, #24]	@ (8013754 <tcpip_input+0x40>)
 801373c:	6839      	ldr	r1, [r7, #0]
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7ff ffa4 	bl	801368c <tcpip_inpkt>
 8013744:	4603      	mov	r3, r0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3708      	adds	r7, #8
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
 801374e:	bf00      	nop
 8013750:	0801fbf9 	.word	0x0801fbf9
 8013754:	0801e9d5 	.word	0x0801e9d5

08013758 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013762:	4819      	ldr	r0, [pc, #100]	@ (80137c8 <tcpip_try_callback+0x70>)
 8013764:	f00c fc10 	bl	801ff88 <sys_mbox_valid>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	d106      	bne.n	801377c <tcpip_try_callback+0x24>
 801376e:	4b17      	ldr	r3, [pc, #92]	@ (80137cc <tcpip_try_callback+0x74>)
 8013770:	f240 125d 	movw	r2, #349	@ 0x15d
 8013774:	4916      	ldr	r1, [pc, #88]	@ (80137d0 <tcpip_try_callback+0x78>)
 8013776:	4817      	ldr	r0, [pc, #92]	@ (80137d4 <tcpip_try_callback+0x7c>)
 8013778:	f00d ff02 	bl	8021580 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801377c:	2008      	movs	r0, #8
 801377e:	f000 fe57 	bl	8014430 <memp_malloc>
 8013782:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d102      	bne.n	8013790 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801378a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801378e:	e017      	b.n	80137c0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2201      	movs	r2, #1
 8013794:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	683a      	ldr	r2, [r7, #0]
 80137a0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80137a2:	68f9      	ldr	r1, [r7, #12]
 80137a4:	4808      	ldr	r0, [pc, #32]	@ (80137c8 <tcpip_try_callback+0x70>)
 80137a6:	f00c fb83 	bl	801feb0 <sys_mbox_trypost>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d006      	beq.n	80137be <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80137b0:	68f9      	ldr	r1, [r7, #12]
 80137b2:	2008      	movs	r0, #8
 80137b4:	f000 feb8 	bl	8014528 <memp_free>
    return ERR_MEM;
 80137b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80137bc:	e000      	b.n	80137c0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80137be:	2300      	movs	r3, #0
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3710      	adds	r7, #16
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	200270e0 	.word	0x200270e0
 80137cc:	08023384 	.word	0x08023384
 80137d0:	080233fc 	.word	0x080233fc
 80137d4:	080233d4 	.word	0x080233d4

080137d8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80137e4:	4806      	ldr	r0, [pc, #24]	@ (8013800 <tcpip_send_msg_wait_sem+0x28>)
 80137e6:	f00c fce9 	bl	80201bc <sys_mutex_lock>
  fn(apimsg);
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	68b8      	ldr	r0, [r7, #8]
 80137ee:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80137f0:	4803      	ldr	r0, [pc, #12]	@ (8013800 <tcpip_send_msg_wait_sem+0x28>)
 80137f2:	f00c fcf2 	bl	80201da <sys_mutex_unlock>
  return ERR_OK;
 80137f6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3710      	adds	r7, #16
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	200270e4 	.word	0x200270e4

08013804 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af02      	add	r7, sp, #8
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801380e:	f000 f872 	bl	80138f6 <lwip_init>

  tcpip_init_done = initfunc;
 8013812:	4a17      	ldr	r2, [pc, #92]	@ (8013870 <tcpip_init+0x6c>)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013818:	4a16      	ldr	r2, [pc, #88]	@ (8013874 <tcpip_init+0x70>)
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801381e:	2106      	movs	r1, #6
 8013820:	4815      	ldr	r0, [pc, #84]	@ (8013878 <tcpip_init+0x74>)
 8013822:	f00c faeb 	bl	801fdfc <sys_mbox_new>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d006      	beq.n	801383a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801382c:	4b13      	ldr	r3, [pc, #76]	@ (801387c <tcpip_init+0x78>)
 801382e:	f240 2261 	movw	r2, #609	@ 0x261
 8013832:	4913      	ldr	r1, [pc, #76]	@ (8013880 <tcpip_init+0x7c>)
 8013834:	4813      	ldr	r0, [pc, #76]	@ (8013884 <tcpip_init+0x80>)
 8013836:	f00d fea3 	bl	8021580 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801383a:	4813      	ldr	r0, [pc, #76]	@ (8013888 <tcpip_init+0x84>)
 801383c:	f00c fc88 	bl	8020150 <sys_mutex_new>
 8013840:	4603      	mov	r3, r0
 8013842:	2b00      	cmp	r3, #0
 8013844:	d006      	beq.n	8013854 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8013846:	4b0d      	ldr	r3, [pc, #52]	@ (801387c <tcpip_init+0x78>)
 8013848:	f240 2265 	movw	r2, #613	@ 0x265
 801384c:	490f      	ldr	r1, [pc, #60]	@ (801388c <tcpip_init+0x88>)
 801384e:	480d      	ldr	r0, [pc, #52]	@ (8013884 <tcpip_init+0x80>)
 8013850:	f00d fe96 	bl	8021580 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013854:	2318      	movs	r3, #24
 8013856:	9300      	str	r3, [sp, #0]
 8013858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801385c:	2200      	movs	r2, #0
 801385e:	490c      	ldr	r1, [pc, #48]	@ (8013890 <tcpip_init+0x8c>)
 8013860:	480c      	ldr	r0, [pc, #48]	@ (8013894 <tcpip_init+0x90>)
 8013862:	f00c fcc7 	bl	80201f4 <sys_thread_new>
}
 8013866:	bf00      	nop
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	200270d8 	.word	0x200270d8
 8013874:	200270dc 	.word	0x200270dc
 8013878:	200270e0 	.word	0x200270e0
 801387c:	08023384 	.word	0x08023384
 8013880:	0802340c 	.word	0x0802340c
 8013884:	080233d4 	.word	0x080233d4
 8013888:	200270e4 	.word	0x200270e4
 801388c:	08023430 	.word	0x08023430
 8013890:	08013595 	.word	0x08013595
 8013894:	08023454 	.word	0x08023454

08013898 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
 801389e:	4603      	mov	r3, r0
 80138a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80138a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80138a6:	021b      	lsls	r3, r3, #8
 80138a8:	b21a      	sxth	r2, r3
 80138aa:	88fb      	ldrh	r3, [r7, #6]
 80138ac:	0a1b      	lsrs	r3, r3, #8
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	b21b      	sxth	r3, r3
 80138b2:	4313      	orrs	r3, r2
 80138b4:	b21b      	sxth	r3, r3
 80138b6:	b29b      	uxth	r3, r3
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	370c      	adds	r7, #12
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80138c4:	b480      	push	{r7}
 80138c6:	b083      	sub	sp, #12
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	061a      	lsls	r2, r3, #24
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	021b      	lsls	r3, r3, #8
 80138d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80138d8:	431a      	orrs	r2, r3
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	0a1b      	lsrs	r3, r3, #8
 80138de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80138e2:	431a      	orrs	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	0e1b      	lsrs	r3, r3, #24
 80138e8:	4313      	orrs	r3, r2
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	370c      	adds	r7, #12
 80138ee:	46bd      	mov	sp, r7
 80138f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f4:	4770      	bx	lr

080138f6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b082      	sub	sp, #8
 80138fa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80138fc:	2300      	movs	r3, #0
 80138fe:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013900:	f002 f8ce 	bl	8015aa0 <stats_init>
#if !NO_SYS
  sys_init();
 8013904:	f00c fc18 	bl	8020138 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013908:	f000 f8d4 	bl	8013ab4 <mem_init>
  memp_init();
 801390c:	f000 fcf4 	bl	80142f8 <memp_init>
  pbuf_init();
  netif_init();
 8013910:	f000 fe34 	bl	801457c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013914:	f008 fdde 	bl	801c4d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013918:	f002 fa40 	bl	8015d9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801391c:	f008 fd20 	bl	801c360 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013920:	bf00      	nop
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
 801392e:	4603      	mov	r3, r0
 8013930:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8013932:	4b05      	ldr	r3, [pc, #20]	@ (8013948 <ptr_to_mem+0x20>)
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	88fb      	ldrh	r3, [r7, #6]
 8013938:	4413      	add	r3, r2
}
 801393a:	4618      	mov	r0, r3
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop
 8013948:	20027100 	.word	0x20027100

0801394c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801394c:	b480      	push	{r7}
 801394e:	b083      	sub	sp, #12
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013954:	4b05      	ldr	r3, [pc, #20]	@ (801396c <mem_to_ptr+0x20>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	1ad3      	subs	r3, r2, r3
 801395c:	b29b      	uxth	r3, r3
}
 801395e:	4618      	mov	r0, r3
 8013960:	370c      	adds	r7, #12
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop
 801396c:	20027100 	.word	0x20027100

08013970 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8013970:	b590      	push	{r4, r7, lr}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013978:	4b45      	ldr	r3, [pc, #276]	@ (8013a90 <plug_holes+0x120>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	687a      	ldr	r2, [r7, #4]
 801397e:	429a      	cmp	r2, r3
 8013980:	d206      	bcs.n	8013990 <plug_holes+0x20>
 8013982:	4b44      	ldr	r3, [pc, #272]	@ (8013a94 <plug_holes+0x124>)
 8013984:	f240 12df 	movw	r2, #479	@ 0x1df
 8013988:	4943      	ldr	r1, [pc, #268]	@ (8013a98 <plug_holes+0x128>)
 801398a:	4844      	ldr	r0, [pc, #272]	@ (8013a9c <plug_holes+0x12c>)
 801398c:	f00d fdf8 	bl	8021580 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013990:	4b43      	ldr	r3, [pc, #268]	@ (8013aa0 <plug_holes+0x130>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	429a      	cmp	r2, r3
 8013998:	d306      	bcc.n	80139a8 <plug_holes+0x38>
 801399a:	4b3e      	ldr	r3, [pc, #248]	@ (8013a94 <plug_holes+0x124>)
 801399c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80139a0:	4940      	ldr	r1, [pc, #256]	@ (8013aa4 <plug_holes+0x134>)
 80139a2:	483e      	ldr	r0, [pc, #248]	@ (8013a9c <plug_holes+0x12c>)
 80139a4:	f00d fdec 	bl	8021580 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	791b      	ldrb	r3, [r3, #4]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d006      	beq.n	80139be <plug_holes+0x4e>
 80139b0:	4b38      	ldr	r3, [pc, #224]	@ (8013a94 <plug_holes+0x124>)
 80139b2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80139b6:	493c      	ldr	r1, [pc, #240]	@ (8013aa8 <plug_holes+0x138>)
 80139b8:	4838      	ldr	r0, [pc, #224]	@ (8013a9c <plug_holes+0x12c>)
 80139ba:	f00d fde1 	bl	8021580 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	881b      	ldrh	r3, [r3, #0]
 80139c2:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80139c6:	d906      	bls.n	80139d6 <plug_holes+0x66>
 80139c8:	4b32      	ldr	r3, [pc, #200]	@ (8013a94 <plug_holes+0x124>)
 80139ca:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80139ce:	4937      	ldr	r1, [pc, #220]	@ (8013aac <plug_holes+0x13c>)
 80139d0:	4832      	ldr	r0, [pc, #200]	@ (8013a9c <plug_holes+0x12c>)
 80139d2:	f00d fdd5 	bl	8021580 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	881b      	ldrh	r3, [r3, #0]
 80139da:	4618      	mov	r0, r3
 80139dc:	f7ff ffa4 	bl	8013928 <ptr_to_mem>
 80139e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d024      	beq.n	8013a34 <plug_holes+0xc4>
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	791b      	ldrb	r3, [r3, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d120      	bne.n	8013a34 <plug_holes+0xc4>
 80139f2:	4b2b      	ldr	r3, [pc, #172]	@ (8013aa0 <plug_holes+0x130>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	68fa      	ldr	r2, [r7, #12]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d01b      	beq.n	8013a34 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80139fc:	4b2c      	ldr	r3, [pc, #176]	@ (8013ab0 <plug_holes+0x140>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d102      	bne.n	8013a0c <plug_holes+0x9c>
      lfree = mem;
 8013a06:	4a2a      	ldr	r2, [pc, #168]	@ (8013ab0 <plug_holes+0x140>)
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	881a      	ldrh	r2, [r3, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	881b      	ldrh	r3, [r3, #0]
 8013a18:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a1c:	d00a      	beq.n	8013a34 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7ff ff80 	bl	8013928 <ptr_to_mem>
 8013a28:	4604      	mov	r4, r0
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f7ff ff8e 	bl	801394c <mem_to_ptr>
 8013a30:	4603      	mov	r3, r0
 8013a32:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	885b      	ldrh	r3, [r3, #2]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ff ff75 	bl	8013928 <ptr_to_mem>
 8013a3e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013a40:	68ba      	ldr	r2, [r7, #8]
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d01f      	beq.n	8013a88 <plug_holes+0x118>
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	791b      	ldrb	r3, [r3, #4]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d11b      	bne.n	8013a88 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013a50:	4b17      	ldr	r3, [pc, #92]	@ (8013ab0 <plug_holes+0x140>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d102      	bne.n	8013a60 <plug_holes+0xf0>
      lfree = pmem;
 8013a5a:	4a15      	ldr	r2, [pc, #84]	@ (8013ab0 <plug_holes+0x140>)
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	881a      	ldrh	r2, [r3, #0]
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	881b      	ldrh	r3, [r3, #0]
 8013a6c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a70:	d00a      	beq.n	8013a88 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	881b      	ldrh	r3, [r3, #0]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7ff ff56 	bl	8013928 <ptr_to_mem>
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	68b8      	ldr	r0, [r7, #8]
 8013a80:	f7ff ff64 	bl	801394c <mem_to_ptr>
 8013a84:	4603      	mov	r3, r0
 8013a86:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013a88:	bf00      	nop
 8013a8a:	3714      	adds	r7, #20
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd90      	pop	{r4, r7, pc}
 8013a90:	20027100 	.word	0x20027100
 8013a94:	08023464 	.word	0x08023464
 8013a98:	08023494 	.word	0x08023494
 8013a9c:	080234ac 	.word	0x080234ac
 8013aa0:	20027104 	.word	0x20027104
 8013aa4:	080234d4 	.word	0x080234d4
 8013aa8:	080234f0 	.word	0x080234f0
 8013aac:	0802350c 	.word	0x0802350c
 8013ab0:	2002710c 	.word	0x2002710c

08013ab4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013aba:	4b1f      	ldr	r3, [pc, #124]	@ (8013b38 <mem_init+0x84>)
 8013abc:	4a1f      	ldr	r2, [pc, #124]	@ (8013b3c <mem_init+0x88>)
 8013abe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8013b38 <mem_init+0x84>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013acc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013ada:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 8013ade:	f7ff ff23 	bl	8013928 <ptr_to_mem>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	4a16      	ldr	r2, [pc, #88]	@ (8013b40 <mem_init+0x8c>)
 8013ae6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013ae8:	4b15      	ldr	r3, [pc, #84]	@ (8013b40 <mem_init+0x8c>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2201      	movs	r2, #1
 8013aee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013af0:	4b13      	ldr	r3, [pc, #76]	@ (8013b40 <mem_init+0x8c>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013af8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013afa:	4b11      	ldr	r3, [pc, #68]	@ (8013b40 <mem_init+0x8c>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013b02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013b04:	4b0c      	ldr	r3, [pc, #48]	@ (8013b38 <mem_init+0x84>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4a0e      	ldr	r2, [pc, #56]	@ (8013b44 <mem_init+0x90>)
 8013b0a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8013b48 <mem_init+0x94>)
 8013b0e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013b12:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013b16:	480d      	ldr	r0, [pc, #52]	@ (8013b4c <mem_init+0x98>)
 8013b18:	f00c fb1a 	bl	8020150 <sys_mutex_new>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d006      	beq.n	8013b30 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013b22:	4b0b      	ldr	r3, [pc, #44]	@ (8013b50 <mem_init+0x9c>)
 8013b24:	f240 221f 	movw	r2, #543	@ 0x21f
 8013b28:	490a      	ldr	r1, [pc, #40]	@ (8013b54 <mem_init+0xa0>)
 8013b2a:	480b      	ldr	r0, [pc, #44]	@ (8013b58 <mem_init+0xa4>)
 8013b2c:	f00d fd28 	bl	8021580 <iprintf>
  }
}
 8013b30:	bf00      	nop
 8013b32:	3708      	adds	r7, #8
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	20027100 	.word	0x20027100
 8013b3c:	20048000 	.word	0x20048000
 8013b40:	20027104 	.word	0x20027104
 8013b44:	2002710c 	.word	0x2002710c
 8013b48:	2002d358 	.word	0x2002d358
 8013b4c:	20027108 	.word	0x20027108
 8013b50:	08023464 	.word	0x08023464
 8013b54:	08023538 	.word	0x08023538
 8013b58:	080234ac 	.word	0x080234ac

08013b5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b086      	sub	sp, #24
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f7ff fef1 	bl	801394c <mem_to_ptr>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	881b      	ldrh	r3, [r3, #0]
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7ff fed8 	bl	8013928 <ptr_to_mem>
 8013b78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	885b      	ldrh	r3, [r3, #2]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7ff fed2 	bl	8013928 <ptr_to_mem>
 8013b84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	881b      	ldrh	r3, [r3, #0]
 8013b8a:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013b8e:	d818      	bhi.n	8013bc2 <mem_link_valid+0x66>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	885b      	ldrh	r3, [r3, #2]
 8013b94:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013b98:	d813      	bhi.n	8013bc2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013b9e:	8afa      	ldrh	r2, [r7, #22]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d004      	beq.n	8013bae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	881b      	ldrh	r3, [r3, #0]
 8013ba8:	8afa      	ldrh	r2, [r7, #22]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d109      	bne.n	8013bc2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013bae:	4b08      	ldr	r3, [pc, #32]	@ (8013bd0 <mem_link_valid+0x74>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013bb2:	693a      	ldr	r2, [r7, #16]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d006      	beq.n	8013bc6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	885b      	ldrh	r3, [r3, #2]
 8013bbc:	8afa      	ldrh	r2, [r7, #22]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d001      	beq.n	8013bc6 <mem_link_valid+0x6a>
    return 0;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	e000      	b.n	8013bc8 <mem_link_valid+0x6c>
  }
  return 1;
 8013bc6:	2301      	movs	r3, #1
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3718      	adds	r7, #24
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	20027104 	.word	0x20027104

08013bd4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b088      	sub	sp, #32
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d103      	bne.n	8013bea <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 8013be2:	485a      	ldr	r0, [pc, #360]	@ (8013d4c <mem_free+0x178>)
 8013be4:	f00d fd3c 	bl	8021660 <puts>
    return;
 8013be8:	e0ac      	b.n	8013d44 <mem_free+0x170>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f003 0303 	and.w	r3, r3, #3
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d018      	beq.n	8013c26 <mem_free+0x52>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013bf4:	4b56      	ldr	r3, [pc, #344]	@ (8013d50 <mem_free+0x17c>)
 8013bf6:	f240 2273 	movw	r2, #627	@ 0x273
 8013bfa:	4956      	ldr	r1, [pc, #344]	@ (8013d54 <mem_free+0x180>)
 8013bfc:	4856      	ldr	r0, [pc, #344]	@ (8013d58 <mem_free+0x184>)
 8013bfe:	f00d fcbf 	bl	8021580 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 8013c02:	4854      	ldr	r0, [pc, #336]	@ (8013d54 <mem_free+0x180>)
 8013c04:	f00d fd2c 	bl	8021660 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c08:	f00c fb14 	bl	8020234 <sys_arch_protect>
 8013c0c:	60f8      	str	r0, [r7, #12]
 8013c0e:	4b53      	ldr	r3, [pc, #332]	@ (8013d5c <mem_free+0x188>)
 8013c10:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013c14:	3301      	adds	r3, #1
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	4b50      	ldr	r3, [pc, #320]	@ (8013d5c <mem_free+0x188>)
 8013c1a:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013c1e:	68f8      	ldr	r0, [r7, #12]
 8013c20:	f00c fb16 	bl	8020250 <sys_arch_unprotect>
    return;
 8013c24:	e08e      	b.n	8013d44 <mem_free+0x170>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	3b08      	subs	r3, #8
 8013c2a:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8013d60 <mem_free+0x18c>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	69fa      	ldr	r2, [r7, #28]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d306      	bcc.n	8013c44 <mem_free+0x70>
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f103 020c 	add.w	r2, r3, #12
 8013c3c:	4b49      	ldr	r3, [pc, #292]	@ (8013d64 <mem_free+0x190>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d918      	bls.n	8013c76 <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013c44:	4b42      	ldr	r3, [pc, #264]	@ (8013d50 <mem_free+0x17c>)
 8013c46:	f240 227f 	movw	r2, #639	@ 0x27f
 8013c4a:	4947      	ldr	r1, [pc, #284]	@ (8013d68 <mem_free+0x194>)
 8013c4c:	4842      	ldr	r0, [pc, #264]	@ (8013d58 <mem_free+0x184>)
 8013c4e:	f00d fc97 	bl	8021580 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 8013c52:	4845      	ldr	r0, [pc, #276]	@ (8013d68 <mem_free+0x194>)
 8013c54:	f00d fd04 	bl	8021660 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c58:	f00c faec 	bl	8020234 <sys_arch_protect>
 8013c5c:	6138      	str	r0, [r7, #16]
 8013c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8013d5c <mem_free+0x188>)
 8013c60:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013c64:	3301      	adds	r3, #1
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	4b3c      	ldr	r3, [pc, #240]	@ (8013d5c <mem_free+0x188>)
 8013c6a:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013c6e:	6938      	ldr	r0, [r7, #16]
 8013c70:	f00c faee 	bl	8020250 <sys_arch_unprotect>
    return;
 8013c74:	e066      	b.n	8013d44 <mem_free+0x170>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013c76:	483d      	ldr	r0, [pc, #244]	@ (8013d6c <mem_free+0x198>)
 8013c78:	f00c faa0 	bl	80201bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	791b      	ldrb	r3, [r3, #4]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d11b      	bne.n	8013cbc <mem_free+0xe8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013c84:	4b32      	ldr	r3, [pc, #200]	@ (8013d50 <mem_free+0x17c>)
 8013c86:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8013c8a:	4939      	ldr	r1, [pc, #228]	@ (8013d70 <mem_free+0x19c>)
 8013c8c:	4832      	ldr	r0, [pc, #200]	@ (8013d58 <mem_free+0x184>)
 8013c8e:	f00d fc77 	bl	8021580 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013c92:	4836      	ldr	r0, [pc, #216]	@ (8013d6c <mem_free+0x198>)
 8013c94:	f00c faa1 	bl	80201da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8013c98:	4836      	ldr	r0, [pc, #216]	@ (8013d74 <mem_free+0x1a0>)
 8013c9a:	f00d fce1 	bl	8021660 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c9e:	f00c fac9 	bl	8020234 <sys_arch_protect>
 8013ca2:	6178      	str	r0, [r7, #20]
 8013ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8013d5c <mem_free+0x188>)
 8013ca6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013caa:	3301      	adds	r3, #1
 8013cac:	b29a      	uxth	r2, r3
 8013cae:	4b2b      	ldr	r3, [pc, #172]	@ (8013d5c <mem_free+0x188>)
 8013cb0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013cb4:	6978      	ldr	r0, [r7, #20]
 8013cb6:	f00c facb 	bl	8020250 <sys_arch_unprotect>
    return;
 8013cba:	e043      	b.n	8013d44 <mem_free+0x170>
  }

  if (!mem_link_valid(mem)) {
 8013cbc:	69f8      	ldr	r0, [r7, #28]
 8013cbe:	f7ff ff4d 	bl	8013b5c <mem_link_valid>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d11b      	bne.n	8013d00 <mem_free+0x12c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013cc8:	4b21      	ldr	r3, [pc, #132]	@ (8013d50 <mem_free+0x17c>)
 8013cca:	f240 2295 	movw	r2, #661	@ 0x295
 8013cce:	492a      	ldr	r1, [pc, #168]	@ (8013d78 <mem_free+0x1a4>)
 8013cd0:	4821      	ldr	r0, [pc, #132]	@ (8013d58 <mem_free+0x184>)
 8013cd2:	f00d fc55 	bl	8021580 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013cd6:	4825      	ldr	r0, [pc, #148]	@ (8013d6c <mem_free+0x198>)
 8013cd8:	f00c fa7f 	bl	80201da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 8013cdc:	4827      	ldr	r0, [pc, #156]	@ (8013d7c <mem_free+0x1a8>)
 8013cde:	f00d fcbf 	bl	8021660 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013ce2:	f00c faa7 	bl	8020234 <sys_arch_protect>
 8013ce6:	61b8      	str	r0, [r7, #24]
 8013ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8013d5c <mem_free+0x188>)
 8013cea:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013cee:	3301      	adds	r3, #1
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8013d5c <mem_free+0x188>)
 8013cf4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013cf8:	69b8      	ldr	r0, [r7, #24]
 8013cfa:	f00c faa9 	bl	8020250 <sys_arch_unprotect>
    return;
 8013cfe:	e021      	b.n	8013d44 <mem_free+0x170>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	2200      	movs	r2, #0
 8013d04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013d06:	4b1e      	ldr	r3, [pc, #120]	@ (8013d80 <mem_free+0x1ac>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	69fa      	ldr	r2, [r7, #28]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d202      	bcs.n	8013d16 <mem_free+0x142>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013d10:	4a1b      	ldr	r2, [pc, #108]	@ (8013d80 <mem_free+0x1ac>)
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013d16:	4b11      	ldr	r3, [pc, #68]	@ (8013d5c <mem_free+0x188>)
 8013d18:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013d1c:	4b10      	ldr	r3, [pc, #64]	@ (8013d60 <mem_free+0x18c>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	69f9      	ldr	r1, [r7, #28]
 8013d22:	1acb      	subs	r3, r1, r3
 8013d24:	b299      	uxth	r1, r3
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	1acb      	subs	r3, r1, r3
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	4413      	add	r3, r2
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	4b0a      	ldr	r3, [pc, #40]	@ (8013d5c <mem_free+0x188>)
 8013d34:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013d38:	69f8      	ldr	r0, [r7, #28]
 8013d3a:	f7ff fe19 	bl	8013970 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013d3e:	480b      	ldr	r0, [pc, #44]	@ (8013d6c <mem_free+0x198>)
 8013d40:	f00c fa4b 	bl	80201da <sys_mutex_unlock>
}
 8013d44:	3720      	adds	r7, #32
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	08023554 	.word	0x08023554
 8013d50:	08023464 	.word	0x08023464
 8013d54:	08023574 	.word	0x08023574
 8013d58:	080234ac 	.word	0x080234ac
 8013d5c:	2002d358 	.word	0x2002d358
 8013d60:	20027100 	.word	0x20027100
 8013d64:	20027104 	.word	0x20027104
 8013d68:	08023598 	.word	0x08023598
 8013d6c:	20027108 	.word	0x20027108
 8013d70:	080235b4 	.word	0x080235b4
 8013d74:	080235dc 	.word	0x080235dc
 8013d78:	08023604 	.word	0x08023604
 8013d7c:	08023638 	.word	0x08023638
 8013d80:	2002710c 	.word	0x2002710c

08013d84 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b088      	sub	sp, #32
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013d90:	887b      	ldrh	r3, [r7, #2]
 8013d92:	3303      	adds	r3, #3
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	f023 0303 	bic.w	r3, r3, #3
 8013d9a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013d9c:	8bfb      	ldrh	r3, [r7, #30]
 8013d9e:	2b0b      	cmp	r3, #11
 8013da0:	d801      	bhi.n	8013da6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013da2:	230c      	movs	r3, #12
 8013da4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013da6:	8bfb      	ldrh	r3, [r7, #30]
 8013da8:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013dac:	d803      	bhi.n	8013db6 <mem_trim+0x32>
 8013dae:	8bfa      	ldrh	r2, [r7, #30]
 8013db0:	887b      	ldrh	r3, [r7, #2]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d201      	bcs.n	8013dba <mem_trim+0x36>
    return NULL;
 8013db6:	2300      	movs	r3, #0
 8013db8:	e0fb      	b.n	8013fb2 <mem_trim+0x22e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013dba:	4b80      	ldr	r3, [pc, #512]	@ (8013fbc <mem_trim+0x238>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d304      	bcc.n	8013dce <mem_trim+0x4a>
 8013dc4:	4b7e      	ldr	r3, [pc, #504]	@ (8013fc0 <mem_trim+0x23c>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d306      	bcc.n	8013ddc <mem_trim+0x58>
 8013dce:	4b7d      	ldr	r3, [pc, #500]	@ (8013fc4 <mem_trim+0x240>)
 8013dd0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013dd4:	497c      	ldr	r1, [pc, #496]	@ (8013fc8 <mem_trim+0x244>)
 8013dd6:	487d      	ldr	r0, [pc, #500]	@ (8013fcc <mem_trim+0x248>)
 8013dd8:	f00d fbd2 	bl	8021580 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013ddc:	4b77      	ldr	r3, [pc, #476]	@ (8013fbc <mem_trim+0x238>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d304      	bcc.n	8013df0 <mem_trim+0x6c>
 8013de6:	4b76      	ldr	r3, [pc, #472]	@ (8013fc0 <mem_trim+0x23c>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d312      	bcc.n	8013e16 <mem_trim+0x92>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 8013df0:	4877      	ldr	r0, [pc, #476]	@ (8013fd0 <mem_trim+0x24c>)
 8013df2:	f00d fc35 	bl	8021660 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013df6:	f00c fa1d 	bl	8020234 <sys_arch_protect>
 8013dfa:	60b8      	str	r0, [r7, #8]
 8013dfc:	4b75      	ldr	r3, [pc, #468]	@ (8013fd4 <mem_trim+0x250>)
 8013dfe:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013e02:	3301      	adds	r3, #1
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	4b73      	ldr	r3, [pc, #460]	@ (8013fd4 <mem_trim+0x250>)
 8013e08:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013e0c:	68b8      	ldr	r0, [r7, #8]
 8013e0e:	f00c fa1f 	bl	8020250 <sys_arch_unprotect>
    return rmem;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	e0cd      	b.n	8013fb2 <mem_trim+0x22e>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	3b08      	subs	r3, #8
 8013e1a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013e1c:	69b8      	ldr	r0, [r7, #24]
 8013e1e:	f7ff fd95 	bl	801394c <mem_to_ptr>
 8013e22:	4603      	mov	r3, r0
 8013e24:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	881a      	ldrh	r2, [r3, #0]
 8013e2a:	8afb      	ldrh	r3, [r7, #22]
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	3b08      	subs	r3, #8
 8013e32:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013e34:	8bfa      	ldrh	r2, [r7, #30]
 8013e36:	8abb      	ldrh	r3, [r7, #20]
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d906      	bls.n	8013e4a <mem_trim+0xc6>
 8013e3c:	4b61      	ldr	r3, [pc, #388]	@ (8013fc4 <mem_trim+0x240>)
 8013e3e:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013e42:	4965      	ldr	r1, [pc, #404]	@ (8013fd8 <mem_trim+0x254>)
 8013e44:	4861      	ldr	r0, [pc, #388]	@ (8013fcc <mem_trim+0x248>)
 8013e46:	f00d fb9b 	bl	8021580 <iprintf>
  if (newsize > size) {
 8013e4a:	8bfa      	ldrh	r2, [r7, #30]
 8013e4c:	8abb      	ldrh	r3, [r7, #20]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d901      	bls.n	8013e56 <mem_trim+0xd2>
    /* not supported */
    return NULL;
 8013e52:	2300      	movs	r3, #0
 8013e54:	e0ad      	b.n	8013fb2 <mem_trim+0x22e>
  }
  if (newsize == size) {
 8013e56:	8bfa      	ldrh	r2, [r7, #30]
 8013e58:	8abb      	ldrh	r3, [r7, #20]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d101      	bne.n	8013e62 <mem_trim+0xde>
    /* No change in size, simply return */
    return rmem;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	e0a7      	b.n	8013fb2 <mem_trim+0x22e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013e62:	485e      	ldr	r0, [pc, #376]	@ (8013fdc <mem_trim+0x258>)
 8013e64:	f00c f9aa 	bl	80201bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013e68:	69bb      	ldr	r3, [r7, #24]
 8013e6a:	881b      	ldrh	r3, [r3, #0]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7ff fd5b 	bl	8013928 <ptr_to_mem>
 8013e72:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013e74:	693b      	ldr	r3, [r7, #16]
 8013e76:	791b      	ldrb	r3, [r3, #4]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d14b      	bne.n	8013f14 <mem_trim+0x190>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013e84:	d106      	bne.n	8013e94 <mem_trim+0x110>
 8013e86:	4b4f      	ldr	r3, [pc, #316]	@ (8013fc4 <mem_trim+0x240>)
 8013e88:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013e8c:	4954      	ldr	r1, [pc, #336]	@ (8013fe0 <mem_trim+0x25c>)
 8013e8e:	484f      	ldr	r0, [pc, #316]	@ (8013fcc <mem_trim+0x248>)
 8013e90:	f00d fb76 	bl	8021580 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	881b      	ldrh	r3, [r3, #0]
 8013e98:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013e9a:	8afa      	ldrh	r2, [r7, #22]
 8013e9c:	8bfb      	ldrh	r3, [r7, #30]
 8013e9e:	4413      	add	r3, r2
 8013ea0:	b29b      	uxth	r3, r3
 8013ea2:	3308      	adds	r3, #8
 8013ea4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013ea6:	4b4f      	ldr	r3, [pc, #316]	@ (8013fe4 <mem_trim+0x260>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	693a      	ldr	r2, [r7, #16]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d106      	bne.n	8013ebe <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8013eb0:	89fb      	ldrh	r3, [r7, #14]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7ff fd38 	bl	8013928 <ptr_to_mem>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	4a4a      	ldr	r2, [pc, #296]	@ (8013fe4 <mem_trim+0x260>)
 8013ebc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013ebe:	89fb      	ldrh	r3, [r7, #14]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7ff fd31 	bl	8013928 <ptr_to_mem>
 8013ec6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	89ba      	ldrh	r2, [r7, #12]
 8013ed2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	8afa      	ldrh	r2, [r7, #22]
 8013ed8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	89fa      	ldrh	r2, [r7, #14]
 8013ede:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	881b      	ldrh	r3, [r3, #0]
 8013ee4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013ee8:	d007      	beq.n	8013efa <mem_trim+0x176>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7ff fd1a 	bl	8013928 <ptr_to_mem>
 8013ef4:	4602      	mov	r2, r0
 8013ef6:	89fb      	ldrh	r3, [r7, #14]
 8013ef8:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013efa:	4b36      	ldr	r3, [pc, #216]	@ (8013fd4 <mem_trim+0x250>)
 8013efc:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013f00:	8bf9      	ldrh	r1, [r7, #30]
 8013f02:	8abb      	ldrh	r3, [r7, #20]
 8013f04:	1acb      	subs	r3, r1, r3
 8013f06:	b29b      	uxth	r3, r3
 8013f08:	4413      	add	r3, r2
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	4b31      	ldr	r3, [pc, #196]	@ (8013fd4 <mem_trim+0x250>)
 8013f0e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013f12:	e04a      	b.n	8013faa <mem_trim+0x226>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013f14:	8bfb      	ldrh	r3, [r7, #30]
 8013f16:	f103 0214 	add.w	r2, r3, #20
 8013f1a:	8abb      	ldrh	r3, [r7, #20]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d844      	bhi.n	8013faa <mem_trim+0x226>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013f20:	8afa      	ldrh	r2, [r7, #22]
 8013f22:	8bfb      	ldrh	r3, [r7, #30]
 8013f24:	4413      	add	r3, r2
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	3308      	adds	r3, #8
 8013f2a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	881b      	ldrh	r3, [r3, #0]
 8013f30:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013f34:	d106      	bne.n	8013f44 <mem_trim+0x1c0>
 8013f36:	4b23      	ldr	r3, [pc, #140]	@ (8013fc4 <mem_trim+0x240>)
 8013f38:	f240 3216 	movw	r2, #790	@ 0x316
 8013f3c:	4928      	ldr	r1, [pc, #160]	@ (8013fe0 <mem_trim+0x25c>)
 8013f3e:	4823      	ldr	r0, [pc, #140]	@ (8013fcc <mem_trim+0x248>)
 8013f40:	f00d fb1e 	bl	8021580 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013f44:	89fb      	ldrh	r3, [r7, #14]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7ff fcee 	bl	8013928 <ptr_to_mem>
 8013f4c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013f4e:	4b25      	ldr	r3, [pc, #148]	@ (8013fe4 <mem_trim+0x260>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	693a      	ldr	r2, [r7, #16]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d202      	bcs.n	8013f5e <mem_trim+0x1da>
      lfree = mem2;
 8013f58:	4a22      	ldr	r2, [pc, #136]	@ (8013fe4 <mem_trim+0x260>)
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	2200      	movs	r2, #0
 8013f62:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	881a      	ldrh	r2, [r3, #0]
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	8afa      	ldrh	r2, [r7, #22]
 8013f70:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	89fa      	ldrh	r2, [r7, #14]
 8013f76:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	881b      	ldrh	r3, [r3, #0]
 8013f7c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013f80:	d007      	beq.n	8013f92 <mem_trim+0x20e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	881b      	ldrh	r3, [r3, #0]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7ff fcce 	bl	8013928 <ptr_to_mem>
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	89fb      	ldrh	r3, [r7, #14]
 8013f90:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013f92:	4b10      	ldr	r3, [pc, #64]	@ (8013fd4 <mem_trim+0x250>)
 8013f94:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013f98:	8bf9      	ldrh	r1, [r7, #30]
 8013f9a:	8abb      	ldrh	r3, [r7, #20]
 8013f9c:	1acb      	subs	r3, r1, r3
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	4413      	add	r3, r2
 8013fa2:	b29a      	uxth	r2, r3
 8013fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8013fd4 <mem_trim+0x250>)
 8013fa6:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013faa:	480c      	ldr	r0, [pc, #48]	@ (8013fdc <mem_trim+0x258>)
 8013fac:	f00c f915 	bl	80201da <sys_mutex_unlock>
  return rmem;
 8013fb0:	687b      	ldr	r3, [r7, #4]
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3720      	adds	r7, #32
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	20027100 	.word	0x20027100
 8013fc0:	20027104 	.word	0x20027104
 8013fc4:	08023464 	.word	0x08023464
 8013fc8:	0802366c 	.word	0x0802366c
 8013fcc:	080234ac 	.word	0x080234ac
 8013fd0:	08023684 	.word	0x08023684
 8013fd4:	2002d358 	.word	0x2002d358
 8013fd8:	080236a0 	.word	0x080236a0
 8013fdc:	20027108 	.word	0x20027108
 8013fe0:	080236c0 	.word	0x080236c0
 8013fe4:	2002710c 	.word	0x2002710c

08013fe8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013fe8:	b590      	push	{r4, r7, lr}
 8013fea:	b089      	sub	sp, #36	@ 0x24
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	4603      	mov	r3, r0
 8013ff0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013ff2:	88fb      	ldrh	r3, [r7, #6]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d101      	bne.n	8013ffc <mem_malloc+0x14>
    return NULL;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	e127      	b.n	801424c <mem_malloc+0x264>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013ffc:	88fb      	ldrh	r3, [r7, #6]
 8013ffe:	3303      	adds	r3, #3
 8014000:	b29b      	uxth	r3, r3
 8014002:	f023 0303 	bic.w	r3, r3, #3
 8014006:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014008:	8bbb      	ldrh	r3, [r7, #28]
 801400a:	2b0b      	cmp	r3, #11
 801400c:	d801      	bhi.n	8014012 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801400e:	230c      	movs	r3, #12
 8014010:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014012:	8bbb      	ldrh	r3, [r7, #28]
 8014014:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8014018:	d803      	bhi.n	8014022 <mem_malloc+0x3a>
 801401a:	8bba      	ldrh	r2, [r7, #28]
 801401c:	88fb      	ldrh	r3, [r7, #6]
 801401e:	429a      	cmp	r2, r3
 8014020:	d201      	bcs.n	8014026 <mem_malloc+0x3e>
    return NULL;
 8014022:	2300      	movs	r3, #0
 8014024:	e112      	b.n	801424c <mem_malloc+0x264>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014026:	488b      	ldr	r0, [pc, #556]	@ (8014254 <mem_malloc+0x26c>)
 8014028:	f00c f8c8 	bl	80201bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801402c:	4b8a      	ldr	r3, [pc, #552]	@ (8014258 <mem_malloc+0x270>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	4618      	mov	r0, r3
 8014032:	f7ff fc8b 	bl	801394c <mem_to_ptr>
 8014036:	4603      	mov	r3, r0
 8014038:	83fb      	strh	r3, [r7, #30]
 801403a:	e0ee      	b.n	801421a <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801403c:	8bfb      	ldrh	r3, [r7, #30]
 801403e:	4618      	mov	r0, r3
 8014040:	f7ff fc72 	bl	8013928 <ptr_to_mem>
 8014044:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	791b      	ldrb	r3, [r3, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	f040 80de 	bne.w	801420c <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	881b      	ldrh	r3, [r3, #0]
 8014054:	461a      	mov	r2, r3
 8014056:	8bfb      	ldrh	r3, [r7, #30]
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	f1a3 0208 	sub.w	r2, r3, #8
 801405e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014060:	429a      	cmp	r2, r3
 8014062:	f0c0 80d3 	bcc.w	801420c <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	461a      	mov	r2, r3
 801406c:	8bfb      	ldrh	r3, [r7, #30]
 801406e:	1ad3      	subs	r3, r2, r3
 8014070:	f1a3 0208 	sub.w	r2, r3, #8
 8014074:	8bbb      	ldrh	r3, [r7, #28]
 8014076:	3314      	adds	r3, #20
 8014078:	429a      	cmp	r2, r3
 801407a:	d34c      	bcc.n	8014116 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801407c:	8bfa      	ldrh	r2, [r7, #30]
 801407e:	8bbb      	ldrh	r3, [r7, #28]
 8014080:	4413      	add	r3, r2
 8014082:	b29b      	uxth	r3, r3
 8014084:	3308      	adds	r3, #8
 8014086:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014088:	8a7b      	ldrh	r3, [r7, #18]
 801408a:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801408e:	d106      	bne.n	801409e <mem_malloc+0xb6>
 8014090:	4b72      	ldr	r3, [pc, #456]	@ (801425c <mem_malloc+0x274>)
 8014092:	f240 3287 	movw	r2, #903	@ 0x387
 8014096:	4972      	ldr	r1, [pc, #456]	@ (8014260 <mem_malloc+0x278>)
 8014098:	4872      	ldr	r0, [pc, #456]	@ (8014264 <mem_malloc+0x27c>)
 801409a:	f00d fa71 	bl	8021580 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801409e:	8a7b      	ldrh	r3, [r7, #18]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7ff fc41 	bl	8013928 <ptr_to_mem>
 80140a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2200      	movs	r2, #0
 80140ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	881a      	ldrh	r2, [r3, #0]
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	8bfa      	ldrh	r2, [r7, #30]
 80140ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	8a7a      	ldrh	r2, [r7, #18]
 80140c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	2201      	movs	r2, #1
 80140c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	881b      	ldrh	r3, [r3, #0]
 80140cc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80140d0:	d007      	beq.n	80140e2 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7ff fc26 	bl	8013928 <ptr_to_mem>
 80140dc:	4602      	mov	r2, r0
 80140de:	8a7b      	ldrh	r3, [r7, #18]
 80140e0:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80140e2:	4b61      	ldr	r3, [pc, #388]	@ (8014268 <mem_malloc+0x280>)
 80140e4:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 80140e8:	8bbb      	ldrh	r3, [r7, #28]
 80140ea:	4413      	add	r3, r2
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	3308      	adds	r3, #8
 80140f0:	b29a      	uxth	r2, r3
 80140f2:	4b5d      	ldr	r3, [pc, #372]	@ (8014268 <mem_malloc+0x280>)
 80140f4:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80140f8:	4b5b      	ldr	r3, [pc, #364]	@ (8014268 <mem_malloc+0x280>)
 80140fa:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 80140fe:	4b5a      	ldr	r3, [pc, #360]	@ (8014268 <mem_malloc+0x280>)
 8014100:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8014104:	429a      	cmp	r2, r3
 8014106:	d227      	bcs.n	8014158 <mem_malloc+0x170>
 8014108:	4b57      	ldr	r3, [pc, #348]	@ (8014268 <mem_malloc+0x280>)
 801410a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 801410e:	4b56      	ldr	r3, [pc, #344]	@ (8014268 <mem_malloc+0x280>)
 8014110:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
 8014114:	e020      	b.n	8014158 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	2201      	movs	r2, #1
 801411a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 801411c:	4b52      	ldr	r3, [pc, #328]	@ (8014268 <mem_malloc+0x280>)
 801411e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	4413      	add	r3, r2
 8014128:	b29c      	uxth	r4, r3
 801412a:	6978      	ldr	r0, [r7, #20]
 801412c:	f7ff fc0e 	bl	801394c <mem_to_ptr>
 8014130:	4603      	mov	r3, r0
 8014132:	1ae3      	subs	r3, r4, r3
 8014134:	b29a      	uxth	r2, r3
 8014136:	4b4c      	ldr	r3, [pc, #304]	@ (8014268 <mem_malloc+0x280>)
 8014138:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 801413c:	4b4a      	ldr	r3, [pc, #296]	@ (8014268 <mem_malloc+0x280>)
 801413e:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 8014142:	4b49      	ldr	r3, [pc, #292]	@ (8014268 <mem_malloc+0x280>)
 8014144:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8014148:	429a      	cmp	r2, r3
 801414a:	d205      	bcs.n	8014158 <mem_malloc+0x170>
 801414c:	4b46      	ldr	r3, [pc, #280]	@ (8014268 <mem_malloc+0x280>)
 801414e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8014152:	4b45      	ldr	r3, [pc, #276]	@ (8014268 <mem_malloc+0x280>)
 8014154:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014158:	4b3f      	ldr	r3, [pc, #252]	@ (8014258 <mem_malloc+0x270>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	697a      	ldr	r2, [r7, #20]
 801415e:	429a      	cmp	r2, r3
 8014160:	d127      	bne.n	80141b2 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8014162:	4b3d      	ldr	r3, [pc, #244]	@ (8014258 <mem_malloc+0x270>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014168:	e005      	b.n	8014176 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801416a:	69bb      	ldr	r3, [r7, #24]
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff fbda 	bl	8013928 <ptr_to_mem>
 8014174:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014176:	69bb      	ldr	r3, [r7, #24]
 8014178:	791b      	ldrb	r3, [r3, #4]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d004      	beq.n	8014188 <mem_malloc+0x1a0>
 801417e:	4b3b      	ldr	r3, [pc, #236]	@ (801426c <mem_malloc+0x284>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	69ba      	ldr	r2, [r7, #24]
 8014184:	429a      	cmp	r2, r3
 8014186:	d1f0      	bne.n	801416a <mem_malloc+0x182>
          }
          lfree = cur;
 8014188:	4a33      	ldr	r2, [pc, #204]	@ (8014258 <mem_malloc+0x270>)
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801418e:	4b32      	ldr	r3, [pc, #200]	@ (8014258 <mem_malloc+0x270>)
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	4b36      	ldr	r3, [pc, #216]	@ (801426c <mem_malloc+0x284>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	429a      	cmp	r2, r3
 8014198:	d00b      	beq.n	80141b2 <mem_malloc+0x1ca>
 801419a:	4b2f      	ldr	r3, [pc, #188]	@ (8014258 <mem_malloc+0x270>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	791b      	ldrb	r3, [r3, #4]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d006      	beq.n	80141b2 <mem_malloc+0x1ca>
 80141a4:	4b2d      	ldr	r3, [pc, #180]	@ (801425c <mem_malloc+0x274>)
 80141a6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80141aa:	4931      	ldr	r1, [pc, #196]	@ (8014270 <mem_malloc+0x288>)
 80141ac:	482d      	ldr	r0, [pc, #180]	@ (8014264 <mem_malloc+0x27c>)
 80141ae:	f00d f9e7 	bl	8021580 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80141b2:	4828      	ldr	r0, [pc, #160]	@ (8014254 <mem_malloc+0x26c>)
 80141b4:	f00c f811 	bl	80201da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80141b8:	8bba      	ldrh	r2, [r7, #28]
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	4413      	add	r3, r2
 80141be:	3308      	adds	r3, #8
 80141c0:	4a2a      	ldr	r2, [pc, #168]	@ (801426c <mem_malloc+0x284>)
 80141c2:	6812      	ldr	r2, [r2, #0]
 80141c4:	4293      	cmp	r3, r2
 80141c6:	d906      	bls.n	80141d6 <mem_malloc+0x1ee>
 80141c8:	4b24      	ldr	r3, [pc, #144]	@ (801425c <mem_malloc+0x274>)
 80141ca:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80141ce:	4929      	ldr	r1, [pc, #164]	@ (8014274 <mem_malloc+0x28c>)
 80141d0:	4824      	ldr	r0, [pc, #144]	@ (8014264 <mem_malloc+0x27c>)
 80141d2:	f00d f9d5 	bl	8021580 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80141d6:	697b      	ldr	r3, [r7, #20]
 80141d8:	f003 0303 	and.w	r3, r3, #3
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d006      	beq.n	80141ee <mem_malloc+0x206>
 80141e0:	4b1e      	ldr	r3, [pc, #120]	@ (801425c <mem_malloc+0x274>)
 80141e2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80141e6:	4924      	ldr	r1, [pc, #144]	@ (8014278 <mem_malloc+0x290>)
 80141e8:	481e      	ldr	r0, [pc, #120]	@ (8014264 <mem_malloc+0x27c>)
 80141ea:	f00d f9c9 	bl	8021580 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	f003 0303 	and.w	r3, r3, #3
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d006      	beq.n	8014206 <mem_malloc+0x21e>
 80141f8:	4b18      	ldr	r3, [pc, #96]	@ (801425c <mem_malloc+0x274>)
 80141fa:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80141fe:	491f      	ldr	r1, [pc, #124]	@ (801427c <mem_malloc+0x294>)
 8014200:	4818      	ldr	r0, [pc, #96]	@ (8014264 <mem_malloc+0x27c>)
 8014202:	f00d f9bd 	bl	8021580 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	3308      	adds	r3, #8
 801420a:	e01f      	b.n	801424c <mem_malloc+0x264>
         ptr = ptr_to_mem(ptr)->next) {
 801420c:	8bfb      	ldrh	r3, [r7, #30]
 801420e:	4618      	mov	r0, r3
 8014210:	f7ff fb8a 	bl	8013928 <ptr_to_mem>
 8014214:	4603      	mov	r3, r0
 8014216:	881b      	ldrh	r3, [r3, #0]
 8014218:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801421a:	8bfa      	ldrh	r2, [r7, #30]
 801421c:	8bbb      	ldrh	r3, [r7, #28]
 801421e:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 8014222:	429a      	cmp	r2, r3
 8014224:	f4ff af0a 	bcc.w	801403c <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8014228:	4b0f      	ldr	r3, [pc, #60]	@ (8014268 <mem_malloc+0x280>)
 801422a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 801422e:	3301      	adds	r3, #1
 8014230:	b29a      	uxth	r2, r3
 8014232:	4b0d      	ldr	r3, [pc, #52]	@ (8014268 <mem_malloc+0x280>)
 8014234:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014238:	4806      	ldr	r0, [pc, #24]	@ (8014254 <mem_malloc+0x26c>)
 801423a:	f00b ffce 	bl	80201da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 801423e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8014242:	4619      	mov	r1, r3
 8014244:	480e      	ldr	r0, [pc, #56]	@ (8014280 <mem_malloc+0x298>)
 8014246:	f00d f99b 	bl	8021580 <iprintf>
  return NULL;
 801424a:	2300      	movs	r3, #0
}
 801424c:	4618      	mov	r0, r3
 801424e:	3724      	adds	r7, #36	@ 0x24
 8014250:	46bd      	mov	sp, r7
 8014252:	bd90      	pop	{r4, r7, pc}
 8014254:	20027108 	.word	0x20027108
 8014258:	2002710c 	.word	0x2002710c
 801425c:	08023464 	.word	0x08023464
 8014260:	080236c0 	.word	0x080236c0
 8014264:	080234ac 	.word	0x080234ac
 8014268:	2002d358 	.word	0x2002d358
 801426c:	20027104 	.word	0x20027104
 8014270:	080236d4 	.word	0x080236d4
 8014274:	080236f0 	.word	0x080236f0
 8014278:	08023720 	.word	0x08023720
 801427c:	08023750 	.word	0x08023750
 8014280:	08023774 	.word	0x08023774

08014284 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014284:	b480      	push	{r7}
 8014286:	b085      	sub	sp, #20
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	691b      	ldr	r3, [r3, #16]
 8014290:	2200      	movs	r2, #0
 8014292:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	3303      	adds	r3, #3
 801429a:	f023 0303 	bic.w	r3, r3, #3
 801429e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80142a0:	2300      	movs	r3, #0
 80142a2:	60fb      	str	r3, [r7, #12]
 80142a4:	e011      	b.n	80142ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	691b      	ldr	r3, [r3, #16]
 80142aa:	681a      	ldr	r2, [r3, #0]
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	691b      	ldr	r3, [r3, #16]
 80142b4:	68ba      	ldr	r2, [r7, #8]
 80142b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	891b      	ldrh	r3, [r3, #8]
 80142bc:	461a      	mov	r2, r3
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	4413      	add	r3, r2
 80142c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	3301      	adds	r3, #1
 80142c8:	60fb      	str	r3, [r7, #12]
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	895b      	ldrh	r3, [r3, #10]
 80142ce:	461a      	mov	r2, r3
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	4293      	cmp	r3, r2
 80142d4:	dbe7      	blt.n	80142a6 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	8952      	ldrh	r2, [r2, #10]
 80142de:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	6812      	ldr	r2, [r2, #0]
 80142e8:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80142ea:	bf00      	nop
 80142ec:	3714      	adds	r7, #20
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr
	...

080142f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80142fe:	2300      	movs	r3, #0
 8014300:	80fb      	strh	r3, [r7, #6]
 8014302:	e013      	b.n	801432c <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8014304:	88fb      	ldrh	r3, [r7, #6]
 8014306:	4a0d      	ldr	r2, [pc, #52]	@ (801433c <memp_init+0x44>)
 8014308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801430c:	4618      	mov	r0, r3
 801430e:	f7ff ffb9 	bl	8014284 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8014312:	88fb      	ldrh	r3, [r7, #6]
 8014314:	4a09      	ldr	r2, [pc, #36]	@ (801433c <memp_init+0x44>)
 8014316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801431a:	88fb      	ldrh	r3, [r7, #6]
 801431c:	6852      	ldr	r2, [r2, #4]
 801431e:	4908      	ldr	r1, [pc, #32]	@ (8014340 <memp_init+0x48>)
 8014320:	332e      	adds	r3, #46	@ 0x2e
 8014322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014326:	88fb      	ldrh	r3, [r7, #6]
 8014328:	3301      	adds	r3, #1
 801432a:	80fb      	strh	r3, [r7, #6]
 801432c:	88fb      	ldrh	r3, [r7, #6]
 801432e:	2b0c      	cmp	r3, #12
 8014330:	d9e8      	bls.n	8014304 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014332:	bf00      	nop
 8014334:	bf00      	nop
 8014336:	3708      	adds	r7, #8
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	0802739c 	.word	0x0802739c
 8014340:	2002d358 	.word	0x2002d358

08014344 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801434c:	f00b ff72 	bl	8020234 <sys_arch_protect>
 8014350:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	691b      	ldr	r3, [r3, #16]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d029      	beq.n	80143b4 <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	691b      	ldr	r3, [r3, #16]
 8014364:	68ba      	ldr	r2, [r7, #8]
 8014366:	6812      	ldr	r2, [r2, #0]
 8014368:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	f003 0303 	and.w	r3, r3, #3
 8014370:	2b00      	cmp	r3, #0
 8014372:	d006      	beq.n	8014382 <do_memp_malloc_pool+0x3e>
 8014374:	4b19      	ldr	r3, [pc, #100]	@ (80143dc <do_memp_malloc_pool+0x98>)
 8014376:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801437a:	4919      	ldr	r1, [pc, #100]	@ (80143e0 <do_memp_malloc_pool+0x9c>)
 801437c:	4819      	ldr	r0, [pc, #100]	@ (80143e4 <do_memp_malloc_pool+0xa0>)
 801437e:	f00d f8ff 	bl	8021580 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	685b      	ldr	r3, [r3, #4]
 8014386:	891a      	ldrh	r2, [r3, #8]
 8014388:	3201      	adds	r2, #1
 801438a:	b292      	uxth	r2, r2
 801438c:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	891a      	ldrh	r2, [r3, #8]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	895b      	ldrh	r3, [r3, #10]
 801439a:	429a      	cmp	r2, r3
 801439c:	d905      	bls.n	80143aa <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	685a      	ldr	r2, [r3, #4]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	685b      	ldr	r3, [r3, #4]
 80143a6:	8912      	ldrh	r2, [r2, #8]
 80143a8:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80143aa:	68f8      	ldr	r0, [r7, #12]
 80143ac:	f00b ff50 	bl	8020250 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	e00f      	b.n	80143d4 <do_memp_malloc_pool+0x90>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	889a      	ldrh	r2, [r3, #4]
 80143ba:	3201      	adds	r2, #1
 80143bc:	b292      	uxth	r2, r2
 80143be:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80143c0:	68f8      	ldr	r0, [r7, #12]
 80143c2:	f00b ff45 	bl	8020250 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	4619      	mov	r1, r3
 80143cc:	4806      	ldr	r0, [pc, #24]	@ (80143e8 <do_memp_malloc_pool+0xa4>)
 80143ce:	f00d f8d7 	bl	8021580 <iprintf>
  }

  return NULL;
 80143d2:	2300      	movs	r3, #0
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3710      	adds	r7, #16
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}
 80143dc:	08023864 	.word	0x08023864
 80143e0:	08023894 	.word	0x08023894
 80143e4:	080238b8 	.word	0x080238b8
 80143e8:	080238e0 	.word	0x080238e0

080143ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d106      	bne.n	8014408 <memp_malloc_pool+0x1c>
 80143fa:	4b0a      	ldr	r3, [pc, #40]	@ (8014424 <memp_malloc_pool+0x38>)
 80143fc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8014400:	4909      	ldr	r1, [pc, #36]	@ (8014428 <memp_malloc_pool+0x3c>)
 8014402:	480a      	ldr	r0, [pc, #40]	@ (801442c <memp_malloc_pool+0x40>)
 8014404:	f00d f8bc 	bl	8021580 <iprintf>
  if (desc == NULL) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d101      	bne.n	8014412 <memp_malloc_pool+0x26>
    return NULL;
 801440e:	2300      	movs	r3, #0
 8014410:	e003      	b.n	801441a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f7ff ff96 	bl	8014344 <do_memp_malloc_pool>
 8014418:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801441a:	4618      	mov	r0, r3
 801441c:	3708      	adds	r7, #8
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	08023864 	.word	0x08023864
 8014428:	08023908 	.word	0x08023908
 801442c:	080238b8 	.word	0x080238b8

08014430 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	4603      	mov	r3, r0
 8014438:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801443a:	79fb      	ldrb	r3, [r7, #7]
 801443c:	2b0c      	cmp	r3, #12
 801443e:	d908      	bls.n	8014452 <memp_malloc+0x22>
 8014440:	4b0a      	ldr	r3, [pc, #40]	@ (801446c <memp_malloc+0x3c>)
 8014442:	f240 1257 	movw	r2, #343	@ 0x157
 8014446:	490a      	ldr	r1, [pc, #40]	@ (8014470 <memp_malloc+0x40>)
 8014448:	480a      	ldr	r0, [pc, #40]	@ (8014474 <memp_malloc+0x44>)
 801444a:	f00d f899 	bl	8021580 <iprintf>
 801444e:	2300      	movs	r3, #0
 8014450:	e008      	b.n	8014464 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014452:	79fb      	ldrb	r3, [r7, #7]
 8014454:	4a08      	ldr	r2, [pc, #32]	@ (8014478 <memp_malloc+0x48>)
 8014456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801445a:	4618      	mov	r0, r3
 801445c:	f7ff ff72 	bl	8014344 <do_memp_malloc_pool>
 8014460:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014462:	68fb      	ldr	r3, [r7, #12]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3710      	adds	r7, #16
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}
 801446c:	08023864 	.word	0x08023864
 8014470:	0802391c 	.word	0x0802391c
 8014474:	080238b8 	.word	0x080238b8
 8014478:	0802739c 	.word	0x0802739c

0801447c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	f003 0303 	and.w	r3, r3, #3
 801448c:	2b00      	cmp	r3, #0
 801448e:	d006      	beq.n	801449e <do_memp_free_pool+0x22>
 8014490:	4b10      	ldr	r3, [pc, #64]	@ (80144d4 <do_memp_free_pool+0x58>)
 8014492:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8014496:	4910      	ldr	r1, [pc, #64]	@ (80144d8 <do_memp_free_pool+0x5c>)
 8014498:	4810      	ldr	r0, [pc, #64]	@ (80144dc <do_memp_free_pool+0x60>)
 801449a:	f00d f871 	bl	8021580 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80144a2:	f00b fec7 	bl	8020234 <sys_arch_protect>
 80144a6:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	891a      	ldrh	r2, [r3, #8]
 80144ae:	3a01      	subs	r2, #1
 80144b0:	b292      	uxth	r2, r2
 80144b2:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	691b      	ldr	r3, [r3, #16]
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	691b      	ldr	r3, [r3, #16]
 80144c2:	68fa      	ldr	r2, [r7, #12]
 80144c4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80144c6:	68b8      	ldr	r0, [r7, #8]
 80144c8:	f00b fec2 	bl	8020250 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80144cc:	bf00      	nop
 80144ce:	3710      	adds	r7, #16
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	08023864 	.word	0x08023864
 80144d8:	0802393c 	.word	0x0802393c
 80144dc:	080238b8 	.word	0x080238b8

080144e0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d106      	bne.n	80144fe <memp_free_pool+0x1e>
 80144f0:	4b0a      	ldr	r3, [pc, #40]	@ (801451c <memp_free_pool+0x3c>)
 80144f2:	f240 1295 	movw	r2, #405	@ 0x195
 80144f6:	490a      	ldr	r1, [pc, #40]	@ (8014520 <memp_free_pool+0x40>)
 80144f8:	480a      	ldr	r0, [pc, #40]	@ (8014524 <memp_free_pool+0x44>)
 80144fa:	f00d f841 	bl	8021580 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d007      	beq.n	8014514 <memp_free_pool+0x34>
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d004      	beq.n	8014514 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801450a:	6839      	ldr	r1, [r7, #0]
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7ff ffb5 	bl	801447c <do_memp_free_pool>
 8014512:	e000      	b.n	8014516 <memp_free_pool+0x36>
    return;
 8014514:	bf00      	nop
}
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	08023864 	.word	0x08023864
 8014520:	08023908 	.word	0x08023908
 8014524:	080238b8 	.word	0x080238b8

08014528 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	4603      	mov	r3, r0
 8014530:	6039      	str	r1, [r7, #0]
 8014532:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014534:	79fb      	ldrb	r3, [r7, #7]
 8014536:	2b0c      	cmp	r3, #12
 8014538:	d907      	bls.n	801454a <memp_free+0x22>
 801453a:	4b0c      	ldr	r3, [pc, #48]	@ (801456c <memp_free+0x44>)
 801453c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8014540:	490b      	ldr	r1, [pc, #44]	@ (8014570 <memp_free+0x48>)
 8014542:	480c      	ldr	r0, [pc, #48]	@ (8014574 <memp_free+0x4c>)
 8014544:	f00d f81c 	bl	8021580 <iprintf>
 8014548:	e00c      	b.n	8014564 <memp_free+0x3c>

  if (mem == NULL) {
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d008      	beq.n	8014562 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014550:	79fb      	ldrb	r3, [r7, #7]
 8014552:	4a09      	ldr	r2, [pc, #36]	@ (8014578 <memp_free+0x50>)
 8014554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014558:	6839      	ldr	r1, [r7, #0]
 801455a:	4618      	mov	r0, r3
 801455c:	f7ff ff8e 	bl	801447c <do_memp_free_pool>
 8014560:	e000      	b.n	8014564 <memp_free+0x3c>
    return;
 8014562:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014564:	3708      	adds	r7, #8
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	08023864 	.word	0x08023864
 8014570:	0802395c 	.word	0x0802395c
 8014574:	080238b8 	.word	0x080238b8
 8014578:	0802739c 	.word	0x0802739c

0801457c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801457c:	b480      	push	{r7}
 801457e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014580:	bf00      	nop
 8014582:	46bd      	mov	sp, r7
 8014584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014588:	4770      	bx	lr
	...

0801458c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b088      	sub	sp, #32
 8014590:	af02      	add	r7, sp, #8
 8014592:	60f8      	str	r0, [r7, #12]
 8014594:	60b9      	str	r1, [r7, #8]
 8014596:	607a      	str	r2, [r7, #4]
 8014598:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d108      	bne.n	80145b2 <netif_add+0x26>
 80145a0:	4b96      	ldr	r3, [pc, #600]	@ (80147fc <netif_add+0x270>)
 80145a2:	f240 1227 	movw	r2, #295	@ 0x127
 80145a6:	4996      	ldr	r1, [pc, #600]	@ (8014800 <netif_add+0x274>)
 80145a8:	4896      	ldr	r0, [pc, #600]	@ (8014804 <netif_add+0x278>)
 80145aa:	f00c ffe9 	bl	8021580 <iprintf>
 80145ae:	2300      	movs	r3, #0
 80145b0:	e14c      	b.n	801484c <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80145b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d108      	bne.n	80145ca <netif_add+0x3e>
 80145b8:	4b90      	ldr	r3, [pc, #576]	@ (80147fc <netif_add+0x270>)
 80145ba:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80145be:	4992      	ldr	r1, [pc, #584]	@ (8014808 <netif_add+0x27c>)
 80145c0:	4890      	ldr	r0, [pc, #576]	@ (8014804 <netif_add+0x278>)
 80145c2:	f00c ffdd 	bl	8021580 <iprintf>
 80145c6:	2300      	movs	r3, #0
 80145c8:	e140      	b.n	801484c <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d101      	bne.n	80145d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80145d0:	4b8e      	ldr	r3, [pc, #568]	@ (801480c <netif_add+0x280>)
 80145d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d101      	bne.n	80145de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80145da:	4b8c      	ldr	r3, [pc, #560]	@ (801480c <netif_add+0x280>)
 80145dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d101      	bne.n	80145e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80145e4:	4b89      	ldr	r3, [pc, #548]	@ (801480c <netif_add+0x280>)
 80145e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2200      	movs	r2, #0
 80145ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	2200      	movs	r2, #0
 80145f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	2200      	movs	r2, #0
 80145f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	4a84      	ldr	r2, [pc, #528]	@ (8014810 <netif_add+0x284>)
 80145fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2200      	movs	r2, #0
 8014604:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	2200      	movs	r2, #0
 801460a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2200      	movs	r2, #0
 8014612:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	6a3a      	ldr	r2, [r7, #32]
 8014618:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801461a:	4b7e      	ldr	r3, [pc, #504]	@ (8014814 <netif_add+0x288>)
 801461c:	781a      	ldrb	r2, [r3, #0]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014628:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	68b9      	ldr	r1, [r7, #8]
 8014630:	68f8      	ldr	r0, [r7, #12]
 8014632:	f000 f9f5 	bl	8014a20 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8014636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014638:	68f8      	ldr	r0, [r7, #12]
 801463a:	4798      	blx	r3
 801463c:	4603      	mov	r3, r0
 801463e:	2b00      	cmp	r3, #0
 8014640:	d001      	beq.n	8014646 <netif_add+0xba>
    return NULL;
 8014642:	2300      	movs	r3, #0
 8014644:	e102      	b.n	801484c <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801464c:	2bff      	cmp	r3, #255	@ 0xff
 801464e:	d103      	bne.n	8014658 <netif_add+0xcc>
        netif->num = 0;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2200      	movs	r2, #0
 8014654:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8014658:	2300      	movs	r3, #0
 801465a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801465c:	4b6e      	ldr	r3, [pc, #440]	@ (8014818 <netif_add+0x28c>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	617b      	str	r3, [r7, #20]
 8014662:	e02b      	b.n	80146bc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014664:	697a      	ldr	r2, [r7, #20]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	429a      	cmp	r2, r3
 801466a:	d106      	bne.n	801467a <netif_add+0xee>
 801466c:	4b63      	ldr	r3, [pc, #396]	@ (80147fc <netif_add+0x270>)
 801466e:	f240 128b 	movw	r2, #395	@ 0x18b
 8014672:	496a      	ldr	r1, [pc, #424]	@ (801481c <netif_add+0x290>)
 8014674:	4863      	ldr	r0, [pc, #396]	@ (8014804 <netif_add+0x278>)
 8014676:	f00c ff83 	bl	8021580 <iprintf>
        num_netifs++;
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	3301      	adds	r3, #1
 801467e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	2bff      	cmp	r3, #255	@ 0xff
 8014684:	dd06      	ble.n	8014694 <netif_add+0x108>
 8014686:	4b5d      	ldr	r3, [pc, #372]	@ (80147fc <netif_add+0x270>)
 8014688:	f240 128d 	movw	r2, #397	@ 0x18d
 801468c:	4964      	ldr	r1, [pc, #400]	@ (8014820 <netif_add+0x294>)
 801468e:	485d      	ldr	r0, [pc, #372]	@ (8014804 <netif_add+0x278>)
 8014690:	f00c ff76 	bl	8021580 <iprintf>
        if (netif2->num == netif->num) {
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146a0:	429a      	cmp	r2, r3
 80146a2:	d108      	bne.n	80146b6 <netif_add+0x12a>
          netif->num++;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146aa:	3301      	adds	r3, #1
 80146ac:	b2da      	uxtb	r2, r3
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80146b4:	e005      	b.n	80146c2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	617b      	str	r3, [r7, #20]
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d1d0      	bne.n	8014664 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d1be      	bne.n	8014646 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80146d0:	d103      	bne.n	80146da <netif_add+0x14e>
    netif_num = 0;
 80146d2:	4b50      	ldr	r3, [pc, #320]	@ (8014814 <netif_add+0x288>)
 80146d4:	2200      	movs	r2, #0
 80146d6:	701a      	strb	r2, [r3, #0]
 80146d8:	e006      	b.n	80146e8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146e0:	3301      	adds	r3, #1
 80146e2:	b2da      	uxtb	r2, r3
 80146e4:	4b4b      	ldr	r3, [pc, #300]	@ (8014814 <netif_add+0x288>)
 80146e6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80146e8:	4b4b      	ldr	r3, [pc, #300]	@ (8014818 <netif_add+0x28c>)
 80146ea:	681a      	ldr	r2, [r3, #0]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80146f0:	4a49      	ldr	r2, [pc, #292]	@ (8014818 <netif_add+0x28c>)
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80146fc:	4619      	mov	r1, r3
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014704:	461a      	mov	r2, r3
 8014706:	4847      	ldr	r0, [pc, #284]	@ (8014824 <netif_add+0x298>)
 8014708:	f00c ff3a 	bl	8021580 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 801470c:	4846      	ldr	r0, [pc, #280]	@ (8014828 <netif_add+0x29c>)
 801470e:	f00c ff37 	bl	8021580 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d003      	beq.n	8014720 <netif_add+0x194>
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	4619      	mov	r1, r3
 801471e:	e000      	b.n	8014722 <netif_add+0x196>
 8014720:	2100      	movs	r1, #0
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d004      	beq.n	8014732 <netif_add+0x1a6>
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	3301      	adds	r3, #1
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	461a      	mov	r2, r3
 8014730:	e000      	b.n	8014734 <netif_add+0x1a8>
 8014732:	2200      	movs	r2, #0
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d004      	beq.n	8014744 <netif_add+0x1b8>
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	3302      	adds	r3, #2
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	4618      	mov	r0, r3
 8014742:	e000      	b.n	8014746 <netif_add+0x1ba>
 8014744:	2000      	movs	r0, #0
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d003      	beq.n	8014754 <netif_add+0x1c8>
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	3303      	adds	r3, #3
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	e000      	b.n	8014756 <netif_add+0x1ca>
 8014754:	2300      	movs	r3, #0
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	4603      	mov	r3, r0
 801475a:	4834      	ldr	r0, [pc, #208]	@ (801482c <netif_add+0x2a0>)
 801475c:	f00c ff10 	bl	8021580 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8014760:	4833      	ldr	r0, [pc, #204]	@ (8014830 <netif_add+0x2a4>)
 8014762:	f00c ff0d 	bl	8021580 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d003      	beq.n	8014774 <netif_add+0x1e8>
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	4619      	mov	r1, r3
 8014772:	e000      	b.n	8014776 <netif_add+0x1ea>
 8014774:	2100      	movs	r1, #0
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d004      	beq.n	8014786 <netif_add+0x1fa>
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	3301      	adds	r3, #1
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	461a      	mov	r2, r3
 8014784:	e000      	b.n	8014788 <netif_add+0x1fc>
 8014786:	2200      	movs	r2, #0
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d004      	beq.n	8014798 <netif_add+0x20c>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	3302      	adds	r3, #2
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	4618      	mov	r0, r3
 8014796:	e000      	b.n	801479a <netif_add+0x20e>
 8014798:	2000      	movs	r0, #0
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d003      	beq.n	80147a8 <netif_add+0x21c>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	3303      	adds	r3, #3
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	e000      	b.n	80147aa <netif_add+0x21e>
 80147a8:	2300      	movs	r3, #0
 80147aa:	9300      	str	r3, [sp, #0]
 80147ac:	4603      	mov	r3, r0
 80147ae:	481f      	ldr	r0, [pc, #124]	@ (801482c <netif_add+0x2a0>)
 80147b0:	f00c fee6 	bl	8021580 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 80147b4:	481f      	ldr	r0, [pc, #124]	@ (8014834 <netif_add+0x2a8>)
 80147b6:	f00c fee3 	bl	8021580 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d003      	beq.n	80147c8 <netif_add+0x23c>
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	4619      	mov	r1, r3
 80147c6:	e000      	b.n	80147ca <netif_add+0x23e>
 80147c8:	2100      	movs	r1, #0
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d004      	beq.n	80147da <netif_add+0x24e>
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	3301      	adds	r3, #1
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	461a      	mov	r2, r3
 80147d8:	e000      	b.n	80147dc <netif_add+0x250>
 80147da:	2200      	movs	r2, #0
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d004      	beq.n	80147ec <netif_add+0x260>
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	3302      	adds	r3, #2
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	4618      	mov	r0, r3
 80147ea:	e000      	b.n	80147ee <netif_add+0x262>
 80147ec:	2000      	movs	r0, #0
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d021      	beq.n	8014838 <netif_add+0x2ac>
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	3303      	adds	r3, #3
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	e01e      	b.n	801483a <netif_add+0x2ae>
 80147fc:	08023978 	.word	0x08023978
 8014800:	08023a0c 	.word	0x08023a0c
 8014804:	080239c8 	.word	0x080239c8
 8014808:	08023a28 	.word	0x08023a28
 801480c:	08027410 	.word	0x08027410
 8014810:	08014d23 	.word	0x08014d23
 8014814:	2002d354 	.word	0x2002d354
 8014818:	2002d34c 	.word	0x2002d34c
 801481c:	08023a4c 	.word	0x08023a4c
 8014820:	08023a60 	.word	0x08023a60
 8014824:	08023a90 	.word	0x08023a90
 8014828:	08023ab0 	.word	0x08023ab0
 801482c:	08023ab8 	.word	0x08023ab8
 8014830:	08023ac8 	.word	0x08023ac8
 8014834:	08023ad4 	.word	0x08023ad4
 8014838:	2300      	movs	r3, #0
 801483a:	9300      	str	r3, [sp, #0]
 801483c:	4603      	mov	r3, r0
 801483e:	4805      	ldr	r0, [pc, #20]	@ (8014854 <netif_add+0x2c8>)
 8014840:	f00c fe9e 	bl	8021580 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8014844:	200a      	movs	r0, #10
 8014846:	f00c fead 	bl	80215a4 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801484a:	68fb      	ldr	r3, [r7, #12]
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	08023ab8 	.word	0x08023ab8

08014858 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b082      	sub	sp, #8
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014862:	6839      	ldr	r1, [r7, #0]
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f003 f933 	bl	8017ad0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801486a:	6839      	ldr	r1, [r7, #0]
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f008 fd81 	bl	801d374 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014872:	bf00      	nop
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
	...

0801487c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b086      	sub	sp, #24
 8014880:	af00      	add	r7, sp, #0
 8014882:	60f8      	str	r0, [r7, #12]
 8014884:	60b9      	str	r1, [r7, #8]
 8014886:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d106      	bne.n	801489c <netif_do_set_ipaddr+0x20>
 801488e:	4b1e      	ldr	r3, [pc, #120]	@ (8014908 <netif_do_set_ipaddr+0x8c>)
 8014890:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8014894:	491d      	ldr	r1, [pc, #116]	@ (801490c <netif_do_set_ipaddr+0x90>)
 8014896:	481e      	ldr	r0, [pc, #120]	@ (8014910 <netif_do_set_ipaddr+0x94>)
 8014898:	f00c fe72 	bl	8021580 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <netif_do_set_ipaddr+0x34>
 80148a2:	4b19      	ldr	r3, [pc, #100]	@ (8014908 <netif_do_set_ipaddr+0x8c>)
 80148a4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80148a8:	4918      	ldr	r1, [pc, #96]	@ (801490c <netif_do_set_ipaddr+0x90>)
 80148aa:	4819      	ldr	r0, [pc, #100]	@ (8014910 <netif_do_set_ipaddr+0x94>)
 80148ac:	f00c fe68 	bl	8021580 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	681a      	ldr	r2, [r3, #0]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	3304      	adds	r3, #4
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d01f      	beq.n	80148fe <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	3304      	adds	r3, #4
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 80148ce:	4811      	ldr	r0, [pc, #68]	@ (8014914 <netif_do_set_ipaddr+0x98>)
 80148d0:	f00c fec6 	bl	8021660 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80148d4:	f107 0314 	add.w	r3, r7, #20
 80148d8:	4619      	mov	r1, r3
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f7ff ffbc 	bl	8014858 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d002      	beq.n	80148ec <netif_do_set_ipaddr+0x70>
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	e000      	b.n	80148ee <netif_do_set_ipaddr+0x72>
 80148ec:	2300      	movs	r3, #0
 80148ee:	68fa      	ldr	r2, [r7, #12]
 80148f0:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80148f2:	2101      	movs	r1, #1
 80148f4:	68f8      	ldr	r0, [r7, #12]
 80148f6:	f000 f92d 	bl	8014b54 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80148fa:	2301      	movs	r3, #1
 80148fc:	e000      	b.n	8014900 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 80148fe:	2300      	movs	r3, #0
}
 8014900:	4618      	mov	r0, r3
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	08023978 	.word	0x08023978
 801490c:	08023adc 	.word	0x08023adc
 8014910:	080239c8 	.word	0x080239c8
 8014914:	08023aec 	.word	0x08023aec

08014918 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014918:	b5b0      	push	{r4, r5, r7, lr}
 801491a:	b088      	sub	sp, #32
 801491c:	af04      	add	r7, sp, #16
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	60b9      	str	r1, [r7, #8]
 8014922:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	3308      	adds	r3, #8
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	429a      	cmp	r2, r3
 8014930:	d02d      	beq.n	801498e <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d002      	beq.n	801493e <netif_do_set_netmask+0x26>
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	e000      	b.n	8014940 <netif_do_set_netmask+0x28>
 801493e:	2300      	movs	r3, #0
 8014940:	68fa      	ldr	r2, [r7, #12]
 8014942:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801494a:	4618      	mov	r0, r3
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014952:	461c      	mov	r4, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	3308      	adds	r3, #8
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	461d      	mov	r5, r3
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	3308      	adds	r3, #8
 8014960:	3301      	adds	r3, #1
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	461a      	mov	r2, r3
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	3308      	adds	r3, #8
 801496a:	3302      	adds	r3, #2
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	4619      	mov	r1, r3
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	3308      	adds	r3, #8
 8014974:	3303      	adds	r3, #3
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	9302      	str	r3, [sp, #8]
 801497a:	9101      	str	r1, [sp, #4]
 801497c:	9200      	str	r2, [sp, #0]
 801497e:	462b      	mov	r3, r5
 8014980:	4622      	mov	r2, r4
 8014982:	4601      	mov	r1, r0
 8014984:	4804      	ldr	r0, [pc, #16]	@ (8014998 <netif_do_set_netmask+0x80>)
 8014986:	f00c fdfb 	bl	8021580 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801498a:	2301      	movs	r3, #1
 801498c:	e000      	b.n	8014990 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 801498e:	2300      	movs	r3, #0
}
 8014990:	4618      	mov	r0, r3
 8014992:	3710      	adds	r7, #16
 8014994:	46bd      	mov	sp, r7
 8014996:	bdb0      	pop	{r4, r5, r7, pc}
 8014998:	08023b3c 	.word	0x08023b3c

0801499c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801499c:	b5b0      	push	{r4, r5, r7, lr}
 801499e:	b088      	sub	sp, #32
 80149a0:	af04      	add	r7, sp, #16
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	681a      	ldr	r2, [r3, #0]
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	330c      	adds	r3, #12
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d02d      	beq.n	8014a12 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d002      	beq.n	80149c2 <netif_do_set_gw+0x26>
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	e000      	b.n	80149c4 <netif_do_set_gw+0x28>
 80149c2:	2300      	movs	r3, #0
 80149c4:	68fa      	ldr	r2, [r7, #12]
 80149c6:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80149ce:	4618      	mov	r0, r3
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80149d6:	461c      	mov	r4, r3
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	330c      	adds	r3, #12
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	461d      	mov	r5, r3
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	330c      	adds	r3, #12
 80149e4:	3301      	adds	r3, #1
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	461a      	mov	r2, r3
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	330c      	adds	r3, #12
 80149ee:	3302      	adds	r3, #2
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	4619      	mov	r1, r3
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	330c      	adds	r3, #12
 80149f8:	3303      	adds	r3, #3
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	9302      	str	r3, [sp, #8]
 80149fe:	9101      	str	r1, [sp, #4]
 8014a00:	9200      	str	r2, [sp, #0]
 8014a02:	462b      	mov	r3, r5
 8014a04:	4622      	mov	r2, r4
 8014a06:	4601      	mov	r1, r0
 8014a08:	4804      	ldr	r0, [pc, #16]	@ (8014a1c <netif_do_set_gw+0x80>)
 8014a0a:	f00c fdb9 	bl	8021580 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014a0e:	2301      	movs	r3, #1
 8014a10:	e000      	b.n	8014a14 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8014a12:	2300      	movs	r3, #0
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3710      	adds	r7, #16
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8014a1c:	08023b9c 	.word	0x08023b9c

08014a20 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b088      	sub	sp, #32
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	607a      	str	r2, [r7, #4]
 8014a2c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014a32:	2300      	movs	r3, #0
 8014a34:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d101      	bne.n	8014a40 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8014ab0 <netif_set_addr+0x90>)
 8014a3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d101      	bne.n	8014a4a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014a46:	4b1a      	ldr	r3, [pc, #104]	@ (8014ab0 <netif_set_addr+0x90>)
 8014a48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d101      	bne.n	8014a54 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014a50:	4b17      	ldr	r3, [pc, #92]	@ (8014ab0 <netif_set_addr+0x90>)
 8014a52:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d003      	beq.n	8014a62 <netif_set_addr+0x42>
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d101      	bne.n	8014a66 <netif_set_addr+0x46>
 8014a62:	2301      	movs	r3, #1
 8014a64:	e000      	b.n	8014a68 <netif_set_addr+0x48>
 8014a66:	2300      	movs	r3, #0
 8014a68:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d006      	beq.n	8014a7e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014a70:	f107 0310 	add.w	r3, r7, #16
 8014a74:	461a      	mov	r2, r3
 8014a76:	68b9      	ldr	r1, [r7, #8]
 8014a78:	68f8      	ldr	r0, [r7, #12]
 8014a7a:	f7ff feff 	bl	801487c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014a7e:	69fa      	ldr	r2, [r7, #28]
 8014a80:	6879      	ldr	r1, [r7, #4]
 8014a82:	68f8      	ldr	r0, [r7, #12]
 8014a84:	f7ff ff48 	bl	8014918 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014a88:	69ba      	ldr	r2, [r7, #24]
 8014a8a:	6839      	ldr	r1, [r7, #0]
 8014a8c:	68f8      	ldr	r0, [r7, #12]
 8014a8e:	f7ff ff85 	bl	801499c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d106      	bne.n	8014aa6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014a98:	f107 0310 	add.w	r3, r7, #16
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	68b9      	ldr	r1, [r7, #8]
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f7ff feeb 	bl	801487c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014aa6:	bf00      	nop
 8014aa8:	3720      	adds	r7, #32
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	08027410 	.word	0x08027410

08014ab4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014abc:	4a0d      	ldr	r2, [pc, #52]	@ (8014af4 <netif_set_default+0x40>)
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d004      	beq.n	8014ad2 <netif_set_default+0x1e>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8014ace:	4619      	mov	r1, r3
 8014ad0:	e000      	b.n	8014ad4 <netif_set_default+0x20>
 8014ad2:	2127      	movs	r1, #39	@ 0x27
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d003      	beq.n	8014ae2 <netif_set_default+0x2e>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014ae0:	e000      	b.n	8014ae4 <netif_set_default+0x30>
 8014ae2:	2327      	movs	r3, #39	@ 0x27
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	4804      	ldr	r0, [pc, #16]	@ (8014af8 <netif_set_default+0x44>)
 8014ae8:	f00c fd4a 	bl	8021580 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8014aec:	bf00      	nop
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	2002d350 	.word	0x2002d350
 8014af8:	08023c10 	.word	0x08023c10

08014afc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d107      	bne.n	8014b1a <netif_set_up+0x1e>
 8014b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8014b48 <netif_set_up+0x4c>)
 8014b0c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8014b10:	490e      	ldr	r1, [pc, #56]	@ (8014b4c <netif_set_up+0x50>)
 8014b12:	480f      	ldr	r0, [pc, #60]	@ (8014b50 <netif_set_up+0x54>)
 8014b14:	f00c fd34 	bl	8021580 <iprintf>
 8014b18:	e013      	b.n	8014b42 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b20:	f003 0301 	and.w	r3, r3, #1
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d10c      	bne.n	8014b42 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b2e:	f043 0301 	orr.w	r3, r3, #1
 8014b32:	b2da      	uxtb	r2, r3
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014b3a:	2103      	movs	r1, #3
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f000 f809 	bl	8014b54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	08023978 	.word	0x08023978
 8014b4c:	08023c38 	.word	0x08023c38
 8014b50:	080239c8 	.word	0x080239c8

08014b54 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d106      	bne.n	8014b74 <netif_issue_reports+0x20>
 8014b66:	4b18      	ldr	r3, [pc, #96]	@ (8014bc8 <netif_issue_reports+0x74>)
 8014b68:	f240 326d 	movw	r2, #877	@ 0x36d
 8014b6c:	4917      	ldr	r1, [pc, #92]	@ (8014bcc <netif_issue_reports+0x78>)
 8014b6e:	4818      	ldr	r0, [pc, #96]	@ (8014bd0 <netif_issue_reports+0x7c>)
 8014b70:	f00c fd06 	bl	8021580 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b7a:	f003 0304 	and.w	r3, r3, #4
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d01e      	beq.n	8014bc0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b88:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d017      	beq.n	8014bc0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014b90:	78fb      	ldrb	r3, [r7, #3]
 8014b92:	f003 0301 	and.w	r3, r3, #1
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d013      	beq.n	8014bc2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	3304      	adds	r3, #4
 8014b9e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00e      	beq.n	8014bc2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014baa:	f003 0308 	and.w	r3, r3, #8
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d007      	beq.n	8014bc2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	3304      	adds	r3, #4
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f009 fbf7 	bl	801e3ac <etharp_request>
 8014bbe:	e000      	b.n	8014bc2 <netif_issue_reports+0x6e>
    return;
 8014bc0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014bc2:	3708      	adds	r7, #8
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	08023978 	.word	0x08023978
 8014bcc:	08023c54 	.word	0x08023c54
 8014bd0:	080239c8 	.word	0x080239c8

08014bd4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d107      	bne.n	8014bf2 <netif_set_down+0x1e>
 8014be2:	4b12      	ldr	r3, [pc, #72]	@ (8014c2c <netif_set_down+0x58>)
 8014be4:	f240 329b 	movw	r2, #923	@ 0x39b
 8014be8:	4911      	ldr	r1, [pc, #68]	@ (8014c30 <netif_set_down+0x5c>)
 8014bea:	4812      	ldr	r0, [pc, #72]	@ (8014c34 <netif_set_down+0x60>)
 8014bec:	f00c fcc8 	bl	8021580 <iprintf>
 8014bf0:	e019      	b.n	8014c26 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014bf8:	f003 0301 	and.w	r3, r3, #1
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d012      	beq.n	8014c26 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c06:	f023 0301 	bic.w	r3, r3, #1
 8014c0a:	b2da      	uxtb	r2, r3
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c18:	f003 0308 	and.w	r3, r3, #8
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d002      	beq.n	8014c26 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f008 ff41 	bl	801daa8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	08023978 	.word	0x08023978
 8014c30:	08023c78 	.word	0x08023c78
 8014c34:	080239c8 	.word	0x080239c8

08014c38 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d107      	bne.n	8014c56 <netif_set_link_up+0x1e>
 8014c46:	4b13      	ldr	r3, [pc, #76]	@ (8014c94 <netif_set_link_up+0x5c>)
 8014c48:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014c4c:	4912      	ldr	r1, [pc, #72]	@ (8014c98 <netif_set_link_up+0x60>)
 8014c4e:	4813      	ldr	r0, [pc, #76]	@ (8014c9c <netif_set_link_up+0x64>)
 8014c50:	f00c fc96 	bl	8021580 <iprintf>
 8014c54:	e01b      	b.n	8014c8e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c5c:	f003 0304 	and.w	r3, r3, #4
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d114      	bne.n	8014c8e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c6a:	f043 0304 	orr.w	r3, r3, #4
 8014c6e:	b2da      	uxtb	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014c76:	2103      	movs	r1, #3
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f7ff ff6b 	bl	8014b54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	69db      	ldr	r3, [r3, #28]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d003      	beq.n	8014c8e <netif_set_link_up+0x56>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	69db      	ldr	r3, [r3, #28]
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014c8e:	3708      	adds	r7, #8
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}
 8014c94:	08023978 	.word	0x08023978
 8014c98:	08023c98 	.word	0x08023c98
 8014c9c:	080239c8 	.word	0x080239c8

08014ca0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d107      	bne.n	8014cbe <netif_set_link_down+0x1e>
 8014cae:	4b11      	ldr	r3, [pc, #68]	@ (8014cf4 <netif_set_link_down+0x54>)
 8014cb0:	f240 4206 	movw	r2, #1030	@ 0x406
 8014cb4:	4910      	ldr	r1, [pc, #64]	@ (8014cf8 <netif_set_link_down+0x58>)
 8014cb6:	4811      	ldr	r0, [pc, #68]	@ (8014cfc <netif_set_link_down+0x5c>)
 8014cb8:	f00c fc62 	bl	8021580 <iprintf>
 8014cbc:	e017      	b.n	8014cee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cc4:	f003 0304 	and.w	r3, r3, #4
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d010      	beq.n	8014cee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cd2:	f023 0304 	bic.w	r3, r3, #4
 8014cd6:	b2da      	uxtb	r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	69db      	ldr	r3, [r3, #28]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d003      	beq.n	8014cee <netif_set_link_down+0x4e>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	69db      	ldr	r3, [r3, #28]
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	08023978 	.word	0x08023978
 8014cf8:	08023cbc 	.word	0x08023cbc
 8014cfc:	080239c8 	.word	0x080239c8

08014d00 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d002      	beq.n	8014d16 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	683a      	ldr	r2, [r7, #0]
 8014d14:	61da      	str	r2, [r3, #28]
  }
}
 8014d16:	bf00      	nop
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014d22:	b480      	push	{r7}
 8014d24:	b085      	sub	sp, #20
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	60f8      	str	r0, [r7, #12]
 8014d2a:	60b9      	str	r1, [r7, #8]
 8014d2c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8014d2e:	f06f 030b 	mvn.w	r3, #11
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3714      	adds	r7, #20
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr
	...

08014d40 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014d40:	b480      	push	{r7}
 8014d42:	b085      	sub	sp, #20
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	4603      	mov	r3, r0
 8014d48:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014d4a:	79fb      	ldrb	r3, [r7, #7]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d013      	beq.n	8014d78 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014d50:	4b0d      	ldr	r3, [pc, #52]	@ (8014d88 <netif_get_by_index+0x48>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	60fb      	str	r3, [r7, #12]
 8014d56:	e00c      	b.n	8014d72 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014d5e:	3301      	adds	r3, #1
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	79fa      	ldrb	r2, [r7, #7]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d101      	bne.n	8014d6c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	e006      	b.n	8014d7a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	60fb      	str	r3, [r7, #12]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d1ef      	bne.n	8014d58 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014d78:	2300      	movs	r3, #0
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3714      	adds	r7, #20
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop
 8014d88:	2002d34c 	.word	0x2002d34c

08014d8c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b082      	sub	sp, #8
 8014d90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014d92:	f00b fa4f 	bl	8020234 <sys_arch_protect>
 8014d96:	6038      	str	r0, [r7, #0]
 8014d98:	4b0e      	ldr	r3, [pc, #56]	@ (8014dd4 <pbuf_free_ooseq+0x48>)
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	701a      	strb	r2, [r3, #0]
 8014d9e:	6838      	ldr	r0, [r7, #0]
 8014da0:	f00b fa56 	bl	8020250 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014da4:	4b0c      	ldr	r3, [pc, #48]	@ (8014dd8 <pbuf_free_ooseq+0x4c>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	607b      	str	r3, [r7, #4]
 8014daa:	e00d      	b.n	8014dc8 <pbuf_free_ooseq+0x3c>
    if (pcb->ooseq != NULL) {
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d006      	beq.n	8014dc2 <pbuf_free_ooseq+0x36>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 8014db4:	4809      	ldr	r0, [pc, #36]	@ (8014ddc <pbuf_free_ooseq+0x50>)
 8014db6:	f00c fc53 	bl	8021660 <puts>
      tcp_free_ooseq(pcb);
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f002 fec6 	bl	8017b4c <tcp_free_ooseq>
      return;
 8014dc0:	e005      	b.n	8014dce <pbuf_free_ooseq+0x42>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	68db      	ldr	r3, [r3, #12]
 8014dc6:	607b      	str	r3, [r7, #4]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d1ee      	bne.n	8014dac <pbuf_free_ooseq+0x20>
    }
  }
}
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	2002d355 	.word	0x2002d355
 8014dd8:	2002d464 	.word	0x2002d464
 8014ddc:	08023d18 	.word	0x08023d18

08014de0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014de8:	f7ff ffd0 	bl	8014d8c <pbuf_free_ooseq>
}
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014dfa:	f00b fa1b 	bl	8020234 <sys_arch_protect>
 8014dfe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014e00:	4b0f      	ldr	r3, [pc, #60]	@ (8014e40 <pbuf_pool_is_empty+0x4c>)
 8014e02:	781b      	ldrb	r3, [r3, #0]
 8014e04:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8014e06:	4b0e      	ldr	r3, [pc, #56]	@ (8014e40 <pbuf_pool_is_empty+0x4c>)
 8014e08:	2201      	movs	r2, #1
 8014e0a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f00b fa1f 	bl	8020250 <sys_arch_unprotect>

  if (!queued) {
 8014e12:	78fb      	ldrb	r3, [r7, #3]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d10f      	bne.n	8014e38 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014e18:	2100      	movs	r1, #0
 8014e1a:	480a      	ldr	r0, [pc, #40]	@ (8014e44 <pbuf_pool_is_empty+0x50>)
 8014e1c:	f7fe fc9c 	bl	8013758 <tcpip_try_callback>
 8014e20:	4603      	mov	r3, r0
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d008      	beq.n	8014e38 <pbuf_pool_is_empty+0x44>
 8014e26:	f00b fa05 	bl	8020234 <sys_arch_protect>
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	4b04      	ldr	r3, [pc, #16]	@ (8014e40 <pbuf_pool_is_empty+0x4c>)
 8014e2e:	2200      	movs	r2, #0
 8014e30:	701a      	strb	r2, [r3, #0]
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f00b fa0c 	bl	8020250 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014e38:	bf00      	nop
 8014e3a:	3708      	adds	r7, #8
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	2002d355 	.word	0x2002d355
 8014e44:	08014de1 	.word	0x08014de1

08014e48 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b085      	sub	sp, #20
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	4611      	mov	r1, r2
 8014e54:	461a      	mov	r2, r3
 8014e56:	460b      	mov	r3, r1
 8014e58:	80fb      	strh	r3, [r7, #6]
 8014e5a:	4613      	mov	r3, r2
 8014e5c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2200      	movs	r2, #0
 8014e62:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	68ba      	ldr	r2, [r7, #8]
 8014e68:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	88fa      	ldrh	r2, [r7, #6]
 8014e6e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	88ba      	ldrh	r2, [r7, #4]
 8014e74:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014e76:	8b3b      	ldrh	r3, [r7, #24]
 8014e78:	b2da      	uxtb	r2, r3
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	7f3a      	ldrb	r2, [r7, #28]
 8014e82:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2201      	movs	r2, #1
 8014e88:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	73da      	strb	r2, [r3, #15]
}
 8014e90:	bf00      	nop
 8014e92:	3714      	adds	r7, #20
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b08c      	sub	sp, #48	@ 0x30
 8014ea0:	af02      	add	r7, sp, #8
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	71fb      	strb	r3, [r7, #7]
 8014ea6:	460b      	mov	r3, r1
 8014ea8:	80bb      	strh	r3, [r7, #4]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014eae:	79fb      	ldrb	r3, [r7, #7]
 8014eb0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 8014eb2:	88bb      	ldrh	r3, [r7, #4]
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	4874      	ldr	r0, [pc, #464]	@ (8015088 <pbuf_alloc+0x1ec>)
 8014eb8:	f00c fb62 	bl	8021580 <iprintf>

  switch (type) {
 8014ebc:	887b      	ldrh	r3, [r7, #2]
 8014ebe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014ec2:	d07f      	beq.n	8014fc4 <pbuf_alloc+0x128>
 8014ec4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014ec8:	f300 80c8 	bgt.w	801505c <pbuf_alloc+0x1c0>
 8014ecc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014ed0:	d010      	beq.n	8014ef4 <pbuf_alloc+0x58>
 8014ed2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014ed6:	f300 80c1 	bgt.w	801505c <pbuf_alloc+0x1c0>
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d002      	beq.n	8014ee4 <pbuf_alloc+0x48>
 8014ede:	2b41      	cmp	r3, #65	@ 0x41
 8014ee0:	f040 80bc 	bne.w	801505c <pbuf_alloc+0x1c0>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014ee4:	887a      	ldrh	r2, [r7, #2]
 8014ee6:	88bb      	ldrh	r3, [r7, #4]
 8014ee8:	4619      	mov	r1, r3
 8014eea:	2000      	movs	r0, #0
 8014eec:	f000 f8dc 	bl	80150a8 <pbuf_alloc_reference>
 8014ef0:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8014ef2:	e0bd      	b.n	8015070 <pbuf_alloc+0x1d4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014efc:	88bb      	ldrh	r3, [r7, #4]
 8014efe:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014f00:	200c      	movs	r0, #12
 8014f02:	f7ff fa95 	bl	8014430 <memp_malloc>
 8014f06:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d109      	bne.n	8014f22 <pbuf_alloc+0x86>
          PBUF_POOL_IS_EMPTY();
 8014f0e:	f7ff ff71 	bl	8014df4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d002      	beq.n	8014f1e <pbuf_alloc+0x82>
            pbuf_free(p);
 8014f18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f1a:	f000 faeb 	bl	80154f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	e0ad      	b.n	801507e <pbuf_alloc+0x1e2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014f22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f24:	3303      	adds	r3, #3
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	f023 0303 	bic.w	r3, r3, #3
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8014f32:	b29b      	uxth	r3, r3
 8014f34:	8b7a      	ldrh	r2, [r7, #26]
 8014f36:	4293      	cmp	r3, r2
 8014f38:	bf28      	it	cs
 8014f3a:	4613      	movcs	r3, r2
 8014f3c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014f3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f40:	3310      	adds	r3, #16
 8014f42:	693a      	ldr	r2, [r7, #16]
 8014f44:	4413      	add	r3, r2
 8014f46:	3303      	adds	r3, #3
 8014f48:	f023 0303 	bic.w	r3, r3, #3
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	89f9      	ldrh	r1, [r7, #14]
 8014f50:	8b7a      	ldrh	r2, [r7, #26]
 8014f52:	2300      	movs	r3, #0
 8014f54:	9301      	str	r3, [sp, #4]
 8014f56:	887b      	ldrh	r3, [r7, #2]
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	4601      	mov	r1, r0
 8014f5e:	6938      	ldr	r0, [r7, #16]
 8014f60:	f7ff ff72 	bl	8014e48 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	f003 0303 	and.w	r3, r3, #3
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d006      	beq.n	8014f7e <pbuf_alloc+0xe2>
 8014f70:	4b46      	ldr	r3, [pc, #280]	@ (801508c <pbuf_alloc+0x1f0>)
 8014f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014f76:	4946      	ldr	r1, [pc, #280]	@ (8015090 <pbuf_alloc+0x1f4>)
 8014f78:	4846      	ldr	r0, [pc, #280]	@ (8015094 <pbuf_alloc+0x1f8>)
 8014f7a:	f00c fb01 	bl	8021580 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014f7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f80:	3303      	adds	r3, #3
 8014f82:	f023 0303 	bic.w	r3, r3, #3
 8014f86:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014f8a:	d106      	bne.n	8014f9a <pbuf_alloc+0xfe>
 8014f8c:	4b3f      	ldr	r3, [pc, #252]	@ (801508c <pbuf_alloc+0x1f0>)
 8014f8e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8014f92:	4941      	ldr	r1, [pc, #260]	@ (8015098 <pbuf_alloc+0x1fc>)
 8014f94:	483f      	ldr	r0, [pc, #252]	@ (8015094 <pbuf_alloc+0x1f8>)
 8014f96:	f00c faf3 	bl	8021580 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d102      	bne.n	8014fa6 <pbuf_alloc+0x10a>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8014fa4:	e002      	b.n	8014fac <pbuf_alloc+0x110>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	693a      	ldr	r2, [r7, #16]
 8014faa:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014fb0:	8b7a      	ldrh	r2, [r7, #26]
 8014fb2:	89fb      	ldrh	r3, [r7, #14]
 8014fb4:	1ad3      	subs	r3, r2, r3
 8014fb6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8014fbc:	8b7b      	ldrh	r3, [r7, #26]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d19e      	bne.n	8014f00 <pbuf_alloc+0x64>
      break;
 8014fc2:	e055      	b.n	8015070 <pbuf_alloc+0x1d4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014fc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014fc6:	3303      	adds	r3, #3
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	f023 0303 	bic.w	r3, r3, #3
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	88bb      	ldrh	r3, [r7, #4]
 8014fd2:	3303      	adds	r3, #3
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	f023 0303 	bic.w	r3, r3, #3
 8014fda:	b29b      	uxth	r3, r3
 8014fdc:	4413      	add	r3, r2
 8014fde:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014fe0:	8b3b      	ldrh	r3, [r7, #24]
 8014fe2:	3310      	adds	r3, #16
 8014fe4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014fe6:	8b3a      	ldrh	r2, [r7, #24]
 8014fe8:	88bb      	ldrh	r3, [r7, #4]
 8014fea:	3303      	adds	r3, #3
 8014fec:	f023 0303 	bic.w	r3, r3, #3
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d306      	bcc.n	8015002 <pbuf_alloc+0x166>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014ff4:	8afa      	ldrh	r2, [r7, #22]
 8014ff6:	88bb      	ldrh	r3, [r7, #4]
 8014ff8:	3303      	adds	r3, #3
 8014ffa:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d201      	bcs.n	8015006 <pbuf_alloc+0x16a>
        return NULL;
 8015002:	2300      	movs	r3, #0
 8015004:	e03b      	b.n	801507e <pbuf_alloc+0x1e2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015006:	8afb      	ldrh	r3, [r7, #22]
 8015008:	4618      	mov	r0, r3
 801500a:	f7fe ffed 	bl	8013fe8 <mem_malloc>
 801500e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8015010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015012:	2b00      	cmp	r3, #0
 8015014:	d101      	bne.n	801501a <pbuf_alloc+0x17e>
        return NULL;
 8015016:	2300      	movs	r3, #0
 8015018:	e031      	b.n	801507e <pbuf_alloc+0x1e2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801501a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801501c:	3310      	adds	r3, #16
 801501e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015020:	4413      	add	r3, r2
 8015022:	3303      	adds	r3, #3
 8015024:	f023 0303 	bic.w	r3, r3, #3
 8015028:	4618      	mov	r0, r3
 801502a:	88b9      	ldrh	r1, [r7, #4]
 801502c:	88ba      	ldrh	r2, [r7, #4]
 801502e:	2300      	movs	r3, #0
 8015030:	9301      	str	r3, [sp, #4]
 8015032:	887b      	ldrh	r3, [r7, #2]
 8015034:	9300      	str	r3, [sp, #0]
 8015036:	460b      	mov	r3, r1
 8015038:	4601      	mov	r1, r0
 801503a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801503c:	f7ff ff04 	bl	8014e48 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	f003 0303 	and.w	r3, r3, #3
 8015048:	2b00      	cmp	r3, #0
 801504a:	d010      	beq.n	801506e <pbuf_alloc+0x1d2>
 801504c:	4b0f      	ldr	r3, [pc, #60]	@ (801508c <pbuf_alloc+0x1f0>)
 801504e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8015052:	4912      	ldr	r1, [pc, #72]	@ (801509c <pbuf_alloc+0x200>)
 8015054:	480f      	ldr	r0, [pc, #60]	@ (8015094 <pbuf_alloc+0x1f8>)
 8015056:	f00c fa93 	bl	8021580 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801505a:	e008      	b.n	801506e <pbuf_alloc+0x1d2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801505c:	4b0b      	ldr	r3, [pc, #44]	@ (801508c <pbuf_alloc+0x1f0>)
 801505e:	f240 1227 	movw	r2, #295	@ 0x127
 8015062:	490f      	ldr	r1, [pc, #60]	@ (80150a0 <pbuf_alloc+0x204>)
 8015064:	480b      	ldr	r0, [pc, #44]	@ (8015094 <pbuf_alloc+0x1f8>)
 8015066:	f00c fa8b 	bl	8021580 <iprintf>
      return NULL;
 801506a:	2300      	movs	r3, #0
 801506c:	e007      	b.n	801507e <pbuf_alloc+0x1e2>
      break;
 801506e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 8015070:	88bb      	ldrh	r3, [r7, #4]
 8015072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015074:	4619      	mov	r1, r3
 8015076:	480b      	ldr	r0, [pc, #44]	@ (80150a4 <pbuf_alloc+0x208>)
 8015078:	f00c fa82 	bl	8021580 <iprintf>
  return p;
 801507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801507e:	4618      	mov	r0, r3
 8015080:	3728      	adds	r7, #40	@ 0x28
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}
 8015086:	bf00      	nop
 8015088:	08023d48 	.word	0x08023d48
 801508c:	08023d60 	.word	0x08023d60
 8015090:	08023d90 	.word	0x08023d90
 8015094:	08023dc0 	.word	0x08023dc0
 8015098:	08023de8 	.word	0x08023de8
 801509c:	08023e1c 	.word	0x08023e1c
 80150a0:	08023e48 	.word	0x08023e48
 80150a4:	08023e64 	.word	0x08023e64

080150a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b086      	sub	sp, #24
 80150ac:	af02      	add	r7, sp, #8
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	460b      	mov	r3, r1
 80150b2:	807b      	strh	r3, [r7, #2]
 80150b4:	4613      	mov	r3, r2
 80150b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80150b8:	883b      	ldrh	r3, [r7, #0]
 80150ba:	2b41      	cmp	r3, #65	@ 0x41
 80150bc:	d009      	beq.n	80150d2 <pbuf_alloc_reference+0x2a>
 80150be:	883b      	ldrh	r3, [r7, #0]
 80150c0:	2b01      	cmp	r3, #1
 80150c2:	d006      	beq.n	80150d2 <pbuf_alloc_reference+0x2a>
 80150c4:	4b14      	ldr	r3, [pc, #80]	@ (8015118 <pbuf_alloc_reference+0x70>)
 80150c6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80150ca:	4914      	ldr	r1, [pc, #80]	@ (801511c <pbuf_alloc_reference+0x74>)
 80150cc:	4814      	ldr	r0, [pc, #80]	@ (8015120 <pbuf_alloc_reference+0x78>)
 80150ce:	f00c fa57 	bl	8021580 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80150d2:	200b      	movs	r0, #11
 80150d4:	f7ff f9ac 	bl	8014430 <memp_malloc>
 80150d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d10b      	bne.n	80150f8 <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80150e0:	883b      	ldrh	r3, [r7, #0]
 80150e2:	2b01      	cmp	r3, #1
 80150e4:	d101      	bne.n	80150ea <pbuf_alloc_reference+0x42>
 80150e6:	4b0f      	ldr	r3, [pc, #60]	@ (8015124 <pbuf_alloc_reference+0x7c>)
 80150e8:	e000      	b.n	80150ec <pbuf_alloc_reference+0x44>
 80150ea:	4b0f      	ldr	r3, [pc, #60]	@ (8015128 <pbuf_alloc_reference+0x80>)
 80150ec:	4619      	mov	r1, r3
 80150ee:	480f      	ldr	r0, [pc, #60]	@ (801512c <pbuf_alloc_reference+0x84>)
 80150f0:	f00c fa46 	bl	8021580 <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80150f4:	2300      	movs	r3, #0
 80150f6:	e00b      	b.n	8015110 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80150f8:	8879      	ldrh	r1, [r7, #2]
 80150fa:	887a      	ldrh	r2, [r7, #2]
 80150fc:	2300      	movs	r3, #0
 80150fe:	9301      	str	r3, [sp, #4]
 8015100:	883b      	ldrh	r3, [r7, #0]
 8015102:	9300      	str	r3, [sp, #0]
 8015104:	460b      	mov	r3, r1
 8015106:	6879      	ldr	r1, [r7, #4]
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	f7ff fe9d 	bl	8014e48 <pbuf_init_alloced_pbuf>
  return p;
 801510e:	68fb      	ldr	r3, [r7, #12]
}
 8015110:	4618      	mov	r0, r3
 8015112:	3710      	adds	r7, #16
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	08023d60 	.word	0x08023d60
 801511c:	08023e84 	.word	0x08023e84
 8015120:	08023dc0 	.word	0x08023dc0
 8015124:	08023e98 	.word	0x08023e98
 8015128:	08023e9c 	.word	0x08023e9c
 801512c:	08023ea0 	.word	0x08023ea0

08015130 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b088      	sub	sp, #32
 8015134:	af02      	add	r7, sp, #8
 8015136:	607b      	str	r3, [r7, #4]
 8015138:	4603      	mov	r3, r0
 801513a:	73fb      	strb	r3, [r7, #15]
 801513c:	460b      	mov	r3, r1
 801513e:	81bb      	strh	r3, [r7, #12]
 8015140:	4613      	mov	r3, r2
 8015142:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015144:	7bfb      	ldrb	r3, [r7, #15]
 8015146:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 8015148:	89bb      	ldrh	r3, [r7, #12]
 801514a:	4619      	mov	r1, r3
 801514c:	4817      	ldr	r0, [pc, #92]	@ (80151ac <pbuf_alloced_custom+0x7c>)
 801514e:	f00c fa17 	bl	8021580 <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015152:	8a7b      	ldrh	r3, [r7, #18]
 8015154:	3303      	adds	r3, #3
 8015156:	f023 0203 	bic.w	r2, r3, #3
 801515a:	89bb      	ldrh	r3, [r7, #12]
 801515c:	441a      	add	r2, r3
 801515e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015160:	429a      	cmp	r2, r3
 8015162:	d906      	bls.n	8015172 <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 8015164:	89bb      	ldrh	r3, [r7, #12]
 8015166:	4619      	mov	r1, r3
 8015168:	4811      	ldr	r0, [pc, #68]	@ (80151b0 <pbuf_alloced_custom+0x80>)
 801516a:	f00c fa09 	bl	8021580 <iprintf>
    return NULL;
 801516e:	2300      	movs	r3, #0
 8015170:	e018      	b.n	80151a4 <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 8015172:	6a3b      	ldr	r3, [r7, #32]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d007      	beq.n	8015188 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015178:	8a7b      	ldrh	r3, [r7, #18]
 801517a:	3303      	adds	r3, #3
 801517c:	f023 0303 	bic.w	r3, r3, #3
 8015180:	6a3a      	ldr	r2, [r7, #32]
 8015182:	4413      	add	r3, r2
 8015184:	617b      	str	r3, [r7, #20]
 8015186:	e001      	b.n	801518c <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 8015188:	2300      	movs	r3, #0
 801518a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	89b9      	ldrh	r1, [r7, #12]
 8015190:	89ba      	ldrh	r2, [r7, #12]
 8015192:	2302      	movs	r3, #2
 8015194:	9301      	str	r3, [sp, #4]
 8015196:	897b      	ldrh	r3, [r7, #10]
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	460b      	mov	r3, r1
 801519c:	6979      	ldr	r1, [r7, #20]
 801519e:	f7ff fe53 	bl	8014e48 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80151a2:	687b      	ldr	r3, [r7, #4]
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	08023ee4 	.word	0x08023ee4
 80151b0:	08023f08 	.word	0x08023f08

080151b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b084      	sub	sp, #16
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	460b      	mov	r3, r1
 80151be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d106      	bne.n	80151d4 <pbuf_realloc+0x20>
 80151c6:	4b3a      	ldr	r3, [pc, #232]	@ (80152b0 <pbuf_realloc+0xfc>)
 80151c8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80151cc:	4939      	ldr	r1, [pc, #228]	@ (80152b4 <pbuf_realloc+0x100>)
 80151ce:	483a      	ldr	r0, [pc, #232]	@ (80152b8 <pbuf_realloc+0x104>)
 80151d0:	f00c f9d6 	bl	8021580 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	891b      	ldrh	r3, [r3, #8]
 80151d8:	887a      	ldrh	r2, [r7, #2]
 80151da:	429a      	cmp	r2, r3
 80151dc:	d263      	bcs.n	80152a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	891a      	ldrh	r2, [r3, #8]
 80151e2:	887b      	ldrh	r3, [r7, #2]
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80151e8:	887b      	ldrh	r3, [r7, #2]
 80151ea:	817b      	strh	r3, [r7, #10]
  q = p;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80151f0:	e018      	b.n	8015224 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	895b      	ldrh	r3, [r3, #10]
 80151f6:	897a      	ldrh	r2, [r7, #10]
 80151f8:	1ad3      	subs	r3, r2, r3
 80151fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	891a      	ldrh	r2, [r3, #8]
 8015200:	893b      	ldrh	r3, [r7, #8]
 8015202:	1ad3      	subs	r3, r2, r3
 8015204:	b29a      	uxth	r2, r3
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d106      	bne.n	8015224 <pbuf_realloc+0x70>
 8015216:	4b26      	ldr	r3, [pc, #152]	@ (80152b0 <pbuf_realloc+0xfc>)
 8015218:	f240 12af 	movw	r2, #431	@ 0x1af
 801521c:	4927      	ldr	r1, [pc, #156]	@ (80152bc <pbuf_realloc+0x108>)
 801521e:	4826      	ldr	r0, [pc, #152]	@ (80152b8 <pbuf_realloc+0x104>)
 8015220:	f00c f9ae 	bl	8021580 <iprintf>
  while (rem_len > q->len) {
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	895b      	ldrh	r3, [r3, #10]
 8015228:	897a      	ldrh	r2, [r7, #10]
 801522a:	429a      	cmp	r2, r3
 801522c:	d8e1      	bhi.n	80151f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	7b1b      	ldrb	r3, [r3, #12]
 8015232:	f003 030f 	and.w	r3, r3, #15
 8015236:	2b00      	cmp	r3, #0
 8015238:	d121      	bne.n	801527e <pbuf_realloc+0xca>
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	895b      	ldrh	r3, [r3, #10]
 801523e:	897a      	ldrh	r2, [r7, #10]
 8015240:	429a      	cmp	r2, r3
 8015242:	d01c      	beq.n	801527e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	7b5b      	ldrb	r3, [r3, #13]
 8015248:	f003 0302 	and.w	r3, r3, #2
 801524c:	2b00      	cmp	r3, #0
 801524e:	d116      	bne.n	801527e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	685a      	ldr	r2, [r3, #4]
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	1ad3      	subs	r3, r2, r3
 8015258:	b29a      	uxth	r2, r3
 801525a:	897b      	ldrh	r3, [r7, #10]
 801525c:	4413      	add	r3, r2
 801525e:	b29b      	uxth	r3, r3
 8015260:	4619      	mov	r1, r3
 8015262:	68f8      	ldr	r0, [r7, #12]
 8015264:	f7fe fd8e 	bl	8013d84 <mem_trim>
 8015268:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d106      	bne.n	801527e <pbuf_realloc+0xca>
 8015270:	4b0f      	ldr	r3, [pc, #60]	@ (80152b0 <pbuf_realloc+0xfc>)
 8015272:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8015276:	4912      	ldr	r1, [pc, #72]	@ (80152c0 <pbuf_realloc+0x10c>)
 8015278:	480f      	ldr	r0, [pc, #60]	@ (80152b8 <pbuf_realloc+0x104>)
 801527a:	f00c f981 	bl	8021580 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	897a      	ldrh	r2, [r7, #10]
 8015282:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	895a      	ldrh	r2, [r3, #10]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d004      	beq.n	801529e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4618      	mov	r0, r3
 801529a:	f000 f92b 	bl	80154f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	2200      	movs	r2, #0
 80152a2:	601a      	str	r2, [r3, #0]
 80152a4:	e000      	b.n	80152a8 <pbuf_realloc+0xf4>
    return;
 80152a6:	bf00      	nop

}
 80152a8:	3710      	adds	r7, #16
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
 80152ae:	bf00      	nop
 80152b0:	08023d60 	.word	0x08023d60
 80152b4:	08023f3c 	.word	0x08023f3c
 80152b8:	08023dc0 	.word	0x08023dc0
 80152bc:	08023f54 	.word	0x08023f54
 80152c0:	08023f6c 	.word	0x08023f6c

080152c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b086      	sub	sp, #24
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	60b9      	str	r1, [r7, #8]
 80152ce:	4613      	mov	r3, r2
 80152d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d106      	bne.n	80152e6 <pbuf_add_header_impl+0x22>
 80152d8:	4b32      	ldr	r3, [pc, #200]	@ (80153a4 <pbuf_add_header_impl+0xe0>)
 80152da:	f240 12df 	movw	r2, #479	@ 0x1df
 80152de:	4932      	ldr	r1, [pc, #200]	@ (80153a8 <pbuf_add_header_impl+0xe4>)
 80152e0:	4832      	ldr	r0, [pc, #200]	@ (80153ac <pbuf_add_header_impl+0xe8>)
 80152e2:	f00c f94d 	bl	8021580 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d003      	beq.n	80152f4 <pbuf_add_header_impl+0x30>
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80152f2:	d301      	bcc.n	80152f8 <pbuf_add_header_impl+0x34>
    return 1;
 80152f4:	2301      	movs	r3, #1
 80152f6:	e051      	b.n	801539c <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d101      	bne.n	8015302 <pbuf_add_header_impl+0x3e>
    return 0;
 80152fe:	2300      	movs	r3, #0
 8015300:	e04c      	b.n	801539c <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	891a      	ldrh	r2, [r3, #8]
 801530a:	8a7b      	ldrh	r3, [r7, #18]
 801530c:	4413      	add	r3, r2
 801530e:	b29b      	uxth	r3, r3
 8015310:	8a7a      	ldrh	r2, [r7, #18]
 8015312:	429a      	cmp	r2, r3
 8015314:	d901      	bls.n	801531a <pbuf_add_header_impl+0x56>
    return 1;
 8015316:	2301      	movs	r3, #1
 8015318:	e040      	b.n	801539c <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	7b1b      	ldrb	r3, [r3, #12]
 801531e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015320:	8a3b      	ldrh	r3, [r7, #16]
 8015322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015326:	2b00      	cmp	r3, #0
 8015328:	d013      	beq.n	8015352 <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	685a      	ldr	r2, [r3, #4]
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	425b      	negs	r3, r3
 8015332:	4413      	add	r3, r2
 8015334:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	3310      	adds	r3, #16
 801533a:	697a      	ldr	r2, [r7, #20]
 801533c:	429a      	cmp	r2, r3
 801533e:	d214      	bcs.n	801536a <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	3310      	adds	r3, #16
 8015344:	461a      	mov	r2, r3
 8015346:	6979      	ldr	r1, [r7, #20]
 8015348:	4819      	ldr	r0, [pc, #100]	@ (80153b0 <pbuf_add_header_impl+0xec>)
 801534a:	f00c f919 	bl	8021580 <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801534e:	2301      	movs	r3, #1
 8015350:	e024      	b.n	801539c <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015352:	79fb      	ldrb	r3, [r7, #7]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d006      	beq.n	8015366 <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	685a      	ldr	r2, [r3, #4]
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	425b      	negs	r3, r3
 8015360:	4413      	add	r3, r2
 8015362:	617b      	str	r3, [r7, #20]
 8015364:	e001      	b.n	801536a <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015366:	2301      	movs	r3, #1
 8015368:	e018      	b.n	801539c <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	6859      	ldr	r1, [r3, #4]
 801536e:	8a7b      	ldrh	r3, [r7, #18]
 8015370:	697a      	ldr	r2, [r7, #20]
 8015372:	4810      	ldr	r0, [pc, #64]	@ (80153b4 <pbuf_add_header_impl+0xf0>)
 8015374:	f00c f904 	bl	8021580 <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	697a      	ldr	r2, [r7, #20]
 801537c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	895a      	ldrh	r2, [r3, #10]
 8015382:	8a7b      	ldrh	r3, [r7, #18]
 8015384:	4413      	add	r3, r2
 8015386:	b29a      	uxth	r2, r3
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	891a      	ldrh	r2, [r3, #8]
 8015390:	8a7b      	ldrh	r3, [r7, #18]
 8015392:	4413      	add	r3, r2
 8015394:	b29a      	uxth	r2, r3
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	811a      	strh	r2, [r3, #8]


  return 0;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3718      	adds	r7, #24
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	08023d60 	.word	0x08023d60
 80153a8:	08023f88 	.word	0x08023f88
 80153ac:	08023dc0 	.word	0x08023dc0
 80153b0:	08023f94 	.word	0x08023f94
 80153b4:	08023fe0 	.word	0x08023fe0

080153b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80153c2:	2200      	movs	r2, #0
 80153c4:	6839      	ldr	r1, [r7, #0]
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f7ff ff7c 	bl	80152c4 <pbuf_add_header_impl>
 80153cc:	4603      	mov	r3, r0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
	...

080153d8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d106      	bne.n	80153f6 <pbuf_remove_header+0x1e>
 80153e8:	4b23      	ldr	r3, [pc, #140]	@ (8015478 <pbuf_remove_header+0xa0>)
 80153ea:	f240 224b 	movw	r2, #587	@ 0x24b
 80153ee:	4923      	ldr	r1, [pc, #140]	@ (801547c <pbuf_remove_header+0xa4>)
 80153f0:	4823      	ldr	r0, [pc, #140]	@ (8015480 <pbuf_remove_header+0xa8>)
 80153f2:	f00c f8c5 	bl	8021580 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d003      	beq.n	8015404 <pbuf_remove_header+0x2c>
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015402:	d301      	bcc.n	8015408 <pbuf_remove_header+0x30>
    return 1;
 8015404:	2301      	movs	r3, #1
 8015406:	e033      	b.n	8015470 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d101      	bne.n	8015412 <pbuf_remove_header+0x3a>
    return 0;
 801540e:	2300      	movs	r3, #0
 8015410:	e02e      	b.n	8015470 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	895b      	ldrh	r3, [r3, #10]
 801541a:	89fa      	ldrh	r2, [r7, #14]
 801541c:	429a      	cmp	r2, r3
 801541e:	d908      	bls.n	8015432 <pbuf_remove_header+0x5a>
 8015420:	4b15      	ldr	r3, [pc, #84]	@ (8015478 <pbuf_remove_header+0xa0>)
 8015422:	f240 2255 	movw	r2, #597	@ 0x255
 8015426:	4917      	ldr	r1, [pc, #92]	@ (8015484 <pbuf_remove_header+0xac>)
 8015428:	4815      	ldr	r0, [pc, #84]	@ (8015480 <pbuf_remove_header+0xa8>)
 801542a:	f00c f8a9 	bl	8021580 <iprintf>
 801542e:	2301      	movs	r3, #1
 8015430:	e01e      	b.n	8015470 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	685a      	ldr	r2, [r3, #4]
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	441a      	add	r2, r3
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	895a      	ldrh	r2, [r3, #10]
 8015448:	89fb      	ldrh	r3, [r7, #14]
 801544a:	1ad3      	subs	r3, r2, r3
 801544c:	b29a      	uxth	r2, r3
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	891a      	ldrh	r2, [r3, #8]
 8015456:	89fb      	ldrh	r3, [r7, #14]
 8015458:	1ad3      	subs	r3, r2, r3
 801545a:	b29a      	uxth	r2, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	685a      	ldr	r2, [r3, #4]
 8015464:	89fb      	ldrh	r3, [r7, #14]
 8015466:	68b9      	ldr	r1, [r7, #8]
 8015468:	4807      	ldr	r0, [pc, #28]	@ (8015488 <pbuf_remove_header+0xb0>)
 801546a:	f00c f889 	bl	8021580 <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801546e:	2300      	movs	r3, #0
}
 8015470:	4618      	mov	r0, r3
 8015472:	3710      	adds	r7, #16
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	08023d60 	.word	0x08023d60
 801547c:	08023f88 	.word	0x08023f88
 8015480:	08023dc0 	.word	0x08023dc0
 8015484:	08024008 	.word	0x08024008
 8015488:	08024028 	.word	0x08024028

0801548c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	460b      	mov	r3, r1
 8015496:	807b      	strh	r3, [r7, #2]
 8015498:	4613      	mov	r3, r2
 801549a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801549c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	da08      	bge.n	80154b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80154a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154a8:	425b      	negs	r3, r3
 80154aa:	4619      	mov	r1, r3
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7ff ff93 	bl	80153d8 <pbuf_remove_header>
 80154b2:	4603      	mov	r3, r0
 80154b4:	e007      	b.n	80154c6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80154b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154ba:	787a      	ldrb	r2, [r7, #1]
 80154bc:	4619      	mov	r1, r3
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f7ff ff00 	bl	80152c4 <pbuf_add_header_impl>
 80154c4:	4603      	mov	r3, r0
  }
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3708      	adds	r7, #8
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}

080154ce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b082      	sub	sp, #8
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	6078      	str	r0, [r7, #4]
 80154d6:	460b      	mov	r3, r1
 80154d8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80154da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154de:	2201      	movs	r2, #1
 80154e0:	4619      	mov	r1, r3
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f7ff ffd2 	bl	801548c <pbuf_header_impl>
 80154e8:	4603      	mov	r3, r0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3708      	adds	r7, #8
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
	...

080154f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b088      	sub	sp, #32
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d10e      	bne.n	8015520 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d106      	bne.n	8015516 <pbuf_free+0x22>
 8015508:	4b43      	ldr	r3, [pc, #268]	@ (8015618 <pbuf_free+0x124>)
 801550a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801550e:	4943      	ldr	r1, [pc, #268]	@ (801561c <pbuf_free+0x128>)
 8015510:	4843      	ldr	r0, [pc, #268]	@ (8015620 <pbuf_free+0x12c>)
 8015512:	f00c f835 	bl	8021580 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8015516:	4843      	ldr	r0, [pc, #268]	@ (8015624 <pbuf_free+0x130>)
 8015518:	f00c f8a2 	bl	8021660 <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801551c:	2300      	movs	r3, #0
 801551e:	e077      	b.n	8015610 <pbuf_free+0x11c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 8015520:	6879      	ldr	r1, [r7, #4]
 8015522:	4841      	ldr	r0, [pc, #260]	@ (8015628 <pbuf_free+0x134>)
 8015524:	f00c f82c 	bl	8021580 <iprintf>

  PERF_START;

  count = 0;
 8015528:	2300      	movs	r3, #0
 801552a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801552c:	e06c      	b.n	8015608 <pbuf_free+0x114>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801552e:	f00a fe81 	bl	8020234 <sys_arch_protect>
 8015532:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	7b9b      	ldrb	r3, [r3, #14]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d106      	bne.n	801554a <pbuf_free+0x56>
 801553c:	4b36      	ldr	r3, [pc, #216]	@ (8015618 <pbuf_free+0x124>)
 801553e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8015542:	493a      	ldr	r1, [pc, #232]	@ (801562c <pbuf_free+0x138>)
 8015544:	4836      	ldr	r0, [pc, #216]	@ (8015620 <pbuf_free+0x12c>)
 8015546:	f00c f81b 	bl	8021580 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	7b9b      	ldrb	r3, [r3, #14]
 801554e:	3b01      	subs	r3, #1
 8015550:	b2da      	uxtb	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	739a      	strb	r2, [r3, #14]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	7b9b      	ldrb	r3, [r3, #14]
 801555a:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801555c:	69b8      	ldr	r0, [r7, #24]
 801555e:	f00a fe77 	bl	8020250 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015562:	7dfb      	ldrb	r3, [r7, #23]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d147      	bne.n	80155f8 <pbuf_free+0x104>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 801556e:	6879      	ldr	r1, [r7, #4]
 8015570:	482f      	ldr	r0, [pc, #188]	@ (8015630 <pbuf_free+0x13c>)
 8015572:	f00c f805 	bl	8021580 <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	7b1b      	ldrb	r3, [r3, #12]
 801557a:	f003 030f 	and.w	r3, r3, #15
 801557e:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	7b5b      	ldrb	r3, [r3, #13]
 8015584:	f003 0302 	and.w	r3, r3, #2
 8015588:	2b00      	cmp	r3, #0
 801558a:	d011      	beq.n	80155b0 <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	691b      	ldr	r3, [r3, #16]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d106      	bne.n	80155a6 <pbuf_free+0xb2>
 8015598:	4b1f      	ldr	r3, [pc, #124]	@ (8015618 <pbuf_free+0x124>)
 801559a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801559e:	4925      	ldr	r1, [pc, #148]	@ (8015634 <pbuf_free+0x140>)
 80155a0:	481f      	ldr	r0, [pc, #124]	@ (8015620 <pbuf_free+0x12c>)
 80155a2:	f00b ffed 	bl	8021580 <iprintf>
        pc->custom_free_function(p);
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	691b      	ldr	r3, [r3, #16]
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	4798      	blx	r3
 80155ae:	e01d      	b.n	80155ec <pbuf_free+0xf8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80155b0:	7bfb      	ldrb	r3, [r7, #15]
 80155b2:	2b02      	cmp	r3, #2
 80155b4:	d104      	bne.n	80155c0 <pbuf_free+0xcc>
          memp_free(MEMP_PBUF_POOL, p);
 80155b6:	6879      	ldr	r1, [r7, #4]
 80155b8:	200c      	movs	r0, #12
 80155ba:	f7fe ffb5 	bl	8014528 <memp_free>
 80155be:	e015      	b.n	80155ec <pbuf_free+0xf8>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80155c0:	7bfb      	ldrb	r3, [r7, #15]
 80155c2:	2b01      	cmp	r3, #1
 80155c4:	d104      	bne.n	80155d0 <pbuf_free+0xdc>
          memp_free(MEMP_PBUF, p);
 80155c6:	6879      	ldr	r1, [r7, #4]
 80155c8:	200b      	movs	r0, #11
 80155ca:	f7fe ffad 	bl	8014528 <memp_free>
 80155ce:	e00d      	b.n	80155ec <pbuf_free+0xf8>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80155d0:	7bfb      	ldrb	r3, [r7, #15]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d103      	bne.n	80155de <pbuf_free+0xea>
          mem_free(p);
 80155d6:	6878      	ldr	r0, [r7, #4]
 80155d8:	f7fe fafc 	bl	8013bd4 <mem_free>
 80155dc:	e006      	b.n	80155ec <pbuf_free+0xf8>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80155de:	4b0e      	ldr	r3, [pc, #56]	@ (8015618 <pbuf_free+0x124>)
 80155e0:	f240 320f 	movw	r2, #783	@ 0x30f
 80155e4:	4914      	ldr	r1, [pc, #80]	@ (8015638 <pbuf_free+0x144>)
 80155e6:	480e      	ldr	r0, [pc, #56]	@ (8015620 <pbuf_free+0x12c>)
 80155e8:	f00b ffca 	bl	8021580 <iprintf>
        }
      }
      count++;
 80155ec:	7ffb      	ldrb	r3, [r7, #31]
 80155ee:	3301      	adds	r3, #1
 80155f0:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	607b      	str	r3, [r7, #4]
 80155f6:	e007      	b.n	8015608 <pbuf_free+0x114>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 80155f8:	7dfb      	ldrb	r3, [r7, #23]
 80155fa:	461a      	mov	r2, r3
 80155fc:	6879      	ldr	r1, [r7, #4]
 80155fe:	480f      	ldr	r0, [pc, #60]	@ (801563c <pbuf_free+0x148>)
 8015600:	f00b ffbe 	bl	8021580 <iprintf>
      /* stop walking through the chain */
      p = NULL;
 8015604:	2300      	movs	r3, #0
 8015606:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d18f      	bne.n	801552e <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801560e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015610:	4618      	mov	r0, r3
 8015612:	3720      	adds	r7, #32
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	08023d60 	.word	0x08023d60
 801561c:	08023f88 	.word	0x08023f88
 8015620:	08023dc0 	.word	0x08023dc0
 8015624:	08024054 	.word	0x08024054
 8015628:	08024078 	.word	0x08024078
 801562c:	08024088 	.word	0x08024088
 8015630:	080240a0 	.word	0x080240a0
 8015634:	080240bc 	.word	0x080240bc
 8015638:	080240e0 	.word	0x080240e0
 801563c:	080240f4 	.word	0x080240f4

08015640 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015640:	b480      	push	{r7}
 8015642:	b085      	sub	sp, #20
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015648:	2300      	movs	r3, #0
 801564a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801564c:	e005      	b.n	801565a <pbuf_clen+0x1a>
    ++len;
 801564e:	89fb      	ldrh	r3, [r7, #14]
 8015650:	3301      	adds	r3, #1
 8015652:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d1f6      	bne.n	801564e <pbuf_clen+0xe>
  }
  return len;
 8015660:	89fb      	ldrh	r3, [r7, #14]
}
 8015662:	4618      	mov	r0, r3
 8015664:	3714      	adds	r7, #20
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
	...

08015670 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d016      	beq.n	80156ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801567e:	f00a fdd9 	bl	8020234 <sys_arch_protect>
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	7b9b      	ldrb	r3, [r3, #14]
 8015688:	3301      	adds	r3, #1
 801568a:	b2da      	uxtb	r2, r3
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	739a      	strb	r2, [r3, #14]
 8015690:	68f8      	ldr	r0, [r7, #12]
 8015692:	f00a fddd 	bl	8020250 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	7b9b      	ldrb	r3, [r3, #14]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d106      	bne.n	80156ac <pbuf_ref+0x3c>
 801569e:	4b05      	ldr	r3, [pc, #20]	@ (80156b4 <pbuf_ref+0x44>)
 80156a0:	f240 3242 	movw	r2, #834	@ 0x342
 80156a4:	4904      	ldr	r1, [pc, #16]	@ (80156b8 <pbuf_ref+0x48>)
 80156a6:	4805      	ldr	r0, [pc, #20]	@ (80156bc <pbuf_ref+0x4c>)
 80156a8:	f00b ff6a 	bl	8021580 <iprintf>
  }
}
 80156ac:	bf00      	nop
 80156ae:	3710      	adds	r7, #16
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	08023d60 	.word	0x08023d60
 80156b8:	08024120 	.word	0x08024120
 80156bc:	08023dc0 	.word	0x08023dc0

080156c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d002      	beq.n	80156d6 <pbuf_cat+0x16>
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d107      	bne.n	80156e6 <pbuf_cat+0x26>
 80156d6:	4b20      	ldr	r3, [pc, #128]	@ (8015758 <pbuf_cat+0x98>)
 80156d8:	f240 3259 	movw	r2, #857	@ 0x359
 80156dc:	491f      	ldr	r1, [pc, #124]	@ (801575c <pbuf_cat+0x9c>)
 80156de:	4820      	ldr	r0, [pc, #128]	@ (8015760 <pbuf_cat+0xa0>)
 80156e0:	f00b ff4e 	bl	8021580 <iprintf>
 80156e4:	e034      	b.n	8015750 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	60fb      	str	r3, [r7, #12]
 80156ea:	e00a      	b.n	8015702 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	891a      	ldrh	r2, [r3, #8]
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	891b      	ldrh	r3, [r3, #8]
 80156f4:	4413      	add	r3, r2
 80156f6:	b29a      	uxth	r2, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	60fb      	str	r3, [r7, #12]
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1f0      	bne.n	80156ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	891a      	ldrh	r2, [r3, #8]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	895b      	ldrh	r3, [r3, #10]
 8015712:	429a      	cmp	r2, r3
 8015714:	d006      	beq.n	8015724 <pbuf_cat+0x64>
 8015716:	4b10      	ldr	r3, [pc, #64]	@ (8015758 <pbuf_cat+0x98>)
 8015718:	f240 3262 	movw	r2, #866	@ 0x362
 801571c:	4911      	ldr	r1, [pc, #68]	@ (8015764 <pbuf_cat+0xa4>)
 801571e:	4810      	ldr	r0, [pc, #64]	@ (8015760 <pbuf_cat+0xa0>)
 8015720:	f00b ff2e 	bl	8021580 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d006      	beq.n	801573a <pbuf_cat+0x7a>
 801572c:	4b0a      	ldr	r3, [pc, #40]	@ (8015758 <pbuf_cat+0x98>)
 801572e:	f240 3263 	movw	r2, #867	@ 0x363
 8015732:	490d      	ldr	r1, [pc, #52]	@ (8015768 <pbuf_cat+0xa8>)
 8015734:	480a      	ldr	r0, [pc, #40]	@ (8015760 <pbuf_cat+0xa0>)
 8015736:	f00b ff23 	bl	8021580 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	891a      	ldrh	r2, [r3, #8]
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	891b      	ldrh	r3, [r3, #8]
 8015742:	4413      	add	r3, r2
 8015744:	b29a      	uxth	r2, r3
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	683a      	ldr	r2, [r7, #0]
 801574e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015750:	3710      	adds	r7, #16
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	08023d60 	.word	0x08023d60
 801575c:	08024134 	.word	0x08024134
 8015760:	08023dc0 	.word	0x08023dc0
 8015764:	0802416c 	.word	0x0802416c
 8015768:	0802419c 	.word	0x0802419c

0801576c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b082      	sub	sp, #8
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8015776:	6839      	ldr	r1, [r7, #0]
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f7ff ffa1 	bl	80156c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801577e:	6838      	ldr	r0, [r7, #0]
 8015780:	f7ff ff76 	bl	8015670 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 8015784:	683a      	ldr	r2, [r7, #0]
 8015786:	6879      	ldr	r1, [r7, #4]
 8015788:	4803      	ldr	r0, [pc, #12]	@ (8015798 <pbuf_chain+0x2c>)
 801578a:	f00b fef9 	bl	8021580 <iprintf>
}
 801578e:	bf00      	nop
 8015790:	3708      	adds	r7, #8
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	080241ac 	.word	0x080241ac

0801579c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b086      	sub	sp, #24
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
 80157a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80157a6:	2300      	movs	r3, #0
 80157a8:	617b      	str	r3, [r7, #20]
 80157aa:	2300      	movs	r3, #0
 80157ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 80157ae:	683a      	ldr	r2, [r7, #0]
 80157b0:	6879      	ldr	r1, [r7, #4]
 80157b2:	4860      	ldr	r0, [pc, #384]	@ (8015934 <pbuf_copy+0x198>)
 80157b4:	f00b fee4 	bl	8021580 <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d008      	beq.n	80157d0 <pbuf_copy+0x34>
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d005      	beq.n	80157d0 <pbuf_copy+0x34>
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	891a      	ldrh	r2, [r3, #8]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	891b      	ldrh	r3, [r3, #8]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d209      	bcs.n	80157e4 <pbuf_copy+0x48>
 80157d0:	4b59      	ldr	r3, [pc, #356]	@ (8015938 <pbuf_copy+0x19c>)
 80157d2:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80157d6:	4959      	ldr	r1, [pc, #356]	@ (801593c <pbuf_copy+0x1a0>)
 80157d8:	4859      	ldr	r0, [pc, #356]	@ (8015940 <pbuf_copy+0x1a4>)
 80157da:	f00b fed1 	bl	8021580 <iprintf>
 80157de:	f06f 030f 	mvn.w	r3, #15
 80157e2:	e0a2      	b.n	801592a <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	895b      	ldrh	r3, [r3, #10]
 80157e8:	461a      	mov	r2, r3
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	1ad2      	subs	r2, r2, r3
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	895b      	ldrh	r3, [r3, #10]
 80157f2:	4619      	mov	r1, r3
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	1acb      	subs	r3, r1, r3
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d306      	bcc.n	801580a <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	895b      	ldrh	r3, [r3, #10]
 8015800:	461a      	mov	r2, r3
 8015802:	693b      	ldr	r3, [r7, #16]
 8015804:	1ad3      	subs	r3, r2, r3
 8015806:	60fb      	str	r3, [r7, #12]
 8015808:	e005      	b.n	8015816 <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	895b      	ldrh	r3, [r3, #10]
 801580e:	461a      	mov	r2, r3
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	685a      	ldr	r2, [r3, #4]
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	18d0      	adds	r0, r2, r3
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	685a      	ldr	r2, [r3, #4]
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	4413      	add	r3, r2
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	4619      	mov	r1, r3
 801582a:	f00c f87e 	bl	802192a <memcpy>
    offset_to += len;
 801582e:	697a      	ldr	r2, [r7, #20]
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	4413      	add	r3, r2
 8015834:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015836:	693a      	ldr	r2, [r7, #16]
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	4413      	add	r3, r2
 801583c:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	895b      	ldrh	r3, [r3, #10]
 8015842:	461a      	mov	r2, r3
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	4293      	cmp	r3, r2
 8015848:	d906      	bls.n	8015858 <pbuf_copy+0xbc>
 801584a:	4b3b      	ldr	r3, [pc, #236]	@ (8015938 <pbuf_copy+0x19c>)
 801584c:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8015850:	493c      	ldr	r1, [pc, #240]	@ (8015944 <pbuf_copy+0x1a8>)
 8015852:	483b      	ldr	r0, [pc, #236]	@ (8015940 <pbuf_copy+0x1a4>)
 8015854:	f00b fe94 	bl	8021580 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	895b      	ldrh	r3, [r3, #10]
 801585c:	461a      	mov	r2, r3
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	4293      	cmp	r3, r2
 8015862:	d906      	bls.n	8015872 <pbuf_copy+0xd6>
 8015864:	4b34      	ldr	r3, [pc, #208]	@ (8015938 <pbuf_copy+0x19c>)
 8015866:	f240 32da 	movw	r2, #986	@ 0x3da
 801586a:	4937      	ldr	r1, [pc, #220]	@ (8015948 <pbuf_copy+0x1ac>)
 801586c:	4834      	ldr	r0, [pc, #208]	@ (8015940 <pbuf_copy+0x1a4>)
 801586e:	f00b fe87 	bl	8021580 <iprintf>
    if (offset_from >= p_from->len) {
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	895b      	ldrh	r3, [r3, #10]
 8015876:	461a      	mov	r2, r3
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	4293      	cmp	r3, r2
 801587c:	d304      	bcc.n	8015888 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 801587e:	2300      	movs	r3, #0
 8015880:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	895b      	ldrh	r3, [r3, #10]
 801588c:	461a      	mov	r2, r3
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	4293      	cmp	r3, r2
 8015892:	d114      	bne.n	80158be <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015894:	2300      	movs	r3, #0
 8015896:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d10c      	bne.n	80158be <pbuf_copy+0x122>
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d009      	beq.n	80158be <pbuf_copy+0x122>
 80158aa:	4b23      	ldr	r3, [pc, #140]	@ (8015938 <pbuf_copy+0x19c>)
 80158ac:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80158b0:	4926      	ldr	r1, [pc, #152]	@ (801594c <pbuf_copy+0x1b0>)
 80158b2:	4823      	ldr	r0, [pc, #140]	@ (8015940 <pbuf_copy+0x1a4>)
 80158b4:	f00b fe64 	bl	8021580 <iprintf>
 80158b8:	f06f 030f 	mvn.w	r3, #15
 80158bc:	e035      	b.n	801592a <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d013      	beq.n	80158ec <pbuf_copy+0x150>
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	895a      	ldrh	r2, [r3, #10]
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	891b      	ldrh	r3, [r3, #8]
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d10d      	bne.n	80158ec <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d009      	beq.n	80158ec <pbuf_copy+0x150>
 80158d8:	4b17      	ldr	r3, [pc, #92]	@ (8015938 <pbuf_copy+0x19c>)
 80158da:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80158de:	491c      	ldr	r1, [pc, #112]	@ (8015950 <pbuf_copy+0x1b4>)
 80158e0:	4817      	ldr	r0, [pc, #92]	@ (8015940 <pbuf_copy+0x1a4>)
 80158e2:	f00b fe4d 	bl	8021580 <iprintf>
 80158e6:	f06f 0305 	mvn.w	r3, #5
 80158ea:	e01e      	b.n	801592a <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d013      	beq.n	801591a <pbuf_copy+0x17e>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	895a      	ldrh	r2, [r3, #10]
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	891b      	ldrh	r3, [r3, #8]
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d10d      	bne.n	801591a <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d009      	beq.n	801591a <pbuf_copy+0x17e>
 8015906:	4b0c      	ldr	r3, [pc, #48]	@ (8015938 <pbuf_copy+0x19c>)
 8015908:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801590c:	4910      	ldr	r1, [pc, #64]	@ (8015950 <pbuf_copy+0x1b4>)
 801590e:	480c      	ldr	r0, [pc, #48]	@ (8015940 <pbuf_copy+0x1a4>)
 8015910:	f00b fe36 	bl	8021580 <iprintf>
 8015914:	f06f 0305 	mvn.w	r3, #5
 8015918:	e007      	b.n	801592a <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	f47f af61 	bne.w	80157e4 <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 8015922:	480c      	ldr	r0, [pc, #48]	@ (8015954 <pbuf_copy+0x1b8>)
 8015924:	f00b fe9c 	bl	8021660 <puts>
  return ERR_OK;
 8015928:	2300      	movs	r3, #0
}
 801592a:	4618      	mov	r0, r3
 801592c:	3718      	adds	r7, #24
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}
 8015932:	bf00      	nop
 8015934:	08024268 	.word	0x08024268
 8015938:	08023d60 	.word	0x08023d60
 801593c:	0802427c 	.word	0x0802427c
 8015940:	08023dc0 	.word	0x08023dc0
 8015944:	080242ac 	.word	0x080242ac
 8015948:	080242c4 	.word	0x080242c4
 801594c:	080242e0 	.word	0x080242e0
 8015950:	080242f0 	.word	0x080242f0
 8015954:	0802431c 	.word	0x0802431c

08015958 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b088      	sub	sp, #32
 801595c:	af00      	add	r7, sp, #0
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	4611      	mov	r1, r2
 8015964:	461a      	mov	r2, r3
 8015966:	460b      	mov	r3, r1
 8015968:	80fb      	strh	r3, [r7, #6]
 801596a:	4613      	mov	r3, r2
 801596c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801596e:	2300      	movs	r3, #0
 8015970:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015972:	2300      	movs	r3, #0
 8015974:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d108      	bne.n	801598e <pbuf_copy_partial+0x36>
 801597c:	4b2b      	ldr	r3, [pc, #172]	@ (8015a2c <pbuf_copy_partial+0xd4>)
 801597e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8015982:	492b      	ldr	r1, [pc, #172]	@ (8015a30 <pbuf_copy_partial+0xd8>)
 8015984:	482b      	ldr	r0, [pc, #172]	@ (8015a34 <pbuf_copy_partial+0xdc>)
 8015986:	f00b fdfb 	bl	8021580 <iprintf>
 801598a:	2300      	movs	r3, #0
 801598c:	e04a      	b.n	8015a24 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d108      	bne.n	80159a6 <pbuf_copy_partial+0x4e>
 8015994:	4b25      	ldr	r3, [pc, #148]	@ (8015a2c <pbuf_copy_partial+0xd4>)
 8015996:	f240 420b 	movw	r2, #1035	@ 0x40b
 801599a:	4927      	ldr	r1, [pc, #156]	@ (8015a38 <pbuf_copy_partial+0xe0>)
 801599c:	4825      	ldr	r0, [pc, #148]	@ (8015a34 <pbuf_copy_partial+0xdc>)
 801599e:	f00b fdef 	bl	8021580 <iprintf>
 80159a2:	2300      	movs	r3, #0
 80159a4:	e03e      	b.n	8015a24 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	61fb      	str	r3, [r7, #28]
 80159aa:	e034      	b.n	8015a16 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80159ac:	88bb      	ldrh	r3, [r7, #4]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d00a      	beq.n	80159c8 <pbuf_copy_partial+0x70>
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	895b      	ldrh	r3, [r3, #10]
 80159b6:	88ba      	ldrh	r2, [r7, #4]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d305      	bcc.n	80159c8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	895b      	ldrh	r3, [r3, #10]
 80159c0:	88ba      	ldrh	r2, [r7, #4]
 80159c2:	1ad3      	subs	r3, r2, r3
 80159c4:	80bb      	strh	r3, [r7, #4]
 80159c6:	e023      	b.n	8015a10 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80159c8:	69fb      	ldr	r3, [r7, #28]
 80159ca:	895a      	ldrh	r2, [r3, #10]
 80159cc:	88bb      	ldrh	r3, [r7, #4]
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80159d2:	8b3a      	ldrh	r2, [r7, #24]
 80159d4:	88fb      	ldrh	r3, [r7, #6]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d901      	bls.n	80159de <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80159da:	88fb      	ldrh	r3, [r7, #6]
 80159dc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80159de:	8b7b      	ldrh	r3, [r7, #26]
 80159e0:	68ba      	ldr	r2, [r7, #8]
 80159e2:	18d0      	adds	r0, r2, r3
 80159e4:	69fb      	ldr	r3, [r7, #28]
 80159e6:	685a      	ldr	r2, [r3, #4]
 80159e8:	88bb      	ldrh	r3, [r7, #4]
 80159ea:	4413      	add	r3, r2
 80159ec:	8b3a      	ldrh	r2, [r7, #24]
 80159ee:	4619      	mov	r1, r3
 80159f0:	f00b ff9b 	bl	802192a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80159f4:	8afa      	ldrh	r2, [r7, #22]
 80159f6:	8b3b      	ldrh	r3, [r7, #24]
 80159f8:	4413      	add	r3, r2
 80159fa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80159fc:	8b7a      	ldrh	r2, [r7, #26]
 80159fe:	8b3b      	ldrh	r3, [r7, #24]
 8015a00:	4413      	add	r3, r2
 8015a02:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015a04:	88fa      	ldrh	r2, [r7, #6]
 8015a06:	8b3b      	ldrh	r3, [r7, #24]
 8015a08:	1ad3      	subs	r3, r2, r3
 8015a0a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	61fb      	str	r3, [r7, #28]
 8015a16:	88fb      	ldrh	r3, [r7, #6]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d002      	beq.n	8015a22 <pbuf_copy_partial+0xca>
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d1c4      	bne.n	80159ac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015a22:	8afb      	ldrh	r3, [r7, #22]
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3720      	adds	r7, #32
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}
 8015a2c:	08023d60 	.word	0x08023d60
 8015a30:	08024340 	.word	0x08024340
 8015a34:	08023dc0 	.word	0x08023dc0
 8015a38:	08024360 	.word	0x08024360

08015a3c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b084      	sub	sp, #16
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	4603      	mov	r3, r0
 8015a44:	603a      	str	r2, [r7, #0]
 8015a46:	71fb      	strb	r3, [r7, #7]
 8015a48:	460b      	mov	r3, r1
 8015a4a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	8919      	ldrh	r1, [r3, #8]
 8015a50:	88ba      	ldrh	r2, [r7, #4]
 8015a52:	79fb      	ldrb	r3, [r7, #7]
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7ff fa21 	bl	8014e9c <pbuf_alloc>
 8015a5a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d101      	bne.n	8015a66 <pbuf_clone+0x2a>
    return NULL;
 8015a62:	2300      	movs	r3, #0
 8015a64:	e011      	b.n	8015a8a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015a66:	6839      	ldr	r1, [r7, #0]
 8015a68:	68f8      	ldr	r0, [r7, #12]
 8015a6a:	f7ff fe97 	bl	801579c <pbuf_copy>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015a72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d006      	beq.n	8015a88 <pbuf_clone+0x4c>
 8015a7a:	4b06      	ldr	r3, [pc, #24]	@ (8015a94 <pbuf_clone+0x58>)
 8015a7c:	f240 5224 	movw	r2, #1316	@ 0x524
 8015a80:	4905      	ldr	r1, [pc, #20]	@ (8015a98 <pbuf_clone+0x5c>)
 8015a82:	4806      	ldr	r0, [pc, #24]	@ (8015a9c <pbuf_clone+0x60>)
 8015a84:	f00b fd7c 	bl	8021580 <iprintf>
  return q;
 8015a88:	68fb      	ldr	r3, [r7, #12]
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	08023d60 	.word	0x08023d60
 8015a98:	0802446c 	.word	0x0802446c
 8015a9c:	08023dc0 	.word	0x08023dc0

08015aa0 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8015aa4:	4b04      	ldr	r3, [pc, #16]	@ (8015ab8 <stats_init+0x18>)
 8015aa6:	4a05      	ldr	r2, [pc, #20]	@ (8015abc <stats_init+0x1c>)
 8015aa8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8015aac:	bf00      	nop
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab4:	4770      	bx	lr
 8015ab6:	bf00      	nop
 8015ab8:	2002d358 	.word	0x2002d358
 8015abc:	08024480 	.word	0x08024480

08015ac0 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
 8015aca:	6839      	ldr	r1, [r7, #0]
 8015acc:	4827      	ldr	r0, [pc, #156]	@ (8015b6c <stats_display_proto+0xac>)
 8015ace:	f00b fd57 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	881b      	ldrh	r3, [r3, #0]
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	4825      	ldr	r0, [pc, #148]	@ (8015b70 <stats_display_proto+0xb0>)
 8015ada:	f00b fd51 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	885b      	ldrh	r3, [r3, #2]
 8015ae2:	4619      	mov	r1, r3
 8015ae4:	4823      	ldr	r0, [pc, #140]	@ (8015b74 <stats_display_proto+0xb4>)
 8015ae6:	f00b fd4b 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	889b      	ldrh	r3, [r3, #4]
 8015aee:	4619      	mov	r1, r3
 8015af0:	4821      	ldr	r0, [pc, #132]	@ (8015b78 <stats_display_proto+0xb8>)
 8015af2:	f00b fd45 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	88db      	ldrh	r3, [r3, #6]
 8015afa:	4619      	mov	r1, r3
 8015afc:	481f      	ldr	r0, [pc, #124]	@ (8015b7c <stats_display_proto+0xbc>)
 8015afe:	f00b fd3f 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	891b      	ldrh	r3, [r3, #8]
 8015b06:	4619      	mov	r1, r3
 8015b08:	481d      	ldr	r0, [pc, #116]	@ (8015b80 <stats_display_proto+0xc0>)
 8015b0a:	f00b fd39 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	895b      	ldrh	r3, [r3, #10]
 8015b12:	4619      	mov	r1, r3
 8015b14:	481b      	ldr	r0, [pc, #108]	@ (8015b84 <stats_display_proto+0xc4>)
 8015b16:	f00b fd33 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	899b      	ldrh	r3, [r3, #12]
 8015b1e:	4619      	mov	r1, r3
 8015b20:	4819      	ldr	r0, [pc, #100]	@ (8015b88 <stats_display_proto+0xc8>)
 8015b22:	f00b fd2d 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	89db      	ldrh	r3, [r3, #14]
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	4817      	ldr	r0, [pc, #92]	@ (8015b8c <stats_display_proto+0xcc>)
 8015b2e:	f00b fd27 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	8a1b      	ldrh	r3, [r3, #16]
 8015b36:	4619      	mov	r1, r3
 8015b38:	4815      	ldr	r0, [pc, #84]	@ (8015b90 <stats_display_proto+0xd0>)
 8015b3a:	f00b fd21 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	8a5b      	ldrh	r3, [r3, #18]
 8015b42:	4619      	mov	r1, r3
 8015b44:	4813      	ldr	r0, [pc, #76]	@ (8015b94 <stats_display_proto+0xd4>)
 8015b46:	f00b fd1b 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	8a9b      	ldrh	r3, [r3, #20]
 8015b4e:	4619      	mov	r1, r3
 8015b50:	4811      	ldr	r0, [pc, #68]	@ (8015b98 <stats_display_proto+0xd8>)
 8015b52:	f00b fd15 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	8adb      	ldrh	r3, [r3, #22]
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	480f      	ldr	r0, [pc, #60]	@ (8015b9c <stats_display_proto+0xdc>)
 8015b5e:	f00b fd0f 	bl	8021580 <iprintf>
}
 8015b62:	bf00      	nop
 8015b64:	3708      	adds	r7, #8
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}
 8015b6a:	bf00      	nop
 8015b6c:	08024484 	.word	0x08024484
 8015b70:	0802448c 	.word	0x0802448c
 8015b74:	08024498 	.word	0x08024498
 8015b78:	080244a4 	.word	0x080244a4
 8015b7c:	080244b0 	.word	0x080244b0
 8015b80:	080244bc 	.word	0x080244bc
 8015b84:	080244cc 	.word	0x080244cc
 8015b88:	080244dc 	.word	0x080244dc
 8015b8c:	080244ec 	.word	0x080244ec
 8015b90:	080244fc 	.word	0x080244fc
 8015b94:	0802450c 	.word	0x0802450c
 8015b98:	0802451c 	.word	0x0802451c
 8015b9c:	08024528 	.word	0x08024528

08015ba0 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
 8015baa:	6839      	ldr	r1, [r7, #0]
 8015bac:	480f      	ldr	r0, [pc, #60]	@ (8015bec <stats_display_mem+0x4c>)
 8015bae:	f00b fce7 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("avail: %"MEM_SIZE_F"\n\t", mem->avail));
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	88db      	ldrh	r3, [r3, #6]
 8015bb6:	4619      	mov	r1, r3
 8015bb8:	480d      	ldr	r0, [pc, #52]	@ (8015bf0 <stats_display_mem+0x50>)
 8015bba:	f00b fce1 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("used: %"MEM_SIZE_F"\n\t", mem->used));
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	891b      	ldrh	r3, [r3, #8]
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	480b      	ldr	r0, [pc, #44]	@ (8015bf4 <stats_display_mem+0x54>)
 8015bc6:	f00b fcdb 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("max: %"MEM_SIZE_F"\n\t", mem->max));
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	895b      	ldrh	r3, [r3, #10]
 8015bce:	4619      	mov	r1, r3
 8015bd0:	4809      	ldr	r0, [pc, #36]	@ (8015bf8 <stats_display_mem+0x58>)
 8015bd2:	f00b fcd5 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n", mem->err));
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	889b      	ldrh	r3, [r3, #4]
 8015bda:	4619      	mov	r1, r3
 8015bdc:	4807      	ldr	r0, [pc, #28]	@ (8015bfc <stats_display_mem+0x5c>)
 8015bde:	f00b fccf 	bl	8021580 <iprintf>
}
 8015be2:	bf00      	nop
 8015be4:	3708      	adds	r7, #8
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}
 8015bea:	bf00      	nop
 8015bec:	08024538 	.word	0x08024538
 8015bf0:	08024544 	.word	0x08024544
 8015bf4:	08024554 	.word	0x08024554
 8015bf8:	08024560 	.word	0x08024560
 8015bfc:	0802456c 	.word	0x0802456c

08015c00 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int idx)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
  if (idx < MEMP_MAX) {
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	2b0c      	cmp	r3, #12
 8015c0e:	dc05      	bgt.n	8015c1c <stats_display_memp+0x1c>
    stats_display_mem(mem, mem->name);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	4619      	mov	r1, r3
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f7ff ffc2 	bl	8015ba0 <stats_display_mem>
  }
}
 8015c1c:	bf00      	nop
 8015c1e:	3708      	adds	r7, #8
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}

08015c24 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b082      	sub	sp, #8
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
 8015c2c:	481e      	ldr	r0, [pc, #120]	@ (8015ca8 <stats_display_sys+0x84>)
 8015c2e:	f00b fca7 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"STAT_COUNTER_F"\n\t", sys->sem.used));
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	4619      	mov	r1, r3
 8015c38:	481c      	ldr	r0, [pc, #112]	@ (8015cac <stats_display_sys+0x88>)
 8015c3a:	f00b fca1 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"STAT_COUNTER_F"\n\t", sys->sem.max));
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	885b      	ldrh	r3, [r3, #2]
 8015c42:	4619      	mov	r1, r3
 8015c44:	481a      	ldr	r0, [pc, #104]	@ (8015cb0 <stats_display_sys+0x8c>)
 8015c46:	f00b fc9b 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"STAT_COUNTER_F"\n\t", sys->sem.err));
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	889b      	ldrh	r3, [r3, #4]
 8015c4e:	4619      	mov	r1, r3
 8015c50:	4818      	ldr	r0, [pc, #96]	@ (8015cb4 <stats_display_sys+0x90>)
 8015c52:	f00b fc95 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"STAT_COUNTER_F"\n\t", sys->mutex.used));
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	88db      	ldrh	r3, [r3, #6]
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	4816      	ldr	r0, [pc, #88]	@ (8015cb8 <stats_display_sys+0x94>)
 8015c5e:	f00b fc8f 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"STAT_COUNTER_F"\n\t", sys->mutex.max));
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	891b      	ldrh	r3, [r3, #8]
 8015c66:	4619      	mov	r1, r3
 8015c68:	4814      	ldr	r0, [pc, #80]	@ (8015cbc <stats_display_sys+0x98>)
 8015c6a:	f00b fc89 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"STAT_COUNTER_F"\n\t", sys->mutex.err));
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	895b      	ldrh	r3, [r3, #10]
 8015c72:	4619      	mov	r1, r3
 8015c74:	4812      	ldr	r0, [pc, #72]	@ (8015cc0 <stats_display_sys+0x9c>)
 8015c76:	f00b fc83 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"STAT_COUNTER_F"\n\t", sys->mbox.used));
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	899b      	ldrh	r3, [r3, #12]
 8015c7e:	4619      	mov	r1, r3
 8015c80:	4810      	ldr	r0, [pc, #64]	@ (8015cc4 <stats_display_sys+0xa0>)
 8015c82:	f00b fc7d 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"STAT_COUNTER_F"\n\t", sys->mbox.max));
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	89db      	ldrh	r3, [r3, #14]
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	480e      	ldr	r0, [pc, #56]	@ (8015cc8 <stats_display_sys+0xa4>)
 8015c8e:	f00b fc77 	bl	8021580 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"STAT_COUNTER_F"\n", sys->mbox.err));
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	8a1b      	ldrh	r3, [r3, #16]
 8015c96:	4619      	mov	r1, r3
 8015c98:	480c      	ldr	r0, [pc, #48]	@ (8015ccc <stats_display_sys+0xa8>)
 8015c9a:	f00b fc71 	bl	8021580 <iprintf>
}
 8015c9e:	bf00      	nop
 8015ca0:	3708      	adds	r7, #8
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	08024578 	.word	0x08024578
 8015cac:	08024580 	.word	0x08024580
 8015cb0:	08024594 	.word	0x08024594
 8015cb4:	080245a8 	.word	0x080245a8
 8015cb8:	080245bc 	.word	0x080245bc
 8015cbc:	080245d0 	.word	0x080245d0
 8015cc0:	080245e4 	.word	0x080245e4
 8015cc4:	080245f8 	.word	0x080245f8
 8015cc8:	0802460c 	.word	0x0802460c
 8015ccc:	08024620 	.word	0x08024620

08015cd0 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
  s16_t i;

  LINK_STATS_DISPLAY();
 8015cd6:	4920      	ldr	r1, [pc, #128]	@ (8015d58 <stats_display+0x88>)
 8015cd8:	4820      	ldr	r0, [pc, #128]	@ (8015d5c <stats_display+0x8c>)
 8015cda:	f7ff fef1 	bl	8015ac0 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
 8015cde:	4920      	ldr	r1, [pc, #128]	@ (8015d60 <stats_display+0x90>)
 8015ce0:	4820      	ldr	r0, [pc, #128]	@ (8015d64 <stats_display+0x94>)
 8015ce2:	f7ff feed 	bl	8015ac0 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
 8015ce6:	4920      	ldr	r1, [pc, #128]	@ (8015d68 <stats_display+0x98>)
 8015ce8:	4820      	ldr	r0, [pc, #128]	@ (8015d6c <stats_display+0x9c>)
 8015cea:	f7ff fee9 	bl	8015ac0 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
 8015cee:	4920      	ldr	r1, [pc, #128]	@ (8015d70 <stats_display+0xa0>)
 8015cf0:	4820      	ldr	r0, [pc, #128]	@ (8015d74 <stats_display+0xa4>)
 8015cf2:	f7ff fee5 	bl	8015ac0 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
 8015cf6:	4920      	ldr	r1, [pc, #128]	@ (8015d78 <stats_display+0xa8>)
 8015cf8:	4820      	ldr	r0, [pc, #128]	@ (8015d7c <stats_display+0xac>)
 8015cfa:	f7ff fee1 	bl	8015ac0 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
 8015cfe:	4920      	ldr	r1, [pc, #128]	@ (8015d80 <stats_display+0xb0>)
 8015d00:	4820      	ldr	r0, [pc, #128]	@ (8015d84 <stats_display+0xb4>)
 8015d02:	f7ff fedd 	bl	8015ac0 <stats_display_proto>
  TCP_STATS_DISPLAY();
 8015d06:	4920      	ldr	r1, [pc, #128]	@ (8015d88 <stats_display+0xb8>)
 8015d08:	4820      	ldr	r0, [pc, #128]	@ (8015d8c <stats_display+0xbc>)
 8015d0a:	f7ff fed9 	bl	8015ac0 <stats_display_proto>
  MEM_STATS_DISPLAY();
 8015d0e:	4920      	ldr	r1, [pc, #128]	@ (8015d90 <stats_display+0xc0>)
 8015d10:	4820      	ldr	r0, [pc, #128]	@ (8015d94 <stats_display+0xc4>)
 8015d12:	f7ff ff45 	bl	8015ba0 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
 8015d16:	2300      	movs	r3, #0
 8015d18:	80fb      	strh	r3, [r7, #6]
 8015d1a:	e011      	b.n	8015d40 <stats_display+0x70>
    MEMP_STATS_DISPLAY(i);
 8015d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d20:	4a0e      	ldr	r2, [pc, #56]	@ (8015d5c <stats_display+0x8c>)
 8015d22:	332e      	adds	r3, #46	@ 0x2e
 8015d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015d2c:	4611      	mov	r1, r2
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7ff ff66 	bl	8015c00 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
 8015d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	80fb      	strh	r3, [r7, #6]
 8015d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d44:	2b0c      	cmp	r3, #12
 8015d46:	dde9      	ble.n	8015d1c <stats_display+0x4c>
  }
  SYS_STATS_DISPLAY();
 8015d48:	4813      	ldr	r0, [pc, #76]	@ (8015d98 <stats_display+0xc8>)
 8015d4a:	f7ff ff6b 	bl	8015c24 <stats_display_sys>
}
 8015d4e:	bf00      	nop
 8015d50:	3708      	adds	r7, #8
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	08024634 	.word	0x08024634
 8015d5c:	2002d358 	.word	0x2002d358
 8015d60:	0802463c 	.word	0x0802463c
 8015d64:	2002d370 	.word	0x2002d370
 8015d68:	08024644 	.word	0x08024644
 8015d6c:	2002d388 	.word	0x2002d388
 8015d70:	0802464c 	.word	0x0802464c
 8015d74:	2002d3a0 	.word	0x2002d3a0
 8015d78:	08024650 	.word	0x08024650
 8015d7c:	2002d3b8 	.word	0x2002d3b8
 8015d80:	08024658 	.word	0x08024658
 8015d84:	2002d3d0 	.word	0x2002d3d0
 8015d88:	0802465c 	.word	0x0802465c
 8015d8c:	2002d3e8 	.word	0x2002d3e8
 8015d90:	08024660 	.word	0x08024660
 8015d94:	2002d400 	.word	0x2002d400
 8015d98:	2002d444 	.word	0x2002d444

08015d9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015da0:	f00b faee 	bl	8021380 <rand>
 8015da4:	4603      	mov	r3, r0
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015dac:	b29b      	uxth	r3, r3
 8015dae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015db2:	b29a      	uxth	r2, r3
 8015db4:	4b01      	ldr	r3, [pc, #4]	@ (8015dbc <tcp_init+0x20>)
 8015db6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015db8:	bf00      	nop
 8015dba:	bd80      	pop	{r7, pc}
 8015dbc:	20000068 	.word	0x20000068

08015dc0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	7d1b      	ldrb	r3, [r3, #20]
 8015dcc:	2b01      	cmp	r3, #1
 8015dce:	d105      	bne.n	8015ddc <tcp_free+0x1c>
 8015dd0:	4b06      	ldr	r3, [pc, #24]	@ (8015dec <tcp_free+0x2c>)
 8015dd2:	22d4      	movs	r2, #212	@ 0xd4
 8015dd4:	4906      	ldr	r1, [pc, #24]	@ (8015df0 <tcp_free+0x30>)
 8015dd6:	4807      	ldr	r0, [pc, #28]	@ (8015df4 <tcp_free+0x34>)
 8015dd8:	f00b fbd2 	bl	8021580 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015ddc:	6879      	ldr	r1, [r7, #4]
 8015dde:	2001      	movs	r0, #1
 8015de0:	f7fe fba2 	bl	8014528 <memp_free>
}
 8015de4:	bf00      	nop
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	080246e0 	.word	0x080246e0
 8015df0:	08024710 	.word	0x08024710
 8015df4:	08024724 	.word	0x08024724

08015df8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	7d1b      	ldrb	r3, [r3, #20]
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d105      	bne.n	8015e14 <tcp_free_listen+0x1c>
 8015e08:	4b06      	ldr	r3, [pc, #24]	@ (8015e24 <tcp_free_listen+0x2c>)
 8015e0a:	22df      	movs	r2, #223	@ 0xdf
 8015e0c:	4906      	ldr	r1, [pc, #24]	@ (8015e28 <tcp_free_listen+0x30>)
 8015e0e:	4807      	ldr	r0, [pc, #28]	@ (8015e2c <tcp_free_listen+0x34>)
 8015e10:	f00b fbb6 	bl	8021580 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015e14:	6879      	ldr	r1, [r7, #4]
 8015e16:	2002      	movs	r0, #2
 8015e18:	f7fe fb86 	bl	8014528 <memp_free>
}
 8015e1c:	bf00      	nop
 8015e1e:	3708      	adds	r7, #8
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	080246e0 	.word	0x080246e0
 8015e28:	0802474c 	.word	0x0802474c
 8015e2c:	08024724 	.word	0x08024724

08015e30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015e34:	f001 f8f6 	bl	8017024 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015e38:	4b07      	ldr	r3, [pc, #28]	@ (8015e58 <tcp_tmr+0x28>)
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	b2da      	uxtb	r2, r3
 8015e40:	4b05      	ldr	r3, [pc, #20]	@ (8015e58 <tcp_tmr+0x28>)
 8015e42:	701a      	strb	r2, [r3, #0]
 8015e44:	4b04      	ldr	r3, [pc, #16]	@ (8015e58 <tcp_tmr+0x28>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	f003 0301 	and.w	r3, r3, #1
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d001      	beq.n	8015e54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015e50:	f000 fda6 	bl	80169a0 <tcp_slowtmr>
  }
}
 8015e54:	bf00      	nop
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	2002d46d 	.word	0x2002d46d

08015e5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d105      	bne.n	8015e78 <tcp_remove_listener+0x1c>
 8015e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8015ea4 <tcp_remove_listener+0x48>)
 8015e6e:	22ff      	movs	r2, #255	@ 0xff
 8015e70:	490d      	ldr	r1, [pc, #52]	@ (8015ea8 <tcp_remove_listener+0x4c>)
 8015e72:	480e      	ldr	r0, [pc, #56]	@ (8015eac <tcp_remove_listener+0x50>)
 8015e74:	f00b fb84 	bl	8021580 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	60fb      	str	r3, [r7, #12]
 8015e7c:	e00a      	b.n	8015e94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e82:	683a      	ldr	r2, [r7, #0]
 8015e84:	429a      	cmp	r2, r3
 8015e86:	d102      	bne.n	8015e8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	68db      	ldr	r3, [r3, #12]
 8015e92:	60fb      	str	r3, [r7, #12]
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d1f1      	bne.n	8015e7e <tcp_remove_listener+0x22>
    }
  }
}
 8015e9a:	bf00      	nop
 8015e9c:	bf00      	nop
 8015e9e:	3710      	adds	r7, #16
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	080246e0 	.word	0x080246e0
 8015ea8:	08024768 	.word	0x08024768
 8015eac:	08024724 	.word	0x08024724

08015eb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b084      	sub	sp, #16
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d106      	bne.n	8015ecc <tcp_listen_closed+0x1c>
 8015ebe:	4b14      	ldr	r3, [pc, #80]	@ (8015f10 <tcp_listen_closed+0x60>)
 8015ec0:	f240 1211 	movw	r2, #273	@ 0x111
 8015ec4:	4913      	ldr	r1, [pc, #76]	@ (8015f14 <tcp_listen_closed+0x64>)
 8015ec6:	4814      	ldr	r0, [pc, #80]	@ (8015f18 <tcp_listen_closed+0x68>)
 8015ec8:	f00b fb5a 	bl	8021580 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	7d1b      	ldrb	r3, [r3, #20]
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d006      	beq.n	8015ee2 <tcp_listen_closed+0x32>
 8015ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8015f10 <tcp_listen_closed+0x60>)
 8015ed6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8015eda:	4910      	ldr	r1, [pc, #64]	@ (8015f1c <tcp_listen_closed+0x6c>)
 8015edc:	480e      	ldr	r0, [pc, #56]	@ (8015f18 <tcp_listen_closed+0x68>)
 8015ede:	f00b fb4f 	bl	8021580 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	60fb      	str	r3, [r7, #12]
 8015ee6:	e00b      	b.n	8015f00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8015f20 <tcp_listen_closed+0x70>)
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	6879      	ldr	r1, [r7, #4]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7ff ffb1 	bl	8015e5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	3301      	adds	r3, #1
 8015efe:	60fb      	str	r3, [r7, #12]
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	2b03      	cmp	r3, #3
 8015f04:	d9f0      	bls.n	8015ee8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015f06:	bf00      	nop
 8015f08:	bf00      	nop
 8015f0a:	3710      	adds	r7, #16
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}
 8015f10:	080246e0 	.word	0x080246e0
 8015f14:	08024790 	.word	0x08024790
 8015f18:	08024724 	.word	0x08024724
 8015f1c:	0802479c 	.word	0x0802479c
 8015f20:	080273e8 	.word	0x080273e8

08015f24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015f24:	b5b0      	push	{r4, r5, r7, lr}
 8015f26:	b088      	sub	sp, #32
 8015f28:	af04      	add	r7, sp, #16
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	460b      	mov	r3, r1
 8015f2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d106      	bne.n	8015f44 <tcp_close_shutdown+0x20>
 8015f36:	4b63      	ldr	r3, [pc, #396]	@ (80160c4 <tcp_close_shutdown+0x1a0>)
 8015f38:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8015f3c:	4962      	ldr	r1, [pc, #392]	@ (80160c8 <tcp_close_shutdown+0x1a4>)
 8015f3e:	4863      	ldr	r0, [pc, #396]	@ (80160cc <tcp_close_shutdown+0x1a8>)
 8015f40:	f00b fb1e 	bl	8021580 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015f44:	78fb      	ldrb	r3, [r7, #3]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d066      	beq.n	8016018 <tcp_close_shutdown+0xf4>
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	7d1b      	ldrb	r3, [r3, #20]
 8015f4e:	2b04      	cmp	r3, #4
 8015f50:	d003      	beq.n	8015f5a <tcp_close_shutdown+0x36>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	7d1b      	ldrb	r3, [r3, #20]
 8015f56:	2b07      	cmp	r3, #7
 8015f58:	d15e      	bne.n	8016018 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d104      	bne.n	8015f6c <tcp_close_shutdown+0x48>
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f66:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015f6a:	d055      	beq.n	8016018 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	8b5b      	ldrh	r3, [r3, #26]
 8015f70:	f003 0310 	and.w	r3, r3, #16
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d106      	bne.n	8015f86 <tcp_close_shutdown+0x62>
 8015f78:	4b52      	ldr	r3, [pc, #328]	@ (80160c4 <tcp_close_shutdown+0x1a0>)
 8015f7a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8015f7e:	4954      	ldr	r1, [pc, #336]	@ (80160d0 <tcp_close_shutdown+0x1ac>)
 8015f80:	4852      	ldr	r0, [pc, #328]	@ (80160cc <tcp_close_shutdown+0x1a8>)
 8015f82:	f00b fafd 	bl	8021580 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015f8e:	687d      	ldr	r5, [r7, #4]
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	3304      	adds	r3, #4
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	8ad2      	ldrh	r2, [r2, #22]
 8015f98:	6879      	ldr	r1, [r7, #4]
 8015f9a:	8b09      	ldrh	r1, [r1, #24]
 8015f9c:	9102      	str	r1, [sp, #8]
 8015f9e:	9201      	str	r2, [sp, #4]
 8015fa0:	9300      	str	r3, [sp, #0]
 8015fa2:	462b      	mov	r3, r5
 8015fa4:	4622      	mov	r2, r4
 8015fa6:	4601      	mov	r1, r0
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f005 ff57 	bl	801be5c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f001 fc12 	bl	80177d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015fb4:	4b47      	ldr	r3, [pc, #284]	@ (80160d4 <tcp_close_shutdown+0x1b0>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d105      	bne.n	8015fca <tcp_close_shutdown+0xa6>
 8015fbe:	4b45      	ldr	r3, [pc, #276]	@ (80160d4 <tcp_close_shutdown+0x1b0>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	68db      	ldr	r3, [r3, #12]
 8015fc4:	4a43      	ldr	r2, [pc, #268]	@ (80160d4 <tcp_close_shutdown+0x1b0>)
 8015fc6:	6013      	str	r3, [r2, #0]
 8015fc8:	e013      	b.n	8015ff2 <tcp_close_shutdown+0xce>
 8015fca:	4b42      	ldr	r3, [pc, #264]	@ (80160d4 <tcp_close_shutdown+0x1b0>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	60fb      	str	r3, [r7, #12]
 8015fd0:	e00c      	b.n	8015fec <tcp_close_shutdown+0xc8>
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	68db      	ldr	r3, [r3, #12]
 8015fd6:	687a      	ldr	r2, [r7, #4]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d104      	bne.n	8015fe6 <tcp_close_shutdown+0xc2>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	68da      	ldr	r2, [r3, #12]
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	60da      	str	r2, [r3, #12]
 8015fe4:	e005      	b.n	8015ff2 <tcp_close_shutdown+0xce>
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	68db      	ldr	r3, [r3, #12]
 8015fea:	60fb      	str	r3, [r7, #12]
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d1ef      	bne.n	8015fd2 <tcp_close_shutdown+0xae>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	60da      	str	r2, [r3, #12]
 8015ff8:	4b37      	ldr	r3, [pc, #220]	@ (80160d8 <tcp_close_shutdown+0x1b4>)
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015ffe:	4b37      	ldr	r3, [pc, #220]	@ (80160dc <tcp_close_shutdown+0x1b8>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	429a      	cmp	r2, r3
 8016006:	d102      	bne.n	801600e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016008:	f004 f912 	bl	801a230 <tcp_trigger_input_pcb_close>
 801600c:	e002      	b.n	8016014 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff fed6 	bl	8015dc0 <tcp_free>
      }
      return ERR_OK;
 8016014:	2300      	movs	r3, #0
 8016016:	e050      	b.n	80160ba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	7d1b      	ldrb	r3, [r3, #20]
 801601c:	2b02      	cmp	r3, #2
 801601e:	d03b      	beq.n	8016098 <tcp_close_shutdown+0x174>
 8016020:	2b02      	cmp	r3, #2
 8016022:	dc44      	bgt.n	80160ae <tcp_close_shutdown+0x18a>
 8016024:	2b00      	cmp	r3, #0
 8016026:	d002      	beq.n	801602e <tcp_close_shutdown+0x10a>
 8016028:	2b01      	cmp	r3, #1
 801602a:	d02a      	beq.n	8016082 <tcp_close_shutdown+0x15e>
 801602c:	e03f      	b.n	80160ae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	8adb      	ldrh	r3, [r3, #22]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d021      	beq.n	801607a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016036:	4b2a      	ldr	r3, [pc, #168]	@ (80160e0 <tcp_close_shutdown+0x1bc>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	687a      	ldr	r2, [r7, #4]
 801603c:	429a      	cmp	r2, r3
 801603e:	d105      	bne.n	801604c <tcp_close_shutdown+0x128>
 8016040:	4b27      	ldr	r3, [pc, #156]	@ (80160e0 <tcp_close_shutdown+0x1bc>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	4a26      	ldr	r2, [pc, #152]	@ (80160e0 <tcp_close_shutdown+0x1bc>)
 8016048:	6013      	str	r3, [r2, #0]
 801604a:	e013      	b.n	8016074 <tcp_close_shutdown+0x150>
 801604c:	4b24      	ldr	r3, [pc, #144]	@ (80160e0 <tcp_close_shutdown+0x1bc>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	60bb      	str	r3, [r7, #8]
 8016052:	e00c      	b.n	801606e <tcp_close_shutdown+0x14a>
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	687a      	ldr	r2, [r7, #4]
 801605a:	429a      	cmp	r2, r3
 801605c:	d104      	bne.n	8016068 <tcp_close_shutdown+0x144>
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	68da      	ldr	r2, [r3, #12]
 8016062:	68bb      	ldr	r3, [r7, #8]
 8016064:	60da      	str	r2, [r3, #12]
 8016066:	e005      	b.n	8016074 <tcp_close_shutdown+0x150>
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	60bb      	str	r3, [r7, #8]
 801606e:	68bb      	ldr	r3, [r7, #8]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d1ef      	bne.n	8016054 <tcp_close_shutdown+0x130>
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2200      	movs	r2, #0
 8016078:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f7ff fea0 	bl	8015dc0 <tcp_free>
      break;
 8016080:	e01a      	b.n	80160b8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f7ff ff14 	bl	8015eb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016088:	6879      	ldr	r1, [r7, #4]
 801608a:	4816      	ldr	r0, [pc, #88]	@ (80160e4 <tcp_close_shutdown+0x1c0>)
 801608c:	f001 fbf4 	bl	8017878 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f7ff feb1 	bl	8015df8 <tcp_free_listen>
      break;
 8016096:	e00f      	b.n	80160b8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016098:	6879      	ldr	r1, [r7, #4]
 801609a:	480e      	ldr	r0, [pc, #56]	@ (80160d4 <tcp_close_shutdown+0x1b0>)
 801609c:	f001 fbec 	bl	8017878 <tcp_pcb_remove>
 80160a0:	4b0d      	ldr	r3, [pc, #52]	@ (80160d8 <tcp_close_shutdown+0x1b4>)
 80160a2:	2201      	movs	r2, #1
 80160a4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f7ff fe8a 	bl	8015dc0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80160ac:	e004      	b.n	80160b8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f000 f81a 	bl	80160e8 <tcp_close_shutdown_fin>
 80160b4:	4603      	mov	r3, r0
 80160b6:	e000      	b.n	80160ba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80160b8:	2300      	movs	r3, #0
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3710      	adds	r7, #16
 80160be:	46bd      	mov	sp, r7
 80160c0:	bdb0      	pop	{r4, r5, r7, pc}
 80160c2:	bf00      	nop
 80160c4:	080246e0 	.word	0x080246e0
 80160c8:	080247b4 	.word	0x080247b4
 80160cc:	08024724 	.word	0x08024724
 80160d0:	080247d4 	.word	0x080247d4
 80160d4:	2002d464 	.word	0x2002d464
 80160d8:	2002d46c 	.word	0x2002d46c
 80160dc:	2002d4a8 	.word	0x2002d4a8
 80160e0:	2002d45c 	.word	0x2002d45c
 80160e4:	2002d460 	.word	0x2002d460

080160e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b084      	sub	sp, #16
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d106      	bne.n	8016104 <tcp_close_shutdown_fin+0x1c>
 80160f6:	4b2e      	ldr	r3, [pc, #184]	@ (80161b0 <tcp_close_shutdown_fin+0xc8>)
 80160f8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80160fc:	492d      	ldr	r1, [pc, #180]	@ (80161b4 <tcp_close_shutdown_fin+0xcc>)
 80160fe:	482e      	ldr	r0, [pc, #184]	@ (80161b8 <tcp_close_shutdown_fin+0xd0>)
 8016100:	f00b fa3e 	bl	8021580 <iprintf>

  switch (pcb->state) {
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	7d1b      	ldrb	r3, [r3, #20]
 8016108:	2b07      	cmp	r3, #7
 801610a:	d020      	beq.n	801614e <tcp_close_shutdown_fin+0x66>
 801610c:	2b07      	cmp	r3, #7
 801610e:	dc2b      	bgt.n	8016168 <tcp_close_shutdown_fin+0x80>
 8016110:	2b03      	cmp	r3, #3
 8016112:	d002      	beq.n	801611a <tcp_close_shutdown_fin+0x32>
 8016114:	2b04      	cmp	r3, #4
 8016116:	d00d      	beq.n	8016134 <tcp_close_shutdown_fin+0x4c>
 8016118:	e026      	b.n	8016168 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f004 ff7a 	bl	801b014 <tcp_send_fin>
 8016120:	4603      	mov	r3, r0
 8016122:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d11f      	bne.n	801616c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2205      	movs	r2, #5
 8016130:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016132:	e01b      	b.n	801616c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f004 ff6d 	bl	801b014 <tcp_send_fin>
 801613a:	4603      	mov	r3, r0
 801613c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d114      	bne.n	8016170 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2205      	movs	r2, #5
 801614a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801614c:	e010      	b.n	8016170 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f004 ff60 	bl	801b014 <tcp_send_fin>
 8016154:	4603      	mov	r3, r0
 8016156:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d109      	bne.n	8016174 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2209      	movs	r2, #9
 8016164:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016166:	e005      	b.n	8016174 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8016168:	2300      	movs	r3, #0
 801616a:	e01c      	b.n	80161a6 <tcp_close_shutdown_fin+0xbe>
      break;
 801616c:	bf00      	nop
 801616e:	e002      	b.n	8016176 <tcp_close_shutdown_fin+0x8e>
      break;
 8016170:	bf00      	nop
 8016172:	e000      	b.n	8016176 <tcp_close_shutdown_fin+0x8e>
      break;
 8016174:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d103      	bne.n	8016186 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f005 f898 	bl	801b2b4 <tcp_output>
 8016184:	e00d      	b.n	80161a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8016186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801618a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801618e:	d108      	bne.n	80161a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	8b5b      	ldrh	r3, [r3, #26]
 8016194:	f043 0308 	orr.w	r3, r3, #8
 8016198:	b29a      	uxth	r2, r3
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801619e:	2300      	movs	r3, #0
 80161a0:	e001      	b.n	80161a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80161a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	080246e0 	.word	0x080246e0
 80161b4:	08024790 	.word	0x08024790
 80161b8:	08024724 	.word	0x08024724

080161bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b082      	sub	sp, #8
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d109      	bne.n	80161de <tcp_close+0x22>
 80161ca:	4b0f      	ldr	r3, [pc, #60]	@ (8016208 <tcp_close+0x4c>)
 80161cc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80161d0:	490e      	ldr	r1, [pc, #56]	@ (801620c <tcp_close+0x50>)
 80161d2:	480f      	ldr	r0, [pc, #60]	@ (8016210 <tcp_close+0x54>)
 80161d4:	f00b f9d4 	bl	8021580 <iprintf>
 80161d8:	f06f 030f 	mvn.w	r3, #15
 80161dc:	e00f      	b.n	80161fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	7d1b      	ldrb	r3, [r3, #20]
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	d006      	beq.n	80161f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	8b5b      	ldrh	r3, [r3, #26]
 80161ea:	f043 0310 	orr.w	r3, r3, #16
 80161ee:	b29a      	uxth	r2, r3
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80161f4:	2101      	movs	r1, #1
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f7ff fe94 	bl	8015f24 <tcp_close_shutdown>
 80161fc:	4603      	mov	r3, r0
}
 80161fe:	4618      	mov	r0, r3
 8016200:	3708      	adds	r7, #8
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}
 8016206:	bf00      	nop
 8016208:	080246e0 	.word	0x080246e0
 801620c:	080247f0 	.word	0x080247f0
 8016210:	08024724 	.word	0x08024724

08016214 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d109      	bne.n	801623a <tcp_shutdown+0x26>
 8016226:	4b26      	ldr	r3, [pc, #152]	@ (80162c0 <tcp_shutdown+0xac>)
 8016228:	f240 2207 	movw	r2, #519	@ 0x207
 801622c:	4925      	ldr	r1, [pc, #148]	@ (80162c4 <tcp_shutdown+0xb0>)
 801622e:	4826      	ldr	r0, [pc, #152]	@ (80162c8 <tcp_shutdown+0xb4>)
 8016230:	f00b f9a6 	bl	8021580 <iprintf>
 8016234:	f06f 030f 	mvn.w	r3, #15
 8016238:	e03d      	b.n	80162b6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	7d1b      	ldrb	r3, [r3, #20]
 801623e:	2b01      	cmp	r3, #1
 8016240:	d102      	bne.n	8016248 <tcp_shutdown+0x34>
    return ERR_CONN;
 8016242:	f06f 030a 	mvn.w	r3, #10
 8016246:	e036      	b.n	80162b6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d01b      	beq.n	8016286 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	8b5b      	ldrh	r3, [r3, #26]
 8016252:	f043 0310 	orr.w	r3, r3, #16
 8016256:	b29a      	uxth	r2, r3
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d005      	beq.n	801626e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8016262:	2101      	movs	r1, #1
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f7ff fe5d 	bl	8015f24 <tcp_close_shutdown>
 801626a:	4603      	mov	r3, r0
 801626c:	e023      	b.n	80162b6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016272:	2b00      	cmp	r3, #0
 8016274:	d007      	beq.n	8016286 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801627a:	4618      	mov	r0, r3
 801627c:	f7ff f93a 	bl	80154f4 <pbuf_free>
      pcb->refused_data = NULL;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2200      	movs	r2, #0
 8016284:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d013      	beq.n	80162b4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	7d1b      	ldrb	r3, [r3, #20]
 8016290:	2b04      	cmp	r3, #4
 8016292:	dc02      	bgt.n	801629a <tcp_shutdown+0x86>
 8016294:	2b03      	cmp	r3, #3
 8016296:	da02      	bge.n	801629e <tcp_shutdown+0x8a>
 8016298:	e009      	b.n	80162ae <tcp_shutdown+0x9a>
 801629a:	2b07      	cmp	r3, #7
 801629c:	d107      	bne.n	80162ae <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	b2db      	uxtb	r3, r3
 80162a2:	4619      	mov	r1, r3
 80162a4:	68f8      	ldr	r0, [r7, #12]
 80162a6:	f7ff fe3d 	bl	8015f24 <tcp_close_shutdown>
 80162aa:	4603      	mov	r3, r0
 80162ac:	e003      	b.n	80162b6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80162ae:	f06f 030a 	mvn.w	r3, #10
 80162b2:	e000      	b.n	80162b6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80162b4:	2300      	movs	r3, #0
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3710      	adds	r7, #16
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	bf00      	nop
 80162c0:	080246e0 	.word	0x080246e0
 80162c4:	08024808 	.word	0x08024808
 80162c8:	08024724 	.word	0x08024724

080162cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b08e      	sub	sp, #56	@ 0x38
 80162d0:	af04      	add	r7, sp, #16
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d107      	bne.n	80162ec <tcp_abandon+0x20>
 80162dc:	4b52      	ldr	r3, [pc, #328]	@ (8016428 <tcp_abandon+0x15c>)
 80162de:	f240 223d 	movw	r2, #573	@ 0x23d
 80162e2:	4952      	ldr	r1, [pc, #328]	@ (801642c <tcp_abandon+0x160>)
 80162e4:	4852      	ldr	r0, [pc, #328]	@ (8016430 <tcp_abandon+0x164>)
 80162e6:	f00b f94b 	bl	8021580 <iprintf>
 80162ea:	e099      	b.n	8016420 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	7d1b      	ldrb	r3, [r3, #20]
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d106      	bne.n	8016302 <tcp_abandon+0x36>
 80162f4:	4b4c      	ldr	r3, [pc, #304]	@ (8016428 <tcp_abandon+0x15c>)
 80162f6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80162fa:	494e      	ldr	r1, [pc, #312]	@ (8016434 <tcp_abandon+0x168>)
 80162fc:	484c      	ldr	r0, [pc, #304]	@ (8016430 <tcp_abandon+0x164>)
 80162fe:	f00b f93f 	bl	8021580 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	7d1b      	ldrb	r3, [r3, #20]
 8016306:	2b0a      	cmp	r3, #10
 8016308:	d107      	bne.n	801631a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801630a:	6879      	ldr	r1, [r7, #4]
 801630c:	484a      	ldr	r0, [pc, #296]	@ (8016438 <tcp_abandon+0x16c>)
 801630e:	f001 fab3 	bl	8017878 <tcp_pcb_remove>
    tcp_free(pcb);
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f7ff fd54 	bl	8015dc0 <tcp_free>
 8016318:	e082      	b.n	8016420 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801631a:	2300      	movs	r3, #0
 801631c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801631e:	2300      	movs	r3, #0
 8016320:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016326:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801632c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016334:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	691b      	ldr	r3, [r3, #16]
 801633a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	7d1b      	ldrb	r3, [r3, #20]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d126      	bne.n	8016392 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	8adb      	ldrh	r3, [r3, #22]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d02e      	beq.n	80163aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801634c:	4b3b      	ldr	r3, [pc, #236]	@ (801643c <tcp_abandon+0x170>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	429a      	cmp	r2, r3
 8016354:	d105      	bne.n	8016362 <tcp_abandon+0x96>
 8016356:	4b39      	ldr	r3, [pc, #228]	@ (801643c <tcp_abandon+0x170>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	4a37      	ldr	r2, [pc, #220]	@ (801643c <tcp_abandon+0x170>)
 801635e:	6013      	str	r3, [r2, #0]
 8016360:	e013      	b.n	801638a <tcp_abandon+0xbe>
 8016362:	4b36      	ldr	r3, [pc, #216]	@ (801643c <tcp_abandon+0x170>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	61fb      	str	r3, [r7, #28]
 8016368:	e00c      	b.n	8016384 <tcp_abandon+0xb8>
 801636a:	69fb      	ldr	r3, [r7, #28]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	429a      	cmp	r2, r3
 8016372:	d104      	bne.n	801637e <tcp_abandon+0xb2>
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	68da      	ldr	r2, [r3, #12]
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	60da      	str	r2, [r3, #12]
 801637c:	e005      	b.n	801638a <tcp_abandon+0xbe>
 801637e:	69fb      	ldr	r3, [r7, #28]
 8016380:	68db      	ldr	r3, [r3, #12]
 8016382:	61fb      	str	r3, [r7, #28]
 8016384:	69fb      	ldr	r3, [r7, #28]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d1ef      	bne.n	801636a <tcp_abandon+0x9e>
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2200      	movs	r2, #0
 801638e:	60da      	str	r2, [r3, #12]
 8016390:	e00b      	b.n	80163aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	8adb      	ldrh	r3, [r3, #22]
 801639a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801639c:	6879      	ldr	r1, [r7, #4]
 801639e:	4828      	ldr	r0, [pc, #160]	@ (8016440 <tcp_abandon+0x174>)
 80163a0:	f001 fa6a 	bl	8017878 <tcp_pcb_remove>
 80163a4:	4b27      	ldr	r3, [pc, #156]	@ (8016444 <tcp_abandon+0x178>)
 80163a6:	2201      	movs	r2, #1
 80163a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d004      	beq.n	80163bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80163b6:	4618      	mov	r0, r3
 80163b8:	f000 ff14 	bl	80171e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d004      	beq.n	80163ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163c8:	4618      	mov	r0, r3
 80163ca:	f000 ff0b 	bl	80171e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d004      	beq.n	80163e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163da:	4618      	mov	r0, r3
 80163dc:	f000 ff02 	bl	80171e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80163e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d00e      	beq.n	8016404 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80163e6:	6879      	ldr	r1, [r7, #4]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	3304      	adds	r3, #4
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	8b12      	ldrh	r2, [r2, #24]
 80163f0:	9202      	str	r2, [sp, #8]
 80163f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80163f4:	9201      	str	r2, [sp, #4]
 80163f6:	9300      	str	r3, [sp, #0]
 80163f8:	460b      	mov	r3, r1
 80163fa:	697a      	ldr	r2, [r7, #20]
 80163fc:	69b9      	ldr	r1, [r7, #24]
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f005 fd2c 	bl	801be5c <tcp_rst>
    }
    last_state = pcb->state;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	7d1b      	ldrb	r3, [r3, #20]
 8016408:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	f7ff fcd8 	bl	8015dc0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016410:	693b      	ldr	r3, [r7, #16]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d004      	beq.n	8016420 <tcp_abandon+0x154>
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	f06f 010c 	mvn.w	r1, #12
 801641c:	68f8      	ldr	r0, [r7, #12]
 801641e:	4798      	blx	r3
  }
}
 8016420:	3728      	adds	r7, #40	@ 0x28
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	080246e0 	.word	0x080246e0
 801642c:	08024824 	.word	0x08024824
 8016430:	08024724 	.word	0x08024724
 8016434:	08024840 	.word	0x08024840
 8016438:	2002d468 	.word	0x2002d468
 801643c:	2002d45c 	.word	0x2002d45c
 8016440:	2002d464 	.word	0x2002d464
 8016444:	2002d46c 	.word	0x2002d46c

08016448 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b082      	sub	sp, #8
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016450:	2101      	movs	r1, #1
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f7ff ff3a 	bl	80162cc <tcp_abandon>
}
 8016458:	bf00      	nop
 801645a:	3708      	adds	r7, #8
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}

08016460 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b088      	sub	sp, #32
 8016464:	af00      	add	r7, sp, #0
 8016466:	60f8      	str	r0, [r7, #12]
 8016468:	60b9      	str	r1, [r7, #8]
 801646a:	4613      	mov	r3, r2
 801646c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801646e:	2304      	movs	r3, #4
 8016470:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d101      	bne.n	801647c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016478:	4b3e      	ldr	r3, [pc, #248]	@ (8016574 <tcp_bind+0x114>)
 801647a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d109      	bne.n	8016496 <tcp_bind+0x36>
 8016482:	4b3d      	ldr	r3, [pc, #244]	@ (8016578 <tcp_bind+0x118>)
 8016484:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8016488:	493c      	ldr	r1, [pc, #240]	@ (801657c <tcp_bind+0x11c>)
 801648a:	483d      	ldr	r0, [pc, #244]	@ (8016580 <tcp_bind+0x120>)
 801648c:	f00b f878 	bl	8021580 <iprintf>
 8016490:	f06f 030f 	mvn.w	r3, #15
 8016494:	e06a      	b.n	801656c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	7d1b      	ldrb	r3, [r3, #20]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d009      	beq.n	80164b2 <tcp_bind+0x52>
 801649e:	4b36      	ldr	r3, [pc, #216]	@ (8016578 <tcp_bind+0x118>)
 80164a0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80164a4:	4937      	ldr	r1, [pc, #220]	@ (8016584 <tcp_bind+0x124>)
 80164a6:	4836      	ldr	r0, [pc, #216]	@ (8016580 <tcp_bind+0x120>)
 80164a8:	f00b f86a 	bl	8021580 <iprintf>
 80164ac:	f06f 0305 	mvn.w	r3, #5
 80164b0:	e05c      	b.n	801656c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80164b2:	88fb      	ldrh	r3, [r7, #6]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d109      	bne.n	80164cc <tcp_bind+0x6c>
    port = tcp_new_port();
 80164b8:	f000 f914 	bl	80166e4 <tcp_new_port>
 80164bc:	4603      	mov	r3, r0
 80164be:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80164c0:	88fb      	ldrh	r3, [r7, #6]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d135      	bne.n	8016532 <tcp_bind+0xd2>
      return ERR_BUF;
 80164c6:	f06f 0301 	mvn.w	r3, #1
 80164ca:	e04f      	b.n	801656c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80164cc:	2300      	movs	r3, #0
 80164ce:	61fb      	str	r3, [r7, #28]
 80164d0:	e02b      	b.n	801652a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80164d2:	4a2d      	ldr	r2, [pc, #180]	@ (8016588 <tcp_bind+0x128>)
 80164d4:	69fb      	ldr	r3, [r7, #28]
 80164d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	61bb      	str	r3, [r7, #24]
 80164de:	e01e      	b.n	801651e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80164e0:	69bb      	ldr	r3, [r7, #24]
 80164e2:	8adb      	ldrh	r3, [r3, #22]
 80164e4:	88fa      	ldrh	r2, [r7, #6]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d116      	bne.n	8016518 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80164ea:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d010      	beq.n	8016512 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80164f0:	69bb      	ldr	r3, [r7, #24]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d00c      	beq.n	8016512 <tcp_bind+0xb2>
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d009      	beq.n	8016512 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d005      	beq.n	8016512 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016506:	69bb      	ldr	r3, [r7, #24]
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801650e:	429a      	cmp	r2, r3
 8016510:	d102      	bne.n	8016518 <tcp_bind+0xb8>
              return ERR_USE;
 8016512:	f06f 0307 	mvn.w	r3, #7
 8016516:	e029      	b.n	801656c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	61bb      	str	r3, [r7, #24]
 801651e:	69bb      	ldr	r3, [r7, #24]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1dd      	bne.n	80164e0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016524:	69fb      	ldr	r3, [r7, #28]
 8016526:	3301      	adds	r3, #1
 8016528:	61fb      	str	r3, [r7, #28]
 801652a:	69fa      	ldr	r2, [r7, #28]
 801652c:	697b      	ldr	r3, [r7, #20]
 801652e:	429a      	cmp	r2, r3
 8016530:	dbcf      	blt.n	80164d2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d00c      	beq.n	8016552 <tcp_bind+0xf2>
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d008      	beq.n	8016552 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d002      	beq.n	801654c <tcp_bind+0xec>
 8016546:	68bb      	ldr	r3, [r7, #8]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	e000      	b.n	801654e <tcp_bind+0xee>
 801654c:	2300      	movs	r3, #0
 801654e:	68fa      	ldr	r2, [r7, #12]
 8016550:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	88fa      	ldrh	r2, [r7, #6]
 8016556:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016558:	4b0c      	ldr	r3, [pc, #48]	@ (801658c <tcp_bind+0x12c>)
 801655a:	681a      	ldr	r2, [r3, #0]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	60da      	str	r2, [r3, #12]
 8016560:	4a0a      	ldr	r2, [pc, #40]	@ (801658c <tcp_bind+0x12c>)
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	6013      	str	r3, [r2, #0]
 8016566:	f005 fe3b 	bl	801c1e0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801656a:	2300      	movs	r3, #0
}
 801656c:	4618      	mov	r0, r3
 801656e:	3720      	adds	r7, #32
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	08027410 	.word	0x08027410
 8016578:	080246e0 	.word	0x080246e0
 801657c:	08024874 	.word	0x08024874
 8016580:	08024724 	.word	0x08024724
 8016584:	0802488c 	.word	0x0802488c
 8016588:	080273e8 	.word	0x080273e8
 801658c:	2002d45c 	.word	0x2002d45c

08016590 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d106      	bne.n	80165ac <tcp_update_rcv_ann_wnd+0x1c>
 801659e:	4b25      	ldr	r3, [pc, #148]	@ (8016634 <tcp_update_rcv_ann_wnd+0xa4>)
 80165a0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80165a4:	4924      	ldr	r1, [pc, #144]	@ (8016638 <tcp_update_rcv_ann_wnd+0xa8>)
 80165a6:	4825      	ldr	r0, [pc, #148]	@ (801663c <tcp_update_rcv_ann_wnd+0xac>)
 80165a8:	f00a ffea 	bl	8021580 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80165b4:	4413      	add	r3, r2
 80165b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80165c0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80165c4:	bf28      	it	cs
 80165c6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80165ca:	b292      	uxth	r2, r2
 80165cc:	4413      	add	r3, r2
 80165ce:	68fa      	ldr	r2, [r7, #12]
 80165d0:	1ad3      	subs	r3, r2, r3
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	db08      	blt.n	80165e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165e2:	68fa      	ldr	r2, [r7, #12]
 80165e4:	1ad3      	subs	r3, r2, r3
 80165e6:	e020      	b.n	801662a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	dd03      	ble.n	80165fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2200      	movs	r2, #0
 80165fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80165fc:	e014      	b.n	8016628 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016606:	1ad3      	subs	r3, r2, r3
 8016608:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016610:	d306      	bcc.n	8016620 <tcp_update_rcv_ann_wnd+0x90>
 8016612:	4b08      	ldr	r3, [pc, #32]	@ (8016634 <tcp_update_rcv_ann_wnd+0xa4>)
 8016614:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8016618:	4909      	ldr	r1, [pc, #36]	@ (8016640 <tcp_update_rcv_ann_wnd+0xb0>)
 801661a:	4808      	ldr	r0, [pc, #32]	@ (801663c <tcp_update_rcv_ann_wnd+0xac>)
 801661c:	f00a ffb0 	bl	8021580 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	b29a      	uxth	r2, r3
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8016628:	2300      	movs	r3, #0
  }
}
 801662a:	4618      	mov	r0, r3
 801662c:	3710      	adds	r7, #16
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	080246e0 	.word	0x080246e0
 8016638:	0802493c 	.word	0x0802493c
 801663c:	08024724 	.word	0x08024724
 8016640:	08024960 	.word	0x08024960

08016644 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b084      	sub	sp, #16
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	460b      	mov	r3, r1
 801664e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d107      	bne.n	8016666 <tcp_recved+0x22>
 8016656:	4b1f      	ldr	r3, [pc, #124]	@ (80166d4 <tcp_recved+0x90>)
 8016658:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801665c:	491e      	ldr	r1, [pc, #120]	@ (80166d8 <tcp_recved+0x94>)
 801665e:	481f      	ldr	r0, [pc, #124]	@ (80166dc <tcp_recved+0x98>)
 8016660:	f00a ff8e 	bl	8021580 <iprintf>
 8016664:	e032      	b.n	80166cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	7d1b      	ldrb	r3, [r3, #20]
 801666a:	2b01      	cmp	r3, #1
 801666c:	d106      	bne.n	801667c <tcp_recved+0x38>
 801666e:	4b19      	ldr	r3, [pc, #100]	@ (80166d4 <tcp_recved+0x90>)
 8016670:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8016674:	491a      	ldr	r1, [pc, #104]	@ (80166e0 <tcp_recved+0x9c>)
 8016676:	4819      	ldr	r0, [pc, #100]	@ (80166dc <tcp_recved+0x98>)
 8016678:	f00a ff82 	bl	8021580 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016680:	887b      	ldrh	r3, [r7, #2]
 8016682:	4413      	add	r3, r2
 8016684:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016686:	89fb      	ldrh	r3, [r7, #14]
 8016688:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801668c:	d804      	bhi.n	8016698 <tcp_recved+0x54>
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016692:	89fa      	ldrh	r2, [r7, #14]
 8016694:	429a      	cmp	r2, r3
 8016696:	d204      	bcs.n	80166a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801669e:	851a      	strh	r2, [r3, #40]	@ 0x28
 80166a0:	e002      	b.n	80166a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	89fa      	ldrh	r2, [r7, #14]
 80166a6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f7ff ff71 	bl	8016590 <tcp_update_rcv_ann_wnd>
 80166ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80166b6:	d309      	bcc.n	80166cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	8b5b      	ldrh	r3, [r3, #26]
 80166bc:	f043 0302 	orr.w	r3, r3, #2
 80166c0:	b29a      	uxth	r2, r3
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f004 fdf4 	bl	801b2b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80166cc:	3710      	adds	r7, #16
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}
 80166d2:	bf00      	nop
 80166d4:	080246e0 	.word	0x080246e0
 80166d8:	0802497c 	.word	0x0802497c
 80166dc:	08024724 	.word	0x08024724
 80166e0:	08024994 	.word	0x08024994

080166e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80166ea:	2300      	movs	r3, #0
 80166ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80166ee:	4b1e      	ldr	r3, [pc, #120]	@ (8016768 <tcp_new_port+0x84>)
 80166f0:	881b      	ldrh	r3, [r3, #0]
 80166f2:	3301      	adds	r3, #1
 80166f4:	b29a      	uxth	r2, r3
 80166f6:	4b1c      	ldr	r3, [pc, #112]	@ (8016768 <tcp_new_port+0x84>)
 80166f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80166fa:	4b1b      	ldr	r3, [pc, #108]	@ (8016768 <tcp_new_port+0x84>)
 80166fc:	881b      	ldrh	r3, [r3, #0]
 80166fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016702:	4293      	cmp	r3, r2
 8016704:	d103      	bne.n	801670e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016706:	4b18      	ldr	r3, [pc, #96]	@ (8016768 <tcp_new_port+0x84>)
 8016708:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801670c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801670e:	2300      	movs	r3, #0
 8016710:	71fb      	strb	r3, [r7, #7]
 8016712:	e01e      	b.n	8016752 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016714:	79fb      	ldrb	r3, [r7, #7]
 8016716:	4a15      	ldr	r2, [pc, #84]	@ (801676c <tcp_new_port+0x88>)
 8016718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	603b      	str	r3, [r7, #0]
 8016720:	e011      	b.n	8016746 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	8ada      	ldrh	r2, [r3, #22]
 8016726:	4b10      	ldr	r3, [pc, #64]	@ (8016768 <tcp_new_port+0x84>)
 8016728:	881b      	ldrh	r3, [r3, #0]
 801672a:	429a      	cmp	r2, r3
 801672c:	d108      	bne.n	8016740 <tcp_new_port+0x5c>
        n++;
 801672e:	88bb      	ldrh	r3, [r7, #4]
 8016730:	3301      	adds	r3, #1
 8016732:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016734:	88bb      	ldrh	r3, [r7, #4]
 8016736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801673a:	d3d8      	bcc.n	80166ee <tcp_new_port+0xa>
          return 0;
 801673c:	2300      	movs	r3, #0
 801673e:	e00d      	b.n	801675c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	68db      	ldr	r3, [r3, #12]
 8016744:	603b      	str	r3, [r7, #0]
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d1ea      	bne.n	8016722 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801674c:	79fb      	ldrb	r3, [r7, #7]
 801674e:	3301      	adds	r3, #1
 8016750:	71fb      	strb	r3, [r7, #7]
 8016752:	79fb      	ldrb	r3, [r7, #7]
 8016754:	2b03      	cmp	r3, #3
 8016756:	d9dd      	bls.n	8016714 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016758:	4b03      	ldr	r3, [pc, #12]	@ (8016768 <tcp_new_port+0x84>)
 801675a:	881b      	ldrh	r3, [r3, #0]
}
 801675c:	4618      	mov	r0, r3
 801675e:	370c      	adds	r7, #12
 8016760:	46bd      	mov	sp, r7
 8016762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016766:	4770      	bx	lr
 8016768:	20000068 	.word	0x20000068
 801676c:	080273e8 	.word	0x080273e8

08016770 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b08a      	sub	sp, #40	@ 0x28
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	603b      	str	r3, [r7, #0]
 801677c:	4613      	mov	r3, r2
 801677e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8016780:	2300      	movs	r3, #0
 8016782:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d109      	bne.n	801679e <tcp_connect+0x2e>
 801678a:	4b7d      	ldr	r3, [pc, #500]	@ (8016980 <tcp_connect+0x210>)
 801678c:	f240 4235 	movw	r2, #1077	@ 0x435
 8016790:	497c      	ldr	r1, [pc, #496]	@ (8016984 <tcp_connect+0x214>)
 8016792:	487d      	ldr	r0, [pc, #500]	@ (8016988 <tcp_connect+0x218>)
 8016794:	f00a fef4 	bl	8021580 <iprintf>
 8016798:	f06f 030f 	mvn.w	r3, #15
 801679c:	e0ec      	b.n	8016978 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d109      	bne.n	80167b8 <tcp_connect+0x48>
 80167a4:	4b76      	ldr	r3, [pc, #472]	@ (8016980 <tcp_connect+0x210>)
 80167a6:	f240 4236 	movw	r2, #1078	@ 0x436
 80167aa:	4978      	ldr	r1, [pc, #480]	@ (801698c <tcp_connect+0x21c>)
 80167ac:	4876      	ldr	r0, [pc, #472]	@ (8016988 <tcp_connect+0x218>)
 80167ae:	f00a fee7 	bl	8021580 <iprintf>
 80167b2:	f06f 030f 	mvn.w	r3, #15
 80167b6:	e0df      	b.n	8016978 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	7d1b      	ldrb	r3, [r3, #20]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d009      	beq.n	80167d4 <tcp_connect+0x64>
 80167c0:	4b6f      	ldr	r3, [pc, #444]	@ (8016980 <tcp_connect+0x210>)
 80167c2:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80167c6:	4972      	ldr	r1, [pc, #456]	@ (8016990 <tcp_connect+0x220>)
 80167c8:	486f      	ldr	r0, [pc, #444]	@ (8016988 <tcp_connect+0x218>)
 80167ca:	f00a fed9 	bl	8021580 <iprintf>
 80167ce:	f06f 0309 	mvn.w	r3, #9
 80167d2:	e0d1      	b.n	8016978 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d002      	beq.n	80167e0 <tcp_connect+0x70>
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	e000      	b.n	80167e2 <tcp_connect+0x72>
 80167e0:	2300      	movs	r3, #0
 80167e2:	68fa      	ldr	r2, [r7, #12]
 80167e4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	88fa      	ldrh	r2, [r7, #6]
 80167ea:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	7a1b      	ldrb	r3, [r3, #8]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d006      	beq.n	8016802 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	7a1b      	ldrb	r3, [r3, #8]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7fe faa1 	bl	8014d40 <netif_get_by_index>
 80167fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8016800:	e005      	b.n	801680e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	3304      	adds	r3, #4
 8016806:	4618      	mov	r0, r3
 8016808:	f008 f840 	bl	801e88c <ip4_route>
 801680c:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 801680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016810:	2b00      	cmp	r3, #0
 8016812:	d102      	bne.n	801681a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016814:	f06f 0303 	mvn.w	r3, #3
 8016818:	e0ae      	b.n	8016978 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d003      	beq.n	8016828 <tcp_connect+0xb8>
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d111      	bne.n	801684c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801682a:	2b00      	cmp	r3, #0
 801682c:	d002      	beq.n	8016834 <tcp_connect+0xc4>
 801682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016830:	3304      	adds	r3, #4
 8016832:	e000      	b.n	8016836 <tcp_connect+0xc6>
 8016834:	2300      	movs	r3, #0
 8016836:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016838:	69fb      	ldr	r3, [r7, #28]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d102      	bne.n	8016844 <tcp_connect+0xd4>
      return ERR_RTE;
 801683e:	f06f 0303 	mvn.w	r3, #3
 8016842:	e099      	b.n	8016978 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	681a      	ldr	r2, [r3, #0]
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	8adb      	ldrh	r3, [r3, #22]
 8016850:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	8adb      	ldrh	r3, [r3, #22]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d10c      	bne.n	8016874 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801685a:	f7ff ff43 	bl	80166e4 <tcp_new_port>
 801685e:	4603      	mov	r3, r0
 8016860:	461a      	mov	r2, r3
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	8adb      	ldrh	r3, [r3, #22]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d102      	bne.n	8016874 <tcp_connect+0x104>
      return ERR_BUF;
 801686e:	f06f 0301 	mvn.w	r3, #1
 8016872:	e081      	b.n	8016978 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8016874:	68f8      	ldr	r0, [r7, #12]
 8016876:	f001 f893 	bl	80179a0 <tcp_next_iss>
 801687a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	2200      	movs	r2, #0
 8016880:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	697a      	ldr	r2, [r7, #20]
 8016886:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8016888:	697b      	ldr	r3, [r7, #20]
 801688a:	1e5a      	subs	r2, r3, #1
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8016890:	697b      	ldr	r3, [r7, #20]
 8016892:	1e5a      	subs	r2, r3, #1
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	1e5a      	subs	r2, r3, #1
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80168a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80168be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80168c8:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	3304      	adds	r3, #4
 80168d2:	461a      	mov	r2, r3
 80168d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80168d6:	f001 f889 	bl	80179ec <tcp_eff_send_mss_netif>
 80168da:	4603      	mov	r3, r0
 80168dc:	461a      	mov	r2, r3
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	2201      	movs	r2, #1
 80168e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	683a      	ldr	r2, [r7, #0]
 80168ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80168f2:	2102      	movs	r1, #2
 80168f4:	68f8      	ldr	r0, [r7, #12]
 80168f6:	f004 fbdd 	bl	801b0b4 <tcp_enqueue_flags>
 80168fa:	4603      	mov	r3, r0
 80168fc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80168fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d136      	bne.n	8016974 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2202      	movs	r2, #2
 801690a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801690c:	8b7b      	ldrh	r3, [r7, #26]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d021      	beq.n	8016956 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016912:	4b20      	ldr	r3, [pc, #128]	@ (8016994 <tcp_connect+0x224>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	68fa      	ldr	r2, [r7, #12]
 8016918:	429a      	cmp	r2, r3
 801691a:	d105      	bne.n	8016928 <tcp_connect+0x1b8>
 801691c:	4b1d      	ldr	r3, [pc, #116]	@ (8016994 <tcp_connect+0x224>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	68db      	ldr	r3, [r3, #12]
 8016922:	4a1c      	ldr	r2, [pc, #112]	@ (8016994 <tcp_connect+0x224>)
 8016924:	6013      	str	r3, [r2, #0]
 8016926:	e013      	b.n	8016950 <tcp_connect+0x1e0>
 8016928:	4b1a      	ldr	r3, [pc, #104]	@ (8016994 <tcp_connect+0x224>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	623b      	str	r3, [r7, #32]
 801692e:	e00c      	b.n	801694a <tcp_connect+0x1da>
 8016930:	6a3b      	ldr	r3, [r7, #32]
 8016932:	68db      	ldr	r3, [r3, #12]
 8016934:	68fa      	ldr	r2, [r7, #12]
 8016936:	429a      	cmp	r2, r3
 8016938:	d104      	bne.n	8016944 <tcp_connect+0x1d4>
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	68da      	ldr	r2, [r3, #12]
 801693e:	6a3b      	ldr	r3, [r7, #32]
 8016940:	60da      	str	r2, [r3, #12]
 8016942:	e005      	b.n	8016950 <tcp_connect+0x1e0>
 8016944:	6a3b      	ldr	r3, [r7, #32]
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	623b      	str	r3, [r7, #32]
 801694a:	6a3b      	ldr	r3, [r7, #32]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d1ef      	bne.n	8016930 <tcp_connect+0x1c0>
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	2200      	movs	r2, #0
 8016954:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8016956:	4b10      	ldr	r3, [pc, #64]	@ (8016998 <tcp_connect+0x228>)
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	60da      	str	r2, [r3, #12]
 801695e:	4a0e      	ldr	r2, [pc, #56]	@ (8016998 <tcp_connect+0x228>)
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	6013      	str	r3, [r2, #0]
 8016964:	f005 fc3c 	bl	801c1e0 <tcp_timer_needed>
 8016968:	4b0c      	ldr	r3, [pc, #48]	@ (801699c <tcp_connect+0x22c>)
 801696a:	2201      	movs	r2, #1
 801696c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801696e:	68f8      	ldr	r0, [r7, #12]
 8016970:	f004 fca0 	bl	801b2b4 <tcp_output>
  }
  return ret;
 8016974:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8016978:	4618      	mov	r0, r3
 801697a:	3728      	adds	r7, #40	@ 0x28
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}
 8016980:	080246e0 	.word	0x080246e0
 8016984:	080249bc 	.word	0x080249bc
 8016988:	08024724 	.word	0x08024724
 801698c:	080249d8 	.word	0x080249d8
 8016990:	080249f4 	.word	0x080249f4
 8016994:	2002d45c 	.word	0x2002d45c
 8016998:	2002d464 	.word	0x2002d464
 801699c:	2002d46c 	.word	0x2002d46c

080169a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80169a0:	b5b0      	push	{r4, r5, r7, lr}
 80169a2:	b090      	sub	sp, #64	@ 0x40
 80169a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80169a6:	2300      	movs	r3, #0
 80169a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80169ac:	4b95      	ldr	r3, [pc, #596]	@ (8016c04 <tcp_slowtmr+0x264>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	3301      	adds	r3, #1
 80169b2:	4a94      	ldr	r2, [pc, #592]	@ (8016c04 <tcp_slowtmr+0x264>)
 80169b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80169b6:	4b94      	ldr	r3, [pc, #592]	@ (8016c08 <tcp_slowtmr+0x268>)
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	3301      	adds	r3, #1
 80169bc:	b2da      	uxtb	r2, r3
 80169be:	4b92      	ldr	r3, [pc, #584]	@ (8016c08 <tcp_slowtmr+0x268>)
 80169c0:	701a      	strb	r2, [r3, #0]
 80169c2:	e000      	b.n	80169c6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80169c4:	bf00      	nop
  prev = NULL;
 80169c6:	2300      	movs	r3, #0
 80169c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80169ca:	4b90      	ldr	r3, [pc, #576]	@ (8016c0c <tcp_slowtmr+0x26c>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80169d0:	e29d      	b.n	8016f0e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80169d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169d4:	7d1b      	ldrb	r3, [r3, #20]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d106      	bne.n	80169e8 <tcp_slowtmr+0x48>
 80169da:	4b8d      	ldr	r3, [pc, #564]	@ (8016c10 <tcp_slowtmr+0x270>)
 80169dc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80169e0:	498c      	ldr	r1, [pc, #560]	@ (8016c14 <tcp_slowtmr+0x274>)
 80169e2:	488d      	ldr	r0, [pc, #564]	@ (8016c18 <tcp_slowtmr+0x278>)
 80169e4:	f00a fdcc 	bl	8021580 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80169e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169ea:	7d1b      	ldrb	r3, [r3, #20]
 80169ec:	2b01      	cmp	r3, #1
 80169ee:	d106      	bne.n	80169fe <tcp_slowtmr+0x5e>
 80169f0:	4b87      	ldr	r3, [pc, #540]	@ (8016c10 <tcp_slowtmr+0x270>)
 80169f2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80169f6:	4989      	ldr	r1, [pc, #548]	@ (8016c1c <tcp_slowtmr+0x27c>)
 80169f8:	4887      	ldr	r0, [pc, #540]	@ (8016c18 <tcp_slowtmr+0x278>)
 80169fa:	f00a fdc1 	bl	8021580 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80169fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a00:	7d1b      	ldrb	r3, [r3, #20]
 8016a02:	2b0a      	cmp	r3, #10
 8016a04:	d106      	bne.n	8016a14 <tcp_slowtmr+0x74>
 8016a06:	4b82      	ldr	r3, [pc, #520]	@ (8016c10 <tcp_slowtmr+0x270>)
 8016a08:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8016a0c:	4984      	ldr	r1, [pc, #528]	@ (8016c20 <tcp_slowtmr+0x280>)
 8016a0e:	4882      	ldr	r0, [pc, #520]	@ (8016c18 <tcp_slowtmr+0x278>)
 8016a10:	f00a fdb6 	bl	8021580 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a16:	7f9a      	ldrb	r2, [r3, #30]
 8016a18:	4b7b      	ldr	r3, [pc, #492]	@ (8016c08 <tcp_slowtmr+0x268>)
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d105      	bne.n	8016a2c <tcp_slowtmr+0x8c>
      prev = pcb;
 8016a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a22:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a26:	68db      	ldr	r3, [r3, #12]
 8016a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8016a2a:	e270      	b.n	8016f0e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8016a2c:	4b76      	ldr	r3, [pc, #472]	@ (8016c08 <tcp_slowtmr+0x268>)
 8016a2e:	781a      	ldrb	r2, [r3, #0]
 8016a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a32:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8016a34:	2300      	movs	r3, #0
 8016a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a42:	7d1b      	ldrb	r3, [r3, #20]
 8016a44:	2b02      	cmp	r3, #2
 8016a46:	d10a      	bne.n	8016a5e <tcp_slowtmr+0xbe>
 8016a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016a4e:	2b05      	cmp	r3, #5
 8016a50:	d905      	bls.n	8016a5e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8016a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a56:	3301      	adds	r3, #1
 8016a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8016a5c:	e11e      	b.n	8016c9c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016a64:	2b0b      	cmp	r3, #11
 8016a66:	d905      	bls.n	8016a74 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8016a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016a72:	e113      	b.n	8016c9c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8016a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a76:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d075      	beq.n	8016b6a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d006      	beq.n	8016a94 <tcp_slowtmr+0xf4>
 8016a86:	4b62      	ldr	r3, [pc, #392]	@ (8016c10 <tcp_slowtmr+0x270>)
 8016a88:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8016a8c:	4965      	ldr	r1, [pc, #404]	@ (8016c24 <tcp_slowtmr+0x284>)
 8016a8e:	4862      	ldr	r0, [pc, #392]	@ (8016c18 <tcp_slowtmr+0x278>)
 8016a90:	f00a fd76 	bl	8021580 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d106      	bne.n	8016aaa <tcp_slowtmr+0x10a>
 8016a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8016c10 <tcp_slowtmr+0x270>)
 8016a9e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8016aa2:	4961      	ldr	r1, [pc, #388]	@ (8016c28 <tcp_slowtmr+0x288>)
 8016aa4:	485c      	ldr	r0, [pc, #368]	@ (8016c18 <tcp_slowtmr+0x278>)
 8016aa6:	f00a fd6b 	bl	8021580 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aac:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016ab0:	2b0b      	cmp	r3, #11
 8016ab2:	d905      	bls.n	8016ac0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8016ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016ab8:	3301      	adds	r3, #1
 8016aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016abe:	e0ed      	b.n	8016c9c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ac2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016ac6:	3b01      	subs	r3, #1
 8016ac8:	4a58      	ldr	r2, [pc, #352]	@ (8016c2c <tcp_slowtmr+0x28c>)
 8016aca:	5cd3      	ldrb	r3, [r2, r3]
 8016acc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ad0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016ad4:	7c7a      	ldrb	r2, [r7, #17]
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d907      	bls.n	8016aea <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8016ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016adc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	b2da      	uxtb	r2, r3
 8016ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ae6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8016aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016af0:	7c7a      	ldrb	r2, [r7, #17]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	f200 80d2 	bhi.w	8016c9c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8016af8:	2301      	movs	r3, #1
 8016afa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8016afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d108      	bne.n	8016b18 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016b06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016b08:	f005 fa9c 	bl	801c044 <tcp_zero_window_probe>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d014      	beq.n	8016b3c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8016b12:	2300      	movs	r3, #0
 8016b14:	623b      	str	r3, [r7, #32]
 8016b16:	e011      	b.n	8016b3c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016b1e:	4619      	mov	r1, r3
 8016b20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016b22:	f004 f921 	bl	801ad68 <tcp_split_unsent_seg>
 8016b26:	4603      	mov	r3, r0
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d107      	bne.n	8016b3c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8016b2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016b2e:	f004 fbc1 	bl	801b2b4 <tcp_output>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d101      	bne.n	8016b3c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8016b3c:	6a3b      	ldr	r3, [r7, #32]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	f000 80ac 	beq.w	8016c9c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8016b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b46:	2200      	movs	r2, #0
 8016b48:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b4e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016b52:	2b06      	cmp	r3, #6
 8016b54:	f200 80a2 	bhi.w	8016c9c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8016b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b5a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016b5e:	3301      	adds	r3, #1
 8016b60:	b2da      	uxtb	r2, r3
 8016b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b64:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8016b68:	e098      	b.n	8016c9c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	db0f      	blt.n	8016b94 <tcp_slowtmr+0x1f4>
 8016b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016b7a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016b7e:	4293      	cmp	r3, r2
 8016b80:	d008      	beq.n	8016b94 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8016b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	b21a      	sxth	r2, r3
 8016b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b92:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8016b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8016b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	db7b      	blt.n	8016c9c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016ba4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016ba6:	f004 fe85 	bl	801b8b4 <tcp_rexmit_rto_prepare>
 8016baa:	4603      	mov	r3, r0
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d007      	beq.n	8016bc0 <tcp_slowtmr+0x220>
 8016bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d171      	bne.n	8016c9c <tcp_slowtmr+0x2fc>
 8016bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d06d      	beq.n	8016c9c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8016bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bc2:	7d1b      	ldrb	r3, [r3, #20]
 8016bc4:	2b02      	cmp	r3, #2
 8016bc6:	d03a      	beq.n	8016c3e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016bce:	2b0c      	cmp	r3, #12
 8016bd0:	bf28      	it	cs
 8016bd2:	230c      	movcs	r3, #12
 8016bd4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016bdc:	10db      	asrs	r3, r3, #3
 8016bde:	b21b      	sxth	r3, r3
 8016be0:	461a      	mov	r2, r3
 8016be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016be4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016be8:	4413      	add	r3, r2
 8016bea:	7efa      	ldrb	r2, [r7, #27]
 8016bec:	4910      	ldr	r1, [pc, #64]	@ (8016c30 <tcp_slowtmr+0x290>)
 8016bee:	5c8a      	ldrb	r2, [r1, r2]
 8016bf0:	4093      	lsls	r3, r2
 8016bf2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8016bfa:	4293      	cmp	r3, r2
 8016bfc:	dc1a      	bgt.n	8016c34 <tcp_slowtmr+0x294>
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	b21a      	sxth	r2, r3
 8016c02:	e019      	b.n	8016c38 <tcp_slowtmr+0x298>
 8016c04:	2002d458 	.word	0x2002d458
 8016c08:	2002d46e 	.word	0x2002d46e
 8016c0c:	2002d464 	.word	0x2002d464
 8016c10:	080246e0 	.word	0x080246e0
 8016c14:	08024a24 	.word	0x08024a24
 8016c18:	08024724 	.word	0x08024724
 8016c1c:	08024a50 	.word	0x08024a50
 8016c20:	08024a7c 	.word	0x08024a7c
 8016c24:	08024aac 	.word	0x08024aac
 8016c28:	08024ae0 	.word	0x08024ae0
 8016c2c:	080273e0 	.word	0x080273e0
 8016c30:	080273d0 	.word	0x080273d0
 8016c34:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8016c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c40:	2200      	movs	r2, #0
 8016c42:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016c50:	4293      	cmp	r3, r2
 8016c52:	bf28      	it	cs
 8016c54:	4613      	movcs	r3, r2
 8016c56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016c58:	8a7b      	ldrh	r3, [r7, #18]
 8016c5a:	085b      	lsrs	r3, r3, #1
 8016c5c:	b29a      	uxth	r2, r3
 8016c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c6e:	005b      	lsls	r3, r3, #1
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d206      	bcs.n	8016c84 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016c7a:	005b      	lsls	r3, r3, #1
 8016c7c:	b29a      	uxth	r2, r3
 8016c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8016c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c86:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8016c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8016c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c90:	2200      	movs	r2, #0
 8016c92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8016c96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016c98:	f004 fe86 	bl	801b9a8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8016c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c9e:	7d1b      	ldrb	r3, [r3, #20]
 8016ca0:	2b06      	cmp	r3, #6
 8016ca2:	d111      	bne.n	8016cc8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8016ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ca6:	8b5b      	ldrh	r3, [r3, #26]
 8016ca8:	f003 0310 	and.w	r3, r3, #16
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d00b      	beq.n	8016cc8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016cb0:	4b9c      	ldr	r3, [pc, #624]	@ (8016f24 <tcp_slowtmr+0x584>)
 8016cb2:	681a      	ldr	r2, [r3, #0]
 8016cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cb6:	6a1b      	ldr	r3, [r3, #32]
 8016cb8:	1ad3      	subs	r3, r2, r3
 8016cba:	2b28      	cmp	r3, #40	@ 0x28
 8016cbc:	d904      	bls.n	8016cc8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8016cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cca:	7a5b      	ldrb	r3, [r3, #9]
 8016ccc:	f003 0308 	and.w	r3, r3, #8
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d04a      	beq.n	8016d6a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8016cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cd6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016cd8:	2b04      	cmp	r3, #4
 8016cda:	d003      	beq.n	8016ce4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8016cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cde:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016ce0:	2b07      	cmp	r3, #7
 8016ce2:	d142      	bne.n	8016d6a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8016f24 <tcp_slowtmr+0x584>)
 8016ce6:	681a      	ldr	r2, [r3, #0]
 8016ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cea:	6a1b      	ldr	r3, [r3, #32]
 8016cec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cf0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8016cf4:	4b8c      	ldr	r3, [pc, #560]	@ (8016f28 <tcp_slowtmr+0x588>)
 8016cf6:	440b      	add	r3, r1
 8016cf8:	498c      	ldr	r1, [pc, #560]	@ (8016f2c <tcp_slowtmr+0x58c>)
 8016cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8016cfe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016d00:	429a      	cmp	r2, r3
 8016d02:	d90a      	bls.n	8016d1a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8016d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016d08:	3301      	adds	r3, #1
 8016d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8016d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016d12:	3301      	adds	r3, #1
 8016d14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016d18:	e027      	b.n	8016d6a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016d1a:	4b82      	ldr	r3, [pc, #520]	@ (8016f24 <tcp_slowtmr+0x584>)
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d20:	6a1b      	ldr	r3, [r3, #32]
 8016d22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d26:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8016d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d2c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016d30:	4618      	mov	r0, r3
 8016d32:	4b7f      	ldr	r3, [pc, #508]	@ (8016f30 <tcp_slowtmr+0x590>)
 8016d34:	fb00 f303 	mul.w	r3, r0, r3
 8016d38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016d3a:	497c      	ldr	r1, [pc, #496]	@ (8016f2c <tcp_slowtmr+0x58c>)
 8016d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8016d40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d911      	bls.n	8016d6a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8016d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016d48:	f005 f93c 	bl	801bfc4 <tcp_keepalive>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8016d52:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d107      	bne.n	8016d6a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8016d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d5c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016d60:	3301      	adds	r3, #1
 8016d62:	b2da      	uxtb	r2, r3
 8016d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d66:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8016d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d011      	beq.n	8016d96 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016d72:	4b6c      	ldr	r3, [pc, #432]	@ (8016f24 <tcp_slowtmr+0x584>)
 8016d74:	681a      	ldr	r2, [r3, #0]
 8016d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d78:	6a1b      	ldr	r3, [r3, #32]
 8016d7a:	1ad2      	subs	r2, r2, r3
 8016d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016d82:	4619      	mov	r1, r3
 8016d84:	460b      	mov	r3, r1
 8016d86:	005b      	lsls	r3, r3, #1
 8016d88:	440b      	add	r3, r1
 8016d8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016d8c:	429a      	cmp	r2, r3
 8016d8e:	d302      	bcc.n	8016d96 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8016d90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016d92:	f000 fedb 	bl	8017b4c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8016d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d98:	7d1b      	ldrb	r3, [r3, #20]
 8016d9a:	2b03      	cmp	r3, #3
 8016d9c:	d10b      	bne.n	8016db6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016d9e:	4b61      	ldr	r3, [pc, #388]	@ (8016f24 <tcp_slowtmr+0x584>)
 8016da0:	681a      	ldr	r2, [r3, #0]
 8016da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016da4:	6a1b      	ldr	r3, [r3, #32]
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	2b28      	cmp	r3, #40	@ 0x28
 8016daa:	d904      	bls.n	8016db6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8016dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016db0:	3301      	adds	r3, #1
 8016db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8016db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016db8:	7d1b      	ldrb	r3, [r3, #20]
 8016dba:	2b09      	cmp	r3, #9
 8016dbc:	d10b      	bne.n	8016dd6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016dbe:	4b59      	ldr	r3, [pc, #356]	@ (8016f24 <tcp_slowtmr+0x584>)
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dc4:	6a1b      	ldr	r3, [r3, #32]
 8016dc6:	1ad3      	subs	r3, r2, r3
 8016dc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8016dca:	d904      	bls.n	8016dd6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8016dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016dd0:	3301      	adds	r3, #1
 8016dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8016dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d060      	beq.n	8016ea0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8016dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016de4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8016de6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016de8:	f000 fcf6 	bl	80177d8 <tcp_pcb_purge>
      if (prev != NULL) {
 8016dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d010      	beq.n	8016e14 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016df2:	4b50      	ldr	r3, [pc, #320]	@ (8016f34 <tcp_slowtmr+0x594>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	d106      	bne.n	8016e0a <tcp_slowtmr+0x46a>
 8016dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8016f38 <tcp_slowtmr+0x598>)
 8016dfe:	f240 526d 	movw	r2, #1389	@ 0x56d
 8016e02:	494e      	ldr	r1, [pc, #312]	@ (8016f3c <tcp_slowtmr+0x59c>)
 8016e04:	484e      	ldr	r0, [pc, #312]	@ (8016f40 <tcp_slowtmr+0x5a0>)
 8016e06:	f00a fbbb 	bl	8021580 <iprintf>
        prev->next = pcb->next;
 8016e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e0c:	68da      	ldr	r2, [r3, #12]
 8016e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e10:	60da      	str	r2, [r3, #12]
 8016e12:	e00f      	b.n	8016e34 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016e14:	4b47      	ldr	r3, [pc, #284]	@ (8016f34 <tcp_slowtmr+0x594>)
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d006      	beq.n	8016e2c <tcp_slowtmr+0x48c>
 8016e1e:	4b46      	ldr	r3, [pc, #280]	@ (8016f38 <tcp_slowtmr+0x598>)
 8016e20:	f240 5271 	movw	r2, #1393	@ 0x571
 8016e24:	4947      	ldr	r1, [pc, #284]	@ (8016f44 <tcp_slowtmr+0x5a4>)
 8016e26:	4846      	ldr	r0, [pc, #280]	@ (8016f40 <tcp_slowtmr+0x5a0>)
 8016e28:	f00a fbaa 	bl	8021580 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e2e:	68db      	ldr	r3, [r3, #12]
 8016e30:	4a40      	ldr	r2, [pc, #256]	@ (8016f34 <tcp_slowtmr+0x594>)
 8016e32:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8016e34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d013      	beq.n	8016e64 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e3e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8016e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e42:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016e44:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8016e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e48:	3304      	adds	r3, #4
 8016e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e4c:	8ad2      	ldrh	r2, [r2, #22]
 8016e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016e50:	8b09      	ldrh	r1, [r1, #24]
 8016e52:	9102      	str	r1, [sp, #8]
 8016e54:	9201      	str	r2, [sp, #4]
 8016e56:	9300      	str	r3, [sp, #0]
 8016e58:	462b      	mov	r3, r5
 8016e5a:	4622      	mov	r2, r4
 8016e5c:	4601      	mov	r1, r0
 8016e5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016e60:	f004 fffc 	bl	801be5c <tcp_rst>
      err_arg = pcb->callback_arg;
 8016e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e66:	691b      	ldr	r3, [r3, #16]
 8016e68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e6c:	7d1b      	ldrb	r3, [r3, #20]
 8016e6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016e7a:	6838      	ldr	r0, [r7, #0]
 8016e7c:	f7fe ffa0 	bl	8015dc0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8016e80:	4b31      	ldr	r3, [pc, #196]	@ (8016f48 <tcp_slowtmr+0x5a8>)
 8016e82:	2200      	movs	r2, #0
 8016e84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d004      	beq.n	8016e96 <tcp_slowtmr+0x4f6>
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	f06f 010c 	mvn.w	r1, #12
 8016e92:	68b8      	ldr	r0, [r7, #8]
 8016e94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016e96:	4b2c      	ldr	r3, [pc, #176]	@ (8016f48 <tcp_slowtmr+0x5a8>)
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d037      	beq.n	8016f0e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8016e9e:	e592      	b.n	80169c6 <tcp_slowtmr+0x26>
      prev = pcb;
 8016ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ea6:	68db      	ldr	r3, [r3, #12]
 8016ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8016eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eac:	7f1b      	ldrb	r3, [r3, #28]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	b2da      	uxtb	r2, r3
 8016eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb8:	7f1a      	ldrb	r2, [r3, #28]
 8016eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ebc:	7f5b      	ldrb	r3, [r3, #29]
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d325      	bcc.n	8016f0e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8016ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8016ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8016f48 <tcp_slowtmr+0x5a8>)
 8016eca:	2200      	movs	r2, #0
 8016ecc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d00b      	beq.n	8016ef0 <tcp_slowtmr+0x550>
 8016ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ee0:	6912      	ldr	r2, [r2, #16]
 8016ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016ee4:	4610      	mov	r0, r2
 8016ee6:	4798      	blx	r3
 8016ee8:	4603      	mov	r3, r0
 8016eea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016eee:	e002      	b.n	8016ef6 <tcp_slowtmr+0x556>
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8016ef6:	4b14      	ldr	r3, [pc, #80]	@ (8016f48 <tcp_slowtmr+0x5a8>)
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	f47f ad62 	bne.w	80169c4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016f00:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d102      	bne.n	8016f0e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f0a:	f004 f9d3 	bl	801b2b4 <tcp_output>
  while (pcb != NULL) {
 8016f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	f47f ad5e 	bne.w	80169d2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016f16:	2300      	movs	r3, #0
 8016f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8016f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8016f4c <tcp_slowtmr+0x5ac>)
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016f20:	e069      	b.n	8016ff6 <tcp_slowtmr+0x656>
 8016f22:	bf00      	nop
 8016f24:	2002d458 	.word	0x2002d458
 8016f28:	000a4cb8 	.word	0x000a4cb8
 8016f2c:	10624dd3 	.word	0x10624dd3
 8016f30:	000124f8 	.word	0x000124f8
 8016f34:	2002d464 	.word	0x2002d464
 8016f38:	080246e0 	.word	0x080246e0
 8016f3c:	08024b18 	.word	0x08024b18
 8016f40:	08024724 	.word	0x08024724
 8016f44:	08024b44 	.word	0x08024b44
 8016f48:	2002d46c 	.word	0x2002d46c
 8016f4c:	2002d468 	.word	0x2002d468
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f52:	7d1b      	ldrb	r3, [r3, #20]
 8016f54:	2b0a      	cmp	r3, #10
 8016f56:	d006      	beq.n	8016f66 <tcp_slowtmr+0x5c6>
 8016f58:	4b2b      	ldr	r3, [pc, #172]	@ (8017008 <tcp_slowtmr+0x668>)
 8016f5a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8016f5e:	492b      	ldr	r1, [pc, #172]	@ (801700c <tcp_slowtmr+0x66c>)
 8016f60:	482b      	ldr	r0, [pc, #172]	@ (8017010 <tcp_slowtmr+0x670>)
 8016f62:	f00a fb0d 	bl	8021580 <iprintf>
    pcb_remove = 0;
 8016f66:	2300      	movs	r3, #0
 8016f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016f6c:	4b29      	ldr	r3, [pc, #164]	@ (8017014 <tcp_slowtmr+0x674>)
 8016f6e:	681a      	ldr	r2, [r3, #0]
 8016f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f72:	6a1b      	ldr	r3, [r3, #32]
 8016f74:	1ad3      	subs	r3, r2, r3
 8016f76:	2bf0      	cmp	r3, #240	@ 0xf0
 8016f78:	d904      	bls.n	8016f84 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8016f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f7e:	3301      	adds	r3, #1
 8016f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016f84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d02f      	beq.n	8016fec <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016f8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016f8e:	f000 fc23 	bl	80177d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d010      	beq.n	8016fba <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016f98:	4b1f      	ldr	r3, [pc, #124]	@ (8017018 <tcp_slowtmr+0x678>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	d106      	bne.n	8016fb0 <tcp_slowtmr+0x610>
 8016fa2:	4b19      	ldr	r3, [pc, #100]	@ (8017008 <tcp_slowtmr+0x668>)
 8016fa4:	f240 52af 	movw	r2, #1455	@ 0x5af
 8016fa8:	491c      	ldr	r1, [pc, #112]	@ (801701c <tcp_slowtmr+0x67c>)
 8016faa:	4819      	ldr	r0, [pc, #100]	@ (8017010 <tcp_slowtmr+0x670>)
 8016fac:	f00a fae8 	bl	8021580 <iprintf>
        prev->next = pcb->next;
 8016fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fb2:	68da      	ldr	r2, [r3, #12]
 8016fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fb6:	60da      	str	r2, [r3, #12]
 8016fb8:	e00f      	b.n	8016fda <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016fba:	4b17      	ldr	r3, [pc, #92]	@ (8017018 <tcp_slowtmr+0x678>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d006      	beq.n	8016fd2 <tcp_slowtmr+0x632>
 8016fc4:	4b10      	ldr	r3, [pc, #64]	@ (8017008 <tcp_slowtmr+0x668>)
 8016fc6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8016fca:	4915      	ldr	r1, [pc, #84]	@ (8017020 <tcp_slowtmr+0x680>)
 8016fcc:	4810      	ldr	r0, [pc, #64]	@ (8017010 <tcp_slowtmr+0x670>)
 8016fce:	f00a fad7 	bl	8021580 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fd4:	68db      	ldr	r3, [r3, #12]
 8016fd6:	4a10      	ldr	r2, [pc, #64]	@ (8017018 <tcp_slowtmr+0x678>)
 8016fd8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fdc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fe0:	68db      	ldr	r3, [r3, #12]
 8016fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016fe4:	69f8      	ldr	r0, [r7, #28]
 8016fe6:	f7fe feeb 	bl	8015dc0 <tcp_free>
 8016fea:	e004      	b.n	8016ff6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8016fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d1a9      	bne.n	8016f50 <tcp_slowtmr+0x5b0>
    }
  }
}
 8016ffc:	bf00      	nop
 8016ffe:	bf00      	nop
 8017000:	3730      	adds	r7, #48	@ 0x30
 8017002:	46bd      	mov	sp, r7
 8017004:	bdb0      	pop	{r4, r5, r7, pc}
 8017006:	bf00      	nop
 8017008:	080246e0 	.word	0x080246e0
 801700c:	08024b70 	.word	0x08024b70
 8017010:	08024724 	.word	0x08024724
 8017014:	2002d458 	.word	0x2002d458
 8017018:	2002d468 	.word	0x2002d468
 801701c:	08024ba0 	.word	0x08024ba0
 8017020:	08024bc8 	.word	0x08024bc8

08017024 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b082      	sub	sp, #8
 8017028:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801702a:	4b2d      	ldr	r3, [pc, #180]	@ (80170e0 <tcp_fasttmr+0xbc>)
 801702c:	781b      	ldrb	r3, [r3, #0]
 801702e:	3301      	adds	r3, #1
 8017030:	b2da      	uxtb	r2, r3
 8017032:	4b2b      	ldr	r3, [pc, #172]	@ (80170e0 <tcp_fasttmr+0xbc>)
 8017034:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8017036:	4b2b      	ldr	r3, [pc, #172]	@ (80170e4 <tcp_fasttmr+0xc0>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801703c:	e048      	b.n	80170d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	7f9a      	ldrb	r2, [r3, #30]
 8017042:	4b27      	ldr	r3, [pc, #156]	@ (80170e0 <tcp_fasttmr+0xbc>)
 8017044:	781b      	ldrb	r3, [r3, #0]
 8017046:	429a      	cmp	r2, r3
 8017048:	d03f      	beq.n	80170ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801704a:	4b25      	ldr	r3, [pc, #148]	@ (80170e0 <tcp_fasttmr+0xbc>)
 801704c:	781a      	ldrb	r2, [r3, #0]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	8b5b      	ldrh	r3, [r3, #26]
 8017056:	f003 0301 	and.w	r3, r3, #1
 801705a:	2b00      	cmp	r3, #0
 801705c:	d010      	beq.n	8017080 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	8b5b      	ldrh	r3, [r3, #26]
 8017062:	f043 0302 	orr.w	r3, r3, #2
 8017066:	b29a      	uxth	r2, r3
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801706c:	6878      	ldr	r0, [r7, #4]
 801706e:	f004 f921 	bl	801b2b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	8b5b      	ldrh	r3, [r3, #26]
 8017076:	f023 0303 	bic.w	r3, r3, #3
 801707a:	b29a      	uxth	r2, r3
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	8b5b      	ldrh	r3, [r3, #26]
 8017084:	f003 0308 	and.w	r3, r3, #8
 8017088:	2b00      	cmp	r3, #0
 801708a:	d009      	beq.n	80170a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	8b5b      	ldrh	r3, [r3, #26]
 8017090:	f023 0308 	bic.w	r3, r3, #8
 8017094:	b29a      	uxth	r2, r3
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801709a:	6878      	ldr	r0, [r7, #4]
 801709c:	f7ff f824 	bl	80160e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d00a      	beq.n	80170c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80170ae:	4b0e      	ldr	r3, [pc, #56]	@ (80170e8 <tcp_fasttmr+0xc4>)
 80170b0:	2200      	movs	r2, #0
 80170b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f000 f819 	bl	80170ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80170ba:	4b0b      	ldr	r3, [pc, #44]	@ (80170e8 <tcp_fasttmr+0xc4>)
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d000      	beq.n	80170c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80170c2:	e7b8      	b.n	8017036 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	607b      	str	r3, [r7, #4]
 80170c8:	e002      	b.n	80170d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	68db      	ldr	r3, [r3, #12]
 80170ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d1b3      	bne.n	801703e <tcp_fasttmr+0x1a>
    }
  }
}
 80170d6:	bf00      	nop
 80170d8:	bf00      	nop
 80170da:	3708      	adds	r7, #8
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}
 80170e0:	2002d46e 	.word	0x2002d46e
 80170e4:	2002d464 	.word	0x2002d464
 80170e8:	2002d46c 	.word	0x2002d46c

080170ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80170ec:	b590      	push	{r4, r7, lr}
 80170ee:	b085      	sub	sp, #20
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d109      	bne.n	801710e <tcp_process_refused_data+0x22>
 80170fa:	4b37      	ldr	r3, [pc, #220]	@ (80171d8 <tcp_process_refused_data+0xec>)
 80170fc:	f240 6209 	movw	r2, #1545	@ 0x609
 8017100:	4936      	ldr	r1, [pc, #216]	@ (80171dc <tcp_process_refused_data+0xf0>)
 8017102:	4837      	ldr	r0, [pc, #220]	@ (80171e0 <tcp_process_refused_data+0xf4>)
 8017104:	f00a fa3c 	bl	8021580 <iprintf>
 8017108:	f06f 030f 	mvn.w	r3, #15
 801710c:	e060      	b.n	80171d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017112:	7b5b      	ldrb	r3, [r3, #13]
 8017114:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801711a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2200      	movs	r2, #0
 8017120:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00b      	beq.n	8017144 <tcp_process_refused_data+0x58>
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	6918      	ldr	r0, [r3, #16]
 8017136:	2300      	movs	r3, #0
 8017138:	68ba      	ldr	r2, [r7, #8]
 801713a:	6879      	ldr	r1, [r7, #4]
 801713c:	47a0      	blx	r4
 801713e:	4603      	mov	r3, r0
 8017140:	73fb      	strb	r3, [r7, #15]
 8017142:	e007      	b.n	8017154 <tcp_process_refused_data+0x68>
 8017144:	2300      	movs	r3, #0
 8017146:	68ba      	ldr	r2, [r7, #8]
 8017148:	6879      	ldr	r1, [r7, #4]
 801714a:	2000      	movs	r0, #0
 801714c:	f000 f8a4 	bl	8017298 <tcp_recv_null>
 8017150:	4603      	mov	r3, r0
 8017152:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d12a      	bne.n	80171b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801715c:	7bbb      	ldrb	r3, [r7, #14]
 801715e:	f003 0320 	and.w	r3, r3, #32
 8017162:	2b00      	cmp	r3, #0
 8017164:	d033      	beq.n	80171ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801716a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801716e:	d005      	beq.n	801717c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017174:	3301      	adds	r3, #1
 8017176:	b29a      	uxth	r2, r3
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017182:	2b00      	cmp	r3, #0
 8017184:	d00b      	beq.n	801719e <tcp_process_refused_data+0xb2>
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6918      	ldr	r0, [r3, #16]
 8017190:	2300      	movs	r3, #0
 8017192:	2200      	movs	r2, #0
 8017194:	6879      	ldr	r1, [r7, #4]
 8017196:	47a0      	blx	r4
 8017198:	4603      	mov	r3, r0
 801719a:	73fb      	strb	r3, [r7, #15]
 801719c:	e001      	b.n	80171a2 <tcp_process_refused_data+0xb6>
 801719e:	2300      	movs	r3, #0
 80171a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80171a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171a6:	f113 0f0d 	cmn.w	r3, #13
 80171aa:	d110      	bne.n	80171ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80171ac:	f06f 030c 	mvn.w	r3, #12
 80171b0:	e00e      	b.n	80171d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80171b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171b6:	f113 0f0d 	cmn.w	r3, #13
 80171ba:	d102      	bne.n	80171c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80171bc:	f06f 030c 	mvn.w	r3, #12
 80171c0:	e006      	b.n	80171d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	68ba      	ldr	r2, [r7, #8]
 80171c6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80171c8:	f06f 0304 	mvn.w	r3, #4
 80171cc:	e000      	b.n	80171d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80171ce:	2300      	movs	r3, #0
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	3714      	adds	r7, #20
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd90      	pop	{r4, r7, pc}
 80171d8:	080246e0 	.word	0x080246e0
 80171dc:	08024bf0 	.word	0x08024bf0
 80171e0:	08024724 	.word	0x08024724

080171e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80171ec:	e007      	b.n	80171fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f000 f80a 	bl	801720e <tcp_seg_free>
    seg = next;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d1f4      	bne.n	80171ee <tcp_segs_free+0xa>
  }
}
 8017204:	bf00      	nop
 8017206:	bf00      	nop
 8017208:	3710      	adds	r7, #16
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}

0801720e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801720e:	b580      	push	{r7, lr}
 8017210:	b082      	sub	sp, #8
 8017212:	af00      	add	r7, sp, #0
 8017214:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d00c      	beq.n	8017236 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d004      	beq.n	801722e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	685b      	ldr	r3, [r3, #4]
 8017228:	4618      	mov	r0, r3
 801722a:	f7fe f963 	bl	80154f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801722e:	6879      	ldr	r1, [r7, #4]
 8017230:	2003      	movs	r0, #3
 8017232:	f7fd f979 	bl	8014528 <memp_free>
  }
}
 8017236:	bf00      	nop
 8017238:	3708      	adds	r7, #8
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
	...

08017240 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b084      	sub	sp, #16
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d106      	bne.n	801725c <tcp_seg_copy+0x1c>
 801724e:	4b0f      	ldr	r3, [pc, #60]	@ (801728c <tcp_seg_copy+0x4c>)
 8017250:	f240 6282 	movw	r2, #1666	@ 0x682
 8017254:	490e      	ldr	r1, [pc, #56]	@ (8017290 <tcp_seg_copy+0x50>)
 8017256:	480f      	ldr	r0, [pc, #60]	@ (8017294 <tcp_seg_copy+0x54>)
 8017258:	f00a f992 	bl	8021580 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801725c:	2003      	movs	r0, #3
 801725e:	f7fd f8e7 	bl	8014430 <memp_malloc>
 8017262:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d101      	bne.n	801726e <tcp_seg_copy+0x2e>
    return NULL;
 801726a:	2300      	movs	r3, #0
 801726c:	e00a      	b.n	8017284 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801726e:	2214      	movs	r2, #20
 8017270:	6879      	ldr	r1, [r7, #4]
 8017272:	68f8      	ldr	r0, [r7, #12]
 8017274:	f00a fb59 	bl	802192a <memcpy>
  pbuf_ref(cseg->p);
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	4618      	mov	r0, r3
 801727e:	f7fe f9f7 	bl	8015670 <pbuf_ref>
  return cseg;
 8017282:	68fb      	ldr	r3, [r7, #12]
}
 8017284:	4618      	mov	r0, r3
 8017286:	3710      	adds	r7, #16
 8017288:	46bd      	mov	sp, r7
 801728a:	bd80      	pop	{r7, pc}
 801728c:	080246e0 	.word	0x080246e0
 8017290:	08024c34 	.word	0x08024c34
 8017294:	08024724 	.word	0x08024724

08017298 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b084      	sub	sp, #16
 801729c:	af00      	add	r7, sp, #0
 801729e:	60f8      	str	r0, [r7, #12]
 80172a0:	60b9      	str	r1, [r7, #8]
 80172a2:	607a      	str	r2, [r7, #4]
 80172a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d109      	bne.n	80172c0 <tcp_recv_null+0x28>
 80172ac:	4b12      	ldr	r3, [pc, #72]	@ (80172f8 <tcp_recv_null+0x60>)
 80172ae:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80172b2:	4912      	ldr	r1, [pc, #72]	@ (80172fc <tcp_recv_null+0x64>)
 80172b4:	4812      	ldr	r0, [pc, #72]	@ (8017300 <tcp_recv_null+0x68>)
 80172b6:	f00a f963 	bl	8021580 <iprintf>
 80172ba:	f06f 030f 	mvn.w	r3, #15
 80172be:	e016      	b.n	80172ee <tcp_recv_null+0x56>

  if (p != NULL) {
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d009      	beq.n	80172da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	891b      	ldrh	r3, [r3, #8]
 80172ca:	4619      	mov	r1, r3
 80172cc:	68b8      	ldr	r0, [r7, #8]
 80172ce:	f7ff f9b9 	bl	8016644 <tcp_recved>
    pbuf_free(p);
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7fe f90e 	bl	80154f4 <pbuf_free>
 80172d8:	e008      	b.n	80172ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80172da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d104      	bne.n	80172ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80172e2:	68b8      	ldr	r0, [r7, #8]
 80172e4:	f7fe ff6a 	bl	80161bc <tcp_close>
 80172e8:	4603      	mov	r3, r0
 80172ea:	e000      	b.n	80172ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80172ec:	2300      	movs	r3, #0
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3710      	adds	r7, #16
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop
 80172f8:	080246e0 	.word	0x080246e0
 80172fc:	08024c50 	.word	0x08024c50
 8017300:	08024724 	.word	0x08024724

08017304 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b086      	sub	sp, #24
 8017308:	af00      	add	r7, sp, #0
 801730a:	4603      	mov	r3, r0
 801730c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801730e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017312:	2b00      	cmp	r3, #0
 8017314:	db01      	blt.n	801731a <tcp_kill_prio+0x16>
 8017316:	79fb      	ldrb	r3, [r7, #7]
 8017318:	e000      	b.n	801731c <tcp_kill_prio+0x18>
 801731a:	237f      	movs	r3, #127	@ 0x7f
 801731c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801731e:	7afb      	ldrb	r3, [r7, #11]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d034      	beq.n	801738e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017324:	7afb      	ldrb	r3, [r7, #11]
 8017326:	3b01      	subs	r3, #1
 8017328:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801732a:	2300      	movs	r3, #0
 801732c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801732e:	2300      	movs	r3, #0
 8017330:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017332:	4b19      	ldr	r3, [pc, #100]	@ (8017398 <tcp_kill_prio+0x94>)
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	617b      	str	r3, [r7, #20]
 8017338:	e01f      	b.n	801737a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801733a:	697b      	ldr	r3, [r7, #20]
 801733c:	7d5b      	ldrb	r3, [r3, #21]
 801733e:	7afa      	ldrb	r2, [r7, #11]
 8017340:	429a      	cmp	r2, r3
 8017342:	d80c      	bhi.n	801735e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017348:	7afa      	ldrb	r2, [r7, #11]
 801734a:	429a      	cmp	r2, r3
 801734c:	d112      	bne.n	8017374 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801734e:	4b13      	ldr	r3, [pc, #76]	@ (801739c <tcp_kill_prio+0x98>)
 8017350:	681a      	ldr	r2, [r3, #0]
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	6a1b      	ldr	r3, [r3, #32]
 8017356:	1ad3      	subs	r3, r2, r3
 8017358:	68fa      	ldr	r2, [r7, #12]
 801735a:	429a      	cmp	r2, r3
 801735c:	d80a      	bhi.n	8017374 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801735e:	4b0f      	ldr	r3, [pc, #60]	@ (801739c <tcp_kill_prio+0x98>)
 8017360:	681a      	ldr	r2, [r3, #0]
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	6a1b      	ldr	r3, [r3, #32]
 8017366:	1ad3      	subs	r3, r2, r3
 8017368:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801736e:	697b      	ldr	r3, [r7, #20]
 8017370:	7d5b      	ldrb	r3, [r3, #21]
 8017372:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	68db      	ldr	r3, [r3, #12]
 8017378:	617b      	str	r3, [r7, #20]
 801737a:	697b      	ldr	r3, [r7, #20]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d1dc      	bne.n	801733a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017380:	693b      	ldr	r3, [r7, #16]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d004      	beq.n	8017390 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017386:	6938      	ldr	r0, [r7, #16]
 8017388:	f7ff f85e 	bl	8016448 <tcp_abort>
 801738c:	e000      	b.n	8017390 <tcp_kill_prio+0x8c>
    return;
 801738e:	bf00      	nop
  }
}
 8017390:	3718      	adds	r7, #24
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}
 8017396:	bf00      	nop
 8017398:	2002d464 	.word	0x2002d464
 801739c:	2002d458 	.word	0x2002d458

080173a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b086      	sub	sp, #24
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	4603      	mov	r3, r0
 80173a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80173aa:	79fb      	ldrb	r3, [r7, #7]
 80173ac:	2b08      	cmp	r3, #8
 80173ae:	d009      	beq.n	80173c4 <tcp_kill_state+0x24>
 80173b0:	79fb      	ldrb	r3, [r7, #7]
 80173b2:	2b09      	cmp	r3, #9
 80173b4:	d006      	beq.n	80173c4 <tcp_kill_state+0x24>
 80173b6:	4b1a      	ldr	r3, [pc, #104]	@ (8017420 <tcp_kill_state+0x80>)
 80173b8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80173bc:	4919      	ldr	r1, [pc, #100]	@ (8017424 <tcp_kill_state+0x84>)
 80173be:	481a      	ldr	r0, [pc, #104]	@ (8017428 <tcp_kill_state+0x88>)
 80173c0:	f00a f8de 	bl	8021580 <iprintf>

  inactivity = 0;
 80173c4:	2300      	movs	r3, #0
 80173c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80173c8:	2300      	movs	r3, #0
 80173ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80173cc:	4b17      	ldr	r3, [pc, #92]	@ (801742c <tcp_kill_state+0x8c>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	617b      	str	r3, [r7, #20]
 80173d2:	e017      	b.n	8017404 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	7d1b      	ldrb	r3, [r3, #20]
 80173d8:	79fa      	ldrb	r2, [r7, #7]
 80173da:	429a      	cmp	r2, r3
 80173dc:	d10f      	bne.n	80173fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80173de:	4b14      	ldr	r3, [pc, #80]	@ (8017430 <tcp_kill_state+0x90>)
 80173e0:	681a      	ldr	r2, [r3, #0]
 80173e2:	697b      	ldr	r3, [r7, #20]
 80173e4:	6a1b      	ldr	r3, [r3, #32]
 80173e6:	1ad3      	subs	r3, r2, r3
 80173e8:	68fa      	ldr	r2, [r7, #12]
 80173ea:	429a      	cmp	r2, r3
 80173ec:	d807      	bhi.n	80173fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80173ee:	4b10      	ldr	r3, [pc, #64]	@ (8017430 <tcp_kill_state+0x90>)
 80173f0:	681a      	ldr	r2, [r3, #0]
 80173f2:	697b      	ldr	r3, [r7, #20]
 80173f4:	6a1b      	ldr	r3, [r3, #32]
 80173f6:	1ad3      	subs	r3, r2, r3
 80173f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80173fe:	697b      	ldr	r3, [r7, #20]
 8017400:	68db      	ldr	r3, [r3, #12]
 8017402:	617b      	str	r3, [r7, #20]
 8017404:	697b      	ldr	r3, [r7, #20]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d1e4      	bne.n	80173d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801740a:	693b      	ldr	r3, [r7, #16]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d003      	beq.n	8017418 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017410:	2100      	movs	r1, #0
 8017412:	6938      	ldr	r0, [r7, #16]
 8017414:	f7fe ff5a 	bl	80162cc <tcp_abandon>
  }
}
 8017418:	bf00      	nop
 801741a:	3718      	adds	r7, #24
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}
 8017420:	080246e0 	.word	0x080246e0
 8017424:	08024c6c 	.word	0x08024c6c
 8017428:	08024724 	.word	0x08024724
 801742c:	2002d464 	.word	0x2002d464
 8017430:	2002d458 	.word	0x2002d458

08017434 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b084      	sub	sp, #16
 8017438:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801743a:	2300      	movs	r3, #0
 801743c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801743e:	2300      	movs	r3, #0
 8017440:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017442:	4b12      	ldr	r3, [pc, #72]	@ (801748c <tcp_kill_timewait+0x58>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	60fb      	str	r3, [r7, #12]
 8017448:	e012      	b.n	8017470 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801744a:	4b11      	ldr	r3, [pc, #68]	@ (8017490 <tcp_kill_timewait+0x5c>)
 801744c:	681a      	ldr	r2, [r3, #0]
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	6a1b      	ldr	r3, [r3, #32]
 8017452:	1ad3      	subs	r3, r2, r3
 8017454:	687a      	ldr	r2, [r7, #4]
 8017456:	429a      	cmp	r2, r3
 8017458:	d807      	bhi.n	801746a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801745a:	4b0d      	ldr	r3, [pc, #52]	@ (8017490 <tcp_kill_timewait+0x5c>)
 801745c:	681a      	ldr	r2, [r3, #0]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	6a1b      	ldr	r3, [r3, #32]
 8017462:	1ad3      	subs	r3, r2, r3
 8017464:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	68db      	ldr	r3, [r3, #12]
 801746e:	60fb      	str	r3, [r7, #12]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d1e9      	bne.n	801744a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d002      	beq.n	8017482 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801747c:	68b8      	ldr	r0, [r7, #8]
 801747e:	f7fe ffe3 	bl	8016448 <tcp_abort>
  }
}
 8017482:	bf00      	nop
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
 801748a:	bf00      	nop
 801748c:	2002d468 	.word	0x2002d468
 8017490:	2002d458 	.word	0x2002d458

08017494 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801749a:	4b10      	ldr	r3, [pc, #64]	@ (80174dc <tcp_handle_closepend+0x48>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80174a0:	e014      	b.n	80174cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	68db      	ldr	r3, [r3, #12]
 80174a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	8b5b      	ldrh	r3, [r3, #26]
 80174ac:	f003 0308 	and.w	r3, r3, #8
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d009      	beq.n	80174c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	8b5b      	ldrh	r3, [r3, #26]
 80174b8:	f023 0308 	bic.w	r3, r3, #8
 80174bc:	b29a      	uxth	r2, r3
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80174c2:	6878      	ldr	r0, [r7, #4]
 80174c4:	f7fe fe10 	bl	80160e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80174c8:	683b      	ldr	r3, [r7, #0]
 80174ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d1e7      	bne.n	80174a2 <tcp_handle_closepend+0xe>
  }
}
 80174d2:	bf00      	nop
 80174d4:	bf00      	nop
 80174d6:	3708      	adds	r7, #8
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}
 80174dc:	2002d464 	.word	0x2002d464

080174e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	4603      	mov	r3, r0
 80174e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80174ea:	2001      	movs	r0, #1
 80174ec:	f7fc ffa0 	bl	8014430 <memp_malloc>
 80174f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d14e      	bne.n	8017596 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80174f8:	f7ff ffcc 	bl	8017494 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80174fc:	f7ff ff9a 	bl	8017434 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017500:	2001      	movs	r0, #1
 8017502:	f7fc ff95 	bl	8014430 <memp_malloc>
 8017506:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d139      	bne.n	8017582 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801750e:	2009      	movs	r0, #9
 8017510:	f7ff ff46 	bl	80173a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017514:	2001      	movs	r0, #1
 8017516:	f7fc ff8b 	bl	8014430 <memp_malloc>
 801751a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d125      	bne.n	801756e <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017522:	2008      	movs	r0, #8
 8017524:	f7ff ff3c 	bl	80173a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017528:	2001      	movs	r0, #1
 801752a:	f7fc ff81 	bl	8014430 <memp_malloc>
 801752e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d111      	bne.n	801755a <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017536:	79fb      	ldrb	r3, [r7, #7]
 8017538:	4618      	mov	r0, r3
 801753a:	f7ff fee3 	bl	8017304 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801753e:	2001      	movs	r0, #1
 8017540:	f7fc ff76 	bl	8014430 <memp_malloc>
 8017544:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d006      	beq.n	801755a <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801754c:	4b36      	ldr	r3, [pc, #216]	@ (8017628 <tcp_alloc+0x148>)
 801754e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8017552:	889a      	ldrh	r2, [r3, #4]
 8017554:	3a01      	subs	r2, #1
 8017556:	b292      	uxth	r2, r2
 8017558:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d006      	beq.n	801756e <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017560:	4b31      	ldr	r3, [pc, #196]	@ (8017628 <tcp_alloc+0x148>)
 8017562:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8017566:	889a      	ldrh	r2, [r3, #4]
 8017568:	3a01      	subs	r2, #1
 801756a:	b292      	uxth	r2, r2
 801756c:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d006      	beq.n	8017582 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017574:	4b2c      	ldr	r3, [pc, #176]	@ (8017628 <tcp_alloc+0x148>)
 8017576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801757a:	889a      	ldrh	r2, [r3, #4]
 801757c:	3a01      	subs	r2, #1
 801757e:	b292      	uxth	r2, r2
 8017580:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d006      	beq.n	8017596 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017588:	4b27      	ldr	r3, [pc, #156]	@ (8017628 <tcp_alloc+0x148>)
 801758a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801758e:	889a      	ldrh	r2, [r3, #4]
 8017590:	3a01      	subs	r2, #1
 8017592:	b292      	uxth	r2, r2
 8017594:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d03f      	beq.n	801761c <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801759c:	229c      	movs	r2, #156	@ 0x9c
 801759e:	2100      	movs	r1, #0
 80175a0:	68f8      	ldr	r0, [r7, #12]
 80175a2:	f00a f94d 	bl	8021840 <memset>
    pcb->prio = prio;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	79fa      	ldrb	r2, [r7, #7]
 80175aa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80175b2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80175bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	22ff      	movs	r2, #255	@ 0xff
 80175ca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80175d2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	2206      	movs	r2, #6
 80175d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	2206      	movs	r2, #6
 80175e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80175e8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2201      	movs	r2, #1
 80175ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80175f2:	4b0e      	ldr	r3, [pc, #56]	@ (801762c <tcp_alloc+0x14c>)
 80175f4:	681a      	ldr	r2, [r3, #0]
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80175fa:	4b0d      	ldr	r3, [pc, #52]	@ (8017630 <tcp_alloc+0x150>)
 80175fc:	781a      	ldrb	r2, [r3, #0]
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017608:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	4a09      	ldr	r2, [pc, #36]	@ (8017634 <tcp_alloc+0x154>)
 8017610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	4a08      	ldr	r2, [pc, #32]	@ (8017638 <tcp_alloc+0x158>)
 8017618:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801761c:	68fb      	ldr	r3, [r7, #12]
}
 801761e:	4618      	mov	r0, r3
 8017620:	3710      	adds	r7, #16
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	2002d358 	.word	0x2002d358
 801762c:	2002d458 	.word	0x2002d458
 8017630:	2002d46e 	.word	0x2002d46e
 8017634:	08017299 	.word	0x08017299
 8017638:	006ddd00 	.word	0x006ddd00

0801763c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b084      	sub	sp, #16
 8017640:	af00      	add	r7, sp, #0
 8017642:	4603      	mov	r3, r0
 8017644:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017646:	2040      	movs	r0, #64	@ 0x40
 8017648:	f7ff ff4a 	bl	80174e0 <tcp_alloc>
 801764c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801764e:	68fb      	ldr	r3, [r7, #12]
}
 8017650:	4618      	mov	r0, r3
 8017652:	3710      	adds	r7, #16
 8017654:	46bd      	mov	sp, r7
 8017656:	bd80      	pop	{r7, pc}

08017658 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017658:	b480      	push	{r7}
 801765a:	b083      	sub	sp, #12
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
 8017660:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d002      	beq.n	801766e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	683a      	ldr	r2, [r7, #0]
 801766c:	611a      	str	r2, [r3, #16]
  }
}
 801766e:	bf00      	nop
 8017670:	370c      	adds	r7, #12
 8017672:	46bd      	mov	sp, r7
 8017674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017678:	4770      	bx	lr
	...

0801767c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d00e      	beq.n	80176aa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	7d1b      	ldrb	r3, [r3, #20]
 8017690:	2b01      	cmp	r3, #1
 8017692:	d106      	bne.n	80176a2 <tcp_recv+0x26>
 8017694:	4b07      	ldr	r3, [pc, #28]	@ (80176b4 <tcp_recv+0x38>)
 8017696:	f240 72df 	movw	r2, #2015	@ 0x7df
 801769a:	4907      	ldr	r1, [pc, #28]	@ (80176b8 <tcp_recv+0x3c>)
 801769c:	4807      	ldr	r0, [pc, #28]	@ (80176bc <tcp_recv+0x40>)
 801769e:	f009 ff6f 	bl	8021580 <iprintf>
    pcb->recv = recv;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	683a      	ldr	r2, [r7, #0]
 80176a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80176aa:	bf00      	nop
 80176ac:	3708      	adds	r7, #8
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	080246e0 	.word	0x080246e0
 80176b8:	08024c7c 	.word	0x08024c7c
 80176bc:	08024724 	.word	0x08024724

080176c0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b082      	sub	sp, #8
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
 80176c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d00e      	beq.n	80176ee <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	7d1b      	ldrb	r3, [r3, #20]
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	d106      	bne.n	80176e6 <tcp_sent+0x26>
 80176d8:	4b07      	ldr	r3, [pc, #28]	@ (80176f8 <tcp_sent+0x38>)
 80176da:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80176de:	4907      	ldr	r1, [pc, #28]	@ (80176fc <tcp_sent+0x3c>)
 80176e0:	4807      	ldr	r0, [pc, #28]	@ (8017700 <tcp_sent+0x40>)
 80176e2:	f009 ff4d 	bl	8021580 <iprintf>
    pcb->sent = sent;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	683a      	ldr	r2, [r7, #0]
 80176ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80176ee:	bf00      	nop
 80176f0:	3708      	adds	r7, #8
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bd80      	pop	{r7, pc}
 80176f6:	bf00      	nop
 80176f8:	080246e0 	.word	0x080246e0
 80176fc:	08024ca4 	.word	0x08024ca4
 8017700:	08024724 	.word	0x08024724

08017704 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d00e      	beq.n	8017732 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	7d1b      	ldrb	r3, [r3, #20]
 8017718:	2b01      	cmp	r3, #1
 801771a:	d106      	bne.n	801772a <tcp_err+0x26>
 801771c:	4b07      	ldr	r3, [pc, #28]	@ (801773c <tcp_err+0x38>)
 801771e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8017722:	4907      	ldr	r1, [pc, #28]	@ (8017740 <tcp_err+0x3c>)
 8017724:	4807      	ldr	r0, [pc, #28]	@ (8017744 <tcp_err+0x40>)
 8017726:	f009 ff2b 	bl	8021580 <iprintf>
    pcb->errf = err;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	683a      	ldr	r2, [r7, #0]
 801772e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8017732:	bf00      	nop
 8017734:	3708      	adds	r7, #8
 8017736:	46bd      	mov	sp, r7
 8017738:	bd80      	pop	{r7, pc}
 801773a:	bf00      	nop
 801773c:	080246e0 	.word	0x080246e0
 8017740:	08024ccc 	.word	0x08024ccc
 8017744:	08024724 	.word	0x08024724

08017748 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017748:	b480      	push	{r7}
 801774a:	b085      	sub	sp, #20
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
 8017750:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d008      	beq.n	801776a <tcp_accept+0x22>
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	7d1b      	ldrb	r3, [r3, #20]
 801775c:	2b01      	cmp	r3, #1
 801775e:	d104      	bne.n	801776a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	683a      	ldr	r2, [r7, #0]
 8017768:	619a      	str	r2, [r3, #24]
  }
}
 801776a:	bf00      	nop
 801776c:	3714      	adds	r7, #20
 801776e:	46bd      	mov	sp, r7
 8017770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017774:	4770      	bx	lr
	...

08017778 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b084      	sub	sp, #16
 801777c:	af00      	add	r7, sp, #0
 801777e:	60f8      	str	r0, [r7, #12]
 8017780:	60b9      	str	r1, [r7, #8]
 8017782:	4613      	mov	r3, r2
 8017784:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d107      	bne.n	801779c <tcp_poll+0x24>
 801778c:	4b0e      	ldr	r3, [pc, #56]	@ (80177c8 <tcp_poll+0x50>)
 801778e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8017792:	490e      	ldr	r1, [pc, #56]	@ (80177cc <tcp_poll+0x54>)
 8017794:	480e      	ldr	r0, [pc, #56]	@ (80177d0 <tcp_poll+0x58>)
 8017796:	f009 fef3 	bl	8021580 <iprintf>
 801779a:	e011      	b.n	80177c0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	7d1b      	ldrb	r3, [r3, #20]
 80177a0:	2b01      	cmp	r3, #1
 80177a2:	d106      	bne.n	80177b2 <tcp_poll+0x3a>
 80177a4:	4b08      	ldr	r3, [pc, #32]	@ (80177c8 <tcp_poll+0x50>)
 80177a6:	f640 023e 	movw	r2, #2110	@ 0x83e
 80177aa:	490a      	ldr	r1, [pc, #40]	@ (80177d4 <tcp_poll+0x5c>)
 80177ac:	4808      	ldr	r0, [pc, #32]	@ (80177d0 <tcp_poll+0x58>)
 80177ae:	f009 fee7 	bl	8021580 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	68ba      	ldr	r2, [r7, #8]
 80177b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	79fa      	ldrb	r2, [r7, #7]
 80177be:	775a      	strb	r2, [r3, #29]
}
 80177c0:	3710      	adds	r7, #16
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}
 80177c6:	bf00      	nop
 80177c8:	080246e0 	.word	0x080246e0
 80177cc:	08024cf4 	.word	0x08024cf4
 80177d0:	08024724 	.word	0x08024724
 80177d4:	08024d0c 	.word	0x08024d0c

080177d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d107      	bne.n	80177f6 <tcp_pcb_purge+0x1e>
 80177e6:	4b21      	ldr	r3, [pc, #132]	@ (801786c <tcp_pcb_purge+0x94>)
 80177e8:	f640 0251 	movw	r2, #2129	@ 0x851
 80177ec:	4920      	ldr	r1, [pc, #128]	@ (8017870 <tcp_pcb_purge+0x98>)
 80177ee:	4821      	ldr	r0, [pc, #132]	@ (8017874 <tcp_pcb_purge+0x9c>)
 80177f0:	f009 fec6 	bl	8021580 <iprintf>
 80177f4:	e037      	b.n	8017866 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	7d1b      	ldrb	r3, [r3, #20]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d033      	beq.n	8017866 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017802:	2b0a      	cmp	r3, #10
 8017804:	d02f      	beq.n	8017866 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801780a:	2b01      	cmp	r3, #1
 801780c:	d02b      	beq.n	8017866 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017812:	2b00      	cmp	r3, #0
 8017814:	d007      	beq.n	8017826 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801781a:	4618      	mov	r0, r3
 801781c:	f7fd fe6a 	bl	80154f4 <pbuf_free>
      pcb->refused_data = NULL;
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2200      	movs	r2, #0
 8017824:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801782a:	2b00      	cmp	r3, #0
 801782c:	d002      	beq.n	8017834 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	f000 f98c 	bl	8017b4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801783a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017840:	4618      	mov	r0, r3
 8017842:	f7ff fccf 	bl	80171e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801784a:	4618      	mov	r0, r3
 801784c:	f7ff fcca 	bl	80171e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2200      	movs	r2, #0
 8017854:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2200      	movs	r2, #0
 8017862:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017866:	3708      	adds	r7, #8
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}
 801786c:	080246e0 	.word	0x080246e0
 8017870:	08024d2c 	.word	0x08024d2c
 8017874:	08024724 	.word	0x08024724

08017878 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b084      	sub	sp, #16
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
 8017880:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d106      	bne.n	8017896 <tcp_pcb_remove+0x1e>
 8017888:	4b3e      	ldr	r3, [pc, #248]	@ (8017984 <tcp_pcb_remove+0x10c>)
 801788a:	f640 0283 	movw	r2, #2179	@ 0x883
 801788e:	493e      	ldr	r1, [pc, #248]	@ (8017988 <tcp_pcb_remove+0x110>)
 8017890:	483e      	ldr	r0, [pc, #248]	@ (801798c <tcp_pcb_remove+0x114>)
 8017892:	f009 fe75 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d106      	bne.n	80178aa <tcp_pcb_remove+0x32>
 801789c:	4b39      	ldr	r3, [pc, #228]	@ (8017984 <tcp_pcb_remove+0x10c>)
 801789e:	f640 0284 	movw	r2, #2180	@ 0x884
 80178a2:	493b      	ldr	r1, [pc, #236]	@ (8017990 <tcp_pcb_remove+0x118>)
 80178a4:	4839      	ldr	r0, [pc, #228]	@ (801798c <tcp_pcb_remove+0x114>)
 80178a6:	f009 fe6b 	bl	8021580 <iprintf>

  TCP_RMV(pcblist, pcb);
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	683a      	ldr	r2, [r7, #0]
 80178b0:	429a      	cmp	r2, r3
 80178b2:	d105      	bne.n	80178c0 <tcp_pcb_remove+0x48>
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	68da      	ldr	r2, [r3, #12]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	601a      	str	r2, [r3, #0]
 80178be:	e013      	b.n	80178e8 <tcp_pcb_remove+0x70>
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	60fb      	str	r3, [r7, #12]
 80178c6:	e00c      	b.n	80178e2 <tcp_pcb_remove+0x6a>
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	68db      	ldr	r3, [r3, #12]
 80178cc:	683a      	ldr	r2, [r7, #0]
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d104      	bne.n	80178dc <tcp_pcb_remove+0x64>
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	68da      	ldr	r2, [r3, #12]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	60da      	str	r2, [r3, #12]
 80178da:	e005      	b.n	80178e8 <tcp_pcb_remove+0x70>
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	60fb      	str	r3, [r7, #12]
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d1ef      	bne.n	80178c8 <tcp_pcb_remove+0x50>
 80178e8:	683b      	ldr	r3, [r7, #0]
 80178ea:	2200      	movs	r2, #0
 80178ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80178ee:	6838      	ldr	r0, [r7, #0]
 80178f0:	f7ff ff72 	bl	80177d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	7d1b      	ldrb	r3, [r3, #20]
 80178f8:	2b0a      	cmp	r3, #10
 80178fa:	d013      	beq.n	8017924 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017900:	2b01      	cmp	r3, #1
 8017902:	d00f      	beq.n	8017924 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	8b5b      	ldrh	r3, [r3, #26]
 8017908:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801790c:	2b00      	cmp	r3, #0
 801790e:	d009      	beq.n	8017924 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	8b5b      	ldrh	r3, [r3, #26]
 8017914:	f043 0302 	orr.w	r3, r3, #2
 8017918:	b29a      	uxth	r2, r3
 801791a:	683b      	ldr	r3, [r7, #0]
 801791c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801791e:	6838      	ldr	r0, [r7, #0]
 8017920:	f003 fcc8 	bl	801b2b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017924:	683b      	ldr	r3, [r7, #0]
 8017926:	7d1b      	ldrb	r3, [r3, #20]
 8017928:	2b01      	cmp	r3, #1
 801792a:	d020      	beq.n	801796e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017930:	2b00      	cmp	r3, #0
 8017932:	d006      	beq.n	8017942 <tcp_pcb_remove+0xca>
 8017934:	4b13      	ldr	r3, [pc, #76]	@ (8017984 <tcp_pcb_remove+0x10c>)
 8017936:	f640 0293 	movw	r2, #2195	@ 0x893
 801793a:	4916      	ldr	r1, [pc, #88]	@ (8017994 <tcp_pcb_remove+0x11c>)
 801793c:	4813      	ldr	r0, [pc, #76]	@ (801798c <tcp_pcb_remove+0x114>)
 801793e:	f009 fe1f 	bl	8021580 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017946:	2b00      	cmp	r3, #0
 8017948:	d006      	beq.n	8017958 <tcp_pcb_remove+0xe0>
 801794a:	4b0e      	ldr	r3, [pc, #56]	@ (8017984 <tcp_pcb_remove+0x10c>)
 801794c:	f640 0294 	movw	r2, #2196	@ 0x894
 8017950:	4911      	ldr	r1, [pc, #68]	@ (8017998 <tcp_pcb_remove+0x120>)
 8017952:	480e      	ldr	r0, [pc, #56]	@ (801798c <tcp_pcb_remove+0x114>)
 8017954:	f009 fe14 	bl	8021580 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017958:	683b      	ldr	r3, [r7, #0]
 801795a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801795c:	2b00      	cmp	r3, #0
 801795e:	d006      	beq.n	801796e <tcp_pcb_remove+0xf6>
 8017960:	4b08      	ldr	r3, [pc, #32]	@ (8017984 <tcp_pcb_remove+0x10c>)
 8017962:	f640 0296 	movw	r2, #2198	@ 0x896
 8017966:	490d      	ldr	r1, [pc, #52]	@ (801799c <tcp_pcb_remove+0x124>)
 8017968:	4808      	ldr	r0, [pc, #32]	@ (801798c <tcp_pcb_remove+0x114>)
 801796a:	f009 fe09 	bl	8021580 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	2200      	movs	r2, #0
 8017972:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017974:	683b      	ldr	r3, [r7, #0]
 8017976:	2200      	movs	r2, #0
 8017978:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801797a:	bf00      	nop
 801797c:	3710      	adds	r7, #16
 801797e:	46bd      	mov	sp, r7
 8017980:	bd80      	pop	{r7, pc}
 8017982:	bf00      	nop
 8017984:	080246e0 	.word	0x080246e0
 8017988:	08024d48 	.word	0x08024d48
 801798c:	08024724 	.word	0x08024724
 8017990:	08024d64 	.word	0x08024d64
 8017994:	08024d84 	.word	0x08024d84
 8017998:	08024d9c 	.word	0x08024d9c
 801799c:	08024db8 	.word	0x08024db8

080179a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d106      	bne.n	80179bc <tcp_next_iss+0x1c>
 80179ae:	4b0a      	ldr	r3, [pc, #40]	@ (80179d8 <tcp_next_iss+0x38>)
 80179b0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80179b4:	4909      	ldr	r1, [pc, #36]	@ (80179dc <tcp_next_iss+0x3c>)
 80179b6:	480a      	ldr	r0, [pc, #40]	@ (80179e0 <tcp_next_iss+0x40>)
 80179b8:	f009 fde2 	bl	8021580 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80179bc:	4b09      	ldr	r3, [pc, #36]	@ (80179e4 <tcp_next_iss+0x44>)
 80179be:	681a      	ldr	r2, [r3, #0]
 80179c0:	4b09      	ldr	r3, [pc, #36]	@ (80179e8 <tcp_next_iss+0x48>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	4413      	add	r3, r2
 80179c6:	4a07      	ldr	r2, [pc, #28]	@ (80179e4 <tcp_next_iss+0x44>)
 80179c8:	6013      	str	r3, [r2, #0]
  return iss;
 80179ca:	4b06      	ldr	r3, [pc, #24]	@ (80179e4 <tcp_next_iss+0x44>)
 80179cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3708      	adds	r7, #8
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	080246e0 	.word	0x080246e0
 80179dc:	08024dd0 	.word	0x08024dd0
 80179e0:	08024724 	.word	0x08024724
 80179e4:	2000006c 	.word	0x2000006c
 80179e8:	2002d458 	.word	0x2002d458

080179ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b086      	sub	sp, #24
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	4603      	mov	r3, r0
 80179f4:	60b9      	str	r1, [r7, #8]
 80179f6:	607a      	str	r2, [r7, #4]
 80179f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d106      	bne.n	8017a0e <tcp_eff_send_mss_netif+0x22>
 8017a00:	4b14      	ldr	r3, [pc, #80]	@ (8017a54 <tcp_eff_send_mss_netif+0x68>)
 8017a02:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8017a06:	4914      	ldr	r1, [pc, #80]	@ (8017a58 <tcp_eff_send_mss_netif+0x6c>)
 8017a08:	4814      	ldr	r0, [pc, #80]	@ (8017a5c <tcp_eff_send_mss_netif+0x70>)
 8017a0a:	f009 fdb9 	bl	8021580 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017a0e:	68bb      	ldr	r3, [r7, #8]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d101      	bne.n	8017a18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017a14:	89fb      	ldrh	r3, [r7, #14]
 8017a16:	e019      	b.n	8017a4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017a18:	68bb      	ldr	r3, [r7, #8]
 8017a1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017a1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017a1e:	8afb      	ldrh	r3, [r7, #22]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d012      	beq.n	8017a4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017a24:	2328      	movs	r3, #40	@ 0x28
 8017a26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017a28:	8afa      	ldrh	r2, [r7, #22]
 8017a2a:	8abb      	ldrh	r3, [r7, #20]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d904      	bls.n	8017a3a <tcp_eff_send_mss_netif+0x4e>
 8017a30:	8afa      	ldrh	r2, [r7, #22]
 8017a32:	8abb      	ldrh	r3, [r7, #20]
 8017a34:	1ad3      	subs	r3, r2, r3
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	e000      	b.n	8017a3c <tcp_eff_send_mss_netif+0x50>
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017a3e:	8a7a      	ldrh	r2, [r7, #18]
 8017a40:	89fb      	ldrh	r3, [r7, #14]
 8017a42:	4293      	cmp	r3, r2
 8017a44:	bf28      	it	cs
 8017a46:	4613      	movcs	r3, r2
 8017a48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017a4a:	89fb      	ldrh	r3, [r7, #14]
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3718      	adds	r7, #24
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	080246e0 	.word	0x080246e0
 8017a58:	08024dec 	.word	0x08024dec
 8017a5c:	08024724 	.word	0x08024724

08017a60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b084      	sub	sp, #16
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017a6a:	683b      	ldr	r3, [r7, #0]
 8017a6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d11d      	bne.n	8017ab0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8017a74:	4b12      	ldr	r3, [pc, #72]	@ (8017ac0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017a76:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8017a7a:	4912      	ldr	r1, [pc, #72]	@ (8017ac4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8017a7c:	4812      	ldr	r0, [pc, #72]	@ (8017ac8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8017a7e:	f009 fd7f 	bl	8021580 <iprintf>

  while (pcb != NULL) {
 8017a82:	e015      	b.n	8017ab0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	681a      	ldr	r2, [r3, #0]
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d10c      	bne.n	8017aaa <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	68db      	ldr	r3, [r3, #12]
 8017a94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8017a96:	68f9      	ldr	r1, [r7, #12]
 8017a98:	480c      	ldr	r0, [pc, #48]	@ (8017acc <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8017a9a:	f009 fd71 	bl	8021580 <iprintf>
      tcp_abort(pcb);
 8017a9e:	68f8      	ldr	r0, [r7, #12]
 8017aa0:	f7fe fcd2 	bl	8016448 <tcp_abort>
      pcb = next;
 8017aa4:	68bb      	ldr	r3, [r7, #8]
 8017aa6:	60fb      	str	r3, [r7, #12]
 8017aa8:	e002      	b.n	8017ab0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	68db      	ldr	r3, [r3, #12]
 8017aae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d1e6      	bne.n	8017a84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017ab6:	bf00      	nop
 8017ab8:	bf00      	nop
 8017aba:	3710      	adds	r7, #16
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	080246e0 	.word	0x080246e0
 8017ac4:	08024e14 	.word	0x08024e14
 8017ac8:	08024724 	.word	0x08024724
 8017acc:	08024e48 	.word	0x08024e48

08017ad0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b084      	sub	sp, #16
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
 8017ad8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d02a      	beq.n	8017b36 <tcp_netif_ip_addr_changed+0x66>
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d026      	beq.n	8017b36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017ae8:	4b15      	ldr	r3, [pc, #84]	@ (8017b40 <tcp_netif_ip_addr_changed+0x70>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	4619      	mov	r1, r3
 8017aee:	6878      	ldr	r0, [r7, #4]
 8017af0:	f7ff ffb6 	bl	8017a60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017af4:	4b13      	ldr	r3, [pc, #76]	@ (8017b44 <tcp_netif_ip_addr_changed+0x74>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	4619      	mov	r1, r3
 8017afa:	6878      	ldr	r0, [r7, #4]
 8017afc:	f7ff ffb0 	bl	8017a60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d017      	beq.n	8017b36 <tcp_netif_ip_addr_changed+0x66>
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d013      	beq.n	8017b36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8017b48 <tcp_netif_ip_addr_changed+0x78>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	60fb      	str	r3, [r7, #12]
 8017b14:	e00c      	b.n	8017b30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d103      	bne.n	8017b2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	681a      	ldr	r2, [r3, #0]
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	68db      	ldr	r3, [r3, #12]
 8017b2e:	60fb      	str	r3, [r7, #12]
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d1ef      	bne.n	8017b16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017b36:	bf00      	nop
 8017b38:	3710      	adds	r7, #16
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	2002d464 	.word	0x2002d464
 8017b44:	2002d45c 	.word	0x2002d45c
 8017b48:	2002d460 	.word	0x2002d460

08017b4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d007      	beq.n	8017b6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7ff fb3f 	bl	80171e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2200      	movs	r2, #0
 8017b6a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017b6c:	bf00      	nop
 8017b6e:	3708      	adds	r7, #8
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017b74:	b590      	push	{r4, r7, lr}
 8017b76:	b08d      	sub	sp, #52	@ 0x34
 8017b78:	af04      	add	r7, sp, #16
 8017b7a:	6078      	str	r0, [r7, #4]
 8017b7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d105      	bne.n	8017b90 <tcp_input+0x1c>
 8017b84:	4b9b      	ldr	r3, [pc, #620]	@ (8017df4 <tcp_input+0x280>)
 8017b86:	2283      	movs	r2, #131	@ 0x83
 8017b88:	499b      	ldr	r1, [pc, #620]	@ (8017df8 <tcp_input+0x284>)
 8017b8a:	489c      	ldr	r0, [pc, #624]	@ (8017dfc <tcp_input+0x288>)
 8017b8c:	f009 fcf8 	bl	8021580 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8017b90:	4b9b      	ldr	r3, [pc, #620]	@ (8017e00 <tcp_input+0x28c>)
 8017b92:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8017b96:	3301      	adds	r3, #1
 8017b98:	b29a      	uxth	r2, r3
 8017b9a:	4b99      	ldr	r3, [pc, #612]	@ (8017e00 <tcp_input+0x28c>)
 8017b9c:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	685b      	ldr	r3, [r3, #4]
 8017ba4:	4a97      	ldr	r2, [pc, #604]	@ (8017e04 <tcp_input+0x290>)
 8017ba6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	895b      	ldrh	r3, [r3, #10]
 8017bac:	2b13      	cmp	r3, #19
 8017bae:	d809      	bhi.n	8017bc4 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8017bb0:	4b93      	ldr	r3, [pc, #588]	@ (8017e00 <tcp_input+0x28c>)
 8017bb2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	b29a      	uxth	r2, r3
 8017bba:	4b91      	ldr	r3, [pc, #580]	@ (8017e00 <tcp_input+0x28c>)
 8017bbc:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8017bc0:	f000 bc1c 	b.w	80183fc <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017bc4:	4b90      	ldr	r3, [pc, #576]	@ (8017e08 <tcp_input+0x294>)
 8017bc6:	695b      	ldr	r3, [r3, #20]
 8017bc8:	4a8f      	ldr	r2, [pc, #572]	@ (8017e08 <tcp_input+0x294>)
 8017bca:	6812      	ldr	r2, [r2, #0]
 8017bcc:	4611      	mov	r1, r2
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f007 f964 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d105      	bne.n	8017be6 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017bda:	4b8b      	ldr	r3, [pc, #556]	@ (8017e08 <tcp_input+0x294>)
 8017bdc:	695b      	ldr	r3, [r3, #20]
 8017bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017be2:	2be0      	cmp	r3, #224	@ 0xe0
 8017be4:	d109      	bne.n	8017bfa <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8017be6:	4b86      	ldr	r3, [pc, #536]	@ (8017e00 <tcp_input+0x28c>)
 8017be8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8017bec:	3301      	adds	r3, #1
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	4b83      	ldr	r3, [pc, #524]	@ (8017e00 <tcp_input+0x28c>)
 8017bf2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8017bf6:	f000 bc01 	b.w	80183fc <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017bfa:	4b82      	ldr	r3, [pc, #520]	@ (8017e04 <tcp_input+0x290>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	899b      	ldrh	r3, [r3, #12]
 8017c00:	b29b      	uxth	r3, r3
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7fb fe48 	bl	8013898 <lwip_htons>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	0b1b      	lsrs	r3, r3, #12
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	b2db      	uxtb	r3, r3
 8017c10:	009b      	lsls	r3, r3, #2
 8017c12:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017c14:	7cbb      	ldrb	r3, [r7, #18]
 8017c16:	2b13      	cmp	r3, #19
 8017c18:	d905      	bls.n	8017c26 <tcp_input+0xb2>
 8017c1a:	7cbb      	ldrb	r3, [r7, #18]
 8017c1c:	b29a      	uxth	r2, r3
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	891b      	ldrh	r3, [r3, #8]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d908      	bls.n	8017c38 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8017c26:	4b76      	ldr	r3, [pc, #472]	@ (8017e00 <tcp_input+0x28c>)
 8017c28:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017c2c:	3301      	adds	r3, #1
 8017c2e:	b29a      	uxth	r2, r3
 8017c30:	4b73      	ldr	r3, [pc, #460]	@ (8017e00 <tcp_input+0x28c>)
 8017c32:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8017c36:	e3e1      	b.n	80183fc <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017c38:	7cbb      	ldrb	r3, [r7, #18]
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	3b14      	subs	r3, #20
 8017c3e:	b29a      	uxth	r2, r3
 8017c40:	4b72      	ldr	r3, [pc, #456]	@ (8017e0c <tcp_input+0x298>)
 8017c42:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017c44:	4b72      	ldr	r3, [pc, #456]	@ (8017e10 <tcp_input+0x29c>)
 8017c46:	2200      	movs	r2, #0
 8017c48:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	895a      	ldrh	r2, [r3, #10]
 8017c4e:	7cbb      	ldrb	r3, [r7, #18]
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	429a      	cmp	r2, r3
 8017c54:	d309      	bcc.n	8017c6a <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017c56:	4b6d      	ldr	r3, [pc, #436]	@ (8017e0c <tcp_input+0x298>)
 8017c58:	881a      	ldrh	r2, [r3, #0]
 8017c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8017e14 <tcp_input+0x2a0>)
 8017c5c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017c5e:	7cbb      	ldrb	r3, [r7, #18]
 8017c60:	4619      	mov	r1, r3
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7fd fbb8 	bl	80153d8 <pbuf_remove_header>
 8017c68:	e056      	b.n	8017d18 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d105      	bne.n	8017c7e <tcp_input+0x10a>
 8017c72:	4b60      	ldr	r3, [pc, #384]	@ (8017df4 <tcp_input+0x280>)
 8017c74:	22c2      	movs	r2, #194	@ 0xc2
 8017c76:	4968      	ldr	r1, [pc, #416]	@ (8017e18 <tcp_input+0x2a4>)
 8017c78:	4860      	ldr	r0, [pc, #384]	@ (8017dfc <tcp_input+0x288>)
 8017c7a:	f009 fc81 	bl	8021580 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017c7e:	2114      	movs	r1, #20
 8017c80:	6878      	ldr	r0, [r7, #4]
 8017c82:	f7fd fba9 	bl	80153d8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	895a      	ldrh	r2, [r3, #10]
 8017c8a:	4b62      	ldr	r3, [pc, #392]	@ (8017e14 <tcp_input+0x2a0>)
 8017c8c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017c8e:	4b5f      	ldr	r3, [pc, #380]	@ (8017e0c <tcp_input+0x298>)
 8017c90:	881a      	ldrh	r2, [r3, #0]
 8017c92:	4b60      	ldr	r3, [pc, #384]	@ (8017e14 <tcp_input+0x2a0>)
 8017c94:	881b      	ldrh	r3, [r3, #0]
 8017c96:	1ad3      	subs	r3, r2, r3
 8017c98:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8017e14 <tcp_input+0x2a0>)
 8017c9c:	881b      	ldrh	r3, [r3, #0]
 8017c9e:	4619      	mov	r1, r3
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	f7fd fb99 	bl	80153d8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	895b      	ldrh	r3, [r3, #10]
 8017cac:	8a3a      	ldrh	r2, [r7, #16]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	d908      	bls.n	8017cc4 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8017cb2:	4b53      	ldr	r3, [pc, #332]	@ (8017e00 <tcp_input+0x28c>)
 8017cb4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017cb8:	3301      	adds	r3, #1
 8017cba:	b29a      	uxth	r2, r3
 8017cbc:	4b50      	ldr	r3, [pc, #320]	@ (8017e00 <tcp_input+0x28c>)
 8017cbe:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8017cc2:	e39b      	b.n	80183fc <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	4a51      	ldr	r2, [pc, #324]	@ (8017e10 <tcp_input+0x29c>)
 8017ccc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	8a3a      	ldrh	r2, [r7, #16]
 8017cd4:	4611      	mov	r1, r2
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fd fb7e 	bl	80153d8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	891a      	ldrh	r2, [r3, #8]
 8017ce0:	8a3b      	ldrh	r3, [r7, #16]
 8017ce2:	1ad3      	subs	r3, r2, r3
 8017ce4:	b29a      	uxth	r2, r3
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	895b      	ldrh	r3, [r3, #10]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d005      	beq.n	8017cfe <tcp_input+0x18a>
 8017cf2:	4b40      	ldr	r3, [pc, #256]	@ (8017df4 <tcp_input+0x280>)
 8017cf4:	22df      	movs	r2, #223	@ 0xdf
 8017cf6:	4949      	ldr	r1, [pc, #292]	@ (8017e1c <tcp_input+0x2a8>)
 8017cf8:	4840      	ldr	r0, [pc, #256]	@ (8017dfc <tcp_input+0x288>)
 8017cfa:	f009 fc41 	bl	8021580 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	891a      	ldrh	r2, [r3, #8]
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	891b      	ldrh	r3, [r3, #8]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d005      	beq.n	8017d18 <tcp_input+0x1a4>
 8017d0c:	4b39      	ldr	r3, [pc, #228]	@ (8017df4 <tcp_input+0x280>)
 8017d0e:	22e0      	movs	r2, #224	@ 0xe0
 8017d10:	4943      	ldr	r1, [pc, #268]	@ (8017e20 <tcp_input+0x2ac>)
 8017d12:	483a      	ldr	r0, [pc, #232]	@ (8017dfc <tcp_input+0x288>)
 8017d14:	f009 fc34 	bl	8021580 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017d18:	4b3a      	ldr	r3, [pc, #232]	@ (8017e04 <tcp_input+0x290>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	881b      	ldrh	r3, [r3, #0]
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	4a38      	ldr	r2, [pc, #224]	@ (8017e04 <tcp_input+0x290>)
 8017d22:	6814      	ldr	r4, [r2, #0]
 8017d24:	4618      	mov	r0, r3
 8017d26:	f7fb fdb7 	bl	8013898 <lwip_htons>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017d2e:	4b35      	ldr	r3, [pc, #212]	@ (8017e04 <tcp_input+0x290>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	885b      	ldrh	r3, [r3, #2]
 8017d34:	b29b      	uxth	r3, r3
 8017d36:	4a33      	ldr	r2, [pc, #204]	@ (8017e04 <tcp_input+0x290>)
 8017d38:	6814      	ldr	r4, [r2, #0]
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7fb fdac 	bl	8013898 <lwip_htons>
 8017d40:	4603      	mov	r3, r0
 8017d42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017d44:	4b2f      	ldr	r3, [pc, #188]	@ (8017e04 <tcp_input+0x290>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8017e04 <tcp_input+0x290>)
 8017d4c:	6814      	ldr	r4, [r2, #0]
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7fb fdb8 	bl	80138c4 <lwip_htonl>
 8017d54:	4603      	mov	r3, r0
 8017d56:	6063      	str	r3, [r4, #4]
 8017d58:	6863      	ldr	r3, [r4, #4]
 8017d5a:	4a32      	ldr	r2, [pc, #200]	@ (8017e24 <tcp_input+0x2b0>)
 8017d5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017d5e:	4b29      	ldr	r3, [pc, #164]	@ (8017e04 <tcp_input+0x290>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	689b      	ldr	r3, [r3, #8]
 8017d64:	4a27      	ldr	r2, [pc, #156]	@ (8017e04 <tcp_input+0x290>)
 8017d66:	6814      	ldr	r4, [r2, #0]
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f7fb fdab 	bl	80138c4 <lwip_htonl>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	60a3      	str	r3, [r4, #8]
 8017d72:	68a3      	ldr	r3, [r4, #8]
 8017d74:	4a2c      	ldr	r2, [pc, #176]	@ (8017e28 <tcp_input+0x2b4>)
 8017d76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017d78:	4b22      	ldr	r3, [pc, #136]	@ (8017e04 <tcp_input+0x290>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	89db      	ldrh	r3, [r3, #14]
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	4a20      	ldr	r2, [pc, #128]	@ (8017e04 <tcp_input+0x290>)
 8017d82:	6814      	ldr	r4, [r2, #0]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7fb fd87 	bl	8013898 <lwip_htons>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8017e04 <tcp_input+0x290>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	899b      	ldrh	r3, [r3, #12]
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	4618      	mov	r0, r3
 8017d98:	f7fb fd7e 	bl	8013898 <lwip_htons>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	b2db      	uxtb	r3, r3
 8017da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017da4:	b2da      	uxtb	r2, r3
 8017da6:	4b21      	ldr	r3, [pc, #132]	@ (8017e2c <tcp_input+0x2b8>)
 8017da8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	891a      	ldrh	r2, [r3, #8]
 8017dae:	4b20      	ldr	r3, [pc, #128]	@ (8017e30 <tcp_input+0x2bc>)
 8017db0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017db2:	4b1e      	ldr	r3, [pc, #120]	@ (8017e2c <tcp_input+0x2b8>)
 8017db4:	781b      	ldrb	r3, [r3, #0]
 8017db6:	f003 0303 	and.w	r3, r3, #3
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d014      	beq.n	8017de8 <tcp_input+0x274>
    tcplen++;
 8017dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8017e30 <tcp_input+0x2bc>)
 8017dc0:	881b      	ldrh	r3, [r3, #0]
 8017dc2:	3301      	adds	r3, #1
 8017dc4:	b29a      	uxth	r2, r3
 8017dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8017e30 <tcp_input+0x2bc>)
 8017dc8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	891a      	ldrh	r2, [r3, #8]
 8017dce:	4b18      	ldr	r3, [pc, #96]	@ (8017e30 <tcp_input+0x2bc>)
 8017dd0:	881b      	ldrh	r3, [r3, #0]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d908      	bls.n	8017de8 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8017dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8017e00 <tcp_input+0x28c>)
 8017dd8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017ddc:	3301      	adds	r3, #1
 8017dde:	b29a      	uxth	r2, r3
 8017de0:	4b07      	ldr	r3, [pc, #28]	@ (8017e00 <tcp_input+0x28c>)
 8017de2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8017de6:	e309      	b.n	80183fc <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017de8:	2300      	movs	r3, #0
 8017dea:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017dec:	4b11      	ldr	r3, [pc, #68]	@ (8017e34 <tcp_input+0x2c0>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	61bb      	str	r3, [r7, #24]
 8017df2:	e0a1      	b.n	8017f38 <tcp_input+0x3c4>
 8017df4:	08024e70 	.word	0x08024e70
 8017df8:	08024ea4 	.word	0x08024ea4
 8017dfc:	08024ebc 	.word	0x08024ebc
 8017e00:	2002d358 	.word	0x2002d358
 8017e04:	2002d484 	.word	0x2002d484
 8017e08:	200270e8 	.word	0x200270e8
 8017e0c:	2002d488 	.word	0x2002d488
 8017e10:	2002d48c 	.word	0x2002d48c
 8017e14:	2002d48a 	.word	0x2002d48a
 8017e18:	08024ee4 	.word	0x08024ee4
 8017e1c:	08024ef4 	.word	0x08024ef4
 8017e20:	08024f00 	.word	0x08024f00
 8017e24:	2002d494 	.word	0x2002d494
 8017e28:	2002d498 	.word	0x2002d498
 8017e2c:	2002d4a0 	.word	0x2002d4a0
 8017e30:	2002d49e 	.word	0x2002d49e
 8017e34:	2002d464 	.word	0x2002d464
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	7d1b      	ldrb	r3, [r3, #20]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d105      	bne.n	8017e4c <tcp_input+0x2d8>
 8017e40:	4b8a      	ldr	r3, [pc, #552]	@ (801806c <tcp_input+0x4f8>)
 8017e42:	22fb      	movs	r2, #251	@ 0xfb
 8017e44:	498a      	ldr	r1, [pc, #552]	@ (8018070 <tcp_input+0x4fc>)
 8017e46:	488b      	ldr	r0, [pc, #556]	@ (8018074 <tcp_input+0x500>)
 8017e48:	f009 fb9a 	bl	8021580 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017e4c:	69bb      	ldr	r3, [r7, #24]
 8017e4e:	7d1b      	ldrb	r3, [r3, #20]
 8017e50:	2b0a      	cmp	r3, #10
 8017e52:	d105      	bne.n	8017e60 <tcp_input+0x2ec>
 8017e54:	4b85      	ldr	r3, [pc, #532]	@ (801806c <tcp_input+0x4f8>)
 8017e56:	22fc      	movs	r2, #252	@ 0xfc
 8017e58:	4987      	ldr	r1, [pc, #540]	@ (8018078 <tcp_input+0x504>)
 8017e5a:	4886      	ldr	r0, [pc, #536]	@ (8018074 <tcp_input+0x500>)
 8017e5c:	f009 fb90 	bl	8021580 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017e60:	69bb      	ldr	r3, [r7, #24]
 8017e62:	7d1b      	ldrb	r3, [r3, #20]
 8017e64:	2b01      	cmp	r3, #1
 8017e66:	d105      	bne.n	8017e74 <tcp_input+0x300>
 8017e68:	4b80      	ldr	r3, [pc, #512]	@ (801806c <tcp_input+0x4f8>)
 8017e6a:	22fd      	movs	r2, #253	@ 0xfd
 8017e6c:	4983      	ldr	r1, [pc, #524]	@ (801807c <tcp_input+0x508>)
 8017e6e:	4881      	ldr	r0, [pc, #516]	@ (8018074 <tcp_input+0x500>)
 8017e70:	f009 fb86 	bl	8021580 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e74:	69bb      	ldr	r3, [r7, #24]
 8017e76:	7a1b      	ldrb	r3, [r3, #8]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d00c      	beq.n	8017e96 <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e7c:	69bb      	ldr	r3, [r7, #24]
 8017e7e:	7a1a      	ldrb	r2, [r3, #8]
 8017e80:	4b7f      	ldr	r3, [pc, #508]	@ (8018080 <tcp_input+0x50c>)
 8017e82:	685b      	ldr	r3, [r3, #4]
 8017e84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017e88:	3301      	adds	r3, #1
 8017e8a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e8c:	429a      	cmp	r2, r3
 8017e8e:	d002      	beq.n	8017e96 <tcp_input+0x322>
      prev = pcb;
 8017e90:	69bb      	ldr	r3, [r7, #24]
 8017e92:	61fb      	str	r3, [r7, #28]
      continue;
 8017e94:	e04d      	b.n	8017f32 <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8017e96:	69bb      	ldr	r3, [r7, #24]
 8017e98:	8b1a      	ldrh	r2, [r3, #24]
 8017e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8018084 <tcp_input+0x510>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	881b      	ldrh	r3, [r3, #0]
 8017ea0:	b29b      	uxth	r3, r3
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d143      	bne.n	8017f2e <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	8ada      	ldrh	r2, [r3, #22]
 8017eaa:	4b76      	ldr	r3, [pc, #472]	@ (8018084 <tcp_input+0x510>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	885b      	ldrh	r3, [r3, #2]
 8017eb0:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	d13b      	bne.n	8017f2e <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017eb6:	69bb      	ldr	r3, [r7, #24]
 8017eb8:	685a      	ldr	r2, [r3, #4]
 8017eba:	4b71      	ldr	r3, [pc, #452]	@ (8018080 <tcp_input+0x50c>)
 8017ebc:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d135      	bne.n	8017f2e <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017ec2:	69bb      	ldr	r3, [r7, #24]
 8017ec4:	681a      	ldr	r2, [r3, #0]
 8017ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8018080 <tcp_input+0x50c>)
 8017ec8:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d12f      	bne.n	8017f2e <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017ece:	69bb      	ldr	r3, [r7, #24]
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	69ba      	ldr	r2, [r7, #24]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d106      	bne.n	8017ee6 <tcp_input+0x372>
 8017ed8:	4b64      	ldr	r3, [pc, #400]	@ (801806c <tcp_input+0x4f8>)
 8017eda:	f240 120d 	movw	r2, #269	@ 0x10d
 8017ede:	496a      	ldr	r1, [pc, #424]	@ (8018088 <tcp_input+0x514>)
 8017ee0:	4864      	ldr	r0, [pc, #400]	@ (8018074 <tcp_input+0x500>)
 8017ee2:	f009 fb4d 	bl	8021580 <iprintf>
      if (prev != NULL) {
 8017ee6:	69fb      	ldr	r3, [r7, #28]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d00b      	beq.n	8017f04 <tcp_input+0x390>
        prev->next = pcb->next;
 8017eec:	69bb      	ldr	r3, [r7, #24]
 8017eee:	68da      	ldr	r2, [r3, #12]
 8017ef0:	69fb      	ldr	r3, [r7, #28]
 8017ef2:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017ef4:	4b65      	ldr	r3, [pc, #404]	@ (801808c <tcp_input+0x518>)
 8017ef6:	681a      	ldr	r2, [r3, #0]
 8017ef8:	69bb      	ldr	r3, [r7, #24]
 8017efa:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017efc:	4a63      	ldr	r2, [pc, #396]	@ (801808c <tcp_input+0x518>)
 8017efe:	69bb      	ldr	r3, [r7, #24]
 8017f00:	6013      	str	r3, [r2, #0]
 8017f02:	e007      	b.n	8017f14 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017f04:	4b62      	ldr	r3, [pc, #392]	@ (8018090 <tcp_input+0x51c>)
 8017f06:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	b29a      	uxth	r2, r3
 8017f0e:	4b60      	ldr	r3, [pc, #384]	@ (8018090 <tcp_input+0x51c>)
 8017f10:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017f14:	69bb      	ldr	r3, [r7, #24]
 8017f16:	68db      	ldr	r3, [r3, #12]
 8017f18:	69ba      	ldr	r2, [r7, #24]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d111      	bne.n	8017f42 <tcp_input+0x3ce>
 8017f1e:	4b53      	ldr	r3, [pc, #332]	@ (801806c <tcp_input+0x4f8>)
 8017f20:	f240 1215 	movw	r2, #277	@ 0x115
 8017f24:	495b      	ldr	r1, [pc, #364]	@ (8018094 <tcp_input+0x520>)
 8017f26:	4853      	ldr	r0, [pc, #332]	@ (8018074 <tcp_input+0x500>)
 8017f28:	f009 fb2a 	bl	8021580 <iprintf>
      break;
 8017f2c:	e009      	b.n	8017f42 <tcp_input+0x3ce>
    }
    prev = pcb;
 8017f2e:	69bb      	ldr	r3, [r7, #24]
 8017f30:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f32:	69bb      	ldr	r3, [r7, #24]
 8017f34:	68db      	ldr	r3, [r3, #12]
 8017f36:	61bb      	str	r3, [r7, #24]
 8017f38:	69bb      	ldr	r3, [r7, #24]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	f47f af7c 	bne.w	8017e38 <tcp_input+0x2c4>
 8017f40:	e000      	b.n	8017f44 <tcp_input+0x3d0>
      break;
 8017f42:	bf00      	nop
  }

  if (pcb == NULL) {
 8017f44:	69bb      	ldr	r3, [r7, #24]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	f040 80bb 	bne.w	80180c2 <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f4c:	4b52      	ldr	r3, [pc, #328]	@ (8018098 <tcp_input+0x524>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	61bb      	str	r3, [r7, #24]
 8017f52:	e03f      	b.n	8017fd4 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017f54:	69bb      	ldr	r3, [r7, #24]
 8017f56:	7d1b      	ldrb	r3, [r3, #20]
 8017f58:	2b0a      	cmp	r3, #10
 8017f5a:	d006      	beq.n	8017f6a <tcp_input+0x3f6>
 8017f5c:	4b43      	ldr	r3, [pc, #268]	@ (801806c <tcp_input+0x4f8>)
 8017f5e:	f240 121f 	movw	r2, #287	@ 0x11f
 8017f62:	494e      	ldr	r1, [pc, #312]	@ (801809c <tcp_input+0x528>)
 8017f64:	4843      	ldr	r0, [pc, #268]	@ (8018074 <tcp_input+0x500>)
 8017f66:	f009 fb0b 	bl	8021580 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f6a:	69bb      	ldr	r3, [r7, #24]
 8017f6c:	7a1b      	ldrb	r3, [r3, #8]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d009      	beq.n	8017f86 <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	7a1a      	ldrb	r2, [r3, #8]
 8017f76:	4b42      	ldr	r3, [pc, #264]	@ (8018080 <tcp_input+0x50c>)
 8017f78:	685b      	ldr	r3, [r3, #4]
 8017f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017f7e:	3301      	adds	r3, #1
 8017f80:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f82:	429a      	cmp	r2, r3
 8017f84:	d122      	bne.n	8017fcc <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017f86:	69bb      	ldr	r3, [r7, #24]
 8017f88:	8b1a      	ldrh	r2, [r3, #24]
 8017f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8018084 <tcp_input+0x510>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	881b      	ldrh	r3, [r3, #0]
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d11b      	bne.n	8017fce <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 8017f96:	69bb      	ldr	r3, [r7, #24]
 8017f98:	8ada      	ldrh	r2, [r3, #22]
 8017f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8018084 <tcp_input+0x510>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	885b      	ldrh	r3, [r3, #2]
 8017fa0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d113      	bne.n	8017fce <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017fa6:	69bb      	ldr	r3, [r7, #24]
 8017fa8:	685a      	ldr	r2, [r3, #4]
 8017faa:	4b35      	ldr	r3, [pc, #212]	@ (8018080 <tcp_input+0x50c>)
 8017fac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	d10d      	bne.n	8017fce <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017fb2:	69bb      	ldr	r3, [r7, #24]
 8017fb4:	681a      	ldr	r2, [r3, #0]
 8017fb6:	4b32      	ldr	r3, [pc, #200]	@ (8018080 <tcp_input+0x50c>)
 8017fb8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d107      	bne.n	8017fce <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017fbe:	69b8      	ldr	r0, [r7, #24]
 8017fc0:	f000 fb88 	bl	80186d4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f7fd fa95 	bl	80154f4 <pbuf_free>
        return;
 8017fca:	e224      	b.n	8018416 <tcp_input+0x8a2>
        continue;
 8017fcc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fce:	69bb      	ldr	r3, [r7, #24]
 8017fd0:	68db      	ldr	r3, [r3, #12]
 8017fd2:	61bb      	str	r3, [r7, #24]
 8017fd4:	69bb      	ldr	r3, [r7, #24]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d1bc      	bne.n	8017f54 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017fde:	4b30      	ldr	r3, [pc, #192]	@ (80180a0 <tcp_input+0x52c>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	617b      	str	r3, [r7, #20]
 8017fe4:	e02a      	b.n	801803c <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	7a1b      	ldrb	r3, [r3, #8]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d00c      	beq.n	8018008 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	7a1a      	ldrb	r2, [r3, #8]
 8017ff2:	4b23      	ldr	r3, [pc, #140]	@ (8018080 <tcp_input+0x50c>)
 8017ff4:	685b      	ldr	r3, [r3, #4]
 8017ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017ffe:	429a      	cmp	r2, r3
 8018000:	d002      	beq.n	8018008 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	61fb      	str	r3, [r7, #28]
        continue;
 8018006:	e016      	b.n	8018036 <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	8ada      	ldrh	r2, [r3, #22]
 801800c:	4b1d      	ldr	r3, [pc, #116]	@ (8018084 <tcp_input+0x510>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	885b      	ldrh	r3, [r3, #2]
 8018012:	b29b      	uxth	r3, r3
 8018014:	429a      	cmp	r2, r3
 8018016:	d10c      	bne.n	8018032 <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	4b18      	ldr	r3, [pc, #96]	@ (8018080 <tcp_input+0x50c>)
 801801e:	695b      	ldr	r3, [r3, #20]
 8018020:	429a      	cmp	r2, r3
 8018022:	d00f      	beq.n	8018044 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d00d      	beq.n	8018046 <tcp_input+0x4d2>
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d009      	beq.n	8018046 <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018036:	697b      	ldr	r3, [r7, #20]
 8018038:	68db      	ldr	r3, [r3, #12]
 801803a:	617b      	str	r3, [r7, #20]
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d1d1      	bne.n	8017fe6 <tcp_input+0x472>
 8018042:	e000      	b.n	8018046 <tcp_input+0x4d2>
            break;
 8018044:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d03a      	beq.n	80180c2 <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801804c:	69fb      	ldr	r3, [r7, #28]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d028      	beq.n	80180a4 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	68da      	ldr	r2, [r3, #12]
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801805a:	4b11      	ldr	r3, [pc, #68]	@ (80180a0 <tcp_input+0x52c>)
 801805c:	681a      	ldr	r2, [r3, #0]
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018062:	4a0f      	ldr	r2, [pc, #60]	@ (80180a0 <tcp_input+0x52c>)
 8018064:	697b      	ldr	r3, [r7, #20]
 8018066:	6013      	str	r3, [r2, #0]
 8018068:	e024      	b.n	80180b4 <tcp_input+0x540>
 801806a:	bf00      	nop
 801806c:	08024e70 	.word	0x08024e70
 8018070:	08024f20 	.word	0x08024f20
 8018074:	08024ebc 	.word	0x08024ebc
 8018078:	08024f48 	.word	0x08024f48
 801807c:	08024f74 	.word	0x08024f74
 8018080:	200270e8 	.word	0x200270e8
 8018084:	2002d484 	.word	0x2002d484
 8018088:	08024f9c 	.word	0x08024f9c
 801808c:	2002d464 	.word	0x2002d464
 8018090:	2002d358 	.word	0x2002d358
 8018094:	08024fc8 	.word	0x08024fc8
 8018098:	2002d468 	.word	0x2002d468
 801809c:	08024ff4 	.word	0x08024ff4
 80180a0:	2002d460 	.word	0x2002d460
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80180a4:	4ba0      	ldr	r3, [pc, #640]	@ (8018328 <tcp_input+0x7b4>)
 80180a6:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80180aa:	3301      	adds	r3, #1
 80180ac:	b29a      	uxth	r2, r3
 80180ae:	4b9e      	ldr	r3, [pc, #632]	@ (8018328 <tcp_input+0x7b4>)
 80180b0:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80180b4:	6978      	ldr	r0, [r7, #20]
 80180b6:	f000 fa05 	bl	80184c4 <tcp_listen_input>
      }
      pbuf_free(p);
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f7fd fa1a 	bl	80154f4 <pbuf_free>
      return;
 80180c0:	e1a9      	b.n	8018416 <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80180c2:	69bb      	ldr	r3, [r7, #24]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f000 815f 	beq.w	8018388 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80180ca:	4b98      	ldr	r3, [pc, #608]	@ (801832c <tcp_input+0x7b8>)
 80180cc:	2200      	movs	r2, #0
 80180ce:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	891a      	ldrh	r2, [r3, #8]
 80180d4:	4b95      	ldr	r3, [pc, #596]	@ (801832c <tcp_input+0x7b8>)
 80180d6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80180d8:	4a94      	ldr	r2, [pc, #592]	@ (801832c <tcp_input+0x7b8>)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80180de:	4b94      	ldr	r3, [pc, #592]	@ (8018330 <tcp_input+0x7bc>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	4a92      	ldr	r2, [pc, #584]	@ (801832c <tcp_input+0x7b8>)
 80180e4:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80180e6:	4b93      	ldr	r3, [pc, #588]	@ (8018334 <tcp_input+0x7c0>)
 80180e8:	2200      	movs	r2, #0
 80180ea:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80180ec:	4b92      	ldr	r3, [pc, #584]	@ (8018338 <tcp_input+0x7c4>)
 80180ee:	2200      	movs	r2, #0
 80180f0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80180f2:	4b92      	ldr	r3, [pc, #584]	@ (801833c <tcp_input+0x7c8>)
 80180f4:	2200      	movs	r2, #0
 80180f6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80180f8:	4b91      	ldr	r3, [pc, #580]	@ (8018340 <tcp_input+0x7cc>)
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	f003 0308 	and.w	r3, r3, #8
 8018100:	2b00      	cmp	r3, #0
 8018102:	d006      	beq.n	8018112 <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	7b5b      	ldrb	r3, [r3, #13]
 8018108:	f043 0301 	orr.w	r3, r3, #1
 801810c:	b2da      	uxtb	r2, r3
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018112:	69bb      	ldr	r3, [r7, #24]
 8018114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018116:	2b00      	cmp	r3, #0
 8018118:	d01e      	beq.n	8018158 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801811a:	69b8      	ldr	r0, [r7, #24]
 801811c:	f7fe ffe6 	bl	80170ec <tcp_process_refused_data>
 8018120:	4603      	mov	r3, r0
 8018122:	f113 0f0d 	cmn.w	r3, #13
 8018126:	d007      	beq.n	8018138 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018128:	69bb      	ldr	r3, [r7, #24]
 801812a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801812c:	2b00      	cmp	r3, #0
 801812e:	d013      	beq.n	8018158 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018130:	4b84      	ldr	r3, [pc, #528]	@ (8018344 <tcp_input+0x7d0>)
 8018132:	881b      	ldrh	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d00f      	beq.n	8018158 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018138:	69bb      	ldr	r3, [r7, #24]
 801813a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801813c:	2b00      	cmp	r3, #0
 801813e:	d102      	bne.n	8018146 <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018140:	69b8      	ldr	r0, [r7, #24]
 8018142:	f003 fedd 	bl	801bf00 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8018146:	4b78      	ldr	r3, [pc, #480]	@ (8018328 <tcp_input+0x7b4>)
 8018148:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801814c:	3301      	adds	r3, #1
 801814e:	b29a      	uxth	r2, r3
 8018150:	4b75      	ldr	r3, [pc, #468]	@ (8018328 <tcp_input+0x7b4>)
 8018152:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018156:	e104      	b.n	8018362 <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 8018158:	4a7b      	ldr	r2, [pc, #492]	@ (8018348 <tcp_input+0x7d4>)
 801815a:	69bb      	ldr	r3, [r7, #24]
 801815c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801815e:	69b8      	ldr	r0, [r7, #24]
 8018160:	f000 fb32 	bl	80187c8 <tcp_process>
 8018164:	4603      	mov	r3, r0
 8018166:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018168:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801816c:	f113 0f0d 	cmn.w	r3, #13
 8018170:	f000 80d1 	beq.w	8018316 <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8018174:	4b70      	ldr	r3, [pc, #448]	@ (8018338 <tcp_input+0x7c4>)
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	f003 0308 	and.w	r3, r3, #8
 801817c:	2b00      	cmp	r3, #0
 801817e:	d015      	beq.n	80181ac <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018180:	69bb      	ldr	r3, [r7, #24]
 8018182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018186:	2b00      	cmp	r3, #0
 8018188:	d008      	beq.n	801819c <tcp_input+0x628>
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018190:	69ba      	ldr	r2, [r7, #24]
 8018192:	6912      	ldr	r2, [r2, #16]
 8018194:	f06f 010d 	mvn.w	r1, #13
 8018198:	4610      	mov	r0, r2
 801819a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801819c:	69b9      	ldr	r1, [r7, #24]
 801819e:	486b      	ldr	r0, [pc, #428]	@ (801834c <tcp_input+0x7d8>)
 80181a0:	f7ff fb6a 	bl	8017878 <tcp_pcb_remove>
        tcp_free(pcb);
 80181a4:	69b8      	ldr	r0, [r7, #24]
 80181a6:	f7fd fe0b 	bl	8015dc0 <tcp_free>
 80181aa:	e0da      	b.n	8018362 <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 80181ac:	2300      	movs	r3, #0
 80181ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80181b0:	4b62      	ldr	r3, [pc, #392]	@ (801833c <tcp_input+0x7c8>)
 80181b2:	881b      	ldrh	r3, [r3, #0]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d01d      	beq.n	80181f4 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80181b8:	4b60      	ldr	r3, [pc, #384]	@ (801833c <tcp_input+0x7c8>)
 80181ba:	881b      	ldrh	r3, [r3, #0]
 80181bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d00a      	beq.n	80181de <tcp_input+0x66a>
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181ce:	69ba      	ldr	r2, [r7, #24]
 80181d0:	6910      	ldr	r0, [r2, #16]
 80181d2:	89fa      	ldrh	r2, [r7, #14]
 80181d4:	69b9      	ldr	r1, [r7, #24]
 80181d6:	4798      	blx	r3
 80181d8:	4603      	mov	r3, r0
 80181da:	74fb      	strb	r3, [r7, #19]
 80181dc:	e001      	b.n	80181e2 <tcp_input+0x66e>
 80181de:	2300      	movs	r3, #0
 80181e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80181e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80181e6:	f113 0f0d 	cmn.w	r3, #13
 80181ea:	f000 8096 	beq.w	801831a <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 80181ee:	4b53      	ldr	r3, [pc, #332]	@ (801833c <tcp_input+0x7c8>)
 80181f0:	2200      	movs	r2, #0
 80181f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80181f4:	69b8      	ldr	r0, [r7, #24]
 80181f6:	f000 f925 	bl	8018444 <tcp_input_delayed_close>
 80181fa:	4603      	mov	r3, r0
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	f040 808e 	bne.w	801831e <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8018202:	4b4c      	ldr	r3, [pc, #304]	@ (8018334 <tcp_input+0x7c0>)
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d041      	beq.n	801828e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801820a:	69bb      	ldr	r3, [r7, #24]
 801820c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801820e:	2b00      	cmp	r3, #0
 8018210:	d006      	beq.n	8018220 <tcp_input+0x6ac>
 8018212:	4b4f      	ldr	r3, [pc, #316]	@ (8018350 <tcp_input+0x7dc>)
 8018214:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8018218:	494e      	ldr	r1, [pc, #312]	@ (8018354 <tcp_input+0x7e0>)
 801821a:	484f      	ldr	r0, [pc, #316]	@ (8018358 <tcp_input+0x7e4>)
 801821c:	f009 f9b0 	bl	8021580 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018220:	69bb      	ldr	r3, [r7, #24]
 8018222:	8b5b      	ldrh	r3, [r3, #26]
 8018224:	f003 0310 	and.w	r3, r3, #16
 8018228:	2b00      	cmp	r3, #0
 801822a:	d008      	beq.n	801823e <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801822c:	4b41      	ldr	r3, [pc, #260]	@ (8018334 <tcp_input+0x7c0>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	4618      	mov	r0, r3
 8018232:	f7fd f95f 	bl	80154f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018236:	69b8      	ldr	r0, [r7, #24]
 8018238:	f7fe f906 	bl	8016448 <tcp_abort>
            goto aborted;
 801823c:	e091      	b.n	8018362 <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801823e:	69bb      	ldr	r3, [r7, #24]
 8018240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018244:	2b00      	cmp	r3, #0
 8018246:	d00c      	beq.n	8018262 <tcp_input+0x6ee>
 8018248:	69bb      	ldr	r3, [r7, #24]
 801824a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	6918      	ldr	r0, [r3, #16]
 8018252:	4b38      	ldr	r3, [pc, #224]	@ (8018334 <tcp_input+0x7c0>)
 8018254:	681a      	ldr	r2, [r3, #0]
 8018256:	2300      	movs	r3, #0
 8018258:	69b9      	ldr	r1, [r7, #24]
 801825a:	47a0      	blx	r4
 801825c:	4603      	mov	r3, r0
 801825e:	74fb      	strb	r3, [r7, #19]
 8018260:	e008      	b.n	8018274 <tcp_input+0x700>
 8018262:	4b34      	ldr	r3, [pc, #208]	@ (8018334 <tcp_input+0x7c0>)
 8018264:	681a      	ldr	r2, [r3, #0]
 8018266:	2300      	movs	r3, #0
 8018268:	69b9      	ldr	r1, [r7, #24]
 801826a:	2000      	movs	r0, #0
 801826c:	f7ff f814 	bl	8017298 <tcp_recv_null>
 8018270:	4603      	mov	r3, r0
 8018272:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018274:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018278:	f113 0f0d 	cmn.w	r3, #13
 801827c:	d051      	beq.n	8018322 <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801827e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d003      	beq.n	801828e <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8018286:	4b2b      	ldr	r3, [pc, #172]	@ (8018334 <tcp_input+0x7c0>)
 8018288:	681a      	ldr	r2, [r3, #0]
 801828a:	69bb      	ldr	r3, [r7, #24]
 801828c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801828e:	4b2a      	ldr	r3, [pc, #168]	@ (8018338 <tcp_input+0x7c4>)
 8018290:	781b      	ldrb	r3, [r3, #0]
 8018292:	f003 0320 	and.w	r3, r3, #32
 8018296:	2b00      	cmp	r3, #0
 8018298:	d030      	beq.n	80182fc <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 801829a:	69bb      	ldr	r3, [r7, #24]
 801829c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d009      	beq.n	80182b6 <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80182a2:	69bb      	ldr	r3, [r7, #24]
 80182a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80182a6:	7b5a      	ldrb	r2, [r3, #13]
 80182a8:	69bb      	ldr	r3, [r7, #24]
 80182aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80182ac:	f042 0220 	orr.w	r2, r2, #32
 80182b0:	b2d2      	uxtb	r2, r2
 80182b2:	735a      	strb	r2, [r3, #13]
 80182b4:	e022      	b.n	80182fc <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80182b6:	69bb      	ldr	r3, [r7, #24]
 80182b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80182ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80182be:	d005      	beq.n	80182cc <tcp_input+0x758>
              pcb->rcv_wnd++;
 80182c0:	69bb      	ldr	r3, [r7, #24]
 80182c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80182c4:	3301      	adds	r3, #1
 80182c6:	b29a      	uxth	r2, r3
 80182c8:	69bb      	ldr	r3, [r7, #24]
 80182ca:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80182cc:	69bb      	ldr	r3, [r7, #24]
 80182ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d00b      	beq.n	80182ee <tcp_input+0x77a>
 80182d6:	69bb      	ldr	r3, [r7, #24]
 80182d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80182dc:	69bb      	ldr	r3, [r7, #24]
 80182de:	6918      	ldr	r0, [r3, #16]
 80182e0:	2300      	movs	r3, #0
 80182e2:	2200      	movs	r2, #0
 80182e4:	69b9      	ldr	r1, [r7, #24]
 80182e6:	47a0      	blx	r4
 80182e8:	4603      	mov	r3, r0
 80182ea:	74fb      	strb	r3, [r7, #19]
 80182ec:	e001      	b.n	80182f2 <tcp_input+0x77e>
 80182ee:	2300      	movs	r3, #0
 80182f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80182f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182f6:	f113 0f0d 	cmn.w	r3, #13
 80182fa:	d02f      	beq.n	801835c <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80182fc:	4b12      	ldr	r3, [pc, #72]	@ (8018348 <tcp_input+0x7d4>)
 80182fe:	2200      	movs	r2, #0
 8018300:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8018302:	69b8      	ldr	r0, [r7, #24]
 8018304:	f000 f89e 	bl	8018444 <tcp_input_delayed_close>
 8018308:	4603      	mov	r3, r0
 801830a:	2b00      	cmp	r3, #0
 801830c:	d128      	bne.n	8018360 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801830e:	69b8      	ldr	r0, [r7, #24]
 8018310:	f002 ffd0 	bl	801b2b4 <tcp_output>
 8018314:	e025      	b.n	8018362 <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018316:	bf00      	nop
 8018318:	e023      	b.n	8018362 <tcp_input+0x7ee>
              goto aborted;
 801831a:	bf00      	nop
 801831c:	e021      	b.n	8018362 <tcp_input+0x7ee>
          goto aborted;
 801831e:	bf00      	nop
 8018320:	e01f      	b.n	8018362 <tcp_input+0x7ee>
            goto aborted;
 8018322:	bf00      	nop
 8018324:	e01d      	b.n	8018362 <tcp_input+0x7ee>
 8018326:	bf00      	nop
 8018328:	2002d358 	.word	0x2002d358
 801832c:	2002d470 	.word	0x2002d470
 8018330:	2002d484 	.word	0x2002d484
 8018334:	2002d4a4 	.word	0x2002d4a4
 8018338:	2002d4a1 	.word	0x2002d4a1
 801833c:	2002d49c 	.word	0x2002d49c
 8018340:	2002d4a0 	.word	0x2002d4a0
 8018344:	2002d49e 	.word	0x2002d49e
 8018348:	2002d4a8 	.word	0x2002d4a8
 801834c:	2002d464 	.word	0x2002d464
 8018350:	08024e70 	.word	0x08024e70
 8018354:	08025024 	.word	0x08025024
 8018358:	08024ebc 	.word	0x08024ebc
              goto aborted;
 801835c:	bf00      	nop
 801835e:	e000      	b.n	8018362 <tcp_input+0x7ee>
          goto aborted;
 8018360:	bf00      	nop
    tcp_input_pcb = NULL;
 8018362:	4b2e      	ldr	r3, [pc, #184]	@ (801841c <tcp_input+0x8a8>)
 8018364:	2200      	movs	r2, #0
 8018366:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8018368:	4b2d      	ldr	r3, [pc, #180]	@ (8018420 <tcp_input+0x8ac>)
 801836a:	2200      	movs	r2, #0
 801836c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801836e:	4b2d      	ldr	r3, [pc, #180]	@ (8018424 <tcp_input+0x8b0>)
 8018370:	685b      	ldr	r3, [r3, #4]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d04e      	beq.n	8018414 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 8018376:	4b2b      	ldr	r3, [pc, #172]	@ (8018424 <tcp_input+0x8b0>)
 8018378:	685b      	ldr	r3, [r3, #4]
 801837a:	4618      	mov	r0, r3
 801837c:	f7fd f8ba 	bl	80154f4 <pbuf_free>
      inseg.p = NULL;
 8018380:	4b28      	ldr	r3, [pc, #160]	@ (8018424 <tcp_input+0x8b0>)
 8018382:	2200      	movs	r2, #0
 8018384:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018386:	e045      	b.n	8018414 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018388:	4b27      	ldr	r3, [pc, #156]	@ (8018428 <tcp_input+0x8b4>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	899b      	ldrh	r3, [r3, #12]
 801838e:	b29b      	uxth	r3, r3
 8018390:	4618      	mov	r0, r3
 8018392:	f7fb fa81 	bl	8013898 <lwip_htons>
 8018396:	4603      	mov	r3, r0
 8018398:	b2db      	uxtb	r3, r3
 801839a:	f003 0304 	and.w	r3, r3, #4
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d128      	bne.n	80183f4 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 80183a2:	4b22      	ldr	r3, [pc, #136]	@ (801842c <tcp_input+0x8b8>)
 80183a4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80183a8:	3301      	adds	r3, #1
 80183aa:	b29a      	uxth	r2, r3
 80183ac:	4b1f      	ldr	r3, [pc, #124]	@ (801842c <tcp_input+0x8b8>)
 80183ae:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 80183b2:	4b1e      	ldr	r3, [pc, #120]	@ (801842c <tcp_input+0x8b8>)
 80183b4:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80183b8:	3301      	adds	r3, #1
 80183ba:	b29a      	uxth	r2, r3
 80183bc:	4b1b      	ldr	r3, [pc, #108]	@ (801842c <tcp_input+0x8b8>)
 80183be:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183c2:	4b1b      	ldr	r3, [pc, #108]	@ (8018430 <tcp_input+0x8bc>)
 80183c4:	6819      	ldr	r1, [r3, #0]
 80183c6:	4b1b      	ldr	r3, [pc, #108]	@ (8018434 <tcp_input+0x8c0>)
 80183c8:	881b      	ldrh	r3, [r3, #0]
 80183ca:	461a      	mov	r2, r3
 80183cc:	4b1a      	ldr	r3, [pc, #104]	@ (8018438 <tcp_input+0x8c4>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183d2:	4b15      	ldr	r3, [pc, #84]	@ (8018428 <tcp_input+0x8b4>)
 80183d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183d6:	885b      	ldrh	r3, [r3, #2]
 80183d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80183da:	4a13      	ldr	r2, [pc, #76]	@ (8018428 <tcp_input+0x8b4>)
 80183dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80183de:	8812      	ldrh	r2, [r2, #0]
 80183e0:	b292      	uxth	r2, r2
 80183e2:	9202      	str	r2, [sp, #8]
 80183e4:	9301      	str	r3, [sp, #4]
 80183e6:	4b15      	ldr	r3, [pc, #84]	@ (801843c <tcp_input+0x8c8>)
 80183e8:	9300      	str	r3, [sp, #0]
 80183ea:	4b15      	ldr	r3, [pc, #84]	@ (8018440 <tcp_input+0x8cc>)
 80183ec:	4602      	mov	r2, r0
 80183ee:	2000      	movs	r0, #0
 80183f0:	f003 fd34 	bl	801be5c <tcp_rst>
    pbuf_free(p);
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f7fd f87d 	bl	80154f4 <pbuf_free>
  return;
 80183fa:	e00b      	b.n	8018414 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 80183fc:	4b0b      	ldr	r3, [pc, #44]	@ (801842c <tcp_input+0x8b8>)
 80183fe:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8018402:	3301      	adds	r3, #1
 8018404:	b29a      	uxth	r2, r3
 8018406:	4b09      	ldr	r3, [pc, #36]	@ (801842c <tcp_input+0x8b8>)
 8018408:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801840c:	6878      	ldr	r0, [r7, #4]
 801840e:	f7fd f871 	bl	80154f4 <pbuf_free>
 8018412:	e000      	b.n	8018416 <tcp_input+0x8a2>
  return;
 8018414:	bf00      	nop
}
 8018416:	3724      	adds	r7, #36	@ 0x24
 8018418:	46bd      	mov	sp, r7
 801841a:	bd90      	pop	{r4, r7, pc}
 801841c:	2002d4a8 	.word	0x2002d4a8
 8018420:	2002d4a4 	.word	0x2002d4a4
 8018424:	2002d470 	.word	0x2002d470
 8018428:	2002d484 	.word	0x2002d484
 801842c:	2002d358 	.word	0x2002d358
 8018430:	2002d498 	.word	0x2002d498
 8018434:	2002d49e 	.word	0x2002d49e
 8018438:	2002d494 	.word	0x2002d494
 801843c:	200270f8 	.word	0x200270f8
 8018440:	200270fc 	.word	0x200270fc

08018444 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b082      	sub	sp, #8
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d106      	bne.n	8018460 <tcp_input_delayed_close+0x1c>
 8018452:	4b17      	ldr	r3, [pc, #92]	@ (80184b0 <tcp_input_delayed_close+0x6c>)
 8018454:	f240 225a 	movw	r2, #602	@ 0x25a
 8018458:	4916      	ldr	r1, [pc, #88]	@ (80184b4 <tcp_input_delayed_close+0x70>)
 801845a:	4817      	ldr	r0, [pc, #92]	@ (80184b8 <tcp_input_delayed_close+0x74>)
 801845c:	f009 f890 	bl	8021580 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018460:	4b16      	ldr	r3, [pc, #88]	@ (80184bc <tcp_input_delayed_close+0x78>)
 8018462:	781b      	ldrb	r3, [r3, #0]
 8018464:	f003 0310 	and.w	r3, r3, #16
 8018468:	2b00      	cmp	r3, #0
 801846a:	d01c      	beq.n	80184a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	8b5b      	ldrh	r3, [r3, #26]
 8018470:	f003 0310 	and.w	r3, r3, #16
 8018474:	2b00      	cmp	r3, #0
 8018476:	d10d      	bne.n	8018494 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801847e:	2b00      	cmp	r3, #0
 8018480:	d008      	beq.n	8018494 <tcp_input_delayed_close+0x50>
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018488:	687a      	ldr	r2, [r7, #4]
 801848a:	6912      	ldr	r2, [r2, #16]
 801848c:	f06f 010e 	mvn.w	r1, #14
 8018490:	4610      	mov	r0, r2
 8018492:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018494:	6879      	ldr	r1, [r7, #4]
 8018496:	480a      	ldr	r0, [pc, #40]	@ (80184c0 <tcp_input_delayed_close+0x7c>)
 8018498:	f7ff f9ee 	bl	8017878 <tcp_pcb_remove>
    tcp_free(pcb);
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	f7fd fc8f 	bl	8015dc0 <tcp_free>
    return 1;
 80184a2:	2301      	movs	r3, #1
 80184a4:	e000      	b.n	80184a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80184a6:	2300      	movs	r3, #0
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3708      	adds	r7, #8
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	08024e70 	.word	0x08024e70
 80184b4:	08025040 	.word	0x08025040
 80184b8:	08024ebc 	.word	0x08024ebc
 80184bc:	2002d4a1 	.word	0x2002d4a1
 80184c0:	2002d464 	.word	0x2002d464

080184c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80184c4:	b590      	push	{r4, r7, lr}
 80184c6:	b08b      	sub	sp, #44	@ 0x2c
 80184c8:	af04      	add	r7, sp, #16
 80184ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80184cc:	4b73      	ldr	r3, [pc, #460]	@ (801869c <tcp_listen_input+0x1d8>)
 80184ce:	781b      	ldrb	r3, [r3, #0]
 80184d0:	f003 0304 	and.w	r3, r3, #4
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	f040 80da 	bne.w	801868e <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d106      	bne.n	80184ee <tcp_listen_input+0x2a>
 80184e0:	4b6f      	ldr	r3, [pc, #444]	@ (80186a0 <tcp_listen_input+0x1dc>)
 80184e2:	f240 2281 	movw	r2, #641	@ 0x281
 80184e6:	496f      	ldr	r1, [pc, #444]	@ (80186a4 <tcp_listen_input+0x1e0>)
 80184e8:	486f      	ldr	r0, [pc, #444]	@ (80186a8 <tcp_listen_input+0x1e4>)
 80184ea:	f009 f849 	bl	8021580 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80184ee:	4b6b      	ldr	r3, [pc, #428]	@ (801869c <tcp_listen_input+0x1d8>)
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	f003 0310 	and.w	r3, r3, #16
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d019      	beq.n	801852e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80184fa:	4b6c      	ldr	r3, [pc, #432]	@ (80186ac <tcp_listen_input+0x1e8>)
 80184fc:	6819      	ldr	r1, [r3, #0]
 80184fe:	4b6c      	ldr	r3, [pc, #432]	@ (80186b0 <tcp_listen_input+0x1ec>)
 8018500:	881b      	ldrh	r3, [r3, #0]
 8018502:	461a      	mov	r2, r3
 8018504:	4b6b      	ldr	r3, [pc, #428]	@ (80186b4 <tcp_listen_input+0x1f0>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801850a:	4b6b      	ldr	r3, [pc, #428]	@ (80186b8 <tcp_listen_input+0x1f4>)
 801850c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801850e:	885b      	ldrh	r3, [r3, #2]
 8018510:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018512:	4a69      	ldr	r2, [pc, #420]	@ (80186b8 <tcp_listen_input+0x1f4>)
 8018514:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018516:	8812      	ldrh	r2, [r2, #0]
 8018518:	b292      	uxth	r2, r2
 801851a:	9202      	str	r2, [sp, #8]
 801851c:	9301      	str	r3, [sp, #4]
 801851e:	4b67      	ldr	r3, [pc, #412]	@ (80186bc <tcp_listen_input+0x1f8>)
 8018520:	9300      	str	r3, [sp, #0]
 8018522:	4b67      	ldr	r3, [pc, #412]	@ (80186c0 <tcp_listen_input+0x1fc>)
 8018524:	4602      	mov	r2, r0
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	f003 fc98 	bl	801be5c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801852c:	e0b1      	b.n	8018692 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 801852e:	4b5b      	ldr	r3, [pc, #364]	@ (801869c <tcp_listen_input+0x1d8>)
 8018530:	781b      	ldrb	r3, [r3, #0]
 8018532:	f003 0302 	and.w	r3, r3, #2
 8018536:	2b00      	cmp	r3, #0
 8018538:	f000 80ab 	beq.w	8018692 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	7d5b      	ldrb	r3, [r3, #21]
 8018540:	4618      	mov	r0, r3
 8018542:	f7fe ffcd 	bl	80174e0 <tcp_alloc>
 8018546:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d119      	bne.n	8018582 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 801854e:	4b5d      	ldr	r3, [pc, #372]	@ (80186c4 <tcp_listen_input+0x200>)
 8018550:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8018554:	3301      	adds	r3, #1
 8018556:	b29a      	uxth	r2, r3
 8018558:	4b5a      	ldr	r3, [pc, #360]	@ (80186c4 <tcp_listen_input+0x200>)
 801855a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	699b      	ldr	r3, [r3, #24]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d00a      	beq.n	801857c <tcp_listen_input+0xb8>
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	699b      	ldr	r3, [r3, #24]
 801856a:	687a      	ldr	r2, [r7, #4]
 801856c:	6910      	ldr	r0, [r2, #16]
 801856e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018572:	2100      	movs	r1, #0
 8018574:	4798      	blx	r3
 8018576:	4603      	mov	r3, r0
 8018578:	73bb      	strb	r3, [r7, #14]
      return;
 801857a:	e08b      	b.n	8018694 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801857c:	23f0      	movs	r3, #240	@ 0xf0
 801857e:	73bb      	strb	r3, [r7, #14]
      return;
 8018580:	e088      	b.n	8018694 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018582:	4b51      	ldr	r3, [pc, #324]	@ (80186c8 <tcp_listen_input+0x204>)
 8018584:	695a      	ldr	r2, [r3, #20]
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801858a:	4b4f      	ldr	r3, [pc, #316]	@ (80186c8 <tcp_listen_input+0x204>)
 801858c:	691a      	ldr	r2, [r3, #16]
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	8ada      	ldrh	r2, [r3, #22]
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801859a:	4b47      	ldr	r3, [pc, #284]	@ (80186b8 <tcp_listen_input+0x1f4>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	881b      	ldrh	r3, [r3, #0]
 80185a0:	b29a      	uxth	r2, r3
 80185a2:	697b      	ldr	r3, [r7, #20]
 80185a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80185a6:	697b      	ldr	r3, [r7, #20]
 80185a8:	2203      	movs	r2, #3
 80185aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80185ac:	4b41      	ldr	r3, [pc, #260]	@ (80186b4 <tcp_listen_input+0x1f0>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	1c5a      	adds	r2, r3, #1
 80185b2:	697b      	ldr	r3, [r7, #20]
 80185b4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80185ba:	697b      	ldr	r3, [r7, #20]
 80185bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80185be:	6978      	ldr	r0, [r7, #20]
 80185c0:	f7ff f9ee 	bl	80179a0 <tcp_next_iss>
 80185c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	693a      	ldr	r2, [r7, #16]
 80185ca:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	693a      	ldr	r2, [r7, #16]
 80185d0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	693a      	ldr	r2, [r7, #16]
 80185d6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	693a      	ldr	r2, [r7, #16]
 80185dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80185de:	4b35      	ldr	r3, [pc, #212]	@ (80186b4 <tcp_listen_input+0x1f0>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	1e5a      	subs	r2, r3, #1
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	691a      	ldr	r2, [r3, #16]
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80185f0:	697b      	ldr	r3, [r7, #20]
 80185f2:	687a      	ldr	r2, [r7, #4]
 80185f4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	7a5b      	ldrb	r3, [r3, #9]
 80185fa:	f003 030c 	and.w	r3, r3, #12
 80185fe:	b2da      	uxtb	r2, r3
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	7a1a      	ldrb	r2, [r3, #8]
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801860c:	4b2f      	ldr	r3, [pc, #188]	@ (80186cc <tcp_listen_input+0x208>)
 801860e:	681a      	ldr	r2, [r3, #0]
 8018610:	697b      	ldr	r3, [r7, #20]
 8018612:	60da      	str	r2, [r3, #12]
 8018614:	4a2d      	ldr	r2, [pc, #180]	@ (80186cc <tcp_listen_input+0x208>)
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	6013      	str	r3, [r2, #0]
 801861a:	f003 fde1 	bl	801c1e0 <tcp_timer_needed>
 801861e:	4b2c      	ldr	r3, [pc, #176]	@ (80186d0 <tcp_listen_input+0x20c>)
 8018620:	2201      	movs	r2, #1
 8018622:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018624:	6978      	ldr	r0, [r7, #20]
 8018626:	f001 fd8d 	bl	801a144 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801862a:	4b23      	ldr	r3, [pc, #140]	@ (80186b8 <tcp_listen_input+0x1f4>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	89db      	ldrh	r3, [r3, #14]
 8018630:	b29a      	uxth	r2, r3
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	3304      	adds	r3, #4
 801864c:	4618      	mov	r0, r3
 801864e:	f006 f91d 	bl	801e88c <ip4_route>
 8018652:	4601      	mov	r1, r0
 8018654:	697b      	ldr	r3, [r7, #20]
 8018656:	3304      	adds	r3, #4
 8018658:	461a      	mov	r2, r3
 801865a:	4620      	mov	r0, r4
 801865c:	f7ff f9c6 	bl	80179ec <tcp_eff_send_mss_netif>
 8018660:	4603      	mov	r3, r0
 8018662:	461a      	mov	r2, r3
 8018664:	697b      	ldr	r3, [r7, #20]
 8018666:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018668:	2112      	movs	r1, #18
 801866a:	6978      	ldr	r0, [r7, #20]
 801866c:	f002 fd22 	bl	801b0b4 <tcp_enqueue_flags>
 8018670:	4603      	mov	r3, r0
 8018672:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d004      	beq.n	8018686 <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 801867c:	2100      	movs	r1, #0
 801867e:	6978      	ldr	r0, [r7, #20]
 8018680:	f7fd fe24 	bl	80162cc <tcp_abandon>
      return;
 8018684:	e006      	b.n	8018694 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 8018686:	6978      	ldr	r0, [r7, #20]
 8018688:	f002 fe14 	bl	801b2b4 <tcp_output>
  return;
 801868c:	e001      	b.n	8018692 <tcp_listen_input+0x1ce>
    return;
 801868e:	bf00      	nop
 8018690:	e000      	b.n	8018694 <tcp_listen_input+0x1d0>
  return;
 8018692:	bf00      	nop
}
 8018694:	371c      	adds	r7, #28
 8018696:	46bd      	mov	sp, r7
 8018698:	bd90      	pop	{r4, r7, pc}
 801869a:	bf00      	nop
 801869c:	2002d4a0 	.word	0x2002d4a0
 80186a0:	08024e70 	.word	0x08024e70
 80186a4:	08025068 	.word	0x08025068
 80186a8:	08024ebc 	.word	0x08024ebc
 80186ac:	2002d498 	.word	0x2002d498
 80186b0:	2002d49e 	.word	0x2002d49e
 80186b4:	2002d494 	.word	0x2002d494
 80186b8:	2002d484 	.word	0x2002d484
 80186bc:	200270f8 	.word	0x200270f8
 80186c0:	200270fc 	.word	0x200270fc
 80186c4:	2002d358 	.word	0x2002d358
 80186c8:	200270e8 	.word	0x200270e8
 80186cc:	2002d464 	.word	0x2002d464
 80186d0:	2002d46c 	.word	0x2002d46c

080186d4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80186d4:	b580      	push	{r7, lr}
 80186d6:	b086      	sub	sp, #24
 80186d8:	af04      	add	r7, sp, #16
 80186da:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80186dc:	4b2f      	ldr	r3, [pc, #188]	@ (801879c <tcp_timewait_input+0xc8>)
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	f003 0304 	and.w	r3, r3, #4
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d153      	bne.n	8018790 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d106      	bne.n	80186fc <tcp_timewait_input+0x28>
 80186ee:	4b2c      	ldr	r3, [pc, #176]	@ (80187a0 <tcp_timewait_input+0xcc>)
 80186f0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80186f4:	492b      	ldr	r1, [pc, #172]	@ (80187a4 <tcp_timewait_input+0xd0>)
 80186f6:	482c      	ldr	r0, [pc, #176]	@ (80187a8 <tcp_timewait_input+0xd4>)
 80186f8:	f008 ff42 	bl	8021580 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80186fc:	4b27      	ldr	r3, [pc, #156]	@ (801879c <tcp_timewait_input+0xc8>)
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	f003 0302 	and.w	r3, r3, #2
 8018704:	2b00      	cmp	r3, #0
 8018706:	d02a      	beq.n	801875e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018708:	4b28      	ldr	r3, [pc, #160]	@ (80187ac <tcp_timewait_input+0xd8>)
 801870a:	681a      	ldr	r2, [r3, #0]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018710:	1ad3      	subs	r3, r2, r3
 8018712:	2b00      	cmp	r3, #0
 8018714:	db2d      	blt.n	8018772 <tcp_timewait_input+0x9e>
 8018716:	4b25      	ldr	r3, [pc, #148]	@ (80187ac <tcp_timewait_input+0xd8>)
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801871e:	6879      	ldr	r1, [r7, #4]
 8018720:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018722:	440b      	add	r3, r1
 8018724:	1ad3      	subs	r3, r2, r3
 8018726:	2b00      	cmp	r3, #0
 8018728:	dc23      	bgt.n	8018772 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801872a:	4b21      	ldr	r3, [pc, #132]	@ (80187b0 <tcp_timewait_input+0xdc>)
 801872c:	6819      	ldr	r1, [r3, #0]
 801872e:	4b21      	ldr	r3, [pc, #132]	@ (80187b4 <tcp_timewait_input+0xe0>)
 8018730:	881b      	ldrh	r3, [r3, #0]
 8018732:	461a      	mov	r2, r3
 8018734:	4b1d      	ldr	r3, [pc, #116]	@ (80187ac <tcp_timewait_input+0xd8>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801873a:	4b1f      	ldr	r3, [pc, #124]	@ (80187b8 <tcp_timewait_input+0xe4>)
 801873c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801873e:	885b      	ldrh	r3, [r3, #2]
 8018740:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018742:	4a1d      	ldr	r2, [pc, #116]	@ (80187b8 <tcp_timewait_input+0xe4>)
 8018744:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018746:	8812      	ldrh	r2, [r2, #0]
 8018748:	b292      	uxth	r2, r2
 801874a:	9202      	str	r2, [sp, #8]
 801874c:	9301      	str	r3, [sp, #4]
 801874e:	4b1b      	ldr	r3, [pc, #108]	@ (80187bc <tcp_timewait_input+0xe8>)
 8018750:	9300      	str	r3, [sp, #0]
 8018752:	4b1b      	ldr	r3, [pc, #108]	@ (80187c0 <tcp_timewait_input+0xec>)
 8018754:	4602      	mov	r2, r0
 8018756:	6878      	ldr	r0, [r7, #4]
 8018758:	f003 fb80 	bl	801be5c <tcp_rst>
      return;
 801875c:	e01b      	b.n	8018796 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801875e:	4b0f      	ldr	r3, [pc, #60]	@ (801879c <tcp_timewait_input+0xc8>)
 8018760:	781b      	ldrb	r3, [r3, #0]
 8018762:	f003 0301 	and.w	r3, r3, #1
 8018766:	2b00      	cmp	r3, #0
 8018768:	d003      	beq.n	8018772 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801876a:	4b16      	ldr	r3, [pc, #88]	@ (80187c4 <tcp_timewait_input+0xf0>)
 801876c:	681a      	ldr	r2, [r3, #0]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018772:	4b10      	ldr	r3, [pc, #64]	@ (80187b4 <tcp_timewait_input+0xe0>)
 8018774:	881b      	ldrh	r3, [r3, #0]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d00c      	beq.n	8018794 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	8b5b      	ldrh	r3, [r3, #26]
 801877e:	f043 0302 	orr.w	r3, r3, #2
 8018782:	b29a      	uxth	r2, r3
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f002 fd93 	bl	801b2b4 <tcp_output>
  }
  return;
 801878e:	e001      	b.n	8018794 <tcp_timewait_input+0xc0>
    return;
 8018790:	bf00      	nop
 8018792:	e000      	b.n	8018796 <tcp_timewait_input+0xc2>
  return;
 8018794:	bf00      	nop
}
 8018796:	3708      	adds	r7, #8
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}
 801879c:	2002d4a0 	.word	0x2002d4a0
 80187a0:	08024e70 	.word	0x08024e70
 80187a4:	08025088 	.word	0x08025088
 80187a8:	08024ebc 	.word	0x08024ebc
 80187ac:	2002d494 	.word	0x2002d494
 80187b0:	2002d498 	.word	0x2002d498
 80187b4:	2002d49e 	.word	0x2002d49e
 80187b8:	2002d484 	.word	0x2002d484
 80187bc:	200270f8 	.word	0x200270f8
 80187c0:	200270fc 	.word	0x200270fc
 80187c4:	2002d458 	.word	0x2002d458

080187c8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80187c8:	b590      	push	{r4, r7, lr}
 80187ca:	b08d      	sub	sp, #52	@ 0x34
 80187cc:	af04      	add	r7, sp, #16
 80187ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80187d0:	2300      	movs	r3, #0
 80187d2:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 80187d4:	2300      	movs	r3, #0
 80187d6:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d106      	bne.n	80187ec <tcp_process+0x24>
 80187de:	4b9d      	ldr	r3, [pc, #628]	@ (8018a54 <tcp_process+0x28c>)
 80187e0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80187e4:	499c      	ldr	r1, [pc, #624]	@ (8018a58 <tcp_process+0x290>)
 80187e6:	489d      	ldr	r0, [pc, #628]	@ (8018a5c <tcp_process+0x294>)
 80187e8:	f008 feca 	bl	8021580 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80187ec:	4b9c      	ldr	r3, [pc, #624]	@ (8018a60 <tcp_process+0x298>)
 80187ee:	781b      	ldrb	r3, [r3, #0]
 80187f0:	f003 0304 	and.w	r3, r3, #4
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d04e      	beq.n	8018896 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	7d1b      	ldrb	r3, [r3, #20]
 80187fc:	2b02      	cmp	r3, #2
 80187fe:	d108      	bne.n	8018812 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018804:	4b97      	ldr	r3, [pc, #604]	@ (8018a64 <tcp_process+0x29c>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	429a      	cmp	r2, r3
 801880a:	d123      	bne.n	8018854 <tcp_process+0x8c>
        acceptable = 1;
 801880c:	2301      	movs	r3, #1
 801880e:	77fb      	strb	r3, [r7, #31]
 8018810:	e020      	b.n	8018854 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018816:	4b94      	ldr	r3, [pc, #592]	@ (8018a68 <tcp_process+0x2a0>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	429a      	cmp	r2, r3
 801881c:	d102      	bne.n	8018824 <tcp_process+0x5c>
        acceptable = 1;
 801881e:	2301      	movs	r3, #1
 8018820:	77fb      	strb	r3, [r7, #31]
 8018822:	e017      	b.n	8018854 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018824:	4b90      	ldr	r3, [pc, #576]	@ (8018a68 <tcp_process+0x2a0>)
 8018826:	681a      	ldr	r2, [r3, #0]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801882c:	1ad3      	subs	r3, r2, r3
 801882e:	2b00      	cmp	r3, #0
 8018830:	db10      	blt.n	8018854 <tcp_process+0x8c>
 8018832:	4b8d      	ldr	r3, [pc, #564]	@ (8018a68 <tcp_process+0x2a0>)
 8018834:	681a      	ldr	r2, [r3, #0]
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801883a:	6879      	ldr	r1, [r7, #4]
 801883c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801883e:	440b      	add	r3, r1
 8018840:	1ad3      	subs	r3, r2, r3
 8018842:	2b00      	cmp	r3, #0
 8018844:	dc06      	bgt.n	8018854 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	8b5b      	ldrh	r3, [r3, #26]
 801884a:	f043 0302 	orr.w	r3, r3, #2
 801884e:	b29a      	uxth	r2, r3
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018854:	7ffb      	ldrb	r3, [r7, #31]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d01b      	beq.n	8018892 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	7d1b      	ldrb	r3, [r3, #20]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d106      	bne.n	8018870 <tcp_process+0xa8>
 8018862:	4b7c      	ldr	r3, [pc, #496]	@ (8018a54 <tcp_process+0x28c>)
 8018864:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8018868:	4980      	ldr	r1, [pc, #512]	@ (8018a6c <tcp_process+0x2a4>)
 801886a:	487c      	ldr	r0, [pc, #496]	@ (8018a5c <tcp_process+0x294>)
 801886c:	f008 fe88 	bl	8021580 <iprintf>
      recv_flags |= TF_RESET;
 8018870:	4b7f      	ldr	r3, [pc, #508]	@ (8018a70 <tcp_process+0x2a8>)
 8018872:	781b      	ldrb	r3, [r3, #0]
 8018874:	f043 0308 	orr.w	r3, r3, #8
 8018878:	b2da      	uxtb	r2, r3
 801887a:	4b7d      	ldr	r3, [pc, #500]	@ (8018a70 <tcp_process+0x2a8>)
 801887c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	8b5b      	ldrh	r3, [r3, #26]
 8018882:	f023 0301 	bic.w	r3, r3, #1
 8018886:	b29a      	uxth	r2, r3
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801888c:	f06f 030d 	mvn.w	r3, #13
 8018890:	e37a      	b.n	8018f88 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018892:	2300      	movs	r3, #0
 8018894:	e378      	b.n	8018f88 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018896:	4b72      	ldr	r3, [pc, #456]	@ (8018a60 <tcp_process+0x298>)
 8018898:	781b      	ldrb	r3, [r3, #0]
 801889a:	f003 0302 	and.w	r3, r3, #2
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d010      	beq.n	80188c4 <tcp_process+0xfc>
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	7d1b      	ldrb	r3, [r3, #20]
 80188a6:	2b02      	cmp	r3, #2
 80188a8:	d00c      	beq.n	80188c4 <tcp_process+0xfc>
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	7d1b      	ldrb	r3, [r3, #20]
 80188ae:	2b03      	cmp	r3, #3
 80188b0:	d008      	beq.n	80188c4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	8b5b      	ldrh	r3, [r3, #26]
 80188b6:	f043 0302 	orr.w	r3, r3, #2
 80188ba:	b29a      	uxth	r2, r3
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80188c0:	2300      	movs	r3, #0
 80188c2:	e361      	b.n	8018f88 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	8b5b      	ldrh	r3, [r3, #26]
 80188c8:	f003 0310 	and.w	r3, r3, #16
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d103      	bne.n	80188d8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80188d0:	4b68      	ldr	r3, [pc, #416]	@ (8018a74 <tcp_process+0x2ac>)
 80188d2:	681a      	ldr	r2, [r3, #0]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2200      	movs	r2, #0
 80188dc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2200      	movs	r2, #0
 80188e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	f001 fc2b 	bl	801a144 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	7d1b      	ldrb	r3, [r3, #20]
 80188f2:	3b02      	subs	r3, #2
 80188f4:	2b07      	cmp	r3, #7
 80188f6:	f200 8337 	bhi.w	8018f68 <tcp_process+0x7a0>
 80188fa:	a201      	add	r2, pc, #4	@ (adr r2, 8018900 <tcp_process+0x138>)
 80188fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018900:	08018921 	.word	0x08018921
 8018904:	08018b51 	.word	0x08018b51
 8018908:	08018cc9 	.word	0x08018cc9
 801890c:	08018cf3 	.word	0x08018cf3
 8018910:	08018e17 	.word	0x08018e17
 8018914:	08018cc9 	.word	0x08018cc9
 8018918:	08018ea3 	.word	0x08018ea3
 801891c:	08018f33 	.word	0x08018f33
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018920:	4b4f      	ldr	r3, [pc, #316]	@ (8018a60 <tcp_process+0x298>)
 8018922:	781b      	ldrb	r3, [r3, #0]
 8018924:	f003 0310 	and.w	r3, r3, #16
 8018928:	2b00      	cmp	r3, #0
 801892a:	f000 80e4 	beq.w	8018af6 <tcp_process+0x32e>
 801892e:	4b4c      	ldr	r3, [pc, #304]	@ (8018a60 <tcp_process+0x298>)
 8018930:	781b      	ldrb	r3, [r3, #0]
 8018932:	f003 0302 	and.w	r3, r3, #2
 8018936:	2b00      	cmp	r3, #0
 8018938:	f000 80dd 	beq.w	8018af6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018940:	1c5a      	adds	r2, r3, #1
 8018942:	4b48      	ldr	r3, [pc, #288]	@ (8018a64 <tcp_process+0x29c>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	429a      	cmp	r2, r3
 8018948:	f040 80d5 	bne.w	8018af6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801894c:	4b46      	ldr	r3, [pc, #280]	@ (8018a68 <tcp_process+0x2a0>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	1c5a      	adds	r2, r3, #1
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801895e:	4b41      	ldr	r3, [pc, #260]	@ (8018a64 <tcp_process+0x29c>)
 8018960:	681a      	ldr	r2, [r3, #0]
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018966:	4b44      	ldr	r3, [pc, #272]	@ (8018a78 <tcp_process+0x2b0>)
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	89db      	ldrh	r3, [r3, #14]
 801896c:	b29a      	uxth	r2, r3
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018980:	4b39      	ldr	r3, [pc, #228]	@ (8018a68 <tcp_process+0x2a0>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	1e5a      	subs	r2, r3, #1
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2204      	movs	r2, #4
 801898e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	3304      	adds	r3, #4
 8018998:	4618      	mov	r0, r3
 801899a:	f005 ff77 	bl	801e88c <ip4_route>
 801899e:	4601      	mov	r1, r0
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	3304      	adds	r3, #4
 80189a4:	461a      	mov	r2, r3
 80189a6:	4620      	mov	r0, r4
 80189a8:	f7ff f820 	bl	80179ec <tcp_eff_send_mss_netif>
 80189ac:	4603      	mov	r3, r0
 80189ae:	461a      	mov	r2, r3
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80189b8:	009a      	lsls	r2, r3, #2
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80189be:	005b      	lsls	r3, r3, #1
 80189c0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80189c4:	428b      	cmp	r3, r1
 80189c6:	bf38      	it	cc
 80189c8:	460b      	movcc	r3, r1
 80189ca:	429a      	cmp	r2, r3
 80189cc:	d204      	bcs.n	80189d8 <tcp_process+0x210>
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80189d2:	009b      	lsls	r3, r3, #2
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	e00d      	b.n	80189f4 <tcp_process+0x22c>
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80189dc:	005b      	lsls	r3, r3, #1
 80189de:	f241 121c 	movw	r2, #4380	@ 0x111c
 80189e2:	4293      	cmp	r3, r2
 80189e4:	d904      	bls.n	80189f0 <tcp_process+0x228>
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80189ea:	005b      	lsls	r3, r3, #1
 80189ec:	b29b      	uxth	r3, r3
 80189ee:	e001      	b.n	80189f4 <tcp_process+0x22c>
 80189f0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80189f4:	687a      	ldr	r2, [r7, #4]
 80189f6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d106      	bne.n	8018a12 <tcp_process+0x24a>
 8018a04:	4b13      	ldr	r3, [pc, #76]	@ (8018a54 <tcp_process+0x28c>)
 8018a06:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8018a0a:	491c      	ldr	r1, [pc, #112]	@ (8018a7c <tcp_process+0x2b4>)
 8018a0c:	4813      	ldr	r0, [pc, #76]	@ (8018a5c <tcp_process+0x294>)
 8018a0e:	f008 fdb7 	bl	8021580 <iprintf>
        --pcb->snd_queuelen;
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a18:	3b01      	subs	r3, #1
 8018a1a:	b29a      	uxth	r2, r3
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a26:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8018a28:	697b      	ldr	r3, [r7, #20]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d12a      	bne.n	8018a84 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a32:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018a34:	697b      	ldr	r3, [r7, #20]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d106      	bne.n	8018a48 <tcp_process+0x280>
 8018a3a:	4b06      	ldr	r3, [pc, #24]	@ (8018a54 <tcp_process+0x28c>)
 8018a3c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8018a40:	490f      	ldr	r1, [pc, #60]	@ (8018a80 <tcp_process+0x2b8>)
 8018a42:	4806      	ldr	r0, [pc, #24]	@ (8018a5c <tcp_process+0x294>)
 8018a44:	f008 fd9c 	bl	8021580 <iprintf>
          pcb->unsent = rseg->next;
 8018a48:	697b      	ldr	r3, [r7, #20]
 8018a4a:	681a      	ldr	r2, [r3, #0]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018a50:	e01c      	b.n	8018a8c <tcp_process+0x2c4>
 8018a52:	bf00      	nop
 8018a54:	08024e70 	.word	0x08024e70
 8018a58:	080250a8 	.word	0x080250a8
 8018a5c:	08024ebc 	.word	0x08024ebc
 8018a60:	2002d4a0 	.word	0x2002d4a0
 8018a64:	2002d498 	.word	0x2002d498
 8018a68:	2002d494 	.word	0x2002d494
 8018a6c:	080250c4 	.word	0x080250c4
 8018a70:	2002d4a1 	.word	0x2002d4a1
 8018a74:	2002d458 	.word	0x2002d458
 8018a78:	2002d484 	.word	0x2002d484
 8018a7c:	080250e4 	.word	0x080250e4
 8018a80:	080250fc 	.word	0x080250fc
        } else {
          pcb->unacked = rseg->next;
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8018a8c:	6978      	ldr	r0, [r7, #20]
 8018a8e:	f7fe fbbe 	bl	801720e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d104      	bne.n	8018aa4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018aa0:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018aa2:	e006      	b.n	8018ab2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	2200      	movs	r2, #0
 8018aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d00a      	beq.n	8018ad2 <tcp_process+0x30a>
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018ac2:	687a      	ldr	r2, [r7, #4]
 8018ac4:	6910      	ldr	r0, [r2, #16]
 8018ac6:	2200      	movs	r2, #0
 8018ac8:	6879      	ldr	r1, [r7, #4]
 8018aca:	4798      	blx	r3
 8018acc:	4603      	mov	r3, r0
 8018ace:	77bb      	strb	r3, [r7, #30]
 8018ad0:	e001      	b.n	8018ad6 <tcp_process+0x30e>
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8018ad6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018ada:	f113 0f0d 	cmn.w	r3, #13
 8018ade:	d102      	bne.n	8018ae6 <tcp_process+0x31e>
          return ERR_ABRT;
 8018ae0:	f06f 030c 	mvn.w	r3, #12
 8018ae4:	e250      	b.n	8018f88 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	8b5b      	ldrh	r3, [r3, #26]
 8018aea:	f043 0302 	orr.w	r3, r3, #2
 8018aee:	b29a      	uxth	r2, r3
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018af4:	e23a      	b.n	8018f6c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018af6:	4b98      	ldr	r3, [pc, #608]	@ (8018d58 <tcp_process+0x590>)
 8018af8:	781b      	ldrb	r3, [r3, #0]
 8018afa:	f003 0310 	and.w	r3, r3, #16
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	f000 8234 	beq.w	8018f6c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b04:	4b95      	ldr	r3, [pc, #596]	@ (8018d5c <tcp_process+0x594>)
 8018b06:	6819      	ldr	r1, [r3, #0]
 8018b08:	4b95      	ldr	r3, [pc, #596]	@ (8018d60 <tcp_process+0x598>)
 8018b0a:	881b      	ldrh	r3, [r3, #0]
 8018b0c:	461a      	mov	r2, r3
 8018b0e:	4b95      	ldr	r3, [pc, #596]	@ (8018d64 <tcp_process+0x59c>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b14:	4b94      	ldr	r3, [pc, #592]	@ (8018d68 <tcp_process+0x5a0>)
 8018b16:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b18:	885b      	ldrh	r3, [r3, #2]
 8018b1a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b1c:	4a92      	ldr	r2, [pc, #584]	@ (8018d68 <tcp_process+0x5a0>)
 8018b1e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b20:	8812      	ldrh	r2, [r2, #0]
 8018b22:	b292      	uxth	r2, r2
 8018b24:	9202      	str	r2, [sp, #8]
 8018b26:	9301      	str	r3, [sp, #4]
 8018b28:	4b90      	ldr	r3, [pc, #576]	@ (8018d6c <tcp_process+0x5a4>)
 8018b2a:	9300      	str	r3, [sp, #0]
 8018b2c:	4b90      	ldr	r3, [pc, #576]	@ (8018d70 <tcp_process+0x5a8>)
 8018b2e:	4602      	mov	r2, r0
 8018b30:	6878      	ldr	r0, [r7, #4]
 8018b32:	f003 f993 	bl	801be5c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018b3c:	2b05      	cmp	r3, #5
 8018b3e:	f200 8215 	bhi.w	8018f6c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	2200      	movs	r2, #0
 8018b46:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8018b48:	6878      	ldr	r0, [r7, #4]
 8018b4a:	f002 ff55 	bl	801b9f8 <tcp_rexmit_rto>
      break;
 8018b4e:	e20d      	b.n	8018f6c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018b50:	4b81      	ldr	r3, [pc, #516]	@ (8018d58 <tcp_process+0x590>)
 8018b52:	781b      	ldrb	r3, [r3, #0]
 8018b54:	f003 0310 	and.w	r3, r3, #16
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	f000 80a1 	beq.w	8018ca0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8018d5c <tcp_process+0x594>)
 8018b60:	681a      	ldr	r2, [r3, #0]
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b66:	1ad3      	subs	r3, r2, r3
 8018b68:	3b01      	subs	r3, #1
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	db7e      	blt.n	8018c6c <tcp_process+0x4a4>
 8018b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8018d5c <tcp_process+0x594>)
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018b76:	1ad3      	subs	r3, r2, r3
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	dc77      	bgt.n	8018c6c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	2204      	movs	r2, #4
 8018b80:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d102      	bne.n	8018b90 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018b8a:	23fa      	movs	r3, #250	@ 0xfa
 8018b8c:	77bb      	strb	r3, [r7, #30]
 8018b8e:	e01d      	b.n	8018bcc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018b94:	699b      	ldr	r3, [r3, #24]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d106      	bne.n	8018ba8 <tcp_process+0x3e0>
 8018b9a:	4b76      	ldr	r3, [pc, #472]	@ (8018d74 <tcp_process+0x5ac>)
 8018b9c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8018ba0:	4975      	ldr	r1, [pc, #468]	@ (8018d78 <tcp_process+0x5b0>)
 8018ba2:	4876      	ldr	r0, [pc, #472]	@ (8018d7c <tcp_process+0x5b4>)
 8018ba4:	f008 fcec 	bl	8021580 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018bac:	699b      	ldr	r3, [r3, #24]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d00a      	beq.n	8018bc8 <tcp_process+0x400>
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018bb6:	699b      	ldr	r3, [r3, #24]
 8018bb8:	687a      	ldr	r2, [r7, #4]
 8018bba:	6910      	ldr	r0, [r2, #16]
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	6879      	ldr	r1, [r7, #4]
 8018bc0:	4798      	blx	r3
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	77bb      	strb	r3, [r7, #30]
 8018bc6:	e001      	b.n	8018bcc <tcp_process+0x404>
 8018bc8:	23f0      	movs	r3, #240	@ 0xf0
 8018bca:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8018bcc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d00a      	beq.n	8018bea <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018bd4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018bd8:	f113 0f0d 	cmn.w	r3, #13
 8018bdc:	d002      	beq.n	8018be4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8018bde:	6878      	ldr	r0, [r7, #4]
 8018be0:	f7fd fc32 	bl	8016448 <tcp_abort>
            }
            return ERR_ABRT;
 8018be4:	f06f 030c 	mvn.w	r3, #12
 8018be8:	e1ce      	b.n	8018f88 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018bea:	6878      	ldr	r0, [r7, #4]
 8018bec:	f000 fae0 	bl	80191b0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018bf0:	4b63      	ldr	r3, [pc, #396]	@ (8018d80 <tcp_process+0x5b8>)
 8018bf2:	881b      	ldrh	r3, [r3, #0]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d005      	beq.n	8018c04 <tcp_process+0x43c>
            recv_acked--;
 8018bf8:	4b61      	ldr	r3, [pc, #388]	@ (8018d80 <tcp_process+0x5b8>)
 8018bfa:	881b      	ldrh	r3, [r3, #0]
 8018bfc:	3b01      	subs	r3, #1
 8018bfe:	b29a      	uxth	r2, r3
 8018c00:	4b5f      	ldr	r3, [pc, #380]	@ (8018d80 <tcp_process+0x5b8>)
 8018c02:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c08:	009a      	lsls	r2, r3, #2
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c0e:	005b      	lsls	r3, r3, #1
 8018c10:	f241 111c 	movw	r1, #4380	@ 0x111c
 8018c14:	428b      	cmp	r3, r1
 8018c16:	bf38      	it	cc
 8018c18:	460b      	movcc	r3, r1
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d204      	bcs.n	8018c28 <tcp_process+0x460>
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c22:	009b      	lsls	r3, r3, #2
 8018c24:	b29b      	uxth	r3, r3
 8018c26:	e00d      	b.n	8018c44 <tcp_process+0x47c>
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c2c:	005b      	lsls	r3, r3, #1
 8018c2e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8018c32:	4293      	cmp	r3, r2
 8018c34:	d904      	bls.n	8018c40 <tcp_process+0x478>
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c3a:	005b      	lsls	r3, r3, #1
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	e001      	b.n	8018c44 <tcp_process+0x47c>
 8018c40:	f241 131c 	movw	r3, #4380	@ 0x111c
 8018c44:	687a      	ldr	r2, [r7, #4]
 8018c46:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8018d84 <tcp_process+0x5bc>)
 8018c4c:	781b      	ldrb	r3, [r3, #0]
 8018c4e:	f003 0320 	and.w	r3, r3, #32
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d037      	beq.n	8018cc6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	8b5b      	ldrh	r3, [r3, #26]
 8018c5a:	f043 0302 	orr.w	r3, r3, #2
 8018c5e:	b29a      	uxth	r2, r3
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2207      	movs	r2, #7
 8018c68:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018c6a:	e02c      	b.n	8018cc6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8018d5c <tcp_process+0x594>)
 8018c6e:	6819      	ldr	r1, [r3, #0]
 8018c70:	4b3b      	ldr	r3, [pc, #236]	@ (8018d60 <tcp_process+0x598>)
 8018c72:	881b      	ldrh	r3, [r3, #0]
 8018c74:	461a      	mov	r2, r3
 8018c76:	4b3b      	ldr	r3, [pc, #236]	@ (8018d64 <tcp_process+0x59c>)
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8018d68 <tcp_process+0x5a0>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c80:	885b      	ldrh	r3, [r3, #2]
 8018c82:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c84:	4a38      	ldr	r2, [pc, #224]	@ (8018d68 <tcp_process+0x5a0>)
 8018c86:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c88:	8812      	ldrh	r2, [r2, #0]
 8018c8a:	b292      	uxth	r2, r2
 8018c8c:	9202      	str	r2, [sp, #8]
 8018c8e:	9301      	str	r3, [sp, #4]
 8018c90:	4b36      	ldr	r3, [pc, #216]	@ (8018d6c <tcp_process+0x5a4>)
 8018c92:	9300      	str	r3, [sp, #0]
 8018c94:	4b36      	ldr	r3, [pc, #216]	@ (8018d70 <tcp_process+0x5a8>)
 8018c96:	4602      	mov	r2, r0
 8018c98:	6878      	ldr	r0, [r7, #4]
 8018c9a:	f003 f8df 	bl	801be5c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018c9e:	e167      	b.n	8018f70 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8018d58 <tcp_process+0x590>)
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	f003 0302 	and.w	r3, r3, #2
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	f000 8161 	beq.w	8018f70 <tcp_process+0x7a8>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cb2:	1e5a      	subs	r2, r3, #1
 8018cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8018d64 <tcp_process+0x59c>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	f040 8159 	bne.w	8018f70 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018cbe:	6878      	ldr	r0, [r7, #4]
 8018cc0:	f002 febc 	bl	801ba3c <tcp_rexmit>
      break;
 8018cc4:	e154      	b.n	8018f70 <tcp_process+0x7a8>
 8018cc6:	e153      	b.n	8018f70 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018cc8:	6878      	ldr	r0, [r7, #4]
 8018cca:	f000 fa71 	bl	80191b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018cce:	4b2d      	ldr	r3, [pc, #180]	@ (8018d84 <tcp_process+0x5bc>)
 8018cd0:	781b      	ldrb	r3, [r3, #0]
 8018cd2:	f003 0320 	and.w	r3, r3, #32
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	f000 814c 	beq.w	8018f74 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	8b5b      	ldrh	r3, [r3, #26]
 8018ce0:	f043 0302 	orr.w	r3, r3, #2
 8018ce4:	b29a      	uxth	r2, r3
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	2207      	movs	r2, #7
 8018cee:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018cf0:	e140      	b.n	8018f74 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018cf2:	6878      	ldr	r0, [r7, #4]
 8018cf4:	f000 fa5c 	bl	80191b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018cf8:	4b22      	ldr	r3, [pc, #136]	@ (8018d84 <tcp_process+0x5bc>)
 8018cfa:	781b      	ldrb	r3, [r3, #0]
 8018cfc:	f003 0320 	and.w	r3, r3, #32
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d071      	beq.n	8018de8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d04:	4b14      	ldr	r3, [pc, #80]	@ (8018d58 <tcp_process+0x590>)
 8018d06:	781b      	ldrb	r3, [r3, #0]
 8018d08:	f003 0310 	and.w	r3, r3, #16
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d060      	beq.n	8018dd2 <tcp_process+0x60a>
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d14:	4b11      	ldr	r3, [pc, #68]	@ (8018d5c <tcp_process+0x594>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	429a      	cmp	r2, r3
 8018d1a:	d15a      	bne.n	8018dd2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d156      	bne.n	8018dd2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	8b5b      	ldrh	r3, [r3, #26]
 8018d28:	f043 0302 	orr.w	r3, r3, #2
 8018d2c:	b29a      	uxth	r2, r3
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	f7fe fd50 	bl	80177d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018d38:	4b13      	ldr	r3, [pc, #76]	@ (8018d88 <tcp_process+0x5c0>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	687a      	ldr	r2, [r7, #4]
 8018d3e:	429a      	cmp	r2, r3
 8018d40:	d105      	bne.n	8018d4e <tcp_process+0x586>
 8018d42:	4b11      	ldr	r3, [pc, #68]	@ (8018d88 <tcp_process+0x5c0>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	68db      	ldr	r3, [r3, #12]
 8018d48:	4a0f      	ldr	r2, [pc, #60]	@ (8018d88 <tcp_process+0x5c0>)
 8018d4a:	6013      	str	r3, [r2, #0]
 8018d4c:	e02e      	b.n	8018dac <tcp_process+0x5e4>
 8018d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8018d88 <tcp_process+0x5c0>)
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	613b      	str	r3, [r7, #16]
 8018d54:	e027      	b.n	8018da6 <tcp_process+0x5de>
 8018d56:	bf00      	nop
 8018d58:	2002d4a0 	.word	0x2002d4a0
 8018d5c:	2002d498 	.word	0x2002d498
 8018d60:	2002d49e 	.word	0x2002d49e
 8018d64:	2002d494 	.word	0x2002d494
 8018d68:	2002d484 	.word	0x2002d484
 8018d6c:	200270f8 	.word	0x200270f8
 8018d70:	200270fc 	.word	0x200270fc
 8018d74:	08024e70 	.word	0x08024e70
 8018d78:	08025110 	.word	0x08025110
 8018d7c:	08024ebc 	.word	0x08024ebc
 8018d80:	2002d49c 	.word	0x2002d49c
 8018d84:	2002d4a1 	.word	0x2002d4a1
 8018d88:	2002d464 	.word	0x2002d464
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	687a      	ldr	r2, [r7, #4]
 8018d92:	429a      	cmp	r2, r3
 8018d94:	d104      	bne.n	8018da0 <tcp_process+0x5d8>
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	68da      	ldr	r2, [r3, #12]
 8018d9a:	693b      	ldr	r3, [r7, #16]
 8018d9c:	60da      	str	r2, [r3, #12]
 8018d9e:	e005      	b.n	8018dac <tcp_process+0x5e4>
 8018da0:	693b      	ldr	r3, [r7, #16]
 8018da2:	68db      	ldr	r3, [r3, #12]
 8018da4:	613b      	str	r3, [r7, #16]
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d1ef      	bne.n	8018d8c <tcp_process+0x5c4>
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	2200      	movs	r2, #0
 8018db0:	60da      	str	r2, [r3, #12]
 8018db2:	4b77      	ldr	r3, [pc, #476]	@ (8018f90 <tcp_process+0x7c8>)
 8018db4:	2201      	movs	r2, #1
 8018db6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	220a      	movs	r2, #10
 8018dbc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018dbe:	4b75      	ldr	r3, [pc, #468]	@ (8018f94 <tcp_process+0x7cc>)
 8018dc0:	681a      	ldr	r2, [r3, #0]
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	60da      	str	r2, [r3, #12]
 8018dc6:	4a73      	ldr	r2, [pc, #460]	@ (8018f94 <tcp_process+0x7cc>)
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6013      	str	r3, [r2, #0]
 8018dcc:	f003 fa08 	bl	801c1e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018dd0:	e0d2      	b.n	8018f78 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	8b5b      	ldrh	r3, [r3, #26]
 8018dd6:	f043 0302 	orr.w	r3, r3, #2
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2208      	movs	r2, #8
 8018de4:	751a      	strb	r2, [r3, #20]
      break;
 8018de6:	e0c7      	b.n	8018f78 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018de8:	4b6b      	ldr	r3, [pc, #428]	@ (8018f98 <tcp_process+0x7d0>)
 8018dea:	781b      	ldrb	r3, [r3, #0]
 8018dec:	f003 0310 	and.w	r3, r3, #16
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	f000 80c1 	beq.w	8018f78 <tcp_process+0x7b0>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018dfa:	4b68      	ldr	r3, [pc, #416]	@ (8018f9c <tcp_process+0x7d4>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	429a      	cmp	r2, r3
 8018e00:	f040 80ba 	bne.w	8018f78 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	f040 80b5 	bne.w	8018f78 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2206      	movs	r2, #6
 8018e12:	751a      	strb	r2, [r3, #20]
      break;
 8018e14:	e0b0      	b.n	8018f78 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018e16:	6878      	ldr	r0, [r7, #4]
 8018e18:	f000 f9ca 	bl	80191b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018e1c:	4b60      	ldr	r3, [pc, #384]	@ (8018fa0 <tcp_process+0x7d8>)
 8018e1e:	781b      	ldrb	r3, [r3, #0]
 8018e20:	f003 0320 	and.w	r3, r3, #32
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	f000 80a9 	beq.w	8018f7c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	8b5b      	ldrh	r3, [r3, #26]
 8018e2e:	f043 0302 	orr.w	r3, r3, #2
 8018e32:	b29a      	uxth	r2, r3
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018e38:	6878      	ldr	r0, [r7, #4]
 8018e3a:	f7fe fccd 	bl	80177d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018e3e:	4b59      	ldr	r3, [pc, #356]	@ (8018fa4 <tcp_process+0x7dc>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	687a      	ldr	r2, [r7, #4]
 8018e44:	429a      	cmp	r2, r3
 8018e46:	d105      	bne.n	8018e54 <tcp_process+0x68c>
 8018e48:	4b56      	ldr	r3, [pc, #344]	@ (8018fa4 <tcp_process+0x7dc>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	68db      	ldr	r3, [r3, #12]
 8018e4e:	4a55      	ldr	r2, [pc, #340]	@ (8018fa4 <tcp_process+0x7dc>)
 8018e50:	6013      	str	r3, [r2, #0]
 8018e52:	e013      	b.n	8018e7c <tcp_process+0x6b4>
 8018e54:	4b53      	ldr	r3, [pc, #332]	@ (8018fa4 <tcp_process+0x7dc>)
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	60fb      	str	r3, [r7, #12]
 8018e5a:	e00c      	b.n	8018e76 <tcp_process+0x6ae>
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	68db      	ldr	r3, [r3, #12]
 8018e60:	687a      	ldr	r2, [r7, #4]
 8018e62:	429a      	cmp	r2, r3
 8018e64:	d104      	bne.n	8018e70 <tcp_process+0x6a8>
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	68da      	ldr	r2, [r3, #12]
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	60da      	str	r2, [r3, #12]
 8018e6e:	e005      	b.n	8018e7c <tcp_process+0x6b4>
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	68db      	ldr	r3, [r3, #12]
 8018e74:	60fb      	str	r3, [r7, #12]
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d1ef      	bne.n	8018e5c <tcp_process+0x694>
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	2200      	movs	r2, #0
 8018e80:	60da      	str	r2, [r3, #12]
 8018e82:	4b43      	ldr	r3, [pc, #268]	@ (8018f90 <tcp_process+0x7c8>)
 8018e84:	2201      	movs	r2, #1
 8018e86:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	220a      	movs	r2, #10
 8018e8c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018e8e:	4b41      	ldr	r3, [pc, #260]	@ (8018f94 <tcp_process+0x7cc>)
 8018e90:	681a      	ldr	r2, [r3, #0]
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	60da      	str	r2, [r3, #12]
 8018e96:	4a3f      	ldr	r2, [pc, #252]	@ (8018f94 <tcp_process+0x7cc>)
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6013      	str	r3, [r2, #0]
 8018e9c:	f003 f9a0 	bl	801c1e0 <tcp_timer_needed>
      }
      break;
 8018ea0:	e06c      	b.n	8018f7c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018ea2:	6878      	ldr	r0, [r7, #4]
 8018ea4:	f000 f984 	bl	80191b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8018f98 <tcp_process+0x7d0>)
 8018eaa:	781b      	ldrb	r3, [r3, #0]
 8018eac:	f003 0310 	and.w	r3, r3, #16
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d065      	beq.n	8018f80 <tcp_process+0x7b8>
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018eb8:	4b38      	ldr	r3, [pc, #224]	@ (8018f9c <tcp_process+0x7d4>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d15f      	bne.n	8018f80 <tcp_process+0x7b8>
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d15b      	bne.n	8018f80 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018ec8:	6878      	ldr	r0, [r7, #4]
 8018eca:	f7fe fc85 	bl	80177d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018ece:	4b35      	ldr	r3, [pc, #212]	@ (8018fa4 <tcp_process+0x7dc>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	687a      	ldr	r2, [r7, #4]
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d105      	bne.n	8018ee4 <tcp_process+0x71c>
 8018ed8:	4b32      	ldr	r3, [pc, #200]	@ (8018fa4 <tcp_process+0x7dc>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	68db      	ldr	r3, [r3, #12]
 8018ede:	4a31      	ldr	r2, [pc, #196]	@ (8018fa4 <tcp_process+0x7dc>)
 8018ee0:	6013      	str	r3, [r2, #0]
 8018ee2:	e013      	b.n	8018f0c <tcp_process+0x744>
 8018ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8018fa4 <tcp_process+0x7dc>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	61bb      	str	r3, [r7, #24]
 8018eea:	e00c      	b.n	8018f06 <tcp_process+0x73e>
 8018eec:	69bb      	ldr	r3, [r7, #24]
 8018eee:	68db      	ldr	r3, [r3, #12]
 8018ef0:	687a      	ldr	r2, [r7, #4]
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d104      	bne.n	8018f00 <tcp_process+0x738>
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	68da      	ldr	r2, [r3, #12]
 8018efa:	69bb      	ldr	r3, [r7, #24]
 8018efc:	60da      	str	r2, [r3, #12]
 8018efe:	e005      	b.n	8018f0c <tcp_process+0x744>
 8018f00:	69bb      	ldr	r3, [r7, #24]
 8018f02:	68db      	ldr	r3, [r3, #12]
 8018f04:	61bb      	str	r3, [r7, #24]
 8018f06:	69bb      	ldr	r3, [r7, #24]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d1ef      	bne.n	8018eec <tcp_process+0x724>
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	2200      	movs	r2, #0
 8018f10:	60da      	str	r2, [r3, #12]
 8018f12:	4b1f      	ldr	r3, [pc, #124]	@ (8018f90 <tcp_process+0x7c8>)
 8018f14:	2201      	movs	r2, #1
 8018f16:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	220a      	movs	r2, #10
 8018f1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8018f94 <tcp_process+0x7cc>)
 8018f20:	681a      	ldr	r2, [r3, #0]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	60da      	str	r2, [r3, #12]
 8018f26:	4a1b      	ldr	r2, [pc, #108]	@ (8018f94 <tcp_process+0x7cc>)
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6013      	str	r3, [r2, #0]
 8018f2c:	f003 f958 	bl	801c1e0 <tcp_timer_needed>
      }
      break;
 8018f30:	e026      	b.n	8018f80 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018f32:	6878      	ldr	r0, [r7, #4]
 8018f34:	f000 f93c 	bl	80191b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018f38:	4b17      	ldr	r3, [pc, #92]	@ (8018f98 <tcp_process+0x7d0>)
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	f003 0310 	and.w	r3, r3, #16
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d01f      	beq.n	8018f84 <tcp_process+0x7bc>
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018f48:	4b14      	ldr	r3, [pc, #80]	@ (8018f9c <tcp_process+0x7d4>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d119      	bne.n	8018f84 <tcp_process+0x7bc>
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d115      	bne.n	8018f84 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018f58:	4b11      	ldr	r3, [pc, #68]	@ (8018fa0 <tcp_process+0x7d8>)
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	f043 0310 	orr.w	r3, r3, #16
 8018f60:	b2da      	uxtb	r2, r3
 8018f62:	4b0f      	ldr	r3, [pc, #60]	@ (8018fa0 <tcp_process+0x7d8>)
 8018f64:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018f66:	e00d      	b.n	8018f84 <tcp_process+0x7bc>
    default:
      break;
 8018f68:	bf00      	nop
 8018f6a:	e00c      	b.n	8018f86 <tcp_process+0x7be>
      break;
 8018f6c:	bf00      	nop
 8018f6e:	e00a      	b.n	8018f86 <tcp_process+0x7be>
      break;
 8018f70:	bf00      	nop
 8018f72:	e008      	b.n	8018f86 <tcp_process+0x7be>
      break;
 8018f74:	bf00      	nop
 8018f76:	e006      	b.n	8018f86 <tcp_process+0x7be>
      break;
 8018f78:	bf00      	nop
 8018f7a:	e004      	b.n	8018f86 <tcp_process+0x7be>
      break;
 8018f7c:	bf00      	nop
 8018f7e:	e002      	b.n	8018f86 <tcp_process+0x7be>
      break;
 8018f80:	bf00      	nop
 8018f82:	e000      	b.n	8018f86 <tcp_process+0x7be>
      break;
 8018f84:	bf00      	nop
  }
  return ERR_OK;
 8018f86:	2300      	movs	r3, #0
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	3724      	adds	r7, #36	@ 0x24
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd90      	pop	{r4, r7, pc}
 8018f90:	2002d46c 	.word	0x2002d46c
 8018f94:	2002d468 	.word	0x2002d468
 8018f98:	2002d4a0 	.word	0x2002d4a0
 8018f9c:	2002d498 	.word	0x2002d498
 8018fa0:	2002d4a1 	.word	0x2002d4a1
 8018fa4:	2002d464 	.word	0x2002d464

08018fa8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018fa8:	b590      	push	{r4, r7, lr}
 8018faa:	b085      	sub	sp, #20
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d106      	bne.n	8018fc6 <tcp_oos_insert_segment+0x1e>
 8018fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80190a8 <tcp_oos_insert_segment+0x100>)
 8018fba:	f240 421f 	movw	r2, #1055	@ 0x41f
 8018fbe:	493b      	ldr	r1, [pc, #236]	@ (80190ac <tcp_oos_insert_segment+0x104>)
 8018fc0:	483b      	ldr	r0, [pc, #236]	@ (80190b0 <tcp_oos_insert_segment+0x108>)
 8018fc2:	f008 fadd 	bl	8021580 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	691b      	ldr	r3, [r3, #16]
 8018fca:	899b      	ldrh	r3, [r3, #12]
 8018fcc:	b29b      	uxth	r3, r3
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7fa fc62 	bl	8013898 <lwip_htons>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	b2db      	uxtb	r3, r3
 8018fd8:	f003 0301 	and.w	r3, r3, #1
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d028      	beq.n	8019032 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018fe0:	6838      	ldr	r0, [r7, #0]
 8018fe2:	f7fe f8ff 	bl	80171e4 <tcp_segs_free>
    next = NULL;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	603b      	str	r3, [r7, #0]
 8018fea:	e056      	b.n	801909a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	691b      	ldr	r3, [r3, #16]
 8018ff0:	899b      	ldrh	r3, [r3, #12]
 8018ff2:	b29b      	uxth	r3, r3
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f7fa fc4f 	bl	8013898 <lwip_htons>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	f003 0301 	and.w	r3, r3, #1
 8019002:	2b00      	cmp	r3, #0
 8019004:	d00d      	beq.n	8019022 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	691b      	ldr	r3, [r3, #16]
 801900a:	899b      	ldrh	r3, [r3, #12]
 801900c:	b29c      	uxth	r4, r3
 801900e:	2001      	movs	r0, #1
 8019010:	f7fa fc42 	bl	8013898 <lwip_htons>
 8019014:	4603      	mov	r3, r0
 8019016:	461a      	mov	r2, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	691b      	ldr	r3, [r3, #16]
 801901c:	4322      	orrs	r2, r4
 801901e:	b292      	uxth	r2, r2
 8019020:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019022:	683b      	ldr	r3, [r7, #0]
 8019024:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	f7fe f8ee 	bl	801720e <tcp_seg_free>
    while (next &&
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d00e      	beq.n	8019056 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	891b      	ldrh	r3, [r3, #8]
 801903c:	461a      	mov	r2, r3
 801903e:	4b1d      	ldr	r3, [pc, #116]	@ (80190b4 <tcp_oos_insert_segment+0x10c>)
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	441a      	add	r2, r3
 8019044:	683b      	ldr	r3, [r7, #0]
 8019046:	691b      	ldr	r3, [r3, #16]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	6839      	ldr	r1, [r7, #0]
 801904c:	8909      	ldrh	r1, [r1, #8]
 801904e:	440b      	add	r3, r1
 8019050:	1ad3      	subs	r3, r2, r3
    while (next &&
 8019052:	2b00      	cmp	r3, #0
 8019054:	daca      	bge.n	8018fec <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8019056:	683b      	ldr	r3, [r7, #0]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d01e      	beq.n	801909a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	891b      	ldrh	r3, [r3, #8]
 8019060:	461a      	mov	r2, r3
 8019062:	4b14      	ldr	r3, [pc, #80]	@ (80190b4 <tcp_oos_insert_segment+0x10c>)
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	441a      	add	r2, r3
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	691b      	ldr	r3, [r3, #16]
 801906c:	685b      	ldr	r3, [r3, #4]
 801906e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019070:	2b00      	cmp	r3, #0
 8019072:	dd12      	ble.n	801909a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	691b      	ldr	r3, [r3, #16]
 8019078:	685b      	ldr	r3, [r3, #4]
 801907a:	b29a      	uxth	r2, r3
 801907c:	4b0d      	ldr	r3, [pc, #52]	@ (80190b4 <tcp_oos_insert_segment+0x10c>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	b29b      	uxth	r3, r3
 8019082:	1ad3      	subs	r3, r2, r3
 8019084:	b29a      	uxth	r2, r3
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	685a      	ldr	r2, [r3, #4]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	891b      	ldrh	r3, [r3, #8]
 8019092:	4619      	mov	r1, r3
 8019094:	4610      	mov	r0, r2
 8019096:	f7fc f88d 	bl	80151b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	683a      	ldr	r2, [r7, #0]
 801909e:	601a      	str	r2, [r3, #0]
}
 80190a0:	bf00      	nop
 80190a2:	3714      	adds	r7, #20
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd90      	pop	{r4, r7, pc}
 80190a8:	08024e70 	.word	0x08024e70
 80190ac:	08025130 	.word	0x08025130
 80190b0:	08024ebc 	.word	0x08024ebc
 80190b4:	2002d494 	.word	0x2002d494

080190b8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80190b8:	b5b0      	push	{r4, r5, r7, lr}
 80190ba:	b086      	sub	sp, #24
 80190bc:	af00      	add	r7, sp, #0
 80190be:	60f8      	str	r0, [r7, #12]
 80190c0:	60b9      	str	r1, [r7, #8]
 80190c2:	607a      	str	r2, [r7, #4]
 80190c4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80190c6:	e03e      	b.n	8019146 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80190cc:	68bb      	ldr	r3, [r7, #8]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7fc fab2 	bl	8015640 <pbuf_clen>
 80190dc:	4603      	mov	r3, r0
 80190de:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80190e6:	8a7a      	ldrh	r2, [r7, #18]
 80190e8:	429a      	cmp	r2, r3
 80190ea:	d906      	bls.n	80190fa <tcp_free_acked_segments+0x42>
 80190ec:	4b2a      	ldr	r3, [pc, #168]	@ (8019198 <tcp_free_acked_segments+0xe0>)
 80190ee:	f240 4257 	movw	r2, #1111	@ 0x457
 80190f2:	492a      	ldr	r1, [pc, #168]	@ (801919c <tcp_free_acked_segments+0xe4>)
 80190f4:	482a      	ldr	r0, [pc, #168]	@ (80191a0 <tcp_free_acked_segments+0xe8>)
 80190f6:	f008 fa43 	bl	8021580 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8019100:	8a7b      	ldrh	r3, [r7, #18]
 8019102:	1ad3      	subs	r3, r2, r3
 8019104:	b29a      	uxth	r2, r3
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	891a      	ldrh	r2, [r3, #8]
 8019110:	4b24      	ldr	r3, [pc, #144]	@ (80191a4 <tcp_free_acked_segments+0xec>)
 8019112:	881b      	ldrh	r3, [r3, #0]
 8019114:	4413      	add	r3, r2
 8019116:	b29a      	uxth	r2, r3
 8019118:	4b22      	ldr	r3, [pc, #136]	@ (80191a4 <tcp_free_acked_segments+0xec>)
 801911a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801911c:	6978      	ldr	r0, [r7, #20]
 801911e:	f7fe f876 	bl	801720e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019128:	2b00      	cmp	r3, #0
 801912a:	d00c      	beq.n	8019146 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d109      	bne.n	8019146 <tcp_free_acked_segments+0x8e>
 8019132:	683b      	ldr	r3, [r7, #0]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d106      	bne.n	8019146 <tcp_free_acked_segments+0x8e>
 8019138:	4b17      	ldr	r3, [pc, #92]	@ (8019198 <tcp_free_acked_segments+0xe0>)
 801913a:	f240 4261 	movw	r2, #1121	@ 0x461
 801913e:	491a      	ldr	r1, [pc, #104]	@ (80191a8 <tcp_free_acked_segments+0xf0>)
 8019140:	4817      	ldr	r0, [pc, #92]	@ (80191a0 <tcp_free_acked_segments+0xe8>)
 8019142:	f008 fa1d 	bl	8021580 <iprintf>
  while (seg_list != NULL &&
 8019146:	68bb      	ldr	r3, [r7, #8]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d020      	beq.n	801918e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	691b      	ldr	r3, [r3, #16]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	4618      	mov	r0, r3
 8019154:	f7fa fbb6 	bl	80138c4 <lwip_htonl>
 8019158:	4604      	mov	r4, r0
 801915a:	68bb      	ldr	r3, [r7, #8]
 801915c:	891b      	ldrh	r3, [r3, #8]
 801915e:	461d      	mov	r5, r3
 8019160:	68bb      	ldr	r3, [r7, #8]
 8019162:	691b      	ldr	r3, [r3, #16]
 8019164:	899b      	ldrh	r3, [r3, #12]
 8019166:	b29b      	uxth	r3, r3
 8019168:	4618      	mov	r0, r3
 801916a:	f7fa fb95 	bl	8013898 <lwip_htons>
 801916e:	4603      	mov	r3, r0
 8019170:	b2db      	uxtb	r3, r3
 8019172:	f003 0303 	and.w	r3, r3, #3
 8019176:	2b00      	cmp	r3, #0
 8019178:	d001      	beq.n	801917e <tcp_free_acked_segments+0xc6>
 801917a:	2301      	movs	r3, #1
 801917c:	e000      	b.n	8019180 <tcp_free_acked_segments+0xc8>
 801917e:	2300      	movs	r3, #0
 8019180:	442b      	add	r3, r5
 8019182:	18e2      	adds	r2, r4, r3
 8019184:	4b09      	ldr	r3, [pc, #36]	@ (80191ac <tcp_free_acked_segments+0xf4>)
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801918a:	2b00      	cmp	r3, #0
 801918c:	dd9c      	ble.n	80190c8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801918e:	68bb      	ldr	r3, [r7, #8]
}
 8019190:	4618      	mov	r0, r3
 8019192:	3718      	adds	r7, #24
 8019194:	46bd      	mov	sp, r7
 8019196:	bdb0      	pop	{r4, r5, r7, pc}
 8019198:	08024e70 	.word	0x08024e70
 801919c:	08025158 	.word	0x08025158
 80191a0:	08024ebc 	.word	0x08024ebc
 80191a4:	2002d49c 	.word	0x2002d49c
 80191a8:	08025180 	.word	0x08025180
 80191ac:	2002d498 	.word	0x2002d498

080191b0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80191b0:	b5b0      	push	{r4, r5, r7, lr}
 80191b2:	b094      	sub	sp, #80	@ 0x50
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80191b8:	2300      	movs	r3, #0
 80191ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d106      	bne.n	80191d0 <tcp_receive+0x20>
 80191c2:	4b91      	ldr	r3, [pc, #580]	@ (8019408 <tcp_receive+0x258>)
 80191c4:	f240 427b 	movw	r2, #1147	@ 0x47b
 80191c8:	4990      	ldr	r1, [pc, #576]	@ (801940c <tcp_receive+0x25c>)
 80191ca:	4891      	ldr	r0, [pc, #580]	@ (8019410 <tcp_receive+0x260>)
 80191cc:	f008 f9d8 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	7d1b      	ldrb	r3, [r3, #20]
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d806      	bhi.n	80191e6 <tcp_receive+0x36>
 80191d8:	4b8b      	ldr	r3, [pc, #556]	@ (8019408 <tcp_receive+0x258>)
 80191da:	f240 427c 	movw	r2, #1148	@ 0x47c
 80191de:	498d      	ldr	r1, [pc, #564]	@ (8019414 <tcp_receive+0x264>)
 80191e0:	488b      	ldr	r0, [pc, #556]	@ (8019410 <tcp_receive+0x260>)
 80191e2:	f008 f9cd 	bl	8021580 <iprintf>

  if (flags & TCP_ACK) {
 80191e6:	4b8c      	ldr	r3, [pc, #560]	@ (8019418 <tcp_receive+0x268>)
 80191e8:	781b      	ldrb	r3, [r3, #0]
 80191ea:	f003 0310 	and.w	r3, r3, #16
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	f000 8264 	beq.w	80196bc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80191fa:	461a      	mov	r2, r3
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019200:	4413      	add	r3, r2
 8019202:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019208:	4b84      	ldr	r3, [pc, #528]	@ (801941c <tcp_receive+0x26c>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	1ad3      	subs	r3, r2, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	db1b      	blt.n	801924a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019216:	4b81      	ldr	r3, [pc, #516]	@ (801941c <tcp_receive+0x26c>)
 8019218:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801921a:	429a      	cmp	r2, r3
 801921c:	d106      	bne.n	801922c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019222:	4b7f      	ldr	r3, [pc, #508]	@ (8019420 <tcp_receive+0x270>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	1ad3      	subs	r3, r2, r3
 8019228:	2b00      	cmp	r3, #0
 801922a:	db0e      	blt.n	801924a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019230:	4b7b      	ldr	r3, [pc, #492]	@ (8019420 <tcp_receive+0x270>)
 8019232:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019234:	429a      	cmp	r2, r3
 8019236:	d125      	bne.n	8019284 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019238:	4b7a      	ldr	r3, [pc, #488]	@ (8019424 <tcp_receive+0x274>)
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	89db      	ldrh	r3, [r3, #14]
 801923e:	b29a      	uxth	r2, r3
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019246:	429a      	cmp	r2, r3
 8019248:	d91c      	bls.n	8019284 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801924a:	4b76      	ldr	r3, [pc, #472]	@ (8019424 <tcp_receive+0x274>)
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	89db      	ldrh	r3, [r3, #14]
 8019250:	b29a      	uxth	r2, r3
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019264:	429a      	cmp	r2, r3
 8019266:	d205      	bcs.n	8019274 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8019274:	4b69      	ldr	r3, [pc, #420]	@ (801941c <tcp_receive+0x26c>)
 8019276:	681a      	ldr	r2, [r3, #0]
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801927c:	4b68      	ldr	r3, [pc, #416]	@ (8019420 <tcp_receive+0x270>)
 801927e:	681a      	ldr	r2, [r3, #0]
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019284:	4b66      	ldr	r3, [pc, #408]	@ (8019420 <tcp_receive+0x270>)
 8019286:	681a      	ldr	r2, [r3, #0]
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801928c:	1ad3      	subs	r3, r2, r3
 801928e:	2b00      	cmp	r3, #0
 8019290:	dc58      	bgt.n	8019344 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8019292:	4b65      	ldr	r3, [pc, #404]	@ (8019428 <tcp_receive+0x278>)
 8019294:	881b      	ldrh	r3, [r3, #0]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d14b      	bne.n	8019332 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801929e:	687a      	ldr	r2, [r7, #4]
 80192a0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80192a4:	4413      	add	r3, r2
 80192a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192a8:	429a      	cmp	r2, r3
 80192aa:	d142      	bne.n	8019332 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	db3d      	blt.n	8019332 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80192ba:	4b59      	ldr	r3, [pc, #356]	@ (8019420 <tcp_receive+0x270>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	429a      	cmp	r2, r3
 80192c0:	d137      	bne.n	8019332 <tcp_receive+0x182>
              found_dupack = 1;
 80192c2:	2301      	movs	r3, #1
 80192c4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80192cc:	2bff      	cmp	r3, #255	@ 0xff
 80192ce:	d007      	beq.n	80192e0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80192d6:	3301      	adds	r3, #1
 80192d8:	b2da      	uxtb	r2, r3
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80192e6:	2b03      	cmp	r3, #3
 80192e8:	d91b      	bls.n	8019322 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80192f4:	4413      	add	r3, r2
 80192f6:	b29a      	uxth	r2, r3
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80192fe:	429a      	cmp	r2, r3
 8019300:	d30a      	bcc.n	8019318 <tcp_receive+0x168>
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801930c:	4413      	add	r3, r2
 801930e:	b29a      	uxth	r2, r3
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019316:	e004      	b.n	8019322 <tcp_receive+0x172>
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801931e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019328:	2b02      	cmp	r3, #2
 801932a:	d902      	bls.n	8019332 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801932c:	6878      	ldr	r0, [r7, #4]
 801932e:	f002 fbf1 	bl	801bb14 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8019332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019334:	2b00      	cmp	r3, #0
 8019336:	f040 8161 	bne.w	80195fc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2200      	movs	r2, #0
 801933e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8019342:	e15b      	b.n	80195fc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019344:	4b36      	ldr	r3, [pc, #216]	@ (8019420 <tcp_receive+0x270>)
 8019346:	681a      	ldr	r2, [r3, #0]
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801934c:	1ad3      	subs	r3, r2, r3
 801934e:	3b01      	subs	r3, #1
 8019350:	2b00      	cmp	r3, #0
 8019352:	f2c0 814e 	blt.w	80195f2 <tcp_receive+0x442>
 8019356:	4b32      	ldr	r3, [pc, #200]	@ (8019420 <tcp_receive+0x270>)
 8019358:	681a      	ldr	r2, [r3, #0]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801935e:	1ad3      	subs	r3, r2, r3
 8019360:	2b00      	cmp	r3, #0
 8019362:	f300 8146 	bgt.w	80195f2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	8b5b      	ldrh	r3, [r3, #26]
 801936a:	f003 0304 	and.w	r3, r3, #4
 801936e:	2b00      	cmp	r3, #0
 8019370:	d010      	beq.n	8019394 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	8b5b      	ldrh	r3, [r3, #26]
 8019376:	f023 0304 	bic.w	r3, r3, #4
 801937a:	b29a      	uxth	r2, r3
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	2200      	movs	r2, #0
 8019390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	2200      	movs	r2, #0
 8019398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80193a2:	10db      	asrs	r3, r3, #3
 80193a4:	b21b      	sxth	r3, r3
 80193a6:	b29a      	uxth	r2, r3
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	4413      	add	r3, r2
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	b21a      	sxth	r2, r3
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80193bc:	4b18      	ldr	r3, [pc, #96]	@ (8019420 <tcp_receive+0x270>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	b29a      	uxth	r2, r3
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80193c6:	b29b      	uxth	r3, r3
 80193c8:	1ad3      	subs	r3, r2, r3
 80193ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	2200      	movs	r2, #0
 80193d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80193d4:	4b12      	ldr	r3, [pc, #72]	@ (8019420 <tcp_receive+0x270>)
 80193d6:	681a      	ldr	r2, [r3, #0]
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	7d1b      	ldrb	r3, [r3, #20]
 80193e0:	2b03      	cmp	r3, #3
 80193e2:	f240 8097 	bls.w	8019514 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d245      	bcs.n	8019482 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	8b5b      	ldrh	r3, [r3, #26]
 80193fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d014      	beq.n	801942c <tcp_receive+0x27c>
 8019402:	2301      	movs	r3, #1
 8019404:	e013      	b.n	801942e <tcp_receive+0x27e>
 8019406:	bf00      	nop
 8019408:	08024e70 	.word	0x08024e70
 801940c:	080251a0 	.word	0x080251a0
 8019410:	08024ebc 	.word	0x08024ebc
 8019414:	080251bc 	.word	0x080251bc
 8019418:	2002d4a0 	.word	0x2002d4a0
 801941c:	2002d494 	.word	0x2002d494
 8019420:	2002d498 	.word	0x2002d498
 8019424:	2002d484 	.word	0x2002d484
 8019428:	2002d49e 	.word	0x2002d49e
 801942c:	2302      	movs	r3, #2
 801942e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019432:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8019436:	b29a      	uxth	r2, r3
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801943c:	fb12 f303 	smulbb	r3, r2, r3
 8019440:	b29b      	uxth	r3, r3
 8019442:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019444:	4293      	cmp	r3, r2
 8019446:	bf28      	it	cs
 8019448:	4613      	movcs	r3, r2
 801944a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019452:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019454:	4413      	add	r3, r2
 8019456:	b29a      	uxth	r2, r3
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801945e:	429a      	cmp	r2, r3
 8019460:	d309      	bcc.n	8019476 <tcp_receive+0x2c6>
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019468:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801946a:	4413      	add	r3, r2
 801946c:	b29a      	uxth	r2, r3
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019474:	e04e      	b.n	8019514 <tcp_receive+0x364>
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801947c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019480:	e048      	b.n	8019514 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019488:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801948a:	4413      	add	r3, r2
 801948c:	b29a      	uxth	r2, r3
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019494:	429a      	cmp	r2, r3
 8019496:	d309      	bcc.n	80194ac <tcp_receive+0x2fc>
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801949e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80194a0:	4413      	add	r3, r2
 80194a2:	b29a      	uxth	r2, r3
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80194aa:	e004      	b.n	80194b6 <tcp_receive+0x306>
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80194b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80194c2:	429a      	cmp	r2, r3
 80194c4:	d326      	bcc.n	8019514 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80194d2:	1ad3      	subs	r3, r2, r3
 80194d4:	b29a      	uxth	r2, r3
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194e6:	4413      	add	r3, r2
 80194e8:	b29a      	uxth	r2, r3
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80194f0:	429a      	cmp	r2, r3
 80194f2:	d30a      	bcc.n	801950a <tcp_receive+0x35a>
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194fe:	4413      	add	r3, r2
 8019500:	b29a      	uxth	r2, r3
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019508:	e004      	b.n	8019514 <tcp_receive+0x364>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019510:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801951c:	4a98      	ldr	r2, [pc, #608]	@ (8019780 <tcp_receive+0x5d0>)
 801951e:	6878      	ldr	r0, [r7, #4]
 8019520:	f7ff fdca 	bl	80190b8 <tcp_free_acked_segments>
 8019524:	4602      	mov	r2, r0
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019532:	4a94      	ldr	r2, [pc, #592]	@ (8019784 <tcp_receive+0x5d4>)
 8019534:	6878      	ldr	r0, [r7, #4]
 8019536:	f7ff fdbf 	bl	80190b8 <tcp_free_acked_segments>
 801953a:	4602      	mov	r2, r0
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019544:	2b00      	cmp	r3, #0
 8019546:	d104      	bne.n	8019552 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801954e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8019550:	e002      	b.n	8019558 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2200      	movs	r2, #0
 8019556:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	2200      	movs	r2, #0
 801955c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019562:	2b00      	cmp	r3, #0
 8019564:	d103      	bne.n	801956e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2200      	movs	r2, #0
 801956a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019574:	4b84      	ldr	r3, [pc, #528]	@ (8019788 <tcp_receive+0x5d8>)
 8019576:	881b      	ldrh	r3, [r3, #0]
 8019578:	4413      	add	r3, r2
 801957a:	b29a      	uxth	r2, r3
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	8b5b      	ldrh	r3, [r3, #26]
 8019586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801958a:	2b00      	cmp	r3, #0
 801958c:	d035      	beq.n	80195fa <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019592:	2b00      	cmp	r3, #0
 8019594:	d118      	bne.n	80195c8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801959a:	2b00      	cmp	r3, #0
 801959c:	d00c      	beq.n	80195b8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80195a6:	691b      	ldr	r3, [r3, #16]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	4618      	mov	r0, r3
 80195ac:	f7fa f98a 	bl	80138c4 <lwip_htonl>
 80195b0:	4603      	mov	r3, r0
 80195b2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	dc20      	bgt.n	80195fa <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	8b5b      	ldrh	r3, [r3, #26]
 80195bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80195c0:	b29a      	uxth	r2, r3
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195c6:	e018      	b.n	80195fa <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80195d0:	691b      	ldr	r3, [r3, #16]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7fa f975 	bl	80138c4 <lwip_htonl>
 80195da:	4603      	mov	r3, r0
 80195dc:	1ae3      	subs	r3, r4, r3
 80195de:	2b00      	cmp	r3, #0
 80195e0:	dc0b      	bgt.n	80195fa <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	8b5b      	ldrh	r3, [r3, #26]
 80195e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80195ea:	b29a      	uxth	r2, r3
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195f0:	e003      	b.n	80195fa <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f002 fc84 	bl	801bf00 <tcp_send_empty_ack>
 80195f8:	e000      	b.n	80195fc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195fa:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019600:	2b00      	cmp	r3, #0
 8019602:	d05b      	beq.n	80196bc <tcp_receive+0x50c>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019608:	4b60      	ldr	r3, [pc, #384]	@ (801978c <tcp_receive+0x5dc>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	1ad3      	subs	r3, r2, r3
 801960e:	2b00      	cmp	r3, #0
 8019610:	da54      	bge.n	80196bc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019612:	4b5f      	ldr	r3, [pc, #380]	@ (8019790 <tcp_receive+0x5e0>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	b29a      	uxth	r2, r3
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801961c:	b29b      	uxth	r3, r3
 801961e:	1ad3      	subs	r3, r2, r3
 8019620:	b29b      	uxth	r3, r3
 8019622:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019626:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019630:	10db      	asrs	r3, r3, #3
 8019632:	b21b      	sxth	r3, r3
 8019634:	b29b      	uxth	r3, r3
 8019636:	1ad3      	subs	r3, r2, r3
 8019638:	b29b      	uxth	r3, r3
 801963a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019644:	b29a      	uxth	r2, r3
 8019646:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801964a:	4413      	add	r3, r2
 801964c:	b29b      	uxth	r3, r3
 801964e:	b21a      	sxth	r2, r3
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8019654:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8019658:	2b00      	cmp	r3, #0
 801965a:	da05      	bge.n	8019668 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801965c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019660:	425b      	negs	r3, r3
 8019662:	b29b      	uxth	r3, r3
 8019664:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019668:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019672:	109b      	asrs	r3, r3, #2
 8019674:	b21b      	sxth	r3, r3
 8019676:	b29b      	uxth	r3, r3
 8019678:	1ad3      	subs	r3, r2, r3
 801967a:	b29b      	uxth	r3, r3
 801967c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019686:	b29a      	uxth	r2, r3
 8019688:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801968c:	4413      	add	r3, r2
 801968e:	b29b      	uxth	r3, r3
 8019690:	b21a      	sxth	r2, r3
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801969c:	10db      	asrs	r3, r3, #3
 801969e:	b21b      	sxth	r3, r3
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80196a8:	b29b      	uxth	r3, r3
 80196aa:	4413      	add	r3, r2
 80196ac:	b29b      	uxth	r3, r3
 80196ae:	b21a      	sxth	r2, r3
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	2200      	movs	r2, #0
 80196ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80196bc:	4b35      	ldr	r3, [pc, #212]	@ (8019794 <tcp_receive+0x5e4>)
 80196be:	881b      	ldrh	r3, [r3, #0]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	f000 84df 	beq.w	801a084 <tcp_receive+0xed4>
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	7d1b      	ldrb	r3, [r3, #20]
 80196ca:	2b06      	cmp	r3, #6
 80196cc:	f200 84da 	bhi.w	801a084 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80196d4:	4b30      	ldr	r3, [pc, #192]	@ (8019798 <tcp_receive+0x5e8>)
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	1ad3      	subs	r3, r2, r3
 80196da:	3b01      	subs	r3, #1
 80196dc:	2b00      	cmp	r3, #0
 80196de:	f2c0 808f 	blt.w	8019800 <tcp_receive+0x650>
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80196e6:	4b2b      	ldr	r3, [pc, #172]	@ (8019794 <tcp_receive+0x5e4>)
 80196e8:	881b      	ldrh	r3, [r3, #0]
 80196ea:	4619      	mov	r1, r3
 80196ec:	4b2a      	ldr	r3, [pc, #168]	@ (8019798 <tcp_receive+0x5e8>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	440b      	add	r3, r1
 80196f2:	1ad3      	subs	r3, r2, r3
 80196f4:	3301      	adds	r3, #1
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	f300 8082 	bgt.w	8019800 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80196fc:	4b27      	ldr	r3, [pc, #156]	@ (801979c <tcp_receive+0x5ec>)
 80196fe:	685b      	ldr	r3, [r3, #4]
 8019700:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019706:	4b24      	ldr	r3, [pc, #144]	@ (8019798 <tcp_receive+0x5e8>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	1ad3      	subs	r3, r2, r3
 801970c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801970e:	4b23      	ldr	r3, [pc, #140]	@ (801979c <tcp_receive+0x5ec>)
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d106      	bne.n	8019724 <tcp_receive+0x574>
 8019716:	4b22      	ldr	r3, [pc, #136]	@ (80197a0 <tcp_receive+0x5f0>)
 8019718:	f240 5294 	movw	r2, #1428	@ 0x594
 801971c:	4921      	ldr	r1, [pc, #132]	@ (80197a4 <tcp_receive+0x5f4>)
 801971e:	4822      	ldr	r0, [pc, #136]	@ (80197a8 <tcp_receive+0x5f8>)
 8019720:	f007 ff2e 	bl	8021580 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019726:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801972a:	4293      	cmp	r3, r2
 801972c:	d906      	bls.n	801973c <tcp_receive+0x58c>
 801972e:	4b1c      	ldr	r3, [pc, #112]	@ (80197a0 <tcp_receive+0x5f0>)
 8019730:	f240 5295 	movw	r2, #1429	@ 0x595
 8019734:	491d      	ldr	r1, [pc, #116]	@ (80197ac <tcp_receive+0x5fc>)
 8019736:	481c      	ldr	r0, [pc, #112]	@ (80197a8 <tcp_receive+0x5f8>)
 8019738:	f007 ff22 	bl	8021580 <iprintf>
      off = (u16_t)off32;
 801973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801973e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019742:	4b16      	ldr	r3, [pc, #88]	@ (801979c <tcp_receive+0x5ec>)
 8019744:	685b      	ldr	r3, [r3, #4]
 8019746:	891b      	ldrh	r3, [r3, #8]
 8019748:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801974c:	429a      	cmp	r2, r3
 801974e:	d906      	bls.n	801975e <tcp_receive+0x5ae>
 8019750:	4b13      	ldr	r3, [pc, #76]	@ (80197a0 <tcp_receive+0x5f0>)
 8019752:	f240 5297 	movw	r2, #1431	@ 0x597
 8019756:	4916      	ldr	r1, [pc, #88]	@ (80197b0 <tcp_receive+0x600>)
 8019758:	4813      	ldr	r0, [pc, #76]	@ (80197a8 <tcp_receive+0x5f8>)
 801975a:	f007 ff11 	bl	8021580 <iprintf>
      inseg.len -= off;
 801975e:	4b0f      	ldr	r3, [pc, #60]	@ (801979c <tcp_receive+0x5ec>)
 8019760:	891a      	ldrh	r2, [r3, #8]
 8019762:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019766:	1ad3      	subs	r3, r2, r3
 8019768:	b29a      	uxth	r2, r3
 801976a:	4b0c      	ldr	r3, [pc, #48]	@ (801979c <tcp_receive+0x5ec>)
 801976c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801976e:	4b0b      	ldr	r3, [pc, #44]	@ (801979c <tcp_receive+0x5ec>)
 8019770:	685b      	ldr	r3, [r3, #4]
 8019772:	891a      	ldrh	r2, [r3, #8]
 8019774:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019778:	1ad3      	subs	r3, r2, r3
 801977a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801977c:	e02a      	b.n	80197d4 <tcp_receive+0x624>
 801977e:	bf00      	nop
 8019780:	080251d8 	.word	0x080251d8
 8019784:	080251e0 	.word	0x080251e0
 8019788:	2002d49c 	.word	0x2002d49c
 801978c:	2002d498 	.word	0x2002d498
 8019790:	2002d458 	.word	0x2002d458
 8019794:	2002d49e 	.word	0x2002d49e
 8019798:	2002d494 	.word	0x2002d494
 801979c:	2002d470 	.word	0x2002d470
 80197a0:	08024e70 	.word	0x08024e70
 80197a4:	080251e8 	.word	0x080251e8
 80197a8:	08024ebc 	.word	0x08024ebc
 80197ac:	080251f8 	.word	0x080251f8
 80197b0:	08025208 	.word	0x08025208
        off -= p->len;
 80197b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197b6:	895b      	ldrh	r3, [r3, #10]
 80197b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80197bc:	1ad3      	subs	r3, r2, r3
 80197be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80197c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197c4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80197c6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80197c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197ca:	2200      	movs	r2, #0
 80197cc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80197ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80197d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197d6:	895b      	ldrh	r3, [r3, #10]
 80197d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80197dc:	429a      	cmp	r2, r3
 80197de:	d8e9      	bhi.n	80197b4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80197e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80197e4:	4619      	mov	r1, r3
 80197e6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80197e8:	f7fb fdf6 	bl	80153d8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197f0:	4a90      	ldr	r2, [pc, #576]	@ (8019a34 <tcp_receive+0x884>)
 80197f2:	6013      	str	r3, [r2, #0]
 80197f4:	4b90      	ldr	r3, [pc, #576]	@ (8019a38 <tcp_receive+0x888>)
 80197f6:	691b      	ldr	r3, [r3, #16]
 80197f8:	4a8e      	ldr	r2, [pc, #568]	@ (8019a34 <tcp_receive+0x884>)
 80197fa:	6812      	ldr	r2, [r2, #0]
 80197fc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80197fe:	e00d      	b.n	801981c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019800:	4b8c      	ldr	r3, [pc, #560]	@ (8019a34 <tcp_receive+0x884>)
 8019802:	681a      	ldr	r2, [r3, #0]
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019808:	1ad3      	subs	r3, r2, r3
 801980a:	2b00      	cmp	r3, #0
 801980c:	da06      	bge.n	801981c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	8b5b      	ldrh	r3, [r3, #26]
 8019812:	f043 0302 	orr.w	r3, r3, #2
 8019816:	b29a      	uxth	r2, r3
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801981c:	4b85      	ldr	r3, [pc, #532]	@ (8019a34 <tcp_receive+0x884>)
 801981e:	681a      	ldr	r2, [r3, #0]
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019824:	1ad3      	subs	r3, r2, r3
 8019826:	2b00      	cmp	r3, #0
 8019828:	f2c0 8427 	blt.w	801a07a <tcp_receive+0xeca>
 801982c:	4b81      	ldr	r3, [pc, #516]	@ (8019a34 <tcp_receive+0x884>)
 801982e:	681a      	ldr	r2, [r3, #0]
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019834:	6879      	ldr	r1, [r7, #4]
 8019836:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019838:	440b      	add	r3, r1
 801983a:	1ad3      	subs	r3, r2, r3
 801983c:	3301      	adds	r3, #1
 801983e:	2b00      	cmp	r3, #0
 8019840:	f300 841b 	bgt.w	801a07a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019848:	4b7a      	ldr	r3, [pc, #488]	@ (8019a34 <tcp_receive+0x884>)
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	429a      	cmp	r2, r3
 801984e:	f040 8298 	bne.w	8019d82 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019852:	4b79      	ldr	r3, [pc, #484]	@ (8019a38 <tcp_receive+0x888>)
 8019854:	891c      	ldrh	r4, [r3, #8]
 8019856:	4b78      	ldr	r3, [pc, #480]	@ (8019a38 <tcp_receive+0x888>)
 8019858:	691b      	ldr	r3, [r3, #16]
 801985a:	899b      	ldrh	r3, [r3, #12]
 801985c:	b29b      	uxth	r3, r3
 801985e:	4618      	mov	r0, r3
 8019860:	f7fa f81a 	bl	8013898 <lwip_htons>
 8019864:	4603      	mov	r3, r0
 8019866:	b2db      	uxtb	r3, r3
 8019868:	f003 0303 	and.w	r3, r3, #3
 801986c:	2b00      	cmp	r3, #0
 801986e:	d001      	beq.n	8019874 <tcp_receive+0x6c4>
 8019870:	2301      	movs	r3, #1
 8019872:	e000      	b.n	8019876 <tcp_receive+0x6c6>
 8019874:	2300      	movs	r3, #0
 8019876:	4423      	add	r3, r4
 8019878:	b29a      	uxth	r2, r3
 801987a:	4b70      	ldr	r3, [pc, #448]	@ (8019a3c <tcp_receive+0x88c>)
 801987c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019882:	4b6e      	ldr	r3, [pc, #440]	@ (8019a3c <tcp_receive+0x88c>)
 8019884:	881b      	ldrh	r3, [r3, #0]
 8019886:	429a      	cmp	r2, r3
 8019888:	d274      	bcs.n	8019974 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801988a:	4b6b      	ldr	r3, [pc, #428]	@ (8019a38 <tcp_receive+0x888>)
 801988c:	691b      	ldr	r3, [r3, #16]
 801988e:	899b      	ldrh	r3, [r3, #12]
 8019890:	b29b      	uxth	r3, r3
 8019892:	4618      	mov	r0, r3
 8019894:	f7fa f800 	bl	8013898 <lwip_htons>
 8019898:	4603      	mov	r3, r0
 801989a:	b2db      	uxtb	r3, r3
 801989c:	f003 0301 	and.w	r3, r3, #1
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d01e      	beq.n	80198e2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80198a4:	4b64      	ldr	r3, [pc, #400]	@ (8019a38 <tcp_receive+0x888>)
 80198a6:	691b      	ldr	r3, [r3, #16]
 80198a8:	899b      	ldrh	r3, [r3, #12]
 80198aa:	b29b      	uxth	r3, r3
 80198ac:	b21b      	sxth	r3, r3
 80198ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80198b2:	b21c      	sxth	r4, r3
 80198b4:	4b60      	ldr	r3, [pc, #384]	@ (8019a38 <tcp_receive+0x888>)
 80198b6:	691b      	ldr	r3, [r3, #16]
 80198b8:	899b      	ldrh	r3, [r3, #12]
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	4618      	mov	r0, r3
 80198be:	f7f9 ffeb 	bl	8013898 <lwip_htons>
 80198c2:	4603      	mov	r3, r0
 80198c4:	b2db      	uxtb	r3, r3
 80198c6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80198ca:	b29b      	uxth	r3, r3
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7f9 ffe3 	bl	8013898 <lwip_htons>
 80198d2:	4603      	mov	r3, r0
 80198d4:	b21b      	sxth	r3, r3
 80198d6:	4323      	orrs	r3, r4
 80198d8:	b21a      	sxth	r2, r3
 80198da:	4b57      	ldr	r3, [pc, #348]	@ (8019a38 <tcp_receive+0x888>)
 80198dc:	691b      	ldr	r3, [r3, #16]
 80198de:	b292      	uxth	r2, r2
 80198e0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80198e6:	4b54      	ldr	r3, [pc, #336]	@ (8019a38 <tcp_receive+0x888>)
 80198e8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80198ea:	4b53      	ldr	r3, [pc, #332]	@ (8019a38 <tcp_receive+0x888>)
 80198ec:	691b      	ldr	r3, [r3, #16]
 80198ee:	899b      	ldrh	r3, [r3, #12]
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	4618      	mov	r0, r3
 80198f4:	f7f9 ffd0 	bl	8013898 <lwip_htons>
 80198f8:	4603      	mov	r3, r0
 80198fa:	b2db      	uxtb	r3, r3
 80198fc:	f003 0302 	and.w	r3, r3, #2
 8019900:	2b00      	cmp	r3, #0
 8019902:	d005      	beq.n	8019910 <tcp_receive+0x760>
            inseg.len -= 1;
 8019904:	4b4c      	ldr	r3, [pc, #304]	@ (8019a38 <tcp_receive+0x888>)
 8019906:	891b      	ldrh	r3, [r3, #8]
 8019908:	3b01      	subs	r3, #1
 801990a:	b29a      	uxth	r2, r3
 801990c:	4b4a      	ldr	r3, [pc, #296]	@ (8019a38 <tcp_receive+0x888>)
 801990e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019910:	4b49      	ldr	r3, [pc, #292]	@ (8019a38 <tcp_receive+0x888>)
 8019912:	685b      	ldr	r3, [r3, #4]
 8019914:	4a48      	ldr	r2, [pc, #288]	@ (8019a38 <tcp_receive+0x888>)
 8019916:	8912      	ldrh	r2, [r2, #8]
 8019918:	4611      	mov	r1, r2
 801991a:	4618      	mov	r0, r3
 801991c:	f7fb fc4a 	bl	80151b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019920:	4b45      	ldr	r3, [pc, #276]	@ (8019a38 <tcp_receive+0x888>)
 8019922:	891c      	ldrh	r4, [r3, #8]
 8019924:	4b44      	ldr	r3, [pc, #272]	@ (8019a38 <tcp_receive+0x888>)
 8019926:	691b      	ldr	r3, [r3, #16]
 8019928:	899b      	ldrh	r3, [r3, #12]
 801992a:	b29b      	uxth	r3, r3
 801992c:	4618      	mov	r0, r3
 801992e:	f7f9 ffb3 	bl	8013898 <lwip_htons>
 8019932:	4603      	mov	r3, r0
 8019934:	b2db      	uxtb	r3, r3
 8019936:	f003 0303 	and.w	r3, r3, #3
 801993a:	2b00      	cmp	r3, #0
 801993c:	d001      	beq.n	8019942 <tcp_receive+0x792>
 801993e:	2301      	movs	r3, #1
 8019940:	e000      	b.n	8019944 <tcp_receive+0x794>
 8019942:	2300      	movs	r3, #0
 8019944:	4423      	add	r3, r4
 8019946:	b29a      	uxth	r2, r3
 8019948:	4b3c      	ldr	r3, [pc, #240]	@ (8019a3c <tcp_receive+0x88c>)
 801994a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801994c:	4b3b      	ldr	r3, [pc, #236]	@ (8019a3c <tcp_receive+0x88c>)
 801994e:	881b      	ldrh	r3, [r3, #0]
 8019950:	461a      	mov	r2, r3
 8019952:	4b38      	ldr	r3, [pc, #224]	@ (8019a34 <tcp_receive+0x884>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	441a      	add	r2, r3
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801995c:	6879      	ldr	r1, [r7, #4]
 801995e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019960:	440b      	add	r3, r1
 8019962:	429a      	cmp	r2, r3
 8019964:	d006      	beq.n	8019974 <tcp_receive+0x7c4>
 8019966:	4b36      	ldr	r3, [pc, #216]	@ (8019a40 <tcp_receive+0x890>)
 8019968:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801996c:	4935      	ldr	r1, [pc, #212]	@ (8019a44 <tcp_receive+0x894>)
 801996e:	4836      	ldr	r0, [pc, #216]	@ (8019a48 <tcp_receive+0x898>)
 8019970:	f007 fe06 	bl	8021580 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019978:	2b00      	cmp	r3, #0
 801997a:	f000 80e6 	beq.w	8019b4a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801997e:	4b2e      	ldr	r3, [pc, #184]	@ (8019a38 <tcp_receive+0x888>)
 8019980:	691b      	ldr	r3, [r3, #16]
 8019982:	899b      	ldrh	r3, [r3, #12]
 8019984:	b29b      	uxth	r3, r3
 8019986:	4618      	mov	r0, r3
 8019988:	f7f9 ff86 	bl	8013898 <lwip_htons>
 801998c:	4603      	mov	r3, r0
 801998e:	b2db      	uxtb	r3, r3
 8019990:	f003 0301 	and.w	r3, r3, #1
 8019994:	2b00      	cmp	r3, #0
 8019996:	d010      	beq.n	80199ba <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019998:	e00a      	b.n	80199b0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801999e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80199a4:	681a      	ldr	r2, [r3, #0]
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80199aa:	68f8      	ldr	r0, [r7, #12]
 80199ac:	f7fd fc2f 	bl	801720e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d1f0      	bne.n	801999a <tcp_receive+0x7ea>
 80199b8:	e0c7      	b.n	8019b4a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80199be:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80199c0:	e051      	b.n	8019a66 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80199c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80199c4:	691b      	ldr	r3, [r3, #16]
 80199c6:	899b      	ldrh	r3, [r3, #12]
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7f9 ff64 	bl	8013898 <lwip_htons>
 80199d0:	4603      	mov	r3, r0
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	f003 0301 	and.w	r3, r3, #1
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d03c      	beq.n	8019a56 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80199dc:	4b16      	ldr	r3, [pc, #88]	@ (8019a38 <tcp_receive+0x888>)
 80199de:	691b      	ldr	r3, [r3, #16]
 80199e0:	899b      	ldrh	r3, [r3, #12]
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	4618      	mov	r0, r3
 80199e6:	f7f9 ff57 	bl	8013898 <lwip_htons>
 80199ea:	4603      	mov	r3, r0
 80199ec:	b2db      	uxtb	r3, r3
 80199ee:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d12f      	bne.n	8019a56 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80199f6:	4b10      	ldr	r3, [pc, #64]	@ (8019a38 <tcp_receive+0x888>)
 80199f8:	691b      	ldr	r3, [r3, #16]
 80199fa:	899b      	ldrh	r3, [r3, #12]
 80199fc:	b29c      	uxth	r4, r3
 80199fe:	2001      	movs	r0, #1
 8019a00:	f7f9 ff4a 	bl	8013898 <lwip_htons>
 8019a04:	4603      	mov	r3, r0
 8019a06:	461a      	mov	r2, r3
 8019a08:	4b0b      	ldr	r3, [pc, #44]	@ (8019a38 <tcp_receive+0x888>)
 8019a0a:	691b      	ldr	r3, [r3, #16]
 8019a0c:	4322      	orrs	r2, r4
 8019a0e:	b292      	uxth	r2, r2
 8019a10:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019a12:	4b09      	ldr	r3, [pc, #36]	@ (8019a38 <tcp_receive+0x888>)
 8019a14:	891c      	ldrh	r4, [r3, #8]
 8019a16:	4b08      	ldr	r3, [pc, #32]	@ (8019a38 <tcp_receive+0x888>)
 8019a18:	691b      	ldr	r3, [r3, #16]
 8019a1a:	899b      	ldrh	r3, [r3, #12]
 8019a1c:	b29b      	uxth	r3, r3
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7f9 ff3a 	bl	8013898 <lwip_htons>
 8019a24:	4603      	mov	r3, r0
 8019a26:	b2db      	uxtb	r3, r3
 8019a28:	f003 0303 	and.w	r3, r3, #3
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d00d      	beq.n	8019a4c <tcp_receive+0x89c>
 8019a30:	2301      	movs	r3, #1
 8019a32:	e00c      	b.n	8019a4e <tcp_receive+0x89e>
 8019a34:	2002d494 	.word	0x2002d494
 8019a38:	2002d470 	.word	0x2002d470
 8019a3c:	2002d49e 	.word	0x2002d49e
 8019a40:	08024e70 	.word	0x08024e70
 8019a44:	08025218 	.word	0x08025218
 8019a48:	08024ebc 	.word	0x08024ebc
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	4423      	add	r3, r4
 8019a50:	b29a      	uxth	r2, r3
 8019a52:	4b98      	ldr	r3, [pc, #608]	@ (8019cb4 <tcp_receive+0xb04>)
 8019a54:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a58:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8019a60:	6938      	ldr	r0, [r7, #16]
 8019a62:	f7fd fbd4 	bl	801720e <tcp_seg_free>
            while (next &&
 8019a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d00e      	beq.n	8019a8a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019a6c:	4b91      	ldr	r3, [pc, #580]	@ (8019cb4 <tcp_receive+0xb04>)
 8019a6e:	881b      	ldrh	r3, [r3, #0]
 8019a70:	461a      	mov	r2, r3
 8019a72:	4b91      	ldr	r3, [pc, #580]	@ (8019cb8 <tcp_receive+0xb08>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	441a      	add	r2, r3
 8019a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a7a:	691b      	ldr	r3, [r3, #16]
 8019a7c:	685b      	ldr	r3, [r3, #4]
 8019a7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019a80:	8909      	ldrh	r1, [r1, #8]
 8019a82:	440b      	add	r3, r1
 8019a84:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	da9b      	bge.n	80199c2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d059      	beq.n	8019b44 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019a90:	4b88      	ldr	r3, [pc, #544]	@ (8019cb4 <tcp_receive+0xb04>)
 8019a92:	881b      	ldrh	r3, [r3, #0]
 8019a94:	461a      	mov	r2, r3
 8019a96:	4b88      	ldr	r3, [pc, #544]	@ (8019cb8 <tcp_receive+0xb08>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	441a      	add	r2, r3
 8019a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a9e:	691b      	ldr	r3, [r3, #16]
 8019aa0:	685b      	ldr	r3, [r3, #4]
 8019aa2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	dd4d      	ble.n	8019b44 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019aaa:	691b      	ldr	r3, [r3, #16]
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	b29a      	uxth	r2, r3
 8019ab0:	4b81      	ldr	r3, [pc, #516]	@ (8019cb8 <tcp_receive+0xb08>)
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	b29b      	uxth	r3, r3
 8019ab6:	1ad3      	subs	r3, r2, r3
 8019ab8:	b29a      	uxth	r2, r3
 8019aba:	4b80      	ldr	r3, [pc, #512]	@ (8019cbc <tcp_receive+0xb0c>)
 8019abc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019abe:	4b7f      	ldr	r3, [pc, #508]	@ (8019cbc <tcp_receive+0xb0c>)
 8019ac0:	691b      	ldr	r3, [r3, #16]
 8019ac2:	899b      	ldrh	r3, [r3, #12]
 8019ac4:	b29b      	uxth	r3, r3
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f7f9 fee6 	bl	8013898 <lwip_htons>
 8019acc:	4603      	mov	r3, r0
 8019ace:	b2db      	uxtb	r3, r3
 8019ad0:	f003 0302 	and.w	r3, r3, #2
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d005      	beq.n	8019ae4 <tcp_receive+0x934>
                inseg.len -= 1;
 8019ad8:	4b78      	ldr	r3, [pc, #480]	@ (8019cbc <tcp_receive+0xb0c>)
 8019ada:	891b      	ldrh	r3, [r3, #8]
 8019adc:	3b01      	subs	r3, #1
 8019ade:	b29a      	uxth	r2, r3
 8019ae0:	4b76      	ldr	r3, [pc, #472]	@ (8019cbc <tcp_receive+0xb0c>)
 8019ae2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019ae4:	4b75      	ldr	r3, [pc, #468]	@ (8019cbc <tcp_receive+0xb0c>)
 8019ae6:	685b      	ldr	r3, [r3, #4]
 8019ae8:	4a74      	ldr	r2, [pc, #464]	@ (8019cbc <tcp_receive+0xb0c>)
 8019aea:	8912      	ldrh	r2, [r2, #8]
 8019aec:	4611      	mov	r1, r2
 8019aee:	4618      	mov	r0, r3
 8019af0:	f7fb fb60 	bl	80151b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019af4:	4b71      	ldr	r3, [pc, #452]	@ (8019cbc <tcp_receive+0xb0c>)
 8019af6:	891c      	ldrh	r4, [r3, #8]
 8019af8:	4b70      	ldr	r3, [pc, #448]	@ (8019cbc <tcp_receive+0xb0c>)
 8019afa:	691b      	ldr	r3, [r3, #16]
 8019afc:	899b      	ldrh	r3, [r3, #12]
 8019afe:	b29b      	uxth	r3, r3
 8019b00:	4618      	mov	r0, r3
 8019b02:	f7f9 fec9 	bl	8013898 <lwip_htons>
 8019b06:	4603      	mov	r3, r0
 8019b08:	b2db      	uxtb	r3, r3
 8019b0a:	f003 0303 	and.w	r3, r3, #3
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d001      	beq.n	8019b16 <tcp_receive+0x966>
 8019b12:	2301      	movs	r3, #1
 8019b14:	e000      	b.n	8019b18 <tcp_receive+0x968>
 8019b16:	2300      	movs	r3, #0
 8019b18:	4423      	add	r3, r4
 8019b1a:	b29a      	uxth	r2, r3
 8019b1c:	4b65      	ldr	r3, [pc, #404]	@ (8019cb4 <tcp_receive+0xb04>)
 8019b1e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019b20:	4b64      	ldr	r3, [pc, #400]	@ (8019cb4 <tcp_receive+0xb04>)
 8019b22:	881b      	ldrh	r3, [r3, #0]
 8019b24:	461a      	mov	r2, r3
 8019b26:	4b64      	ldr	r3, [pc, #400]	@ (8019cb8 <tcp_receive+0xb08>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	441a      	add	r2, r3
 8019b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b2e:	691b      	ldr	r3, [r3, #16]
 8019b30:	685b      	ldr	r3, [r3, #4]
 8019b32:	429a      	cmp	r2, r3
 8019b34:	d006      	beq.n	8019b44 <tcp_receive+0x994>
 8019b36:	4b62      	ldr	r3, [pc, #392]	@ (8019cc0 <tcp_receive+0xb10>)
 8019b38:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8019b3c:	4961      	ldr	r1, [pc, #388]	@ (8019cc4 <tcp_receive+0xb14>)
 8019b3e:	4862      	ldr	r0, [pc, #392]	@ (8019cc8 <tcp_receive+0xb18>)
 8019b40:	f007 fd1e 	bl	8021580 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019b48:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8019cb4 <tcp_receive+0xb04>)
 8019b4c:	881b      	ldrh	r3, [r3, #0]
 8019b4e:	461a      	mov	r2, r3
 8019b50:	4b59      	ldr	r3, [pc, #356]	@ (8019cb8 <tcp_receive+0xb08>)
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	441a      	add	r2, r3
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019b5e:	4b55      	ldr	r3, [pc, #340]	@ (8019cb4 <tcp_receive+0xb04>)
 8019b60:	881b      	ldrh	r3, [r3, #0]
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d206      	bcs.n	8019b74 <tcp_receive+0x9c4>
 8019b66:	4b56      	ldr	r3, [pc, #344]	@ (8019cc0 <tcp_receive+0xb10>)
 8019b68:	f240 6207 	movw	r2, #1543	@ 0x607
 8019b6c:	4957      	ldr	r1, [pc, #348]	@ (8019ccc <tcp_receive+0xb1c>)
 8019b6e:	4856      	ldr	r0, [pc, #344]	@ (8019cc8 <tcp_receive+0xb18>)
 8019b70:	f007 fd06 	bl	8021580 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019b78:	4b4e      	ldr	r3, [pc, #312]	@ (8019cb4 <tcp_receive+0xb04>)
 8019b7a:	881b      	ldrh	r3, [r3, #0]
 8019b7c:	1ad3      	subs	r3, r2, r3
 8019b7e:	b29a      	uxth	r2, r3
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019b84:	6878      	ldr	r0, [r7, #4]
 8019b86:	f7fc fd03 	bl	8016590 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8019cbc <tcp_receive+0xb0c>)
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	891b      	ldrh	r3, [r3, #8]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d006      	beq.n	8019ba2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019b94:	4b49      	ldr	r3, [pc, #292]	@ (8019cbc <tcp_receive+0xb0c>)
 8019b96:	685b      	ldr	r3, [r3, #4]
 8019b98:	4a4d      	ldr	r2, [pc, #308]	@ (8019cd0 <tcp_receive+0xb20>)
 8019b9a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019b9c:	4b47      	ldr	r3, [pc, #284]	@ (8019cbc <tcp_receive+0xb0c>)
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019ba2:	4b46      	ldr	r3, [pc, #280]	@ (8019cbc <tcp_receive+0xb0c>)
 8019ba4:	691b      	ldr	r3, [r3, #16]
 8019ba6:	899b      	ldrh	r3, [r3, #12]
 8019ba8:	b29b      	uxth	r3, r3
 8019baa:	4618      	mov	r0, r3
 8019bac:	f7f9 fe74 	bl	8013898 <lwip_htons>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	f003 0301 	and.w	r3, r3, #1
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	f000 80b8 	beq.w	8019d2e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019bbe:	4b45      	ldr	r3, [pc, #276]	@ (8019cd4 <tcp_receive+0xb24>)
 8019bc0:	781b      	ldrb	r3, [r3, #0]
 8019bc2:	f043 0320 	orr.w	r3, r3, #32
 8019bc6:	b2da      	uxtb	r2, r3
 8019bc8:	4b42      	ldr	r3, [pc, #264]	@ (8019cd4 <tcp_receive+0xb24>)
 8019bca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019bcc:	e0af      	b.n	8019d2e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019bd2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019bd8:	691b      	ldr	r3, [r3, #16]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	4a36      	ldr	r2, [pc, #216]	@ (8019cb8 <tcp_receive+0xb08>)
 8019bde:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019be0:	68bb      	ldr	r3, [r7, #8]
 8019be2:	891b      	ldrh	r3, [r3, #8]
 8019be4:	461c      	mov	r4, r3
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	691b      	ldr	r3, [r3, #16]
 8019bea:	899b      	ldrh	r3, [r3, #12]
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f7f9 fe52 	bl	8013898 <lwip_htons>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	b2db      	uxtb	r3, r3
 8019bf8:	f003 0303 	and.w	r3, r3, #3
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d001      	beq.n	8019c04 <tcp_receive+0xa54>
 8019c00:	2301      	movs	r3, #1
 8019c02:	e000      	b.n	8019c06 <tcp_receive+0xa56>
 8019c04:	2300      	movs	r3, #0
 8019c06:	191a      	adds	r2, r3, r4
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c0c:	441a      	add	r2, r3
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019c16:	461c      	mov	r4, r3
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	891b      	ldrh	r3, [r3, #8]
 8019c1c:	461d      	mov	r5, r3
 8019c1e:	68bb      	ldr	r3, [r7, #8]
 8019c20:	691b      	ldr	r3, [r3, #16]
 8019c22:	899b      	ldrh	r3, [r3, #12]
 8019c24:	b29b      	uxth	r3, r3
 8019c26:	4618      	mov	r0, r3
 8019c28:	f7f9 fe36 	bl	8013898 <lwip_htons>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	b2db      	uxtb	r3, r3
 8019c30:	f003 0303 	and.w	r3, r3, #3
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d001      	beq.n	8019c3c <tcp_receive+0xa8c>
 8019c38:	2301      	movs	r3, #1
 8019c3a:	e000      	b.n	8019c3e <tcp_receive+0xa8e>
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	442b      	add	r3, r5
 8019c40:	429c      	cmp	r4, r3
 8019c42:	d206      	bcs.n	8019c52 <tcp_receive+0xaa2>
 8019c44:	4b1e      	ldr	r3, [pc, #120]	@ (8019cc0 <tcp_receive+0xb10>)
 8019c46:	f240 622b 	movw	r2, #1579	@ 0x62b
 8019c4a:	4923      	ldr	r1, [pc, #140]	@ (8019cd8 <tcp_receive+0xb28>)
 8019c4c:	481e      	ldr	r0, [pc, #120]	@ (8019cc8 <tcp_receive+0xb18>)
 8019c4e:	f007 fc97 	bl	8021580 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	891b      	ldrh	r3, [r3, #8]
 8019c56:	461c      	mov	r4, r3
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	691b      	ldr	r3, [r3, #16]
 8019c5c:	899b      	ldrh	r3, [r3, #12]
 8019c5e:	b29b      	uxth	r3, r3
 8019c60:	4618      	mov	r0, r3
 8019c62:	f7f9 fe19 	bl	8013898 <lwip_htons>
 8019c66:	4603      	mov	r3, r0
 8019c68:	b2db      	uxtb	r3, r3
 8019c6a:	f003 0303 	and.w	r3, r3, #3
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d001      	beq.n	8019c76 <tcp_receive+0xac6>
 8019c72:	2301      	movs	r3, #1
 8019c74:	e000      	b.n	8019c78 <tcp_receive+0xac8>
 8019c76:	2300      	movs	r3, #0
 8019c78:	1919      	adds	r1, r3, r4
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019c7e:	b28b      	uxth	r3, r1
 8019c80:	1ad3      	subs	r3, r2, r3
 8019c82:	b29a      	uxth	r2, r3
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f7fc fc81 	bl	8016590 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	685b      	ldr	r3, [r3, #4]
 8019c92:	891b      	ldrh	r3, [r3, #8]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d028      	beq.n	8019cea <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019c98:	4b0d      	ldr	r3, [pc, #52]	@ (8019cd0 <tcp_receive+0xb20>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d01d      	beq.n	8019cdc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8019cd0 <tcp_receive+0xb20>)
 8019ca2:	681a      	ldr	r2, [r3, #0]
 8019ca4:	68bb      	ldr	r3, [r7, #8]
 8019ca6:	685b      	ldr	r3, [r3, #4]
 8019ca8:	4619      	mov	r1, r3
 8019caa:	4610      	mov	r0, r2
 8019cac:	f7fb fd08 	bl	80156c0 <pbuf_cat>
 8019cb0:	e018      	b.n	8019ce4 <tcp_receive+0xb34>
 8019cb2:	bf00      	nop
 8019cb4:	2002d49e 	.word	0x2002d49e
 8019cb8:	2002d494 	.word	0x2002d494
 8019cbc:	2002d470 	.word	0x2002d470
 8019cc0:	08024e70 	.word	0x08024e70
 8019cc4:	08025250 	.word	0x08025250
 8019cc8:	08024ebc 	.word	0x08024ebc
 8019ccc:	0802528c 	.word	0x0802528c
 8019cd0:	2002d4a4 	.word	0x2002d4a4
 8019cd4:	2002d4a1 	.word	0x2002d4a1
 8019cd8:	080252ac 	.word	0x080252ac
            } else {
              recv_data = cseg->p;
 8019cdc:	68bb      	ldr	r3, [r7, #8]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	4a70      	ldr	r2, [pc, #448]	@ (8019ea4 <tcp_receive+0xcf4>)
 8019ce2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019cea:	68bb      	ldr	r3, [r7, #8]
 8019cec:	691b      	ldr	r3, [r3, #16]
 8019cee:	899b      	ldrh	r3, [r3, #12]
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7f9 fdd0 	bl	8013898 <lwip_htons>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	b2db      	uxtb	r3, r3
 8019cfc:	f003 0301 	and.w	r3, r3, #1
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d00d      	beq.n	8019d20 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019d04:	4b68      	ldr	r3, [pc, #416]	@ (8019ea8 <tcp_receive+0xcf8>)
 8019d06:	781b      	ldrb	r3, [r3, #0]
 8019d08:	f043 0320 	orr.w	r3, r3, #32
 8019d0c:	b2da      	uxtb	r2, r3
 8019d0e:	4b66      	ldr	r3, [pc, #408]	@ (8019ea8 <tcp_receive+0xcf8>)
 8019d10:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	7d1b      	ldrb	r3, [r3, #20]
 8019d16:	2b04      	cmp	r3, #4
 8019d18:	d102      	bne.n	8019d20 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	2207      	movs	r2, #7
 8019d1e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	681a      	ldr	r2, [r3, #0]
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8019d28:	68b8      	ldr	r0, [r7, #8]
 8019d2a:	f7fd fa70 	bl	801720e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d008      	beq.n	8019d48 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d3a:	691b      	ldr	r3, [r3, #16]
 8019d3c:	685a      	ldr	r2, [r3, #4]
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8019d42:	429a      	cmp	r2, r3
 8019d44:	f43f af43 	beq.w	8019bce <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	8b5b      	ldrh	r3, [r3, #26]
 8019d4c:	f003 0301 	and.w	r3, r3, #1
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d00e      	beq.n	8019d72 <tcp_receive+0xbc2>
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	8b5b      	ldrh	r3, [r3, #26]
 8019d58:	f023 0301 	bic.w	r3, r3, #1
 8019d5c:	b29a      	uxth	r2, r3
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	835a      	strh	r2, [r3, #26]
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	8b5b      	ldrh	r3, [r3, #26]
 8019d66:	f043 0302 	orr.w	r3, r3, #2
 8019d6a:	b29a      	uxth	r2, r3
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d70:	e187      	b.n	801a082 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	8b5b      	ldrh	r3, [r3, #26]
 8019d76:	f043 0301 	orr.w	r3, r3, #1
 8019d7a:	b29a      	uxth	r2, r3
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d80:	e17f      	b.n	801a082 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d106      	bne.n	8019d98 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019d8a:	4848      	ldr	r0, [pc, #288]	@ (8019eac <tcp_receive+0xcfc>)
 8019d8c:	f7fd fa58 	bl	8017240 <tcp_seg_copy>
 8019d90:	4602      	mov	r2, r0
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	675a      	str	r2, [r3, #116]	@ 0x74
 8019d96:	e16c      	b.n	801a072 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019d98:	2300      	movs	r3, #0
 8019d9a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019da0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019da2:	e156      	b.n	801a052 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8019da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019da6:	691b      	ldr	r3, [r3, #16]
 8019da8:	685a      	ldr	r2, [r3, #4]
 8019daa:	4b41      	ldr	r3, [pc, #260]	@ (8019eb0 <tcp_receive+0xd00>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	429a      	cmp	r2, r3
 8019db0:	d11d      	bne.n	8019dee <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019db2:	4b3e      	ldr	r3, [pc, #248]	@ (8019eac <tcp_receive+0xcfc>)
 8019db4:	891a      	ldrh	r2, [r3, #8]
 8019db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019db8:	891b      	ldrh	r3, [r3, #8]
 8019dba:	429a      	cmp	r2, r3
 8019dbc:	f240 814e 	bls.w	801a05c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019dc0:	483a      	ldr	r0, [pc, #232]	@ (8019eac <tcp_receive+0xcfc>)
 8019dc2:	f7fd fa3d 	bl	8017240 <tcp_seg_copy>
 8019dc6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	f000 8148 	beq.w	801a060 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8019dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d003      	beq.n	8019dde <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dd8:	697a      	ldr	r2, [r7, #20]
 8019dda:	601a      	str	r2, [r3, #0]
 8019ddc:	e002      	b.n	8019de4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	697a      	ldr	r2, [r7, #20]
 8019de2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019de4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019de6:	6978      	ldr	r0, [r7, #20]
 8019de8:	f7ff f8de 	bl	8018fa8 <tcp_oos_insert_segment>
                }
                break;
 8019dec:	e138      	b.n	801a060 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d117      	bne.n	8019e24 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019df4:	4b2e      	ldr	r3, [pc, #184]	@ (8019eb0 <tcp_receive+0xd00>)
 8019df6:	681a      	ldr	r2, [r3, #0]
 8019df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dfa:	691b      	ldr	r3, [r3, #16]
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	1ad3      	subs	r3, r2, r3
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	da57      	bge.n	8019eb4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e04:	4829      	ldr	r0, [pc, #164]	@ (8019eac <tcp_receive+0xcfc>)
 8019e06:	f7fd fa1b 	bl	8017240 <tcp_seg_copy>
 8019e0a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019e0c:	69bb      	ldr	r3, [r7, #24]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	f000 8128 	beq.w	801a064 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	69ba      	ldr	r2, [r7, #24]
 8019e18:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019e1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019e1c:	69b8      	ldr	r0, [r7, #24]
 8019e1e:	f7ff f8c3 	bl	8018fa8 <tcp_oos_insert_segment>
                  }
                  break;
 8019e22:	e11f      	b.n	801a064 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019e24:	4b22      	ldr	r3, [pc, #136]	@ (8019eb0 <tcp_receive+0xd00>)
 8019e26:	681a      	ldr	r2, [r3, #0]
 8019e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e2a:	691b      	ldr	r3, [r3, #16]
 8019e2c:	685b      	ldr	r3, [r3, #4]
 8019e2e:	1ad3      	subs	r3, r2, r3
 8019e30:	3b01      	subs	r3, #1
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	db3e      	blt.n	8019eb4 <tcp_receive+0xd04>
 8019e36:	4b1e      	ldr	r3, [pc, #120]	@ (8019eb0 <tcp_receive+0xd00>)
 8019e38:	681a      	ldr	r2, [r3, #0]
 8019e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e3c:	691b      	ldr	r3, [r3, #16]
 8019e3e:	685b      	ldr	r3, [r3, #4]
 8019e40:	1ad3      	subs	r3, r2, r3
 8019e42:	3301      	adds	r3, #1
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	dc35      	bgt.n	8019eb4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019e48:	4818      	ldr	r0, [pc, #96]	@ (8019eac <tcp_receive+0xcfc>)
 8019e4a:	f7fd f9f9 	bl	8017240 <tcp_seg_copy>
 8019e4e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019e50:	69fb      	ldr	r3, [r7, #28]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	f000 8108 	beq.w	801a068 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e5a:	691b      	ldr	r3, [r3, #16]
 8019e5c:	685b      	ldr	r3, [r3, #4]
 8019e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019e60:	8912      	ldrh	r2, [r2, #8]
 8019e62:	441a      	add	r2, r3
 8019e64:	4b12      	ldr	r3, [pc, #72]	@ (8019eb0 <tcp_receive+0xd00>)
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	1ad3      	subs	r3, r2, r3
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	dd12      	ble.n	8019e94 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019e6e:	4b10      	ldr	r3, [pc, #64]	@ (8019eb0 <tcp_receive+0xd00>)
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e76:	691b      	ldr	r3, [r3, #16]
 8019e78:	685b      	ldr	r3, [r3, #4]
 8019e7a:	b29b      	uxth	r3, r3
 8019e7c:	1ad3      	subs	r3, r2, r3
 8019e7e:	b29a      	uxth	r2, r3
 8019e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e82:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e86:	685a      	ldr	r2, [r3, #4]
 8019e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e8a:	891b      	ldrh	r3, [r3, #8]
 8019e8c:	4619      	mov	r1, r3
 8019e8e:	4610      	mov	r0, r2
 8019e90:	f7fb f990 	bl	80151b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e96:	69fa      	ldr	r2, [r7, #28]
 8019e98:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019e9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019e9c:	69f8      	ldr	r0, [r7, #28]
 8019e9e:	f7ff f883 	bl	8018fa8 <tcp_oos_insert_segment>
                  }
                  break;
 8019ea2:	e0e1      	b.n	801a068 <tcp_receive+0xeb8>
 8019ea4:	2002d4a4 	.word	0x2002d4a4
 8019ea8:	2002d4a1 	.word	0x2002d4a1
 8019eac:	2002d470 	.word	0x2002d470
 8019eb0:	2002d494 	.word	0x2002d494
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eb6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	f040 80c5 	bne.w	801a04c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019ec2:	4b7f      	ldr	r3, [pc, #508]	@ (801a0c0 <tcp_receive+0xf10>)
 8019ec4:	681a      	ldr	r2, [r3, #0]
 8019ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ec8:	691b      	ldr	r3, [r3, #16]
 8019eca:	685b      	ldr	r3, [r3, #4]
 8019ecc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	f340 80bc 	ble.w	801a04c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ed6:	691b      	ldr	r3, [r3, #16]
 8019ed8:	899b      	ldrh	r3, [r3, #12]
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	4618      	mov	r0, r3
 8019ede:	f7f9 fcdb 	bl	8013898 <lwip_htons>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	b2db      	uxtb	r3, r3
 8019ee6:	f003 0301 	and.w	r3, r3, #1
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f040 80be 	bne.w	801a06c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019ef0:	4874      	ldr	r0, [pc, #464]	@ (801a0c4 <tcp_receive+0xf14>)
 8019ef2:	f7fd f9a5 	bl	8017240 <tcp_seg_copy>
 8019ef6:	4602      	mov	r2, r0
 8019ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019efa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	f000 80b5 	beq.w	801a070 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f08:	691b      	ldr	r3, [r3, #16]
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f0e:	8912      	ldrh	r2, [r2, #8]
 8019f10:	441a      	add	r2, r3
 8019f12:	4b6b      	ldr	r3, [pc, #428]	@ (801a0c0 <tcp_receive+0xf10>)
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	1ad3      	subs	r3, r2, r3
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	dd12      	ble.n	8019f42 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019f1c:	4b68      	ldr	r3, [pc, #416]	@ (801a0c0 <tcp_receive+0xf10>)
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	b29a      	uxth	r2, r3
 8019f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f24:	691b      	ldr	r3, [r3, #16]
 8019f26:	685b      	ldr	r3, [r3, #4]
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	1ad3      	subs	r3, r2, r3
 8019f2c:	b29a      	uxth	r2, r3
 8019f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f30:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f34:	685a      	ldr	r2, [r3, #4]
 8019f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f38:	891b      	ldrh	r3, [r3, #8]
 8019f3a:	4619      	mov	r1, r3
 8019f3c:	4610      	mov	r0, r2
 8019f3e:	f7fb f939 	bl	80151b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019f42:	4b61      	ldr	r3, [pc, #388]	@ (801a0c8 <tcp_receive+0xf18>)
 8019f44:	881b      	ldrh	r3, [r3, #0]
 8019f46:	461a      	mov	r2, r3
 8019f48:	4b5d      	ldr	r3, [pc, #372]	@ (801a0c0 <tcp_receive+0xf10>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	441a      	add	r2, r3
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f52:	6879      	ldr	r1, [r7, #4]
 8019f54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019f56:	440b      	add	r3, r1
 8019f58:	1ad3      	subs	r3, r2, r3
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	f340 8088 	ble.w	801a070 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	691b      	ldr	r3, [r3, #16]
 8019f66:	899b      	ldrh	r3, [r3, #12]
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f7f9 fc94 	bl	8013898 <lwip_htons>
 8019f70:	4603      	mov	r3, r0
 8019f72:	b2db      	uxtb	r3, r3
 8019f74:	f003 0301 	and.w	r3, r3, #1
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d021      	beq.n	8019fc0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	691b      	ldr	r3, [r3, #16]
 8019f82:	899b      	ldrh	r3, [r3, #12]
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	b21b      	sxth	r3, r3
 8019f88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019f8c:	b21c      	sxth	r4, r3
 8019f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	691b      	ldr	r3, [r3, #16]
 8019f94:	899b      	ldrh	r3, [r3, #12]
 8019f96:	b29b      	uxth	r3, r3
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f7f9 fc7d 	bl	8013898 <lwip_htons>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	b2db      	uxtb	r3, r3
 8019fa2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019fa6:	b29b      	uxth	r3, r3
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7f9 fc75 	bl	8013898 <lwip_htons>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	b21b      	sxth	r3, r3
 8019fb2:	4323      	orrs	r3, r4
 8019fb4:	b21a      	sxth	r2, r3
 8019fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	691b      	ldr	r3, [r3, #16]
 8019fbc:	b292      	uxth	r2, r2
 8019fbe:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019fca:	4413      	add	r3, r2
 8019fcc:	b299      	uxth	r1, r3
 8019fce:	4b3c      	ldr	r3, [pc, #240]	@ (801a0c0 <tcp_receive+0xf10>)
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	b29a      	uxth	r2, r3
 8019fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	1a8a      	subs	r2, r1, r2
 8019fda:	b292      	uxth	r2, r2
 8019fdc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	685a      	ldr	r2, [r3, #4]
 8019fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	891b      	ldrh	r3, [r3, #8]
 8019fea:	4619      	mov	r1, r3
 8019fec:	4610      	mov	r0, r2
 8019fee:	f7fb f8e1 	bl	80151b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	891c      	ldrh	r4, [r3, #8]
 8019ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	691b      	ldr	r3, [r3, #16]
 8019ffe:	899b      	ldrh	r3, [r3, #12]
 801a000:	b29b      	uxth	r3, r3
 801a002:	4618      	mov	r0, r3
 801a004:	f7f9 fc48 	bl	8013898 <lwip_htons>
 801a008:	4603      	mov	r3, r0
 801a00a:	b2db      	uxtb	r3, r3
 801a00c:	f003 0303 	and.w	r3, r3, #3
 801a010:	2b00      	cmp	r3, #0
 801a012:	d001      	beq.n	801a018 <tcp_receive+0xe68>
 801a014:	2301      	movs	r3, #1
 801a016:	e000      	b.n	801a01a <tcp_receive+0xe6a>
 801a018:	2300      	movs	r3, #0
 801a01a:	4423      	add	r3, r4
 801a01c:	b29a      	uxth	r2, r3
 801a01e:	4b2a      	ldr	r3, [pc, #168]	@ (801a0c8 <tcp_receive+0xf18>)
 801a020:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a022:	4b29      	ldr	r3, [pc, #164]	@ (801a0c8 <tcp_receive+0xf18>)
 801a024:	881b      	ldrh	r3, [r3, #0]
 801a026:	461a      	mov	r2, r3
 801a028:	4b25      	ldr	r3, [pc, #148]	@ (801a0c0 <tcp_receive+0xf10>)
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	441a      	add	r2, r3
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a032:	6879      	ldr	r1, [r7, #4]
 801a034:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a036:	440b      	add	r3, r1
 801a038:	429a      	cmp	r2, r3
 801a03a:	d019      	beq.n	801a070 <tcp_receive+0xec0>
 801a03c:	4b23      	ldr	r3, [pc, #140]	@ (801a0cc <tcp_receive+0xf1c>)
 801a03e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801a042:	4923      	ldr	r1, [pc, #140]	@ (801a0d0 <tcp_receive+0xf20>)
 801a044:	4823      	ldr	r0, [pc, #140]	@ (801a0d4 <tcp_receive+0xf24>)
 801a046:	f007 fa9b 	bl	8021580 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a04a:	e011      	b.n	801a070 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a054:	2b00      	cmp	r3, #0
 801a056:	f47f aea5 	bne.w	8019da4 <tcp_receive+0xbf4>
 801a05a:	e00a      	b.n	801a072 <tcp_receive+0xec2>
                break;
 801a05c:	bf00      	nop
 801a05e:	e008      	b.n	801a072 <tcp_receive+0xec2>
                break;
 801a060:	bf00      	nop
 801a062:	e006      	b.n	801a072 <tcp_receive+0xec2>
                  break;
 801a064:	bf00      	nop
 801a066:	e004      	b.n	801a072 <tcp_receive+0xec2>
                  break;
 801a068:	bf00      	nop
 801a06a:	e002      	b.n	801a072 <tcp_receive+0xec2>
                  break;
 801a06c:	bf00      	nop
 801a06e:	e000      	b.n	801a072 <tcp_receive+0xec2>
                break;
 801a070:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a072:	6878      	ldr	r0, [r7, #4]
 801a074:	f001 ff44 	bl	801bf00 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a078:	e003      	b.n	801a082 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a07a:	6878      	ldr	r0, [r7, #4]
 801a07c:	f001 ff40 	bl	801bf00 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a080:	e01a      	b.n	801a0b8 <tcp_receive+0xf08>
 801a082:	e019      	b.n	801a0b8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a084:	4b0e      	ldr	r3, [pc, #56]	@ (801a0c0 <tcp_receive+0xf10>)
 801a086:	681a      	ldr	r2, [r3, #0]
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a08c:	1ad3      	subs	r3, r2, r3
 801a08e:	2b00      	cmp	r3, #0
 801a090:	db0a      	blt.n	801a0a8 <tcp_receive+0xef8>
 801a092:	4b0b      	ldr	r3, [pc, #44]	@ (801a0c0 <tcp_receive+0xf10>)
 801a094:	681a      	ldr	r2, [r3, #0]
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a09a:	6879      	ldr	r1, [r7, #4]
 801a09c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a09e:	440b      	add	r3, r1
 801a0a0:	1ad3      	subs	r3, r2, r3
 801a0a2:	3301      	adds	r3, #1
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	dd07      	ble.n	801a0b8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	8b5b      	ldrh	r3, [r3, #26]
 801a0ac:	f043 0302 	orr.w	r3, r3, #2
 801a0b0:	b29a      	uxth	r2, r3
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a0b6:	e7ff      	b.n	801a0b8 <tcp_receive+0xf08>
 801a0b8:	bf00      	nop
 801a0ba:	3750      	adds	r7, #80	@ 0x50
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bdb0      	pop	{r4, r5, r7, pc}
 801a0c0:	2002d494 	.word	0x2002d494
 801a0c4:	2002d470 	.word	0x2002d470
 801a0c8:	2002d49e 	.word	0x2002d49e
 801a0cc:	08024e70 	.word	0x08024e70
 801a0d0:	08025218 	.word	0x08025218
 801a0d4:	08024ebc 	.word	0x08024ebc

0801a0d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a0d8:	b480      	push	{r7}
 801a0da:	b083      	sub	sp, #12
 801a0dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a0de:	4b15      	ldr	r3, [pc, #84]	@ (801a134 <tcp_get_next_optbyte+0x5c>)
 801a0e0:	881b      	ldrh	r3, [r3, #0]
 801a0e2:	1c5a      	adds	r2, r3, #1
 801a0e4:	b291      	uxth	r1, r2
 801a0e6:	4a13      	ldr	r2, [pc, #76]	@ (801a134 <tcp_get_next_optbyte+0x5c>)
 801a0e8:	8011      	strh	r1, [r2, #0]
 801a0ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a0ec:	4b12      	ldr	r3, [pc, #72]	@ (801a138 <tcp_get_next_optbyte+0x60>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d004      	beq.n	801a0fe <tcp_get_next_optbyte+0x26>
 801a0f4:	4b11      	ldr	r3, [pc, #68]	@ (801a13c <tcp_get_next_optbyte+0x64>)
 801a0f6:	881b      	ldrh	r3, [r3, #0]
 801a0f8:	88fa      	ldrh	r2, [r7, #6]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d208      	bcs.n	801a110 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a0fe:	4b10      	ldr	r3, [pc, #64]	@ (801a140 <tcp_get_next_optbyte+0x68>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	3314      	adds	r3, #20
 801a104:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a106:	88fb      	ldrh	r3, [r7, #6]
 801a108:	683a      	ldr	r2, [r7, #0]
 801a10a:	4413      	add	r3, r2
 801a10c:	781b      	ldrb	r3, [r3, #0]
 801a10e:	e00b      	b.n	801a128 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a110:	88fb      	ldrh	r3, [r7, #6]
 801a112:	b2da      	uxtb	r2, r3
 801a114:	4b09      	ldr	r3, [pc, #36]	@ (801a13c <tcp_get_next_optbyte+0x64>)
 801a116:	881b      	ldrh	r3, [r3, #0]
 801a118:	b2db      	uxtb	r3, r3
 801a11a:	1ad3      	subs	r3, r2, r3
 801a11c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a11e:	4b06      	ldr	r3, [pc, #24]	@ (801a138 <tcp_get_next_optbyte+0x60>)
 801a120:	681a      	ldr	r2, [r3, #0]
 801a122:	797b      	ldrb	r3, [r7, #5]
 801a124:	4413      	add	r3, r2
 801a126:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a128:	4618      	mov	r0, r3
 801a12a:	370c      	adds	r7, #12
 801a12c:	46bd      	mov	sp, r7
 801a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a132:	4770      	bx	lr
 801a134:	2002d490 	.word	0x2002d490
 801a138:	2002d48c 	.word	0x2002d48c
 801a13c:	2002d48a 	.word	0x2002d48a
 801a140:	2002d484 	.word	0x2002d484

0801a144 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a144:	b580      	push	{r7, lr}
 801a146:	b084      	sub	sp, #16
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d106      	bne.n	801a160 <tcp_parseopt+0x1c>
 801a152:	4b32      	ldr	r3, [pc, #200]	@ (801a21c <tcp_parseopt+0xd8>)
 801a154:	f240 727d 	movw	r2, #1917	@ 0x77d
 801a158:	4931      	ldr	r1, [pc, #196]	@ (801a220 <tcp_parseopt+0xdc>)
 801a15a:	4832      	ldr	r0, [pc, #200]	@ (801a224 <tcp_parseopt+0xe0>)
 801a15c:	f007 fa10 	bl	8021580 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a160:	4b31      	ldr	r3, [pc, #196]	@ (801a228 <tcp_parseopt+0xe4>)
 801a162:	881b      	ldrh	r3, [r3, #0]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d056      	beq.n	801a216 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a168:	4b30      	ldr	r3, [pc, #192]	@ (801a22c <tcp_parseopt+0xe8>)
 801a16a:	2200      	movs	r2, #0
 801a16c:	801a      	strh	r2, [r3, #0]
 801a16e:	e046      	b.n	801a1fe <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801a170:	f7ff ffb2 	bl	801a0d8 <tcp_get_next_optbyte>
 801a174:	4603      	mov	r3, r0
 801a176:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a178:	7bfb      	ldrb	r3, [r7, #15]
 801a17a:	2b02      	cmp	r3, #2
 801a17c:	d006      	beq.n	801a18c <tcp_parseopt+0x48>
 801a17e:	2b02      	cmp	r3, #2
 801a180:	dc2a      	bgt.n	801a1d8 <tcp_parseopt+0x94>
 801a182:	2b00      	cmp	r3, #0
 801a184:	d042      	beq.n	801a20c <tcp_parseopt+0xc8>
 801a186:	2b01      	cmp	r3, #1
 801a188:	d038      	beq.n	801a1fc <tcp_parseopt+0xb8>
 801a18a:	e025      	b.n	801a1d8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a18c:	f7ff ffa4 	bl	801a0d8 <tcp_get_next_optbyte>
 801a190:	4603      	mov	r3, r0
 801a192:	2b04      	cmp	r3, #4
 801a194:	d13c      	bne.n	801a210 <tcp_parseopt+0xcc>
 801a196:	4b25      	ldr	r3, [pc, #148]	@ (801a22c <tcp_parseopt+0xe8>)
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	3301      	adds	r3, #1
 801a19c:	4a22      	ldr	r2, [pc, #136]	@ (801a228 <tcp_parseopt+0xe4>)
 801a19e:	8812      	ldrh	r2, [r2, #0]
 801a1a0:	4293      	cmp	r3, r2
 801a1a2:	da35      	bge.n	801a210 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a1a4:	f7ff ff98 	bl	801a0d8 <tcp_get_next_optbyte>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	021b      	lsls	r3, r3, #8
 801a1ac:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a1ae:	f7ff ff93 	bl	801a0d8 <tcp_get_next_optbyte>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	461a      	mov	r2, r3
 801a1b6:	89bb      	ldrh	r3, [r7, #12]
 801a1b8:	4313      	orrs	r3, r2
 801a1ba:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a1bc:	89bb      	ldrh	r3, [r7, #12]
 801a1be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801a1c2:	d804      	bhi.n	801a1ce <tcp_parseopt+0x8a>
 801a1c4:	89bb      	ldrh	r3, [r7, #12]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d001      	beq.n	801a1ce <tcp_parseopt+0x8a>
 801a1ca:	89ba      	ldrh	r2, [r7, #12]
 801a1cc:	e001      	b.n	801a1d2 <tcp_parseopt+0x8e>
 801a1ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801a1d6:	e012      	b.n	801a1fe <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a1d8:	f7ff ff7e 	bl	801a0d8 <tcp_get_next_optbyte>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a1e0:	7afb      	ldrb	r3, [r7, #11]
 801a1e2:	2b01      	cmp	r3, #1
 801a1e4:	d916      	bls.n	801a214 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a1e6:	7afb      	ldrb	r3, [r7, #11]
 801a1e8:	b29a      	uxth	r2, r3
 801a1ea:	4b10      	ldr	r3, [pc, #64]	@ (801a22c <tcp_parseopt+0xe8>)
 801a1ec:	881b      	ldrh	r3, [r3, #0]
 801a1ee:	4413      	add	r3, r2
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	3b02      	subs	r3, #2
 801a1f4:	b29a      	uxth	r2, r3
 801a1f6:	4b0d      	ldr	r3, [pc, #52]	@ (801a22c <tcp_parseopt+0xe8>)
 801a1f8:	801a      	strh	r2, [r3, #0]
 801a1fa:	e000      	b.n	801a1fe <tcp_parseopt+0xba>
          break;
 801a1fc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a1fe:	4b0b      	ldr	r3, [pc, #44]	@ (801a22c <tcp_parseopt+0xe8>)
 801a200:	881a      	ldrh	r2, [r3, #0]
 801a202:	4b09      	ldr	r3, [pc, #36]	@ (801a228 <tcp_parseopt+0xe4>)
 801a204:	881b      	ldrh	r3, [r3, #0]
 801a206:	429a      	cmp	r2, r3
 801a208:	d3b2      	bcc.n	801a170 <tcp_parseopt+0x2c>
 801a20a:	e004      	b.n	801a216 <tcp_parseopt+0xd2>
          return;
 801a20c:	bf00      	nop
 801a20e:	e002      	b.n	801a216 <tcp_parseopt+0xd2>
            return;
 801a210:	bf00      	nop
 801a212:	e000      	b.n	801a216 <tcp_parseopt+0xd2>
            return;
 801a214:	bf00      	nop
      }
    }
  }
}
 801a216:	3710      	adds	r7, #16
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	08024e70 	.word	0x08024e70
 801a220:	080252d4 	.word	0x080252d4
 801a224:	08024ebc 	.word	0x08024ebc
 801a228:	2002d488 	.word	0x2002d488
 801a22c:	2002d490 	.word	0x2002d490

0801a230 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a230:	b480      	push	{r7}
 801a232:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a234:	4b05      	ldr	r3, [pc, #20]	@ (801a24c <tcp_trigger_input_pcb_close+0x1c>)
 801a236:	781b      	ldrb	r3, [r3, #0]
 801a238:	f043 0310 	orr.w	r3, r3, #16
 801a23c:	b2da      	uxtb	r2, r3
 801a23e:	4b03      	ldr	r3, [pc, #12]	@ (801a24c <tcp_trigger_input_pcb_close+0x1c>)
 801a240:	701a      	strb	r2, [r3, #0]
}
 801a242:	bf00      	nop
 801a244:	46bd      	mov	sp, r7
 801a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24a:	4770      	bx	lr
 801a24c:	2002d4a1 	.word	0x2002d4a1

0801a250 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b084      	sub	sp, #16
 801a254:	af00      	add	r7, sp, #0
 801a256:	60f8      	str	r0, [r7, #12]
 801a258:	60b9      	str	r1, [r7, #8]
 801a25a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d00a      	beq.n	801a278 <tcp_route+0x28>
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	7a1b      	ldrb	r3, [r3, #8]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d006      	beq.n	801a278 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	7a1b      	ldrb	r3, [r3, #8]
 801a26e:	4618      	mov	r0, r3
 801a270:	f7fa fd66 	bl	8014d40 <netif_get_by_index>
 801a274:	4603      	mov	r3, r0
 801a276:	e003      	b.n	801a280 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f004 fb07 	bl	801e88c <ip4_route>
 801a27e:	4603      	mov	r3, r0
  }
}
 801a280:	4618      	mov	r0, r3
 801a282:	3710      	adds	r7, #16
 801a284:	46bd      	mov	sp, r7
 801a286:	bd80      	pop	{r7, pc}

0801a288 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a288:	b590      	push	{r4, r7, lr}
 801a28a:	b087      	sub	sp, #28
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	60f8      	str	r0, [r7, #12]
 801a290:	60b9      	str	r1, [r7, #8]
 801a292:	603b      	str	r3, [r7, #0]
 801a294:	4613      	mov	r3, r2
 801a296:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d105      	bne.n	801a2aa <tcp_create_segment+0x22>
 801a29e:	4b49      	ldr	r3, [pc, #292]	@ (801a3c4 <tcp_create_segment+0x13c>)
 801a2a0:	22a3      	movs	r2, #163	@ 0xa3
 801a2a2:	4949      	ldr	r1, [pc, #292]	@ (801a3c8 <tcp_create_segment+0x140>)
 801a2a4:	4849      	ldr	r0, [pc, #292]	@ (801a3cc <tcp_create_segment+0x144>)
 801a2a6:	f007 f96b 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a2aa:	68bb      	ldr	r3, [r7, #8]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d105      	bne.n	801a2bc <tcp_create_segment+0x34>
 801a2b0:	4b44      	ldr	r3, [pc, #272]	@ (801a3c4 <tcp_create_segment+0x13c>)
 801a2b2:	22a4      	movs	r2, #164	@ 0xa4
 801a2b4:	4946      	ldr	r1, [pc, #280]	@ (801a3d0 <tcp_create_segment+0x148>)
 801a2b6:	4845      	ldr	r0, [pc, #276]	@ (801a3cc <tcp_create_segment+0x144>)
 801a2b8:	f007 f962 	bl	8021580 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a2bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a2c0:	009b      	lsls	r3, r3, #2
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	f003 0304 	and.w	r3, r3, #4
 801a2c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a2ca:	2003      	movs	r0, #3
 801a2cc:	f7fa f8b0 	bl	8014430 <memp_malloc>
 801a2d0:	6138      	str	r0, [r7, #16]
 801a2d2:	693b      	ldr	r3, [r7, #16]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d104      	bne.n	801a2e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a2d8:	68b8      	ldr	r0, [r7, #8]
 801a2da:	f7fb f90b 	bl	80154f4 <pbuf_free>
    return NULL;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	e06b      	b.n	801a3ba <tcp_create_segment+0x132>
  }
  seg->flags = optflags;
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a2e8:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801a2ea:	693b      	ldr	r3, [r7, #16]
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a2f0:	693b      	ldr	r3, [r7, #16]
 801a2f2:	68ba      	ldr	r2, [r7, #8]
 801a2f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	891a      	ldrh	r2, [r3, #8]
 801a2fa:	7dfb      	ldrb	r3, [r7, #23]
 801a2fc:	b29b      	uxth	r3, r3
 801a2fe:	429a      	cmp	r2, r3
 801a300:	d205      	bcs.n	801a30e <tcp_create_segment+0x86>
 801a302:	4b30      	ldr	r3, [pc, #192]	@ (801a3c4 <tcp_create_segment+0x13c>)
 801a304:	22b0      	movs	r2, #176	@ 0xb0
 801a306:	4933      	ldr	r1, [pc, #204]	@ (801a3d4 <tcp_create_segment+0x14c>)
 801a308:	4830      	ldr	r0, [pc, #192]	@ (801a3cc <tcp_create_segment+0x144>)
 801a30a:	f007 f939 	bl	8021580 <iprintf>
  seg->len = p->tot_len - optlen;
 801a30e:	68bb      	ldr	r3, [r7, #8]
 801a310:	891a      	ldrh	r2, [r3, #8]
 801a312:	7dfb      	ldrb	r3, [r7, #23]
 801a314:	b29b      	uxth	r3, r3
 801a316:	1ad3      	subs	r3, r2, r3
 801a318:	b29a      	uxth	r2, r3
 801a31a:	693b      	ldr	r3, [r7, #16]
 801a31c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801a31e:	693b      	ldr	r3, [r7, #16]
 801a320:	2200      	movs	r2, #0
 801a322:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a324:	2114      	movs	r1, #20
 801a326:	68b8      	ldr	r0, [r7, #8]
 801a328:	f7fb f846 	bl	80153b8 <pbuf_add_header>
 801a32c:	4603      	mov	r3, r0
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d00c      	beq.n	801a34c <tcp_create_segment+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801a332:	4b29      	ldr	r3, [pc, #164]	@ (801a3d8 <tcp_create_segment+0x150>)
 801a334:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 801a338:	3301      	adds	r3, #1
 801a33a:	b29a      	uxth	r2, r3
 801a33c:	4b26      	ldr	r3, [pc, #152]	@ (801a3d8 <tcp_create_segment+0x150>)
 801a33e:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 801a342:	6938      	ldr	r0, [r7, #16]
 801a344:	f7fc ff63 	bl	801720e <tcp_seg_free>
    return NULL;
 801a348:	2300      	movs	r3, #0
 801a34a:	e036      	b.n	801a3ba <tcp_create_segment+0x132>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a34c:	693b      	ldr	r3, [r7, #16]
 801a34e:	685b      	ldr	r3, [r3, #4]
 801a350:	685a      	ldr	r2, [r3, #4]
 801a352:	693b      	ldr	r3, [r7, #16]
 801a354:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	8ada      	ldrh	r2, [r3, #22]
 801a35a:	693b      	ldr	r3, [r7, #16]
 801a35c:	691c      	ldr	r4, [r3, #16]
 801a35e:	4610      	mov	r0, r2
 801a360:	f7f9 fa9a 	bl	8013898 <lwip_htons>
 801a364:	4603      	mov	r3, r0
 801a366:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	8b1a      	ldrh	r2, [r3, #24]
 801a36c:	693b      	ldr	r3, [r7, #16]
 801a36e:	691c      	ldr	r4, [r3, #16]
 801a370:	4610      	mov	r0, r2
 801a372:	f7f9 fa91 	bl	8013898 <lwip_htons>
 801a376:	4603      	mov	r3, r0
 801a378:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a37a:	693b      	ldr	r3, [r7, #16]
 801a37c:	691c      	ldr	r4, [r3, #16]
 801a37e:	6838      	ldr	r0, [r7, #0]
 801a380:	f7f9 faa0 	bl	80138c4 <lwip_htonl>
 801a384:	4603      	mov	r3, r0
 801a386:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a388:	7dfb      	ldrb	r3, [r7, #23]
 801a38a:	089b      	lsrs	r3, r3, #2
 801a38c:	b2db      	uxtb	r3, r3
 801a38e:	3305      	adds	r3, #5
 801a390:	b29b      	uxth	r3, r3
 801a392:	031b      	lsls	r3, r3, #12
 801a394:	b29a      	uxth	r2, r3
 801a396:	79fb      	ldrb	r3, [r7, #7]
 801a398:	b29b      	uxth	r3, r3
 801a39a:	4313      	orrs	r3, r2
 801a39c:	b29a      	uxth	r2, r3
 801a39e:	693b      	ldr	r3, [r7, #16]
 801a3a0:	691c      	ldr	r4, [r3, #16]
 801a3a2:	4610      	mov	r0, r2
 801a3a4:	f7f9 fa78 	bl	8013898 <lwip_htons>
 801a3a8:	4603      	mov	r3, r0
 801a3aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a3ac:	693b      	ldr	r3, [r7, #16]
 801a3ae:	691b      	ldr	r3, [r3, #16]
 801a3b0:	2200      	movs	r2, #0
 801a3b2:	749a      	strb	r2, [r3, #18]
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	74da      	strb	r2, [r3, #19]
  return seg;
 801a3b8:	693b      	ldr	r3, [r7, #16]
}
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	371c      	adds	r7, #28
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	bd90      	pop	{r4, r7, pc}
 801a3c2:	bf00      	nop
 801a3c4:	080252f0 	.word	0x080252f0
 801a3c8:	08025324 	.word	0x08025324
 801a3cc:	08025344 	.word	0x08025344
 801a3d0:	0802536c 	.word	0x0802536c
 801a3d4:	08025390 	.word	0x08025390
 801a3d8:	2002d358 	.word	0x2002d358

0801a3dc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b086      	sub	sp, #24
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	607b      	str	r3, [r7, #4]
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	73fb      	strb	r3, [r7, #15]
 801a3e8:	460b      	mov	r3, r1
 801a3ea:	81bb      	strh	r3, [r7, #12]
 801a3ec:	4613      	mov	r3, r2
 801a3ee:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a3f0:	89bb      	ldrh	r3, [r7, #12]
 801a3f2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d105      	bne.n	801a406 <tcp_pbuf_prealloc+0x2a>
 801a3fa:	4b30      	ldr	r3, [pc, #192]	@ (801a4bc <tcp_pbuf_prealloc+0xe0>)
 801a3fc:	22e8      	movs	r2, #232	@ 0xe8
 801a3fe:	4930      	ldr	r1, [pc, #192]	@ (801a4c0 <tcp_pbuf_prealloc+0xe4>)
 801a400:	4830      	ldr	r0, [pc, #192]	@ (801a4c4 <tcp_pbuf_prealloc+0xe8>)
 801a402:	f007 f8bd 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a406:	6a3b      	ldr	r3, [r7, #32]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d105      	bne.n	801a418 <tcp_pbuf_prealloc+0x3c>
 801a40c:	4b2b      	ldr	r3, [pc, #172]	@ (801a4bc <tcp_pbuf_prealloc+0xe0>)
 801a40e:	22e9      	movs	r2, #233	@ 0xe9
 801a410:	492d      	ldr	r1, [pc, #180]	@ (801a4c8 <tcp_pbuf_prealloc+0xec>)
 801a412:	482c      	ldr	r0, [pc, #176]	@ (801a4c4 <tcp_pbuf_prealloc+0xe8>)
 801a414:	f007 f8b4 	bl	8021580 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a418:	89ba      	ldrh	r2, [r7, #12]
 801a41a:	897b      	ldrh	r3, [r7, #10]
 801a41c:	429a      	cmp	r2, r3
 801a41e:	d221      	bcs.n	801a464 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a420:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a424:	f003 0302 	and.w	r3, r3, #2
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d111      	bne.n	801a450 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a42c:	6a3b      	ldr	r3, [r7, #32]
 801a42e:	8b5b      	ldrh	r3, [r3, #26]
 801a430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a434:	2b00      	cmp	r3, #0
 801a436:	d115      	bne.n	801a464 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a438:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d007      	beq.n	801a450 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a440:	6a3b      	ldr	r3, [r7, #32]
 801a442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801a444:	2b00      	cmp	r3, #0
 801a446:	d103      	bne.n	801a450 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a448:	6a3b      	ldr	r3, [r7, #32]
 801a44a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d009      	beq.n	801a464 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a450:	89bb      	ldrh	r3, [r7, #12]
 801a452:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801a456:	f023 0203 	bic.w	r2, r3, #3
 801a45a:	897b      	ldrh	r3, [r7, #10]
 801a45c:	4293      	cmp	r3, r2
 801a45e:	bf28      	it	cs
 801a460:	4613      	movcs	r3, r2
 801a462:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a464:	8af9      	ldrh	r1, [r7, #22]
 801a466:	7bfb      	ldrb	r3, [r7, #15]
 801a468:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a46c:	4618      	mov	r0, r3
 801a46e:	f7fa fd15 	bl	8014e9c <pbuf_alloc>
 801a472:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a474:	693b      	ldr	r3, [r7, #16]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d101      	bne.n	801a47e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a47a:	2300      	movs	r3, #0
 801a47c:	e019      	b.n	801a4b2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a47e:	693b      	ldr	r3, [r7, #16]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d006      	beq.n	801a494 <tcp_pbuf_prealloc+0xb8>
 801a486:	4b0d      	ldr	r3, [pc, #52]	@ (801a4bc <tcp_pbuf_prealloc+0xe0>)
 801a488:	f240 120b 	movw	r2, #267	@ 0x10b
 801a48c:	490f      	ldr	r1, [pc, #60]	@ (801a4cc <tcp_pbuf_prealloc+0xf0>)
 801a48e:	480d      	ldr	r0, [pc, #52]	@ (801a4c4 <tcp_pbuf_prealloc+0xe8>)
 801a490:	f007 f876 	bl	8021580 <iprintf>
  *oversize = p->len - length;
 801a494:	693b      	ldr	r3, [r7, #16]
 801a496:	895a      	ldrh	r2, [r3, #10]
 801a498:	89bb      	ldrh	r3, [r7, #12]
 801a49a:	1ad3      	subs	r3, r2, r3
 801a49c:	b29a      	uxth	r2, r3
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a4a2:	693b      	ldr	r3, [r7, #16]
 801a4a4:	89ba      	ldrh	r2, [r7, #12]
 801a4a6:	811a      	strh	r2, [r3, #8]
 801a4a8:	693b      	ldr	r3, [r7, #16]
 801a4aa:	891a      	ldrh	r2, [r3, #8]
 801a4ac:	693b      	ldr	r3, [r7, #16]
 801a4ae:	815a      	strh	r2, [r3, #10]
  return p;
 801a4b0:	693b      	ldr	r3, [r7, #16]
}
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	3718      	adds	r7, #24
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	bd80      	pop	{r7, pc}
 801a4ba:	bf00      	nop
 801a4bc:	080252f0 	.word	0x080252f0
 801a4c0:	080253a8 	.word	0x080253a8
 801a4c4:	08025344 	.word	0x08025344
 801a4c8:	080253cc 	.word	0x080253cc
 801a4cc:	080253ec 	.word	0x080253ec

0801a4d0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b082      	sub	sp, #8
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
 801a4d8:	460b      	mov	r3, r1
 801a4da:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d106      	bne.n	801a4f0 <tcp_write_checks+0x20>
 801a4e2:	4b37      	ldr	r3, [pc, #220]	@ (801a5c0 <tcp_write_checks+0xf0>)
 801a4e4:	f240 1233 	movw	r2, #307	@ 0x133
 801a4e8:	4936      	ldr	r1, [pc, #216]	@ (801a5c4 <tcp_write_checks+0xf4>)
 801a4ea:	4837      	ldr	r0, [pc, #220]	@ (801a5c8 <tcp_write_checks+0xf8>)
 801a4ec:	f007 f848 	bl	8021580 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	7d1b      	ldrb	r3, [r3, #20]
 801a4f4:	2b04      	cmp	r3, #4
 801a4f6:	d00e      	beq.n	801a516 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a4fc:	2b07      	cmp	r3, #7
 801a4fe:	d00a      	beq.n	801a516 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a504:	2b02      	cmp	r3, #2
 801a506:	d006      	beq.n	801a516 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a50c:	2b03      	cmp	r3, #3
 801a50e:	d002      	beq.n	801a516 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a510:	f06f 030a 	mvn.w	r3, #10
 801a514:	e050      	b.n	801a5b8 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 801a516:	887b      	ldrh	r3, [r7, #2]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d101      	bne.n	801a520 <tcp_write_checks+0x50>
    return ERR_OK;
 801a51c:	2300      	movs	r3, #0
 801a51e:	e04b      	b.n	801a5b8 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a526:	887a      	ldrh	r2, [r7, #2]
 801a528:	429a      	cmp	r2, r3
 801a52a:	d909      	bls.n	801a540 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	8b5b      	ldrh	r3, [r3, #26]
 801a530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a534:	b29a      	uxth	r2, r3
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a53a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a53e:	e03b      	b.n	801a5b8 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a546:	2b08      	cmp	r3, #8
 801a548:	d911      	bls.n	801a56e <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801a54a:	4b20      	ldr	r3, [pc, #128]	@ (801a5cc <tcp_write_checks+0xfc>)
 801a54c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a550:	3301      	adds	r3, #1
 801a552:	b29a      	uxth	r2, r3
 801a554:	4b1d      	ldr	r3, [pc, #116]	@ (801a5cc <tcp_write_checks+0xfc>)
 801a556:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	8b5b      	ldrh	r3, [r3, #26]
 801a55e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a562:	b29a      	uxth	r2, r3
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a56c:	e024      	b.n	801a5b8 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a574:	2b00      	cmp	r3, #0
 801a576:	d00f      	beq.n	801a598 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d11a      	bne.n	801a5b6 <tcp_write_checks+0xe6>
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a584:	2b00      	cmp	r3, #0
 801a586:	d116      	bne.n	801a5b6 <tcp_write_checks+0xe6>
 801a588:	4b0d      	ldr	r3, [pc, #52]	@ (801a5c0 <tcp_write_checks+0xf0>)
 801a58a:	f240 1255 	movw	r2, #341	@ 0x155
 801a58e:	4910      	ldr	r1, [pc, #64]	@ (801a5d0 <tcp_write_checks+0x100>)
 801a590:	480d      	ldr	r0, [pc, #52]	@ (801a5c8 <tcp_write_checks+0xf8>)
 801a592:	f006 fff5 	bl	8021580 <iprintf>
 801a596:	e00e      	b.n	801a5b6 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d103      	bne.n	801a5a8 <tcp_write_checks+0xd8>
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d006      	beq.n	801a5b6 <tcp_write_checks+0xe6>
 801a5a8:	4b05      	ldr	r3, [pc, #20]	@ (801a5c0 <tcp_write_checks+0xf0>)
 801a5aa:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801a5ae:	4909      	ldr	r1, [pc, #36]	@ (801a5d4 <tcp_write_checks+0x104>)
 801a5b0:	4805      	ldr	r0, [pc, #20]	@ (801a5c8 <tcp_write_checks+0xf8>)
 801a5b2:	f006 ffe5 	bl	8021580 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a5b6:	2300      	movs	r3, #0
}
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	3708      	adds	r7, #8
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	bd80      	pop	{r7, pc}
 801a5c0:	080252f0 	.word	0x080252f0
 801a5c4:	08025400 	.word	0x08025400
 801a5c8:	08025344 	.word	0x08025344
 801a5cc:	2002d358 	.word	0x2002d358
 801a5d0:	08025420 	.word	0x08025420
 801a5d4:	0802545c 	.word	0x0802545c

0801a5d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a5d8:	b590      	push	{r4, r7, lr}
 801a5da:	b09d      	sub	sp, #116	@ 0x74
 801a5dc:	af04      	add	r7, sp, #16
 801a5de:	60f8      	str	r0, [r7, #12]
 801a5e0:	60b9      	str	r1, [r7, #8]
 801a5e2:	4611      	mov	r1, r2
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	460b      	mov	r3, r1
 801a5e8:	80fb      	strh	r3, [r7, #6]
 801a5ea:	4613      	mov	r3, r2
 801a5ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	643b      	str	r3, [r7, #64]	@ 0x40
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	657b      	str	r3, [r7, #84]	@ 0x54
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	653b      	str	r3, [r7, #80]	@ 0x50
 801a5fe:	2300      	movs	r3, #0
 801a600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 801a602:	2300      	movs	r3, #0
 801a604:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a608:	2300      	movs	r3, #0
 801a60a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a60e:	2300      	movs	r3, #0
 801a610:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 801a612:	2300      	movs	r3, #0
 801a614:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 801a618:	2300      	movs	r3, #0
 801a61a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a61e:	2300      	movs	r3, #0
 801a620:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d109      	bne.n	801a63e <tcp_write+0x66>
 801a62a:	4b9c      	ldr	r3, [pc, #624]	@ (801a89c <tcp_write+0x2c4>)
 801a62c:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801a630:	499b      	ldr	r1, [pc, #620]	@ (801a8a0 <tcp_write+0x2c8>)
 801a632:	489c      	ldr	r0, [pc, #624]	@ (801a8a4 <tcp_write+0x2cc>)
 801a634:	f006 ffa4 	bl	8021580 <iprintf>
 801a638:	f06f 030f 	mvn.w	r3, #15
 801a63c:	e381      	b.n	801ad42 <tcp_write+0x76a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a644:	085b      	lsrs	r3, r3, #1
 801a646:	b29a      	uxth	r2, r3
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a64c:	4293      	cmp	r3, r2
 801a64e:	bf28      	it	cs
 801a650:	4613      	movcs	r3, r2
 801a652:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 801a654:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a656:	2b00      	cmp	r3, #0
 801a658:	d102      	bne.n	801a660 <tcp_write+0x88>
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a65e:	e000      	b.n	801a662 <tcp_write+0x8a>
 801a660:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a662:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a664:	68bb      	ldr	r3, [r7, #8]
 801a666:	2b00      	cmp	r3, #0
 801a668:	d109      	bne.n	801a67e <tcp_write+0xa6>
 801a66a:	4b8c      	ldr	r3, [pc, #560]	@ (801a89c <tcp_write+0x2c4>)
 801a66c:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801a670:	498d      	ldr	r1, [pc, #564]	@ (801a8a8 <tcp_write+0x2d0>)
 801a672:	488c      	ldr	r0, [pc, #560]	@ (801a8a4 <tcp_write+0x2cc>)
 801a674:	f006 ff84 	bl	8021580 <iprintf>
 801a678:	f06f 030f 	mvn.w	r3, #15
 801a67c:	e361      	b.n	801ad42 <tcp_write+0x76a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a67e:	88fb      	ldrh	r3, [r7, #6]
 801a680:	4619      	mov	r1, r3
 801a682:	68f8      	ldr	r0, [r7, #12]
 801a684:	f7ff ff24 	bl	801a4d0 <tcp_write_checks>
 801a688:	4603      	mov	r3, r0
 801a68a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 801a68e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a692:	2b00      	cmp	r3, #0
 801a694:	d002      	beq.n	801a69c <tcp_write+0xc4>
    return err;
 801a696:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a69a:	e352      	b.n	801ad42 <tcp_write+0x76a>
  }
  queuelen = pcb->snd_queuelen;
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a6a2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	f000 8127 	beq.w	801a904 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6ba:	643b      	str	r3, [r7, #64]	@ 0x40
 801a6bc:	e002      	b.n	801a6c4 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 801a6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a6c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d1f8      	bne.n	801a6be <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a6cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6ce:	7b1b      	ldrb	r3, [r3, #12]
 801a6d0:	009b      	lsls	r3, r3, #2
 801a6d2:	b29b      	uxth	r3, r3
 801a6d4:	f003 0304 	and.w	r3, r3, #4
 801a6d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a6da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a6dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6de:	891b      	ldrh	r3, [r3, #8]
 801a6e0:	4619      	mov	r1, r3
 801a6e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a6e4:	440b      	add	r3, r1
 801a6e6:	429a      	cmp	r2, r3
 801a6e8:	da06      	bge.n	801a6f8 <tcp_write+0x120>
 801a6ea:	4b6c      	ldr	r3, [pc, #432]	@ (801a89c <tcp_write+0x2c4>)
 801a6ec:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801a6f0:	496e      	ldr	r1, [pc, #440]	@ (801a8ac <tcp_write+0x2d4>)
 801a6f2:	486c      	ldr	r0, [pc, #432]	@ (801a8a4 <tcp_write+0x2cc>)
 801a6f4:	f006 ff44 	bl	8021580 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a6f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a6fa:	891a      	ldrh	r2, [r3, #8]
 801a6fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a6fe:	4413      	add	r3, r2
 801a700:	b29b      	uxth	r3, r3
 801a702:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a704:	1ad3      	subs	r3, r2, r3
 801a706:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 801a710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a712:	895b      	ldrh	r3, [r3, #10]
 801a714:	429a      	cmp	r2, r3
 801a716:	d006      	beq.n	801a726 <tcp_write+0x14e>
 801a718:	4b60      	ldr	r3, [pc, #384]	@ (801a89c <tcp_write+0x2c4>)
 801a71a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801a71e:	4964      	ldr	r1, [pc, #400]	@ (801a8b0 <tcp_write+0x2d8>)
 801a720:	4860      	ldr	r0, [pc, #384]	@ (801a8a4 <tcp_write+0x2cc>)
 801a722:	f006 ff2d 	bl	8021580 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a72c:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801a72e:	8afb      	ldrh	r3, [r7, #22]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d02e      	beq.n	801a792 <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a734:	8afb      	ldrh	r3, [r7, #22]
 801a736:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a73a:	429a      	cmp	r2, r3
 801a73c:	d206      	bcs.n	801a74c <tcp_write+0x174>
 801a73e:	4b57      	ldr	r3, [pc, #348]	@ (801a89c <tcp_write+0x2c4>)
 801a740:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801a744:	495b      	ldr	r1, [pc, #364]	@ (801a8b4 <tcp_write+0x2dc>)
 801a746:	4857      	ldr	r0, [pc, #348]	@ (801a8a4 <tcp_write+0x2cc>)
 801a748:	f006 ff1a 	bl	8021580 <iprintf>
      seg = last_unsent;
 801a74c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a74e:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a750:	8afb      	ldrh	r3, [r7, #22]
 801a752:	88fa      	ldrh	r2, [r7, #6]
 801a754:	4293      	cmp	r3, r2
 801a756:	bf28      	it	cs
 801a758:	4613      	movcs	r3, r2
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a760:	4293      	cmp	r3, r2
 801a762:	bf28      	it	cs
 801a764:	4613      	movcs	r3, r2
 801a766:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 801a76a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a76e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a772:	4413      	add	r3, r2
 801a774:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 801a778:	8afa      	ldrh	r2, [r7, #22]
 801a77a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a77e:	1ad3      	subs	r3, r2, r3
 801a780:	b29b      	uxth	r3, r3
 801a782:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 801a784:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a788:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a78c:	1ad3      	subs	r3, r2, r3
 801a78e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a792:	8afb      	ldrh	r3, [r7, #22]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d00b      	beq.n	801a7b0 <tcp_write+0x1d8>
 801a798:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a79c:	88fb      	ldrh	r3, [r7, #6]
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	d006      	beq.n	801a7b0 <tcp_write+0x1d8>
 801a7a2:	4b3e      	ldr	r3, [pc, #248]	@ (801a89c <tcp_write+0x2c4>)
 801a7a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a7a8:	4943      	ldr	r1, [pc, #268]	@ (801a8b8 <tcp_write+0x2e0>)
 801a7aa:	483e      	ldr	r0, [pc, #248]	@ (801a8a4 <tcp_write+0x2cc>)
 801a7ac:	f006 fee8 	bl	8021580 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a7b0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a7b4:	88fb      	ldrh	r3, [r7, #6]
 801a7b6:	429a      	cmp	r2, r3
 801a7b8:	f080 8172 	bcs.w	801aaa0 <tcp_write+0x4c8>
 801a7bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	f000 816d 	beq.w	801aaa0 <tcp_write+0x4c8>
 801a7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a7c8:	891b      	ldrh	r3, [r3, #8]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	f000 8168 	beq.w	801aaa0 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a7d0:	88fa      	ldrh	r2, [r7, #6]
 801a7d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a7d6:	1ad2      	subs	r2, r2, r3
 801a7d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a7dc:	4293      	cmp	r3, r2
 801a7de:	bfa8      	it	ge
 801a7e0:	4613      	movge	r3, r2
 801a7e2:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 801a7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a7e6:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a7e8:	797b      	ldrb	r3, [r7, #5]
 801a7ea:	f003 0301 	and.w	r3, r3, #1
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d02b      	beq.n	801a84a <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a7f2:	f107 0016 	add.w	r0, r7, #22
 801a7f6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a7fa:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 801a7fc:	2301      	movs	r3, #1
 801a7fe:	9302      	str	r3, [sp, #8]
 801a800:	797b      	ldrb	r3, [r7, #5]
 801a802:	9301      	str	r3, [sp, #4]
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	9300      	str	r3, [sp, #0]
 801a808:	4603      	mov	r3, r0
 801a80a:	2000      	movs	r0, #0
 801a80c:	f7ff fde6 	bl	801a3dc <tcp_pbuf_prealloc>
 801a810:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a814:	2b00      	cmp	r3, #0
 801a816:	f000 825a 	beq.w	801acce <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801a81a:	8afb      	ldrh	r3, [r7, #22]
 801a81c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a822:	6858      	ldr	r0, [r3, #4]
 801a824:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a828:	68ba      	ldr	r2, [r7, #8]
 801a82a:	4413      	add	r3, r2
 801a82c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a82e:	4619      	mov	r1, r3
 801a830:	f007 f87b 	bl	802192a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a834:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a836:	f7fa ff03 	bl	8015640 <pbuf_clen>
 801a83a:	4603      	mov	r3, r0
 801a83c:	461a      	mov	r2, r3
 801a83e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a842:	4413      	add	r3, r2
 801a844:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801a848:	e055      	b.n	801a8f6 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a84a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a84c:	685b      	ldr	r3, [r3, #4]
 801a84e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a850:	e002      	b.n	801a858 <tcp_write+0x280>
 801a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d1f8      	bne.n	801a852 <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a862:	7b1b      	ldrb	r3, [r3, #12]
 801a864:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d129      	bne.n	801a8c0 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a86e:	685b      	ldr	r3, [r3, #4]
 801a870:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a872:	8952      	ldrh	r2, [r2, #10]
 801a874:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a876:	68ba      	ldr	r2, [r7, #8]
 801a878:	429a      	cmp	r2, r3
 801a87a:	d121      	bne.n	801a8c0 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a87c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a880:	2b00      	cmp	r3, #0
 801a882:	d006      	beq.n	801a892 <tcp_write+0x2ba>
 801a884:	4b05      	ldr	r3, [pc, #20]	@ (801a89c <tcp_write+0x2c4>)
 801a886:	f240 2231 	movw	r2, #561	@ 0x231
 801a88a:	490c      	ldr	r1, [pc, #48]	@ (801a8bc <tcp_write+0x2e4>)
 801a88c:	4805      	ldr	r0, [pc, #20]	@ (801a8a4 <tcp_write+0x2cc>)
 801a88e:	f006 fe77 	bl	8021580 <iprintf>
          extendlen = seglen;
 801a892:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a894:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 801a898:	e02d      	b.n	801a8f6 <tcp_write+0x31e>
 801a89a:	bf00      	nop
 801a89c:	080252f0 	.word	0x080252f0
 801a8a0:	08025490 	.word	0x08025490
 801a8a4:	08025344 	.word	0x08025344
 801a8a8:	080254a8 	.word	0x080254a8
 801a8ac:	080254dc 	.word	0x080254dc
 801a8b0:	080254f4 	.word	0x080254f4
 801a8b4:	08025524 	.word	0x08025524
 801a8b8:	08025544 	.word	0x08025544
 801a8bc:	08025564 	.word	0x08025564
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a8c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a8c2:	2201      	movs	r2, #1
 801a8c4:	4619      	mov	r1, r3
 801a8c6:	2000      	movs	r0, #0
 801a8c8:	f7fa fae8 	bl	8014e9c <pbuf_alloc>
 801a8cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	f000 81fe 	beq.w	801acd2 <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a8d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a8da:	68ba      	ldr	r2, [r7, #8]
 801a8dc:	441a      	add	r2, r3
 801a8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8e0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a8e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a8e4:	f7fa feac 	bl	8015640 <pbuf_clen>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	461a      	mov	r2, r3
 801a8ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a8f0:	4413      	add	r3, r2
 801a8f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a8f6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a8fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a8fc:	4413      	add	r3, r2
 801a8fe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 801a902:	e0cd      	b.n	801aaa0 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	f000 80c8 	beq.w	801aaa0 <tcp_write+0x4c8>
 801a910:	4b72      	ldr	r3, [pc, #456]	@ (801aadc <tcp_write+0x504>)
 801a912:	f240 224a 	movw	r2, #586	@ 0x24a
 801a916:	4972      	ldr	r1, [pc, #456]	@ (801aae0 <tcp_write+0x508>)
 801a918:	4872      	ldr	r0, [pc, #456]	@ (801aae4 <tcp_write+0x50c>)
 801a91a:	f006 fe31 	bl	8021580 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a91e:	e0bf      	b.n	801aaa0 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 801a920:	88fa      	ldrh	r2, [r7, #6]
 801a922:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a926:	1ad3      	subs	r3, r2, r3
 801a928:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 801a92a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a92e:	b29b      	uxth	r3, r3
 801a930:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a932:	1ad3      	subs	r3, r2, r3
 801a934:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a936:	8bfa      	ldrh	r2, [r7, #30]
 801a938:	8c3b      	ldrh	r3, [r7, #32]
 801a93a:	4293      	cmp	r3, r2
 801a93c:	bf28      	it	cs
 801a93e:	4613      	movcs	r3, r2
 801a940:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a942:	797b      	ldrb	r3, [r7, #5]
 801a944:	f003 0301 	and.w	r3, r3, #1
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d036      	beq.n	801a9ba <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a94c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a950:	b29a      	uxth	r2, r3
 801a952:	8bbb      	ldrh	r3, [r7, #28]
 801a954:	4413      	add	r3, r2
 801a956:	b299      	uxth	r1, r3
 801a958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	bf0c      	ite	eq
 801a95e:	2301      	moveq	r3, #1
 801a960:	2300      	movne	r3, #0
 801a962:	b2db      	uxtb	r3, r3
 801a964:	f107 0016 	add.w	r0, r7, #22
 801a968:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a96a:	9302      	str	r3, [sp, #8]
 801a96c:	797b      	ldrb	r3, [r7, #5]
 801a96e:	9301      	str	r3, [sp, #4]
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	9300      	str	r3, [sp, #0]
 801a974:	4603      	mov	r3, r0
 801a976:	2036      	movs	r0, #54	@ 0x36
 801a978:	f7ff fd30 	bl	801a3dc <tcp_pbuf_prealloc>
 801a97c:	6378      	str	r0, [r7, #52]	@ 0x34
 801a97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a980:	2b00      	cmp	r3, #0
 801a982:	f000 81a8 	beq.w	801acd6 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a988:	895b      	ldrh	r3, [r3, #10]
 801a98a:	8bba      	ldrh	r2, [r7, #28]
 801a98c:	429a      	cmp	r2, r3
 801a98e:	d906      	bls.n	801a99e <tcp_write+0x3c6>
 801a990:	4b52      	ldr	r3, [pc, #328]	@ (801aadc <tcp_write+0x504>)
 801a992:	f240 2266 	movw	r2, #614	@ 0x266
 801a996:	4954      	ldr	r1, [pc, #336]	@ (801aae8 <tcp_write+0x510>)
 801a998:	4852      	ldr	r0, [pc, #328]	@ (801aae4 <tcp_write+0x50c>)
 801a99a:	f006 fdf1 	bl	8021580 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9a0:	685a      	ldr	r2, [r3, #4]
 801a9a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a9a6:	18d0      	adds	r0, r2, r3
 801a9a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a9ac:	68ba      	ldr	r2, [r7, #8]
 801a9ae:	4413      	add	r3, r2
 801a9b0:	8bba      	ldrh	r2, [r7, #28]
 801a9b2:	4619      	mov	r1, r3
 801a9b4:	f006 ffb9 	bl	802192a <memcpy>
 801a9b8:	e02f      	b.n	801aa1a <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a9ba:	8afb      	ldrh	r3, [r7, #22]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d006      	beq.n	801a9ce <tcp_write+0x3f6>
 801a9c0:	4b46      	ldr	r3, [pc, #280]	@ (801aadc <tcp_write+0x504>)
 801a9c2:	f240 2271 	movw	r2, #625	@ 0x271
 801a9c6:	4949      	ldr	r1, [pc, #292]	@ (801aaec <tcp_write+0x514>)
 801a9c8:	4846      	ldr	r0, [pc, #280]	@ (801aae4 <tcp_write+0x50c>)
 801a9ca:	f006 fdd9 	bl	8021580 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a9ce:	8bbb      	ldrh	r3, [r7, #28]
 801a9d0:	2201      	movs	r2, #1
 801a9d2:	4619      	mov	r1, r3
 801a9d4:	2036      	movs	r0, #54	@ 0x36
 801a9d6:	f7fa fa61 	bl	8014e9c <pbuf_alloc>
 801a9da:	61b8      	str	r0, [r7, #24]
 801a9dc:	69bb      	ldr	r3, [r7, #24]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	f000 817b 	beq.w	801acda <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a9e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a9e8:	68ba      	ldr	r2, [r7, #8]
 801a9ea:	441a      	add	r2, r3
 801a9ec:	69bb      	ldr	r3, [r7, #24]
 801a9ee:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a9f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a9f4:	b29b      	uxth	r3, r3
 801a9f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a9fa:	4619      	mov	r1, r3
 801a9fc:	2036      	movs	r0, #54	@ 0x36
 801a9fe:	f7fa fa4d 	bl	8014e9c <pbuf_alloc>
 801aa02:	6378      	str	r0, [r7, #52]	@ 0x34
 801aa04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d103      	bne.n	801aa12 <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801aa0a:	69b8      	ldr	r0, [r7, #24]
 801aa0c:	f7fa fd72 	bl	80154f4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801aa10:	e166      	b.n	801ace0 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801aa12:	69b9      	ldr	r1, [r7, #24]
 801aa14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801aa16:	f7fa fe53 	bl	80156c0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801aa1a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801aa1c:	f7fa fe10 	bl	8015640 <pbuf_clen>
 801aa20:	4603      	mov	r3, r0
 801aa22:	461a      	mov	r2, r3
 801aa24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801aa28:	4413      	add	r3, r2
 801aa2a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801aa2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801aa32:	2b09      	cmp	r3, #9
 801aa34:	d903      	bls.n	801aa3e <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801aa36:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801aa38:	f7fa fd5c 	bl	80154f4 <pbuf_free>
      goto memerr;
 801aa3c:	e150      	b.n	801ace0 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801aa42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801aa46:	441a      	add	r2, r3
 801aa48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801aa4c:	9300      	str	r3, [sp, #0]
 801aa4e:	4613      	mov	r3, r2
 801aa50:	2200      	movs	r2, #0
 801aa52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801aa54:	68f8      	ldr	r0, [r7, #12]
 801aa56:	f7ff fc17 	bl	801a288 <tcp_create_segment>
 801aa5a:	6578      	str	r0, [r7, #84]	@ 0x54
 801aa5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	f000 813d 	beq.w	801acde <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 801aa64:	8afa      	ldrh	r2, [r7, #22]
 801aa66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa68:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801aa6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d102      	bne.n	801aa76 <tcp_write+0x49e>
      queue = seg;
 801aa70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801aa74:	e00c      	b.n	801aa90 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801aa76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d106      	bne.n	801aa8a <tcp_write+0x4b2>
 801aa7c:	4b17      	ldr	r3, [pc, #92]	@ (801aadc <tcp_write+0x504>)
 801aa7e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801aa82:	491b      	ldr	r1, [pc, #108]	@ (801aaf0 <tcp_write+0x518>)
 801aa84:	4817      	ldr	r0, [pc, #92]	@ (801aae4 <tcp_write+0x50c>)
 801aa86:	f006 fd7b 	bl	8021580 <iprintf>
      prev_seg->next = seg;
 801aa8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aa8e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801aa90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa92:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801aa94:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801aa98:	8bbb      	ldrh	r3, [r7, #28]
 801aa9a:	4413      	add	r3, r2
 801aa9c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 801aaa0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801aaa4:	88fb      	ldrh	r3, [r7, #6]
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	f4ff af3a 	bcc.w	801a920 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801aaac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d00b      	beq.n	801aaca <tcp_write+0x4f2>
 801aab2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d007      	beq.n	801aaca <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801aaba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aabc:	895a      	ldrh	r2, [r3, #10]
 801aabe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801aac2:	4413      	add	r3, r2
 801aac4:	b29a      	uxth	r2, r3
 801aac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aac8:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801aaca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d052      	beq.n	801ab78 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aad4:	685b      	ldr	r3, [r3, #4]
 801aad6:	633b      	str	r3, [r7, #48]	@ 0x30
 801aad8:	e02e      	b.n	801ab38 <tcp_write+0x560>
 801aada:	bf00      	nop
 801aadc:	080252f0 	.word	0x080252f0
 801aae0:	08025590 	.word	0x08025590
 801aae4:	08025344 	.word	0x08025344
 801aae8:	080255c0 	.word	0x080255c0
 801aaec:	08025600 	.word	0x08025600
 801aaf0:	08025610 	.word	0x08025610
      p->tot_len += oversize_used;
 801aaf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaf6:	891a      	ldrh	r2, [r3, #8]
 801aaf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801aafc:	4413      	add	r3, r2
 801aafe:	b29a      	uxth	r2, r3
 801ab00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab02:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801ab04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d112      	bne.n	801ab32 <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ab0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab12:	8952      	ldrh	r2, [r2, #10]
 801ab14:	4413      	add	r3, r2
 801ab16:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ab1a:	68b9      	ldr	r1, [r7, #8]
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f006 ff04 	bl	802192a <memcpy>
        p->len += oversize_used;
 801ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab24:	895a      	ldrh	r2, [r3, #10]
 801ab26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ab2a:	4413      	add	r3, r2
 801ab2c:	b29a      	uxth	r2, r3
 801ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab30:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	633b      	str	r3, [r7, #48]	@ 0x30
 801ab38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d1da      	bne.n	801aaf4 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 801ab3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab40:	891a      	ldrh	r2, [r3, #8]
 801ab42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ab46:	4413      	add	r3, r2
 801ab48:	b29a      	uxth	r2, r3
 801ab4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab4c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801ab4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab50:	895b      	ldrh	r3, [r3, #10]
 801ab52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ab56:	429a      	cmp	r2, r3
 801ab58:	d906      	bls.n	801ab68 <tcp_write+0x590>
 801ab5a:	4b7c      	ldr	r3, [pc, #496]	@ (801ad4c <tcp_write+0x774>)
 801ab5c:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801ab60:	497b      	ldr	r1, [pc, #492]	@ (801ad50 <tcp_write+0x778>)
 801ab62:	487c      	ldr	r0, [pc, #496]	@ (801ad54 <tcp_write+0x77c>)
 801ab64:	f006 fd0c 	bl	8021580 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 801ab68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab6a:	895a      	ldrh	r2, [r3, #10]
 801ab6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ab70:	1ad3      	subs	r3, r2, r3
 801ab72:	b29a      	uxth	r2, r3
 801ab74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab76:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801ab78:	8afa      	ldrh	r2, [r7, #22]
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801ab80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d018      	beq.n	801abb8 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ab86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d106      	bne.n	801ab9a <tcp_write+0x5c2>
 801ab8c:	4b6f      	ldr	r3, [pc, #444]	@ (801ad4c <tcp_write+0x774>)
 801ab8e:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801ab92:	4971      	ldr	r1, [pc, #452]	@ (801ad58 <tcp_write+0x780>)
 801ab94:	486f      	ldr	r0, [pc, #444]	@ (801ad54 <tcp_write+0x77c>)
 801ab96:	f006 fcf3 	bl	8021580 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801ab9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ab9c:	685b      	ldr	r3, [r3, #4]
 801ab9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7fa fd8d 	bl	80156c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801aba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aba8:	891a      	ldrh	r2, [r3, #8]
 801abaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abac:	891b      	ldrh	r3, [r3, #8]
 801abae:	4413      	add	r3, r2
 801abb0:	b29a      	uxth	r2, r3
 801abb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abb4:	811a      	strh	r2, [r3, #8]
 801abb6:	e03c      	b.n	801ac32 <tcp_write+0x65a>
  } else if (extendlen > 0) {
 801abb8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d038      	beq.n	801ac32 <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801abc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d003      	beq.n	801abce <tcp_write+0x5f6>
 801abc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abc8:	685b      	ldr	r3, [r3, #4]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d106      	bne.n	801abdc <tcp_write+0x604>
 801abce:	4b5f      	ldr	r3, [pc, #380]	@ (801ad4c <tcp_write+0x774>)
 801abd0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801abd4:	4961      	ldr	r1, [pc, #388]	@ (801ad5c <tcp_write+0x784>)
 801abd6:	485f      	ldr	r0, [pc, #380]	@ (801ad54 <tcp_write+0x77c>)
 801abd8:	f006 fcd2 	bl	8021580 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801abdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abde:	685b      	ldr	r3, [r3, #4]
 801abe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801abe2:	e00a      	b.n	801abfa <tcp_write+0x622>
      p->tot_len += extendlen;
 801abe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abe6:	891a      	ldrh	r2, [r3, #8]
 801abe8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801abec:	4413      	add	r3, r2
 801abee:	b29a      	uxth	r2, r3
 801abf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abf2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801abf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801abfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d1f0      	bne.n	801abe4 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801ac02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac04:	891a      	ldrh	r2, [r3, #8]
 801ac06:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801ac0a:	4413      	add	r3, r2
 801ac0c:	b29a      	uxth	r2, r3
 801ac0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac10:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ac12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac14:	895a      	ldrh	r2, [r3, #10]
 801ac16:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801ac1a:	4413      	add	r3, r2
 801ac1c:	b29a      	uxth	r2, r3
 801ac1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac20:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ac22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac24:	891a      	ldrh	r2, [r3, #8]
 801ac26:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801ac2a:	4413      	add	r3, r2
 801ac2c:	b29a      	uxth	r2, r3
 801ac2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac30:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801ac32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d103      	bne.n	801ac40 <tcp_write+0x668>
    pcb->unsent = queue;
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ac3c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801ac3e:	e002      	b.n	801ac46 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801ac40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ac44:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801ac4a:	88fb      	ldrh	r3, [r7, #6]
 801ac4c:	441a      	add	r2, r3
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801ac58:	88fb      	ldrh	r3, [r7, #6]
 801ac5a:	1ad3      	subs	r3, r2, r3
 801ac5c:	b29a      	uxth	r2, r3
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801ac6a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d00e      	beq.n	801ac96 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d10a      	bne.n	801ac96 <tcp_write+0x6be>
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d106      	bne.n	801ac96 <tcp_write+0x6be>
 801ac88:	4b30      	ldr	r3, [pc, #192]	@ (801ad4c <tcp_write+0x774>)
 801ac8a:	f240 3212 	movw	r2, #786	@ 0x312
 801ac8e:	4934      	ldr	r1, [pc, #208]	@ (801ad60 <tcp_write+0x788>)
 801ac90:	4830      	ldr	r0, [pc, #192]	@ (801ad54 <tcp_write+0x77c>)
 801ac92:	f006 fc75 	bl	8021580 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801ac96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d016      	beq.n	801acca <tcp_write+0x6f2>
 801ac9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ac9e:	691b      	ldr	r3, [r3, #16]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d012      	beq.n	801acca <tcp_write+0x6f2>
 801aca4:	797b      	ldrb	r3, [r7, #5]
 801aca6:	f003 0302 	and.w	r3, r3, #2
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d10d      	bne.n	801acca <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801acae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801acb0:	691b      	ldr	r3, [r3, #16]
 801acb2:	899b      	ldrh	r3, [r3, #12]
 801acb4:	b29c      	uxth	r4, r3
 801acb6:	2008      	movs	r0, #8
 801acb8:	f7f8 fdee 	bl	8013898 <lwip_htons>
 801acbc:	4603      	mov	r3, r0
 801acbe:	461a      	mov	r2, r3
 801acc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801acc2:	691b      	ldr	r3, [r3, #16]
 801acc4:	4322      	orrs	r2, r4
 801acc6:	b292      	uxth	r2, r2
 801acc8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801acca:	2300      	movs	r3, #0
 801accc:	e039      	b.n	801ad42 <tcp_write+0x76a>
          goto memerr;
 801acce:	bf00      	nop
 801acd0:	e006      	b.n	801ace0 <tcp_write+0x708>
            goto memerr;
 801acd2:	bf00      	nop
 801acd4:	e004      	b.n	801ace0 <tcp_write+0x708>
        goto memerr;
 801acd6:	bf00      	nop
 801acd8:	e002      	b.n	801ace0 <tcp_write+0x708>
        goto memerr;
 801acda:	bf00      	nop
 801acdc:	e000      	b.n	801ace0 <tcp_write+0x708>
      goto memerr;
 801acde:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	8b5b      	ldrh	r3, [r3, #26]
 801ace4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ace8:	b29a      	uxth	r2, r3
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801acee:	4b1d      	ldr	r3, [pc, #116]	@ (801ad64 <tcp_write+0x78c>)
 801acf0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801acf4:	3301      	adds	r3, #1
 801acf6:	b29a      	uxth	r2, r3
 801acf8:	4b1a      	ldr	r3, [pc, #104]	@ (801ad64 <tcp_write+0x78c>)
 801acfa:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 801acfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d002      	beq.n	801ad0a <tcp_write+0x732>
    pbuf_free(concat_p);
 801ad04:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801ad06:	f7fa fbf5 	bl	80154f4 <pbuf_free>
  }
  if (queue != NULL) {
 801ad0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d002      	beq.n	801ad16 <tcp_write+0x73e>
    tcp_segs_free(queue);
 801ad10:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ad12:	f7fc fa67 	bl	80171e4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d00e      	beq.n	801ad3e <tcp_write+0x766>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d10a      	bne.n	801ad3e <tcp_write+0x766>
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d106      	bne.n	801ad3e <tcp_write+0x766>
 801ad30:	4b06      	ldr	r3, [pc, #24]	@ (801ad4c <tcp_write+0x774>)
 801ad32:	f240 3227 	movw	r2, #807	@ 0x327
 801ad36:	490a      	ldr	r1, [pc, #40]	@ (801ad60 <tcp_write+0x788>)
 801ad38:	4806      	ldr	r0, [pc, #24]	@ (801ad54 <tcp_write+0x77c>)
 801ad3a:	f006 fc21 	bl	8021580 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801ad3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801ad42:	4618      	mov	r0, r3
 801ad44:	3764      	adds	r7, #100	@ 0x64
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd90      	pop	{r4, r7, pc}
 801ad4a:	bf00      	nop
 801ad4c:	080252f0 	.word	0x080252f0
 801ad50:	08025624 	.word	0x08025624
 801ad54:	08025344 	.word	0x08025344
 801ad58:	08025650 	.word	0x08025650
 801ad5c:	08025688 	.word	0x08025688
 801ad60:	080256c0 	.word	0x080256c0
 801ad64:	2002d358 	.word	0x2002d358

0801ad68 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801ad68:	b590      	push	{r4, r7, lr}
 801ad6a:	b08b      	sub	sp, #44	@ 0x2c
 801ad6c:	af02      	add	r7, sp, #8
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	460b      	mov	r3, r1
 801ad72:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ad74:	2300      	movs	r3, #0
 801ad76:	61bb      	str	r3, [r7, #24]
 801ad78:	2300      	movs	r3, #0
 801ad7a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d106      	bne.n	801ad94 <tcp_split_unsent_seg+0x2c>
 801ad86:	4b9b      	ldr	r3, [pc, #620]	@ (801aff4 <tcp_split_unsent_seg+0x28c>)
 801ad88:	f240 324b 	movw	r2, #843	@ 0x34b
 801ad8c:	499a      	ldr	r1, [pc, #616]	@ (801aff8 <tcp_split_unsent_seg+0x290>)
 801ad8e:	489b      	ldr	r0, [pc, #620]	@ (801affc <tcp_split_unsent_seg+0x294>)
 801ad90:	f006 fbf6 	bl	8021580 <iprintf>

  useg = pcb->unsent;
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad98:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ad9a:	697b      	ldr	r3, [r7, #20]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d102      	bne.n	801ada6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801ada0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ada4:	e121      	b.n	801afea <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 801ada6:	887b      	ldrh	r3, [r7, #2]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d109      	bne.n	801adc0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801adac:	4b91      	ldr	r3, [pc, #580]	@ (801aff4 <tcp_split_unsent_seg+0x28c>)
 801adae:	f240 3253 	movw	r2, #851	@ 0x353
 801adb2:	4993      	ldr	r1, [pc, #588]	@ (801b000 <tcp_split_unsent_seg+0x298>)
 801adb4:	4891      	ldr	r0, [pc, #580]	@ (801affc <tcp_split_unsent_seg+0x294>)
 801adb6:	f006 fbe3 	bl	8021580 <iprintf>
    return ERR_VAL;
 801adba:	f06f 0305 	mvn.w	r3, #5
 801adbe:	e114      	b.n	801afea <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 801adc0:	697b      	ldr	r3, [r7, #20]
 801adc2:	891b      	ldrh	r3, [r3, #8]
 801adc4:	887a      	ldrh	r2, [r7, #2]
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d301      	bcc.n	801adce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801adca:	2300      	movs	r3, #0
 801adcc:	e10d      	b.n	801afea <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801add2:	887a      	ldrh	r2, [r7, #2]
 801add4:	429a      	cmp	r2, r3
 801add6:	d906      	bls.n	801ade6 <tcp_split_unsent_seg+0x7e>
 801add8:	4b86      	ldr	r3, [pc, #536]	@ (801aff4 <tcp_split_unsent_seg+0x28c>)
 801adda:	f240 325b 	movw	r2, #859	@ 0x35b
 801adde:	4989      	ldr	r1, [pc, #548]	@ (801b004 <tcp_split_unsent_seg+0x29c>)
 801ade0:	4886      	ldr	r0, [pc, #536]	@ (801affc <tcp_split_unsent_seg+0x294>)
 801ade2:	f006 fbcd 	bl	8021580 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ade6:	697b      	ldr	r3, [r7, #20]
 801ade8:	891b      	ldrh	r3, [r3, #8]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d106      	bne.n	801adfc <tcp_split_unsent_seg+0x94>
 801adee:	4b81      	ldr	r3, [pc, #516]	@ (801aff4 <tcp_split_unsent_seg+0x28c>)
 801adf0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801adf4:	4984      	ldr	r1, [pc, #528]	@ (801b008 <tcp_split_unsent_seg+0x2a0>)
 801adf6:	4881      	ldr	r0, [pc, #516]	@ (801affc <tcp_split_unsent_seg+0x294>)
 801adf8:	f006 fbc2 	bl	8021580 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801adfc:	697b      	ldr	r3, [r7, #20]
 801adfe:	7b1b      	ldrb	r3, [r3, #12]
 801ae00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ae02:	7bfb      	ldrb	r3, [r7, #15]
 801ae04:	009b      	lsls	r3, r3, #2
 801ae06:	b2db      	uxtb	r3, r3
 801ae08:	f003 0304 	and.w	r3, r3, #4
 801ae0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ae0e:	697b      	ldr	r3, [r7, #20]
 801ae10:	891a      	ldrh	r2, [r3, #8]
 801ae12:	887b      	ldrh	r3, [r7, #2]
 801ae14:	1ad3      	subs	r3, r2, r3
 801ae16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ae18:	7bbb      	ldrb	r3, [r7, #14]
 801ae1a:	b29a      	uxth	r2, r3
 801ae1c:	89bb      	ldrh	r3, [r7, #12]
 801ae1e:	4413      	add	r3, r2
 801ae20:	b29b      	uxth	r3, r3
 801ae22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae26:	4619      	mov	r1, r3
 801ae28:	2036      	movs	r0, #54	@ 0x36
 801ae2a:	f7fa f837 	bl	8014e9c <pbuf_alloc>
 801ae2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ae30:	693b      	ldr	r3, [r7, #16]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	f000 80ba 	beq.w	801afac <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ae38:	697b      	ldr	r3, [r7, #20]
 801ae3a:	685b      	ldr	r3, [r3, #4]
 801ae3c:	891a      	ldrh	r2, [r3, #8]
 801ae3e:	697b      	ldr	r3, [r7, #20]
 801ae40:	891b      	ldrh	r3, [r3, #8]
 801ae42:	1ad3      	subs	r3, r2, r3
 801ae44:	b29a      	uxth	r2, r3
 801ae46:	887b      	ldrh	r3, [r7, #2]
 801ae48:	4413      	add	r3, r2
 801ae4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ae4c:	697b      	ldr	r3, [r7, #20]
 801ae4e:	6858      	ldr	r0, [r3, #4]
 801ae50:	693b      	ldr	r3, [r7, #16]
 801ae52:	685a      	ldr	r2, [r3, #4]
 801ae54:	7bbb      	ldrb	r3, [r7, #14]
 801ae56:	18d1      	adds	r1, r2, r3
 801ae58:	897b      	ldrh	r3, [r7, #10]
 801ae5a:	89ba      	ldrh	r2, [r7, #12]
 801ae5c:	f7fa fd7c 	bl	8015958 <pbuf_copy_partial>
 801ae60:	4603      	mov	r3, r0
 801ae62:	461a      	mov	r2, r3
 801ae64:	89bb      	ldrh	r3, [r7, #12]
 801ae66:	4293      	cmp	r3, r2
 801ae68:	f040 80a2 	bne.w	801afb0 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ae6c:	697b      	ldr	r3, [r7, #20]
 801ae6e:	691b      	ldr	r3, [r3, #16]
 801ae70:	899b      	ldrh	r3, [r3, #12]
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	4618      	mov	r0, r3
 801ae76:	f7f8 fd0f 	bl	8013898 <lwip_htons>
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	b2db      	uxtb	r3, r3
 801ae7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ae82:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801ae84:	2300      	movs	r3, #0
 801ae86:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801ae88:	7ffb      	ldrb	r3, [r7, #31]
 801ae8a:	f003 0308 	and.w	r3, r3, #8
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d007      	beq.n	801aea2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801ae92:	7ffb      	ldrb	r3, [r7, #31]
 801ae94:	f023 0308 	bic.w	r3, r3, #8
 801ae98:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801ae9a:	7fbb      	ldrb	r3, [r7, #30]
 801ae9c:	f043 0308 	orr.w	r3, r3, #8
 801aea0:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801aea2:	7ffb      	ldrb	r3, [r7, #31]
 801aea4:	f003 0301 	and.w	r3, r3, #1
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d007      	beq.n	801aebc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801aeac:	7ffb      	ldrb	r3, [r7, #31]
 801aeae:	f023 0301 	bic.w	r3, r3, #1
 801aeb2:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801aeb4:	7fbb      	ldrb	r3, [r7, #30]
 801aeb6:	f043 0301 	orr.w	r3, r3, #1
 801aeba:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801aebc:	697b      	ldr	r3, [r7, #20]
 801aebe:	691b      	ldr	r3, [r3, #16]
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	4618      	mov	r0, r3
 801aec4:	f7f8 fcfe 	bl	80138c4 <lwip_htonl>
 801aec8:	4602      	mov	r2, r0
 801aeca:	887b      	ldrh	r3, [r7, #2]
 801aecc:	18d1      	adds	r1, r2, r3
 801aece:	7fba      	ldrb	r2, [r7, #30]
 801aed0:	7bfb      	ldrb	r3, [r7, #15]
 801aed2:	9300      	str	r3, [sp, #0]
 801aed4:	460b      	mov	r3, r1
 801aed6:	6939      	ldr	r1, [r7, #16]
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f7ff f9d5 	bl	801a288 <tcp_create_segment>
 801aede:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801aee0:	69bb      	ldr	r3, [r7, #24]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d066      	beq.n	801afb4 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	685b      	ldr	r3, [r3, #4]
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7fa fba8 	bl	8015640 <pbuf_clen>
 801aef0:	4603      	mov	r3, r0
 801aef2:	461a      	mov	r2, r3
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801aefa:	1a9b      	subs	r3, r3, r2
 801aefc:	b29a      	uxth	r2, r3
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	6858      	ldr	r0, [r3, #4]
 801af08:	697b      	ldr	r3, [r7, #20]
 801af0a:	685b      	ldr	r3, [r3, #4]
 801af0c:	891a      	ldrh	r2, [r3, #8]
 801af0e:	89bb      	ldrh	r3, [r7, #12]
 801af10:	1ad3      	subs	r3, r2, r3
 801af12:	b29b      	uxth	r3, r3
 801af14:	4619      	mov	r1, r3
 801af16:	f7fa f94d 	bl	80151b4 <pbuf_realloc>
  useg->len -= remainder;
 801af1a:	697b      	ldr	r3, [r7, #20]
 801af1c:	891a      	ldrh	r2, [r3, #8]
 801af1e:	89bb      	ldrh	r3, [r7, #12]
 801af20:	1ad3      	subs	r3, r2, r3
 801af22:	b29a      	uxth	r2, r3
 801af24:	697b      	ldr	r3, [r7, #20]
 801af26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801af28:	697b      	ldr	r3, [r7, #20]
 801af2a:	691b      	ldr	r3, [r3, #16]
 801af2c:	899b      	ldrh	r3, [r3, #12]
 801af2e:	b29c      	uxth	r4, r3
 801af30:	7ffb      	ldrb	r3, [r7, #31]
 801af32:	b29b      	uxth	r3, r3
 801af34:	4618      	mov	r0, r3
 801af36:	f7f8 fcaf 	bl	8013898 <lwip_htons>
 801af3a:	4603      	mov	r3, r0
 801af3c:	461a      	mov	r2, r3
 801af3e:	697b      	ldr	r3, [r7, #20]
 801af40:	691b      	ldr	r3, [r3, #16]
 801af42:	4322      	orrs	r2, r4
 801af44:	b292      	uxth	r2, r2
 801af46:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	2200      	movs	r2, #0
 801af4c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801af4e:	697b      	ldr	r3, [r7, #20]
 801af50:	685b      	ldr	r3, [r3, #4]
 801af52:	4618      	mov	r0, r3
 801af54:	f7fa fb74 	bl	8015640 <pbuf_clen>
 801af58:	4603      	mov	r3, r0
 801af5a:	461a      	mov	r2, r3
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801af62:	4413      	add	r3, r2
 801af64:	b29a      	uxth	r2, r3
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801af6c:	69bb      	ldr	r3, [r7, #24]
 801af6e:	685b      	ldr	r3, [r3, #4]
 801af70:	4618      	mov	r0, r3
 801af72:	f7fa fb65 	bl	8015640 <pbuf_clen>
 801af76:	4603      	mov	r3, r0
 801af78:	461a      	mov	r2, r3
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801af80:	4413      	add	r3, r2
 801af82:	b29a      	uxth	r2, r3
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801af8a:	697b      	ldr	r3, [r7, #20]
 801af8c:	681a      	ldr	r2, [r3, #0]
 801af8e:	69bb      	ldr	r3, [r7, #24]
 801af90:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801af92:	697b      	ldr	r3, [r7, #20]
 801af94:	69ba      	ldr	r2, [r7, #24]
 801af96:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801af98:	69bb      	ldr	r3, [r7, #24]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d103      	bne.n	801afa8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	2200      	movs	r2, #0
 801afa4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801afa8:	2300      	movs	r3, #0
 801afaa:	e01e      	b.n	801afea <tcp_split_unsent_seg+0x282>
    goto memerr;
 801afac:	bf00      	nop
 801afae:	e002      	b.n	801afb6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801afb0:	bf00      	nop
 801afb2:	e000      	b.n	801afb6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801afb4:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801afb6:	4b15      	ldr	r3, [pc, #84]	@ (801b00c <tcp_split_unsent_seg+0x2a4>)
 801afb8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801afbc:	3301      	adds	r3, #1
 801afbe:	b29a      	uxth	r2, r3
 801afc0:	4b12      	ldr	r3, [pc, #72]	@ (801b00c <tcp_split_unsent_seg+0x2a4>)
 801afc2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801afc6:	69bb      	ldr	r3, [r7, #24]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d006      	beq.n	801afda <tcp_split_unsent_seg+0x272>
 801afcc:	4b09      	ldr	r3, [pc, #36]	@ (801aff4 <tcp_split_unsent_seg+0x28c>)
 801afce:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801afd2:	490f      	ldr	r1, [pc, #60]	@ (801b010 <tcp_split_unsent_seg+0x2a8>)
 801afd4:	4809      	ldr	r0, [pc, #36]	@ (801affc <tcp_split_unsent_seg+0x294>)
 801afd6:	f006 fad3 	bl	8021580 <iprintf>
  if (p != NULL) {
 801afda:	693b      	ldr	r3, [r7, #16]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d002      	beq.n	801afe6 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 801afe0:	6938      	ldr	r0, [r7, #16]
 801afe2:	f7fa fa87 	bl	80154f4 <pbuf_free>
  }

  return ERR_MEM;
 801afe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801afea:	4618      	mov	r0, r3
 801afec:	3724      	adds	r7, #36	@ 0x24
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd90      	pop	{r4, r7, pc}
 801aff2:	bf00      	nop
 801aff4:	080252f0 	.word	0x080252f0
 801aff8:	080256e0 	.word	0x080256e0
 801affc:	08025344 	.word	0x08025344
 801b000:	08025704 	.word	0x08025704
 801b004:	08025728 	.word	0x08025728
 801b008:	08025738 	.word	0x08025738
 801b00c:	2002d358 	.word	0x2002d358
 801b010:	08025748 	.word	0x08025748

0801b014 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b014:	b590      	push	{r4, r7, lr}
 801b016:	b085      	sub	sp, #20
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d106      	bne.n	801b030 <tcp_send_fin+0x1c>
 801b022:	4b21      	ldr	r3, [pc, #132]	@ (801b0a8 <tcp_send_fin+0x94>)
 801b024:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801b028:	4920      	ldr	r1, [pc, #128]	@ (801b0ac <tcp_send_fin+0x98>)
 801b02a:	4821      	ldr	r0, [pc, #132]	@ (801b0b0 <tcp_send_fin+0x9c>)
 801b02c:	f006 faa8 	bl	8021580 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b034:	2b00      	cmp	r3, #0
 801b036:	d02e      	beq.n	801b096 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b03c:	60fb      	str	r3, [r7, #12]
 801b03e:	e002      	b.n	801b046 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d1f8      	bne.n	801b040 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	691b      	ldr	r3, [r3, #16]
 801b052:	899b      	ldrh	r3, [r3, #12]
 801b054:	b29b      	uxth	r3, r3
 801b056:	4618      	mov	r0, r3
 801b058:	f7f8 fc1e 	bl	8013898 <lwip_htons>
 801b05c:	4603      	mov	r3, r0
 801b05e:	b2db      	uxtb	r3, r3
 801b060:	f003 0307 	and.w	r3, r3, #7
 801b064:	2b00      	cmp	r3, #0
 801b066:	d116      	bne.n	801b096 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	691b      	ldr	r3, [r3, #16]
 801b06c:	899b      	ldrh	r3, [r3, #12]
 801b06e:	b29c      	uxth	r4, r3
 801b070:	2001      	movs	r0, #1
 801b072:	f7f8 fc11 	bl	8013898 <lwip_htons>
 801b076:	4603      	mov	r3, r0
 801b078:	461a      	mov	r2, r3
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	691b      	ldr	r3, [r3, #16]
 801b07e:	4322      	orrs	r2, r4
 801b080:	b292      	uxth	r2, r2
 801b082:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	8b5b      	ldrh	r3, [r3, #26]
 801b088:	f043 0320 	orr.w	r3, r3, #32
 801b08c:	b29a      	uxth	r2, r3
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b092:	2300      	movs	r3, #0
 801b094:	e004      	b.n	801b0a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b096:	2101      	movs	r1, #1
 801b098:	6878      	ldr	r0, [r7, #4]
 801b09a:	f000 f80b 	bl	801b0b4 <tcp_enqueue_flags>
 801b09e:	4603      	mov	r3, r0
}
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	3714      	adds	r7, #20
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bd90      	pop	{r4, r7, pc}
 801b0a8:	080252f0 	.word	0x080252f0
 801b0ac:	08025754 	.word	0x08025754
 801b0b0:	08025344 	.word	0x08025344

0801b0b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b088      	sub	sp, #32
 801b0b8:	af02      	add	r7, sp, #8
 801b0ba:	6078      	str	r0, [r7, #4]
 801b0bc:	460b      	mov	r3, r1
 801b0be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b0c0:	2300      	movs	r3, #0
 801b0c2:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b0c8:	78fb      	ldrb	r3, [r7, #3]
 801b0ca:	f003 0303 	and.w	r3, r3, #3
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d106      	bne.n	801b0e0 <tcp_enqueue_flags+0x2c>
 801b0d2:	4b6f      	ldr	r3, [pc, #444]	@ (801b290 <tcp_enqueue_flags+0x1dc>)
 801b0d4:	f240 4211 	movw	r2, #1041	@ 0x411
 801b0d8:	496e      	ldr	r1, [pc, #440]	@ (801b294 <tcp_enqueue_flags+0x1e0>)
 801b0da:	486f      	ldr	r0, [pc, #444]	@ (801b298 <tcp_enqueue_flags+0x1e4>)
 801b0dc:	f006 fa50 	bl	8021580 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d106      	bne.n	801b0f4 <tcp_enqueue_flags+0x40>
 801b0e6:	4b6a      	ldr	r3, [pc, #424]	@ (801b290 <tcp_enqueue_flags+0x1dc>)
 801b0e8:	f240 4213 	movw	r2, #1043	@ 0x413
 801b0ec:	496b      	ldr	r1, [pc, #428]	@ (801b29c <tcp_enqueue_flags+0x1e8>)
 801b0ee:	486a      	ldr	r0, [pc, #424]	@ (801b298 <tcp_enqueue_flags+0x1e4>)
 801b0f0:	f006 fa46 	bl	8021580 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b0f4:	78fb      	ldrb	r3, [r7, #3]
 801b0f6:	f003 0302 	and.w	r3, r3, #2
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d001      	beq.n	801b102 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b0fe:	2301      	movs	r3, #1
 801b100:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b102:	7dfb      	ldrb	r3, [r7, #23]
 801b104:	009b      	lsls	r3, r3, #2
 801b106:	b2db      	uxtb	r3, r3
 801b108:	f003 0304 	and.w	r3, r3, #4
 801b10c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b10e:	7dbb      	ldrb	r3, [r7, #22]
 801b110:	b29b      	uxth	r3, r3
 801b112:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b116:	4619      	mov	r1, r3
 801b118:	2036      	movs	r0, #54	@ 0x36
 801b11a:	f7f9 febf 	bl	8014e9c <pbuf_alloc>
 801b11e:	60f8      	str	r0, [r7, #12]
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d111      	bne.n	801b14a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	8b5b      	ldrh	r3, [r3, #26]
 801b12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b12e:	b29a      	uxth	r2, r3
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801b134:	4b5a      	ldr	r3, [pc, #360]	@ (801b2a0 <tcp_enqueue_flags+0x1ec>)
 801b136:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b13a:	3301      	adds	r3, #1
 801b13c:	b29a      	uxth	r2, r3
 801b13e:	4b58      	ldr	r3, [pc, #352]	@ (801b2a0 <tcp_enqueue_flags+0x1ec>)
 801b140:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801b144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b148:	e09d      	b.n	801b286 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	895a      	ldrh	r2, [r3, #10]
 801b14e:	7dbb      	ldrb	r3, [r7, #22]
 801b150:	b29b      	uxth	r3, r3
 801b152:	429a      	cmp	r2, r3
 801b154:	d206      	bcs.n	801b164 <tcp_enqueue_flags+0xb0>
 801b156:	4b4e      	ldr	r3, [pc, #312]	@ (801b290 <tcp_enqueue_flags+0x1dc>)
 801b158:	f240 4239 	movw	r2, #1081	@ 0x439
 801b15c:	4951      	ldr	r1, [pc, #324]	@ (801b2a4 <tcp_enqueue_flags+0x1f0>)
 801b15e:	484e      	ldr	r0, [pc, #312]	@ (801b298 <tcp_enqueue_flags+0x1e4>)
 801b160:	f006 fa0e 	bl	8021580 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801b168:	78fa      	ldrb	r2, [r7, #3]
 801b16a:	7dfb      	ldrb	r3, [r7, #23]
 801b16c:	9300      	str	r3, [sp, #0]
 801b16e:	460b      	mov	r3, r1
 801b170:	68f9      	ldr	r1, [r7, #12]
 801b172:	6878      	ldr	r0, [r7, #4]
 801b174:	f7ff f888 	bl	801a288 <tcp_create_segment>
 801b178:	60b8      	str	r0, [r7, #8]
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d111      	bne.n	801b1a4 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	8b5b      	ldrh	r3, [r3, #26]
 801b184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b188:	b29a      	uxth	r2, r3
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801b18e:	4b44      	ldr	r3, [pc, #272]	@ (801b2a0 <tcp_enqueue_flags+0x1ec>)
 801b190:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801b194:	3301      	adds	r3, #1
 801b196:	b29a      	uxth	r2, r3
 801b198:	4b41      	ldr	r3, [pc, #260]	@ (801b2a0 <tcp_enqueue_flags+0x1ec>)
 801b19a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801b19e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b1a2:	e070      	b.n	801b286 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	691b      	ldr	r3, [r3, #16]
 801b1a8:	f003 0303 	and.w	r3, r3, #3
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d006      	beq.n	801b1be <tcp_enqueue_flags+0x10a>
 801b1b0:	4b37      	ldr	r3, [pc, #220]	@ (801b290 <tcp_enqueue_flags+0x1dc>)
 801b1b2:	f240 4242 	movw	r2, #1090	@ 0x442
 801b1b6:	493c      	ldr	r1, [pc, #240]	@ (801b2a8 <tcp_enqueue_flags+0x1f4>)
 801b1b8:	4837      	ldr	r0, [pc, #220]	@ (801b298 <tcp_enqueue_flags+0x1e4>)
 801b1ba:	f006 f9e1 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b1be:	68bb      	ldr	r3, [r7, #8]
 801b1c0:	891b      	ldrh	r3, [r3, #8]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d006      	beq.n	801b1d4 <tcp_enqueue_flags+0x120>
 801b1c6:	4b32      	ldr	r3, [pc, #200]	@ (801b290 <tcp_enqueue_flags+0x1dc>)
 801b1c8:	f240 4243 	movw	r2, #1091	@ 0x443
 801b1cc:	4937      	ldr	r1, [pc, #220]	@ (801b2ac <tcp_enqueue_flags+0x1f8>)
 801b1ce:	4832      	ldr	r0, [pc, #200]	@ (801b298 <tcp_enqueue_flags+0x1e4>)
 801b1d0:	f006 f9d6 	bl	8021580 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d103      	bne.n	801b1e4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	68ba      	ldr	r2, [r7, #8]
 801b1e0:	66da      	str	r2, [r3, #108]	@ 0x6c
 801b1e2:	e00d      	b.n	801b200 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1e8:	613b      	str	r3, [r7, #16]
 801b1ea:	e002      	b.n	801b1f2 <tcp_enqueue_flags+0x13e>
 801b1ec:	693b      	ldr	r3, [r7, #16]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	613b      	str	r3, [r7, #16]
 801b1f2:	693b      	ldr	r3, [r7, #16]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d1f8      	bne.n	801b1ec <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801b1fa:	693b      	ldr	r3, [r7, #16]
 801b1fc:	68ba      	ldr	r2, [r7, #8]
 801b1fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	2200      	movs	r2, #0
 801b204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b208:	78fb      	ldrb	r3, [r7, #3]
 801b20a:	f003 0302 	and.w	r3, r3, #2
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d104      	bne.n	801b21c <tcp_enqueue_flags+0x168>
 801b212:	78fb      	ldrb	r3, [r7, #3]
 801b214:	f003 0301 	and.w	r3, r3, #1
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d004      	beq.n	801b226 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b220:	1c5a      	adds	r2, r3, #1
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b226:	78fb      	ldrb	r3, [r7, #3]
 801b228:	f003 0301 	and.w	r3, r3, #1
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d006      	beq.n	801b23e <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	8b5b      	ldrh	r3, [r3, #26]
 801b234:	f043 0320 	orr.w	r3, r3, #32
 801b238:	b29a      	uxth	r2, r3
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	685b      	ldr	r3, [r3, #4]
 801b242:	4618      	mov	r0, r3
 801b244:	f7fa f9fc 	bl	8015640 <pbuf_clen>
 801b248:	4603      	mov	r3, r0
 801b24a:	461a      	mov	r2, r3
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b252:	4413      	add	r3, r2
 801b254:	b29a      	uxth	r2, r3
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b262:	2b00      	cmp	r3, #0
 801b264:	d00e      	beq.n	801b284 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d10a      	bne.n	801b284 <tcp_enqueue_flags+0x1d0>
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b272:	2b00      	cmp	r3, #0
 801b274:	d106      	bne.n	801b284 <tcp_enqueue_flags+0x1d0>
 801b276:	4b06      	ldr	r3, [pc, #24]	@ (801b290 <tcp_enqueue_flags+0x1dc>)
 801b278:	f240 4265 	movw	r2, #1125	@ 0x465
 801b27c:	490c      	ldr	r1, [pc, #48]	@ (801b2b0 <tcp_enqueue_flags+0x1fc>)
 801b27e:	4806      	ldr	r0, [pc, #24]	@ (801b298 <tcp_enqueue_flags+0x1e4>)
 801b280:	f006 f97e 	bl	8021580 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b284:	2300      	movs	r3, #0
}
 801b286:	4618      	mov	r0, r3
 801b288:	3718      	adds	r7, #24
 801b28a:	46bd      	mov	sp, r7
 801b28c:	bd80      	pop	{r7, pc}
 801b28e:	bf00      	nop
 801b290:	080252f0 	.word	0x080252f0
 801b294:	08025770 	.word	0x08025770
 801b298:	08025344 	.word	0x08025344
 801b29c:	080257c8 	.word	0x080257c8
 801b2a0:	2002d358 	.word	0x2002d358
 801b2a4:	080257e8 	.word	0x080257e8
 801b2a8:	08025824 	.word	0x08025824
 801b2ac:	0802583c 	.word	0x0802583c
 801b2b0:	08025868 	.word	0x08025868

0801b2b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b2b4:	b5b0      	push	{r4, r5, r7, lr}
 801b2b6:	b08a      	sub	sp, #40	@ 0x28
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d106      	bne.n	801b2d0 <tcp_output+0x1c>
 801b2c2:	4b8a      	ldr	r3, [pc, #552]	@ (801b4ec <tcp_output+0x238>)
 801b2c4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801b2c8:	4989      	ldr	r1, [pc, #548]	@ (801b4f0 <tcp_output+0x23c>)
 801b2ca:	488a      	ldr	r0, [pc, #552]	@ (801b4f4 <tcp_output+0x240>)
 801b2cc:	f006 f958 	bl	8021580 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	7d1b      	ldrb	r3, [r3, #20]
 801b2d4:	2b01      	cmp	r3, #1
 801b2d6:	d106      	bne.n	801b2e6 <tcp_output+0x32>
 801b2d8:	4b84      	ldr	r3, [pc, #528]	@ (801b4ec <tcp_output+0x238>)
 801b2da:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801b2de:	4986      	ldr	r1, [pc, #536]	@ (801b4f8 <tcp_output+0x244>)
 801b2e0:	4884      	ldr	r0, [pc, #528]	@ (801b4f4 <tcp_output+0x240>)
 801b2e2:	f006 f94d 	bl	8021580 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b2e6:	4b85      	ldr	r3, [pc, #532]	@ (801b4fc <tcp_output+0x248>)
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	687a      	ldr	r2, [r7, #4]
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	d101      	bne.n	801b2f4 <tcp_output+0x40>
    return ERR_OK;
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	e1d1      	b.n	801b698 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b300:	4293      	cmp	r3, r2
 801b302:	bf28      	it	cs
 801b304:	4613      	movcs	r3, r2
 801b306:	b29b      	uxth	r3, r3
 801b308:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b30e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801b310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b312:	2b00      	cmp	r3, #0
 801b314:	d10b      	bne.n	801b32e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	8b5b      	ldrh	r3, [r3, #26]
 801b31a:	f003 0302 	and.w	r3, r3, #2
 801b31e:	2b00      	cmp	r3, #0
 801b320:	f000 81ad 	beq.w	801b67e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801b324:	6878      	ldr	r0, [r7, #4]
 801b326:	f000 fdeb 	bl	801bf00 <tcp_send_empty_ack>
 801b32a:	4603      	mov	r3, r0
 801b32c:	e1b4      	b.n	801b698 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b32e:	6879      	ldr	r1, [r7, #4]
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	3304      	adds	r3, #4
 801b334:	461a      	mov	r2, r3
 801b336:	6878      	ldr	r0, [r7, #4]
 801b338:	f7fe ff8a 	bl	801a250 <tcp_route>
 801b33c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b33e:	697b      	ldr	r3, [r7, #20]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d102      	bne.n	801b34a <tcp_output+0x96>
    return ERR_RTE;
 801b344:	f06f 0303 	mvn.w	r3, #3
 801b348:	e1a6      	b.n	801b698 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d003      	beq.n	801b358 <tcp_output+0xa4>
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d111      	bne.n	801b37c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b358:	697b      	ldr	r3, [r7, #20]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d002      	beq.n	801b364 <tcp_output+0xb0>
 801b35e:	697b      	ldr	r3, [r7, #20]
 801b360:	3304      	adds	r3, #4
 801b362:	e000      	b.n	801b366 <tcp_output+0xb2>
 801b364:	2300      	movs	r3, #0
 801b366:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b368:	693b      	ldr	r3, [r7, #16]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d102      	bne.n	801b374 <tcp_output+0xc0>
      return ERR_RTE;
 801b36e:	f06f 0303 	mvn.w	r3, #3
 801b372:	e191      	b.n	801b698 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b374:	693b      	ldr	r3, [r7, #16]
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b37e:	691b      	ldr	r3, [r3, #16]
 801b380:	685b      	ldr	r3, [r3, #4]
 801b382:	4618      	mov	r0, r3
 801b384:	f7f8 fa9e 	bl	80138c4 <lwip_htonl>
 801b388:	4602      	mov	r2, r0
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b38e:	1ad3      	subs	r3, r2, r3
 801b390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b392:	8912      	ldrh	r2, [r2, #8]
 801b394:	4413      	add	r3, r2
 801b396:	69ba      	ldr	r2, [r7, #24]
 801b398:	429a      	cmp	r2, r3
 801b39a:	d227      	bcs.n	801b3ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b3a2:	461a      	mov	r2, r3
 801b3a4:	69bb      	ldr	r3, [r7, #24]
 801b3a6:	4293      	cmp	r3, r2
 801b3a8:	d114      	bne.n	801b3d4 <tcp_output+0x120>
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d110      	bne.n	801b3d4 <tcp_output+0x120>
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d10b      	bne.n	801b3d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	2200      	movs	r2, #0
 801b3c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	2201      	movs	r2, #1
 801b3c8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	8b5b      	ldrh	r3, [r3, #26]
 801b3d8:	f003 0302 	and.w	r3, r3, #2
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	f000 8150 	beq.w	801b682 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801b3e2:	6878      	ldr	r0, [r7, #4]
 801b3e4:	f000 fd8c 	bl	801bf00 <tcp_send_empty_ack>
 801b3e8:	4603      	mov	r3, r0
 801b3ea:	e155      	b.n	801b698 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b3f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b3fa:	6a3b      	ldr	r3, [r7, #32]
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	f000 811f 	beq.w	801b640 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801b402:	e002      	b.n	801b40a <tcp_output+0x156>
 801b404:	6a3b      	ldr	r3, [r7, #32]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	623b      	str	r3, [r7, #32]
 801b40a:	6a3b      	ldr	r3, [r7, #32]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d1f8      	bne.n	801b404 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b412:	e115      	b.n	801b640 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b416:	691b      	ldr	r3, [r3, #16]
 801b418:	899b      	ldrh	r3, [r3, #12]
 801b41a:	b29b      	uxth	r3, r3
 801b41c:	4618      	mov	r0, r3
 801b41e:	f7f8 fa3b 	bl	8013898 <lwip_htons>
 801b422:	4603      	mov	r3, r0
 801b424:	b2db      	uxtb	r3, r3
 801b426:	f003 0304 	and.w	r3, r3, #4
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d006      	beq.n	801b43c <tcp_output+0x188>
 801b42e:	4b2f      	ldr	r3, [pc, #188]	@ (801b4ec <tcp_output+0x238>)
 801b430:	f240 5236 	movw	r2, #1334	@ 0x536
 801b434:	4932      	ldr	r1, [pc, #200]	@ (801b500 <tcp_output+0x24c>)
 801b436:	482f      	ldr	r0, [pc, #188]	@ (801b4f4 <tcp_output+0x240>)
 801b438:	f006 f8a2 	bl	8021580 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b440:	2b00      	cmp	r3, #0
 801b442:	d01f      	beq.n	801b484 <tcp_output+0x1d0>
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	8b5b      	ldrh	r3, [r3, #26]
 801b448:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d119      	bne.n	801b484 <tcp_output+0x1d0>
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b454:	2b00      	cmp	r3, #0
 801b456:	d00b      	beq.n	801b470 <tcp_output+0x1bc>
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d110      	bne.n	801b484 <tcp_output+0x1d0>
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b466:	891a      	ldrh	r2, [r3, #8]
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b46c:	429a      	cmp	r2, r3
 801b46e:	d209      	bcs.n	801b484 <tcp_output+0x1d0>
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801b476:	2b00      	cmp	r3, #0
 801b478:	d004      	beq.n	801b484 <tcp_output+0x1d0>
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b480:	2b08      	cmp	r3, #8
 801b482:	d901      	bls.n	801b488 <tcp_output+0x1d4>
 801b484:	2301      	movs	r3, #1
 801b486:	e000      	b.n	801b48a <tcp_output+0x1d6>
 801b488:	2300      	movs	r3, #0
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d106      	bne.n	801b49c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	8b5b      	ldrh	r3, [r3, #26]
 801b492:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b496:	2b00      	cmp	r3, #0
 801b498:	f000 80e7 	beq.w	801b66a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	7d1b      	ldrb	r3, [r3, #20]
 801b4a0:	2b02      	cmp	r3, #2
 801b4a2:	d00d      	beq.n	801b4c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4a6:	691b      	ldr	r3, [r3, #16]
 801b4a8:	899b      	ldrh	r3, [r3, #12]
 801b4aa:	b29c      	uxth	r4, r3
 801b4ac:	2010      	movs	r0, #16
 801b4ae:	f7f8 f9f3 	bl	8013898 <lwip_htons>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	461a      	mov	r2, r3
 801b4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4b8:	691b      	ldr	r3, [r3, #16]
 801b4ba:	4322      	orrs	r2, r4
 801b4bc:	b292      	uxth	r2, r2
 801b4be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b4c0:	697a      	ldr	r2, [r7, #20]
 801b4c2:	6879      	ldr	r1, [r7, #4]
 801b4c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b4c6:	f000 f90b 	bl	801b6e0 <tcp_output_segment>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d016      	beq.n	801b504 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	8b5b      	ldrh	r3, [r3, #26]
 801b4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b4de:	b29a      	uxth	r2, r3
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	835a      	strh	r2, [r3, #26]
      return err;
 801b4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4e8:	e0d6      	b.n	801b698 <tcp_output+0x3e4>
 801b4ea:	bf00      	nop
 801b4ec:	080252f0 	.word	0x080252f0
 801b4f0:	08025890 	.word	0x08025890
 801b4f4:	08025344 	.word	0x08025344
 801b4f8:	080258a8 	.word	0x080258a8
 801b4fc:	2002d4a8 	.word	0x2002d4a8
 801b500:	080258d0 	.word	0x080258d0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801b504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b506:	2200      	movs	r2, #0
 801b508:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b50c:	681a      	ldr	r2, [r3, #0]
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	7d1b      	ldrb	r3, [r3, #20]
 801b516:	2b02      	cmp	r3, #2
 801b518:	d006      	beq.n	801b528 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	8b5b      	ldrh	r3, [r3, #26]
 801b51e:	f023 0303 	bic.w	r3, r3, #3
 801b522:	b29a      	uxth	r2, r3
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b52a:	691b      	ldr	r3, [r3, #16]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	4618      	mov	r0, r3
 801b530:	f7f8 f9c8 	bl	80138c4 <lwip_htonl>
 801b534:	4604      	mov	r4, r0
 801b536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b538:	891b      	ldrh	r3, [r3, #8]
 801b53a:	461d      	mov	r5, r3
 801b53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b53e:	691b      	ldr	r3, [r3, #16]
 801b540:	899b      	ldrh	r3, [r3, #12]
 801b542:	b29b      	uxth	r3, r3
 801b544:	4618      	mov	r0, r3
 801b546:	f7f8 f9a7 	bl	8013898 <lwip_htons>
 801b54a:	4603      	mov	r3, r0
 801b54c:	b2db      	uxtb	r3, r3
 801b54e:	f003 0303 	and.w	r3, r3, #3
 801b552:	2b00      	cmp	r3, #0
 801b554:	d001      	beq.n	801b55a <tcp_output+0x2a6>
 801b556:	2301      	movs	r3, #1
 801b558:	e000      	b.n	801b55c <tcp_output+0x2a8>
 801b55a:	2300      	movs	r3, #0
 801b55c:	442b      	add	r3, r5
 801b55e:	4423      	add	r3, r4
 801b560:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	1ad3      	subs	r3, r2, r3
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	da02      	bge.n	801b574 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	68ba      	ldr	r2, [r7, #8]
 801b572:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b576:	891b      	ldrh	r3, [r3, #8]
 801b578:	461c      	mov	r4, r3
 801b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b57c:	691b      	ldr	r3, [r3, #16]
 801b57e:	899b      	ldrh	r3, [r3, #12]
 801b580:	b29b      	uxth	r3, r3
 801b582:	4618      	mov	r0, r3
 801b584:	f7f8 f988 	bl	8013898 <lwip_htons>
 801b588:	4603      	mov	r3, r0
 801b58a:	b2db      	uxtb	r3, r3
 801b58c:	f003 0303 	and.w	r3, r3, #3
 801b590:	2b00      	cmp	r3, #0
 801b592:	d001      	beq.n	801b598 <tcp_output+0x2e4>
 801b594:	2301      	movs	r3, #1
 801b596:	e000      	b.n	801b59a <tcp_output+0x2e6>
 801b598:	2300      	movs	r3, #0
 801b59a:	4423      	add	r3, r4
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d049      	beq.n	801b634 <tcp_output+0x380>
      seg->next = NULL;
 801b5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d105      	bne.n	801b5ba <tcp_output+0x306>
        pcb->unacked = seg;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b5b2:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801b5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5b6:	623b      	str	r3, [r7, #32]
 801b5b8:	e03f      	b.n	801b63a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5bc:	691b      	ldr	r3, [r3, #16]
 801b5be:	685b      	ldr	r3, [r3, #4]
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	f7f8 f97f 	bl	80138c4 <lwip_htonl>
 801b5c6:	4604      	mov	r4, r0
 801b5c8:	6a3b      	ldr	r3, [r7, #32]
 801b5ca:	691b      	ldr	r3, [r3, #16]
 801b5cc:	685b      	ldr	r3, [r3, #4]
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7f8 f978 	bl	80138c4 <lwip_htonl>
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	1ae3      	subs	r3, r4, r3
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	da24      	bge.n	801b626 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	3370      	adds	r3, #112	@ 0x70
 801b5e0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b5e2:	e002      	b.n	801b5ea <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b5e4:	69fb      	ldr	r3, [r7, #28]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b5ea:	69fb      	ldr	r3, [r7, #28]
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d011      	beq.n	801b616 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b5f2:	69fb      	ldr	r3, [r7, #28]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	691b      	ldr	r3, [r3, #16]
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f7f8 f962 	bl	80138c4 <lwip_htonl>
 801b600:	4604      	mov	r4, r0
 801b602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b604:	691b      	ldr	r3, [r3, #16]
 801b606:	685b      	ldr	r3, [r3, #4]
 801b608:	4618      	mov	r0, r3
 801b60a:	f7f8 f95b 	bl	80138c4 <lwip_htonl>
 801b60e:	4603      	mov	r3, r0
 801b610:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b612:	2b00      	cmp	r3, #0
 801b614:	dbe6      	blt.n	801b5e4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801b616:	69fb      	ldr	r3, [r7, #28]
 801b618:	681a      	ldr	r2, [r3, #0]
 801b61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b61c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b61e:	69fb      	ldr	r3, [r7, #28]
 801b620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b622:	601a      	str	r2, [r3, #0]
 801b624:	e009      	b.n	801b63a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b626:	6a3b      	ldr	r3, [r7, #32]
 801b628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b62a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b62c:	6a3b      	ldr	r3, [r7, #32]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	623b      	str	r3, [r7, #32]
 801b632:	e002      	b.n	801b63a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b634:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b636:	f7fb fdea 	bl	801720e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b63e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b642:	2b00      	cmp	r3, #0
 801b644:	d012      	beq.n	801b66c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b648:	691b      	ldr	r3, [r3, #16]
 801b64a:	685b      	ldr	r3, [r3, #4]
 801b64c:	4618      	mov	r0, r3
 801b64e:	f7f8 f939 	bl	80138c4 <lwip_htonl>
 801b652:	4602      	mov	r2, r0
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b658:	1ad3      	subs	r3, r2, r3
 801b65a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b65c:	8912      	ldrh	r2, [r2, #8]
 801b65e:	4413      	add	r3, r2
  while (seg != NULL &&
 801b660:	69ba      	ldr	r2, [r7, #24]
 801b662:	429a      	cmp	r2, r3
 801b664:	f4bf aed6 	bcs.w	801b414 <tcp_output+0x160>
 801b668:	e000      	b.n	801b66c <tcp_output+0x3b8>
      break;
 801b66a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b670:	2b00      	cmp	r3, #0
 801b672:	d108      	bne.n	801b686 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	2200      	movs	r2, #0
 801b678:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801b67c:	e004      	b.n	801b688 <tcp_output+0x3d4>
    goto output_done;
 801b67e:	bf00      	nop
 801b680:	e002      	b.n	801b688 <tcp_output+0x3d4>
    goto output_done;
 801b682:	bf00      	nop
 801b684:	e000      	b.n	801b688 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b686:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	8b5b      	ldrh	r3, [r3, #26]
 801b68c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b690:	b29a      	uxth	r2, r3
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b696:	2300      	movs	r3, #0
}
 801b698:	4618      	mov	r0, r3
 801b69a:	3728      	adds	r7, #40	@ 0x28
 801b69c:	46bd      	mov	sp, r7
 801b69e:	bdb0      	pop	{r4, r5, r7, pc}

0801b6a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	b082      	sub	sp, #8
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d106      	bne.n	801b6bc <tcp_output_segment_busy+0x1c>
 801b6ae:	4b09      	ldr	r3, [pc, #36]	@ (801b6d4 <tcp_output_segment_busy+0x34>)
 801b6b0:	f240 529a 	movw	r2, #1434	@ 0x59a
 801b6b4:	4908      	ldr	r1, [pc, #32]	@ (801b6d8 <tcp_output_segment_busy+0x38>)
 801b6b6:	4809      	ldr	r0, [pc, #36]	@ (801b6dc <tcp_output_segment_busy+0x3c>)
 801b6b8:	f005 ff62 	bl	8021580 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	685b      	ldr	r3, [r3, #4]
 801b6c0:	7b9b      	ldrb	r3, [r3, #14]
 801b6c2:	2b01      	cmp	r3, #1
 801b6c4:	d001      	beq.n	801b6ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	e000      	b.n	801b6cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b6ca:	2300      	movs	r3, #0
}
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	3708      	adds	r7, #8
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bd80      	pop	{r7, pc}
 801b6d4:	080252f0 	.word	0x080252f0
 801b6d8:	080258e8 	.word	0x080258e8
 801b6dc:	08025344 	.word	0x08025344

0801b6e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b6e0:	b5b0      	push	{r4, r5, r7, lr}
 801b6e2:	b08c      	sub	sp, #48	@ 0x30
 801b6e4:	af04      	add	r7, sp, #16
 801b6e6:	60f8      	str	r0, [r7, #12]
 801b6e8:	60b9      	str	r1, [r7, #8]
 801b6ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d106      	bne.n	801b700 <tcp_output_segment+0x20>
 801b6f2:	4b68      	ldr	r3, [pc, #416]	@ (801b894 <tcp_output_segment+0x1b4>)
 801b6f4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801b6f8:	4967      	ldr	r1, [pc, #412]	@ (801b898 <tcp_output_segment+0x1b8>)
 801b6fa:	4868      	ldr	r0, [pc, #416]	@ (801b89c <tcp_output_segment+0x1bc>)
 801b6fc:	f005 ff40 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b700:	68bb      	ldr	r3, [r7, #8]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d106      	bne.n	801b714 <tcp_output_segment+0x34>
 801b706:	4b63      	ldr	r3, [pc, #396]	@ (801b894 <tcp_output_segment+0x1b4>)
 801b708:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801b70c:	4964      	ldr	r1, [pc, #400]	@ (801b8a0 <tcp_output_segment+0x1c0>)
 801b70e:	4863      	ldr	r0, [pc, #396]	@ (801b89c <tcp_output_segment+0x1bc>)
 801b710:	f005 ff36 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d106      	bne.n	801b728 <tcp_output_segment+0x48>
 801b71a:	4b5e      	ldr	r3, [pc, #376]	@ (801b894 <tcp_output_segment+0x1b4>)
 801b71c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801b720:	4960      	ldr	r1, [pc, #384]	@ (801b8a4 <tcp_output_segment+0x1c4>)
 801b722:	485e      	ldr	r0, [pc, #376]	@ (801b89c <tcp_output_segment+0x1bc>)
 801b724:	f005 ff2c 	bl	8021580 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b728:	68f8      	ldr	r0, [r7, #12]
 801b72a:	f7ff ffb9 	bl	801b6a0 <tcp_output_segment_busy>
 801b72e:	4603      	mov	r3, r0
 801b730:	2b00      	cmp	r3, #0
 801b732:	d001      	beq.n	801b738 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b734:	2300      	movs	r3, #0
 801b736:	e0a9      	b.n	801b88c <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	691c      	ldr	r4, [r3, #16]
 801b740:	4610      	mov	r0, r2
 801b742:	f7f8 f8bf 	bl	80138c4 <lwip_htonl>
 801b746:	4603      	mov	r3, r0
 801b748:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b74a:	68bb      	ldr	r3, [r7, #8]
 801b74c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	691c      	ldr	r4, [r3, #16]
 801b752:	4610      	mov	r0, r2
 801b754:	f7f8 f8a0 	bl	8013898 <lwip_htons>
 801b758:	4603      	mov	r3, r0
 801b75a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b75c:	68bb      	ldr	r3, [r7, #8]
 801b75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b760:	68ba      	ldr	r2, [r7, #8]
 801b762:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b764:	441a      	add	r2, r3
 801b766:	68bb      	ldr	r3, [r7, #8]
 801b768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	691b      	ldr	r3, [r3, #16]
 801b76e:	3314      	adds	r3, #20
 801b770:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	7b1b      	ldrb	r3, [r3, #12]
 801b776:	f003 0301 	and.w	r3, r3, #1
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d015      	beq.n	801b7aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b77e:	68bb      	ldr	r3, [r7, #8]
 801b780:	3304      	adds	r3, #4
 801b782:	461a      	mov	r2, r3
 801b784:	6879      	ldr	r1, [r7, #4]
 801b786:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801b78a:	f7fc f92f 	bl	80179ec <tcp_eff_send_mss_netif>
 801b78e:	4603      	mov	r3, r0
 801b790:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b792:	8b7b      	ldrh	r3, [r7, #26]
 801b794:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801b798:	4618      	mov	r0, r3
 801b79a:	f7f8 f893 	bl	80138c4 <lwip_htonl>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	69fb      	ldr	r3, [r7, #28]
 801b7a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b7a4:	69fb      	ldr	r3, [r7, #28]
 801b7a6:	3304      	adds	r3, #4
 801b7a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b7aa:	68bb      	ldr	r3, [r7, #8]
 801b7ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	da02      	bge.n	801b7ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b7b4:	68bb      	ldr	r3, [r7, #8]
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d10c      	bne.n	801b7dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b7c2:	4b39      	ldr	r3, [pc, #228]	@ (801b8a8 <tcp_output_segment+0x1c8>)
 801b7c4:	681a      	ldr	r2, [r3, #0]
 801b7c6:	68bb      	ldr	r3, [r7, #8]
 801b7c8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b7ca:	68fb      	ldr	r3, [r7, #12]
 801b7cc:	691b      	ldr	r3, [r3, #16]
 801b7ce:	685b      	ldr	r3, [r3, #4]
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	f7f8 f877 	bl	80138c4 <lwip_htonl>
 801b7d6:	4602      	mov	r2, r0
 801b7d8:	68bb      	ldr	r3, [r7, #8]
 801b7da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	691a      	ldr	r2, [r3, #16]
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	685b      	ldr	r3, [r3, #4]
 801b7e4:	685b      	ldr	r3, [r3, #4]
 801b7e6:	1ad3      	subs	r3, r2, r3
 801b7e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	685b      	ldr	r3, [r3, #4]
 801b7ee:	8959      	ldrh	r1, [r3, #10]
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	685b      	ldr	r3, [r3, #4]
 801b7f4:	8b3a      	ldrh	r2, [r7, #24]
 801b7f6:	1a8a      	subs	r2, r1, r2
 801b7f8:	b292      	uxth	r2, r2
 801b7fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	8919      	ldrh	r1, [r3, #8]
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	685b      	ldr	r3, [r3, #4]
 801b806:	8b3a      	ldrh	r2, [r7, #24]
 801b808:	1a8a      	subs	r2, r1, r2
 801b80a:	b292      	uxth	r2, r2
 801b80c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	685b      	ldr	r3, [r3, #4]
 801b812:	68fa      	ldr	r2, [r7, #12]
 801b814:	6912      	ldr	r2, [r2, #16]
 801b816:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	691b      	ldr	r3, [r3, #16]
 801b81c:	2200      	movs	r2, #0
 801b81e:	741a      	strb	r2, [r3, #16]
 801b820:	2200      	movs	r2, #0
 801b822:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	691a      	ldr	r2, [r3, #16]
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	7b1b      	ldrb	r3, [r3, #12]
 801b82c:	f003 0301 	and.w	r3, r3, #1
 801b830:	2b00      	cmp	r3, #0
 801b832:	d001      	beq.n	801b838 <tcp_output_segment+0x158>
 801b834:	2318      	movs	r3, #24
 801b836:	e000      	b.n	801b83a <tcp_output_segment+0x15a>
 801b838:	2314      	movs	r3, #20
 801b83a:	4413      	add	r3, r2
 801b83c:	69fa      	ldr	r2, [r7, #28]
 801b83e:	429a      	cmp	r2, r3
 801b840:	d006      	beq.n	801b850 <tcp_output_segment+0x170>
 801b842:	4b14      	ldr	r3, [pc, #80]	@ (801b894 <tcp_output_segment+0x1b4>)
 801b844:	f240 621c 	movw	r2, #1564	@ 0x61c
 801b848:	4918      	ldr	r1, [pc, #96]	@ (801b8ac <tcp_output_segment+0x1cc>)
 801b84a:	4814      	ldr	r0, [pc, #80]	@ (801b89c <tcp_output_segment+0x1bc>)
 801b84c:	f005 fe98 	bl	8021580 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801b850:	4b17      	ldr	r3, [pc, #92]	@ (801b8b0 <tcp_output_segment+0x1d0>)
 801b852:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b856:	3301      	adds	r3, #1
 801b858:	b29a      	uxth	r2, r3
 801b85a:	4b15      	ldr	r3, [pc, #84]	@ (801b8b0 <tcp_output_segment+0x1d0>)
 801b85c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	6858      	ldr	r0, [r3, #4]
 801b864:	68b9      	ldr	r1, [r7, #8]
 801b866:	68bb      	ldr	r3, [r7, #8]
 801b868:	1d1c      	adds	r4, r3, #4
 801b86a:	68bb      	ldr	r3, [r7, #8]
 801b86c:	7add      	ldrb	r5, [r3, #11]
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	7a9b      	ldrb	r3, [r3, #10]
 801b872:	687a      	ldr	r2, [r7, #4]
 801b874:	9202      	str	r2, [sp, #8]
 801b876:	2206      	movs	r2, #6
 801b878:	9201      	str	r2, [sp, #4]
 801b87a:	9300      	str	r3, [sp, #0]
 801b87c:	462b      	mov	r3, r5
 801b87e:	4622      	mov	r2, r4
 801b880:	f003 fa1a 	bl	801ecb8 <ip4_output_if>
 801b884:	4603      	mov	r3, r0
 801b886:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b88c:	4618      	mov	r0, r3
 801b88e:	3720      	adds	r7, #32
 801b890:	46bd      	mov	sp, r7
 801b892:	bdb0      	pop	{r4, r5, r7, pc}
 801b894:	080252f0 	.word	0x080252f0
 801b898:	08025910 	.word	0x08025910
 801b89c:	08025344 	.word	0x08025344
 801b8a0:	08025930 	.word	0x08025930
 801b8a4:	08025950 	.word	0x08025950
 801b8a8:	2002d458 	.word	0x2002d458
 801b8ac:	08025974 	.word	0x08025974
 801b8b0:	2002d358 	.word	0x2002d358

0801b8b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b8b4:	b5b0      	push	{r4, r5, r7, lr}
 801b8b6:	b084      	sub	sp, #16
 801b8b8:	af00      	add	r7, sp, #0
 801b8ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d106      	bne.n	801b8d0 <tcp_rexmit_rto_prepare+0x1c>
 801b8c2:	4b36      	ldr	r3, [pc, #216]	@ (801b99c <tcp_rexmit_rto_prepare+0xe8>)
 801b8c4:	f240 6263 	movw	r2, #1635	@ 0x663
 801b8c8:	4935      	ldr	r1, [pc, #212]	@ (801b9a0 <tcp_rexmit_rto_prepare+0xec>)
 801b8ca:	4836      	ldr	r0, [pc, #216]	@ (801b9a4 <tcp_rexmit_rto_prepare+0xf0>)
 801b8cc:	f005 fe58 	bl	8021580 <iprintf>

  if (pcb->unacked == NULL) {
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d102      	bne.n	801b8de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b8d8:	f06f 0305 	mvn.w	r3, #5
 801b8dc:	e059      	b.n	801b992 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b8e2:	60fb      	str	r3, [r7, #12]
 801b8e4:	e00b      	b.n	801b8fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b8e6:	68f8      	ldr	r0, [r7, #12]
 801b8e8:	f7ff feda 	bl	801b6a0 <tcp_output_segment_busy>
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d002      	beq.n	801b8f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b8f2:	f06f 0305 	mvn.w	r3, #5
 801b8f6:	e04c      	b.n	801b992 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	60fb      	str	r3, [r7, #12]
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d1ef      	bne.n	801b8e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b906:	68f8      	ldr	r0, [r7, #12]
 801b908:	f7ff feca 	bl	801b6a0 <tcp_output_segment_busy>
 801b90c:	4603      	mov	r3, r0
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d002      	beq.n	801b918 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b912:	f06f 0305 	mvn.w	r3, #5
 801b916:	e03c      	b.n	801b992 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b924:	2b00      	cmp	r3, #0
 801b926:	d104      	bne.n	801b932 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	895a      	ldrh	r2, [r3, #10]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	2200      	movs	r2, #0
 801b93e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	8b5b      	ldrh	r3, [r3, #26]
 801b944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801b948:	b29a      	uxth	r2, r3
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	691b      	ldr	r3, [r3, #16]
 801b952:	685b      	ldr	r3, [r3, #4]
 801b954:	4618      	mov	r0, r3
 801b956:	f7f7 ffb5 	bl	80138c4 <lwip_htonl>
 801b95a:	4604      	mov	r4, r0
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	891b      	ldrh	r3, [r3, #8]
 801b960:	461d      	mov	r5, r3
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	691b      	ldr	r3, [r3, #16]
 801b966:	899b      	ldrh	r3, [r3, #12]
 801b968:	b29b      	uxth	r3, r3
 801b96a:	4618      	mov	r0, r3
 801b96c:	f7f7 ff94 	bl	8013898 <lwip_htons>
 801b970:	4603      	mov	r3, r0
 801b972:	b2db      	uxtb	r3, r3
 801b974:	f003 0303 	and.w	r3, r3, #3
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d001      	beq.n	801b980 <tcp_rexmit_rto_prepare+0xcc>
 801b97c:	2301      	movs	r3, #1
 801b97e:	e000      	b.n	801b982 <tcp_rexmit_rto_prepare+0xce>
 801b980:	2300      	movs	r3, #0
 801b982:	442b      	add	r3, r5
 801b984:	18e2      	adds	r2, r4, r3
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	2200      	movs	r2, #0
 801b98e:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801b990:	2300      	movs	r3, #0
}
 801b992:	4618      	mov	r0, r3
 801b994:	3710      	adds	r7, #16
 801b996:	46bd      	mov	sp, r7
 801b998:	bdb0      	pop	{r4, r5, r7, pc}
 801b99a:	bf00      	nop
 801b99c:	080252f0 	.word	0x080252f0
 801b9a0:	08025988 	.word	0x08025988
 801b9a4:	08025344 	.word	0x08025344

0801b9a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b082      	sub	sp, #8
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d106      	bne.n	801b9c4 <tcp_rexmit_rto_commit+0x1c>
 801b9b6:	4b0d      	ldr	r3, [pc, #52]	@ (801b9ec <tcp_rexmit_rto_commit+0x44>)
 801b9b8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801b9bc:	490c      	ldr	r1, [pc, #48]	@ (801b9f0 <tcp_rexmit_rto_commit+0x48>)
 801b9be:	480d      	ldr	r0, [pc, #52]	@ (801b9f4 <tcp_rexmit_rto_commit+0x4c>)
 801b9c0:	f005 fdde 	bl	8021580 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b9ca:	2bff      	cmp	r3, #255	@ 0xff
 801b9cc:	d007      	beq.n	801b9de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b9d4:	3301      	adds	r3, #1
 801b9d6:	b2da      	uxtb	r2, r3
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b9de:	6878      	ldr	r0, [r7, #4]
 801b9e0:	f7ff fc68 	bl	801b2b4 <tcp_output>
}
 801b9e4:	bf00      	nop
 801b9e6:	3708      	adds	r7, #8
 801b9e8:	46bd      	mov	sp, r7
 801b9ea:	bd80      	pop	{r7, pc}
 801b9ec:	080252f0 	.word	0x080252f0
 801b9f0:	080259ac 	.word	0x080259ac
 801b9f4:	08025344 	.word	0x08025344

0801b9f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	b082      	sub	sp, #8
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d106      	bne.n	801ba14 <tcp_rexmit_rto+0x1c>
 801ba06:	4b0a      	ldr	r3, [pc, #40]	@ (801ba30 <tcp_rexmit_rto+0x38>)
 801ba08:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801ba0c:	4909      	ldr	r1, [pc, #36]	@ (801ba34 <tcp_rexmit_rto+0x3c>)
 801ba0e:	480a      	ldr	r0, [pc, #40]	@ (801ba38 <tcp_rexmit_rto+0x40>)
 801ba10:	f005 fdb6 	bl	8021580 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801ba14:	6878      	ldr	r0, [r7, #4]
 801ba16:	f7ff ff4d 	bl	801b8b4 <tcp_rexmit_rto_prepare>
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d102      	bne.n	801ba26 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801ba20:	6878      	ldr	r0, [r7, #4]
 801ba22:	f7ff ffc1 	bl	801b9a8 <tcp_rexmit_rto_commit>
  }
}
 801ba26:	bf00      	nop
 801ba28:	3708      	adds	r7, #8
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	bd80      	pop	{r7, pc}
 801ba2e:	bf00      	nop
 801ba30:	080252f0 	.word	0x080252f0
 801ba34:	080259d0 	.word	0x080259d0
 801ba38:	08025344 	.word	0x08025344

0801ba3c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801ba3c:	b590      	push	{r4, r7, lr}
 801ba3e:	b085      	sub	sp, #20
 801ba40:	af00      	add	r7, sp, #0
 801ba42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d106      	bne.n	801ba58 <tcp_rexmit+0x1c>
 801ba4a:	4b2f      	ldr	r3, [pc, #188]	@ (801bb08 <tcp_rexmit+0xcc>)
 801ba4c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801ba50:	492e      	ldr	r1, [pc, #184]	@ (801bb0c <tcp_rexmit+0xd0>)
 801ba52:	482f      	ldr	r0, [pc, #188]	@ (801bb10 <tcp_rexmit+0xd4>)
 801ba54:	f005 fd94 	bl	8021580 <iprintf>

  if (pcb->unacked == NULL) {
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d102      	bne.n	801ba66 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ba60:	f06f 0305 	mvn.w	r3, #5
 801ba64:	e04c      	b.n	801bb00 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba6a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ba6c:	68b8      	ldr	r0, [r7, #8]
 801ba6e:	f7ff fe17 	bl	801b6a0 <tcp_output_segment_busy>
 801ba72:	4603      	mov	r3, r0
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d002      	beq.n	801ba7e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ba78:	f06f 0305 	mvn.w	r3, #5
 801ba7c:	e040      	b.n	801bb00 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ba7e:	68bb      	ldr	r3, [r7, #8]
 801ba80:	681a      	ldr	r2, [r3, #0]
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	336c      	adds	r3, #108	@ 0x6c
 801ba8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ba8c:	e002      	b.n	801ba94 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d011      	beq.n	801bac0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	691b      	ldr	r3, [r3, #16]
 801baa2:	685b      	ldr	r3, [r3, #4]
 801baa4:	4618      	mov	r0, r3
 801baa6:	f7f7 ff0d 	bl	80138c4 <lwip_htonl>
 801baaa:	4604      	mov	r4, r0
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	691b      	ldr	r3, [r3, #16]
 801bab0:	685b      	ldr	r3, [r3, #4]
 801bab2:	4618      	mov	r0, r3
 801bab4:	f7f7 ff06 	bl	80138c4 <lwip_htonl>
 801bab8:	4603      	mov	r3, r0
 801baba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801babc:	2b00      	cmp	r3, #0
 801babe:	dbe6      	blt.n	801ba8e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	681a      	ldr	r2, [r3, #0]
 801bac4:	68bb      	ldr	r3, [r7, #8]
 801bac6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	68ba      	ldr	r2, [r7, #8]
 801bacc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bace:	68bb      	ldr	r3, [r7, #8]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d103      	bne.n	801bade <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	2200      	movs	r2, #0
 801bada:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bae4:	2bff      	cmp	r3, #255	@ 0xff
 801bae6:	d007      	beq.n	801baf8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801baee:	3301      	adds	r3, #1
 801baf0:	b2da      	uxtb	r2, r3
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	2200      	movs	r2, #0
 801bafc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bafe:	2300      	movs	r3, #0
}
 801bb00:	4618      	mov	r0, r3
 801bb02:	3714      	adds	r7, #20
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd90      	pop	{r4, r7, pc}
 801bb08:	080252f0 	.word	0x080252f0
 801bb0c:	080259ec 	.word	0x080259ec
 801bb10:	08025344 	.word	0x08025344

0801bb14 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bb14:	b580      	push	{r7, lr}
 801bb16:	b082      	sub	sp, #8
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d106      	bne.n	801bb30 <tcp_rexmit_fast+0x1c>
 801bb22:	4b2a      	ldr	r3, [pc, #168]	@ (801bbcc <tcp_rexmit_fast+0xb8>)
 801bb24:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801bb28:	4929      	ldr	r1, [pc, #164]	@ (801bbd0 <tcp_rexmit_fast+0xbc>)
 801bb2a:	482a      	ldr	r0, [pc, #168]	@ (801bbd4 <tcp_rexmit_fast+0xc0>)
 801bb2c:	f005 fd28 	bl	8021580 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d045      	beq.n	801bbc4 <tcp_rexmit_fast+0xb0>
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	8b5b      	ldrh	r3, [r3, #26]
 801bb3c:	f003 0304 	and.w	r3, r3, #4
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d13f      	bne.n	801bbc4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bb44:	6878      	ldr	r0, [r7, #4]
 801bb46:	f7ff ff79 	bl	801ba3c <tcp_rexmit>
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d139      	bne.n	801bbc4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801bb5c:	4293      	cmp	r3, r2
 801bb5e:	bf28      	it	cs
 801bb60:	4613      	movcs	r3, r2
 801bb62:	b29b      	uxth	r3, r3
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	da00      	bge.n	801bb6a <tcp_rexmit_fast+0x56>
 801bb68:	3301      	adds	r3, #1
 801bb6a:	105b      	asrs	r3, r3, #1
 801bb6c:	b29a      	uxth	r2, r3
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801bb7a:	461a      	mov	r2, r3
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bb80:	005b      	lsls	r3, r3, #1
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d206      	bcs.n	801bb94 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bb8a:	005b      	lsls	r3, r3, #1
 801bb8c:	b29a      	uxth	r2, r3
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bb9e:	4619      	mov	r1, r3
 801bba0:	0049      	lsls	r1, r1, #1
 801bba2:	440b      	add	r3, r1
 801bba4:	b29b      	uxth	r3, r3
 801bba6:	4413      	add	r3, r2
 801bba8:	b29a      	uxth	r2, r3
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	8b5b      	ldrh	r3, [r3, #26]
 801bbb4:	f043 0304 	orr.w	r3, r3, #4
 801bbb8:	b29a      	uxth	r2, r3
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801bbc4:	bf00      	nop
 801bbc6:	3708      	adds	r7, #8
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	bd80      	pop	{r7, pc}
 801bbcc:	080252f0 	.word	0x080252f0
 801bbd0:	08025a04 	.word	0x08025a04
 801bbd4:	08025344 	.word	0x08025344

0801bbd8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b086      	sub	sp, #24
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	60f8      	str	r0, [r7, #12]
 801bbe0:	607b      	str	r3, [r7, #4]
 801bbe2:	460b      	mov	r3, r1
 801bbe4:	817b      	strh	r3, [r7, #10]
 801bbe6:	4613      	mov	r3, r2
 801bbe8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bbea:	897a      	ldrh	r2, [r7, #10]
 801bbec:	893b      	ldrh	r3, [r7, #8]
 801bbee:	4413      	add	r3, r2
 801bbf0:	b29b      	uxth	r3, r3
 801bbf2:	3314      	adds	r3, #20
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bbfa:	4619      	mov	r1, r3
 801bbfc:	2022      	movs	r0, #34	@ 0x22
 801bbfe:	f7f9 f94d 	bl	8014e9c <pbuf_alloc>
 801bc02:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801bc04:	697b      	ldr	r3, [r7, #20]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d04d      	beq.n	801bca6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bc0a:	897b      	ldrh	r3, [r7, #10]
 801bc0c:	3313      	adds	r3, #19
 801bc0e:	697a      	ldr	r2, [r7, #20]
 801bc10:	8952      	ldrh	r2, [r2, #10]
 801bc12:	4293      	cmp	r3, r2
 801bc14:	db06      	blt.n	801bc24 <tcp_output_alloc_header_common+0x4c>
 801bc16:	4b26      	ldr	r3, [pc, #152]	@ (801bcb0 <tcp_output_alloc_header_common+0xd8>)
 801bc18:	f240 7223 	movw	r2, #1827	@ 0x723
 801bc1c:	4925      	ldr	r1, [pc, #148]	@ (801bcb4 <tcp_output_alloc_header_common+0xdc>)
 801bc1e:	4826      	ldr	r0, [pc, #152]	@ (801bcb8 <tcp_output_alloc_header_common+0xe0>)
 801bc20:	f005 fcae 	bl	8021580 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801bc24:	697b      	ldr	r3, [r7, #20]
 801bc26:	685b      	ldr	r3, [r3, #4]
 801bc28:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bc2a:	8c3b      	ldrh	r3, [r7, #32]
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	f7f7 fe33 	bl	8013898 <lwip_htons>
 801bc32:	4603      	mov	r3, r0
 801bc34:	461a      	mov	r2, r3
 801bc36:	693b      	ldr	r3, [r7, #16]
 801bc38:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bc3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bc3c:	4618      	mov	r0, r3
 801bc3e:	f7f7 fe2b 	bl	8013898 <lwip_htons>
 801bc42:	4603      	mov	r3, r0
 801bc44:	461a      	mov	r2, r3
 801bc46:	693b      	ldr	r3, [r7, #16]
 801bc48:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801bc4a:	693b      	ldr	r3, [r7, #16]
 801bc4c:	687a      	ldr	r2, [r7, #4]
 801bc4e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bc50:	68f8      	ldr	r0, [r7, #12]
 801bc52:	f7f7 fe37 	bl	80138c4 <lwip_htonl>
 801bc56:	4602      	mov	r2, r0
 801bc58:	693b      	ldr	r3, [r7, #16]
 801bc5a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bc5c:	897b      	ldrh	r3, [r7, #10]
 801bc5e:	089b      	lsrs	r3, r3, #2
 801bc60:	b29b      	uxth	r3, r3
 801bc62:	3305      	adds	r3, #5
 801bc64:	b29b      	uxth	r3, r3
 801bc66:	031b      	lsls	r3, r3, #12
 801bc68:	b29a      	uxth	r2, r3
 801bc6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801bc6e:	b29b      	uxth	r3, r3
 801bc70:	4313      	orrs	r3, r2
 801bc72:	b29b      	uxth	r3, r3
 801bc74:	4618      	mov	r0, r3
 801bc76:	f7f7 fe0f 	bl	8013898 <lwip_htons>
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	461a      	mov	r2, r3
 801bc7e:	693b      	ldr	r3, [r7, #16]
 801bc80:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bc82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bc84:	4618      	mov	r0, r3
 801bc86:	f7f7 fe07 	bl	8013898 <lwip_htons>
 801bc8a:	4603      	mov	r3, r0
 801bc8c:	461a      	mov	r2, r3
 801bc8e:	693b      	ldr	r3, [r7, #16]
 801bc90:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bc92:	693b      	ldr	r3, [r7, #16]
 801bc94:	2200      	movs	r2, #0
 801bc96:	741a      	strb	r2, [r3, #16]
 801bc98:	2200      	movs	r2, #0
 801bc9a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bc9c:	693b      	ldr	r3, [r7, #16]
 801bc9e:	2200      	movs	r2, #0
 801bca0:	749a      	strb	r2, [r3, #18]
 801bca2:	2200      	movs	r2, #0
 801bca4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bca6:	697b      	ldr	r3, [r7, #20]
}
 801bca8:	4618      	mov	r0, r3
 801bcaa:	3718      	adds	r7, #24
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd80      	pop	{r7, pc}
 801bcb0:	080252f0 	.word	0x080252f0
 801bcb4:	08025a24 	.word	0x08025a24
 801bcb8:	08025344 	.word	0x08025344

0801bcbc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bcbc:	b5b0      	push	{r4, r5, r7, lr}
 801bcbe:	b08a      	sub	sp, #40	@ 0x28
 801bcc0:	af04      	add	r7, sp, #16
 801bcc2:	60f8      	str	r0, [r7, #12]
 801bcc4:	607b      	str	r3, [r7, #4]
 801bcc6:	460b      	mov	r3, r1
 801bcc8:	817b      	strh	r3, [r7, #10]
 801bcca:	4613      	mov	r3, r2
 801bccc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d106      	bne.n	801bce2 <tcp_output_alloc_header+0x26>
 801bcd4:	4b15      	ldr	r3, [pc, #84]	@ (801bd2c <tcp_output_alloc_header+0x70>)
 801bcd6:	f240 7242 	movw	r2, #1858	@ 0x742
 801bcda:	4915      	ldr	r1, [pc, #84]	@ (801bd30 <tcp_output_alloc_header+0x74>)
 801bcdc:	4815      	ldr	r0, [pc, #84]	@ (801bd34 <tcp_output_alloc_header+0x78>)
 801bcde:	f005 fc4f 	bl	8021580 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	8adb      	ldrh	r3, [r3, #22]
 801bcea:	68fa      	ldr	r2, [r7, #12]
 801bcec:	8b12      	ldrh	r2, [r2, #24]
 801bcee:	68f9      	ldr	r1, [r7, #12]
 801bcf0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801bcf2:	893d      	ldrh	r5, [r7, #8]
 801bcf4:	897c      	ldrh	r4, [r7, #10]
 801bcf6:	9103      	str	r1, [sp, #12]
 801bcf8:	2110      	movs	r1, #16
 801bcfa:	9102      	str	r1, [sp, #8]
 801bcfc:	9201      	str	r2, [sp, #4]
 801bcfe:	9300      	str	r3, [sp, #0]
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	462a      	mov	r2, r5
 801bd04:	4621      	mov	r1, r4
 801bd06:	f7ff ff67 	bl	801bbd8 <tcp_output_alloc_header_common>
 801bd0a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d006      	beq.n	801bd20 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd16:	68fa      	ldr	r2, [r7, #12]
 801bd18:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801bd1a:	441a      	add	r2, r3
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801bd20:	697b      	ldr	r3, [r7, #20]
}
 801bd22:	4618      	mov	r0, r3
 801bd24:	3718      	adds	r7, #24
 801bd26:	46bd      	mov	sp, r7
 801bd28:	bdb0      	pop	{r4, r5, r7, pc}
 801bd2a:	bf00      	nop
 801bd2c:	080252f0 	.word	0x080252f0
 801bd30:	08025a54 	.word	0x08025a54
 801bd34:	08025344 	.word	0x08025344

0801bd38 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b088      	sub	sp, #32
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	60f8      	str	r0, [r7, #12]
 801bd40:	60b9      	str	r1, [r7, #8]
 801bd42:	4611      	mov	r1, r2
 801bd44:	461a      	mov	r2, r3
 801bd46:	460b      	mov	r3, r1
 801bd48:	71fb      	strb	r3, [r7, #7]
 801bd4a:	4613      	mov	r3, r2
 801bd4c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801bd4e:	2300      	movs	r3, #0
 801bd50:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801bd52:	68bb      	ldr	r3, [r7, #8]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d106      	bne.n	801bd66 <tcp_output_fill_options+0x2e>
 801bd58:	4b12      	ldr	r3, [pc, #72]	@ (801bda4 <tcp_output_fill_options+0x6c>)
 801bd5a:	f240 7256 	movw	r2, #1878	@ 0x756
 801bd5e:	4912      	ldr	r1, [pc, #72]	@ (801bda8 <tcp_output_fill_options+0x70>)
 801bd60:	4812      	ldr	r0, [pc, #72]	@ (801bdac <tcp_output_fill_options+0x74>)
 801bd62:	f005 fc0d 	bl	8021580 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801bd66:	68bb      	ldr	r3, [r7, #8]
 801bd68:	685b      	ldr	r3, [r3, #4]
 801bd6a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801bd6c:	69bb      	ldr	r3, [r7, #24]
 801bd6e:	3314      	adds	r3, #20
 801bd70:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801bd72:	8bfb      	ldrh	r3, [r7, #30]
 801bd74:	009b      	lsls	r3, r3, #2
 801bd76:	461a      	mov	r2, r3
 801bd78:	79fb      	ldrb	r3, [r7, #7]
 801bd7a:	009b      	lsls	r3, r3, #2
 801bd7c:	f003 0304 	and.w	r3, r3, #4
 801bd80:	4413      	add	r3, r2
 801bd82:	3314      	adds	r3, #20
 801bd84:	69ba      	ldr	r2, [r7, #24]
 801bd86:	4413      	add	r3, r2
 801bd88:	697a      	ldr	r2, [r7, #20]
 801bd8a:	429a      	cmp	r2, r3
 801bd8c:	d006      	beq.n	801bd9c <tcp_output_fill_options+0x64>
 801bd8e:	4b05      	ldr	r3, [pc, #20]	@ (801bda4 <tcp_output_fill_options+0x6c>)
 801bd90:	f240 7275 	movw	r2, #1909	@ 0x775
 801bd94:	4906      	ldr	r1, [pc, #24]	@ (801bdb0 <tcp_output_fill_options+0x78>)
 801bd96:	4805      	ldr	r0, [pc, #20]	@ (801bdac <tcp_output_fill_options+0x74>)
 801bd98:	f005 fbf2 	bl	8021580 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801bd9c:	bf00      	nop
 801bd9e:	3720      	adds	r7, #32
 801bda0:	46bd      	mov	sp, r7
 801bda2:	bd80      	pop	{r7, pc}
 801bda4:	080252f0 	.word	0x080252f0
 801bda8:	08025a7c 	.word	0x08025a7c
 801bdac:	08025344 	.word	0x08025344
 801bdb0:	08025974 	.word	0x08025974

0801bdb4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b08a      	sub	sp, #40	@ 0x28
 801bdb8:	af04      	add	r7, sp, #16
 801bdba:	60f8      	str	r0, [r7, #12]
 801bdbc:	60b9      	str	r1, [r7, #8]
 801bdbe:	607a      	str	r2, [r7, #4]
 801bdc0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d106      	bne.n	801bdd6 <tcp_output_control_segment+0x22>
 801bdc8:	4b20      	ldr	r3, [pc, #128]	@ (801be4c <tcp_output_control_segment+0x98>)
 801bdca:	f240 7287 	movw	r2, #1927	@ 0x787
 801bdce:	4920      	ldr	r1, [pc, #128]	@ (801be50 <tcp_output_control_segment+0x9c>)
 801bdd0:	4820      	ldr	r0, [pc, #128]	@ (801be54 <tcp_output_control_segment+0xa0>)
 801bdd2:	f005 fbd5 	bl	8021580 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801bdd6:	683a      	ldr	r2, [r7, #0]
 801bdd8:	6879      	ldr	r1, [r7, #4]
 801bdda:	68f8      	ldr	r0, [r7, #12]
 801bddc:	f7fe fa38 	bl	801a250 <tcp_route>
 801bde0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801bde2:	693b      	ldr	r3, [r7, #16]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d102      	bne.n	801bdee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801bde8:	23fc      	movs	r3, #252	@ 0xfc
 801bdea:	75fb      	strb	r3, [r7, #23]
 801bdec:	e024      	b.n	801be38 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d006      	beq.n	801be02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	7adb      	ldrb	r3, [r3, #11]
 801bdf8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	7a9b      	ldrb	r3, [r3, #10]
 801bdfe:	757b      	strb	r3, [r7, #21]
 801be00:	e003      	b.n	801be0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801be02:	23ff      	movs	r3, #255	@ 0xff
 801be04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801be06:	2300      	movs	r3, #0
 801be08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801be0a:	4b13      	ldr	r3, [pc, #76]	@ (801be58 <tcp_output_control_segment+0xa4>)
 801be0c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801be10:	3301      	adds	r3, #1
 801be12:	b29a      	uxth	r2, r3
 801be14:	4b10      	ldr	r3, [pc, #64]	@ (801be58 <tcp_output_control_segment+0xa4>)
 801be16:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801be1a:	7dba      	ldrb	r2, [r7, #22]
 801be1c:	693b      	ldr	r3, [r7, #16]
 801be1e:	9302      	str	r3, [sp, #8]
 801be20:	2306      	movs	r3, #6
 801be22:	9301      	str	r3, [sp, #4]
 801be24:	7d7b      	ldrb	r3, [r7, #21]
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	4613      	mov	r3, r2
 801be2a:	683a      	ldr	r2, [r7, #0]
 801be2c:	6879      	ldr	r1, [r7, #4]
 801be2e:	68b8      	ldr	r0, [r7, #8]
 801be30:	f002 ff42 	bl	801ecb8 <ip4_output_if>
 801be34:	4603      	mov	r3, r0
 801be36:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801be38:	68b8      	ldr	r0, [r7, #8]
 801be3a:	f7f9 fb5b 	bl	80154f4 <pbuf_free>
  return err;
 801be3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801be42:	4618      	mov	r0, r3
 801be44:	3718      	adds	r7, #24
 801be46:	46bd      	mov	sp, r7
 801be48:	bd80      	pop	{r7, pc}
 801be4a:	bf00      	nop
 801be4c:	080252f0 	.word	0x080252f0
 801be50:	08025aa4 	.word	0x08025aa4
 801be54:	08025344 	.word	0x08025344
 801be58:	2002d358 	.word	0x2002d358

0801be5c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801be5c:	b590      	push	{r4, r7, lr}
 801be5e:	b08b      	sub	sp, #44	@ 0x2c
 801be60:	af04      	add	r7, sp, #16
 801be62:	60f8      	str	r0, [r7, #12]
 801be64:	60b9      	str	r1, [r7, #8]
 801be66:	607a      	str	r2, [r7, #4]
 801be68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801be6a:	683b      	ldr	r3, [r7, #0]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d106      	bne.n	801be7e <tcp_rst+0x22>
 801be70:	4b1f      	ldr	r3, [pc, #124]	@ (801bef0 <tcp_rst+0x94>)
 801be72:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801be76:	491f      	ldr	r1, [pc, #124]	@ (801bef4 <tcp_rst+0x98>)
 801be78:	481f      	ldr	r0, [pc, #124]	@ (801bef8 <tcp_rst+0x9c>)
 801be7a:	f005 fb81 	bl	8021580 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801be7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be80:	2b00      	cmp	r3, #0
 801be82:	d106      	bne.n	801be92 <tcp_rst+0x36>
 801be84:	4b1a      	ldr	r3, [pc, #104]	@ (801bef0 <tcp_rst+0x94>)
 801be86:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801be8a:	491c      	ldr	r1, [pc, #112]	@ (801befc <tcp_rst+0xa0>)
 801be8c:	481a      	ldr	r0, [pc, #104]	@ (801bef8 <tcp_rst+0x9c>)
 801be8e:	f005 fb77 	bl	8021580 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801be92:	2300      	movs	r3, #0
 801be94:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801be96:	f246 0308 	movw	r3, #24584	@ 0x6008
 801be9a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801be9c:	7dfb      	ldrb	r3, [r7, #23]
 801be9e:	b29c      	uxth	r4, r3
 801bea0:	68b8      	ldr	r0, [r7, #8]
 801bea2:	f7f7 fd0f 	bl	80138c4 <lwip_htonl>
 801bea6:	4602      	mov	r2, r0
 801bea8:	8abb      	ldrh	r3, [r7, #20]
 801beaa:	9303      	str	r3, [sp, #12]
 801beac:	2314      	movs	r3, #20
 801beae:	9302      	str	r3, [sp, #8]
 801beb0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801beb2:	9301      	str	r3, [sp, #4]
 801beb4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801beb6:	9300      	str	r3, [sp, #0]
 801beb8:	4613      	mov	r3, r2
 801beba:	2200      	movs	r2, #0
 801bebc:	4621      	mov	r1, r4
 801bebe:	6878      	ldr	r0, [r7, #4]
 801bec0:	f7ff fe8a 	bl	801bbd8 <tcp_output_alloc_header_common>
 801bec4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801bec6:	693b      	ldr	r3, [r7, #16]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d00c      	beq.n	801bee6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801becc:	7dfb      	ldrb	r3, [r7, #23]
 801bece:	2200      	movs	r2, #0
 801bed0:	6939      	ldr	r1, [r7, #16]
 801bed2:	68f8      	ldr	r0, [r7, #12]
 801bed4:	f7ff ff30 	bl	801bd38 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beda:	683a      	ldr	r2, [r7, #0]
 801bedc:	6939      	ldr	r1, [r7, #16]
 801bede:	68f8      	ldr	r0, [r7, #12]
 801bee0:	f7ff ff68 	bl	801bdb4 <tcp_output_control_segment>
 801bee4:	e000      	b.n	801bee8 <tcp_rst+0x8c>
    return;
 801bee6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bee8:	371c      	adds	r7, #28
 801beea:	46bd      	mov	sp, r7
 801beec:	bd90      	pop	{r4, r7, pc}
 801beee:	bf00      	nop
 801bef0:	080252f0 	.word	0x080252f0
 801bef4:	08025ad0 	.word	0x08025ad0
 801bef8:	08025344 	.word	0x08025344
 801befc:	08025aec 	.word	0x08025aec

0801bf00 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801bf00:	b590      	push	{r4, r7, lr}
 801bf02:	b087      	sub	sp, #28
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801bf08:	2300      	movs	r3, #0
 801bf0a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d106      	bne.n	801bf24 <tcp_send_empty_ack+0x24>
 801bf16:	4b28      	ldr	r3, [pc, #160]	@ (801bfb8 <tcp_send_empty_ack+0xb8>)
 801bf18:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801bf1c:	4927      	ldr	r1, [pc, #156]	@ (801bfbc <tcp_send_empty_ack+0xbc>)
 801bf1e:	4828      	ldr	r0, [pc, #160]	@ (801bfc0 <tcp_send_empty_ack+0xc0>)
 801bf20:	f005 fb2e 	bl	8021580 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bf24:	7dfb      	ldrb	r3, [r7, #23]
 801bf26:	009b      	lsls	r3, r3, #2
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	f003 0304 	and.w	r3, r3, #4
 801bf2e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bf30:	7d7b      	ldrb	r3, [r7, #21]
 801bf32:	b29c      	uxth	r4, r3
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7f7 fcc3 	bl	80138c4 <lwip_htonl>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	2200      	movs	r2, #0
 801bf42:	4621      	mov	r1, r4
 801bf44:	6878      	ldr	r0, [r7, #4]
 801bf46:	f7ff feb9 	bl	801bcbc <tcp_output_alloc_header>
 801bf4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bf4c:	693b      	ldr	r3, [r7, #16]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d109      	bne.n	801bf66 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	8b5b      	ldrh	r3, [r3, #26]
 801bf56:	f043 0303 	orr.w	r3, r3, #3
 801bf5a:	b29a      	uxth	r2, r3
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801bf60:	f06f 0301 	mvn.w	r3, #1
 801bf64:	e023      	b.n	801bfae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801bf66:	7dbb      	ldrb	r3, [r7, #22]
 801bf68:	7dfa      	ldrb	r2, [r7, #23]
 801bf6a:	6939      	ldr	r1, [r7, #16]
 801bf6c:	6878      	ldr	r0, [r7, #4]
 801bf6e:	f7ff fee3 	bl	801bd38 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bf72:	687a      	ldr	r2, [r7, #4]
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	3304      	adds	r3, #4
 801bf78:	6939      	ldr	r1, [r7, #16]
 801bf7a:	6878      	ldr	r0, [r7, #4]
 801bf7c:	f7ff ff1a 	bl	801bdb4 <tcp_output_control_segment>
 801bf80:	4603      	mov	r3, r0
 801bf82:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801bf84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d007      	beq.n	801bf9c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	8b5b      	ldrh	r3, [r3, #26]
 801bf90:	f043 0303 	orr.w	r3, r3, #3
 801bf94:	b29a      	uxth	r2, r3
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	835a      	strh	r2, [r3, #26]
 801bf9a:	e006      	b.n	801bfaa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	8b5b      	ldrh	r3, [r3, #26]
 801bfa0:	f023 0303 	bic.w	r3, r3, #3
 801bfa4:	b29a      	uxth	r2, r3
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801bfaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bfae:	4618      	mov	r0, r3
 801bfb0:	371c      	adds	r7, #28
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	bd90      	pop	{r4, r7, pc}
 801bfb6:	bf00      	nop
 801bfb8:	080252f0 	.word	0x080252f0
 801bfbc:	08025b08 	.word	0x08025b08
 801bfc0:	08025344 	.word	0x08025344

0801bfc4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bfc4:	b590      	push	{r4, r7, lr}
 801bfc6:	b085      	sub	sp, #20
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bfcc:	2300      	movs	r3, #0
 801bfce:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d106      	bne.n	801bfe4 <tcp_keepalive+0x20>
 801bfd6:	4b18      	ldr	r3, [pc, #96]	@ (801c038 <tcp_keepalive+0x74>)
 801bfd8:	f640 0224 	movw	r2, #2084	@ 0x824
 801bfdc:	4917      	ldr	r1, [pc, #92]	@ (801c03c <tcp_keepalive+0x78>)
 801bfde:	4818      	ldr	r0, [pc, #96]	@ (801c040 <tcp_keepalive+0x7c>)
 801bfe0:	f005 face 	bl	8021580 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bfe4:	7abb      	ldrb	r3, [r7, #10]
 801bfe6:	b29c      	uxth	r4, r3
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bfec:	3b01      	subs	r3, #1
 801bfee:	4618      	mov	r0, r3
 801bff0:	f7f7 fc68 	bl	80138c4 <lwip_htonl>
 801bff4:	4603      	mov	r3, r0
 801bff6:	2200      	movs	r2, #0
 801bff8:	4621      	mov	r1, r4
 801bffa:	6878      	ldr	r0, [r7, #4]
 801bffc:	f7ff fe5e 	bl	801bcbc <tcp_output_alloc_header>
 801c000:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d102      	bne.n	801c00e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c00c:	e010      	b.n	801c030 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c00e:	7abb      	ldrb	r3, [r7, #10]
 801c010:	2200      	movs	r2, #0
 801c012:	68f9      	ldr	r1, [r7, #12]
 801c014:	6878      	ldr	r0, [r7, #4]
 801c016:	f7ff fe8f 	bl	801bd38 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c01a:	687a      	ldr	r2, [r7, #4]
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	3304      	adds	r3, #4
 801c020:	68f9      	ldr	r1, [r7, #12]
 801c022:	6878      	ldr	r0, [r7, #4]
 801c024:	f7ff fec6 	bl	801bdb4 <tcp_output_control_segment>
 801c028:	4603      	mov	r3, r0
 801c02a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c02c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c030:	4618      	mov	r0, r3
 801c032:	3714      	adds	r7, #20
 801c034:	46bd      	mov	sp, r7
 801c036:	bd90      	pop	{r4, r7, pc}
 801c038:	080252f0 	.word	0x080252f0
 801c03c:	08025b28 	.word	0x08025b28
 801c040:	08025344 	.word	0x08025344

0801c044 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c044:	b590      	push	{r4, r7, lr}
 801c046:	b08b      	sub	sp, #44	@ 0x2c
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c04c:	2300      	movs	r3, #0
 801c04e:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d106      	bne.n	801c064 <tcp_zero_window_probe+0x20>
 801c056:	4b4d      	ldr	r3, [pc, #308]	@ (801c18c <tcp_zero_window_probe+0x148>)
 801c058:	f640 024f 	movw	r2, #2127	@ 0x84f
 801c05c:	494c      	ldr	r1, [pc, #304]	@ (801c190 <tcp_zero_window_probe+0x14c>)
 801c05e:	484d      	ldr	r0, [pc, #308]	@ (801c194 <tcp_zero_window_probe+0x150>)
 801c060:	f005 fa8e 	bl	8021580 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c068:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d101      	bne.n	801c074 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c070:	2300      	movs	r3, #0
 801c072:	e087      	b.n	801c184 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801c07a:	2bff      	cmp	r3, #255	@ 0xff
 801c07c:	d007      	beq.n	801c08e <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801c084:	3301      	adds	r3, #1
 801c086:	b2da      	uxtb	r2, r3
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c090:	691b      	ldr	r3, [r3, #16]
 801c092:	899b      	ldrh	r3, [r3, #12]
 801c094:	b29b      	uxth	r3, r3
 801c096:	4618      	mov	r0, r3
 801c098:	f7f7 fbfe 	bl	8013898 <lwip_htons>
 801c09c:	4603      	mov	r3, r0
 801c09e:	b2db      	uxtb	r3, r3
 801c0a0:	f003 0301 	and.w	r3, r3, #1
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d005      	beq.n	801c0b4 <tcp_zero_window_probe+0x70>
 801c0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0aa:	891b      	ldrh	r3, [r3, #8]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d101      	bne.n	801c0b4 <tcp_zero_window_probe+0x70>
 801c0b0:	2301      	movs	r3, #1
 801c0b2:	e000      	b.n	801c0b6 <tcp_zero_window_probe+0x72>
 801c0b4:	2300      	movs	r3, #0
 801c0b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c0ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	bf0c      	ite	eq
 801c0c2:	2301      	moveq	r3, #1
 801c0c4:	2300      	movne	r3, #0
 801c0c6:	b2db      	uxtb	r3, r3
 801c0c8:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c0ca:	7cfb      	ldrb	r3, [r7, #19]
 801c0cc:	b299      	uxth	r1, r3
 801c0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0d0:	691b      	ldr	r3, [r3, #16]
 801c0d2:	685b      	ldr	r3, [r3, #4]
 801c0d4:	8c3a      	ldrh	r2, [r7, #32]
 801c0d6:	6878      	ldr	r0, [r7, #4]
 801c0d8:	f7ff fdf0 	bl	801bcbc <tcp_output_alloc_header>
 801c0dc:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801c0de:	69fb      	ldr	r3, [r7, #28]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d102      	bne.n	801c0ea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c0e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c0e8:	e04c      	b.n	801c184 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c0ea:	69fb      	ldr	r3, [r7, #28]
 801c0ec:	685b      	ldr	r3, [r3, #4]
 801c0ee:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801c0f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d011      	beq.n	801c11c <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c0f8:	69bb      	ldr	r3, [r7, #24]
 801c0fa:	899b      	ldrh	r3, [r3, #12]
 801c0fc:	b29b      	uxth	r3, r3
 801c0fe:	b21b      	sxth	r3, r3
 801c100:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801c104:	b21c      	sxth	r4, r3
 801c106:	2011      	movs	r0, #17
 801c108:	f7f7 fbc6 	bl	8013898 <lwip_htons>
 801c10c:	4603      	mov	r3, r0
 801c10e:	b21b      	sxth	r3, r3
 801c110:	4323      	orrs	r3, r4
 801c112:	b21b      	sxth	r3, r3
 801c114:	b29a      	uxth	r2, r3
 801c116:	69bb      	ldr	r3, [r7, #24]
 801c118:	819a      	strh	r2, [r3, #12]
 801c11a:	e010      	b.n	801c13e <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c11c:	69fb      	ldr	r3, [r7, #28]
 801c11e:	685b      	ldr	r3, [r3, #4]
 801c120:	3314      	adds	r3, #20
 801c122:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c126:	6858      	ldr	r0, [r3, #4]
 801c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	891a      	ldrh	r2, [r3, #8]
 801c12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c130:	891b      	ldrh	r3, [r3, #8]
 801c132:	1ad3      	subs	r3, r2, r3
 801c134:	b29b      	uxth	r3, r3
 801c136:	2201      	movs	r2, #1
 801c138:	6979      	ldr	r1, [r7, #20]
 801c13a:	f7f9 fc0d 	bl	8015958 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c140:	691b      	ldr	r3, [r3, #16]
 801c142:	685b      	ldr	r3, [r3, #4]
 801c144:	4618      	mov	r0, r3
 801c146:	f7f7 fbbd 	bl	80138c4 <lwip_htonl>
 801c14a:	4603      	mov	r3, r0
 801c14c:	3301      	adds	r3, #1
 801c14e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	1ad3      	subs	r3, r2, r3
 801c158:	2b00      	cmp	r3, #0
 801c15a:	da02      	bge.n	801c162 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	68fa      	ldr	r2, [r7, #12]
 801c160:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c162:	7cfb      	ldrb	r3, [r7, #19]
 801c164:	2200      	movs	r2, #0
 801c166:	69f9      	ldr	r1, [r7, #28]
 801c168:	6878      	ldr	r0, [r7, #4]
 801c16a:	f7ff fde5 	bl	801bd38 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c16e:	687a      	ldr	r2, [r7, #4]
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	3304      	adds	r3, #4
 801c174:	69f9      	ldr	r1, [r7, #28]
 801c176:	6878      	ldr	r0, [r7, #4]
 801c178:	f7ff fe1c 	bl	801bdb4 <tcp_output_control_segment>
 801c17c:	4603      	mov	r3, r0
 801c17e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c180:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c184:	4618      	mov	r0, r3
 801c186:	372c      	adds	r7, #44	@ 0x2c
 801c188:	46bd      	mov	sp, r7
 801c18a:	bd90      	pop	{r4, r7, pc}
 801c18c:	080252f0 	.word	0x080252f0
 801c190:	08025b44 	.word	0x08025b44
 801c194:	08025344 	.word	0x08025344

0801c198 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b082      	sub	sp, #8
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c1a0:	f7f9 fe46 	bl	8015e30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c1a4:	4b0a      	ldr	r3, [pc, #40]	@ (801c1d0 <tcpip_tcp_timer+0x38>)
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d103      	bne.n	801c1b4 <tcpip_tcp_timer+0x1c>
 801c1ac:	4b09      	ldr	r3, [pc, #36]	@ (801c1d4 <tcpip_tcp_timer+0x3c>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d005      	beq.n	801c1c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	4908      	ldr	r1, [pc, #32]	@ (801c1d8 <tcpip_tcp_timer+0x40>)
 801c1b8:	20fa      	movs	r0, #250	@ 0xfa
 801c1ba:	f000 f8f3 	bl	801c3a4 <sys_timeout>
 801c1be:	e003      	b.n	801c1c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c1c0:	4b06      	ldr	r3, [pc, #24]	@ (801c1dc <tcpip_tcp_timer+0x44>)
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	601a      	str	r2, [r3, #0]
  }
}
 801c1c6:	bf00      	nop
 801c1c8:	bf00      	nop
 801c1ca:	3708      	adds	r7, #8
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	bd80      	pop	{r7, pc}
 801c1d0:	2002d464 	.word	0x2002d464
 801c1d4:	2002d468 	.word	0x2002d468
 801c1d8:	0801c199 	.word	0x0801c199
 801c1dc:	2002d4b4 	.word	0x2002d4b4

0801c1e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c1e4:	4b0a      	ldr	r3, [pc, #40]	@ (801c210 <tcp_timer_needed+0x30>)
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d10f      	bne.n	801c20c <tcp_timer_needed+0x2c>
 801c1ec:	4b09      	ldr	r3, [pc, #36]	@ (801c214 <tcp_timer_needed+0x34>)
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d103      	bne.n	801c1fc <tcp_timer_needed+0x1c>
 801c1f4:	4b08      	ldr	r3, [pc, #32]	@ (801c218 <tcp_timer_needed+0x38>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d007      	beq.n	801c20c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c1fc:	4b04      	ldr	r3, [pc, #16]	@ (801c210 <tcp_timer_needed+0x30>)
 801c1fe:	2201      	movs	r2, #1
 801c200:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c202:	2200      	movs	r2, #0
 801c204:	4905      	ldr	r1, [pc, #20]	@ (801c21c <tcp_timer_needed+0x3c>)
 801c206:	20fa      	movs	r0, #250	@ 0xfa
 801c208:	f000 f8cc 	bl	801c3a4 <sys_timeout>
  }
}
 801c20c:	bf00      	nop
 801c20e:	bd80      	pop	{r7, pc}
 801c210:	2002d4b4 	.word	0x2002d4b4
 801c214:	2002d464 	.word	0x2002d464
 801c218:	2002d468 	.word	0x2002d468
 801c21c:	0801c199 	.word	0x0801c199

0801c220 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c220:	b580      	push	{r7, lr}
 801c222:	b086      	sub	sp, #24
 801c224:	af00      	add	r7, sp, #0
 801c226:	60f8      	str	r0, [r7, #12]
 801c228:	60b9      	str	r1, [r7, #8]
 801c22a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c22c:	200a      	movs	r0, #10
 801c22e:	f7f8 f8ff 	bl	8014430 <memp_malloc>
 801c232:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c234:	693b      	ldr	r3, [r7, #16]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d109      	bne.n	801c24e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c23a:	693b      	ldr	r3, [r7, #16]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d151      	bne.n	801c2e4 <sys_timeout_abs+0xc4>
 801c240:	4b2a      	ldr	r3, [pc, #168]	@ (801c2ec <sys_timeout_abs+0xcc>)
 801c242:	22be      	movs	r2, #190	@ 0xbe
 801c244:	492a      	ldr	r1, [pc, #168]	@ (801c2f0 <sys_timeout_abs+0xd0>)
 801c246:	482b      	ldr	r0, [pc, #172]	@ (801c2f4 <sys_timeout_abs+0xd4>)
 801c248:	f005 f99a 	bl	8021580 <iprintf>
    return;
 801c24c:	e04a      	b.n	801c2e4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c24e:	693b      	ldr	r3, [r7, #16]
 801c250:	2200      	movs	r2, #0
 801c252:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c254:	693b      	ldr	r3, [r7, #16]
 801c256:	68ba      	ldr	r2, [r7, #8]
 801c258:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c25a:	693b      	ldr	r3, [r7, #16]
 801c25c:	687a      	ldr	r2, [r7, #4]
 801c25e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c260:	693b      	ldr	r3, [r7, #16]
 801c262:	68fa      	ldr	r2, [r7, #12]
 801c264:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c266:	4b24      	ldr	r3, [pc, #144]	@ (801c2f8 <sys_timeout_abs+0xd8>)
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d103      	bne.n	801c276 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c26e:	4a22      	ldr	r2, [pc, #136]	@ (801c2f8 <sys_timeout_abs+0xd8>)
 801c270:	693b      	ldr	r3, [r7, #16]
 801c272:	6013      	str	r3, [r2, #0]
    return;
 801c274:	e037      	b.n	801c2e6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c276:	693b      	ldr	r3, [r7, #16]
 801c278:	685a      	ldr	r2, [r3, #4]
 801c27a:	4b1f      	ldr	r3, [pc, #124]	@ (801c2f8 <sys_timeout_abs+0xd8>)
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	685b      	ldr	r3, [r3, #4]
 801c280:	1ad3      	subs	r3, r2, r3
 801c282:	0fdb      	lsrs	r3, r3, #31
 801c284:	f003 0301 	and.w	r3, r3, #1
 801c288:	b2db      	uxtb	r3, r3
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d007      	beq.n	801c29e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c28e:	4b1a      	ldr	r3, [pc, #104]	@ (801c2f8 <sys_timeout_abs+0xd8>)
 801c290:	681a      	ldr	r2, [r3, #0]
 801c292:	693b      	ldr	r3, [r7, #16]
 801c294:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c296:	4a18      	ldr	r2, [pc, #96]	@ (801c2f8 <sys_timeout_abs+0xd8>)
 801c298:	693b      	ldr	r3, [r7, #16]
 801c29a:	6013      	str	r3, [r2, #0]
 801c29c:	e023      	b.n	801c2e6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c29e:	4b16      	ldr	r3, [pc, #88]	@ (801c2f8 <sys_timeout_abs+0xd8>)
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	617b      	str	r3, [r7, #20]
 801c2a4:	e01a      	b.n	801c2dc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c2a6:	697b      	ldr	r3, [r7, #20]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d00b      	beq.n	801c2c6 <sys_timeout_abs+0xa6>
 801c2ae:	693b      	ldr	r3, [r7, #16]
 801c2b0:	685a      	ldr	r2, [r3, #4]
 801c2b2:	697b      	ldr	r3, [r7, #20]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	685b      	ldr	r3, [r3, #4]
 801c2b8:	1ad3      	subs	r3, r2, r3
 801c2ba:	0fdb      	lsrs	r3, r3, #31
 801c2bc:	f003 0301 	and.w	r3, r3, #1
 801c2c0:	b2db      	uxtb	r3, r3
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d007      	beq.n	801c2d6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c2c6:	697b      	ldr	r3, [r7, #20]
 801c2c8:	681a      	ldr	r2, [r3, #0]
 801c2ca:	693b      	ldr	r3, [r7, #16]
 801c2cc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c2ce:	697b      	ldr	r3, [r7, #20]
 801c2d0:	693a      	ldr	r2, [r7, #16]
 801c2d2:	601a      	str	r2, [r3, #0]
        break;
 801c2d4:	e007      	b.n	801c2e6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c2d6:	697b      	ldr	r3, [r7, #20]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	617b      	str	r3, [r7, #20]
 801c2dc:	697b      	ldr	r3, [r7, #20]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d1e1      	bne.n	801c2a6 <sys_timeout_abs+0x86>
 801c2e2:	e000      	b.n	801c2e6 <sys_timeout_abs+0xc6>
    return;
 801c2e4:	bf00      	nop
      }
    }
  }
}
 801c2e6:	3718      	adds	r7, #24
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bd80      	pop	{r7, pc}
 801c2ec:	08025b68 	.word	0x08025b68
 801c2f0:	08025b9c 	.word	0x08025b9c
 801c2f4:	08025bdc 	.word	0x08025bdc
 801c2f8:	2002d4ac 	.word	0x2002d4ac

0801c2fc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	b086      	sub	sp, #24
 801c300:	af00      	add	r7, sp, #0
 801c302:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c308:	697b      	ldr	r3, [r7, #20]
 801c30a:	685b      	ldr	r3, [r3, #4]
 801c30c:	4798      	blx	r3

  now = sys_now();
 801c30e:	f7f0 fa03 	bl	800c718 <sys_now>
 801c312:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c314:	697b      	ldr	r3, [r7, #20]
 801c316:	681a      	ldr	r2, [r3, #0]
 801c318:	4b0f      	ldr	r3, [pc, #60]	@ (801c358 <lwip_cyclic_timer+0x5c>)
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	4413      	add	r3, r2
 801c31e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c320:	68fa      	ldr	r2, [r7, #12]
 801c322:	693b      	ldr	r3, [r7, #16]
 801c324:	1ad3      	subs	r3, r2, r3
 801c326:	0fdb      	lsrs	r3, r3, #31
 801c328:	f003 0301 	and.w	r3, r3, #1
 801c32c:	b2db      	uxtb	r3, r3
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d009      	beq.n	801c346 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c332:	697b      	ldr	r3, [r7, #20]
 801c334:	681a      	ldr	r2, [r3, #0]
 801c336:	693b      	ldr	r3, [r7, #16]
 801c338:	4413      	add	r3, r2
 801c33a:	687a      	ldr	r2, [r7, #4]
 801c33c:	4907      	ldr	r1, [pc, #28]	@ (801c35c <lwip_cyclic_timer+0x60>)
 801c33e:	4618      	mov	r0, r3
 801c340:	f7ff ff6e 	bl	801c220 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c344:	e004      	b.n	801c350 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c346:	687a      	ldr	r2, [r7, #4]
 801c348:	4904      	ldr	r1, [pc, #16]	@ (801c35c <lwip_cyclic_timer+0x60>)
 801c34a:	68f8      	ldr	r0, [r7, #12]
 801c34c:	f7ff ff68 	bl	801c220 <sys_timeout_abs>
}
 801c350:	bf00      	nop
 801c352:	3718      	adds	r7, #24
 801c354:	46bd      	mov	sp, r7
 801c356:	bd80      	pop	{r7, pc}
 801c358:	2002d4b0 	.word	0x2002d4b0
 801c35c:	0801c2fd 	.word	0x0801c2fd

0801c360 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b082      	sub	sp, #8
 801c364:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c366:	2301      	movs	r3, #1
 801c368:	607b      	str	r3, [r7, #4]
 801c36a:	e00e      	b.n	801c38a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c36c:	4a0b      	ldr	r2, [pc, #44]	@ (801c39c <sys_timeouts_init+0x3c>)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	00db      	lsls	r3, r3, #3
 801c378:	4a08      	ldr	r2, [pc, #32]	@ (801c39c <sys_timeouts_init+0x3c>)
 801c37a:	4413      	add	r3, r2
 801c37c:	461a      	mov	r2, r3
 801c37e:	4908      	ldr	r1, [pc, #32]	@ (801c3a0 <sys_timeouts_init+0x40>)
 801c380:	f000 f810 	bl	801c3a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	3301      	adds	r3, #1
 801c388:	607b      	str	r3, [r7, #4]
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	2b02      	cmp	r3, #2
 801c38e:	d9ed      	bls.n	801c36c <sys_timeouts_init+0xc>
  }
}
 801c390:	bf00      	nop
 801c392:	bf00      	nop
 801c394:	3708      	adds	r7, #8
 801c396:	46bd      	mov	sp, r7
 801c398:	bd80      	pop	{r7, pc}
 801c39a:	bf00      	nop
 801c39c:	080273f8 	.word	0x080273f8
 801c3a0:	0801c2fd 	.word	0x0801c2fd

0801c3a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b086      	sub	sp, #24
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	60f8      	str	r0, [r7, #12]
 801c3ac:	60b9      	str	r1, [r7, #8]
 801c3ae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c3b6:	d306      	bcc.n	801c3c6 <sys_timeout+0x22>
 801c3b8:	4b0a      	ldr	r3, [pc, #40]	@ (801c3e4 <sys_timeout+0x40>)
 801c3ba:	f240 1229 	movw	r2, #297	@ 0x129
 801c3be:	490a      	ldr	r1, [pc, #40]	@ (801c3e8 <sys_timeout+0x44>)
 801c3c0:	480a      	ldr	r0, [pc, #40]	@ (801c3ec <sys_timeout+0x48>)
 801c3c2:	f005 f8dd 	bl	8021580 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c3c6:	f7f0 f9a7 	bl	800c718 <sys_now>
 801c3ca:	4602      	mov	r2, r0
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	4413      	add	r3, r2
 801c3d0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c3d2:	687a      	ldr	r2, [r7, #4]
 801c3d4:	68b9      	ldr	r1, [r7, #8]
 801c3d6:	6978      	ldr	r0, [r7, #20]
 801c3d8:	f7ff ff22 	bl	801c220 <sys_timeout_abs>
#endif
}
 801c3dc:	bf00      	nop
 801c3de:	3718      	adds	r7, #24
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	bd80      	pop	{r7, pc}
 801c3e4:	08025b68 	.word	0x08025b68
 801c3e8:	08025c04 	.word	0x08025c04
 801c3ec:	08025bdc 	.word	0x08025bdc

0801c3f0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c3f0:	b580      	push	{r7, lr}
 801c3f2:	b084      	sub	sp, #16
 801c3f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c3f6:	f7f0 f98f 	bl	800c718 <sys_now>
 801c3fa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c3fc:	4b17      	ldr	r3, [pc, #92]	@ (801c45c <sys_check_timeouts+0x6c>)
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c402:	68bb      	ldr	r3, [r7, #8]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d022      	beq.n	801c44e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c408:	68bb      	ldr	r3, [r7, #8]
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	68fa      	ldr	r2, [r7, #12]
 801c40e:	1ad3      	subs	r3, r2, r3
 801c410:	0fdb      	lsrs	r3, r3, #31
 801c412:	f003 0301 	and.w	r3, r3, #1
 801c416:	b2db      	uxtb	r3, r3
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d11a      	bne.n	801c452 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c41c:	68bb      	ldr	r3, [r7, #8]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	4a0e      	ldr	r2, [pc, #56]	@ (801c45c <sys_check_timeouts+0x6c>)
 801c422:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	689b      	ldr	r3, [r3, #8]
 801c428:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c42a:	68bb      	ldr	r3, [r7, #8]
 801c42c:	68db      	ldr	r3, [r3, #12]
 801c42e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c430:	68bb      	ldr	r3, [r7, #8]
 801c432:	685b      	ldr	r3, [r3, #4]
 801c434:	4a0a      	ldr	r2, [pc, #40]	@ (801c460 <sys_check_timeouts+0x70>)
 801c436:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c438:	68b9      	ldr	r1, [r7, #8]
 801c43a:	200a      	movs	r0, #10
 801c43c:	f7f8 f874 	bl	8014528 <memp_free>
    if (handler != NULL) {
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d0da      	beq.n	801c3fc <sys_check_timeouts+0xc>
      handler(arg);
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	6838      	ldr	r0, [r7, #0]
 801c44a:	4798      	blx	r3
  do {
 801c44c:	e7d6      	b.n	801c3fc <sys_check_timeouts+0xc>
      return;
 801c44e:	bf00      	nop
 801c450:	e000      	b.n	801c454 <sys_check_timeouts+0x64>
      return;
 801c452:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c454:	3710      	adds	r7, #16
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}
 801c45a:	bf00      	nop
 801c45c:	2002d4ac 	.word	0x2002d4ac
 801c460:	2002d4b0 	.word	0x2002d4b0

0801c464 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c464:	b580      	push	{r7, lr}
 801c466:	b082      	sub	sp, #8
 801c468:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c46a:	4b16      	ldr	r3, [pc, #88]	@ (801c4c4 <sys_timeouts_sleeptime+0x60>)
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d102      	bne.n	801c478 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c476:	e020      	b.n	801c4ba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c478:	f7f0 f94e 	bl	800c718 <sys_now>
 801c47c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c47e:	4b11      	ldr	r3, [pc, #68]	@ (801c4c4 <sys_timeouts_sleeptime+0x60>)
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	685a      	ldr	r2, [r3, #4]
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	1ad3      	subs	r3, r2, r3
 801c488:	0fdb      	lsrs	r3, r3, #31
 801c48a:	f003 0301 	and.w	r3, r3, #1
 801c48e:	b2db      	uxtb	r3, r3
 801c490:	2b00      	cmp	r3, #0
 801c492:	d001      	beq.n	801c498 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c494:	2300      	movs	r3, #0
 801c496:	e010      	b.n	801c4ba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c498:	4b0a      	ldr	r3, [pc, #40]	@ (801c4c4 <sys_timeouts_sleeptime+0x60>)
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	685a      	ldr	r2, [r3, #4]
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	1ad3      	subs	r3, r2, r3
 801c4a2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c4a4:	683b      	ldr	r3, [r7, #0]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	da06      	bge.n	801c4b8 <sys_timeouts_sleeptime+0x54>
 801c4aa:	4b07      	ldr	r3, [pc, #28]	@ (801c4c8 <sys_timeouts_sleeptime+0x64>)
 801c4ac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801c4b0:	4906      	ldr	r1, [pc, #24]	@ (801c4cc <sys_timeouts_sleeptime+0x68>)
 801c4b2:	4807      	ldr	r0, [pc, #28]	@ (801c4d0 <sys_timeouts_sleeptime+0x6c>)
 801c4b4:	f005 f864 	bl	8021580 <iprintf>
    return ret;
 801c4b8:	683b      	ldr	r3, [r7, #0]
  }
}
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	3708      	adds	r7, #8
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	bd80      	pop	{r7, pc}
 801c4c2:	bf00      	nop
 801c4c4:	2002d4ac 	.word	0x2002d4ac
 801c4c8:	08025b68 	.word	0x08025b68
 801c4cc:	08025c3c 	.word	0x08025c3c
 801c4d0:	08025bdc 	.word	0x08025bdc

0801c4d4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c4d4:	b580      	push	{r7, lr}
 801c4d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c4d8:	f004 ff52 	bl	8021380 <rand>
 801c4dc:	4603      	mov	r3, r0
 801c4de:	b29b      	uxth	r3, r3
 801c4e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c4e4:	b29b      	uxth	r3, r3
 801c4e6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801c4ea:	b29a      	uxth	r2, r3
 801c4ec:	4b01      	ldr	r3, [pc, #4]	@ (801c4f4 <udp_init+0x20>)
 801c4ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c4f0:	bf00      	nop
 801c4f2:	bd80      	pop	{r7, pc}
 801c4f4:	20000070 	.word	0x20000070

0801c4f8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c4f8:	b480      	push	{r7}
 801c4fa:	b083      	sub	sp, #12
 801c4fc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c4fe:	2300      	movs	r3, #0
 801c500:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c502:	4b17      	ldr	r3, [pc, #92]	@ (801c560 <udp_new_port+0x68>)
 801c504:	881b      	ldrh	r3, [r3, #0]
 801c506:	1c5a      	adds	r2, r3, #1
 801c508:	b291      	uxth	r1, r2
 801c50a:	4a15      	ldr	r2, [pc, #84]	@ (801c560 <udp_new_port+0x68>)
 801c50c:	8011      	strh	r1, [r2, #0]
 801c50e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c512:	4293      	cmp	r3, r2
 801c514:	d103      	bne.n	801c51e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c516:	4b12      	ldr	r3, [pc, #72]	@ (801c560 <udp_new_port+0x68>)
 801c518:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801c51c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c51e:	4b11      	ldr	r3, [pc, #68]	@ (801c564 <udp_new_port+0x6c>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	603b      	str	r3, [r7, #0]
 801c524:	e011      	b.n	801c54a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c526:	683b      	ldr	r3, [r7, #0]
 801c528:	8a5a      	ldrh	r2, [r3, #18]
 801c52a:	4b0d      	ldr	r3, [pc, #52]	@ (801c560 <udp_new_port+0x68>)
 801c52c:	881b      	ldrh	r3, [r3, #0]
 801c52e:	429a      	cmp	r2, r3
 801c530:	d108      	bne.n	801c544 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c532:	88fb      	ldrh	r3, [r7, #6]
 801c534:	3301      	adds	r3, #1
 801c536:	80fb      	strh	r3, [r7, #6]
 801c538:	88fb      	ldrh	r3, [r7, #6]
 801c53a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c53e:	d3e0      	bcc.n	801c502 <udp_new_port+0xa>
        return 0;
 801c540:	2300      	movs	r3, #0
 801c542:	e007      	b.n	801c554 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c544:	683b      	ldr	r3, [r7, #0]
 801c546:	68db      	ldr	r3, [r3, #12]
 801c548:	603b      	str	r3, [r7, #0]
 801c54a:	683b      	ldr	r3, [r7, #0]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d1ea      	bne.n	801c526 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c550:	4b03      	ldr	r3, [pc, #12]	@ (801c560 <udp_new_port+0x68>)
 801c552:	881b      	ldrh	r3, [r3, #0]
}
 801c554:	4618      	mov	r0, r3
 801c556:	370c      	adds	r7, #12
 801c558:	46bd      	mov	sp, r7
 801c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55e:	4770      	bx	lr
 801c560:	20000070 	.word	0x20000070
 801c564:	2002d4b8 	.word	0x2002d4b8

0801c568 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c568:	b580      	push	{r7, lr}
 801c56a:	b084      	sub	sp, #16
 801c56c:	af00      	add	r7, sp, #0
 801c56e:	60f8      	str	r0, [r7, #12]
 801c570:	60b9      	str	r1, [r7, #8]
 801c572:	4613      	mov	r3, r2
 801c574:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d105      	bne.n	801c588 <udp_input_local_match+0x20>
 801c57c:	4b27      	ldr	r3, [pc, #156]	@ (801c61c <udp_input_local_match+0xb4>)
 801c57e:	2287      	movs	r2, #135	@ 0x87
 801c580:	4927      	ldr	r1, [pc, #156]	@ (801c620 <udp_input_local_match+0xb8>)
 801c582:	4828      	ldr	r0, [pc, #160]	@ (801c624 <udp_input_local_match+0xbc>)
 801c584:	f004 fffc 	bl	8021580 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d105      	bne.n	801c59a <udp_input_local_match+0x32>
 801c58e:	4b23      	ldr	r3, [pc, #140]	@ (801c61c <udp_input_local_match+0xb4>)
 801c590:	2288      	movs	r2, #136	@ 0x88
 801c592:	4925      	ldr	r1, [pc, #148]	@ (801c628 <udp_input_local_match+0xc0>)
 801c594:	4823      	ldr	r0, [pc, #140]	@ (801c624 <udp_input_local_match+0xbc>)
 801c596:	f004 fff3 	bl	8021580 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	7a1b      	ldrb	r3, [r3, #8]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d00b      	beq.n	801c5ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	7a1a      	ldrb	r2, [r3, #8]
 801c5a6:	4b21      	ldr	r3, [pc, #132]	@ (801c62c <udp_input_local_match+0xc4>)
 801c5a8:	685b      	ldr	r3, [r3, #4]
 801c5aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c5ae:	3301      	adds	r3, #1
 801c5b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c5b2:	429a      	cmp	r2, r3
 801c5b4:	d001      	beq.n	801c5ba <udp_input_local_match+0x52>
    return 0;
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	e02b      	b.n	801c612 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c5ba:	79fb      	ldrb	r3, [r7, #7]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d018      	beq.n	801c5f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d013      	beq.n	801c5ee <udp_input_local_match+0x86>
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d00f      	beq.n	801c5ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c5ce:	4b17      	ldr	r3, [pc, #92]	@ (801c62c <udp_input_local_match+0xc4>)
 801c5d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c5d6:	d00a      	beq.n	801c5ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	681a      	ldr	r2, [r3, #0]
 801c5dc:	4b13      	ldr	r3, [pc, #76]	@ (801c62c <udp_input_local_match+0xc4>)
 801c5de:	695b      	ldr	r3, [r3, #20]
 801c5e0:	405a      	eors	r2, r3
 801c5e2:	68bb      	ldr	r3, [r7, #8]
 801c5e4:	3308      	adds	r3, #8
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d110      	bne.n	801c610 <udp_input_local_match+0xa8>
          return 1;
 801c5ee:	2301      	movs	r3, #1
 801c5f0:	e00f      	b.n	801c612 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d009      	beq.n	801c60c <udp_input_local_match+0xa4>
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d005      	beq.n	801c60c <udp_input_local_match+0xa4>
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	681a      	ldr	r2, [r3, #0]
 801c604:	4b09      	ldr	r3, [pc, #36]	@ (801c62c <udp_input_local_match+0xc4>)
 801c606:	695b      	ldr	r3, [r3, #20]
 801c608:	429a      	cmp	r2, r3
 801c60a:	d101      	bne.n	801c610 <udp_input_local_match+0xa8>
        return 1;
 801c60c:	2301      	movs	r3, #1
 801c60e:	e000      	b.n	801c612 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c610:	2300      	movs	r3, #0
}
 801c612:	4618      	mov	r0, r3
 801c614:	3710      	adds	r7, #16
 801c616:	46bd      	mov	sp, r7
 801c618:	bd80      	pop	{r7, pc}
 801c61a:	bf00      	nop
 801c61c:	08025c50 	.word	0x08025c50
 801c620:	08025c80 	.word	0x08025c80
 801c624:	08025ca4 	.word	0x08025ca4
 801c628:	08025ccc 	.word	0x08025ccc
 801c62c:	200270e8 	.word	0x200270e8

0801c630 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c630:	b590      	push	{r4, r7, lr}
 801c632:	b08d      	sub	sp, #52	@ 0x34
 801c634:	af02      	add	r7, sp, #8
 801c636:	6078      	str	r0, [r7, #4]
 801c638:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c63a:	2300      	movs	r3, #0
 801c63c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d105      	bne.n	801c650 <udp_input+0x20>
 801c644:	4b9c      	ldr	r3, [pc, #624]	@ (801c8b8 <udp_input+0x288>)
 801c646:	22cf      	movs	r2, #207	@ 0xcf
 801c648:	499c      	ldr	r1, [pc, #624]	@ (801c8bc <udp_input+0x28c>)
 801c64a:	489d      	ldr	r0, [pc, #628]	@ (801c8c0 <udp_input+0x290>)
 801c64c:	f004 ff98 	bl	8021580 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c650:	683b      	ldr	r3, [r7, #0]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d105      	bne.n	801c662 <udp_input+0x32>
 801c656:	4b98      	ldr	r3, [pc, #608]	@ (801c8b8 <udp_input+0x288>)
 801c658:	22d0      	movs	r2, #208	@ 0xd0
 801c65a:	499a      	ldr	r1, [pc, #616]	@ (801c8c4 <udp_input+0x294>)
 801c65c:	4898      	ldr	r0, [pc, #608]	@ (801c8c0 <udp_input+0x290>)
 801c65e:	f004 ff8f 	bl	8021580 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801c662:	4b99      	ldr	r3, [pc, #612]	@ (801c8c8 <udp_input+0x298>)
 801c664:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801c668:	3301      	adds	r3, #1
 801c66a:	b29a      	uxth	r2, r3
 801c66c:	4b96      	ldr	r3, [pc, #600]	@ (801c8c8 <udp_input+0x298>)
 801c66e:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	895b      	ldrh	r3, [r3, #10]
 801c676:	2b07      	cmp	r3, #7
 801c678:	d819      	bhi.n	801c6ae <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	891b      	ldrh	r3, [r3, #8]
 801c67e:	4619      	mov	r1, r3
 801c680:	4892      	ldr	r0, [pc, #584]	@ (801c8cc <udp_input+0x29c>)
 801c682:	f004 ff7d 	bl	8021580 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801c686:	4b90      	ldr	r3, [pc, #576]	@ (801c8c8 <udp_input+0x298>)
 801c688:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801c68c:	3301      	adds	r3, #1
 801c68e:	b29a      	uxth	r2, r3
 801c690:	4b8d      	ldr	r3, [pc, #564]	@ (801c8c8 <udp_input+0x298>)
 801c692:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801c696:	4b8c      	ldr	r3, [pc, #560]	@ (801c8c8 <udp_input+0x298>)
 801c698:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c69c:	3301      	adds	r3, #1
 801c69e:	b29a      	uxth	r2, r3
 801c6a0:	4b89      	ldr	r3, [pc, #548]	@ (801c8c8 <udp_input+0x298>)
 801c6a2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c6a6:	6878      	ldr	r0, [r7, #4]
 801c6a8:	f7f8 ff24 	bl	80154f4 <pbuf_free>
    goto end;
 801c6ac:	e1ae      	b.n	801ca0c <udp_input+0x3dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	685b      	ldr	r3, [r3, #4]
 801c6b2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c6b4:	4b86      	ldr	r3, [pc, #536]	@ (801c8d0 <udp_input+0x2a0>)
 801c6b6:	695b      	ldr	r3, [r3, #20]
 801c6b8:	4a85      	ldr	r2, [pc, #532]	@ (801c8d0 <udp_input+0x2a0>)
 801c6ba:	6812      	ldr	r2, [r2, #0]
 801c6bc:	4611      	mov	r1, r2
 801c6be:	4618      	mov	r0, r3
 801c6c0:	f002 fbec 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801c6c4:	4603      	mov	r3, r0
 801c6c6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	891b      	ldrh	r3, [r3, #8]
 801c6cc:	4619      	mov	r1, r3
 801c6ce:	4881      	ldr	r0, [pc, #516]	@ (801c8d4 <udp_input+0x2a4>)
 801c6d0:	f004 ff56 	bl	8021580 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c6d4:	697b      	ldr	r3, [r7, #20]
 801c6d6:	881b      	ldrh	r3, [r3, #0]
 801c6d8:	b29b      	uxth	r3, r3
 801c6da:	4618      	mov	r0, r3
 801c6dc:	f7f7 f8dc 	bl	8013898 <lwip_htons>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c6e4:	697b      	ldr	r3, [r7, #20]
 801c6e6:	885b      	ldrh	r3, [r3, #2]
 801c6e8:	b29b      	uxth	r3, r3
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	f7f7 f8d4 	bl	8013898 <lwip_htons>
 801c6f0:	4603      	mov	r3, r0
 801c6f2:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801c6f4:	6978      	ldr	r0, [r7, #20]
 801c6f6:	f000 fe6d 	bl	801d3d4 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801c6fa:	4877      	ldr	r0, [pc, #476]	@ (801c8d8 <udp_input+0x2a8>)
 801c6fc:	f004 ff40 	bl	8021580 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801c700:	4b73      	ldr	r3, [pc, #460]	@ (801c8d0 <udp_input+0x2a0>)
 801c702:	695b      	ldr	r3, [r3, #20]
 801c704:	b2db      	uxtb	r3, r3
 801c706:	4619      	mov	r1, r3
 801c708:	4b71      	ldr	r3, [pc, #452]	@ (801c8d0 <udp_input+0x2a0>)
 801c70a:	695b      	ldr	r3, [r3, #20]
 801c70c:	0a1b      	lsrs	r3, r3, #8
 801c70e:	b2db      	uxtb	r3, r3
 801c710:	461a      	mov	r2, r3
 801c712:	4b6f      	ldr	r3, [pc, #444]	@ (801c8d0 <udp_input+0x2a0>)
 801c714:	695b      	ldr	r3, [r3, #20]
 801c716:	0c1b      	lsrs	r3, r3, #16
 801c718:	b2db      	uxtb	r3, r3
 801c71a:	4618      	mov	r0, r3
 801c71c:	4b6c      	ldr	r3, [pc, #432]	@ (801c8d0 <udp_input+0x2a0>)
 801c71e:	695b      	ldr	r3, [r3, #20]
 801c720:	0e1b      	lsrs	r3, r3, #24
 801c722:	b2db      	uxtb	r3, r3
 801c724:	9300      	str	r3, [sp, #0]
 801c726:	4603      	mov	r3, r0
 801c728:	486c      	ldr	r0, [pc, #432]	@ (801c8dc <udp_input+0x2ac>)
 801c72a:	f004 ff29 	bl	8021580 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801c72e:	697b      	ldr	r3, [r7, #20]
 801c730:	885b      	ldrh	r3, [r3, #2]
 801c732:	b29b      	uxth	r3, r3
 801c734:	4618      	mov	r0, r3
 801c736:	f7f7 f8af 	bl	8013898 <lwip_htons>
 801c73a:	4603      	mov	r3, r0
 801c73c:	4619      	mov	r1, r3
 801c73e:	4868      	ldr	r0, [pc, #416]	@ (801c8e0 <udp_input+0x2b0>)
 801c740:	f004 ff1e 	bl	8021580 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801c744:	4b62      	ldr	r3, [pc, #392]	@ (801c8d0 <udp_input+0x2a0>)
 801c746:	691b      	ldr	r3, [r3, #16]
 801c748:	b2db      	uxtb	r3, r3
 801c74a:	4619      	mov	r1, r3
 801c74c:	4b60      	ldr	r3, [pc, #384]	@ (801c8d0 <udp_input+0x2a0>)
 801c74e:	691b      	ldr	r3, [r3, #16]
 801c750:	0a1b      	lsrs	r3, r3, #8
 801c752:	b2db      	uxtb	r3, r3
 801c754:	461a      	mov	r2, r3
 801c756:	4b5e      	ldr	r3, [pc, #376]	@ (801c8d0 <udp_input+0x2a0>)
 801c758:	691b      	ldr	r3, [r3, #16]
 801c75a:	0c1b      	lsrs	r3, r3, #16
 801c75c:	b2db      	uxtb	r3, r3
 801c75e:	4618      	mov	r0, r3
 801c760:	4b5b      	ldr	r3, [pc, #364]	@ (801c8d0 <udp_input+0x2a0>)
 801c762:	691b      	ldr	r3, [r3, #16]
 801c764:	0e1b      	lsrs	r3, r3, #24
 801c766:	b2db      	uxtb	r3, r3
 801c768:	9300      	str	r3, [sp, #0]
 801c76a:	4603      	mov	r3, r0
 801c76c:	485b      	ldr	r0, [pc, #364]	@ (801c8dc <udp_input+0x2ac>)
 801c76e:	f004 ff07 	bl	8021580 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801c772:	697b      	ldr	r3, [r7, #20]
 801c774:	881b      	ldrh	r3, [r3, #0]
 801c776:	b29b      	uxth	r3, r3
 801c778:	4618      	mov	r0, r3
 801c77a:	f7f7 f88d 	bl	8013898 <lwip_htons>
 801c77e:	4603      	mov	r3, r0
 801c780:	4619      	mov	r1, r3
 801c782:	4858      	ldr	r0, [pc, #352]	@ (801c8e4 <udp_input+0x2b4>)
 801c784:	f004 fefc 	bl	8021580 <iprintf>

  pcb = NULL;
 801c788:	2300      	movs	r3, #0
 801c78a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801c78c:	2300      	movs	r3, #0
 801c78e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c790:	2300      	movs	r3, #0
 801c792:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c794:	4b54      	ldr	r3, [pc, #336]	@ (801c8e8 <udp_input+0x2b8>)
 801c796:	681b      	ldr	r3, [r3, #0]
 801c798:	627b      	str	r3, [r7, #36]	@ 0x24
 801c79a:	e0b7      	b.n	801c90c <udp_input+0x2dc>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801c79c:	4853      	ldr	r0, [pc, #332]	@ (801c8ec <udp_input+0x2bc>)
 801c79e:	f004 feef 	bl	8021580 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	b2db      	uxtb	r3, r3
 801c7a8:	4619      	mov	r1, r3
 801c7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	0a1b      	lsrs	r3, r3, #8
 801c7b0:	b2db      	uxtb	r3, r3
 801c7b2:	461a      	mov	r2, r3
 801c7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	0c1b      	lsrs	r3, r3, #16
 801c7ba:	b2db      	uxtb	r3, r3
 801c7bc:	4618      	mov	r0, r3
 801c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	0e1b      	lsrs	r3, r3, #24
 801c7c4:	b2db      	uxtb	r3, r3
 801c7c6:	9300      	str	r3, [sp, #0]
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	4844      	ldr	r0, [pc, #272]	@ (801c8dc <udp_input+0x2ac>)
 801c7cc:	f004 fed8 	bl	8021580 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7d2:	8a5b      	ldrh	r3, [r3, #18]
 801c7d4:	4619      	mov	r1, r3
 801c7d6:	4842      	ldr	r0, [pc, #264]	@ (801c8e0 <udp_input+0x2b0>)
 801c7d8:	f004 fed2 	bl	8021580 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7de:	685b      	ldr	r3, [r3, #4]
 801c7e0:	b2db      	uxtb	r3, r3
 801c7e2:	4619      	mov	r1, r3
 801c7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7e6:	685b      	ldr	r3, [r3, #4]
 801c7e8:	0a1b      	lsrs	r3, r3, #8
 801c7ea:	b2db      	uxtb	r3, r3
 801c7ec:	461a      	mov	r2, r3
 801c7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7f0:	685b      	ldr	r3, [r3, #4]
 801c7f2:	0c1b      	lsrs	r3, r3, #16
 801c7f4:	b2db      	uxtb	r3, r3
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7fa:	685b      	ldr	r3, [r3, #4]
 801c7fc:	0e1b      	lsrs	r3, r3, #24
 801c7fe:	b2db      	uxtb	r3, r3
 801c800:	9300      	str	r3, [sp, #0]
 801c802:	4603      	mov	r3, r0
 801c804:	4835      	ldr	r0, [pc, #212]	@ (801c8dc <udp_input+0x2ac>)
 801c806:	f004 febb 	bl	8021580 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c80c:	8a9b      	ldrh	r3, [r3, #20]
 801c80e:	4619      	mov	r1, r3
 801c810:	4834      	ldr	r0, [pc, #208]	@ (801c8e4 <udp_input+0x2b4>)
 801c812:	f004 feb5 	bl	8021580 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c818:	8a5b      	ldrh	r3, [r3, #18]
 801c81a:	89fa      	ldrh	r2, [r7, #14]
 801c81c:	429a      	cmp	r2, r3
 801c81e:	d170      	bne.n	801c902 <udp_input+0x2d2>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c820:	7cfb      	ldrb	r3, [r7, #19]
 801c822:	461a      	mov	r2, r3
 801c824:	6839      	ldr	r1, [r7, #0]
 801c826:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c828:	f7ff fe9e 	bl	801c568 <udp_input_local_match>
 801c82c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d067      	beq.n	801c902 <udp_input+0x2d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c834:	7c1b      	ldrb	r3, [r3, #16]
 801c836:	f003 0304 	and.w	r3, r3, #4
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d11d      	bne.n	801c87a <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 801c83e:	69fb      	ldr	r3, [r7, #28]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d102      	bne.n	801c84a <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c846:	61fb      	str	r3, [r7, #28]
 801c848:	e017      	b.n	801c87a <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c84a:	7cfb      	ldrb	r3, [r7, #19]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d014      	beq.n	801c87a <udp_input+0x24a>
 801c850:	4b1f      	ldr	r3, [pc, #124]	@ (801c8d0 <udp_input+0x2a0>)
 801c852:	695b      	ldr	r3, [r3, #20]
 801c854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c858:	d10f      	bne.n	801c87a <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c85a:	69fb      	ldr	r3, [r7, #28]
 801c85c:	681a      	ldr	r2, [r3, #0]
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	3304      	adds	r3, #4
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	429a      	cmp	r2, r3
 801c866:	d008      	beq.n	801c87a <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c86a:	681a      	ldr	r2, [r3, #0]
 801c86c:	683b      	ldr	r3, [r7, #0]
 801c86e:	3304      	adds	r3, #4
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	429a      	cmp	r2, r3
 801c874:	d101      	bne.n	801c87a <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 801c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c878:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c87c:	8a9b      	ldrh	r3, [r3, #20]
 801c87e:	8a3a      	ldrh	r2, [r7, #16]
 801c880:	429a      	cmp	r2, r3
 801c882:	d13e      	bne.n	801c902 <udp_input+0x2d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c886:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d005      	beq.n	801c898 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c88e:	685a      	ldr	r2, [r3, #4]
 801c890:	4b0f      	ldr	r3, [pc, #60]	@ (801c8d0 <udp_input+0x2a0>)
 801c892:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c894:	429a      	cmp	r2, r3
 801c896:	d134      	bne.n	801c902 <udp_input+0x2d2>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c898:	6a3b      	ldr	r3, [r7, #32]
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d028      	beq.n	801c8f0 <udp_input+0x2c0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8a0:	68da      	ldr	r2, [r3, #12]
 801c8a2:	6a3b      	ldr	r3, [r7, #32]
 801c8a4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c8a6:	4b10      	ldr	r3, [pc, #64]	@ (801c8e8 <udp_input+0x2b8>)
 801c8a8:	681a      	ldr	r2, [r3, #0]
 801c8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8ac:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c8ae:	4a0e      	ldr	r2, [pc, #56]	@ (801c8e8 <udp_input+0x2b8>)
 801c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8b2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c8b4:	e02e      	b.n	801c914 <udp_input+0x2e4>
 801c8b6:	bf00      	nop
 801c8b8:	08025c50 	.word	0x08025c50
 801c8bc:	08025cf4 	.word	0x08025cf4
 801c8c0:	08025ca4 	.word	0x08025ca4
 801c8c4:	08025d0c 	.word	0x08025d0c
 801c8c8:	2002d358 	.word	0x2002d358
 801c8cc:	08025d28 	.word	0x08025d28
 801c8d0:	200270e8 	.word	0x200270e8
 801c8d4:	08025d60 	.word	0x08025d60
 801c8d8:	08025d8c 	.word	0x08025d8c
 801c8dc:	08025d94 	.word	0x08025d94
 801c8e0:	08025da4 	.word	0x08025da4
 801c8e4:	08025db4 	.word	0x08025db4
 801c8e8:	2002d4b8 	.word	0x2002d4b8
 801c8ec:	08025dbc 	.word	0x08025dbc
          UDP_STATS_INC(udp.cachehit);
 801c8f0:	4b48      	ldr	r3, [pc, #288]	@ (801ca14 <udp_input+0x3e4>)
 801c8f2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801c8f6:	3301      	adds	r3, #1
 801c8f8:	b29a      	uxth	r2, r3
 801c8fa:	4b46      	ldr	r3, [pc, #280]	@ (801ca14 <udp_input+0x3e4>)
 801c8fc:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801c900:	e008      	b.n	801c914 <udp_input+0x2e4>
      }
    }

    prev = pcb;
 801c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c904:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c908:	68db      	ldr	r3, [r3, #12]
 801c90a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c90e:	2b00      	cmp	r3, #0
 801c910:	f47f af44 	bne.w	801c79c <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c916:	2b00      	cmp	r3, #0
 801c918:	d101      	bne.n	801c91e <udp_input+0x2ee>
    pcb = uncon_pcb;
 801c91a:	69fb      	ldr	r3, [r7, #28]
 801c91c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c920:	2b00      	cmp	r3, #0
 801c922:	d002      	beq.n	801c92a <udp_input+0x2fa>
    for_us = 1;
 801c924:	2301      	movs	r3, #1
 801c926:	76fb      	strb	r3, [r7, #27]
 801c928:	e00a      	b.n	801c940 <udp_input+0x310>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c92a:	683b      	ldr	r3, [r7, #0]
 801c92c:	3304      	adds	r3, #4
 801c92e:	681a      	ldr	r2, [r3, #0]
 801c930:	4b39      	ldr	r3, [pc, #228]	@ (801ca18 <udp_input+0x3e8>)
 801c932:	695b      	ldr	r3, [r3, #20]
 801c934:	429a      	cmp	r2, r3
 801c936:	bf0c      	ite	eq
 801c938:	2301      	moveq	r3, #1
 801c93a:	2300      	movne	r3, #0
 801c93c:	b2db      	uxtb	r3, r3
 801c93e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c940:	7efb      	ldrb	r3, [r7, #27]
 801c942:	2b00      	cmp	r3, #0
 801c944:	d05f      	beq.n	801ca06 <udp_input+0x3d6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801c946:	4835      	ldr	r0, [pc, #212]	@ (801ca1c <udp_input+0x3ec>)
 801c948:	f004 fe8a 	bl	8021660 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c94c:	2108      	movs	r1, #8
 801c94e:	6878      	ldr	r0, [r7, #4]
 801c950:	f7f8 fd42 	bl	80153d8 <pbuf_remove_header>
 801c954:	4603      	mov	r3, r0
 801c956:	2b00      	cmp	r3, #0
 801c958:	d012      	beq.n	801c980 <udp_input+0x350>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c95a:	4b31      	ldr	r3, [pc, #196]	@ (801ca20 <udp_input+0x3f0>)
 801c95c:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801c960:	4930      	ldr	r1, [pc, #192]	@ (801ca24 <udp_input+0x3f4>)
 801c962:	4831      	ldr	r0, [pc, #196]	@ (801ca28 <udp_input+0x3f8>)
 801c964:	f004 fe0c 	bl	8021580 <iprintf>
      UDP_STATS_INC(udp.drop);
 801c968:	4b2a      	ldr	r3, [pc, #168]	@ (801ca14 <udp_input+0x3e4>)
 801c96a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c96e:	3301      	adds	r3, #1
 801c970:	b29a      	uxth	r2, r3
 801c972:	4b28      	ldr	r3, [pc, #160]	@ (801ca14 <udp_input+0x3e4>)
 801c974:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c978:	6878      	ldr	r0, [r7, #4]
 801c97a:	f7f8 fdbb 	bl	80154f4 <pbuf_free>
      goto end;
 801c97e:	e045      	b.n	801ca0c <udp_input+0x3dc>
    }

    if (pcb != NULL) {
 801c980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c982:	2b00      	cmp	r3, #0
 801c984:	d012      	beq.n	801c9ac <udp_input+0x37c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c988:	699b      	ldr	r3, [r3, #24]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d00a      	beq.n	801c9a4 <udp_input+0x374>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c990:	699c      	ldr	r4, [r3, #24]
 801c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c994:	69d8      	ldr	r0, [r3, #28]
 801c996:	8a3b      	ldrh	r3, [r7, #16]
 801c998:	9300      	str	r3, [sp, #0]
 801c99a:	4b24      	ldr	r3, [pc, #144]	@ (801ca2c <udp_input+0x3fc>)
 801c99c:	687a      	ldr	r2, [r7, #4]
 801c99e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c9a0:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c9a2:	e034      	b.n	801ca0e <udp_input+0x3de>
        pbuf_free(p);
 801c9a4:	6878      	ldr	r0, [r7, #4]
 801c9a6:	f7f8 fda5 	bl	80154f4 <pbuf_free>
        goto end;
 801c9aa:	e02f      	b.n	801ca0c <udp_input+0x3dc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801c9ac:	4820      	ldr	r0, [pc, #128]	@ (801ca30 <udp_input+0x400>)
 801c9ae:	f004 fe57 	bl	8021660 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c9b2:	7cfb      	ldrb	r3, [r7, #19]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d112      	bne.n	801c9de <udp_input+0x3ae>
 801c9b8:	4b17      	ldr	r3, [pc, #92]	@ (801ca18 <udp_input+0x3e8>)
 801c9ba:	695b      	ldr	r3, [r3, #20]
 801c9bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c9c0:	2be0      	cmp	r3, #224	@ 0xe0
 801c9c2:	d00c      	beq.n	801c9de <udp_input+0x3ae>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c9c4:	4b14      	ldr	r3, [pc, #80]	@ (801ca18 <udp_input+0x3e8>)
 801c9c6:	899b      	ldrh	r3, [r3, #12]
 801c9c8:	3308      	adds	r3, #8
 801c9ca:	b29b      	uxth	r3, r3
 801c9cc:	b21b      	sxth	r3, r3
 801c9ce:	4619      	mov	r1, r3
 801c9d0:	6878      	ldr	r0, [r7, #4]
 801c9d2:	f7f8 fd7c 	bl	80154ce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c9d6:	2103      	movs	r1, #3
 801c9d8:	6878      	ldr	r0, [r7, #4]
 801c9da:	f001 fe83 	bl	801e6e4 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801c9de:	4b0d      	ldr	r3, [pc, #52]	@ (801ca14 <udp_input+0x3e4>)
 801c9e0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801c9e4:	3301      	adds	r3, #1
 801c9e6:	b29a      	uxth	r2, r3
 801c9e8:	4b0a      	ldr	r3, [pc, #40]	@ (801ca14 <udp_input+0x3e4>)
 801c9ea:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801c9ee:	4b09      	ldr	r3, [pc, #36]	@ (801ca14 <udp_input+0x3e4>)
 801c9f0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c9f4:	3301      	adds	r3, #1
 801c9f6:	b29a      	uxth	r2, r3
 801c9f8:	4b06      	ldr	r3, [pc, #24]	@ (801ca14 <udp_input+0x3e4>)
 801c9fa:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801c9fe:	6878      	ldr	r0, [r7, #4]
 801ca00:	f7f8 fd78 	bl	80154f4 <pbuf_free>
  return;
 801ca04:	e003      	b.n	801ca0e <udp_input+0x3de>
    pbuf_free(p);
 801ca06:	6878      	ldr	r0, [r7, #4]
 801ca08:	f7f8 fd74 	bl	80154f4 <pbuf_free>
  return;
 801ca0c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ca0e:	372c      	adds	r7, #44	@ 0x2c
 801ca10:	46bd      	mov	sp, r7
 801ca12:	bd90      	pop	{r4, r7, pc}
 801ca14:	2002d358 	.word	0x2002d358
 801ca18:	200270e8 	.word	0x200270e8
 801ca1c:	08025dc4 	.word	0x08025dc4
 801ca20:	08025c50 	.word	0x08025c50
 801ca24:	08025de4 	.word	0x08025de4
 801ca28:	08025ca4 	.word	0x08025ca4
 801ca2c:	200270f8 	.word	0x200270f8
 801ca30:	08025e00 	.word	0x08025e00

0801ca34 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	b082      	sub	sp, #8
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	6078      	str	r0, [r7, #4]
 801ca3c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d109      	bne.n	801ca58 <udp_send+0x24>
 801ca44:	4b11      	ldr	r3, [pc, #68]	@ (801ca8c <udp_send+0x58>)
 801ca46:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801ca4a:	4911      	ldr	r1, [pc, #68]	@ (801ca90 <udp_send+0x5c>)
 801ca4c:	4811      	ldr	r0, [pc, #68]	@ (801ca94 <udp_send+0x60>)
 801ca4e:	f004 fd97 	bl	8021580 <iprintf>
 801ca52:	f06f 030f 	mvn.w	r3, #15
 801ca56:	e015      	b.n	801ca84 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801ca58:	683b      	ldr	r3, [r7, #0]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d109      	bne.n	801ca72 <udp_send+0x3e>
 801ca5e:	4b0b      	ldr	r3, [pc, #44]	@ (801ca8c <udp_send+0x58>)
 801ca60:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801ca64:	490c      	ldr	r1, [pc, #48]	@ (801ca98 <udp_send+0x64>)
 801ca66:	480b      	ldr	r0, [pc, #44]	@ (801ca94 <udp_send+0x60>)
 801ca68:	f004 fd8a 	bl	8021580 <iprintf>
 801ca6c:	f06f 030f 	mvn.w	r3, #15
 801ca70:	e008      	b.n	801ca84 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	1d1a      	adds	r2, r3, #4
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	8a9b      	ldrh	r3, [r3, #20]
 801ca7a:	6839      	ldr	r1, [r7, #0]
 801ca7c:	6878      	ldr	r0, [r7, #4]
 801ca7e:	f000 f80d 	bl	801ca9c <udp_sendto>
 801ca82:	4603      	mov	r3, r0
}
 801ca84:	4618      	mov	r0, r3
 801ca86:	3708      	adds	r7, #8
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	bd80      	pop	{r7, pc}
 801ca8c:	08025c50 	.word	0x08025c50
 801ca90:	08025e18 	.word	0x08025e18
 801ca94:	08025ca4 	.word	0x08025ca4
 801ca98:	08025e30 	.word	0x08025e30

0801ca9c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b088      	sub	sp, #32
 801caa0:	af02      	add	r7, sp, #8
 801caa2:	60f8      	str	r0, [r7, #12]
 801caa4:	60b9      	str	r1, [r7, #8]
 801caa6:	607a      	str	r2, [r7, #4]
 801caa8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d109      	bne.n	801cac4 <udp_sendto+0x28>
 801cab0:	4b3f      	ldr	r3, [pc, #252]	@ (801cbb0 <udp_sendto+0x114>)
 801cab2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801cab6:	493f      	ldr	r1, [pc, #252]	@ (801cbb4 <udp_sendto+0x118>)
 801cab8:	483f      	ldr	r0, [pc, #252]	@ (801cbb8 <udp_sendto+0x11c>)
 801caba:	f004 fd61 	bl	8021580 <iprintf>
 801cabe:	f06f 030f 	mvn.w	r3, #15
 801cac2:	e070      	b.n	801cba6 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801cac4:	68bb      	ldr	r3, [r7, #8]
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d109      	bne.n	801cade <udp_sendto+0x42>
 801caca:	4b39      	ldr	r3, [pc, #228]	@ (801cbb0 <udp_sendto+0x114>)
 801cacc:	f240 2219 	movw	r2, #537	@ 0x219
 801cad0:	493a      	ldr	r1, [pc, #232]	@ (801cbbc <udp_sendto+0x120>)
 801cad2:	4839      	ldr	r0, [pc, #228]	@ (801cbb8 <udp_sendto+0x11c>)
 801cad4:	f004 fd54 	bl	8021580 <iprintf>
 801cad8:	f06f 030f 	mvn.w	r3, #15
 801cadc:	e063      	b.n	801cba6 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d109      	bne.n	801caf8 <udp_sendto+0x5c>
 801cae4:	4b32      	ldr	r3, [pc, #200]	@ (801cbb0 <udp_sendto+0x114>)
 801cae6:	f240 221a 	movw	r2, #538	@ 0x21a
 801caea:	4935      	ldr	r1, [pc, #212]	@ (801cbc0 <udp_sendto+0x124>)
 801caec:	4832      	ldr	r0, [pc, #200]	@ (801cbb8 <udp_sendto+0x11c>)
 801caee:	f004 fd47 	bl	8021580 <iprintf>
 801caf2:	f06f 030f 	mvn.w	r3, #15
 801caf6:	e056      	b.n	801cba6 <udp_sendto+0x10a>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801caf8:	4832      	ldr	r0, [pc, #200]	@ (801cbc4 <udp_sendto+0x128>)
 801cafa:	f004 fdb1 	bl	8021660 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	7a1b      	ldrb	r3, [r3, #8]
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d006      	beq.n	801cb14 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	7a1b      	ldrb	r3, [r3, #8]
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7f8 f918 	bl	8014d40 <netif_get_by_index>
 801cb10:	6178      	str	r0, [r7, #20]
 801cb12:	e003      	b.n	801cb1c <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801cb14:	6878      	ldr	r0, [r7, #4]
 801cb16:	f001 feb9 	bl	801e88c <ip4_route>
 801cb1a:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d137      	bne.n	801cb92 <udp_sendto+0xf6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801cb22:	4829      	ldr	r0, [pc, #164]	@ (801cbc8 <udp_sendto+0x12c>)
 801cb24:	f004 fd2c 	bl	8021580 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d003      	beq.n	801cb36 <udp_sendto+0x9a>
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	781b      	ldrb	r3, [r3, #0]
 801cb32:	4619      	mov	r1, r3
 801cb34:	e000      	b.n	801cb38 <udp_sendto+0x9c>
 801cb36:	2100      	movs	r1, #0
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d004      	beq.n	801cb48 <udp_sendto+0xac>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	3301      	adds	r3, #1
 801cb42:	781b      	ldrb	r3, [r3, #0]
 801cb44:	461a      	mov	r2, r3
 801cb46:	e000      	b.n	801cb4a <udp_sendto+0xae>
 801cb48:	2200      	movs	r2, #0
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d004      	beq.n	801cb5a <udp_sendto+0xbe>
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	3302      	adds	r3, #2
 801cb54:	781b      	ldrb	r3, [r3, #0]
 801cb56:	4618      	mov	r0, r3
 801cb58:	e000      	b.n	801cb5c <udp_sendto+0xc0>
 801cb5a:	2000      	movs	r0, #0
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d003      	beq.n	801cb6a <udp_sendto+0xce>
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	3303      	adds	r3, #3
 801cb66:	781b      	ldrb	r3, [r3, #0]
 801cb68:	e000      	b.n	801cb6c <udp_sendto+0xd0>
 801cb6a:	2300      	movs	r3, #0
 801cb6c:	9300      	str	r3, [sp, #0]
 801cb6e:	4603      	mov	r3, r0
 801cb70:	4816      	ldr	r0, [pc, #88]	@ (801cbcc <udp_sendto+0x130>)
 801cb72:	f004 fd05 	bl	8021580 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801cb76:	200a      	movs	r0, #10
 801cb78:	f004 fd14 	bl	80215a4 <putchar>
    UDP_STATS_INC(udp.rterr);
 801cb7c:	4b14      	ldr	r3, [pc, #80]	@ (801cbd0 <udp_sendto+0x134>)
 801cb7e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801cb82:	3301      	adds	r3, #1
 801cb84:	b29a      	uxth	r2, r3
 801cb86:	4b12      	ldr	r3, [pc, #72]	@ (801cbd0 <udp_sendto+0x134>)
 801cb88:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801cb8c:	f06f 0303 	mvn.w	r3, #3
 801cb90:	e009      	b.n	801cba6 <udp_sendto+0x10a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801cb92:	887a      	ldrh	r2, [r7, #2]
 801cb94:	697b      	ldr	r3, [r7, #20]
 801cb96:	9300      	str	r3, [sp, #0]
 801cb98:	4613      	mov	r3, r2
 801cb9a:	687a      	ldr	r2, [r7, #4]
 801cb9c:	68b9      	ldr	r1, [r7, #8]
 801cb9e:	68f8      	ldr	r0, [r7, #12]
 801cba0:	f000 f818 	bl	801cbd4 <udp_sendto_if>
 801cba4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801cba6:	4618      	mov	r0, r3
 801cba8:	3718      	adds	r7, #24
 801cbaa:	46bd      	mov	sp, r7
 801cbac:	bd80      	pop	{r7, pc}
 801cbae:	bf00      	nop
 801cbb0:	08025c50 	.word	0x08025c50
 801cbb4:	08025e48 	.word	0x08025e48
 801cbb8:	08025ca4 	.word	0x08025ca4
 801cbbc:	08025e60 	.word	0x08025e60
 801cbc0:	08025e7c 	.word	0x08025e7c
 801cbc4:	08025e98 	.word	0x08025e98
 801cbc8:	08025ea4 	.word	0x08025ea4
 801cbcc:	08025d94 	.word	0x08025d94
 801cbd0:	2002d358 	.word	0x2002d358

0801cbd4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801cbd4:	b580      	push	{r7, lr}
 801cbd6:	b088      	sub	sp, #32
 801cbd8:	af02      	add	r7, sp, #8
 801cbda:	60f8      	str	r0, [r7, #12]
 801cbdc:	60b9      	str	r1, [r7, #8]
 801cbde:	607a      	str	r2, [r7, #4]
 801cbe0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d109      	bne.n	801cbfc <udp_sendto_if+0x28>
 801cbe8:	4b2e      	ldr	r3, [pc, #184]	@ (801cca4 <udp_sendto_if+0xd0>)
 801cbea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cbee:	492e      	ldr	r1, [pc, #184]	@ (801cca8 <udp_sendto_if+0xd4>)
 801cbf0:	482e      	ldr	r0, [pc, #184]	@ (801ccac <udp_sendto_if+0xd8>)
 801cbf2:	f004 fcc5 	bl	8021580 <iprintf>
 801cbf6:	f06f 030f 	mvn.w	r3, #15
 801cbfa:	e04f      	b.n	801cc9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801cbfc:	68bb      	ldr	r3, [r7, #8]
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d109      	bne.n	801cc16 <udp_sendto_if+0x42>
 801cc02:	4b28      	ldr	r3, [pc, #160]	@ (801cca4 <udp_sendto_if+0xd0>)
 801cc04:	f240 2281 	movw	r2, #641	@ 0x281
 801cc08:	4929      	ldr	r1, [pc, #164]	@ (801ccb0 <udp_sendto_if+0xdc>)
 801cc0a:	4828      	ldr	r0, [pc, #160]	@ (801ccac <udp_sendto_if+0xd8>)
 801cc0c:	f004 fcb8 	bl	8021580 <iprintf>
 801cc10:	f06f 030f 	mvn.w	r3, #15
 801cc14:	e042      	b.n	801cc9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d109      	bne.n	801cc30 <udp_sendto_if+0x5c>
 801cc1c:	4b21      	ldr	r3, [pc, #132]	@ (801cca4 <udp_sendto_if+0xd0>)
 801cc1e:	f240 2282 	movw	r2, #642	@ 0x282
 801cc22:	4924      	ldr	r1, [pc, #144]	@ (801ccb4 <udp_sendto_if+0xe0>)
 801cc24:	4821      	ldr	r0, [pc, #132]	@ (801ccac <udp_sendto_if+0xd8>)
 801cc26:	f004 fcab 	bl	8021580 <iprintf>
 801cc2a:	f06f 030f 	mvn.w	r3, #15
 801cc2e:	e035      	b.n	801cc9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801cc30:	6a3b      	ldr	r3, [r7, #32]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d109      	bne.n	801cc4a <udp_sendto_if+0x76>
 801cc36:	4b1b      	ldr	r3, [pc, #108]	@ (801cca4 <udp_sendto_if+0xd0>)
 801cc38:	f240 2283 	movw	r2, #643	@ 0x283
 801cc3c:	491e      	ldr	r1, [pc, #120]	@ (801ccb8 <udp_sendto_if+0xe4>)
 801cc3e:	481b      	ldr	r0, [pc, #108]	@ (801ccac <udp_sendto_if+0xd8>)
 801cc40:	f004 fc9e 	bl	8021580 <iprintf>
 801cc44:	f06f 030f 	mvn.w	r3, #15
 801cc48:	e028      	b.n	801cc9c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d009      	beq.n	801cc64 <udp_sendto_if+0x90>
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d005      	beq.n	801cc64 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801cc60:	2be0      	cmp	r3, #224	@ 0xe0
 801cc62:	d103      	bne.n	801cc6c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801cc64:	6a3b      	ldr	r3, [r7, #32]
 801cc66:	3304      	adds	r3, #4
 801cc68:	617b      	str	r3, [r7, #20]
 801cc6a:	e00b      	b.n	801cc84 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	681a      	ldr	r2, [r3, #0]
 801cc70:	6a3b      	ldr	r3, [r7, #32]
 801cc72:	3304      	adds	r3, #4
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	429a      	cmp	r2, r3
 801cc78:	d002      	beq.n	801cc80 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801cc7a:	f06f 0303 	mvn.w	r3, #3
 801cc7e:	e00d      	b.n	801cc9c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801cc84:	887a      	ldrh	r2, [r7, #2]
 801cc86:	697b      	ldr	r3, [r7, #20]
 801cc88:	9301      	str	r3, [sp, #4]
 801cc8a:	6a3b      	ldr	r3, [r7, #32]
 801cc8c:	9300      	str	r3, [sp, #0]
 801cc8e:	4613      	mov	r3, r2
 801cc90:	687a      	ldr	r2, [r7, #4]
 801cc92:	68b9      	ldr	r1, [r7, #8]
 801cc94:	68f8      	ldr	r0, [r7, #12]
 801cc96:	f000 f811 	bl	801ccbc <udp_sendto_if_src>
 801cc9a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	3718      	adds	r7, #24
 801cca0:	46bd      	mov	sp, r7
 801cca2:	bd80      	pop	{r7, pc}
 801cca4:	08025c50 	.word	0x08025c50
 801cca8:	08025ebc 	.word	0x08025ebc
 801ccac:	08025ca4 	.word	0x08025ca4
 801ccb0:	08025ed8 	.word	0x08025ed8
 801ccb4:	08025ef4 	.word	0x08025ef4
 801ccb8:	08025f14 	.word	0x08025f14

0801ccbc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801ccbc:	b580      	push	{r7, lr}
 801ccbe:	b08c      	sub	sp, #48	@ 0x30
 801ccc0:	af04      	add	r7, sp, #16
 801ccc2:	60f8      	str	r0, [r7, #12]
 801ccc4:	60b9      	str	r1, [r7, #8]
 801ccc6:	607a      	str	r2, [r7, #4]
 801ccc8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d109      	bne.n	801cce4 <udp_sendto_if_src+0x28>
 801ccd0:	4b7e      	ldr	r3, [pc, #504]	@ (801cecc <udp_sendto_if_src+0x210>)
 801ccd2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801ccd6:	497e      	ldr	r1, [pc, #504]	@ (801ced0 <udp_sendto_if_src+0x214>)
 801ccd8:	487e      	ldr	r0, [pc, #504]	@ (801ced4 <udp_sendto_if_src+0x218>)
 801ccda:	f004 fc51 	bl	8021580 <iprintf>
 801ccde:	f06f 030f 	mvn.w	r3, #15
 801cce2:	e0ee      	b.n	801cec2 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801cce4:	68bb      	ldr	r3, [r7, #8]
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d109      	bne.n	801ccfe <udp_sendto_if_src+0x42>
 801ccea:	4b78      	ldr	r3, [pc, #480]	@ (801cecc <udp_sendto_if_src+0x210>)
 801ccec:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801ccf0:	4979      	ldr	r1, [pc, #484]	@ (801ced8 <udp_sendto_if_src+0x21c>)
 801ccf2:	4878      	ldr	r0, [pc, #480]	@ (801ced4 <udp_sendto_if_src+0x218>)
 801ccf4:	f004 fc44 	bl	8021580 <iprintf>
 801ccf8:	f06f 030f 	mvn.w	r3, #15
 801ccfc:	e0e1      	b.n	801cec2 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d109      	bne.n	801cd18 <udp_sendto_if_src+0x5c>
 801cd04:	4b71      	ldr	r3, [pc, #452]	@ (801cecc <udp_sendto_if_src+0x210>)
 801cd06:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801cd0a:	4974      	ldr	r1, [pc, #464]	@ (801cedc <udp_sendto_if_src+0x220>)
 801cd0c:	4871      	ldr	r0, [pc, #452]	@ (801ced4 <udp_sendto_if_src+0x218>)
 801cd0e:	f004 fc37 	bl	8021580 <iprintf>
 801cd12:	f06f 030f 	mvn.w	r3, #15
 801cd16:	e0d4      	b.n	801cec2 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801cd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d109      	bne.n	801cd32 <udp_sendto_if_src+0x76>
 801cd1e:	4b6b      	ldr	r3, [pc, #428]	@ (801cecc <udp_sendto_if_src+0x210>)
 801cd20:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801cd24:	496e      	ldr	r1, [pc, #440]	@ (801cee0 <udp_sendto_if_src+0x224>)
 801cd26:	486b      	ldr	r0, [pc, #428]	@ (801ced4 <udp_sendto_if_src+0x218>)
 801cd28:	f004 fc2a 	bl	8021580 <iprintf>
 801cd2c:	f06f 030f 	mvn.w	r3, #15
 801cd30:	e0c7      	b.n	801cec2 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801cd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d109      	bne.n	801cd4c <udp_sendto_if_src+0x90>
 801cd38:	4b64      	ldr	r3, [pc, #400]	@ (801cecc <udp_sendto_if_src+0x210>)
 801cd3a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801cd3e:	4969      	ldr	r1, [pc, #420]	@ (801cee4 <udp_sendto_if_src+0x228>)
 801cd40:	4864      	ldr	r0, [pc, #400]	@ (801ced4 <udp_sendto_if_src+0x218>)
 801cd42:	f004 fc1d 	bl	8021580 <iprintf>
 801cd46:	f06f 030f 	mvn.w	r3, #15
 801cd4a:	e0ba      	b.n	801cec2 <udp_sendto_if_src+0x206>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	8a5b      	ldrh	r3, [r3, #18]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d115      	bne.n	801cd80 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801cd54:	4864      	ldr	r0, [pc, #400]	@ (801cee8 <udp_sendto_if_src+0x22c>)
 801cd56:	f004 fc83 	bl	8021660 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cd5a:	68f9      	ldr	r1, [r7, #12]
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	8a5b      	ldrh	r3, [r3, #18]
 801cd60:	461a      	mov	r2, r3
 801cd62:	68f8      	ldr	r0, [r7, #12]
 801cd64:	f000 f8d6 	bl	801cf14 <udp_bind>
 801cd68:	4603      	mov	r3, r0
 801cd6a:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801cd6c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d005      	beq.n	801cd80 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801cd74:	485d      	ldr	r0, [pc, #372]	@ (801ceec <udp_sendto_if_src+0x230>)
 801cd76:	f004 fc73 	bl	8021660 <puts>
      return err;
 801cd7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cd7e:	e0a0      	b.n	801cec2 <udp_sendto_if_src+0x206>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801cd80:	68bb      	ldr	r3, [r7, #8]
 801cd82:	891b      	ldrh	r3, [r3, #8]
 801cd84:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801cd88:	4293      	cmp	r3, r2
 801cd8a:	d902      	bls.n	801cd92 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801cd8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd90:	e097      	b.n	801cec2 <udp_sendto_if_src+0x206>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801cd92:	2108      	movs	r1, #8
 801cd94:	68b8      	ldr	r0, [r7, #8]
 801cd96:	f7f8 fb0f 	bl	80153b8 <pbuf_add_header>
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d01d      	beq.n	801cddc <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801cda0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cda4:	2108      	movs	r1, #8
 801cda6:	2022      	movs	r0, #34	@ 0x22
 801cda8:	f7f8 f878 	bl	8014e9c <pbuf_alloc>
 801cdac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801cdae:	69fb      	ldr	r3, [r7, #28]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d105      	bne.n	801cdc0 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801cdb4:	484e      	ldr	r0, [pc, #312]	@ (801cef0 <udp_sendto_if_src+0x234>)
 801cdb6:	f004 fc53 	bl	8021660 <puts>
      return ERR_MEM;
 801cdba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cdbe:	e080      	b.n	801cec2 <udp_sendto_if_src+0x206>
    }
    if (p->tot_len != 0) {
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	891b      	ldrh	r3, [r3, #8]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d003      	beq.n	801cdd0 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801cdc8:	68b9      	ldr	r1, [r7, #8]
 801cdca:	69f8      	ldr	r0, [r7, #28]
 801cdcc:	f7f8 fcce 	bl	801576c <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801cdd0:	68ba      	ldr	r2, [r7, #8]
 801cdd2:	69f9      	ldr	r1, [r7, #28]
 801cdd4:	4847      	ldr	r0, [pc, #284]	@ (801cef4 <udp_sendto_if_src+0x238>)
 801cdd6:	f004 fbd3 	bl	8021580 <iprintf>
 801cdda:	e005      	b.n	801cde8 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801cde0:	68b9      	ldr	r1, [r7, #8]
 801cde2:	4845      	ldr	r0, [pc, #276]	@ (801cef8 <udp_sendto_if_src+0x23c>)
 801cde4:	f004 fbcc 	bl	8021580 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801cde8:	69fb      	ldr	r3, [r7, #28]
 801cdea:	895b      	ldrh	r3, [r3, #10]
 801cdec:	2b07      	cmp	r3, #7
 801cdee:	d806      	bhi.n	801cdfe <udp_sendto_if_src+0x142>
 801cdf0:	4b36      	ldr	r3, [pc, #216]	@ (801cecc <udp_sendto_if_src+0x210>)
 801cdf2:	f240 320d 	movw	r2, #781	@ 0x30d
 801cdf6:	4941      	ldr	r1, [pc, #260]	@ (801cefc <udp_sendto_if_src+0x240>)
 801cdf8:	4836      	ldr	r0, [pc, #216]	@ (801ced4 <udp_sendto_if_src+0x218>)
 801cdfa:	f004 fbc1 	bl	8021580 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801cdfe:	69fb      	ldr	r3, [r7, #28]
 801ce00:	685b      	ldr	r3, [r3, #4]
 801ce02:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	8a5b      	ldrh	r3, [r3, #18]
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f7f6 fd45 	bl	8013898 <lwip_htons>
 801ce0e:	4603      	mov	r3, r0
 801ce10:	461a      	mov	r2, r3
 801ce12:	697b      	ldr	r3, [r7, #20]
 801ce14:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801ce16:	887b      	ldrh	r3, [r7, #2]
 801ce18:	4618      	mov	r0, r3
 801ce1a:	f7f6 fd3d 	bl	8013898 <lwip_htons>
 801ce1e:	4603      	mov	r3, r0
 801ce20:	461a      	mov	r2, r3
 801ce22:	697b      	ldr	r3, [r7, #20]
 801ce24:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801ce26:	697b      	ldr	r3, [r7, #20]
 801ce28:	2200      	movs	r2, #0
 801ce2a:	719a      	strb	r2, [r3, #6]
 801ce2c:	2200      	movs	r2, #0
 801ce2e:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801ce30:	69fb      	ldr	r3, [r7, #28]
 801ce32:	891b      	ldrh	r3, [r3, #8]
 801ce34:	4619      	mov	r1, r3
 801ce36:	4832      	ldr	r0, [pc, #200]	@ (801cf00 <udp_sendto_if_src+0x244>)
 801ce38:	f004 fba2 	bl	8021580 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801ce3c:	69fb      	ldr	r3, [r7, #28]
 801ce3e:	891b      	ldrh	r3, [r3, #8]
 801ce40:	4619      	mov	r1, r3
 801ce42:	4830      	ldr	r0, [pc, #192]	@ (801cf04 <udp_sendto_if_src+0x248>)
 801ce44:	f004 fb9c 	bl	8021580 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801ce48:	69fb      	ldr	r3, [r7, #28]
 801ce4a:	891b      	ldrh	r3, [r3, #8]
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	f7f6 fd23 	bl	8013898 <lwip_htons>
 801ce52:	4603      	mov	r3, r0
 801ce54:	461a      	mov	r2, r3
 801ce56:	697b      	ldr	r3, [r7, #20]
 801ce58:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801ce5a:	2311      	movs	r3, #17
 801ce5c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	7adb      	ldrb	r3, [r3, #11]
 801ce62:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801ce64:	697b      	ldr	r3, [r7, #20]
 801ce66:	88db      	ldrh	r3, [r3, #6]
 801ce68:	b29b      	uxth	r3, r3
 801ce6a:	4619      	mov	r1, r3
 801ce6c:	4826      	ldr	r0, [pc, #152]	@ (801cf08 <udp_sendto_if_src+0x24c>)
 801ce6e:	f004 fb87 	bl	8021580 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801ce72:	7cfb      	ldrb	r3, [r7, #19]
 801ce74:	4619      	mov	r1, r3
 801ce76:	4825      	ldr	r0, [pc, #148]	@ (801cf0c <udp_sendto_if_src+0x250>)
 801ce78:	f004 fb82 	bl	8021580 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	7a9b      	ldrb	r3, [r3, #10]
 801ce80:	7cb9      	ldrb	r1, [r7, #18]
 801ce82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ce84:	9202      	str	r2, [sp, #8]
 801ce86:	7cfa      	ldrb	r2, [r7, #19]
 801ce88:	9201      	str	r2, [sp, #4]
 801ce8a:	9300      	str	r3, [sp, #0]
 801ce8c:	460b      	mov	r3, r1
 801ce8e:	687a      	ldr	r2, [r7, #4]
 801ce90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ce92:	69f8      	ldr	r0, [r7, #28]
 801ce94:	f001 ff3a 	bl	801ed0c <ip4_output_if_src>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801ce9c:	69fa      	ldr	r2, [r7, #28]
 801ce9e:	68bb      	ldr	r3, [r7, #8]
 801cea0:	429a      	cmp	r2, r3
 801cea2:	d004      	beq.n	801ceae <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801cea4:	69f8      	ldr	r0, [r7, #28]
 801cea6:	f7f8 fb25 	bl	80154f4 <pbuf_free>
    q = NULL;
 801ceaa:	2300      	movs	r3, #0
 801ceac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801ceae:	4b18      	ldr	r3, [pc, #96]	@ (801cf10 <udp_sendto_if_src+0x254>)
 801ceb0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801ceb4:	3301      	adds	r3, #1
 801ceb6:	b29a      	uxth	r2, r3
 801ceb8:	4b15      	ldr	r3, [pc, #84]	@ (801cf10 <udp_sendto_if_src+0x254>)
 801ceba:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801cebe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801cec2:	4618      	mov	r0, r3
 801cec4:	3720      	adds	r7, #32
 801cec6:	46bd      	mov	sp, r7
 801cec8:	bd80      	pop	{r7, pc}
 801ceca:	bf00      	nop
 801cecc:	08025c50 	.word	0x08025c50
 801ced0:	08025f34 	.word	0x08025f34
 801ced4:	08025ca4 	.word	0x08025ca4
 801ced8:	08025f54 	.word	0x08025f54
 801cedc:	08025f74 	.word	0x08025f74
 801cee0:	08025f98 	.word	0x08025f98
 801cee4:	08025fbc 	.word	0x08025fbc
 801cee8:	08025fe0 	.word	0x08025fe0
 801ceec:	08026010 	.word	0x08026010
 801cef0:	08026034 	.word	0x08026034
 801cef4:	08026058 	.word	0x08026058
 801cef8:	08026090 	.word	0x08026090
 801cefc:	080260bc 	.word	0x080260bc
 801cf00:	080260ec 	.word	0x080260ec
 801cf04:	08026118 	.word	0x08026118
 801cf08:	0802613c 	.word	0x0802613c
 801cf0c:	0802615c 	.word	0x0802615c
 801cf10:	2002d358 	.word	0x2002d358

0801cf14 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b088      	sub	sp, #32
 801cf18:	af02      	add	r7, sp, #8
 801cf1a:	60f8      	str	r0, [r7, #12]
 801cf1c:	60b9      	str	r1, [r7, #8]
 801cf1e:	4613      	mov	r3, r2
 801cf20:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801cf22:	68bb      	ldr	r3, [r7, #8]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d101      	bne.n	801cf2c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801cf28:	4b65      	ldr	r3, [pc, #404]	@ (801d0c0 <udp_bind+0x1ac>)
 801cf2a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d109      	bne.n	801cf46 <udp_bind+0x32>
 801cf32:	4b64      	ldr	r3, [pc, #400]	@ (801d0c4 <udp_bind+0x1b0>)
 801cf34:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801cf38:	4963      	ldr	r1, [pc, #396]	@ (801d0c8 <udp_bind+0x1b4>)
 801cf3a:	4864      	ldr	r0, [pc, #400]	@ (801d0cc <udp_bind+0x1b8>)
 801cf3c:	f004 fb20 	bl	8021580 <iprintf>
 801cf40:	f06f 030f 	mvn.w	r3, #15
 801cf44:	e0b7      	b.n	801d0b6 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801cf46:	4862      	ldr	r0, [pc, #392]	@ (801d0d0 <udp_bind+0x1bc>)
 801cf48:	f004 fb1a 	bl	8021580 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801cf4c:	68bb      	ldr	r3, [r7, #8]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d003      	beq.n	801cf5a <udp_bind+0x46>
 801cf52:	68bb      	ldr	r3, [r7, #8]
 801cf54:	781b      	ldrb	r3, [r3, #0]
 801cf56:	4619      	mov	r1, r3
 801cf58:	e000      	b.n	801cf5c <udp_bind+0x48>
 801cf5a:	2100      	movs	r1, #0
 801cf5c:	68bb      	ldr	r3, [r7, #8]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d004      	beq.n	801cf6c <udp_bind+0x58>
 801cf62:	68bb      	ldr	r3, [r7, #8]
 801cf64:	3301      	adds	r3, #1
 801cf66:	781b      	ldrb	r3, [r3, #0]
 801cf68:	461a      	mov	r2, r3
 801cf6a:	e000      	b.n	801cf6e <udp_bind+0x5a>
 801cf6c:	2200      	movs	r2, #0
 801cf6e:	68bb      	ldr	r3, [r7, #8]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d004      	beq.n	801cf7e <udp_bind+0x6a>
 801cf74:	68bb      	ldr	r3, [r7, #8]
 801cf76:	3302      	adds	r3, #2
 801cf78:	781b      	ldrb	r3, [r3, #0]
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	e000      	b.n	801cf80 <udp_bind+0x6c>
 801cf7e:	2000      	movs	r0, #0
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d003      	beq.n	801cf8e <udp_bind+0x7a>
 801cf86:	68bb      	ldr	r3, [r7, #8]
 801cf88:	3303      	adds	r3, #3
 801cf8a:	781b      	ldrb	r3, [r3, #0]
 801cf8c:	e000      	b.n	801cf90 <udp_bind+0x7c>
 801cf8e:	2300      	movs	r3, #0
 801cf90:	9300      	str	r3, [sp, #0]
 801cf92:	4603      	mov	r3, r0
 801cf94:	484f      	ldr	r0, [pc, #316]	@ (801d0d4 <udp_bind+0x1c0>)
 801cf96:	f004 faf3 	bl	8021580 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801cf9a:	88fb      	ldrh	r3, [r7, #6]
 801cf9c:	4619      	mov	r1, r3
 801cf9e:	484e      	ldr	r0, [pc, #312]	@ (801d0d8 <udp_bind+0x1c4>)
 801cfa0:	f004 faee 	bl	8021580 <iprintf>

  rebind = 0;
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cfa8:	4b4c      	ldr	r3, [pc, #304]	@ (801d0dc <udp_bind+0x1c8>)
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	617b      	str	r3, [r7, #20]
 801cfae:	e009      	b.n	801cfc4 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801cfb0:	68fa      	ldr	r2, [r7, #12]
 801cfb2:	697b      	ldr	r3, [r7, #20]
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	d102      	bne.n	801cfbe <udp_bind+0xaa>
      rebind = 1;
 801cfb8:	2301      	movs	r3, #1
 801cfba:	74fb      	strb	r3, [r7, #19]
      break;
 801cfbc:	e005      	b.n	801cfca <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cfbe:	697b      	ldr	r3, [r7, #20]
 801cfc0:	68db      	ldr	r3, [r3, #12]
 801cfc2:	617b      	str	r3, [r7, #20]
 801cfc4:	697b      	ldr	r3, [r7, #20]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d1f2      	bne.n	801cfb0 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801cfca:	88fb      	ldrh	r3, [r7, #6]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d10c      	bne.n	801cfea <udp_bind+0xd6>
    port = udp_new_port();
 801cfd0:	f7ff fa92 	bl	801c4f8 <udp_new_port>
 801cfd4:	4603      	mov	r3, r0
 801cfd6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801cfd8:	88fb      	ldrh	r3, [r7, #6]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d134      	bne.n	801d048 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801cfde:	4840      	ldr	r0, [pc, #256]	@ (801d0e0 <udp_bind+0x1cc>)
 801cfe0:	f004 fb3e 	bl	8021660 <puts>
      return ERR_USE;
 801cfe4:	f06f 0307 	mvn.w	r3, #7
 801cfe8:	e065      	b.n	801d0b6 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cfea:	4b3c      	ldr	r3, [pc, #240]	@ (801d0dc <udp_bind+0x1c8>)
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	617b      	str	r3, [r7, #20]
 801cff0:	e027      	b.n	801d042 <udp_bind+0x12e>
      if (pcb != ipcb) {
 801cff2:	68fa      	ldr	r2, [r7, #12]
 801cff4:	697b      	ldr	r3, [r7, #20]
 801cff6:	429a      	cmp	r2, r3
 801cff8:	d020      	beq.n	801d03c <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801cffa:	697b      	ldr	r3, [r7, #20]
 801cffc:	8a5b      	ldrh	r3, [r3, #18]
 801cffe:	88fa      	ldrh	r2, [r7, #6]
 801d000:	429a      	cmp	r2, r3
 801d002:	d11b      	bne.n	801d03c <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d004:	697b      	ldr	r3, [r7, #20]
 801d006:	681a      	ldr	r2, [r3, #0]
 801d008:	68bb      	ldr	r3, [r7, #8]
 801d00a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801d00c:	429a      	cmp	r2, r3
 801d00e:	d00d      	beq.n	801d02c <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d010:	68bb      	ldr	r3, [r7, #8]
 801d012:	2b00      	cmp	r3, #0
 801d014:	d00a      	beq.n	801d02c <udp_bind+0x118>
 801d016:	68bb      	ldr	r3, [r7, #8]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d006      	beq.n	801d02c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801d01e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d020:	2b00      	cmp	r3, #0
 801d022:	d003      	beq.n	801d02c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801d024:	697b      	ldr	r3, [r7, #20]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d107      	bne.n	801d03c <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801d02c:	88fb      	ldrh	r3, [r7, #6]
 801d02e:	4619      	mov	r1, r3
 801d030:	482c      	ldr	r0, [pc, #176]	@ (801d0e4 <udp_bind+0x1d0>)
 801d032:	f004 faa5 	bl	8021580 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801d036:	f06f 0307 	mvn.w	r3, #7
 801d03a:	e03c      	b.n	801d0b6 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d03c:	697b      	ldr	r3, [r7, #20]
 801d03e:	68db      	ldr	r3, [r3, #12]
 801d040:	617b      	str	r3, [r7, #20]
 801d042:	697b      	ldr	r3, [r7, #20]
 801d044:	2b00      	cmp	r3, #0
 801d046:	d1d4      	bne.n	801cff2 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d048:	68bb      	ldr	r3, [r7, #8]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d002      	beq.n	801d054 <udp_bind+0x140>
 801d04e:	68bb      	ldr	r3, [r7, #8]
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	e000      	b.n	801d056 <udp_bind+0x142>
 801d054:	2300      	movs	r3, #0
 801d056:	68fa      	ldr	r2, [r7, #12]
 801d058:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	88fa      	ldrh	r2, [r7, #6]
 801d05e:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801d060:	7cfb      	ldrb	r3, [r7, #19]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d106      	bne.n	801d074 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801d066:	4b1d      	ldr	r3, [pc, #116]	@ (801d0dc <udp_bind+0x1c8>)
 801d068:	681a      	ldr	r2, [r3, #0]
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801d06e:	4a1b      	ldr	r2, [pc, #108]	@ (801d0dc <udp_bind+0x1c8>)
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801d074:	481c      	ldr	r0, [pc, #112]	@ (801d0e8 <udp_bind+0x1d4>)
 801d076:	f004 fa83 	bl	8021580 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	b2db      	uxtb	r3, r3
 801d080:	4619      	mov	r1, r3
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	0a1b      	lsrs	r3, r3, #8
 801d088:	b2db      	uxtb	r3, r3
 801d08a:	461a      	mov	r2, r3
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	0c1b      	lsrs	r3, r3, #16
 801d092:	b2db      	uxtb	r3, r3
 801d094:	4618      	mov	r0, r3
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	0e1b      	lsrs	r3, r3, #24
 801d09c:	b2db      	uxtb	r3, r3
 801d09e:	9300      	str	r3, [sp, #0]
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	480c      	ldr	r0, [pc, #48]	@ (801d0d4 <udp_bind+0x1c0>)
 801d0a4:	f004 fa6c 	bl	8021580 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	8a5b      	ldrh	r3, [r3, #18]
 801d0ac:	4619      	mov	r1, r3
 801d0ae:	480f      	ldr	r0, [pc, #60]	@ (801d0ec <udp_bind+0x1d8>)
 801d0b0:	f004 fa66 	bl	8021580 <iprintf>
  return ERR_OK;
 801d0b4:	2300      	movs	r3, #0
}
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	3718      	adds	r7, #24
 801d0ba:	46bd      	mov	sp, r7
 801d0bc:	bd80      	pop	{r7, pc}
 801d0be:	bf00      	nop
 801d0c0:	08027410 	.word	0x08027410
 801d0c4:	08025c50 	.word	0x08025c50
 801d0c8:	08026184 	.word	0x08026184
 801d0cc:	08025ca4 	.word	0x08025ca4
 801d0d0:	0802619c 	.word	0x0802619c
 801d0d4:	08025d94 	.word	0x08025d94
 801d0d8:	080261b0 	.word	0x080261b0
 801d0dc:	2002d4b8 	.word	0x2002d4b8
 801d0e0:	080261c0 	.word	0x080261c0
 801d0e4:	080261e0 	.word	0x080261e0
 801d0e8:	08026218 	.word	0x08026218
 801d0ec:	0802622c 	.word	0x0802622c

0801d0f0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b088      	sub	sp, #32
 801d0f4:	af02      	add	r7, sp, #8
 801d0f6:	60f8      	str	r0, [r7, #12]
 801d0f8:	60b9      	str	r1, [r7, #8]
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d0fe:	68fb      	ldr	r3, [r7, #12]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d109      	bne.n	801d118 <udp_connect+0x28>
 801d104:	4b3c      	ldr	r3, [pc, #240]	@ (801d1f8 <udp_connect+0x108>)
 801d106:	f240 4235 	movw	r2, #1077	@ 0x435
 801d10a:	493c      	ldr	r1, [pc, #240]	@ (801d1fc <udp_connect+0x10c>)
 801d10c:	483c      	ldr	r0, [pc, #240]	@ (801d200 <udp_connect+0x110>)
 801d10e:	f004 fa37 	bl	8021580 <iprintf>
 801d112:	f06f 030f 	mvn.w	r3, #15
 801d116:	e06b      	b.n	801d1f0 <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d118:	68bb      	ldr	r3, [r7, #8]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d109      	bne.n	801d132 <udp_connect+0x42>
 801d11e:	4b36      	ldr	r3, [pc, #216]	@ (801d1f8 <udp_connect+0x108>)
 801d120:	f240 4236 	movw	r2, #1078	@ 0x436
 801d124:	4937      	ldr	r1, [pc, #220]	@ (801d204 <udp_connect+0x114>)
 801d126:	4836      	ldr	r0, [pc, #216]	@ (801d200 <udp_connect+0x110>)
 801d128:	f004 fa2a 	bl	8021580 <iprintf>
 801d12c:	f06f 030f 	mvn.w	r3, #15
 801d130:	e05e      	b.n	801d1f0 <udp_connect+0x100>

  if (pcb->local_port == 0) {
 801d132:	68fb      	ldr	r3, [r7, #12]
 801d134:	8a5b      	ldrh	r3, [r3, #18]
 801d136:	2b00      	cmp	r3, #0
 801d138:	d10f      	bne.n	801d15a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d13a:	68f9      	ldr	r1, [r7, #12]
 801d13c:	68fb      	ldr	r3, [r7, #12]
 801d13e:	8a5b      	ldrh	r3, [r3, #18]
 801d140:	461a      	mov	r2, r3
 801d142:	68f8      	ldr	r0, [r7, #12]
 801d144:	f7ff fee6 	bl	801cf14 <udp_bind>
 801d148:	4603      	mov	r3, r0
 801d14a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801d14c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d002      	beq.n	801d15a <udp_connect+0x6a>
      return err;
 801d154:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d158:	e04a      	b.n	801d1f0 <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d15a:	68bb      	ldr	r3, [r7, #8]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d002      	beq.n	801d166 <udp_connect+0x76>
 801d160:	68bb      	ldr	r3, [r7, #8]
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	e000      	b.n	801d168 <udp_connect+0x78>
 801d166:	2300      	movs	r3, #0
 801d168:	68fa      	ldr	r2, [r7, #12]
 801d16a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	88fa      	ldrh	r2, [r7, #6]
 801d170:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d172:	68fb      	ldr	r3, [r7, #12]
 801d174:	7c1b      	ldrb	r3, [r3, #16]
 801d176:	f043 0304 	orr.w	r3, r3, #4
 801d17a:	b2da      	uxtb	r2, r3
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 801d180:	4821      	ldr	r0, [pc, #132]	@ (801d208 <udp_connect+0x118>)
 801d182:	f004 f9fd 	bl	8021580 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	685b      	ldr	r3, [r3, #4]
 801d18a:	b2db      	uxtb	r3, r3
 801d18c:	4619      	mov	r1, r3
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	685b      	ldr	r3, [r3, #4]
 801d192:	0a1b      	lsrs	r3, r3, #8
 801d194:	b2db      	uxtb	r3, r3
 801d196:	461a      	mov	r2, r3
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	685b      	ldr	r3, [r3, #4]
 801d19c:	0c1b      	lsrs	r3, r3, #16
 801d19e:	b2db      	uxtb	r3, r3
 801d1a0:	4618      	mov	r0, r3
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	685b      	ldr	r3, [r3, #4]
 801d1a6:	0e1b      	lsrs	r3, r3, #24
 801d1a8:	b2db      	uxtb	r3, r3
 801d1aa:	9300      	str	r3, [sp, #0]
 801d1ac:	4603      	mov	r3, r0
 801d1ae:	4817      	ldr	r0, [pc, #92]	@ (801d20c <udp_connect+0x11c>)
 801d1b0:	f004 f9e6 	bl	8021580 <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	8a9b      	ldrh	r3, [r3, #20]
 801d1b8:	4619      	mov	r1, r3
 801d1ba:	4815      	ldr	r0, [pc, #84]	@ (801d210 <udp_connect+0x120>)
 801d1bc:	f004 f9e0 	bl	8021580 <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d1c0:	4b14      	ldr	r3, [pc, #80]	@ (801d214 <udp_connect+0x124>)
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	617b      	str	r3, [r7, #20]
 801d1c6:	e008      	b.n	801d1da <udp_connect+0xea>
    if (pcb == ipcb) {
 801d1c8:	68fa      	ldr	r2, [r7, #12]
 801d1ca:	697b      	ldr	r3, [r7, #20]
 801d1cc:	429a      	cmp	r2, r3
 801d1ce:	d101      	bne.n	801d1d4 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 801d1d0:	2300      	movs	r3, #0
 801d1d2:	e00d      	b.n	801d1f0 <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d1d4:	697b      	ldr	r3, [r7, #20]
 801d1d6:	68db      	ldr	r3, [r3, #12]
 801d1d8:	617b      	str	r3, [r7, #20]
 801d1da:	697b      	ldr	r3, [r7, #20]
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d1f3      	bne.n	801d1c8 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801d1e0:	4b0c      	ldr	r3, [pc, #48]	@ (801d214 <udp_connect+0x124>)
 801d1e2:	681a      	ldr	r2, [r3, #0]
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801d1e8:	4a0a      	ldr	r2, [pc, #40]	@ (801d214 <udp_connect+0x124>)
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801d1ee:	2300      	movs	r3, #0
}
 801d1f0:	4618      	mov	r0, r3
 801d1f2:	3718      	adds	r7, #24
 801d1f4:	46bd      	mov	sp, r7
 801d1f6:	bd80      	pop	{r7, pc}
 801d1f8:	08025c50 	.word	0x08025c50
 801d1fc:	0802623c 	.word	0x0802623c
 801d200:	08025ca4 	.word	0x08025ca4
 801d204:	08026258 	.word	0x08026258
 801d208:	08026274 	.word	0x08026274
 801d20c:	08025d94 	.word	0x08025d94
 801d210:	0802622c 	.word	0x0802622c
 801d214:	2002d4b8 	.word	0x2002d4b8

0801d218 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b082      	sub	sp, #8
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	2b00      	cmp	r3, #0
 801d224:	d107      	bne.n	801d236 <udp_disconnect+0x1e>
 801d226:	4b0d      	ldr	r3, [pc, #52]	@ (801d25c <udp_disconnect+0x44>)
 801d228:	f240 426a 	movw	r2, #1130	@ 0x46a
 801d22c:	490c      	ldr	r1, [pc, #48]	@ (801d260 <udp_disconnect+0x48>)
 801d22e:	480d      	ldr	r0, [pc, #52]	@ (801d264 <udp_disconnect+0x4c>)
 801d230:	f004 f9a6 	bl	8021580 <iprintf>
 801d234:	e00f      	b.n	801d256 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	2200      	movs	r2, #0
 801d23a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2200      	movs	r2, #0
 801d240:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	2200      	movs	r2, #0
 801d246:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	7c1b      	ldrb	r3, [r3, #16]
 801d24c:	f023 0304 	bic.w	r3, r3, #4
 801d250:	b2da      	uxtb	r2, r3
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	741a      	strb	r2, [r3, #16]
}
 801d256:	3708      	adds	r7, #8
 801d258:	46bd      	mov	sp, r7
 801d25a:	bd80      	pop	{r7, pc}
 801d25c:	08025c50 	.word	0x08025c50
 801d260:	08026290 	.word	0x08026290
 801d264:	08025ca4 	.word	0x08025ca4

0801d268 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801d268:	b580      	push	{r7, lr}
 801d26a:	b084      	sub	sp, #16
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	60f8      	str	r0, [r7, #12]
 801d270:	60b9      	str	r1, [r7, #8]
 801d272:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d107      	bne.n	801d28a <udp_recv+0x22>
 801d27a:	4b08      	ldr	r3, [pc, #32]	@ (801d29c <udp_recv+0x34>)
 801d27c:	f240 428a 	movw	r2, #1162	@ 0x48a
 801d280:	4907      	ldr	r1, [pc, #28]	@ (801d2a0 <udp_recv+0x38>)
 801d282:	4808      	ldr	r0, [pc, #32]	@ (801d2a4 <udp_recv+0x3c>)
 801d284:	f004 f97c 	bl	8021580 <iprintf>
 801d288:	e005      	b.n	801d296 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	68ba      	ldr	r2, [r7, #8]
 801d28e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	687a      	ldr	r2, [r7, #4]
 801d294:	61da      	str	r2, [r3, #28]
}
 801d296:	3710      	adds	r7, #16
 801d298:	46bd      	mov	sp, r7
 801d29a:	bd80      	pop	{r7, pc}
 801d29c:	08025c50 	.word	0x08025c50
 801d2a0:	080262ac 	.word	0x080262ac
 801d2a4:	08025ca4 	.word	0x08025ca4

0801d2a8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801d2a8:	b580      	push	{r7, lr}
 801d2aa:	b084      	sub	sp, #16
 801d2ac:	af00      	add	r7, sp, #0
 801d2ae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d107      	bne.n	801d2c6 <udp_remove+0x1e>
 801d2b6:	4b19      	ldr	r3, [pc, #100]	@ (801d31c <udp_remove+0x74>)
 801d2b8:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801d2bc:	4918      	ldr	r1, [pc, #96]	@ (801d320 <udp_remove+0x78>)
 801d2be:	4819      	ldr	r0, [pc, #100]	@ (801d324 <udp_remove+0x7c>)
 801d2c0:	f004 f95e 	bl	8021580 <iprintf>
 801d2c4:	e026      	b.n	801d314 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801d2c6:	4b18      	ldr	r3, [pc, #96]	@ (801d328 <udp_remove+0x80>)
 801d2c8:	681b      	ldr	r3, [r3, #0]
 801d2ca:	687a      	ldr	r2, [r7, #4]
 801d2cc:	429a      	cmp	r2, r3
 801d2ce:	d105      	bne.n	801d2dc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801d2d0:	4b15      	ldr	r3, [pc, #84]	@ (801d328 <udp_remove+0x80>)
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	68db      	ldr	r3, [r3, #12]
 801d2d6:	4a14      	ldr	r2, [pc, #80]	@ (801d328 <udp_remove+0x80>)
 801d2d8:	6013      	str	r3, [r2, #0]
 801d2da:	e017      	b.n	801d30c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d2dc:	4b12      	ldr	r3, [pc, #72]	@ (801d328 <udp_remove+0x80>)
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	60fb      	str	r3, [r7, #12]
 801d2e2:	e010      	b.n	801d306 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	68db      	ldr	r3, [r3, #12]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d009      	beq.n	801d300 <udp_remove+0x58>
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	68db      	ldr	r3, [r3, #12]
 801d2f0:	687a      	ldr	r2, [r7, #4]
 801d2f2:	429a      	cmp	r2, r3
 801d2f4:	d104      	bne.n	801d300 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	68da      	ldr	r2, [r3, #12]
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	60da      	str	r2, [r3, #12]
        break;
 801d2fe:	e005      	b.n	801d30c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	68db      	ldr	r3, [r3, #12]
 801d304:	60fb      	str	r3, [r7, #12]
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d1eb      	bne.n	801d2e4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801d30c:	6879      	ldr	r1, [r7, #4]
 801d30e:	2000      	movs	r0, #0
 801d310:	f7f7 f90a 	bl	8014528 <memp_free>
}
 801d314:	3710      	adds	r7, #16
 801d316:	46bd      	mov	sp, r7
 801d318:	bd80      	pop	{r7, pc}
 801d31a:	bf00      	nop
 801d31c:	08025c50 	.word	0x08025c50
 801d320:	080262c4 	.word	0x080262c4
 801d324:	08025ca4 	.word	0x08025ca4
 801d328:	2002d4b8 	.word	0x2002d4b8

0801d32c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b082      	sub	sp, #8
 801d330:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d332:	2000      	movs	r0, #0
 801d334:	f7f7 f87c 	bl	8014430 <memp_malloc>
 801d338:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d007      	beq.n	801d350 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d340:	2220      	movs	r2, #32
 801d342:	2100      	movs	r1, #0
 801d344:	6878      	ldr	r0, [r7, #4]
 801d346:	f004 fa7b 	bl	8021840 <memset>
    pcb->ttl = UDP_TTL;
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	22ff      	movs	r2, #255	@ 0xff
 801d34e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801d350:	687b      	ldr	r3, [r7, #4]
}
 801d352:	4618      	mov	r0, r3
 801d354:	3708      	adds	r7, #8
 801d356:	46bd      	mov	sp, r7
 801d358:	bd80      	pop	{r7, pc}

0801d35a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801d35a:	b580      	push	{r7, lr}
 801d35c:	b084      	sub	sp, #16
 801d35e:	af00      	add	r7, sp, #0
 801d360:	4603      	mov	r3, r0
 801d362:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801d364:	f7ff ffe2 	bl	801d32c <udp_new>
 801d368:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801d36a:	68fb      	ldr	r3, [r7, #12]
}
 801d36c:	4618      	mov	r0, r3
 801d36e:	3710      	adds	r7, #16
 801d370:	46bd      	mov	sp, r7
 801d372:	bd80      	pop	{r7, pc}

0801d374 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d374:	b480      	push	{r7}
 801d376:	b085      	sub	sp, #20
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
 801d37c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d01e      	beq.n	801d3c2 <udp_netif_ip_addr_changed+0x4e>
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d01a      	beq.n	801d3c2 <udp_netif_ip_addr_changed+0x4e>
 801d38c:	683b      	ldr	r3, [r7, #0]
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d017      	beq.n	801d3c2 <udp_netif_ip_addr_changed+0x4e>
 801d392:	683b      	ldr	r3, [r7, #0]
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	2b00      	cmp	r3, #0
 801d398:	d013      	beq.n	801d3c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d39a:	4b0d      	ldr	r3, [pc, #52]	@ (801d3d0 <udp_netif_ip_addr_changed+0x5c>)
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	60fb      	str	r3, [r7, #12]
 801d3a0:	e00c      	b.n	801d3bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d3a2:	68fb      	ldr	r3, [r7, #12]
 801d3a4:	681a      	ldr	r2, [r3, #0]
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	429a      	cmp	r2, r3
 801d3ac:	d103      	bne.n	801d3b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d3ae:	683b      	ldr	r3, [r7, #0]
 801d3b0:	681a      	ldr	r2, [r3, #0]
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	68db      	ldr	r3, [r3, #12]
 801d3ba:	60fb      	str	r3, [r7, #12]
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d1ef      	bne.n	801d3a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d3c2:	bf00      	nop
 801d3c4:	3714      	adds	r7, #20
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3cc:	4770      	bx	lr
 801d3ce:	bf00      	nop
 801d3d0:	2002d4b8 	.word	0x2002d4b8

0801d3d4 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801d3d4:	b590      	push	{r4, r7, lr}
 801d3d6:	b083      	sub	sp, #12
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801d3dc:	481b      	ldr	r0, [pc, #108]	@ (801d44c <udp_debug_print+0x78>)
 801d3de:	f004 f93f 	bl	8021660 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801d3e2:	481b      	ldr	r0, [pc, #108]	@ (801d450 <udp_debug_print+0x7c>)
 801d3e4:	f004 f93c 	bl	8021660 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	881b      	ldrh	r3, [r3, #0]
 801d3ec:	b29b      	uxth	r3, r3
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	f7f6 fa52 	bl	8013898 <lwip_htons>
 801d3f4:	4603      	mov	r3, r0
 801d3f6:	461c      	mov	r4, r3
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	885b      	ldrh	r3, [r3, #2]
 801d3fc:	b29b      	uxth	r3, r3
 801d3fe:	4618      	mov	r0, r3
 801d400:	f7f6 fa4a 	bl	8013898 <lwip_htons>
 801d404:	4603      	mov	r3, r0
 801d406:	461a      	mov	r2, r3
 801d408:	4621      	mov	r1, r4
 801d40a:	4812      	ldr	r0, [pc, #72]	@ (801d454 <udp_debug_print+0x80>)
 801d40c:	f004 f8b8 	bl	8021580 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801d410:	480f      	ldr	r0, [pc, #60]	@ (801d450 <udp_debug_print+0x7c>)
 801d412:	f004 f925 	bl	8021660 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	889b      	ldrh	r3, [r3, #4]
 801d41a:	b29b      	uxth	r3, r3
 801d41c:	4618      	mov	r0, r3
 801d41e:	f7f6 fa3b 	bl	8013898 <lwip_htons>
 801d422:	4603      	mov	r3, r0
 801d424:	461c      	mov	r4, r3
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	88db      	ldrh	r3, [r3, #6]
 801d42a:	b29b      	uxth	r3, r3
 801d42c:	4618      	mov	r0, r3
 801d42e:	f7f6 fa33 	bl	8013898 <lwip_htons>
 801d432:	4603      	mov	r3, r0
 801d434:	461a      	mov	r2, r3
 801d436:	4621      	mov	r1, r4
 801d438:	4807      	ldr	r0, [pc, #28]	@ (801d458 <udp_debug_print+0x84>)
 801d43a:	f004 f8a1 	bl	8021580 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801d43e:	4804      	ldr	r0, [pc, #16]	@ (801d450 <udp_debug_print+0x7c>)
 801d440:	f004 f90e 	bl	8021660 <puts>
}
 801d444:	bf00      	nop
 801d446:	370c      	adds	r7, #12
 801d448:	46bd      	mov	sp, r7
 801d44a:	bd90      	pop	{r4, r7, pc}
 801d44c:	080262dc 	.word	0x080262dc
 801d450:	080262e8 	.word	0x080262e8
 801d454:	0802630c 	.word	0x0802630c
 801d458:	08026344 	.word	0x08026344

0801d45c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d45c:	b580      	push	{r7, lr}
 801d45e:	b082      	sub	sp, #8
 801d460:	af00      	add	r7, sp, #0
 801d462:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d464:	492b      	ldr	r1, [pc, #172]	@ (801d514 <etharp_free_entry+0xb8>)
 801d466:	687a      	ldr	r2, [r7, #4]
 801d468:	4613      	mov	r3, r2
 801d46a:	005b      	lsls	r3, r3, #1
 801d46c:	4413      	add	r3, r2
 801d46e:	00db      	lsls	r3, r3, #3
 801d470:	440b      	add	r3, r1
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d013      	beq.n	801d4a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d478:	4926      	ldr	r1, [pc, #152]	@ (801d514 <etharp_free_entry+0xb8>)
 801d47a:	687a      	ldr	r2, [r7, #4]
 801d47c:	4613      	mov	r3, r2
 801d47e:	005b      	lsls	r3, r3, #1
 801d480:	4413      	add	r3, r2
 801d482:	00db      	lsls	r3, r3, #3
 801d484:	440b      	add	r3, r1
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	4618      	mov	r0, r3
 801d48a:	f7f8 f833 	bl	80154f4 <pbuf_free>
    arp_table[i].q = NULL;
 801d48e:	4921      	ldr	r1, [pc, #132]	@ (801d514 <etharp_free_entry+0xb8>)
 801d490:	687a      	ldr	r2, [r7, #4]
 801d492:	4613      	mov	r3, r2
 801d494:	005b      	lsls	r3, r3, #1
 801d496:	4413      	add	r3, r2
 801d498:	00db      	lsls	r3, r3, #3
 801d49a:	440b      	add	r3, r1
 801d49c:	2200      	movs	r2, #0
 801d49e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d4a0:	491c      	ldr	r1, [pc, #112]	@ (801d514 <etharp_free_entry+0xb8>)
 801d4a2:	687a      	ldr	r2, [r7, #4]
 801d4a4:	4613      	mov	r3, r2
 801d4a6:	005b      	lsls	r3, r3, #1
 801d4a8:	4413      	add	r3, r2
 801d4aa:	00db      	lsls	r3, r3, #3
 801d4ac:	440b      	add	r3, r1
 801d4ae:	3314      	adds	r3, #20
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801d4b4:	4917      	ldr	r1, [pc, #92]	@ (801d514 <etharp_free_entry+0xb8>)
 801d4b6:	687a      	ldr	r2, [r7, #4]
 801d4b8:	4613      	mov	r3, r2
 801d4ba:	005b      	lsls	r3, r3, #1
 801d4bc:	4413      	add	r3, r2
 801d4be:	00db      	lsls	r3, r3, #3
 801d4c0:	440b      	add	r3, r1
 801d4c2:	3312      	adds	r3, #18
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801d4c8:	4912      	ldr	r1, [pc, #72]	@ (801d514 <etharp_free_entry+0xb8>)
 801d4ca:	687a      	ldr	r2, [r7, #4]
 801d4cc:	4613      	mov	r3, r2
 801d4ce:	005b      	lsls	r3, r3, #1
 801d4d0:	4413      	add	r3, r2
 801d4d2:	00db      	lsls	r3, r3, #3
 801d4d4:	440b      	add	r3, r1
 801d4d6:	3308      	adds	r3, #8
 801d4d8:	2200      	movs	r2, #0
 801d4da:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801d4dc:	490d      	ldr	r1, [pc, #52]	@ (801d514 <etharp_free_entry+0xb8>)
 801d4de:	687a      	ldr	r2, [r7, #4]
 801d4e0:	4613      	mov	r3, r2
 801d4e2:	005b      	lsls	r3, r3, #1
 801d4e4:	4413      	add	r3, r2
 801d4e6:	00db      	lsls	r3, r3, #3
 801d4e8:	440b      	add	r3, r1
 801d4ea:	3304      	adds	r3, #4
 801d4ec:	2200      	movs	r2, #0
 801d4ee:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801d4f0:	4908      	ldr	r1, [pc, #32]	@ (801d514 <etharp_free_entry+0xb8>)
 801d4f2:	687a      	ldr	r2, [r7, #4]
 801d4f4:	4613      	mov	r3, r2
 801d4f6:	005b      	lsls	r3, r3, #1
 801d4f8:	4413      	add	r3, r2
 801d4fa:	00db      	lsls	r3, r3, #3
 801d4fc:	440b      	add	r3, r1
 801d4fe:	3308      	adds	r3, #8
 801d500:	4a05      	ldr	r2, [pc, #20]	@ (801d518 <etharp_free_entry+0xbc>)
 801d502:	3304      	adds	r3, #4
 801d504:	6810      	ldr	r0, [r2, #0]
 801d506:	6018      	str	r0, [r3, #0]
 801d508:	8892      	ldrh	r2, [r2, #4]
 801d50a:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801d50c:	bf00      	nop
 801d50e:	3708      	adds	r7, #8
 801d510:	46bd      	mov	sp, r7
 801d512:	bd80      	pop	{r7, pc}
 801d514:	2002d4bc 	.word	0x2002d4bc
 801d518:	0802741c 	.word	0x0802741c

0801d51c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d51c:	b580      	push	{r7, lr}
 801d51e:	b082      	sub	sp, #8
 801d520:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d522:	2300      	movs	r3, #0
 801d524:	607b      	str	r3, [r7, #4]
 801d526:	e096      	b.n	801d656 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d528:	494f      	ldr	r1, [pc, #316]	@ (801d668 <etharp_tmr+0x14c>)
 801d52a:	687a      	ldr	r2, [r7, #4]
 801d52c:	4613      	mov	r3, r2
 801d52e:	005b      	lsls	r3, r3, #1
 801d530:	4413      	add	r3, r2
 801d532:	00db      	lsls	r3, r3, #3
 801d534:	440b      	add	r3, r1
 801d536:	3314      	adds	r3, #20
 801d538:	781b      	ldrb	r3, [r3, #0]
 801d53a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d53c:	78fb      	ldrb	r3, [r7, #3]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	f000 8086 	beq.w	801d650 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d544:	4948      	ldr	r1, [pc, #288]	@ (801d668 <etharp_tmr+0x14c>)
 801d546:	687a      	ldr	r2, [r7, #4]
 801d548:	4613      	mov	r3, r2
 801d54a:	005b      	lsls	r3, r3, #1
 801d54c:	4413      	add	r3, r2
 801d54e:	00db      	lsls	r3, r3, #3
 801d550:	440b      	add	r3, r1
 801d552:	3312      	adds	r3, #18
 801d554:	881b      	ldrh	r3, [r3, #0]
 801d556:	3301      	adds	r3, #1
 801d558:	b298      	uxth	r0, r3
 801d55a:	4943      	ldr	r1, [pc, #268]	@ (801d668 <etharp_tmr+0x14c>)
 801d55c:	687a      	ldr	r2, [r7, #4]
 801d55e:	4613      	mov	r3, r2
 801d560:	005b      	lsls	r3, r3, #1
 801d562:	4413      	add	r3, r2
 801d564:	00db      	lsls	r3, r3, #3
 801d566:	440b      	add	r3, r1
 801d568:	3312      	adds	r3, #18
 801d56a:	4602      	mov	r2, r0
 801d56c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d56e:	493e      	ldr	r1, [pc, #248]	@ (801d668 <etharp_tmr+0x14c>)
 801d570:	687a      	ldr	r2, [r7, #4]
 801d572:	4613      	mov	r3, r2
 801d574:	005b      	lsls	r3, r3, #1
 801d576:	4413      	add	r3, r2
 801d578:	00db      	lsls	r3, r3, #3
 801d57a:	440b      	add	r3, r1
 801d57c:	3312      	adds	r3, #18
 801d57e:	881b      	ldrh	r3, [r3, #0]
 801d580:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801d584:	d215      	bcs.n	801d5b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d586:	4938      	ldr	r1, [pc, #224]	@ (801d668 <etharp_tmr+0x14c>)
 801d588:	687a      	ldr	r2, [r7, #4]
 801d58a:	4613      	mov	r3, r2
 801d58c:	005b      	lsls	r3, r3, #1
 801d58e:	4413      	add	r3, r2
 801d590:	00db      	lsls	r3, r3, #3
 801d592:	440b      	add	r3, r1
 801d594:	3314      	adds	r3, #20
 801d596:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d598:	2b01      	cmp	r3, #1
 801d59a:	d10e      	bne.n	801d5ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d59c:	4932      	ldr	r1, [pc, #200]	@ (801d668 <etharp_tmr+0x14c>)
 801d59e:	687a      	ldr	r2, [r7, #4]
 801d5a0:	4613      	mov	r3, r2
 801d5a2:	005b      	lsls	r3, r3, #1
 801d5a4:	4413      	add	r3, r2
 801d5a6:	00db      	lsls	r3, r3, #3
 801d5a8:	440b      	add	r3, r1
 801d5aa:	3312      	adds	r3, #18
 801d5ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d5ae:	2b04      	cmp	r3, #4
 801d5b0:	d903      	bls.n	801d5ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d5b2:	6878      	ldr	r0, [r7, #4]
 801d5b4:	f7ff ff52 	bl	801d45c <etharp_free_entry>
 801d5b8:	e04a      	b.n	801d650 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d5ba:	492b      	ldr	r1, [pc, #172]	@ (801d668 <etharp_tmr+0x14c>)
 801d5bc:	687a      	ldr	r2, [r7, #4]
 801d5be:	4613      	mov	r3, r2
 801d5c0:	005b      	lsls	r3, r3, #1
 801d5c2:	4413      	add	r3, r2
 801d5c4:	00db      	lsls	r3, r3, #3
 801d5c6:	440b      	add	r3, r1
 801d5c8:	3314      	adds	r3, #20
 801d5ca:	781b      	ldrb	r3, [r3, #0]
 801d5cc:	2b03      	cmp	r3, #3
 801d5ce:	d10a      	bne.n	801d5e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d5d0:	4925      	ldr	r1, [pc, #148]	@ (801d668 <etharp_tmr+0x14c>)
 801d5d2:	687a      	ldr	r2, [r7, #4]
 801d5d4:	4613      	mov	r3, r2
 801d5d6:	005b      	lsls	r3, r3, #1
 801d5d8:	4413      	add	r3, r2
 801d5da:	00db      	lsls	r3, r3, #3
 801d5dc:	440b      	add	r3, r1
 801d5de:	3314      	adds	r3, #20
 801d5e0:	2204      	movs	r2, #4
 801d5e2:	701a      	strb	r2, [r3, #0]
 801d5e4:	e034      	b.n	801d650 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d5e6:	4920      	ldr	r1, [pc, #128]	@ (801d668 <etharp_tmr+0x14c>)
 801d5e8:	687a      	ldr	r2, [r7, #4]
 801d5ea:	4613      	mov	r3, r2
 801d5ec:	005b      	lsls	r3, r3, #1
 801d5ee:	4413      	add	r3, r2
 801d5f0:	00db      	lsls	r3, r3, #3
 801d5f2:	440b      	add	r3, r1
 801d5f4:	3314      	adds	r3, #20
 801d5f6:	781b      	ldrb	r3, [r3, #0]
 801d5f8:	2b04      	cmp	r3, #4
 801d5fa:	d10a      	bne.n	801d612 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d5fc:	491a      	ldr	r1, [pc, #104]	@ (801d668 <etharp_tmr+0x14c>)
 801d5fe:	687a      	ldr	r2, [r7, #4]
 801d600:	4613      	mov	r3, r2
 801d602:	005b      	lsls	r3, r3, #1
 801d604:	4413      	add	r3, r2
 801d606:	00db      	lsls	r3, r3, #3
 801d608:	440b      	add	r3, r1
 801d60a:	3314      	adds	r3, #20
 801d60c:	2202      	movs	r2, #2
 801d60e:	701a      	strb	r2, [r3, #0]
 801d610:	e01e      	b.n	801d650 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d612:	4915      	ldr	r1, [pc, #84]	@ (801d668 <etharp_tmr+0x14c>)
 801d614:	687a      	ldr	r2, [r7, #4]
 801d616:	4613      	mov	r3, r2
 801d618:	005b      	lsls	r3, r3, #1
 801d61a:	4413      	add	r3, r2
 801d61c:	00db      	lsls	r3, r3, #3
 801d61e:	440b      	add	r3, r1
 801d620:	3314      	adds	r3, #20
 801d622:	781b      	ldrb	r3, [r3, #0]
 801d624:	2b01      	cmp	r3, #1
 801d626:	d113      	bne.n	801d650 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d628:	490f      	ldr	r1, [pc, #60]	@ (801d668 <etharp_tmr+0x14c>)
 801d62a:	687a      	ldr	r2, [r7, #4]
 801d62c:	4613      	mov	r3, r2
 801d62e:	005b      	lsls	r3, r3, #1
 801d630:	4413      	add	r3, r2
 801d632:	00db      	lsls	r3, r3, #3
 801d634:	440b      	add	r3, r1
 801d636:	3308      	adds	r3, #8
 801d638:	6818      	ldr	r0, [r3, #0]
 801d63a:	687a      	ldr	r2, [r7, #4]
 801d63c:	4613      	mov	r3, r2
 801d63e:	005b      	lsls	r3, r3, #1
 801d640:	4413      	add	r3, r2
 801d642:	00db      	lsls	r3, r3, #3
 801d644:	4a08      	ldr	r2, [pc, #32]	@ (801d668 <etharp_tmr+0x14c>)
 801d646:	4413      	add	r3, r2
 801d648:	3304      	adds	r3, #4
 801d64a:	4619      	mov	r1, r3
 801d64c:	f000 feae 	bl	801e3ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	3301      	adds	r3, #1
 801d654:	607b      	str	r3, [r7, #4]
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	2b09      	cmp	r3, #9
 801d65a:	f77f af65 	ble.w	801d528 <etharp_tmr+0xc>
      }
    }
  }
}
 801d65e:	bf00      	nop
 801d660:	bf00      	nop
 801d662:	3708      	adds	r7, #8
 801d664:	46bd      	mov	sp, r7
 801d666:	bd80      	pop	{r7, pc}
 801d668:	2002d4bc 	.word	0x2002d4bc

0801d66c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d66c:	b580      	push	{r7, lr}
 801d66e:	b08a      	sub	sp, #40	@ 0x28
 801d670:	af00      	add	r7, sp, #0
 801d672:	60f8      	str	r0, [r7, #12]
 801d674:	460b      	mov	r3, r1
 801d676:	607a      	str	r2, [r7, #4]
 801d678:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d67a:	230a      	movs	r3, #10
 801d67c:	843b      	strh	r3, [r7, #32]
 801d67e:	230a      	movs	r3, #10
 801d680:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801d682:	230a      	movs	r3, #10
 801d684:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801d686:	2300      	movs	r3, #0
 801d688:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d68a:	230a      	movs	r3, #10
 801d68c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d68e:	2300      	movs	r3, #0
 801d690:	83bb      	strh	r3, [r7, #28]
 801d692:	2300      	movs	r3, #0
 801d694:	837b      	strh	r3, [r7, #26]
 801d696:	2300      	movs	r3, #0
 801d698:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d69a:	2300      	movs	r3, #0
 801d69c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d69e:	e0ae      	b.n	801d7fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d6a0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d6a4:	49a6      	ldr	r1, [pc, #664]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d6a6:	4613      	mov	r3, r2
 801d6a8:	005b      	lsls	r3, r3, #1
 801d6aa:	4413      	add	r3, r2
 801d6ac:	00db      	lsls	r3, r3, #3
 801d6ae:	440b      	add	r3, r1
 801d6b0:	3314      	adds	r3, #20
 801d6b2:	781b      	ldrb	r3, [r3, #0]
 801d6b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d6b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d6ba:	2b0a      	cmp	r3, #10
 801d6bc:	d105      	bne.n	801d6ca <etharp_find_entry+0x5e>
 801d6be:	7dfb      	ldrb	r3, [r7, #23]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d102      	bne.n	801d6ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d6c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d6c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801d6c8:	e095      	b.n	801d7f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d6ca:	7dfb      	ldrb	r3, [r7, #23]
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	f000 8092 	beq.w	801d7f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d6d2:	7dfb      	ldrb	r3, [r7, #23]
 801d6d4:	2b01      	cmp	r3, #1
 801d6d6:	d009      	beq.n	801d6ec <etharp_find_entry+0x80>
 801d6d8:	7dfb      	ldrb	r3, [r7, #23]
 801d6da:	2b01      	cmp	r3, #1
 801d6dc:	d806      	bhi.n	801d6ec <etharp_find_entry+0x80>
 801d6de:	4b99      	ldr	r3, [pc, #612]	@ (801d944 <etharp_find_entry+0x2d8>)
 801d6e0:	f240 1223 	movw	r2, #291	@ 0x123
 801d6e4:	4998      	ldr	r1, [pc, #608]	@ (801d948 <etharp_find_entry+0x2dc>)
 801d6e6:	4899      	ldr	r0, [pc, #612]	@ (801d94c <etharp_find_entry+0x2e0>)
 801d6e8:	f003 ff4a 	bl	8021580 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d6ec:	68fb      	ldr	r3, [r7, #12]
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d020      	beq.n	801d734 <etharp_find_entry+0xc8>
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	6819      	ldr	r1, [r3, #0]
 801d6f6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d6fa:	4891      	ldr	r0, [pc, #580]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d6fc:	4613      	mov	r3, r2
 801d6fe:	005b      	lsls	r3, r3, #1
 801d700:	4413      	add	r3, r2
 801d702:	00db      	lsls	r3, r3, #3
 801d704:	4403      	add	r3, r0
 801d706:	3304      	adds	r3, #4
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	4299      	cmp	r1, r3
 801d70c:	d112      	bne.n	801d734 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	2b00      	cmp	r3, #0
 801d712:	d00c      	beq.n	801d72e <etharp_find_entry+0xc2>
 801d714:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d718:	4989      	ldr	r1, [pc, #548]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d71a:	4613      	mov	r3, r2
 801d71c:	005b      	lsls	r3, r3, #1
 801d71e:	4413      	add	r3, r2
 801d720:	00db      	lsls	r3, r3, #3
 801d722:	440b      	add	r3, r1
 801d724:	3308      	adds	r3, #8
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	687a      	ldr	r2, [r7, #4]
 801d72a:	429a      	cmp	r2, r3
 801d72c:	d102      	bne.n	801d734 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d72e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d732:	e100      	b.n	801d936 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d734:	7dfb      	ldrb	r3, [r7, #23]
 801d736:	2b01      	cmp	r3, #1
 801d738:	d140      	bne.n	801d7bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d73a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d73e:	4980      	ldr	r1, [pc, #512]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d740:	4613      	mov	r3, r2
 801d742:	005b      	lsls	r3, r3, #1
 801d744:	4413      	add	r3, r2
 801d746:	00db      	lsls	r3, r3, #3
 801d748:	440b      	add	r3, r1
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d01a      	beq.n	801d786 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d750:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d754:	497a      	ldr	r1, [pc, #488]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d756:	4613      	mov	r3, r2
 801d758:	005b      	lsls	r3, r3, #1
 801d75a:	4413      	add	r3, r2
 801d75c:	00db      	lsls	r3, r3, #3
 801d75e:	440b      	add	r3, r1
 801d760:	3312      	adds	r3, #18
 801d762:	881b      	ldrh	r3, [r3, #0]
 801d764:	8bba      	ldrh	r2, [r7, #28]
 801d766:	429a      	cmp	r2, r3
 801d768:	d845      	bhi.n	801d7f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801d76a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d76c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d76e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d772:	4973      	ldr	r1, [pc, #460]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d774:	4613      	mov	r3, r2
 801d776:	005b      	lsls	r3, r3, #1
 801d778:	4413      	add	r3, r2
 801d77a:	00db      	lsls	r3, r3, #3
 801d77c:	440b      	add	r3, r1
 801d77e:	3312      	adds	r3, #18
 801d780:	881b      	ldrh	r3, [r3, #0]
 801d782:	83bb      	strh	r3, [r7, #28]
 801d784:	e037      	b.n	801d7f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d786:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d78a:	496d      	ldr	r1, [pc, #436]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d78c:	4613      	mov	r3, r2
 801d78e:	005b      	lsls	r3, r3, #1
 801d790:	4413      	add	r3, r2
 801d792:	00db      	lsls	r3, r3, #3
 801d794:	440b      	add	r3, r1
 801d796:	3312      	adds	r3, #18
 801d798:	881b      	ldrh	r3, [r3, #0]
 801d79a:	8b7a      	ldrh	r2, [r7, #26]
 801d79c:	429a      	cmp	r2, r3
 801d79e:	d82a      	bhi.n	801d7f6 <etharp_find_entry+0x18a>
            old_pending = i;
 801d7a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d7a2:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801d7a4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d7a8:	4965      	ldr	r1, [pc, #404]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d7aa:	4613      	mov	r3, r2
 801d7ac:	005b      	lsls	r3, r3, #1
 801d7ae:	4413      	add	r3, r2
 801d7b0:	00db      	lsls	r3, r3, #3
 801d7b2:	440b      	add	r3, r1
 801d7b4:	3312      	adds	r3, #18
 801d7b6:	881b      	ldrh	r3, [r3, #0]
 801d7b8:	837b      	strh	r3, [r7, #26]
 801d7ba:	e01c      	b.n	801d7f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d7bc:	7dfb      	ldrb	r3, [r7, #23]
 801d7be:	2b01      	cmp	r3, #1
 801d7c0:	d919      	bls.n	801d7f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d7c2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d7c6:	495e      	ldr	r1, [pc, #376]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d7c8:	4613      	mov	r3, r2
 801d7ca:	005b      	lsls	r3, r3, #1
 801d7cc:	4413      	add	r3, r2
 801d7ce:	00db      	lsls	r3, r3, #3
 801d7d0:	440b      	add	r3, r1
 801d7d2:	3312      	adds	r3, #18
 801d7d4:	881b      	ldrh	r3, [r3, #0]
 801d7d6:	8b3a      	ldrh	r2, [r7, #24]
 801d7d8:	429a      	cmp	r2, r3
 801d7da:	d80c      	bhi.n	801d7f6 <etharp_find_entry+0x18a>
            old_stable = i;
 801d7dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d7de:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801d7e0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d7e4:	4956      	ldr	r1, [pc, #344]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d7e6:	4613      	mov	r3, r2
 801d7e8:	005b      	lsls	r3, r3, #1
 801d7ea:	4413      	add	r3, r2
 801d7ec:	00db      	lsls	r3, r3, #3
 801d7ee:	440b      	add	r3, r1
 801d7f0:	3312      	adds	r3, #18
 801d7f2:	881b      	ldrh	r3, [r3, #0]
 801d7f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d7f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d7f8:	3301      	adds	r3, #1
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d7fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d802:	2b09      	cmp	r3, #9
 801d804:	f77f af4c 	ble.w	801d6a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d808:	7afb      	ldrb	r3, [r7, #11]
 801d80a:	f003 0302 	and.w	r3, r3, #2
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d108      	bne.n	801d824 <etharp_find_entry+0x1b8>
 801d812:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d816:	2b0a      	cmp	r3, #10
 801d818:	d107      	bne.n	801d82a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d81a:	7afb      	ldrb	r3, [r7, #11]
 801d81c:	f003 0301 	and.w	r3, r3, #1
 801d820:	2b00      	cmp	r3, #0
 801d822:	d102      	bne.n	801d82a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d828:	e085      	b.n	801d936 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d82a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d82e:	2b09      	cmp	r3, #9
 801d830:	dc02      	bgt.n	801d838 <etharp_find_entry+0x1cc>
    i = empty;
 801d832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d834:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d836:	e039      	b.n	801d8ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d838:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d83c:	2b09      	cmp	r3, #9
 801d83e:	dc14      	bgt.n	801d86a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d840:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d842:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d844:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d848:	493d      	ldr	r1, [pc, #244]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d84a:	4613      	mov	r3, r2
 801d84c:	005b      	lsls	r3, r3, #1
 801d84e:	4413      	add	r3, r2
 801d850:	00db      	lsls	r3, r3, #3
 801d852:	440b      	add	r3, r1
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	2b00      	cmp	r3, #0
 801d858:	d018      	beq.n	801d88c <etharp_find_entry+0x220>
 801d85a:	4b3a      	ldr	r3, [pc, #232]	@ (801d944 <etharp_find_entry+0x2d8>)
 801d85c:	f240 126d 	movw	r2, #365	@ 0x16d
 801d860:	493b      	ldr	r1, [pc, #236]	@ (801d950 <etharp_find_entry+0x2e4>)
 801d862:	483a      	ldr	r0, [pc, #232]	@ (801d94c <etharp_find_entry+0x2e0>)
 801d864:	f003 fe8c 	bl	8021580 <iprintf>
 801d868:	e010      	b.n	801d88c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d86a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d86e:	2b09      	cmp	r3, #9
 801d870:	dc02      	bgt.n	801d878 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d872:	8c3b      	ldrh	r3, [r7, #32]
 801d874:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d876:	e009      	b.n	801d88c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d878:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d87c:	2b09      	cmp	r3, #9
 801d87e:	dc02      	bgt.n	801d886 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d880:	8bfb      	ldrh	r3, [r7, #30]
 801d882:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d884:	e002      	b.n	801d88c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d88a:	e054      	b.n	801d936 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d88c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d890:	2b09      	cmp	r3, #9
 801d892:	dd06      	ble.n	801d8a2 <etharp_find_entry+0x236>
 801d894:	4b2b      	ldr	r3, [pc, #172]	@ (801d944 <etharp_find_entry+0x2d8>)
 801d896:	f240 127f 	movw	r2, #383	@ 0x17f
 801d89a:	492e      	ldr	r1, [pc, #184]	@ (801d954 <etharp_find_entry+0x2e8>)
 801d89c:	482b      	ldr	r0, [pc, #172]	@ (801d94c <etharp_find_entry+0x2e0>)
 801d89e:	f003 fe6f 	bl	8021580 <iprintf>
    etharp_free_entry(i);
 801d8a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f7ff fdd8 	bl	801d45c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d8ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d8b0:	2b09      	cmp	r3, #9
 801d8b2:	dd06      	ble.n	801d8c2 <etharp_find_entry+0x256>
 801d8b4:	4b23      	ldr	r3, [pc, #140]	@ (801d944 <etharp_find_entry+0x2d8>)
 801d8b6:	f240 1283 	movw	r2, #387	@ 0x183
 801d8ba:	4926      	ldr	r1, [pc, #152]	@ (801d954 <etharp_find_entry+0x2e8>)
 801d8bc:	4823      	ldr	r0, [pc, #140]	@ (801d94c <etharp_find_entry+0x2e0>)
 801d8be:	f003 fe5f 	bl	8021580 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d8c2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d8c6:	491e      	ldr	r1, [pc, #120]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d8c8:	4613      	mov	r3, r2
 801d8ca:	005b      	lsls	r3, r3, #1
 801d8cc:	4413      	add	r3, r2
 801d8ce:	00db      	lsls	r3, r3, #3
 801d8d0:	440b      	add	r3, r1
 801d8d2:	3314      	adds	r3, #20
 801d8d4:	781b      	ldrb	r3, [r3, #0]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d006      	beq.n	801d8e8 <etharp_find_entry+0x27c>
 801d8da:	4b1a      	ldr	r3, [pc, #104]	@ (801d944 <etharp_find_entry+0x2d8>)
 801d8dc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801d8e0:	491d      	ldr	r1, [pc, #116]	@ (801d958 <etharp_find_entry+0x2ec>)
 801d8e2:	481a      	ldr	r0, [pc, #104]	@ (801d94c <etharp_find_entry+0x2e0>)
 801d8e4:	f003 fe4c 	bl	8021580 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d00b      	beq.n	801d906 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d8ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	6819      	ldr	r1, [r3, #0]
 801d8f6:	4812      	ldr	r0, [pc, #72]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d8f8:	4613      	mov	r3, r2
 801d8fa:	005b      	lsls	r3, r3, #1
 801d8fc:	4413      	add	r3, r2
 801d8fe:	00db      	lsls	r3, r3, #3
 801d900:	4403      	add	r3, r0
 801d902:	3304      	adds	r3, #4
 801d904:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d906:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d90a:	490d      	ldr	r1, [pc, #52]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d90c:	4613      	mov	r3, r2
 801d90e:	005b      	lsls	r3, r3, #1
 801d910:	4413      	add	r3, r2
 801d912:	00db      	lsls	r3, r3, #3
 801d914:	440b      	add	r3, r1
 801d916:	3312      	adds	r3, #18
 801d918:	2200      	movs	r2, #0
 801d91a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d91c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d920:	4907      	ldr	r1, [pc, #28]	@ (801d940 <etharp_find_entry+0x2d4>)
 801d922:	4613      	mov	r3, r2
 801d924:	005b      	lsls	r3, r3, #1
 801d926:	4413      	add	r3, r2
 801d928:	00db      	lsls	r3, r3, #3
 801d92a:	440b      	add	r3, r1
 801d92c:	3308      	adds	r3, #8
 801d92e:	687a      	ldr	r2, [r7, #4]
 801d930:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d932:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801d936:	4618      	mov	r0, r3
 801d938:	3728      	adds	r7, #40	@ 0x28
 801d93a:	46bd      	mov	sp, r7
 801d93c:	bd80      	pop	{r7, pc}
 801d93e:	bf00      	nop
 801d940:	2002d4bc 	.word	0x2002d4bc
 801d944:	08026378 	.word	0x08026378
 801d948:	080263b0 	.word	0x080263b0
 801d94c:	080263f0 	.word	0x080263f0
 801d950:	08026418 	.word	0x08026418
 801d954:	08026430 	.word	0x08026430
 801d958:	08026444 	.word	0x08026444

0801d95c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d95c:	b580      	push	{r7, lr}
 801d95e:	b088      	sub	sp, #32
 801d960:	af02      	add	r7, sp, #8
 801d962:	60f8      	str	r0, [r7, #12]
 801d964:	60b9      	str	r1, [r7, #8]
 801d966:	607a      	str	r2, [r7, #4]
 801d968:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d970:	2b06      	cmp	r3, #6
 801d972:	d006      	beq.n	801d982 <etharp_update_arp_entry+0x26>
 801d974:	4b48      	ldr	r3, [pc, #288]	@ (801da98 <etharp_update_arp_entry+0x13c>)
 801d976:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801d97a:	4948      	ldr	r1, [pc, #288]	@ (801da9c <etharp_update_arp_entry+0x140>)
 801d97c:	4848      	ldr	r0, [pc, #288]	@ (801daa0 <etharp_update_arp_entry+0x144>)
 801d97e:	f003 fdff 	bl	8021580 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d982:	68bb      	ldr	r3, [r7, #8]
 801d984:	2b00      	cmp	r3, #0
 801d986:	d012      	beq.n	801d9ae <etharp_update_arp_entry+0x52>
 801d988:	68bb      	ldr	r3, [r7, #8]
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d00e      	beq.n	801d9ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d990:	68bb      	ldr	r3, [r7, #8]
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	68f9      	ldr	r1, [r7, #12]
 801d996:	4618      	mov	r0, r3
 801d998:	f001 fa80 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801d99c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d105      	bne.n	801d9ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d9a2:	68bb      	ldr	r3, [r7, #8]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d9aa:	2be0      	cmp	r3, #224	@ 0xe0
 801d9ac:	d102      	bne.n	801d9b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d9ae:	f06f 030f 	mvn.w	r3, #15
 801d9b2:	e06c      	b.n	801da8e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d9b4:	78fb      	ldrb	r3, [r7, #3]
 801d9b6:	68fa      	ldr	r2, [r7, #12]
 801d9b8:	4619      	mov	r1, r3
 801d9ba:	68b8      	ldr	r0, [r7, #8]
 801d9bc:	f7ff fe56 	bl	801d66c <etharp_find_entry>
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d9c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	da02      	bge.n	801d9d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d9cc:	8afb      	ldrh	r3, [r7, #22]
 801d9ce:	b25b      	sxtb	r3, r3
 801d9d0:	e05d      	b.n	801da8e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d9d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d9d6:	4933      	ldr	r1, [pc, #204]	@ (801daa4 <etharp_update_arp_entry+0x148>)
 801d9d8:	4613      	mov	r3, r2
 801d9da:	005b      	lsls	r3, r3, #1
 801d9dc:	4413      	add	r3, r2
 801d9de:	00db      	lsls	r3, r3, #3
 801d9e0:	440b      	add	r3, r1
 801d9e2:	3314      	adds	r3, #20
 801d9e4:	2202      	movs	r2, #2
 801d9e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d9e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d9ec:	492d      	ldr	r1, [pc, #180]	@ (801daa4 <etharp_update_arp_entry+0x148>)
 801d9ee:	4613      	mov	r3, r2
 801d9f0:	005b      	lsls	r3, r3, #1
 801d9f2:	4413      	add	r3, r2
 801d9f4:	00db      	lsls	r3, r3, #3
 801d9f6:	440b      	add	r3, r1
 801d9f8:	3308      	adds	r3, #8
 801d9fa:	68fa      	ldr	r2, [r7, #12]
 801d9fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d9fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da02:	4613      	mov	r3, r2
 801da04:	005b      	lsls	r3, r3, #1
 801da06:	4413      	add	r3, r2
 801da08:	00db      	lsls	r3, r3, #3
 801da0a:	3308      	adds	r3, #8
 801da0c:	4a25      	ldr	r2, [pc, #148]	@ (801daa4 <etharp_update_arp_entry+0x148>)
 801da0e:	4413      	add	r3, r2
 801da10:	3304      	adds	r3, #4
 801da12:	2206      	movs	r2, #6
 801da14:	6879      	ldr	r1, [r7, #4]
 801da16:	4618      	mov	r0, r3
 801da18:	f003 ff87 	bl	802192a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801da1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da20:	4920      	ldr	r1, [pc, #128]	@ (801daa4 <etharp_update_arp_entry+0x148>)
 801da22:	4613      	mov	r3, r2
 801da24:	005b      	lsls	r3, r3, #1
 801da26:	4413      	add	r3, r2
 801da28:	00db      	lsls	r3, r3, #3
 801da2a:	440b      	add	r3, r1
 801da2c:	3312      	adds	r3, #18
 801da2e:	2200      	movs	r2, #0
 801da30:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801da32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da36:	491b      	ldr	r1, [pc, #108]	@ (801daa4 <etharp_update_arp_entry+0x148>)
 801da38:	4613      	mov	r3, r2
 801da3a:	005b      	lsls	r3, r3, #1
 801da3c:	4413      	add	r3, r2
 801da3e:	00db      	lsls	r3, r3, #3
 801da40:	440b      	add	r3, r1
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	2b00      	cmp	r3, #0
 801da46:	d021      	beq.n	801da8c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801da48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da4c:	4915      	ldr	r1, [pc, #84]	@ (801daa4 <etharp_update_arp_entry+0x148>)
 801da4e:	4613      	mov	r3, r2
 801da50:	005b      	lsls	r3, r3, #1
 801da52:	4413      	add	r3, r2
 801da54:	00db      	lsls	r3, r3, #3
 801da56:	440b      	add	r3, r1
 801da58:	681b      	ldr	r3, [r3, #0]
 801da5a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801da5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da60:	4910      	ldr	r1, [pc, #64]	@ (801daa4 <etharp_update_arp_entry+0x148>)
 801da62:	4613      	mov	r3, r2
 801da64:	005b      	lsls	r3, r3, #1
 801da66:	4413      	add	r3, r2
 801da68:	00db      	lsls	r3, r3, #3
 801da6a:	440b      	add	r3, r1
 801da6c:	2200      	movs	r2, #0
 801da6e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801da76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801da7a:	9300      	str	r3, [sp, #0]
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	6939      	ldr	r1, [r7, #16]
 801da80:	68f8      	ldr	r0, [r7, #12]
 801da82:	f002 f96b 	bl	801fd5c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801da86:	6938      	ldr	r0, [r7, #16]
 801da88:	f7f7 fd34 	bl	80154f4 <pbuf_free>
  }
  return ERR_OK;
 801da8c:	2300      	movs	r3, #0
}
 801da8e:	4618      	mov	r0, r3
 801da90:	3718      	adds	r7, #24
 801da92:	46bd      	mov	sp, r7
 801da94:	bd80      	pop	{r7, pc}
 801da96:	bf00      	nop
 801da98:	08026378 	.word	0x08026378
 801da9c:	08026470 	.word	0x08026470
 801daa0:	080263f0 	.word	0x080263f0
 801daa4:	2002d4bc 	.word	0x2002d4bc

0801daa8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801daa8:	b580      	push	{r7, lr}
 801daaa:	b084      	sub	sp, #16
 801daac:	af00      	add	r7, sp, #0
 801daae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dab0:	2300      	movs	r3, #0
 801dab2:	60fb      	str	r3, [r7, #12]
 801dab4:	e01e      	b.n	801daf4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801dab6:	4913      	ldr	r1, [pc, #76]	@ (801db04 <etharp_cleanup_netif+0x5c>)
 801dab8:	68fa      	ldr	r2, [r7, #12]
 801daba:	4613      	mov	r3, r2
 801dabc:	005b      	lsls	r3, r3, #1
 801dabe:	4413      	add	r3, r2
 801dac0:	00db      	lsls	r3, r3, #3
 801dac2:	440b      	add	r3, r1
 801dac4:	3314      	adds	r3, #20
 801dac6:	781b      	ldrb	r3, [r3, #0]
 801dac8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801daca:	7afb      	ldrb	r3, [r7, #11]
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d00e      	beq.n	801daee <etharp_cleanup_netif+0x46>
 801dad0:	490c      	ldr	r1, [pc, #48]	@ (801db04 <etharp_cleanup_netif+0x5c>)
 801dad2:	68fa      	ldr	r2, [r7, #12]
 801dad4:	4613      	mov	r3, r2
 801dad6:	005b      	lsls	r3, r3, #1
 801dad8:	4413      	add	r3, r2
 801dada:	00db      	lsls	r3, r3, #3
 801dadc:	440b      	add	r3, r1
 801dade:	3308      	adds	r3, #8
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	687a      	ldr	r2, [r7, #4]
 801dae4:	429a      	cmp	r2, r3
 801dae6:	d102      	bne.n	801daee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801dae8:	68f8      	ldr	r0, [r7, #12]
 801daea:	f7ff fcb7 	bl	801d45c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801daee:	68fb      	ldr	r3, [r7, #12]
 801daf0:	3301      	adds	r3, #1
 801daf2:	60fb      	str	r3, [r7, #12]
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	2b09      	cmp	r3, #9
 801daf8:	dddd      	ble.n	801dab6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801dafa:	bf00      	nop
 801dafc:	bf00      	nop
 801dafe:	3710      	adds	r7, #16
 801db00:	46bd      	mov	sp, r7
 801db02:	bd80      	pop	{r7, pc}
 801db04:	2002d4bc 	.word	0x2002d4bc

0801db08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801db08:	b5b0      	push	{r4, r5, r7, lr}
 801db0a:	b08a      	sub	sp, #40	@ 0x28
 801db0c:	af04      	add	r7, sp, #16
 801db0e:	6078      	str	r0, [r7, #4]
 801db10:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801db12:	683b      	ldr	r3, [r7, #0]
 801db14:	2b00      	cmp	r3, #0
 801db16:	d107      	bne.n	801db28 <etharp_input+0x20>
 801db18:	4b49      	ldr	r3, [pc, #292]	@ (801dc40 <etharp_input+0x138>)
 801db1a:	f240 228a 	movw	r2, #650	@ 0x28a
 801db1e:	4949      	ldr	r1, [pc, #292]	@ (801dc44 <etharp_input+0x13c>)
 801db20:	4849      	ldr	r0, [pc, #292]	@ (801dc48 <etharp_input+0x140>)
 801db22:	f003 fd2d 	bl	8021580 <iprintf>
 801db26:	e088      	b.n	801dc3a <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	685b      	ldr	r3, [r3, #4]
 801db2c:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801db2e:	697b      	ldr	r3, [r7, #20]
 801db30:	881b      	ldrh	r3, [r3, #0]
 801db32:	b29b      	uxth	r3, r3
 801db34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801db38:	d10c      	bne.n	801db54 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801db3a:	697b      	ldr	r3, [r7, #20]
 801db3c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801db3e:	2b06      	cmp	r3, #6
 801db40:	d108      	bne.n	801db54 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801db42:	697b      	ldr	r3, [r7, #20]
 801db44:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801db46:	2b04      	cmp	r3, #4
 801db48:	d104      	bne.n	801db54 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801db4a:	697b      	ldr	r3, [r7, #20]
 801db4c:	885b      	ldrh	r3, [r3, #2]
 801db4e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801db50:	2b08      	cmp	r3, #8
 801db52:	d00f      	beq.n	801db74 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801db54:	4b3d      	ldr	r3, [pc, #244]	@ (801dc4c <etharp_input+0x144>)
 801db56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801db58:	3301      	adds	r3, #1
 801db5a:	b29a      	uxth	r2, r3
 801db5c:	4b3b      	ldr	r3, [pc, #236]	@ (801dc4c <etharp_input+0x144>)
 801db5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801db60:	4b3a      	ldr	r3, [pc, #232]	@ (801dc4c <etharp_input+0x144>)
 801db62:	8bdb      	ldrh	r3, [r3, #30]
 801db64:	3301      	adds	r3, #1
 801db66:	b29a      	uxth	r2, r3
 801db68:	4b38      	ldr	r3, [pc, #224]	@ (801dc4c <etharp_input+0x144>)
 801db6a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801db6c:	6878      	ldr	r0, [r7, #4]
 801db6e:	f7f7 fcc1 	bl	80154f4 <pbuf_free>
    return;
 801db72:	e062      	b.n	801dc3a <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801db74:	4b35      	ldr	r3, [pc, #212]	@ (801dc4c <etharp_input+0x144>)
 801db76:	8b5b      	ldrh	r3, [r3, #26]
 801db78:	3301      	adds	r3, #1
 801db7a:	b29a      	uxth	r2, r3
 801db7c:	4b33      	ldr	r3, [pc, #204]	@ (801dc4c <etharp_input+0x144>)
 801db7e:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801db80:	697b      	ldr	r3, [r7, #20]
 801db82:	330e      	adds	r3, #14
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801db88:	697b      	ldr	r3, [r7, #20]
 801db8a:	3318      	adds	r3, #24
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801db90:	683b      	ldr	r3, [r7, #0]
 801db92:	3304      	adds	r3, #4
 801db94:	681b      	ldr	r3, [r3, #0]
 801db96:	2b00      	cmp	r3, #0
 801db98:	d102      	bne.n	801dba0 <etharp_input+0x98>
    for_us = 0;
 801db9a:	2300      	movs	r3, #0
 801db9c:	74fb      	strb	r3, [r7, #19]
 801db9e:	e009      	b.n	801dbb4 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801dba0:	68ba      	ldr	r2, [r7, #8]
 801dba2:	683b      	ldr	r3, [r7, #0]
 801dba4:	3304      	adds	r3, #4
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	429a      	cmp	r2, r3
 801dbaa:	bf0c      	ite	eq
 801dbac:	2301      	moveq	r3, #1
 801dbae:	2300      	movne	r3, #0
 801dbb0:	b2db      	uxtb	r3, r3
 801dbb2:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801dbb4:	697b      	ldr	r3, [r7, #20]
 801dbb6:	f103 0208 	add.w	r2, r3, #8
 801dbba:	7cfb      	ldrb	r3, [r7, #19]
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d001      	beq.n	801dbc4 <etharp_input+0xbc>
 801dbc0:	2301      	movs	r3, #1
 801dbc2:	e000      	b.n	801dbc6 <etharp_input+0xbe>
 801dbc4:	2302      	movs	r3, #2
 801dbc6:	f107 010c 	add.w	r1, r7, #12
 801dbca:	6838      	ldr	r0, [r7, #0]
 801dbcc:	f7ff fec6 	bl	801d95c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801dbd0:	697b      	ldr	r3, [r7, #20]
 801dbd2:	88db      	ldrh	r3, [r3, #6]
 801dbd4:	b29b      	uxth	r3, r3
 801dbd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dbda:	d003      	beq.n	801dbe4 <etharp_input+0xdc>
 801dbdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dbe0:	d025      	beq.n	801dc2e <etharp_input+0x126>
 801dbe2:	e01d      	b.n	801dc20 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801dbe4:	7cfb      	ldrb	r3, [r7, #19]
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d023      	beq.n	801dc32 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801dbea:	683b      	ldr	r3, [r7, #0]
 801dbec:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801dbf0:	697b      	ldr	r3, [r7, #20]
 801dbf2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801dbf6:	683b      	ldr	r3, [r7, #0]
 801dbf8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801dbfc:	683b      	ldr	r3, [r7, #0]
 801dbfe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801dc00:	697a      	ldr	r2, [r7, #20]
 801dc02:	3208      	adds	r2, #8
        etharp_raw(netif,
 801dc04:	2102      	movs	r1, #2
 801dc06:	9103      	str	r1, [sp, #12]
 801dc08:	f107 010c 	add.w	r1, r7, #12
 801dc0c:	9102      	str	r1, [sp, #8]
 801dc0e:	9201      	str	r2, [sp, #4]
 801dc10:	9300      	str	r3, [sp, #0]
 801dc12:	462b      	mov	r3, r5
 801dc14:	4622      	mov	r2, r4
 801dc16:	4601      	mov	r1, r0
 801dc18:	6838      	ldr	r0, [r7, #0]
 801dc1a:	f000 fb0b 	bl	801e234 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801dc1e:	e008      	b.n	801dc32 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801dc20:	4b0a      	ldr	r3, [pc, #40]	@ (801dc4c <etharp_input+0x144>)
 801dc22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801dc24:	3301      	adds	r3, #1
 801dc26:	b29a      	uxth	r2, r3
 801dc28:	4b08      	ldr	r3, [pc, #32]	@ (801dc4c <etharp_input+0x144>)
 801dc2a:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801dc2c:	e002      	b.n	801dc34 <etharp_input+0x12c>
      break;
 801dc2e:	bf00      	nop
 801dc30:	e000      	b.n	801dc34 <etharp_input+0x12c>
      break;
 801dc32:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801dc34:	6878      	ldr	r0, [r7, #4]
 801dc36:	f7f7 fc5d 	bl	80154f4 <pbuf_free>
}
 801dc3a:	3718      	adds	r7, #24
 801dc3c:	46bd      	mov	sp, r7
 801dc3e:	bdb0      	pop	{r4, r5, r7, pc}
 801dc40:	08026378 	.word	0x08026378
 801dc44:	080264c8 	.word	0x080264c8
 801dc48:	080263f0 	.word	0x080263f0
 801dc4c:	2002d358 	.word	0x2002d358

0801dc50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b086      	sub	sp, #24
 801dc54:	af02      	add	r7, sp, #8
 801dc56:	60f8      	str	r0, [r7, #12]
 801dc58:	60b9      	str	r1, [r7, #8]
 801dc5a:	4613      	mov	r3, r2
 801dc5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801dc5e:	79fa      	ldrb	r2, [r7, #7]
 801dc60:	4944      	ldr	r1, [pc, #272]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dc62:	4613      	mov	r3, r2
 801dc64:	005b      	lsls	r3, r3, #1
 801dc66:	4413      	add	r3, r2
 801dc68:	00db      	lsls	r3, r3, #3
 801dc6a:	440b      	add	r3, r1
 801dc6c:	3314      	adds	r3, #20
 801dc6e:	781b      	ldrb	r3, [r3, #0]
 801dc70:	2b01      	cmp	r3, #1
 801dc72:	d806      	bhi.n	801dc82 <etharp_output_to_arp_index+0x32>
 801dc74:	4b40      	ldr	r3, [pc, #256]	@ (801dd78 <etharp_output_to_arp_index+0x128>)
 801dc76:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801dc7a:	4940      	ldr	r1, [pc, #256]	@ (801dd7c <etharp_output_to_arp_index+0x12c>)
 801dc7c:	4840      	ldr	r0, [pc, #256]	@ (801dd80 <etharp_output_to_arp_index+0x130>)
 801dc7e:	f003 fc7f 	bl	8021580 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801dc82:	79fa      	ldrb	r2, [r7, #7]
 801dc84:	493b      	ldr	r1, [pc, #236]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dc86:	4613      	mov	r3, r2
 801dc88:	005b      	lsls	r3, r3, #1
 801dc8a:	4413      	add	r3, r2
 801dc8c:	00db      	lsls	r3, r3, #3
 801dc8e:	440b      	add	r3, r1
 801dc90:	3314      	adds	r3, #20
 801dc92:	781b      	ldrb	r3, [r3, #0]
 801dc94:	2b02      	cmp	r3, #2
 801dc96:	d153      	bne.n	801dd40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801dc98:	79fa      	ldrb	r2, [r7, #7]
 801dc9a:	4936      	ldr	r1, [pc, #216]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dc9c:	4613      	mov	r3, r2
 801dc9e:	005b      	lsls	r3, r3, #1
 801dca0:	4413      	add	r3, r2
 801dca2:	00db      	lsls	r3, r3, #3
 801dca4:	440b      	add	r3, r1
 801dca6:	3312      	adds	r3, #18
 801dca8:	881b      	ldrh	r3, [r3, #0]
 801dcaa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801dcae:	d919      	bls.n	801dce4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801dcb0:	79fa      	ldrb	r2, [r7, #7]
 801dcb2:	4613      	mov	r3, r2
 801dcb4:	005b      	lsls	r3, r3, #1
 801dcb6:	4413      	add	r3, r2
 801dcb8:	00db      	lsls	r3, r3, #3
 801dcba:	4a2e      	ldr	r2, [pc, #184]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dcbc:	4413      	add	r3, r2
 801dcbe:	3304      	adds	r3, #4
 801dcc0:	4619      	mov	r1, r3
 801dcc2:	68f8      	ldr	r0, [r7, #12]
 801dcc4:	f000 fb72 	bl	801e3ac <etharp_request>
 801dcc8:	4603      	mov	r3, r0
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d138      	bne.n	801dd40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801dcce:	79fa      	ldrb	r2, [r7, #7]
 801dcd0:	4928      	ldr	r1, [pc, #160]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dcd2:	4613      	mov	r3, r2
 801dcd4:	005b      	lsls	r3, r3, #1
 801dcd6:	4413      	add	r3, r2
 801dcd8:	00db      	lsls	r3, r3, #3
 801dcda:	440b      	add	r3, r1
 801dcdc:	3314      	adds	r3, #20
 801dcde:	2203      	movs	r2, #3
 801dce0:	701a      	strb	r2, [r3, #0]
 801dce2:	e02d      	b.n	801dd40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801dce4:	79fa      	ldrb	r2, [r7, #7]
 801dce6:	4923      	ldr	r1, [pc, #140]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dce8:	4613      	mov	r3, r2
 801dcea:	005b      	lsls	r3, r3, #1
 801dcec:	4413      	add	r3, r2
 801dcee:	00db      	lsls	r3, r3, #3
 801dcf0:	440b      	add	r3, r1
 801dcf2:	3312      	adds	r3, #18
 801dcf4:	881b      	ldrh	r3, [r3, #0]
 801dcf6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801dcfa:	d321      	bcc.n	801dd40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801dcfc:	79fa      	ldrb	r2, [r7, #7]
 801dcfe:	4613      	mov	r3, r2
 801dd00:	005b      	lsls	r3, r3, #1
 801dd02:	4413      	add	r3, r2
 801dd04:	00db      	lsls	r3, r3, #3
 801dd06:	4a1b      	ldr	r2, [pc, #108]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dd08:	4413      	add	r3, r2
 801dd0a:	1d19      	adds	r1, r3, #4
 801dd0c:	79fa      	ldrb	r2, [r7, #7]
 801dd0e:	4613      	mov	r3, r2
 801dd10:	005b      	lsls	r3, r3, #1
 801dd12:	4413      	add	r3, r2
 801dd14:	00db      	lsls	r3, r3, #3
 801dd16:	3308      	adds	r3, #8
 801dd18:	4a16      	ldr	r2, [pc, #88]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dd1a:	4413      	add	r3, r2
 801dd1c:	3304      	adds	r3, #4
 801dd1e:	461a      	mov	r2, r3
 801dd20:	68f8      	ldr	r0, [r7, #12]
 801dd22:	f000 fb21 	bl	801e368 <etharp_request_dst>
 801dd26:	4603      	mov	r3, r0
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d109      	bne.n	801dd40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801dd2c:	79fa      	ldrb	r2, [r7, #7]
 801dd2e:	4911      	ldr	r1, [pc, #68]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dd30:	4613      	mov	r3, r2
 801dd32:	005b      	lsls	r3, r3, #1
 801dd34:	4413      	add	r3, r2
 801dd36:	00db      	lsls	r3, r3, #3
 801dd38:	440b      	add	r3, r1
 801dd3a:	3314      	adds	r3, #20
 801dd3c:	2203      	movs	r2, #3
 801dd3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801dd46:	79fa      	ldrb	r2, [r7, #7]
 801dd48:	4613      	mov	r3, r2
 801dd4a:	005b      	lsls	r3, r3, #1
 801dd4c:	4413      	add	r3, r2
 801dd4e:	00db      	lsls	r3, r3, #3
 801dd50:	3308      	adds	r3, #8
 801dd52:	4a08      	ldr	r2, [pc, #32]	@ (801dd74 <etharp_output_to_arp_index+0x124>)
 801dd54:	4413      	add	r3, r2
 801dd56:	3304      	adds	r3, #4
 801dd58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801dd5c:	9200      	str	r2, [sp, #0]
 801dd5e:	460a      	mov	r2, r1
 801dd60:	68b9      	ldr	r1, [r7, #8]
 801dd62:	68f8      	ldr	r0, [r7, #12]
 801dd64:	f001 fffa 	bl	801fd5c <ethernet_output>
 801dd68:	4603      	mov	r3, r0
}
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	3710      	adds	r7, #16
 801dd6e:	46bd      	mov	sp, r7
 801dd70:	bd80      	pop	{r7, pc}
 801dd72:	bf00      	nop
 801dd74:	2002d4bc 	.word	0x2002d4bc
 801dd78:	08026378 	.word	0x08026378
 801dd7c:	080264e8 	.word	0x080264e8
 801dd80:	080263f0 	.word	0x080263f0

0801dd84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801dd84:	b580      	push	{r7, lr}
 801dd86:	b08a      	sub	sp, #40	@ 0x28
 801dd88:	af02      	add	r7, sp, #8
 801dd8a:	60f8      	str	r0, [r7, #12]
 801dd8c:	60b9      	str	r1, [r7, #8]
 801dd8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	d106      	bne.n	801dda8 <etharp_output+0x24>
 801dd9a:	4b76      	ldr	r3, [pc, #472]	@ (801df74 <etharp_output+0x1f0>)
 801dd9c:	f240 321e 	movw	r2, #798	@ 0x31e
 801dda0:	4975      	ldr	r1, [pc, #468]	@ (801df78 <etharp_output+0x1f4>)
 801dda2:	4876      	ldr	r0, [pc, #472]	@ (801df7c <etharp_output+0x1f8>)
 801dda4:	f003 fbec 	bl	8021580 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801dda8:	68bb      	ldr	r3, [r7, #8]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d106      	bne.n	801ddbc <etharp_output+0x38>
 801ddae:	4b71      	ldr	r3, [pc, #452]	@ (801df74 <etharp_output+0x1f0>)
 801ddb0:	f240 321f 	movw	r2, #799	@ 0x31f
 801ddb4:	4972      	ldr	r1, [pc, #456]	@ (801df80 <etharp_output+0x1fc>)
 801ddb6:	4871      	ldr	r0, [pc, #452]	@ (801df7c <etharp_output+0x1f8>)
 801ddb8:	f003 fbe2 	bl	8021580 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d106      	bne.n	801ddd0 <etharp_output+0x4c>
 801ddc2:	4b6c      	ldr	r3, [pc, #432]	@ (801df74 <etharp_output+0x1f0>)
 801ddc4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ddc8:	496e      	ldr	r1, [pc, #440]	@ (801df84 <etharp_output+0x200>)
 801ddca:	486c      	ldr	r0, [pc, #432]	@ (801df7c <etharp_output+0x1f8>)
 801ddcc:	f003 fbd8 	bl	8021580 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	68f9      	ldr	r1, [r7, #12]
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	f001 f860 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801dddc:	4603      	mov	r3, r0
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d002      	beq.n	801dde8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801dde2:	4b69      	ldr	r3, [pc, #420]	@ (801df88 <etharp_output+0x204>)
 801dde4:	61fb      	str	r3, [r7, #28]
 801dde6:	e0b5      	b.n	801df54 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ddf0:	2be0      	cmp	r3, #224	@ 0xe0
 801ddf2:	d118      	bne.n	801de26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ddf4:	2301      	movs	r3, #1
 801ddf6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ddfc:	235e      	movs	r3, #94	@ 0x5e
 801ddfe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	3301      	adds	r3, #1
 801de04:	781b      	ldrb	r3, [r3, #0]
 801de06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801de0a:	b2db      	uxtb	r3, r3
 801de0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	3302      	adds	r3, #2
 801de12:	781b      	ldrb	r3, [r3, #0]
 801de14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	3303      	adds	r3, #3
 801de1a:	781b      	ldrb	r3, [r3, #0]
 801de1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801de1e:	f107 0310 	add.w	r3, r7, #16
 801de22:	61fb      	str	r3, [r7, #28]
 801de24:	e096      	b.n	801df54 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	681a      	ldr	r2, [r3, #0]
 801de2a:	68fb      	ldr	r3, [r7, #12]
 801de2c:	3304      	adds	r3, #4
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	405a      	eors	r2, r3
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	3308      	adds	r3, #8
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	4013      	ands	r3, r2
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d012      	beq.n	801de64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801de44:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801de48:	4293      	cmp	r3, r2
 801de4a:	d00b      	beq.n	801de64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	330c      	adds	r3, #12
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d003      	beq.n	801de5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	330c      	adds	r3, #12
 801de5a:	61bb      	str	r3, [r7, #24]
 801de5c:	e002      	b.n	801de64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801de5e:	f06f 0303 	mvn.w	r3, #3
 801de62:	e083      	b.n	801df6c <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801de64:	4b49      	ldr	r3, [pc, #292]	@ (801df8c <etharp_output+0x208>)
 801de66:	781b      	ldrb	r3, [r3, #0]
 801de68:	4619      	mov	r1, r3
 801de6a:	4a49      	ldr	r2, [pc, #292]	@ (801df90 <etharp_output+0x20c>)
 801de6c:	460b      	mov	r3, r1
 801de6e:	005b      	lsls	r3, r3, #1
 801de70:	440b      	add	r3, r1
 801de72:	00db      	lsls	r3, r3, #3
 801de74:	4413      	add	r3, r2
 801de76:	3314      	adds	r3, #20
 801de78:	781b      	ldrb	r3, [r3, #0]
 801de7a:	2b01      	cmp	r3, #1
 801de7c:	d92b      	bls.n	801ded6 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801de7e:	4b43      	ldr	r3, [pc, #268]	@ (801df8c <etharp_output+0x208>)
 801de80:	781b      	ldrb	r3, [r3, #0]
 801de82:	4619      	mov	r1, r3
 801de84:	4a42      	ldr	r2, [pc, #264]	@ (801df90 <etharp_output+0x20c>)
 801de86:	460b      	mov	r3, r1
 801de88:	005b      	lsls	r3, r3, #1
 801de8a:	440b      	add	r3, r1
 801de8c:	00db      	lsls	r3, r3, #3
 801de8e:	4413      	add	r3, r2
 801de90:	3308      	adds	r3, #8
 801de92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801de94:	68fa      	ldr	r2, [r7, #12]
 801de96:	429a      	cmp	r2, r3
 801de98:	d11d      	bne.n	801ded6 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801de9a:	69bb      	ldr	r3, [r7, #24]
 801de9c:	681a      	ldr	r2, [r3, #0]
 801de9e:	4b3b      	ldr	r3, [pc, #236]	@ (801df8c <etharp_output+0x208>)
 801dea0:	781b      	ldrb	r3, [r3, #0]
 801dea2:	4618      	mov	r0, r3
 801dea4:	493a      	ldr	r1, [pc, #232]	@ (801df90 <etharp_output+0x20c>)
 801dea6:	4603      	mov	r3, r0
 801dea8:	005b      	lsls	r3, r3, #1
 801deaa:	4403      	add	r3, r0
 801deac:	00db      	lsls	r3, r3, #3
 801deae:	440b      	add	r3, r1
 801deb0:	3304      	adds	r3, #4
 801deb2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801deb4:	429a      	cmp	r2, r3
 801deb6:	d10e      	bne.n	801ded6 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801deb8:	4b36      	ldr	r3, [pc, #216]	@ (801df94 <etharp_output+0x210>)
 801deba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801debc:	3301      	adds	r3, #1
 801debe:	b29a      	uxth	r2, r3
 801dec0:	4b34      	ldr	r3, [pc, #208]	@ (801df94 <etharp_output+0x210>)
 801dec2:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801dec4:	4b31      	ldr	r3, [pc, #196]	@ (801df8c <etharp_output+0x208>)
 801dec6:	781b      	ldrb	r3, [r3, #0]
 801dec8:	461a      	mov	r2, r3
 801deca:	68b9      	ldr	r1, [r7, #8]
 801decc:	68f8      	ldr	r0, [r7, #12]
 801dece:	f7ff febf 	bl	801dc50 <etharp_output_to_arp_index>
 801ded2:	4603      	mov	r3, r0
 801ded4:	e04a      	b.n	801df6c <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ded6:	2300      	movs	r3, #0
 801ded8:	75fb      	strb	r3, [r7, #23]
 801deda:	e031      	b.n	801df40 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dedc:	7dfa      	ldrb	r2, [r7, #23]
 801dede:	492c      	ldr	r1, [pc, #176]	@ (801df90 <etharp_output+0x20c>)
 801dee0:	4613      	mov	r3, r2
 801dee2:	005b      	lsls	r3, r3, #1
 801dee4:	4413      	add	r3, r2
 801dee6:	00db      	lsls	r3, r3, #3
 801dee8:	440b      	add	r3, r1
 801deea:	3314      	adds	r3, #20
 801deec:	781b      	ldrb	r3, [r3, #0]
 801deee:	2b01      	cmp	r3, #1
 801def0:	d923      	bls.n	801df3a <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801def2:	7dfa      	ldrb	r2, [r7, #23]
 801def4:	4926      	ldr	r1, [pc, #152]	@ (801df90 <etharp_output+0x20c>)
 801def6:	4613      	mov	r3, r2
 801def8:	005b      	lsls	r3, r3, #1
 801defa:	4413      	add	r3, r2
 801defc:	00db      	lsls	r3, r3, #3
 801defe:	440b      	add	r3, r1
 801df00:	3308      	adds	r3, #8
 801df02:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801df04:	68fa      	ldr	r2, [r7, #12]
 801df06:	429a      	cmp	r2, r3
 801df08:	d117      	bne.n	801df3a <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801df0a:	69bb      	ldr	r3, [r7, #24]
 801df0c:	6819      	ldr	r1, [r3, #0]
 801df0e:	7dfa      	ldrb	r2, [r7, #23]
 801df10:	481f      	ldr	r0, [pc, #124]	@ (801df90 <etharp_output+0x20c>)
 801df12:	4613      	mov	r3, r2
 801df14:	005b      	lsls	r3, r3, #1
 801df16:	4413      	add	r3, r2
 801df18:	00db      	lsls	r3, r3, #3
 801df1a:	4403      	add	r3, r0
 801df1c:	3304      	adds	r3, #4
 801df1e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801df20:	4299      	cmp	r1, r3
 801df22:	d10a      	bne.n	801df3a <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801df24:	4a19      	ldr	r2, [pc, #100]	@ (801df8c <etharp_output+0x208>)
 801df26:	7dfb      	ldrb	r3, [r7, #23]
 801df28:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801df2a:	7dfb      	ldrb	r3, [r7, #23]
 801df2c:	461a      	mov	r2, r3
 801df2e:	68b9      	ldr	r1, [r7, #8]
 801df30:	68f8      	ldr	r0, [r7, #12]
 801df32:	f7ff fe8d 	bl	801dc50 <etharp_output_to_arp_index>
 801df36:	4603      	mov	r3, r0
 801df38:	e018      	b.n	801df6c <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801df3a:	7dfb      	ldrb	r3, [r7, #23]
 801df3c:	3301      	adds	r3, #1
 801df3e:	75fb      	strb	r3, [r7, #23]
 801df40:	7dfb      	ldrb	r3, [r7, #23]
 801df42:	2b09      	cmp	r3, #9
 801df44:	d9ca      	bls.n	801dedc <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801df46:	68ba      	ldr	r2, [r7, #8]
 801df48:	69b9      	ldr	r1, [r7, #24]
 801df4a:	68f8      	ldr	r0, [r7, #12]
 801df4c:	f000 f824 	bl	801df98 <etharp_query>
 801df50:	4603      	mov	r3, r0
 801df52:	e00b      	b.n	801df6c <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801df5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801df5e:	9300      	str	r3, [sp, #0]
 801df60:	69fb      	ldr	r3, [r7, #28]
 801df62:	68b9      	ldr	r1, [r7, #8]
 801df64:	68f8      	ldr	r0, [r7, #12]
 801df66:	f001 fef9 	bl	801fd5c <ethernet_output>
 801df6a:	4603      	mov	r3, r0
}
 801df6c:	4618      	mov	r0, r3
 801df6e:	3720      	adds	r7, #32
 801df70:	46bd      	mov	sp, r7
 801df72:	bd80      	pop	{r7, pc}
 801df74:	08026378 	.word	0x08026378
 801df78:	080264c8 	.word	0x080264c8
 801df7c:	080263f0 	.word	0x080263f0
 801df80:	08026518 	.word	0x08026518
 801df84:	080264b8 	.word	0x080264b8
 801df88:	08027414 	.word	0x08027414
 801df8c:	2002d5ac 	.word	0x2002d5ac
 801df90:	2002d4bc 	.word	0x2002d4bc
 801df94:	2002d358 	.word	0x2002d358

0801df98 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801df98:	b580      	push	{r7, lr}
 801df9a:	b08c      	sub	sp, #48	@ 0x30
 801df9c:	af02      	add	r7, sp, #8
 801df9e:	60f8      	str	r0, [r7, #12]
 801dfa0:	60b9      	str	r1, [r7, #8]
 801dfa2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	3326      	adds	r3, #38	@ 0x26
 801dfa8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801dfaa:	23ff      	movs	r3, #255	@ 0xff
 801dfac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801dfb0:	2300      	movs	r3, #0
 801dfb2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dfb4:	68bb      	ldr	r3, [r7, #8]
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	68f9      	ldr	r1, [r7, #12]
 801dfba:	4618      	mov	r0, r3
 801dfbc:	f000 ff6e 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801dfc0:	4603      	mov	r3, r0
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	d10c      	bne.n	801dfe0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801dfc6:	68bb      	ldr	r3, [r7, #8]
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dfce:	2be0      	cmp	r3, #224	@ 0xe0
 801dfd0:	d006      	beq.n	801dfe0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801dfd2:	68bb      	ldr	r3, [r7, #8]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d003      	beq.n	801dfe0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801dfd8:	68bb      	ldr	r3, [r7, #8]
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d102      	bne.n	801dfe6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801dfe0:	f06f 030f 	mvn.w	r3, #15
 801dfe4:	e110      	b.n	801e208 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801dfe6:	68fa      	ldr	r2, [r7, #12]
 801dfe8:	2101      	movs	r1, #1
 801dfea:	68b8      	ldr	r0, [r7, #8]
 801dfec:	f7ff fb3e 	bl	801d66c <etharp_find_entry>
 801dff0:	4603      	mov	r3, r0
 801dff2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801dff4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	da0b      	bge.n	801e014 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d005      	beq.n	801e00e <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801e002:	4b83      	ldr	r3, [pc, #524]	@ (801e210 <etharp_query+0x278>)
 801e004:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e006:	3301      	adds	r3, #1
 801e008:	b29a      	uxth	r2, r3
 801e00a:	4b81      	ldr	r3, [pc, #516]	@ (801e210 <etharp_query+0x278>)
 801e00c:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801e00e:	8a7b      	ldrh	r3, [r7, #18]
 801e010:	b25b      	sxtb	r3, r3
 801e012:	e0f9      	b.n	801e208 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e014:	8a7b      	ldrh	r3, [r7, #18]
 801e016:	2b7e      	cmp	r3, #126	@ 0x7e
 801e018:	d906      	bls.n	801e028 <etharp_query+0x90>
 801e01a:	4b7e      	ldr	r3, [pc, #504]	@ (801e214 <etharp_query+0x27c>)
 801e01c:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801e020:	497d      	ldr	r1, [pc, #500]	@ (801e218 <etharp_query+0x280>)
 801e022:	487e      	ldr	r0, [pc, #504]	@ (801e21c <etharp_query+0x284>)
 801e024:	f003 faac 	bl	8021580 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801e028:	8a7b      	ldrh	r3, [r7, #18]
 801e02a:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e02c:	7c7a      	ldrb	r2, [r7, #17]
 801e02e:	497c      	ldr	r1, [pc, #496]	@ (801e220 <etharp_query+0x288>)
 801e030:	4613      	mov	r3, r2
 801e032:	005b      	lsls	r3, r3, #1
 801e034:	4413      	add	r3, r2
 801e036:	00db      	lsls	r3, r3, #3
 801e038:	440b      	add	r3, r1
 801e03a:	3314      	adds	r3, #20
 801e03c:	781b      	ldrb	r3, [r3, #0]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d115      	bne.n	801e06e <etharp_query+0xd6>
    is_new_entry = 1;
 801e042:	2301      	movs	r3, #1
 801e044:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e046:	7c7a      	ldrb	r2, [r7, #17]
 801e048:	4975      	ldr	r1, [pc, #468]	@ (801e220 <etharp_query+0x288>)
 801e04a:	4613      	mov	r3, r2
 801e04c:	005b      	lsls	r3, r3, #1
 801e04e:	4413      	add	r3, r2
 801e050:	00db      	lsls	r3, r3, #3
 801e052:	440b      	add	r3, r1
 801e054:	3314      	adds	r3, #20
 801e056:	2201      	movs	r2, #1
 801e058:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e05a:	7c7a      	ldrb	r2, [r7, #17]
 801e05c:	4970      	ldr	r1, [pc, #448]	@ (801e220 <etharp_query+0x288>)
 801e05e:	4613      	mov	r3, r2
 801e060:	005b      	lsls	r3, r3, #1
 801e062:	4413      	add	r3, r2
 801e064:	00db      	lsls	r3, r3, #3
 801e066:	440b      	add	r3, r1
 801e068:	3308      	adds	r3, #8
 801e06a:	68fa      	ldr	r2, [r7, #12]
 801e06c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e06e:	7c7a      	ldrb	r2, [r7, #17]
 801e070:	496b      	ldr	r1, [pc, #428]	@ (801e220 <etharp_query+0x288>)
 801e072:	4613      	mov	r3, r2
 801e074:	005b      	lsls	r3, r3, #1
 801e076:	4413      	add	r3, r2
 801e078:	00db      	lsls	r3, r3, #3
 801e07a:	440b      	add	r3, r1
 801e07c:	3314      	adds	r3, #20
 801e07e:	781b      	ldrb	r3, [r3, #0]
 801e080:	2b01      	cmp	r3, #1
 801e082:	d011      	beq.n	801e0a8 <etharp_query+0x110>
 801e084:	7c7a      	ldrb	r2, [r7, #17]
 801e086:	4966      	ldr	r1, [pc, #408]	@ (801e220 <etharp_query+0x288>)
 801e088:	4613      	mov	r3, r2
 801e08a:	005b      	lsls	r3, r3, #1
 801e08c:	4413      	add	r3, r2
 801e08e:	00db      	lsls	r3, r3, #3
 801e090:	440b      	add	r3, r1
 801e092:	3314      	adds	r3, #20
 801e094:	781b      	ldrb	r3, [r3, #0]
 801e096:	2b01      	cmp	r3, #1
 801e098:	d806      	bhi.n	801e0a8 <etharp_query+0x110>
 801e09a:	4b5e      	ldr	r3, [pc, #376]	@ (801e214 <etharp_query+0x27c>)
 801e09c:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801e0a0:	4960      	ldr	r1, [pc, #384]	@ (801e224 <etharp_query+0x28c>)
 801e0a2:	485e      	ldr	r0, [pc, #376]	@ (801e21c <etharp_query+0x284>)
 801e0a4:	f003 fa6c 	bl	8021580 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e0a8:	6a3b      	ldr	r3, [r7, #32]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d102      	bne.n	801e0b4 <etharp_query+0x11c>
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d10c      	bne.n	801e0ce <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e0b4:	68b9      	ldr	r1, [r7, #8]
 801e0b6:	68f8      	ldr	r0, [r7, #12]
 801e0b8:	f000 f978 	bl	801e3ac <etharp_request>
 801e0bc:	4603      	mov	r3, r0
 801e0be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d102      	bne.n	801e0ce <etharp_query+0x136>
      return result;
 801e0c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801e0cc:	e09c      	b.n	801e208 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d106      	bne.n	801e0e2 <etharp_query+0x14a>
 801e0d4:	4b4f      	ldr	r3, [pc, #316]	@ (801e214 <etharp_query+0x27c>)
 801e0d6:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801e0da:	4953      	ldr	r1, [pc, #332]	@ (801e228 <etharp_query+0x290>)
 801e0dc:	484f      	ldr	r0, [pc, #316]	@ (801e21c <etharp_query+0x284>)
 801e0de:	f003 fa4f 	bl	8021580 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e0e2:	7c7a      	ldrb	r2, [r7, #17]
 801e0e4:	494e      	ldr	r1, [pc, #312]	@ (801e220 <etharp_query+0x288>)
 801e0e6:	4613      	mov	r3, r2
 801e0e8:	005b      	lsls	r3, r3, #1
 801e0ea:	4413      	add	r3, r2
 801e0ec:	00db      	lsls	r3, r3, #3
 801e0ee:	440b      	add	r3, r1
 801e0f0:	3314      	adds	r3, #20
 801e0f2:	781b      	ldrb	r3, [r3, #0]
 801e0f4:	2b01      	cmp	r3, #1
 801e0f6:	d917      	bls.n	801e128 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801e0f8:	4a4c      	ldr	r2, [pc, #304]	@ (801e22c <etharp_query+0x294>)
 801e0fa:	7c7b      	ldrb	r3, [r7, #17]
 801e0fc:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e0fe:	7c7a      	ldrb	r2, [r7, #17]
 801e100:	4613      	mov	r3, r2
 801e102:	005b      	lsls	r3, r3, #1
 801e104:	4413      	add	r3, r2
 801e106:	00db      	lsls	r3, r3, #3
 801e108:	3308      	adds	r3, #8
 801e10a:	4a45      	ldr	r2, [pc, #276]	@ (801e220 <etharp_query+0x288>)
 801e10c:	4413      	add	r3, r2
 801e10e:	3304      	adds	r3, #4
 801e110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e114:	9200      	str	r2, [sp, #0]
 801e116:	697a      	ldr	r2, [r7, #20]
 801e118:	6879      	ldr	r1, [r7, #4]
 801e11a:	68f8      	ldr	r0, [r7, #12]
 801e11c:	f001 fe1e 	bl	801fd5c <ethernet_output>
 801e120:	4603      	mov	r3, r0
 801e122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e126:	e06d      	b.n	801e204 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e128:	7c7a      	ldrb	r2, [r7, #17]
 801e12a:	493d      	ldr	r1, [pc, #244]	@ (801e220 <etharp_query+0x288>)
 801e12c:	4613      	mov	r3, r2
 801e12e:	005b      	lsls	r3, r3, #1
 801e130:	4413      	add	r3, r2
 801e132:	00db      	lsls	r3, r3, #3
 801e134:	440b      	add	r3, r1
 801e136:	3314      	adds	r3, #20
 801e138:	781b      	ldrb	r3, [r3, #0]
 801e13a:	2b01      	cmp	r3, #1
 801e13c:	d162      	bne.n	801e204 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801e13e:	2300      	movs	r3, #0
 801e140:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e146:	e01c      	b.n	801e182 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e148:	69fb      	ldr	r3, [r7, #28]
 801e14a:	895a      	ldrh	r2, [r3, #10]
 801e14c:	69fb      	ldr	r3, [r7, #28]
 801e14e:	891b      	ldrh	r3, [r3, #8]
 801e150:	429a      	cmp	r2, r3
 801e152:	d10a      	bne.n	801e16a <etharp_query+0x1d2>
 801e154:	69fb      	ldr	r3, [r7, #28]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d006      	beq.n	801e16a <etharp_query+0x1d2>
 801e15c:	4b2d      	ldr	r3, [pc, #180]	@ (801e214 <etharp_query+0x27c>)
 801e15e:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801e162:	4933      	ldr	r1, [pc, #204]	@ (801e230 <etharp_query+0x298>)
 801e164:	482d      	ldr	r0, [pc, #180]	@ (801e21c <etharp_query+0x284>)
 801e166:	f003 fa0b 	bl	8021580 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801e16a:	69fb      	ldr	r3, [r7, #28]
 801e16c:	7b1b      	ldrb	r3, [r3, #12]
 801e16e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e172:	2b00      	cmp	r3, #0
 801e174:	d002      	beq.n	801e17c <etharp_query+0x1e4>
        copy_needed = 1;
 801e176:	2301      	movs	r3, #1
 801e178:	61bb      	str	r3, [r7, #24]
        break;
 801e17a:	e005      	b.n	801e188 <etharp_query+0x1f0>
      }
      p = p->next;
 801e17c:	69fb      	ldr	r3, [r7, #28]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e182:	69fb      	ldr	r3, [r7, #28]
 801e184:	2b00      	cmp	r3, #0
 801e186:	d1df      	bne.n	801e148 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801e188:	69bb      	ldr	r3, [r7, #24]
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d007      	beq.n	801e19e <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801e18e:	687a      	ldr	r2, [r7, #4]
 801e190:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801e194:	200e      	movs	r0, #14
 801e196:	f7f7 fc51 	bl	8015a3c <pbuf_clone>
 801e19a:	61f8      	str	r0, [r7, #28]
 801e19c:	e004      	b.n	801e1a8 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801e1a2:	69f8      	ldr	r0, [r7, #28]
 801e1a4:	f7f7 fa64 	bl	8015670 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801e1a8:	69fb      	ldr	r3, [r7, #28]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d021      	beq.n	801e1f2 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801e1ae:	7c7a      	ldrb	r2, [r7, #17]
 801e1b0:	491b      	ldr	r1, [pc, #108]	@ (801e220 <etharp_query+0x288>)
 801e1b2:	4613      	mov	r3, r2
 801e1b4:	005b      	lsls	r3, r3, #1
 801e1b6:	4413      	add	r3, r2
 801e1b8:	00db      	lsls	r3, r3, #3
 801e1ba:	440b      	add	r3, r1
 801e1bc:	681b      	ldr	r3, [r3, #0]
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d00a      	beq.n	801e1d8 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801e1c2:	7c7a      	ldrb	r2, [r7, #17]
 801e1c4:	4916      	ldr	r1, [pc, #88]	@ (801e220 <etharp_query+0x288>)
 801e1c6:	4613      	mov	r3, r2
 801e1c8:	005b      	lsls	r3, r3, #1
 801e1ca:	4413      	add	r3, r2
 801e1cc:	00db      	lsls	r3, r3, #3
 801e1ce:	440b      	add	r3, r1
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	4618      	mov	r0, r3
 801e1d4:	f7f7 f98e 	bl	80154f4 <pbuf_free>
      }
      arp_table[i].q = p;
 801e1d8:	7c7a      	ldrb	r2, [r7, #17]
 801e1da:	4911      	ldr	r1, [pc, #68]	@ (801e220 <etharp_query+0x288>)
 801e1dc:	4613      	mov	r3, r2
 801e1de:	005b      	lsls	r3, r3, #1
 801e1e0:	4413      	add	r3, r2
 801e1e2:	00db      	lsls	r3, r3, #3
 801e1e4:	440b      	add	r3, r1
 801e1e6:	69fa      	ldr	r2, [r7, #28]
 801e1e8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e1f0:	e008      	b.n	801e204 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801e1f2:	4b07      	ldr	r3, [pc, #28]	@ (801e210 <etharp_query+0x278>)
 801e1f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e1f6:	3301      	adds	r3, #1
 801e1f8:	b29a      	uxth	r2, r3
 801e1fa:	4b05      	ldr	r3, [pc, #20]	@ (801e210 <etharp_query+0x278>)
 801e1fc:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801e1fe:	23ff      	movs	r3, #255	@ 0xff
 801e200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801e204:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801e208:	4618      	mov	r0, r3
 801e20a:	3728      	adds	r7, #40	@ 0x28
 801e20c:	46bd      	mov	sp, r7
 801e20e:	bd80      	pop	{r7, pc}
 801e210:	2002d358 	.word	0x2002d358
 801e214:	08026378 	.word	0x08026378
 801e218:	08026524 	.word	0x08026524
 801e21c:	080263f0 	.word	0x080263f0
 801e220:	2002d4bc 	.word	0x2002d4bc
 801e224:	08026534 	.word	0x08026534
 801e228:	08026518 	.word	0x08026518
 801e22c:	2002d5ac 	.word	0x2002d5ac
 801e230:	0802655c 	.word	0x0802655c

0801e234 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801e234:	b580      	push	{r7, lr}
 801e236:	b08a      	sub	sp, #40	@ 0x28
 801e238:	af02      	add	r7, sp, #8
 801e23a:	60f8      	str	r0, [r7, #12]
 801e23c:	60b9      	str	r1, [r7, #8]
 801e23e:	607a      	str	r2, [r7, #4]
 801e240:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801e242:	2300      	movs	r3, #0
 801e244:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d106      	bne.n	801e25a <etharp_raw+0x26>
 801e24c:	4b40      	ldr	r3, [pc, #256]	@ (801e350 <etharp_raw+0x11c>)
 801e24e:	f240 4257 	movw	r2, #1111	@ 0x457
 801e252:	4940      	ldr	r1, [pc, #256]	@ (801e354 <etharp_raw+0x120>)
 801e254:	4840      	ldr	r0, [pc, #256]	@ (801e358 <etharp_raw+0x124>)
 801e256:	f003 f993 	bl	8021580 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801e25a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e25e:	211c      	movs	r1, #28
 801e260:	200e      	movs	r0, #14
 801e262:	f7f6 fe1b 	bl	8014e9c <pbuf_alloc>
 801e266:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801e268:	69bb      	ldr	r3, [r7, #24]
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d108      	bne.n	801e280 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801e26e:	4b3b      	ldr	r3, [pc, #236]	@ (801e35c <etharp_raw+0x128>)
 801e270:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e272:	3301      	adds	r3, #1
 801e274:	b29a      	uxth	r2, r3
 801e276:	4b39      	ldr	r3, [pc, #228]	@ (801e35c <etharp_raw+0x128>)
 801e278:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801e27a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e27e:	e063      	b.n	801e348 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e280:	69bb      	ldr	r3, [r7, #24]
 801e282:	895b      	ldrh	r3, [r3, #10]
 801e284:	2b1b      	cmp	r3, #27
 801e286:	d806      	bhi.n	801e296 <etharp_raw+0x62>
 801e288:	4b31      	ldr	r3, [pc, #196]	@ (801e350 <etharp_raw+0x11c>)
 801e28a:	f240 4262 	movw	r2, #1122	@ 0x462
 801e28e:	4934      	ldr	r1, [pc, #208]	@ (801e360 <etharp_raw+0x12c>)
 801e290:	4831      	ldr	r0, [pc, #196]	@ (801e358 <etharp_raw+0x124>)
 801e292:	f003 f975 	bl	8021580 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801e296:	69bb      	ldr	r3, [r7, #24]
 801e298:	685b      	ldr	r3, [r3, #4]
 801e29a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801e29c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801e29e:	4618      	mov	r0, r3
 801e2a0:	f7f5 fafa 	bl	8013898 <lwip_htons>
 801e2a4:	4603      	mov	r3, r0
 801e2a6:	461a      	mov	r2, r3
 801e2a8:	697b      	ldr	r3, [r7, #20]
 801e2aa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e2b2:	2b06      	cmp	r3, #6
 801e2b4:	d006      	beq.n	801e2c4 <etharp_raw+0x90>
 801e2b6:	4b26      	ldr	r3, [pc, #152]	@ (801e350 <etharp_raw+0x11c>)
 801e2b8:	f240 4269 	movw	r2, #1129	@ 0x469
 801e2bc:	4929      	ldr	r1, [pc, #164]	@ (801e364 <etharp_raw+0x130>)
 801e2be:	4826      	ldr	r0, [pc, #152]	@ (801e358 <etharp_raw+0x124>)
 801e2c0:	f003 f95e 	bl	8021580 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e2c4:	697b      	ldr	r3, [r7, #20]
 801e2c6:	3308      	adds	r3, #8
 801e2c8:	2206      	movs	r2, #6
 801e2ca:	6839      	ldr	r1, [r7, #0]
 801e2cc:	4618      	mov	r0, r3
 801e2ce:	f003 fb2c 	bl	802192a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e2d2:	697b      	ldr	r3, [r7, #20]
 801e2d4:	3312      	adds	r3, #18
 801e2d6:	2206      	movs	r2, #6
 801e2d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f003 fb25 	bl	802192a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801e2e0:	697b      	ldr	r3, [r7, #20]
 801e2e2:	330e      	adds	r3, #14
 801e2e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e2e6:	6812      	ldr	r2, [r2, #0]
 801e2e8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e2ea:	697b      	ldr	r3, [r7, #20]
 801e2ec:	3318      	adds	r3, #24
 801e2ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e2f0:	6812      	ldr	r2, [r2, #0]
 801e2f2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e2f4:	697b      	ldr	r3, [r7, #20]
 801e2f6:	2200      	movs	r2, #0
 801e2f8:	701a      	strb	r2, [r3, #0]
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	f042 0201 	orr.w	r2, r2, #1
 801e300:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e302:	697b      	ldr	r3, [r7, #20]
 801e304:	2200      	movs	r2, #0
 801e306:	f042 0208 	orr.w	r2, r2, #8
 801e30a:	709a      	strb	r2, [r3, #2]
 801e30c:	2200      	movs	r2, #0
 801e30e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801e310:	697b      	ldr	r3, [r7, #20]
 801e312:	2206      	movs	r2, #6
 801e314:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801e316:	697b      	ldr	r3, [r7, #20]
 801e318:	2204      	movs	r2, #4
 801e31a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e31c:	f640 0306 	movw	r3, #2054	@ 0x806
 801e320:	9300      	str	r3, [sp, #0]
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	68ba      	ldr	r2, [r7, #8]
 801e326:	69b9      	ldr	r1, [r7, #24]
 801e328:	68f8      	ldr	r0, [r7, #12]
 801e32a:	f001 fd17 	bl	801fd5c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801e32e:	4b0b      	ldr	r3, [pc, #44]	@ (801e35c <etharp_raw+0x128>)
 801e330:	8b1b      	ldrh	r3, [r3, #24]
 801e332:	3301      	adds	r3, #1
 801e334:	b29a      	uxth	r2, r3
 801e336:	4b09      	ldr	r3, [pc, #36]	@ (801e35c <etharp_raw+0x128>)
 801e338:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801e33a:	69b8      	ldr	r0, [r7, #24]
 801e33c:	f7f7 f8da 	bl	80154f4 <pbuf_free>
  p = NULL;
 801e340:	2300      	movs	r3, #0
 801e342:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801e344:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e348:	4618      	mov	r0, r3
 801e34a:	3720      	adds	r7, #32
 801e34c:	46bd      	mov	sp, r7
 801e34e:	bd80      	pop	{r7, pc}
 801e350:	08026378 	.word	0x08026378
 801e354:	080264c8 	.word	0x080264c8
 801e358:	080263f0 	.word	0x080263f0
 801e35c:	2002d358 	.word	0x2002d358
 801e360:	08026578 	.word	0x08026578
 801e364:	080265ac 	.word	0x080265ac

0801e368 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b088      	sub	sp, #32
 801e36c:	af04      	add	r7, sp, #16
 801e36e:	60f8      	str	r0, [r7, #12]
 801e370:	60b9      	str	r1, [r7, #8]
 801e372:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e37a:	68fb      	ldr	r3, [r7, #12]
 801e37c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e384:	2201      	movs	r2, #1
 801e386:	9203      	str	r2, [sp, #12]
 801e388:	68ba      	ldr	r2, [r7, #8]
 801e38a:	9202      	str	r2, [sp, #8]
 801e38c:	4a06      	ldr	r2, [pc, #24]	@ (801e3a8 <etharp_request_dst+0x40>)
 801e38e:	9201      	str	r2, [sp, #4]
 801e390:	9300      	str	r3, [sp, #0]
 801e392:	4603      	mov	r3, r0
 801e394:	687a      	ldr	r2, [r7, #4]
 801e396:	68f8      	ldr	r0, [r7, #12]
 801e398:	f7ff ff4c 	bl	801e234 <etharp_raw>
 801e39c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e39e:	4618      	mov	r0, r3
 801e3a0:	3710      	adds	r7, #16
 801e3a2:	46bd      	mov	sp, r7
 801e3a4:	bd80      	pop	{r7, pc}
 801e3a6:	bf00      	nop
 801e3a8:	0802741c 	.word	0x0802741c

0801e3ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e3ac:	b580      	push	{r7, lr}
 801e3ae:	b082      	sub	sp, #8
 801e3b0:	af00      	add	r7, sp, #0
 801e3b2:	6078      	str	r0, [r7, #4]
 801e3b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e3b6:	4a05      	ldr	r2, [pc, #20]	@ (801e3cc <etharp_request+0x20>)
 801e3b8:	6839      	ldr	r1, [r7, #0]
 801e3ba:	6878      	ldr	r0, [r7, #4]
 801e3bc:	f7ff ffd4 	bl	801e368 <etharp_request_dst>
 801e3c0:	4603      	mov	r3, r0
}
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	3708      	adds	r7, #8
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	bd80      	pop	{r7, pc}
 801e3ca:	bf00      	nop
 801e3cc:	08027414 	.word	0x08027414

0801e3d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e3d0:	b580      	push	{r7, lr}
 801e3d2:	b08e      	sub	sp, #56	@ 0x38
 801e3d4:	af04      	add	r7, sp, #16
 801e3d6:	6078      	str	r0, [r7, #4]
 801e3d8:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801e3da:	4ba5      	ldr	r3, [pc, #660]	@ (801e670 <icmp_input+0x2a0>)
 801e3dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801e3e0:	3301      	adds	r3, #1
 801e3e2:	b29a      	uxth	r2, r3
 801e3e4:	4ba2      	ldr	r3, [pc, #648]	@ (801e670 <icmp_input+0x2a0>)
 801e3e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e3ea:	4ba2      	ldr	r3, [pc, #648]	@ (801e674 <icmp_input+0x2a4>)
 801e3ec:	689b      	ldr	r3, [r3, #8]
 801e3ee:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3f2:	781b      	ldrb	r3, [r3, #0]
 801e3f4:	f003 030f 	and.w	r3, r3, #15
 801e3f8:	b2db      	uxtb	r3, r3
 801e3fa:	009b      	lsls	r3, r3, #2
 801e3fc:	b2db      	uxtb	r3, r3
 801e3fe:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801e400:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e402:	2b13      	cmp	r3, #19
 801e404:	d805      	bhi.n	801e412 <icmp_input+0x42>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801e406:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e408:	4619      	mov	r1, r3
 801e40a:	489b      	ldr	r0, [pc, #620]	@ (801e678 <icmp_input+0x2a8>)
 801e40c:	f003 f8b8 	bl	8021580 <iprintf>
    goto lenerr;
 801e410:	e122      	b.n	801e658 <icmp_input+0x288>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	895b      	ldrh	r3, [r3, #10]
 801e416:	2b03      	cmp	r3, #3
 801e418:	d806      	bhi.n	801e428 <icmp_input+0x58>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	891b      	ldrh	r3, [r3, #8]
 801e41e:	4619      	mov	r1, r3
 801e420:	4896      	ldr	r0, [pc, #600]	@ (801e67c <icmp_input+0x2ac>)
 801e422:	f003 f8ad 	bl	8021580 <iprintf>
    goto lenerr;
 801e426:	e117      	b.n	801e658 <icmp_input+0x288>
  }

  type = *((u8_t *)p->payload);
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	685b      	ldr	r3, [r3, #4]
 801e42c:	781b      	ldrb	r3, [r3, #0]
 801e42e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	685b      	ldr	r3, [r3, #4]
 801e436:	785b      	ldrb	r3, [r3, #1]
 801e438:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e43c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801e440:	2b00      	cmp	r3, #0
 801e442:	f000 8102 	beq.w	801e64a <icmp_input+0x27a>
 801e446:	2b08      	cmp	r3, #8
 801e448:	f040 80e6 	bne.w	801e618 <icmp_input+0x248>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e44c:	4b8c      	ldr	r3, [pc, #560]	@ (801e680 <icmp_input+0x2b0>)
 801e44e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e450:	4b88      	ldr	r3, [pc, #544]	@ (801e674 <icmp_input+0x2a4>)
 801e452:	695b      	ldr	r3, [r3, #20]
 801e454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e458:	2be0      	cmp	r3, #224	@ 0xe0
 801e45a:	d103      	bne.n	801e464 <icmp_input+0x94>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801e45c:	4889      	ldr	r0, [pc, #548]	@ (801e684 <icmp_input+0x2b4>)
 801e45e:	f003 f8ff 	bl	8021660 <puts>
        goto icmperr;
 801e462:	e12d      	b.n	801e6c0 <icmp_input+0x2f0>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e464:	4b83      	ldr	r3, [pc, #524]	@ (801e674 <icmp_input+0x2a4>)
 801e466:	695b      	ldr	r3, [r3, #20]
 801e468:	4a82      	ldr	r2, [pc, #520]	@ (801e674 <icmp_input+0x2a4>)
 801e46a:	6812      	ldr	r2, [r2, #0]
 801e46c:	4611      	mov	r1, r2
 801e46e:	4618      	mov	r0, r3
 801e470:	f000 fd14 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801e474:	4603      	mov	r3, r0
 801e476:	2b00      	cmp	r3, #0
 801e478:	d003      	beq.n	801e482 <icmp_input+0xb2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801e47a:	4883      	ldr	r0, [pc, #524]	@ (801e688 <icmp_input+0x2b8>)
 801e47c:	f003 f8f0 	bl	8021660 <puts>
        goto icmperr;
 801e480:	e11e      	b.n	801e6c0 <icmp_input+0x2f0>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801e482:	4882      	ldr	r0, [pc, #520]	@ (801e68c <icmp_input+0x2bc>)
 801e484:	f003 f8ec 	bl	8021660 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	891b      	ldrh	r3, [r3, #8]
 801e48c:	2b07      	cmp	r3, #7
 801e48e:	d803      	bhi.n	801e498 <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801e490:	487f      	ldr	r0, [pc, #508]	@ (801e690 <icmp_input+0x2c0>)
 801e492:	f003 f8e5 	bl	8021660 <puts>
        goto lenerr;
 801e496:	e0df      	b.n	801e658 <icmp_input+0x288>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e498:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e49a:	330e      	adds	r3, #14
 801e49c:	4619      	mov	r1, r3
 801e49e:	6878      	ldr	r0, [r7, #4]
 801e4a0:	f7f6 ff8a 	bl	80153b8 <pbuf_add_header>
 801e4a4:	4603      	mov	r3, r0
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d057      	beq.n	801e55a <icmp_input+0x18a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	891a      	ldrh	r2, [r3, #8]
 801e4ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e4b0:	4413      	add	r3, r2
 801e4b2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	891b      	ldrh	r3, [r3, #8]
 801e4b8:	8b7a      	ldrh	r2, [r7, #26]
 801e4ba:	429a      	cmp	r2, r3
 801e4bc:	d203      	bcs.n	801e4c6 <icmp_input+0xf6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801e4be:	4875      	ldr	r0, [pc, #468]	@ (801e694 <icmp_input+0x2c4>)
 801e4c0:	f003 f8ce 	bl	8021660 <puts>
          goto icmperr;
 801e4c4:	e0fc      	b.n	801e6c0 <icmp_input+0x2f0>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e4c6:	8b7b      	ldrh	r3, [r7, #26]
 801e4c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e4cc:	4619      	mov	r1, r3
 801e4ce:	200e      	movs	r0, #14
 801e4d0:	f7f6 fce4 	bl	8014e9c <pbuf_alloc>
 801e4d4:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e4d6:	697b      	ldr	r3, [r7, #20]
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d103      	bne.n	801e4e4 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801e4dc:	486e      	ldr	r0, [pc, #440]	@ (801e698 <icmp_input+0x2c8>)
 801e4de:	f003 f8bf 	bl	8021660 <puts>
          goto icmperr;
 801e4e2:	e0ed      	b.n	801e6c0 <icmp_input+0x2f0>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e4e4:	697b      	ldr	r3, [r7, #20]
 801e4e6:	895b      	ldrh	r3, [r3, #10]
 801e4e8:	461a      	mov	r2, r3
 801e4ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e4ec:	3308      	adds	r3, #8
 801e4ee:	429a      	cmp	r2, r3
 801e4f0:	d206      	bcs.n	801e500 <icmp_input+0x130>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801e4f2:	486a      	ldr	r0, [pc, #424]	@ (801e69c <icmp_input+0x2cc>)
 801e4f4:	f003 f844 	bl	8021580 <iprintf>
          pbuf_free(r);
 801e4f8:	6978      	ldr	r0, [r7, #20]
 801e4fa:	f7f6 fffb 	bl	80154f4 <pbuf_free>
          goto icmperr;
 801e4fe:	e0df      	b.n	801e6c0 <icmp_input+0x2f0>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e500:	697b      	ldr	r3, [r7, #20]
 801e502:	685b      	ldr	r3, [r3, #4]
 801e504:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801e506:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e508:	4618      	mov	r0, r3
 801e50a:	f003 fa0e 	bl	802192a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e50e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e510:	4619      	mov	r1, r3
 801e512:	6978      	ldr	r0, [r7, #20]
 801e514:	f7f6 ff60 	bl	80153d8 <pbuf_remove_header>
 801e518:	4603      	mov	r3, r0
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d009      	beq.n	801e532 <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e51e:	4b60      	ldr	r3, [pc, #384]	@ (801e6a0 <icmp_input+0x2d0>)
 801e520:	22b6      	movs	r2, #182	@ 0xb6
 801e522:	4960      	ldr	r1, [pc, #384]	@ (801e6a4 <icmp_input+0x2d4>)
 801e524:	4860      	ldr	r0, [pc, #384]	@ (801e6a8 <icmp_input+0x2d8>)
 801e526:	f003 f82b 	bl	8021580 <iprintf>
          pbuf_free(r);
 801e52a:	6978      	ldr	r0, [r7, #20]
 801e52c:	f7f6 ffe2 	bl	80154f4 <pbuf_free>
          goto icmperr;
 801e530:	e0c6      	b.n	801e6c0 <icmp_input+0x2f0>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e532:	6879      	ldr	r1, [r7, #4]
 801e534:	6978      	ldr	r0, [r7, #20]
 801e536:	f7f7 f931 	bl	801579c <pbuf_copy>
 801e53a:	4603      	mov	r3, r0
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d006      	beq.n	801e54e <icmp_input+0x17e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801e540:	485a      	ldr	r0, [pc, #360]	@ (801e6ac <icmp_input+0x2dc>)
 801e542:	f003 f81d 	bl	8021580 <iprintf>
          pbuf_free(r);
 801e546:	6978      	ldr	r0, [r7, #20]
 801e548:	f7f6 ffd4 	bl	80154f4 <pbuf_free>
          goto icmperr;
 801e54c:	e0b8      	b.n	801e6c0 <icmp_input+0x2f0>
        }
        /* free the original p */
        pbuf_free(p);
 801e54e:	6878      	ldr	r0, [r7, #4]
 801e550:	f7f6 ffd0 	bl	80154f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e554:	697b      	ldr	r3, [r7, #20]
 801e556:	607b      	str	r3, [r7, #4]
 801e558:	e00f      	b.n	801e57a <icmp_input+0x1aa>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e55a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e55c:	330e      	adds	r3, #14
 801e55e:	4619      	mov	r1, r3
 801e560:	6878      	ldr	r0, [r7, #4]
 801e562:	f7f6 ff39 	bl	80153d8 <pbuf_remove_header>
 801e566:	4603      	mov	r3, r0
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d006      	beq.n	801e57a <icmp_input+0x1aa>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e56c:	4b4c      	ldr	r3, [pc, #304]	@ (801e6a0 <icmp_input+0x2d0>)
 801e56e:	22c7      	movs	r2, #199	@ 0xc7
 801e570:	494f      	ldr	r1, [pc, #316]	@ (801e6b0 <icmp_input+0x2e0>)
 801e572:	484d      	ldr	r0, [pc, #308]	@ (801e6a8 <icmp_input+0x2d8>)
 801e574:	f003 f804 	bl	8021580 <iprintf>
          goto icmperr;
 801e578:	e0a2      	b.n	801e6c0 <icmp_input+0x2f0>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	685b      	ldr	r3, [r3, #4]
 801e57e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e580:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e582:	4619      	mov	r1, r3
 801e584:	6878      	ldr	r0, [r7, #4]
 801e586:	f7f6 ff17 	bl	80153b8 <pbuf_add_header>
 801e58a:	4603      	mov	r3, r0
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	d003      	beq.n	801e598 <icmp_input+0x1c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801e590:	4848      	ldr	r0, [pc, #288]	@ (801e6b4 <icmp_input+0x2e4>)
 801e592:	f002 fff5 	bl	8021580 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e596:	e05a      	b.n	801e64e <icmp_input+0x27e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	685b      	ldr	r3, [r3, #4]
 801e59c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e59e:	69fb      	ldr	r3, [r7, #28]
 801e5a0:	681a      	ldr	r2, [r3, #0]
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e5a6:	4b33      	ldr	r3, [pc, #204]	@ (801e674 <icmp_input+0x2a4>)
 801e5a8:	691a      	ldr	r2, [r3, #16]
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e5ae:	693b      	ldr	r3, [r7, #16]
 801e5b0:	2200      	movs	r2, #0
 801e5b2:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801e5b4:	693b      	ldr	r3, [r7, #16]
 801e5b6:	2200      	movs	r2, #0
 801e5b8:	709a      	strb	r2, [r3, #2]
 801e5ba:	2200      	movs	r2, #0
 801e5bc:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e5be:	68fb      	ldr	r3, [r7, #12]
 801e5c0:	22ff      	movs	r2, #255	@ 0xff
 801e5c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e5c4:	68fb      	ldr	r3, [r7, #12]
 801e5c6:	2200      	movs	r2, #0
 801e5c8:	729a      	strb	r2, [r3, #10]
 801e5ca:	2200      	movs	r2, #0
 801e5cc:	72da      	strb	r2, [r3, #11]
        ICMP_STATS_INC(icmp.xmit);
 801e5ce:	4b28      	ldr	r3, [pc, #160]	@ (801e670 <icmp_input+0x2a0>)
 801e5d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e5d4:	3301      	adds	r3, #1
 801e5d6:	b29a      	uxth	r2, r3
 801e5d8:	4b25      	ldr	r3, [pc, #148]	@ (801e670 <icmp_input+0x2a0>)
 801e5da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e5de:	683b      	ldr	r3, [r7, #0]
 801e5e0:	9302      	str	r3, [sp, #8]
 801e5e2:	2301      	movs	r3, #1
 801e5e4:	9301      	str	r3, [sp, #4]
 801e5e6:	2300      	movs	r3, #0
 801e5e8:	9300      	str	r3, [sp, #0]
 801e5ea:	23ff      	movs	r3, #255	@ 0xff
 801e5ec:	2200      	movs	r2, #0
 801e5ee:	69f9      	ldr	r1, [r7, #28]
 801e5f0:	6878      	ldr	r0, [r7, #4]
 801e5f2:	f000 fb61 	bl	801ecb8 <ip4_output_if>
 801e5f6:	4603      	mov	r3, r0
 801e5f8:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801e5fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d025      	beq.n	801e64e <icmp_input+0x27e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801e602:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e606:	4618      	mov	r0, r3
 801e608:	f7f4 fea6 	bl	8013358 <lwip_strerr>
 801e60c:	4603      	mov	r3, r0
 801e60e:	4619      	mov	r1, r3
 801e610:	4829      	ldr	r0, [pc, #164]	@ (801e6b8 <icmp_input+0x2e8>)
 801e612:	f002 ffb5 	bl	8021580 <iprintf>
      break;
 801e616:	e01a      	b.n	801e64e <icmp_input+0x27e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801e618:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801e61c:	f897 2020 	ldrb.w	r2, [r7, #32]
 801e620:	4619      	mov	r1, r3
 801e622:	4826      	ldr	r0, [pc, #152]	@ (801e6bc <icmp_input+0x2ec>)
 801e624:	f002 ffac 	bl	8021580 <iprintf>
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801e628:	4b11      	ldr	r3, [pc, #68]	@ (801e670 <icmp_input+0x2a0>)
 801e62a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801e62e:	3301      	adds	r3, #1
 801e630:	b29a      	uxth	r2, r3
 801e632:	4b0f      	ldr	r3, [pc, #60]	@ (801e670 <icmp_input+0x2a0>)
 801e634:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801e638:	4b0d      	ldr	r3, [pc, #52]	@ (801e670 <icmp_input+0x2a0>)
 801e63a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e63e:	3301      	adds	r3, #1
 801e640:	b29a      	uxth	r2, r3
 801e642:	4b0b      	ldr	r3, [pc, #44]	@ (801e670 <icmp_input+0x2a0>)
 801e644:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801e648:	e002      	b.n	801e650 <icmp_input+0x280>
      break;
 801e64a:	bf00      	nop
 801e64c:	e000      	b.n	801e650 <icmp_input+0x280>
      break;
 801e64e:	bf00      	nop
  }
  pbuf_free(p);
 801e650:	6878      	ldr	r0, [r7, #4]
 801e652:	f7f6 ff4f 	bl	80154f4 <pbuf_free>
  return;
 801e656:	e03f      	b.n	801e6d8 <icmp_input+0x308>
lenerr:
  pbuf_free(p);
 801e658:	6878      	ldr	r0, [r7, #4]
 801e65a:	f7f6 ff4b 	bl	80154f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801e65e:	4b04      	ldr	r3, [pc, #16]	@ (801e670 <icmp_input+0x2a0>)
 801e660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e664:	3301      	adds	r3, #1
 801e666:	b29a      	uxth	r2, r3
 801e668:	4b01      	ldr	r3, [pc, #4]	@ (801e670 <icmp_input+0x2a0>)
 801e66a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e66e:	e033      	b.n	801e6d8 <icmp_input+0x308>
 801e670:	2002d358 	.word	0x2002d358
 801e674:	200270e8 	.word	0x200270e8
 801e678:	080265f0 	.word	0x080265f0
 801e67c:	08026624 	.word	0x08026624
 801e680:	200270fc 	.word	0x200270fc
 801e684:	08026654 	.word	0x08026654
 801e688:	08026680 	.word	0x08026680
 801e68c:	080266ac 	.word	0x080266ac
 801e690:	080266c0 	.word	0x080266c0
 801e694:	080266e4 	.word	0x080266e4
 801e698:	08026720 	.word	0x08026720
 801e69c:	08026748 	.word	0x08026748
 801e6a0:	08026770 	.word	0x08026770
 801e6a4:	080267a8 	.word	0x080267a8
 801e6a8:	080267e0 	.word	0x080267e0
 801e6ac:	08026808 	.word	0x08026808
 801e6b0:	08026830 	.word	0x08026830
 801e6b4:	08026864 	.word	0x08026864
 801e6b8:	08026888 	.word	0x08026888
 801e6bc:	080268b8 	.word	0x080268b8
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e6c0:	6878      	ldr	r0, [r7, #4]
 801e6c2:	f7f6 ff17 	bl	80154f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801e6c6:	4b06      	ldr	r3, [pc, #24]	@ (801e6e0 <icmp_input+0x310>)
 801e6c8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801e6cc:	3301      	adds	r3, #1
 801e6ce:	b29a      	uxth	r2, r3
 801e6d0:	4b03      	ldr	r3, [pc, #12]	@ (801e6e0 <icmp_input+0x310>)
 801e6d2:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e6d6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e6d8:	3728      	adds	r7, #40	@ 0x28
 801e6da:	46bd      	mov	sp, r7
 801e6dc:	bd80      	pop	{r7, pc}
 801e6de:	bf00      	nop
 801e6e0:	2002d358 	.word	0x2002d358

0801e6e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e6e4:	b580      	push	{r7, lr}
 801e6e6:	b082      	sub	sp, #8
 801e6e8:	af00      	add	r7, sp, #0
 801e6ea:	6078      	str	r0, [r7, #4]
 801e6ec:	460b      	mov	r3, r1
 801e6ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e6f0:	78fb      	ldrb	r3, [r7, #3]
 801e6f2:	461a      	mov	r2, r3
 801e6f4:	2103      	movs	r1, #3
 801e6f6:	6878      	ldr	r0, [r7, #4]
 801e6f8:	f000 f814 	bl	801e724 <icmp_send_response>
}
 801e6fc:	bf00      	nop
 801e6fe:	3708      	adds	r7, #8
 801e700:	46bd      	mov	sp, r7
 801e702:	bd80      	pop	{r7, pc}

0801e704 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e704:	b580      	push	{r7, lr}
 801e706:	b082      	sub	sp, #8
 801e708:	af00      	add	r7, sp, #0
 801e70a:	6078      	str	r0, [r7, #4]
 801e70c:	460b      	mov	r3, r1
 801e70e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e710:	78fb      	ldrb	r3, [r7, #3]
 801e712:	461a      	mov	r2, r3
 801e714:	210b      	movs	r1, #11
 801e716:	6878      	ldr	r0, [r7, #4]
 801e718:	f000 f804 	bl	801e724 <icmp_send_response>
}
 801e71c:	bf00      	nop
 801e71e:	3708      	adds	r7, #8
 801e720:	46bd      	mov	sp, r7
 801e722:	bd80      	pop	{r7, pc}

0801e724 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e724:	b580      	push	{r7, lr}
 801e726:	b08c      	sub	sp, #48	@ 0x30
 801e728:	af04      	add	r7, sp, #16
 801e72a:	6078      	str	r0, [r7, #4]
 801e72c:	460b      	mov	r3, r1
 801e72e:	70fb      	strb	r3, [r7, #3]
 801e730:	4613      	mov	r3, r2
 801e732:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e734:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e738:	2124      	movs	r1, #36	@ 0x24
 801e73a:	2022      	movs	r0, #34	@ 0x22
 801e73c:	f7f6 fbae 	bl	8014e9c <pbuf_alloc>
 801e740:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e742:	69fb      	ldr	r3, [r7, #28]
 801e744:	2b00      	cmp	r3, #0
 801e746:	d103      	bne.n	801e750 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801e748:	4848      	ldr	r0, [pc, #288]	@ (801e86c <icmp_send_response+0x148>)
 801e74a:	f002 ff89 	bl	8021660 <puts>
 801e74e:	e08a      	b.n	801e866 <icmp_send_response+0x142>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e750:	69fb      	ldr	r3, [r7, #28]
 801e752:	895b      	ldrh	r3, [r3, #10]
 801e754:	2b23      	cmp	r3, #35	@ 0x23
 801e756:	d806      	bhi.n	801e766 <icmp_send_response+0x42>
 801e758:	4b45      	ldr	r3, [pc, #276]	@ (801e870 <icmp_send_response+0x14c>)
 801e75a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801e75e:	4945      	ldr	r1, [pc, #276]	@ (801e874 <icmp_send_response+0x150>)
 801e760:	4845      	ldr	r0, [pc, #276]	@ (801e878 <icmp_send_response+0x154>)
 801e762:	f002 ff0d 	bl	8021580 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	685b      	ldr	r3, [r3, #4]
 801e76a:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801e76c:	4843      	ldr	r0, [pc, #268]	@ (801e87c <icmp_send_response+0x158>)
 801e76e:	f002 ff07 	bl	8021580 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801e772:	69bb      	ldr	r3, [r7, #24]
 801e774:	68db      	ldr	r3, [r3, #12]
 801e776:	b2db      	uxtb	r3, r3
 801e778:	4619      	mov	r1, r3
 801e77a:	69bb      	ldr	r3, [r7, #24]
 801e77c:	68db      	ldr	r3, [r3, #12]
 801e77e:	0a1b      	lsrs	r3, r3, #8
 801e780:	b2db      	uxtb	r3, r3
 801e782:	461a      	mov	r2, r3
 801e784:	69bb      	ldr	r3, [r7, #24]
 801e786:	68db      	ldr	r3, [r3, #12]
 801e788:	0c1b      	lsrs	r3, r3, #16
 801e78a:	b2db      	uxtb	r3, r3
 801e78c:	4618      	mov	r0, r3
 801e78e:	69bb      	ldr	r3, [r7, #24]
 801e790:	68db      	ldr	r3, [r3, #12]
 801e792:	0e1b      	lsrs	r3, r3, #24
 801e794:	b2db      	uxtb	r3, r3
 801e796:	9300      	str	r3, [sp, #0]
 801e798:	4603      	mov	r3, r0
 801e79a:	4839      	ldr	r0, [pc, #228]	@ (801e880 <icmp_send_response+0x15c>)
 801e79c:	f002 fef0 	bl	8021580 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801e7a0:	4838      	ldr	r0, [pc, #224]	@ (801e884 <icmp_send_response+0x160>)
 801e7a2:	f002 feed 	bl	8021580 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801e7a6:	69bb      	ldr	r3, [r7, #24]
 801e7a8:	691b      	ldr	r3, [r3, #16]
 801e7aa:	b2db      	uxtb	r3, r3
 801e7ac:	4619      	mov	r1, r3
 801e7ae:	69bb      	ldr	r3, [r7, #24]
 801e7b0:	691b      	ldr	r3, [r3, #16]
 801e7b2:	0a1b      	lsrs	r3, r3, #8
 801e7b4:	b2db      	uxtb	r3, r3
 801e7b6:	461a      	mov	r2, r3
 801e7b8:	69bb      	ldr	r3, [r7, #24]
 801e7ba:	691b      	ldr	r3, [r3, #16]
 801e7bc:	0c1b      	lsrs	r3, r3, #16
 801e7be:	b2db      	uxtb	r3, r3
 801e7c0:	4618      	mov	r0, r3
 801e7c2:	69bb      	ldr	r3, [r7, #24]
 801e7c4:	691b      	ldr	r3, [r3, #16]
 801e7c6:	0e1b      	lsrs	r3, r3, #24
 801e7c8:	b2db      	uxtb	r3, r3
 801e7ca:	9300      	str	r3, [sp, #0]
 801e7cc:	4603      	mov	r3, r0
 801e7ce:	482c      	ldr	r0, [pc, #176]	@ (801e880 <icmp_send_response+0x15c>)
 801e7d0:	f002 fed6 	bl	8021580 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801e7d4:	200a      	movs	r0, #10
 801e7d6:	f002 fee5 	bl	80215a4 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e7da:	69fb      	ldr	r3, [r7, #28]
 801e7dc:	685b      	ldr	r3, [r3, #4]
 801e7de:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e7e0:	697b      	ldr	r3, [r7, #20]
 801e7e2:	78fa      	ldrb	r2, [r7, #3]
 801e7e4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e7e6:	697b      	ldr	r3, [r7, #20]
 801e7e8:	78ba      	ldrb	r2, [r7, #2]
 801e7ea:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e7ec:	697b      	ldr	r3, [r7, #20]
 801e7ee:	2200      	movs	r2, #0
 801e7f0:	711a      	strb	r2, [r3, #4]
 801e7f2:	2200      	movs	r2, #0
 801e7f4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e7f6:	697b      	ldr	r3, [r7, #20]
 801e7f8:	2200      	movs	r2, #0
 801e7fa:	719a      	strb	r2, [r3, #6]
 801e7fc:	2200      	movs	r2, #0
 801e7fe:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e800:	69fb      	ldr	r3, [r7, #28]
 801e802:	685b      	ldr	r3, [r3, #4]
 801e804:	f103 0008 	add.w	r0, r3, #8
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	685b      	ldr	r3, [r3, #4]
 801e80c:	221c      	movs	r2, #28
 801e80e:	4619      	mov	r1, r3
 801e810:	f003 f88b 	bl	802192a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e814:	69bb      	ldr	r3, [r7, #24]
 801e816:	68db      	ldr	r3, [r3, #12]
 801e818:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e81a:	f107 030c 	add.w	r3, r7, #12
 801e81e:	4618      	mov	r0, r3
 801e820:	f000 f834 	bl	801e88c <ip4_route>
 801e824:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e826:	693b      	ldr	r3, [r7, #16]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d019      	beq.n	801e860 <icmp_send_response+0x13c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e82c:	697b      	ldr	r3, [r7, #20]
 801e82e:	2200      	movs	r2, #0
 801e830:	709a      	strb	r2, [r3, #2]
 801e832:	2200      	movs	r2, #0
 801e834:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801e836:	4b14      	ldr	r3, [pc, #80]	@ (801e888 <icmp_send_response+0x164>)
 801e838:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e83c:	3301      	adds	r3, #1
 801e83e:	b29a      	uxth	r2, r3
 801e840:	4b11      	ldr	r3, [pc, #68]	@ (801e888 <icmp_send_response+0x164>)
 801e842:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e846:	f107 020c 	add.w	r2, r7, #12
 801e84a:	693b      	ldr	r3, [r7, #16]
 801e84c:	9302      	str	r3, [sp, #8]
 801e84e:	2301      	movs	r3, #1
 801e850:	9301      	str	r3, [sp, #4]
 801e852:	2300      	movs	r3, #0
 801e854:	9300      	str	r3, [sp, #0]
 801e856:	23ff      	movs	r3, #255	@ 0xff
 801e858:	2100      	movs	r1, #0
 801e85a:	69f8      	ldr	r0, [r7, #28]
 801e85c:	f000 fa2c 	bl	801ecb8 <ip4_output_if>
  }
  pbuf_free(q);
 801e860:	69f8      	ldr	r0, [r7, #28]
 801e862:	f7f6 fe47 	bl	80154f4 <pbuf_free>
}
 801e866:	3720      	adds	r7, #32
 801e868:	46bd      	mov	sp, r7
 801e86a:	bd80      	pop	{r7, pc}
 801e86c:	080268ec 	.word	0x080268ec
 801e870:	08026770 	.word	0x08026770
 801e874:	0802692c 	.word	0x0802692c
 801e878:	080267e0 	.word	0x080267e0
 801e87c:	08026958 	.word	0x08026958
 801e880:	08026974 	.word	0x08026974
 801e884:	08026984 	.word	0x08026984
 801e888:	2002d358 	.word	0x2002d358

0801e88c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e88c:	b480      	push	{r7}
 801e88e:	b085      	sub	sp, #20
 801e890:	af00      	add	r7, sp, #0
 801e892:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e894:	4b37      	ldr	r3, [pc, #220]	@ (801e974 <ip4_route+0xe8>)
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	60fb      	str	r3, [r7, #12]
 801e89a:	e036      	b.n	801e90a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e89c:	68fb      	ldr	r3, [r7, #12]
 801e89e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e8a2:	f003 0301 	and.w	r3, r3, #1
 801e8a6:	b2db      	uxtb	r3, r3
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d02b      	beq.n	801e904 <ip4_route+0x78>
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e8b2:	089b      	lsrs	r3, r3, #2
 801e8b4:	f003 0301 	and.w	r3, r3, #1
 801e8b8:	b2db      	uxtb	r3, r3
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d022      	beq.n	801e904 <ip4_route+0x78>
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	3304      	adds	r3, #4
 801e8c2:	681b      	ldr	r3, [r3, #0]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d01d      	beq.n	801e904 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	681a      	ldr	r2, [r3, #0]
 801e8cc:	68fb      	ldr	r3, [r7, #12]
 801e8ce:	3304      	adds	r3, #4
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	405a      	eors	r2, r3
 801e8d4:	68fb      	ldr	r3, [r7, #12]
 801e8d6:	3308      	adds	r3, #8
 801e8d8:	681b      	ldr	r3, [r3, #0]
 801e8da:	4013      	ands	r3, r2
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d101      	bne.n	801e8e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e8e0:	68fb      	ldr	r3, [r7, #12]
 801e8e2:	e040      	b.n	801e966 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e8e4:	68fb      	ldr	r3, [r7, #12]
 801e8e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e8ea:	f003 0302 	and.w	r3, r3, #2
 801e8ee:	2b00      	cmp	r3, #0
 801e8f0:	d108      	bne.n	801e904 <ip4_route+0x78>
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	681a      	ldr	r2, [r3, #0]
 801e8f6:	68fb      	ldr	r3, [r7, #12]
 801e8f8:	330c      	adds	r3, #12
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	429a      	cmp	r2, r3
 801e8fe:	d101      	bne.n	801e904 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	e030      	b.n	801e966 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	60fb      	str	r3, [r7, #12]
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d1c5      	bne.n	801e89c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e910:	4b19      	ldr	r3, [pc, #100]	@ (801e978 <ip4_route+0xec>)
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	2b00      	cmp	r3, #0
 801e916:	d01a      	beq.n	801e94e <ip4_route+0xc2>
 801e918:	4b17      	ldr	r3, [pc, #92]	@ (801e978 <ip4_route+0xec>)
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e920:	f003 0301 	and.w	r3, r3, #1
 801e924:	2b00      	cmp	r3, #0
 801e926:	d012      	beq.n	801e94e <ip4_route+0xc2>
 801e928:	4b13      	ldr	r3, [pc, #76]	@ (801e978 <ip4_route+0xec>)
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e930:	f003 0304 	and.w	r3, r3, #4
 801e934:	2b00      	cmp	r3, #0
 801e936:	d00a      	beq.n	801e94e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e938:	4b0f      	ldr	r3, [pc, #60]	@ (801e978 <ip4_route+0xec>)
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	3304      	adds	r3, #4
 801e93e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e940:	2b00      	cmp	r3, #0
 801e942:	d004      	beq.n	801e94e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	b2db      	uxtb	r3, r3
 801e94a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e94c:	d109      	bne.n	801e962 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801e94e:	4b0b      	ldr	r3, [pc, #44]	@ (801e97c <ip4_route+0xf0>)
 801e950:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801e954:	3301      	adds	r3, #1
 801e956:	b29a      	uxth	r2, r3
 801e958:	4b08      	ldr	r3, [pc, #32]	@ (801e97c <ip4_route+0xf0>)
 801e95a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e95e:	2300      	movs	r3, #0
 801e960:	e001      	b.n	801e966 <ip4_route+0xda>
  }

  return netif_default;
 801e962:	4b05      	ldr	r3, [pc, #20]	@ (801e978 <ip4_route+0xec>)
 801e964:	681b      	ldr	r3, [r3, #0]
}
 801e966:	4618      	mov	r0, r3
 801e968:	3714      	adds	r7, #20
 801e96a:	46bd      	mov	sp, r7
 801e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e970:	4770      	bx	lr
 801e972:	bf00      	nop
 801e974:	2002d34c 	.word	0x2002d34c
 801e978:	2002d350 	.word	0x2002d350
 801e97c:	2002d358 	.word	0x2002d358

0801e980 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b082      	sub	sp, #8
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e98e:	f003 0301 	and.w	r3, r3, #1
 801e992:	b2db      	uxtb	r3, r3
 801e994:	2b00      	cmp	r3, #0
 801e996:	d016      	beq.n	801e9c6 <ip4_input_accept+0x46>
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	3304      	adds	r3, #4
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d011      	beq.n	801e9c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e9a2:	4b0b      	ldr	r3, [pc, #44]	@ (801e9d0 <ip4_input_accept+0x50>)
 801e9a4:	695a      	ldr	r2, [r3, #20]
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	3304      	adds	r3, #4
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	429a      	cmp	r2, r3
 801e9ae:	d008      	beq.n	801e9c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e9b0:	4b07      	ldr	r3, [pc, #28]	@ (801e9d0 <ip4_input_accept+0x50>)
 801e9b2:	695b      	ldr	r3, [r3, #20]
 801e9b4:	6879      	ldr	r1, [r7, #4]
 801e9b6:	4618      	mov	r0, r3
 801e9b8:	f000 fa70 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801e9bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d001      	beq.n	801e9c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e9c2:	2301      	movs	r3, #1
 801e9c4:	e000      	b.n	801e9c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e9c6:	2300      	movs	r3, #0
}
 801e9c8:	4618      	mov	r0, r3
 801e9ca:	3708      	adds	r7, #8
 801e9cc:	46bd      	mov	sp, r7
 801e9ce:	bd80      	pop	{r7, pc}
 801e9d0:	200270e8 	.word	0x200270e8

0801e9d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e9d4:	b580      	push	{r7, lr}
 801e9d6:	b086      	sub	sp, #24
 801e9d8:	af00      	add	r7, sp, #0
 801e9da:	6078      	str	r0, [r7, #4]
 801e9dc:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801e9de:	4b8f      	ldr	r3, [pc, #572]	@ (801ec1c <ip4_input+0x248>)
 801e9e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801e9e4:	3301      	adds	r3, #1
 801e9e6:	b29a      	uxth	r2, r3
 801e9e8:	4b8c      	ldr	r3, [pc, #560]	@ (801ec1c <ip4_input+0x248>)
 801e9ea:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	685b      	ldr	r3, [r3, #4]
 801e9f2:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801e9f4:	693b      	ldr	r3, [r7, #16]
 801e9f6:	781b      	ldrb	r3, [r3, #0]
 801e9f8:	091b      	lsrs	r3, r3, #4
 801e9fa:	b2db      	uxtb	r3, r3
 801e9fc:	2b04      	cmp	r3, #4
 801e9fe:	d014      	beq.n	801ea2a <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ea00:	6878      	ldr	r0, [r7, #4]
 801ea02:	f7f6 fd77 	bl	80154f4 <pbuf_free>
    IP_STATS_INC(ip.err);
 801ea06:	4b85      	ldr	r3, [pc, #532]	@ (801ec1c <ip4_input+0x248>)
 801ea08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ea0c:	3301      	adds	r3, #1
 801ea0e:	b29a      	uxth	r2, r3
 801ea10:	4b82      	ldr	r3, [pc, #520]	@ (801ec1c <ip4_input+0x248>)
 801ea12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801ea16:	4b81      	ldr	r3, [pc, #516]	@ (801ec1c <ip4_input+0x248>)
 801ea18:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801ea1c:	3301      	adds	r3, #1
 801ea1e:	b29a      	uxth	r2, r3
 801ea20:	4b7e      	ldr	r3, [pc, #504]	@ (801ec1c <ip4_input+0x248>)
 801ea22:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ea26:	2300      	movs	r3, #0
 801ea28:	e13e      	b.n	801eca8 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ea2a:	693b      	ldr	r3, [r7, #16]
 801ea2c:	781b      	ldrb	r3, [r3, #0]
 801ea2e:	f003 030f 	and.w	r3, r3, #15
 801ea32:	b2db      	uxtb	r3, r3
 801ea34:	009b      	lsls	r3, r3, #2
 801ea36:	b2db      	uxtb	r3, r3
 801ea38:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ea3a:	693b      	ldr	r3, [r7, #16]
 801ea3c:	885b      	ldrh	r3, [r3, #2]
 801ea3e:	b29b      	uxth	r3, r3
 801ea40:	4618      	mov	r0, r3
 801ea42:	f7f4 ff29 	bl	8013898 <lwip_htons>
 801ea46:	4603      	mov	r3, r0
 801ea48:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	891b      	ldrh	r3, [r3, #8]
 801ea4e:	89ba      	ldrh	r2, [r7, #12]
 801ea50:	429a      	cmp	r2, r3
 801ea52:	d204      	bcs.n	801ea5e <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801ea54:	89bb      	ldrh	r3, [r7, #12]
 801ea56:	4619      	mov	r1, r3
 801ea58:	6878      	ldr	r0, [r7, #4]
 801ea5a:	f7f6 fbab 	bl	80151b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	895b      	ldrh	r3, [r3, #10]
 801ea62:	89fa      	ldrh	r2, [r7, #14]
 801ea64:	429a      	cmp	r2, r3
 801ea66:	d807      	bhi.n	801ea78 <ip4_input+0xa4>
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	891b      	ldrh	r3, [r3, #8]
 801ea6c:	89ba      	ldrh	r2, [r7, #12]
 801ea6e:	429a      	cmp	r2, r3
 801ea70:	d802      	bhi.n	801ea78 <ip4_input+0xa4>
 801ea72:	89fb      	ldrh	r3, [r7, #14]
 801ea74:	2b13      	cmp	r3, #19
 801ea76:	d814      	bhi.n	801eaa2 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ea78:	6878      	ldr	r0, [r7, #4]
 801ea7a:	f7f6 fd3b 	bl	80154f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801ea7e:	4b67      	ldr	r3, [pc, #412]	@ (801ec1c <ip4_input+0x248>)
 801ea80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801ea84:	3301      	adds	r3, #1
 801ea86:	b29a      	uxth	r2, r3
 801ea88:	4b64      	ldr	r3, [pc, #400]	@ (801ec1c <ip4_input+0x248>)
 801ea8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801ea8e:	4b63      	ldr	r3, [pc, #396]	@ (801ec1c <ip4_input+0x248>)
 801ea90:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801ea94:	3301      	adds	r3, #1
 801ea96:	b29a      	uxth	r2, r3
 801ea98:	4b60      	ldr	r3, [pc, #384]	@ (801ec1c <ip4_input+0x248>)
 801ea9a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ea9e:	2300      	movs	r3, #0
 801eaa0:	e102      	b.n	801eca8 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801eaa2:	693b      	ldr	r3, [r7, #16]
 801eaa4:	691b      	ldr	r3, [r3, #16]
 801eaa6:	4a5e      	ldr	r2, [pc, #376]	@ (801ec20 <ip4_input+0x24c>)
 801eaa8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801eaaa:	693b      	ldr	r3, [r7, #16]
 801eaac:	68db      	ldr	r3, [r3, #12]
 801eaae:	4a5c      	ldr	r2, [pc, #368]	@ (801ec20 <ip4_input+0x24c>)
 801eab0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801eab2:	4b5b      	ldr	r3, [pc, #364]	@ (801ec20 <ip4_input+0x24c>)
 801eab4:	695b      	ldr	r3, [r3, #20]
 801eab6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801eaba:	2be0      	cmp	r3, #224	@ 0xe0
 801eabc:	d112      	bne.n	801eae4 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801eabe:	683b      	ldr	r3, [r7, #0]
 801eac0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801eac4:	f003 0301 	and.w	r3, r3, #1
 801eac8:	b2db      	uxtb	r3, r3
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d007      	beq.n	801eade <ip4_input+0x10a>
 801eace:	683b      	ldr	r3, [r7, #0]
 801ead0:	3304      	adds	r3, #4
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	d002      	beq.n	801eade <ip4_input+0x10a>
      netif = inp;
 801ead8:	683b      	ldr	r3, [r7, #0]
 801eada:	617b      	str	r3, [r7, #20]
 801eadc:	e02a      	b.n	801eb34 <ip4_input+0x160>
    } else {
      netif = NULL;
 801eade:	2300      	movs	r3, #0
 801eae0:	617b      	str	r3, [r7, #20]
 801eae2:	e027      	b.n	801eb34 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801eae4:	6838      	ldr	r0, [r7, #0]
 801eae6:	f7ff ff4b 	bl	801e980 <ip4_input_accept>
 801eaea:	4603      	mov	r3, r0
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d002      	beq.n	801eaf6 <ip4_input+0x122>
      netif = inp;
 801eaf0:	683b      	ldr	r3, [r7, #0]
 801eaf2:	617b      	str	r3, [r7, #20]
 801eaf4:	e01e      	b.n	801eb34 <ip4_input+0x160>
    } else {
      netif = NULL;
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801eafa:	4b49      	ldr	r3, [pc, #292]	@ (801ec20 <ip4_input+0x24c>)
 801eafc:	695b      	ldr	r3, [r3, #20]
 801eafe:	b2db      	uxtb	r3, r3
 801eb00:	2b7f      	cmp	r3, #127	@ 0x7f
 801eb02:	d017      	beq.n	801eb34 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801eb04:	4b47      	ldr	r3, [pc, #284]	@ (801ec24 <ip4_input+0x250>)
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	617b      	str	r3, [r7, #20]
 801eb0a:	e00e      	b.n	801eb2a <ip4_input+0x156>
          if (netif == inp) {
 801eb0c:	697a      	ldr	r2, [r7, #20]
 801eb0e:	683b      	ldr	r3, [r7, #0]
 801eb10:	429a      	cmp	r2, r3
 801eb12:	d006      	beq.n	801eb22 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801eb14:	6978      	ldr	r0, [r7, #20]
 801eb16:	f7ff ff33 	bl	801e980 <ip4_input_accept>
 801eb1a:	4603      	mov	r3, r0
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d108      	bne.n	801eb32 <ip4_input+0x15e>
 801eb20:	e000      	b.n	801eb24 <ip4_input+0x150>
            continue;
 801eb22:	bf00      	nop
        NETIF_FOREACH(netif) {
 801eb24:	697b      	ldr	r3, [r7, #20]
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	617b      	str	r3, [r7, #20]
 801eb2a:	697b      	ldr	r3, [r7, #20]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d1ed      	bne.n	801eb0c <ip4_input+0x138>
 801eb30:	e000      	b.n	801eb34 <ip4_input+0x160>
            break;
 801eb32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801eb34:	4b3a      	ldr	r3, [pc, #232]	@ (801ec20 <ip4_input+0x24c>)
 801eb36:	691b      	ldr	r3, [r3, #16]
 801eb38:	6839      	ldr	r1, [r7, #0]
 801eb3a:	4618      	mov	r0, r3
 801eb3c:	f000 f9ae 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801eb40:	4603      	mov	r3, r0
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d105      	bne.n	801eb52 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801eb46:	4b36      	ldr	r3, [pc, #216]	@ (801ec20 <ip4_input+0x24c>)
 801eb48:	691b      	ldr	r3, [r3, #16]
 801eb4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801eb4e:	2be0      	cmp	r3, #224	@ 0xe0
 801eb50:	d10c      	bne.n	801eb6c <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801eb52:	6878      	ldr	r0, [r7, #4]
 801eb54:	f7f6 fcce 	bl	80154f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801eb58:	4b30      	ldr	r3, [pc, #192]	@ (801ec1c <ip4_input+0x248>)
 801eb5a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801eb5e:	3301      	adds	r3, #1
 801eb60:	b29a      	uxth	r2, r3
 801eb62:	4b2e      	ldr	r3, [pc, #184]	@ (801ec1c <ip4_input+0x248>)
 801eb64:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801eb68:	2300      	movs	r3, #0
 801eb6a:	e09d      	b.n	801eca8 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801eb6c:	697b      	ldr	r3, [r7, #20]
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	d10c      	bne.n	801eb8c <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801eb72:	4b2a      	ldr	r3, [pc, #168]	@ (801ec1c <ip4_input+0x248>)
 801eb74:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801eb78:	3301      	adds	r3, #1
 801eb7a:	b29a      	uxth	r2, r3
 801eb7c:	4b27      	ldr	r3, [pc, #156]	@ (801ec1c <ip4_input+0x248>)
 801eb7e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801eb82:	6878      	ldr	r0, [r7, #4]
 801eb84:	f7f6 fcb6 	bl	80154f4 <pbuf_free>
    return ERR_OK;
 801eb88:	2300      	movs	r3, #0
 801eb8a:	e08d      	b.n	801eca8 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801eb8c:	693b      	ldr	r3, [r7, #16]
 801eb8e:	88db      	ldrh	r3, [r3, #6]
 801eb90:	b29b      	uxth	r3, r3
 801eb92:	461a      	mov	r2, r3
 801eb94:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801eb98:	4013      	ands	r3, r2
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d00b      	beq.n	801ebb6 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801eb9e:	6878      	ldr	r0, [r7, #4]
 801eba0:	f000 fcca 	bl	801f538 <ip4_reass>
 801eba4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d101      	bne.n	801ebb0 <ip4_input+0x1dc>
      return ERR_OK;
 801ebac:	2300      	movs	r3, #0
 801ebae:	e07b      	b.n	801eca8 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	685b      	ldr	r3, [r3, #4]
 801ebb4:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ebb6:	4a1a      	ldr	r2, [pc, #104]	@ (801ec20 <ip4_input+0x24c>)
 801ebb8:	697b      	ldr	r3, [r7, #20]
 801ebba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ebbc:	4a18      	ldr	r2, [pc, #96]	@ (801ec20 <ip4_input+0x24c>)
 801ebbe:	683b      	ldr	r3, [r7, #0]
 801ebc0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ebc2:	4a17      	ldr	r2, [pc, #92]	@ (801ec20 <ip4_input+0x24c>)
 801ebc4:	693b      	ldr	r3, [r7, #16]
 801ebc6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ebc8:	693b      	ldr	r3, [r7, #16]
 801ebca:	781b      	ldrb	r3, [r3, #0]
 801ebcc:	f003 030f 	and.w	r3, r3, #15
 801ebd0:	b2db      	uxtb	r3, r3
 801ebd2:	009b      	lsls	r3, r3, #2
 801ebd4:	b2db      	uxtb	r3, r3
 801ebd6:	461a      	mov	r2, r3
 801ebd8:	4b11      	ldr	r3, [pc, #68]	@ (801ec20 <ip4_input+0x24c>)
 801ebda:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ebdc:	89fb      	ldrh	r3, [r7, #14]
 801ebde:	4619      	mov	r1, r3
 801ebe0:	6878      	ldr	r0, [r7, #4]
 801ebe2:	f7f6 fbf9 	bl	80153d8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ebe6:	693b      	ldr	r3, [r7, #16]
 801ebe8:	7a5b      	ldrb	r3, [r3, #9]
 801ebea:	2b11      	cmp	r3, #17
 801ebec:	d006      	beq.n	801ebfc <ip4_input+0x228>
 801ebee:	2b11      	cmp	r3, #17
 801ebf0:	dc1a      	bgt.n	801ec28 <ip4_input+0x254>
 801ebf2:	2b01      	cmp	r3, #1
 801ebf4:	d00c      	beq.n	801ec10 <ip4_input+0x23c>
 801ebf6:	2b06      	cmp	r3, #6
 801ebf8:	d005      	beq.n	801ec06 <ip4_input+0x232>
 801ebfa:	e015      	b.n	801ec28 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ebfc:	6839      	ldr	r1, [r7, #0]
 801ebfe:	6878      	ldr	r0, [r7, #4]
 801ec00:	f7fd fd16 	bl	801c630 <udp_input>
        break;
 801ec04:	e03d      	b.n	801ec82 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ec06:	6839      	ldr	r1, [r7, #0]
 801ec08:	6878      	ldr	r0, [r7, #4]
 801ec0a:	f7f8 ffb3 	bl	8017b74 <tcp_input>
        break;
 801ec0e:	e038      	b.n	801ec82 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ec10:	6839      	ldr	r1, [r7, #0]
 801ec12:	6878      	ldr	r0, [r7, #4]
 801ec14:	f7ff fbdc 	bl	801e3d0 <icmp_input>
        break;
 801ec18:	e033      	b.n	801ec82 <ip4_input+0x2ae>
 801ec1a:	bf00      	nop
 801ec1c:	2002d358 	.word	0x2002d358
 801ec20:	200270e8 	.word	0x200270e8
 801ec24:	2002d34c 	.word	0x2002d34c
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ec28:	4b21      	ldr	r3, [pc, #132]	@ (801ecb0 <ip4_input+0x2dc>)
 801ec2a:	695b      	ldr	r3, [r3, #20]
 801ec2c:	6979      	ldr	r1, [r7, #20]
 801ec2e:	4618      	mov	r0, r3
 801ec30:	f000 f934 	bl	801ee9c <ip4_addr_isbroadcast_u32>
 801ec34:	4603      	mov	r3, r0
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	d10f      	bne.n	801ec5a <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ec3a:	4b1d      	ldr	r3, [pc, #116]	@ (801ecb0 <ip4_input+0x2dc>)
 801ec3c:	695b      	ldr	r3, [r3, #20]
 801ec3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ec42:	2be0      	cmp	r3, #224	@ 0xe0
 801ec44:	d009      	beq.n	801ec5a <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ec46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ec4a:	4619      	mov	r1, r3
 801ec4c:	6878      	ldr	r0, [r7, #4]
 801ec4e:	f7f6 fc3e 	bl	80154ce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ec52:	2102      	movs	r1, #2
 801ec54:	6878      	ldr	r0, [r7, #4]
 801ec56:	f7ff fd45 	bl	801e6e4 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801ec5a:	4b16      	ldr	r3, [pc, #88]	@ (801ecb4 <ip4_input+0x2e0>)
 801ec5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801ec60:	3301      	adds	r3, #1
 801ec62:	b29a      	uxth	r2, r3
 801ec64:	4b13      	ldr	r3, [pc, #76]	@ (801ecb4 <ip4_input+0x2e0>)
 801ec66:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801ec6a:	4b12      	ldr	r3, [pc, #72]	@ (801ecb4 <ip4_input+0x2e0>)
 801ec6c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801ec70:	3301      	adds	r3, #1
 801ec72:	b29a      	uxth	r2, r3
 801ec74:	4b0f      	ldr	r3, [pc, #60]	@ (801ecb4 <ip4_input+0x2e0>)
 801ec76:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ec7a:	6878      	ldr	r0, [r7, #4]
 801ec7c:	f7f6 fc3a 	bl	80154f4 <pbuf_free>
        break;
 801ec80:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ec82:	4b0b      	ldr	r3, [pc, #44]	@ (801ecb0 <ip4_input+0x2dc>)
 801ec84:	2200      	movs	r2, #0
 801ec86:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ec88:	4b09      	ldr	r3, [pc, #36]	@ (801ecb0 <ip4_input+0x2dc>)
 801ec8a:	2200      	movs	r2, #0
 801ec8c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ec8e:	4b08      	ldr	r3, [pc, #32]	@ (801ecb0 <ip4_input+0x2dc>)
 801ec90:	2200      	movs	r2, #0
 801ec92:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ec94:	4b06      	ldr	r3, [pc, #24]	@ (801ecb0 <ip4_input+0x2dc>)
 801ec96:	2200      	movs	r2, #0
 801ec98:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ec9a:	4b05      	ldr	r3, [pc, #20]	@ (801ecb0 <ip4_input+0x2dc>)
 801ec9c:	2200      	movs	r2, #0
 801ec9e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801eca0:	4b03      	ldr	r3, [pc, #12]	@ (801ecb0 <ip4_input+0x2dc>)
 801eca2:	2200      	movs	r2, #0
 801eca4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801eca6:	2300      	movs	r3, #0
}
 801eca8:	4618      	mov	r0, r3
 801ecaa:	3718      	adds	r7, #24
 801ecac:	46bd      	mov	sp, r7
 801ecae:	bd80      	pop	{r7, pc}
 801ecb0:	200270e8 	.word	0x200270e8
 801ecb4:	2002d358 	.word	0x2002d358

0801ecb8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ecb8:	b580      	push	{r7, lr}
 801ecba:	b08a      	sub	sp, #40	@ 0x28
 801ecbc:	af04      	add	r7, sp, #16
 801ecbe:	60f8      	str	r0, [r7, #12]
 801ecc0:	60b9      	str	r1, [r7, #8]
 801ecc2:	607a      	str	r2, [r7, #4]
 801ecc4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801ecc6:	68bb      	ldr	r3, [r7, #8]
 801ecc8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d009      	beq.n	801ece4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801ecd0:	68bb      	ldr	r3, [r7, #8]
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d003      	beq.n	801ecde <ip4_output_if+0x26>
 801ecd6:	68bb      	ldr	r3, [r7, #8]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d102      	bne.n	801ece4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ecde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ece0:	3304      	adds	r3, #4
 801ece2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ece4:	78fa      	ldrb	r2, [r7, #3]
 801ece6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ece8:	9302      	str	r3, [sp, #8]
 801ecea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801ecee:	9301      	str	r3, [sp, #4]
 801ecf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ecf4:	9300      	str	r3, [sp, #0]
 801ecf6:	4613      	mov	r3, r2
 801ecf8:	687a      	ldr	r2, [r7, #4]
 801ecfa:	6979      	ldr	r1, [r7, #20]
 801ecfc:	68f8      	ldr	r0, [r7, #12]
 801ecfe:	f000 f805 	bl	801ed0c <ip4_output_if_src>
 801ed02:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ed04:	4618      	mov	r0, r3
 801ed06:	3718      	adds	r7, #24
 801ed08:	46bd      	mov	sp, r7
 801ed0a:	bd80      	pop	{r7, pc}

0801ed0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ed0c:	b580      	push	{r7, lr}
 801ed0e:	b088      	sub	sp, #32
 801ed10:	af00      	add	r7, sp, #0
 801ed12:	60f8      	str	r0, [r7, #12]
 801ed14:	60b9      	str	r1, [r7, #8]
 801ed16:	607a      	str	r2, [r7, #4]
 801ed18:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	7b9b      	ldrb	r3, [r3, #14]
 801ed1e:	2b01      	cmp	r3, #1
 801ed20:	d006      	beq.n	801ed30 <ip4_output_if_src+0x24>
 801ed22:	4b57      	ldr	r3, [pc, #348]	@ (801ee80 <ip4_output_if_src+0x174>)
 801ed24:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801ed28:	4956      	ldr	r1, [pc, #344]	@ (801ee84 <ip4_output_if_src+0x178>)
 801ed2a:	4857      	ldr	r0, [pc, #348]	@ (801ee88 <ip4_output_if_src+0x17c>)
 801ed2c:	f002 fc28 	bl	8021580 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d068      	beq.n	801ee08 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801ed36:	2314      	movs	r3, #20
 801ed38:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ed3a:	2114      	movs	r1, #20
 801ed3c:	68f8      	ldr	r0, [r7, #12]
 801ed3e:	f7f6 fb3b 	bl	80153b8 <pbuf_add_header>
 801ed42:	4603      	mov	r3, r0
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d00a      	beq.n	801ed5e <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801ed48:	4b50      	ldr	r3, [pc, #320]	@ (801ee8c <ip4_output_if_src+0x180>)
 801ed4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ed4e:	3301      	adds	r3, #1
 801ed50:	b29a      	uxth	r2, r3
 801ed52:	4b4e      	ldr	r3, [pc, #312]	@ (801ee8c <ip4_output_if_src+0x180>)
 801ed54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ed58:	f06f 0301 	mvn.w	r3, #1
 801ed5c:	e08c      	b.n	801ee78 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	685b      	ldr	r3, [r3, #4]
 801ed62:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ed64:	68fb      	ldr	r3, [r7, #12]
 801ed66:	895b      	ldrh	r3, [r3, #10]
 801ed68:	2b13      	cmp	r3, #19
 801ed6a:	d806      	bhi.n	801ed7a <ip4_output_if_src+0x6e>
 801ed6c:	4b44      	ldr	r3, [pc, #272]	@ (801ee80 <ip4_output_if_src+0x174>)
 801ed6e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801ed72:	4947      	ldr	r1, [pc, #284]	@ (801ee90 <ip4_output_if_src+0x184>)
 801ed74:	4844      	ldr	r0, [pc, #272]	@ (801ee88 <ip4_output_if_src+0x17c>)
 801ed76:	f002 fc03 	bl	8021580 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ed7a:	69fb      	ldr	r3, [r7, #28]
 801ed7c:	78fa      	ldrb	r2, [r7, #3]
 801ed7e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ed80:	69fb      	ldr	r3, [r7, #28]
 801ed82:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801ed86:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	681a      	ldr	r2, [r3, #0]
 801ed8c:	69fb      	ldr	r3, [r7, #28]
 801ed8e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ed90:	8b7b      	ldrh	r3, [r7, #26]
 801ed92:	089b      	lsrs	r3, r3, #2
 801ed94:	b29b      	uxth	r3, r3
 801ed96:	b2db      	uxtb	r3, r3
 801ed98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed9c:	b2da      	uxtb	r2, r3
 801ed9e:	69fb      	ldr	r3, [r7, #28]
 801eda0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801eda2:	69fb      	ldr	r3, [r7, #28]
 801eda4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801eda8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	891b      	ldrh	r3, [r3, #8]
 801edae:	4618      	mov	r0, r3
 801edb0:	f7f4 fd72 	bl	8013898 <lwip_htons>
 801edb4:	4603      	mov	r3, r0
 801edb6:	461a      	mov	r2, r3
 801edb8:	69fb      	ldr	r3, [r7, #28]
 801edba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801edbc:	69fb      	ldr	r3, [r7, #28]
 801edbe:	2200      	movs	r2, #0
 801edc0:	719a      	strb	r2, [r3, #6]
 801edc2:	2200      	movs	r2, #0
 801edc4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801edc6:	4b33      	ldr	r3, [pc, #204]	@ (801ee94 <ip4_output_if_src+0x188>)
 801edc8:	881b      	ldrh	r3, [r3, #0]
 801edca:	4618      	mov	r0, r3
 801edcc:	f7f4 fd64 	bl	8013898 <lwip_htons>
 801edd0:	4603      	mov	r3, r0
 801edd2:	461a      	mov	r2, r3
 801edd4:	69fb      	ldr	r3, [r7, #28]
 801edd6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801edd8:	4b2e      	ldr	r3, [pc, #184]	@ (801ee94 <ip4_output_if_src+0x188>)
 801edda:	881b      	ldrh	r3, [r3, #0]
 801eddc:	3301      	adds	r3, #1
 801edde:	b29a      	uxth	r2, r3
 801ede0:	4b2c      	ldr	r3, [pc, #176]	@ (801ee94 <ip4_output_if_src+0x188>)
 801ede2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ede4:	68bb      	ldr	r3, [r7, #8]
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d104      	bne.n	801edf4 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801edea:	4b2b      	ldr	r3, [pc, #172]	@ (801ee98 <ip4_output_if_src+0x18c>)
 801edec:	681a      	ldr	r2, [r3, #0]
 801edee:	69fb      	ldr	r3, [r7, #28]
 801edf0:	60da      	str	r2, [r3, #12]
 801edf2:	e003      	b.n	801edfc <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801edf4:	68bb      	ldr	r3, [r7, #8]
 801edf6:	681a      	ldr	r2, [r3, #0]
 801edf8:	69fb      	ldr	r3, [r7, #28]
 801edfa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801edfc:	69fb      	ldr	r3, [r7, #28]
 801edfe:	2200      	movs	r2, #0
 801ee00:	729a      	strb	r2, [r3, #10]
 801ee02:	2200      	movs	r2, #0
 801ee04:	72da      	strb	r2, [r3, #11]
 801ee06:	e017      	b.n	801ee38 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	895b      	ldrh	r3, [r3, #10]
 801ee0c:	2b13      	cmp	r3, #19
 801ee0e:	d80a      	bhi.n	801ee26 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801ee10:	4b1e      	ldr	r3, [pc, #120]	@ (801ee8c <ip4_output_if_src+0x180>)
 801ee12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ee16:	3301      	adds	r3, #1
 801ee18:	b29a      	uxth	r2, r3
 801ee1a:	4b1c      	ldr	r3, [pc, #112]	@ (801ee8c <ip4_output_if_src+0x180>)
 801ee1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ee20:	f06f 0301 	mvn.w	r3, #1
 801ee24:	e028      	b.n	801ee78 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	685b      	ldr	r3, [r3, #4]
 801ee2a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ee2c:	69fb      	ldr	r3, [r7, #28]
 801ee2e:	691b      	ldr	r3, [r3, #16]
 801ee30:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ee32:	f107 0314 	add.w	r3, r7, #20
 801ee36:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801ee38:	4b14      	ldr	r3, [pc, #80]	@ (801ee8c <ip4_output_if_src+0x180>)
 801ee3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ee3e:	3301      	adds	r3, #1
 801ee40:	b29a      	uxth	r2, r3
 801ee42:	4b12      	ldr	r3, [pc, #72]	@ (801ee8c <ip4_output_if_src+0x180>)
 801ee44:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ee48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ee4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d00c      	beq.n	801ee6a <ip4_output_if_src+0x15e>
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	891a      	ldrh	r2, [r3, #8]
 801ee54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ee56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ee58:	429a      	cmp	r2, r3
 801ee5a:	d906      	bls.n	801ee6a <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801ee5c:	687a      	ldr	r2, [r7, #4]
 801ee5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801ee60:	68f8      	ldr	r0, [r7, #12]
 801ee62:	f000 fd7b 	bl	801f95c <ip4_frag>
 801ee66:	4603      	mov	r3, r0
 801ee68:	e006      	b.n	801ee78 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ee6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ee6c:	695b      	ldr	r3, [r3, #20]
 801ee6e:	687a      	ldr	r2, [r7, #4]
 801ee70:	68f9      	ldr	r1, [r7, #12]
 801ee72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ee74:	4798      	blx	r3
 801ee76:	4603      	mov	r3, r0
}
 801ee78:	4618      	mov	r0, r3
 801ee7a:	3720      	adds	r7, #32
 801ee7c:	46bd      	mov	sp, r7
 801ee7e:	bd80      	pop	{r7, pc}
 801ee80:	0802698c 	.word	0x0802698c
 801ee84:	080269c0 	.word	0x080269c0
 801ee88:	080269cc 	.word	0x080269cc
 801ee8c:	2002d358 	.word	0x2002d358
 801ee90:	080269f4 	.word	0x080269f4
 801ee94:	2002d5ae 	.word	0x2002d5ae
 801ee98:	08027410 	.word	0x08027410

0801ee9c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ee9c:	b480      	push	{r7}
 801ee9e:	b085      	sub	sp, #20
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]
 801eea4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801eeb0:	d002      	beq.n	801eeb8 <ip4_addr_isbroadcast_u32+0x1c>
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d101      	bne.n	801eebc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801eeb8:	2301      	movs	r3, #1
 801eeba:	e02a      	b.n	801ef12 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801eebc:	683b      	ldr	r3, [r7, #0]
 801eebe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801eec2:	f003 0302 	and.w	r3, r3, #2
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d101      	bne.n	801eece <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801eeca:	2300      	movs	r3, #0
 801eecc:	e021      	b.n	801ef12 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801eece:	683b      	ldr	r3, [r7, #0]
 801eed0:	3304      	adds	r3, #4
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	687a      	ldr	r2, [r7, #4]
 801eed6:	429a      	cmp	r2, r3
 801eed8:	d101      	bne.n	801eede <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801eeda:	2300      	movs	r3, #0
 801eedc:	e019      	b.n	801ef12 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801eede:	68fa      	ldr	r2, [r7, #12]
 801eee0:	683b      	ldr	r3, [r7, #0]
 801eee2:	3304      	adds	r3, #4
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	405a      	eors	r2, r3
 801eee8:	683b      	ldr	r3, [r7, #0]
 801eeea:	3308      	adds	r3, #8
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	4013      	ands	r3, r2
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	d10d      	bne.n	801ef10 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801eef4:	683b      	ldr	r3, [r7, #0]
 801eef6:	3308      	adds	r3, #8
 801eef8:	681b      	ldr	r3, [r3, #0]
 801eefa:	43da      	mvns	r2, r3
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801ef00:	683b      	ldr	r3, [r7, #0]
 801ef02:	3308      	adds	r3, #8
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ef08:	429a      	cmp	r2, r3
 801ef0a:	d101      	bne.n	801ef10 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ef0c:	2301      	movs	r3, #1
 801ef0e:	e000      	b.n	801ef12 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ef10:	2300      	movs	r3, #0
  }
}
 801ef12:	4618      	mov	r0, r3
 801ef14:	3714      	adds	r7, #20
 801ef16:	46bd      	mov	sp, r7
 801ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef1c:	4770      	bx	lr
	...

0801ef20 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ef20:	b580      	push	{r7, lr}
 801ef22:	b084      	sub	sp, #16
 801ef24:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ef26:	2300      	movs	r3, #0
 801ef28:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ef2a:	4b12      	ldr	r3, [pc, #72]	@ (801ef74 <ip_reass_tmr+0x54>)
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ef30:	e018      	b.n	801ef64 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	7fdb      	ldrb	r3, [r3, #31]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d00b      	beq.n	801ef52 <ip_reass_tmr+0x32>
      r->timer--;
 801ef3a:	68fb      	ldr	r3, [r7, #12]
 801ef3c:	7fdb      	ldrb	r3, [r3, #31]
 801ef3e:	3b01      	subs	r3, #1
 801ef40:	b2da      	uxtb	r2, r3
 801ef42:	68fb      	ldr	r3, [r7, #12]
 801ef44:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ef46:	68fb      	ldr	r3, [r7, #12]
 801ef48:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	60fb      	str	r3, [r7, #12]
 801ef50:	e008      	b.n	801ef64 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ef52:	68fb      	ldr	r3, [r7, #12]
 801ef54:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	681b      	ldr	r3, [r3, #0]
 801ef5a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ef5c:	68b9      	ldr	r1, [r7, #8]
 801ef5e:	6878      	ldr	r0, [r7, #4]
 801ef60:	f000 f80a 	bl	801ef78 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	2b00      	cmp	r3, #0
 801ef68:	d1e3      	bne.n	801ef32 <ip_reass_tmr+0x12>
    }
  }
}
 801ef6a:	bf00      	nop
 801ef6c:	bf00      	nop
 801ef6e:	3710      	adds	r7, #16
 801ef70:	46bd      	mov	sp, r7
 801ef72:	bd80      	pop	{r7, pc}
 801ef74:	2002d5b0 	.word	0x2002d5b0

0801ef78 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ef78:	b580      	push	{r7, lr}
 801ef7a:	b088      	sub	sp, #32
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	6078      	str	r0, [r7, #4]
 801ef80:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ef82:	2300      	movs	r3, #0
 801ef84:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ef86:	683a      	ldr	r2, [r7, #0]
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	429a      	cmp	r2, r3
 801ef8c:	d105      	bne.n	801ef9a <ip_reass_free_complete_datagram+0x22>
 801ef8e:	4b45      	ldr	r3, [pc, #276]	@ (801f0a4 <ip_reass_free_complete_datagram+0x12c>)
 801ef90:	22ab      	movs	r2, #171	@ 0xab
 801ef92:	4945      	ldr	r1, [pc, #276]	@ (801f0a8 <ip_reass_free_complete_datagram+0x130>)
 801ef94:	4845      	ldr	r0, [pc, #276]	@ (801f0ac <ip_reass_free_complete_datagram+0x134>)
 801ef96:	f002 faf3 	bl	8021580 <iprintf>
  if (prev != NULL) {
 801ef9a:	683b      	ldr	r3, [r7, #0]
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d00a      	beq.n	801efb6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801efa0:	683b      	ldr	r3, [r7, #0]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	687a      	ldr	r2, [r7, #4]
 801efa6:	429a      	cmp	r2, r3
 801efa8:	d005      	beq.n	801efb6 <ip_reass_free_complete_datagram+0x3e>
 801efaa:	4b3e      	ldr	r3, [pc, #248]	@ (801f0a4 <ip_reass_free_complete_datagram+0x12c>)
 801efac:	22ad      	movs	r2, #173	@ 0xad
 801efae:	4940      	ldr	r1, [pc, #256]	@ (801f0b0 <ip_reass_free_complete_datagram+0x138>)
 801efb0:	483e      	ldr	r0, [pc, #248]	@ (801f0ac <ip_reass_free_complete_datagram+0x134>)
 801efb2:	f002 fae5 	bl	8021580 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	685b      	ldr	r3, [r3, #4]
 801efba:	685b      	ldr	r3, [r3, #4]
 801efbc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801efbe:	697b      	ldr	r3, [r7, #20]
 801efc0:	889b      	ldrh	r3, [r3, #4]
 801efc2:	b29b      	uxth	r3, r3
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d12a      	bne.n	801f01e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	685b      	ldr	r3, [r3, #4]
 801efcc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801efce:	697b      	ldr	r3, [r7, #20]
 801efd0:	681a      	ldr	r2, [r3, #0]
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801efd6:	69bb      	ldr	r3, [r7, #24]
 801efd8:	6858      	ldr	r0, [r3, #4]
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	3308      	adds	r3, #8
 801efde:	2214      	movs	r2, #20
 801efe0:	4619      	mov	r1, r3
 801efe2:	f002 fca2 	bl	802192a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801efe6:	2101      	movs	r1, #1
 801efe8:	69b8      	ldr	r0, [r7, #24]
 801efea:	f7ff fb8b 	bl	801e704 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801efee:	69b8      	ldr	r0, [r7, #24]
 801eff0:	f7f6 fb26 	bl	8015640 <pbuf_clen>
 801eff4:	4603      	mov	r3, r0
 801eff6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eff8:	8bfa      	ldrh	r2, [r7, #30]
 801effa:	8a7b      	ldrh	r3, [r7, #18]
 801effc:	4413      	add	r3, r2
 801effe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f002:	db05      	blt.n	801f010 <ip_reass_free_complete_datagram+0x98>
 801f004:	4b27      	ldr	r3, [pc, #156]	@ (801f0a4 <ip_reass_free_complete_datagram+0x12c>)
 801f006:	22bc      	movs	r2, #188	@ 0xbc
 801f008:	492a      	ldr	r1, [pc, #168]	@ (801f0b4 <ip_reass_free_complete_datagram+0x13c>)
 801f00a:	4828      	ldr	r0, [pc, #160]	@ (801f0ac <ip_reass_free_complete_datagram+0x134>)
 801f00c:	f002 fab8 	bl	8021580 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f010:	8bfa      	ldrh	r2, [r7, #30]
 801f012:	8a7b      	ldrh	r3, [r7, #18]
 801f014:	4413      	add	r3, r2
 801f016:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801f018:	69b8      	ldr	r0, [r7, #24]
 801f01a:	f7f6 fa6b 	bl	80154f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	685b      	ldr	r3, [r3, #4]
 801f022:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801f024:	e01f      	b.n	801f066 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801f026:	69bb      	ldr	r3, [r7, #24]
 801f028:	685b      	ldr	r3, [r3, #4]
 801f02a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801f02c:	69bb      	ldr	r3, [r7, #24]
 801f02e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801f030:	697b      	ldr	r3, [r7, #20]
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801f036:	68f8      	ldr	r0, [r7, #12]
 801f038:	f7f6 fb02 	bl	8015640 <pbuf_clen>
 801f03c:	4603      	mov	r3, r0
 801f03e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f040:	8bfa      	ldrh	r2, [r7, #30]
 801f042:	8a7b      	ldrh	r3, [r7, #18]
 801f044:	4413      	add	r3, r2
 801f046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f04a:	db05      	blt.n	801f058 <ip_reass_free_complete_datagram+0xe0>
 801f04c:	4b15      	ldr	r3, [pc, #84]	@ (801f0a4 <ip_reass_free_complete_datagram+0x12c>)
 801f04e:	22cc      	movs	r2, #204	@ 0xcc
 801f050:	4918      	ldr	r1, [pc, #96]	@ (801f0b4 <ip_reass_free_complete_datagram+0x13c>)
 801f052:	4816      	ldr	r0, [pc, #88]	@ (801f0ac <ip_reass_free_complete_datagram+0x134>)
 801f054:	f002 fa94 	bl	8021580 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f058:	8bfa      	ldrh	r2, [r7, #30]
 801f05a:	8a7b      	ldrh	r3, [r7, #18]
 801f05c:	4413      	add	r3, r2
 801f05e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801f060:	68f8      	ldr	r0, [r7, #12]
 801f062:	f7f6 fa47 	bl	80154f4 <pbuf_free>
  while (p != NULL) {
 801f066:	69bb      	ldr	r3, [r7, #24]
 801f068:	2b00      	cmp	r3, #0
 801f06a:	d1dc      	bne.n	801f026 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801f06c:	6839      	ldr	r1, [r7, #0]
 801f06e:	6878      	ldr	r0, [r7, #4]
 801f070:	f000 f8ca 	bl	801f208 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f074:	4b10      	ldr	r3, [pc, #64]	@ (801f0b8 <ip_reass_free_complete_datagram+0x140>)
 801f076:	881b      	ldrh	r3, [r3, #0]
 801f078:	8bfa      	ldrh	r2, [r7, #30]
 801f07a:	429a      	cmp	r2, r3
 801f07c:	d905      	bls.n	801f08a <ip_reass_free_complete_datagram+0x112>
 801f07e:	4b09      	ldr	r3, [pc, #36]	@ (801f0a4 <ip_reass_free_complete_datagram+0x12c>)
 801f080:	22d2      	movs	r2, #210	@ 0xd2
 801f082:	490e      	ldr	r1, [pc, #56]	@ (801f0bc <ip_reass_free_complete_datagram+0x144>)
 801f084:	4809      	ldr	r0, [pc, #36]	@ (801f0ac <ip_reass_free_complete_datagram+0x134>)
 801f086:	f002 fa7b 	bl	8021580 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f08a:	4b0b      	ldr	r3, [pc, #44]	@ (801f0b8 <ip_reass_free_complete_datagram+0x140>)
 801f08c:	881a      	ldrh	r2, [r3, #0]
 801f08e:	8bfb      	ldrh	r3, [r7, #30]
 801f090:	1ad3      	subs	r3, r2, r3
 801f092:	b29a      	uxth	r2, r3
 801f094:	4b08      	ldr	r3, [pc, #32]	@ (801f0b8 <ip_reass_free_complete_datagram+0x140>)
 801f096:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801f098:	8bfb      	ldrh	r3, [r7, #30]
}
 801f09a:	4618      	mov	r0, r3
 801f09c:	3720      	adds	r7, #32
 801f09e:	46bd      	mov	sp, r7
 801f0a0:	bd80      	pop	{r7, pc}
 801f0a2:	bf00      	nop
 801f0a4:	08026a24 	.word	0x08026a24
 801f0a8:	08026a60 	.word	0x08026a60
 801f0ac:	08026a6c 	.word	0x08026a6c
 801f0b0:	08026a94 	.word	0x08026a94
 801f0b4:	08026aa8 	.word	0x08026aa8
 801f0b8:	2002d5b4 	.word	0x2002d5b4
 801f0bc:	08026ac8 	.word	0x08026ac8

0801f0c0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801f0c0:	b580      	push	{r7, lr}
 801f0c2:	b08a      	sub	sp, #40	@ 0x28
 801f0c4:	af00      	add	r7, sp, #0
 801f0c6:	6078      	str	r0, [r7, #4]
 801f0c8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801f0ca:	2300      	movs	r3, #0
 801f0cc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801f0ce:	2300      	movs	r3, #0
 801f0d0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801f0d2:	2300      	movs	r3, #0
 801f0d4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801f0d6:	2300      	movs	r3, #0
 801f0d8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801f0da:	2300      	movs	r3, #0
 801f0dc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801f0de:	4b28      	ldr	r3, [pc, #160]	@ (801f180 <ip_reass_remove_oldest_datagram+0xc0>)
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801f0e4:	e030      	b.n	801f148 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0e8:	695a      	ldr	r2, [r3, #20]
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	68db      	ldr	r3, [r3, #12]
 801f0ee:	429a      	cmp	r2, r3
 801f0f0:	d10c      	bne.n	801f10c <ip_reass_remove_oldest_datagram+0x4c>
 801f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0f4:	699a      	ldr	r2, [r3, #24]
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	691b      	ldr	r3, [r3, #16]
 801f0fa:	429a      	cmp	r2, r3
 801f0fc:	d106      	bne.n	801f10c <ip_reass_remove_oldest_datagram+0x4c>
 801f0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f100:	899a      	ldrh	r2, [r3, #12]
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	889b      	ldrh	r3, [r3, #4]
 801f106:	b29b      	uxth	r3, r3
 801f108:	429a      	cmp	r2, r3
 801f10a:	d014      	beq.n	801f136 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801f10c:	693b      	ldr	r3, [r7, #16]
 801f10e:	3301      	adds	r3, #1
 801f110:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801f112:	6a3b      	ldr	r3, [r7, #32]
 801f114:	2b00      	cmp	r3, #0
 801f116:	d104      	bne.n	801f122 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801f118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f11a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f11c:	69fb      	ldr	r3, [r7, #28]
 801f11e:	61bb      	str	r3, [r7, #24]
 801f120:	e009      	b.n	801f136 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801f122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f124:	7fda      	ldrb	r2, [r3, #31]
 801f126:	6a3b      	ldr	r3, [r7, #32]
 801f128:	7fdb      	ldrb	r3, [r3, #31]
 801f12a:	429a      	cmp	r2, r3
 801f12c:	d803      	bhi.n	801f136 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801f12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f130:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f132:	69fb      	ldr	r3, [r7, #28]
 801f134:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801f136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	d001      	beq.n	801f142 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801f13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f140:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801f142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801f148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d1cb      	bne.n	801f0e6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801f14e:	6a3b      	ldr	r3, [r7, #32]
 801f150:	2b00      	cmp	r3, #0
 801f152:	d008      	beq.n	801f166 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801f154:	69b9      	ldr	r1, [r7, #24]
 801f156:	6a38      	ldr	r0, [r7, #32]
 801f158:	f7ff ff0e 	bl	801ef78 <ip_reass_free_complete_datagram>
 801f15c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801f15e:	697a      	ldr	r2, [r7, #20]
 801f160:	68fb      	ldr	r3, [r7, #12]
 801f162:	4413      	add	r3, r2
 801f164:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801f166:	697a      	ldr	r2, [r7, #20]
 801f168:	683b      	ldr	r3, [r7, #0]
 801f16a:	429a      	cmp	r2, r3
 801f16c:	da02      	bge.n	801f174 <ip_reass_remove_oldest_datagram+0xb4>
 801f16e:	693b      	ldr	r3, [r7, #16]
 801f170:	2b01      	cmp	r3, #1
 801f172:	dcac      	bgt.n	801f0ce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801f174:	697b      	ldr	r3, [r7, #20]
}
 801f176:	4618      	mov	r0, r3
 801f178:	3728      	adds	r7, #40	@ 0x28
 801f17a:	46bd      	mov	sp, r7
 801f17c:	bd80      	pop	{r7, pc}
 801f17e:	bf00      	nop
 801f180:	2002d5b0 	.word	0x2002d5b0

0801f184 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801f184:	b580      	push	{r7, lr}
 801f186:	b084      	sub	sp, #16
 801f188:	af00      	add	r7, sp, #0
 801f18a:	6078      	str	r0, [r7, #4]
 801f18c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f18e:	2004      	movs	r0, #4
 801f190:	f7f5 f94e 	bl	8014430 <memp_malloc>
 801f194:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801f196:	68fb      	ldr	r3, [r7, #12]
 801f198:	2b00      	cmp	r3, #0
 801f19a:	d116      	bne.n	801f1ca <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801f19c:	6839      	ldr	r1, [r7, #0]
 801f19e:	6878      	ldr	r0, [r7, #4]
 801f1a0:	f7ff ff8e 	bl	801f0c0 <ip_reass_remove_oldest_datagram>
 801f1a4:	4602      	mov	r2, r0
 801f1a6:	683b      	ldr	r3, [r7, #0]
 801f1a8:	4293      	cmp	r3, r2
 801f1aa:	dc03      	bgt.n	801f1b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f1ac:	2004      	movs	r0, #4
 801f1ae:	f7f5 f93f 	bl	8014430 <memp_malloc>
 801f1b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d107      	bne.n	801f1ca <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801f1ba:	4b11      	ldr	r3, [pc, #68]	@ (801f200 <ip_reass_enqueue_new_datagram+0x7c>)
 801f1bc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801f1be:	3301      	adds	r3, #1
 801f1c0:	b29a      	uxth	r2, r3
 801f1c2:	4b0f      	ldr	r3, [pc, #60]	@ (801f200 <ip_reass_enqueue_new_datagram+0x7c>)
 801f1c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	e016      	b.n	801f1f8 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f1ca:	2220      	movs	r2, #32
 801f1cc:	2100      	movs	r1, #0
 801f1ce:	68f8      	ldr	r0, [r7, #12]
 801f1d0:	f002 fb36 	bl	8021840 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	220f      	movs	r2, #15
 801f1d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801f1da:	4b0a      	ldr	r3, [pc, #40]	@ (801f204 <ip_reass_enqueue_new_datagram+0x80>)
 801f1dc:	681a      	ldr	r2, [r3, #0]
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801f1e2:	4a08      	ldr	r2, [pc, #32]	@ (801f204 <ip_reass_enqueue_new_datagram+0x80>)
 801f1e4:	68fb      	ldr	r3, [r7, #12]
 801f1e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	3308      	adds	r3, #8
 801f1ec:	2214      	movs	r2, #20
 801f1ee:	6879      	ldr	r1, [r7, #4]
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	f002 fb9a 	bl	802192a <memcpy>
  return ipr;
 801f1f6:	68fb      	ldr	r3, [r7, #12]
}
 801f1f8:	4618      	mov	r0, r3
 801f1fa:	3710      	adds	r7, #16
 801f1fc:	46bd      	mov	sp, r7
 801f1fe:	bd80      	pop	{r7, pc}
 801f200:	2002d358 	.word	0x2002d358
 801f204:	2002d5b0 	.word	0x2002d5b0

0801f208 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f208:	b580      	push	{r7, lr}
 801f20a:	b082      	sub	sp, #8
 801f20c:	af00      	add	r7, sp, #0
 801f20e:	6078      	str	r0, [r7, #4]
 801f210:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f212:	4b10      	ldr	r3, [pc, #64]	@ (801f254 <ip_reass_dequeue_datagram+0x4c>)
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	687a      	ldr	r2, [r7, #4]
 801f218:	429a      	cmp	r2, r3
 801f21a:	d104      	bne.n	801f226 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	4a0c      	ldr	r2, [pc, #48]	@ (801f254 <ip_reass_dequeue_datagram+0x4c>)
 801f222:	6013      	str	r3, [r2, #0]
 801f224:	e00d      	b.n	801f242 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f226:	683b      	ldr	r3, [r7, #0]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d106      	bne.n	801f23a <ip_reass_dequeue_datagram+0x32>
 801f22c:	4b0a      	ldr	r3, [pc, #40]	@ (801f258 <ip_reass_dequeue_datagram+0x50>)
 801f22e:	f240 1245 	movw	r2, #325	@ 0x145
 801f232:	490a      	ldr	r1, [pc, #40]	@ (801f25c <ip_reass_dequeue_datagram+0x54>)
 801f234:	480a      	ldr	r0, [pc, #40]	@ (801f260 <ip_reass_dequeue_datagram+0x58>)
 801f236:	f002 f9a3 	bl	8021580 <iprintf>
    prev->next = ipr->next;
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	681a      	ldr	r2, [r3, #0]
 801f23e:	683b      	ldr	r3, [r7, #0]
 801f240:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f242:	6879      	ldr	r1, [r7, #4]
 801f244:	2004      	movs	r0, #4
 801f246:	f7f5 f96f 	bl	8014528 <memp_free>
}
 801f24a:	bf00      	nop
 801f24c:	3708      	adds	r7, #8
 801f24e:	46bd      	mov	sp, r7
 801f250:	bd80      	pop	{r7, pc}
 801f252:	bf00      	nop
 801f254:	2002d5b0 	.word	0x2002d5b0
 801f258:	08026a24 	.word	0x08026a24
 801f25c:	08026aec 	.word	0x08026aec
 801f260:	08026a6c 	.word	0x08026a6c

0801f264 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801f264:	b580      	push	{r7, lr}
 801f266:	b08c      	sub	sp, #48	@ 0x30
 801f268:	af00      	add	r7, sp, #0
 801f26a:	60f8      	str	r0, [r7, #12]
 801f26c:	60b9      	str	r1, [r7, #8]
 801f26e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801f270:	2300      	movs	r3, #0
 801f272:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801f274:	2301      	movs	r3, #1
 801f276:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f278:	68bb      	ldr	r3, [r7, #8]
 801f27a:	685b      	ldr	r3, [r3, #4]
 801f27c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f27e:	69fb      	ldr	r3, [r7, #28]
 801f280:	885b      	ldrh	r3, [r3, #2]
 801f282:	b29b      	uxth	r3, r3
 801f284:	4618      	mov	r0, r3
 801f286:	f7f4 fb07 	bl	8013898 <lwip_htons>
 801f28a:	4603      	mov	r3, r0
 801f28c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801f28e:	69fb      	ldr	r3, [r7, #28]
 801f290:	781b      	ldrb	r3, [r3, #0]
 801f292:	f003 030f 	and.w	r3, r3, #15
 801f296:	b2db      	uxtb	r3, r3
 801f298:	009b      	lsls	r3, r3, #2
 801f29a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801f29c:	7e7b      	ldrb	r3, [r7, #25]
 801f29e:	b29b      	uxth	r3, r3
 801f2a0:	8b7a      	ldrh	r2, [r7, #26]
 801f2a2:	429a      	cmp	r2, r3
 801f2a4:	d202      	bcs.n	801f2ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f2a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f2aa:	e135      	b.n	801f518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801f2ac:	7e7b      	ldrb	r3, [r7, #25]
 801f2ae:	b29b      	uxth	r3, r3
 801f2b0:	8b7a      	ldrh	r2, [r7, #26]
 801f2b2:	1ad3      	subs	r3, r2, r3
 801f2b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f2b6:	69fb      	ldr	r3, [r7, #28]
 801f2b8:	88db      	ldrh	r3, [r3, #6]
 801f2ba:	b29b      	uxth	r3, r3
 801f2bc:	4618      	mov	r0, r3
 801f2be:	f7f4 faeb 	bl	8013898 <lwip_htons>
 801f2c2:	4603      	mov	r3, r0
 801f2c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f2c8:	b29b      	uxth	r3, r3
 801f2ca:	00db      	lsls	r3, r3, #3
 801f2cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f2ce:	68bb      	ldr	r3, [r7, #8]
 801f2d0:	685b      	ldr	r3, [r3, #4]
 801f2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801f2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2d6:	2200      	movs	r2, #0
 801f2d8:	701a      	strb	r2, [r3, #0]
 801f2da:	2200      	movs	r2, #0
 801f2dc:	705a      	strb	r2, [r3, #1]
 801f2de:	2200      	movs	r2, #0
 801f2e0:	709a      	strb	r2, [r3, #2]
 801f2e2:	2200      	movs	r2, #0
 801f2e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801f2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2e8:	8afa      	ldrh	r2, [r7, #22]
 801f2ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801f2ec:	8afa      	ldrh	r2, [r7, #22]
 801f2ee:	8b7b      	ldrh	r3, [r7, #26]
 801f2f0:	4413      	add	r3, r2
 801f2f2:	b29a      	uxth	r2, r3
 801f2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801f2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2fa:	88db      	ldrh	r3, [r3, #6]
 801f2fc:	b29b      	uxth	r3, r3
 801f2fe:	8afa      	ldrh	r2, [r7, #22]
 801f300:	429a      	cmp	r2, r3
 801f302:	d902      	bls.n	801f30a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f308:	e106      	b.n	801f518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801f30a:	68fb      	ldr	r3, [r7, #12]
 801f30c:	685b      	ldr	r3, [r3, #4]
 801f30e:	627b      	str	r3, [r7, #36]	@ 0x24
 801f310:	e068      	b.n	801f3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f314:	685b      	ldr	r3, [r3, #4]
 801f316:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801f318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f31a:	889b      	ldrh	r3, [r3, #4]
 801f31c:	b29a      	uxth	r2, r3
 801f31e:	693b      	ldr	r3, [r7, #16]
 801f320:	889b      	ldrh	r3, [r3, #4]
 801f322:	b29b      	uxth	r3, r3
 801f324:	429a      	cmp	r2, r3
 801f326:	d235      	bcs.n	801f394 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801f328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f32a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f32c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801f32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f330:	2b00      	cmp	r3, #0
 801f332:	d020      	beq.n	801f376 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f336:	889b      	ldrh	r3, [r3, #4]
 801f338:	b29a      	uxth	r2, r3
 801f33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f33c:	88db      	ldrh	r3, [r3, #6]
 801f33e:	b29b      	uxth	r3, r3
 801f340:	429a      	cmp	r2, r3
 801f342:	d307      	bcc.n	801f354 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801f344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f346:	88db      	ldrh	r3, [r3, #6]
 801f348:	b29a      	uxth	r2, r3
 801f34a:	693b      	ldr	r3, [r7, #16]
 801f34c:	889b      	ldrh	r3, [r3, #4]
 801f34e:	b29b      	uxth	r3, r3
 801f350:	429a      	cmp	r2, r3
 801f352:	d902      	bls.n	801f35a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f358:	e0de      	b.n	801f518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801f35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f35c:	68ba      	ldr	r2, [r7, #8]
 801f35e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801f360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f362:	88db      	ldrh	r3, [r3, #6]
 801f364:	b29a      	uxth	r2, r3
 801f366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f368:	889b      	ldrh	r3, [r3, #4]
 801f36a:	b29b      	uxth	r3, r3
 801f36c:	429a      	cmp	r2, r3
 801f36e:	d03d      	beq.n	801f3ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f370:	2300      	movs	r3, #0
 801f372:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801f374:	e03a      	b.n	801f3ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801f376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f378:	88db      	ldrh	r3, [r3, #6]
 801f37a:	b29a      	uxth	r2, r3
 801f37c:	693b      	ldr	r3, [r7, #16]
 801f37e:	889b      	ldrh	r3, [r3, #4]
 801f380:	b29b      	uxth	r3, r3
 801f382:	429a      	cmp	r2, r3
 801f384:	d902      	bls.n	801f38c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f38a:	e0c5      	b.n	801f518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801f38c:	68fb      	ldr	r3, [r7, #12]
 801f38e:	68ba      	ldr	r2, [r7, #8]
 801f390:	605a      	str	r2, [r3, #4]
      break;
 801f392:	e02b      	b.n	801f3ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801f394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f396:	889b      	ldrh	r3, [r3, #4]
 801f398:	b29a      	uxth	r2, r3
 801f39a:	693b      	ldr	r3, [r7, #16]
 801f39c:	889b      	ldrh	r3, [r3, #4]
 801f39e:	b29b      	uxth	r3, r3
 801f3a0:	429a      	cmp	r2, r3
 801f3a2:	d102      	bne.n	801f3aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f3a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f3a8:	e0b6      	b.n	801f518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801f3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f3ac:	889b      	ldrh	r3, [r3, #4]
 801f3ae:	b29a      	uxth	r2, r3
 801f3b0:	693b      	ldr	r3, [r7, #16]
 801f3b2:	88db      	ldrh	r3, [r3, #6]
 801f3b4:	b29b      	uxth	r3, r3
 801f3b6:	429a      	cmp	r2, r3
 801f3b8:	d202      	bcs.n	801f3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f3ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f3be:	e0ab      	b.n	801f518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801f3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d009      	beq.n	801f3da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801f3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3c8:	88db      	ldrh	r3, [r3, #6]
 801f3ca:	b29a      	uxth	r2, r3
 801f3cc:	693b      	ldr	r3, [r7, #16]
 801f3ce:	889b      	ldrh	r3, [r3, #4]
 801f3d0:	b29b      	uxth	r3, r3
 801f3d2:	429a      	cmp	r2, r3
 801f3d4:	d001      	beq.n	801f3da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801f3da:	693b      	ldr	r3, [r7, #16]
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801f3e0:	693b      	ldr	r3, [r7, #16]
 801f3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801f3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d193      	bne.n	801f312 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801f3ea:	e000      	b.n	801f3ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801f3ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801f3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	d12d      	bne.n	801f450 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801f3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d01c      	beq.n	801f434 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801f3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3fc:	88db      	ldrh	r3, [r3, #6]
 801f3fe:	b29a      	uxth	r2, r3
 801f400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f402:	889b      	ldrh	r3, [r3, #4]
 801f404:	b29b      	uxth	r3, r3
 801f406:	429a      	cmp	r2, r3
 801f408:	d906      	bls.n	801f418 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801f40a:	4b45      	ldr	r3, [pc, #276]	@ (801f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f40c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801f410:	4944      	ldr	r1, [pc, #272]	@ (801f524 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f412:	4845      	ldr	r0, [pc, #276]	@ (801f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f414:	f002 f8b4 	bl	8021580 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801f418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f41a:	68ba      	ldr	r2, [r7, #8]
 801f41c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801f41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f420:	88db      	ldrh	r3, [r3, #6]
 801f422:	b29a      	uxth	r2, r3
 801f424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f426:	889b      	ldrh	r3, [r3, #4]
 801f428:	b29b      	uxth	r3, r3
 801f42a:	429a      	cmp	r2, r3
 801f42c:	d010      	beq.n	801f450 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801f42e:	2300      	movs	r3, #0
 801f430:	623b      	str	r3, [r7, #32]
 801f432:	e00d      	b.n	801f450 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801f434:	68fb      	ldr	r3, [r7, #12]
 801f436:	685b      	ldr	r3, [r3, #4]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d006      	beq.n	801f44a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801f43c:	4b38      	ldr	r3, [pc, #224]	@ (801f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f43e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801f442:	493a      	ldr	r1, [pc, #232]	@ (801f52c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f444:	4838      	ldr	r0, [pc, #224]	@ (801f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f446:	f002 f89b 	bl	8021580 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801f44a:	68fb      	ldr	r3, [r7, #12]
 801f44c:	68ba      	ldr	r2, [r7, #8]
 801f44e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d105      	bne.n	801f462 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801f456:	68fb      	ldr	r3, [r7, #12]
 801f458:	7f9b      	ldrb	r3, [r3, #30]
 801f45a:	f003 0301 	and.w	r3, r3, #1
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d059      	beq.n	801f516 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801f462:	6a3b      	ldr	r3, [r7, #32]
 801f464:	2b00      	cmp	r3, #0
 801f466:	d04f      	beq.n	801f508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	685b      	ldr	r3, [r3, #4]
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d006      	beq.n	801f47e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f470:	68fb      	ldr	r3, [r7, #12]
 801f472:	685b      	ldr	r3, [r3, #4]
 801f474:	685b      	ldr	r3, [r3, #4]
 801f476:	889b      	ldrh	r3, [r3, #4]
 801f478:	b29b      	uxth	r3, r3
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d002      	beq.n	801f484 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801f47e:	2300      	movs	r3, #0
 801f480:	623b      	str	r3, [r7, #32]
 801f482:	e041      	b.n	801f508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801f484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f486:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801f488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801f48e:	e012      	b.n	801f4b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801f490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f492:	685b      	ldr	r3, [r3, #4]
 801f494:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801f496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f498:	88db      	ldrh	r3, [r3, #6]
 801f49a:	b29a      	uxth	r2, r3
 801f49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f49e:	889b      	ldrh	r3, [r3, #4]
 801f4a0:	b29b      	uxth	r3, r3
 801f4a2:	429a      	cmp	r2, r3
 801f4a4:	d002      	beq.n	801f4ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801f4a6:	2300      	movs	r3, #0
 801f4a8:	623b      	str	r3, [r7, #32]
            break;
 801f4aa:	e007      	b.n	801f4bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801f4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4ae:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801f4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4b2:	681b      	ldr	r3, [r3, #0]
 801f4b4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801f4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d1e9      	bne.n	801f490 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801f4bc:	6a3b      	ldr	r3, [r7, #32]
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d022      	beq.n	801f508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801f4c2:	68fb      	ldr	r3, [r7, #12]
 801f4c4:	685b      	ldr	r3, [r3, #4]
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d106      	bne.n	801f4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801f4ca:	4b15      	ldr	r3, [pc, #84]	@ (801f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f4cc:	f240 12df 	movw	r2, #479	@ 0x1df
 801f4d0:	4917      	ldr	r1, [pc, #92]	@ (801f530 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f4d2:	4815      	ldr	r0, [pc, #84]	@ (801f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f4d4:	f002 f854 	bl	8021580 <iprintf>
          LWIP_ASSERT("sanity check",
 801f4d8:	68fb      	ldr	r3, [r7, #12]
 801f4da:	685b      	ldr	r3, [r3, #4]
 801f4dc:	685b      	ldr	r3, [r3, #4]
 801f4de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f4e0:	429a      	cmp	r2, r3
 801f4e2:	d106      	bne.n	801f4f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f4e4:	4b0e      	ldr	r3, [pc, #56]	@ (801f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f4e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801f4ea:	4911      	ldr	r1, [pc, #68]	@ (801f530 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f4ec:	480e      	ldr	r0, [pc, #56]	@ (801f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f4ee:	f002 f847 	bl	8021580 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4f4:	681b      	ldr	r3, [r3, #0]
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d006      	beq.n	801f508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801f4fa:	4b09      	ldr	r3, [pc, #36]	@ (801f520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f4fc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801f500:	490c      	ldr	r1, [pc, #48]	@ (801f534 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f502:	4809      	ldr	r0, [pc, #36]	@ (801f528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f504:	f002 f83c 	bl	8021580 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f508:	6a3b      	ldr	r3, [r7, #32]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	bf14      	ite	ne
 801f50e:	2301      	movne	r3, #1
 801f510:	2300      	moveq	r3, #0
 801f512:	b2db      	uxtb	r3, r3
 801f514:	e000      	b.n	801f518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f516:	2300      	movs	r3, #0
}
 801f518:	4618      	mov	r0, r3
 801f51a:	3730      	adds	r7, #48	@ 0x30
 801f51c:	46bd      	mov	sp, r7
 801f51e:	bd80      	pop	{r7, pc}
 801f520:	08026a24 	.word	0x08026a24
 801f524:	08026b08 	.word	0x08026b08
 801f528:	08026a6c 	.word	0x08026a6c
 801f52c:	08026b28 	.word	0x08026b28
 801f530:	08026b60 	.word	0x08026b60
 801f534:	08026b70 	.word	0x08026b70

0801f538 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f538:	b580      	push	{r7, lr}
 801f53a:	b08e      	sub	sp, #56	@ 0x38
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801f540:	4b9d      	ldr	r3, [pc, #628]	@ (801f7b8 <ip4_reass+0x280>)
 801f542:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f544:	3301      	adds	r3, #1
 801f546:	b29a      	uxth	r2, r3
 801f548:	4b9b      	ldr	r3, [pc, #620]	@ (801f7b8 <ip4_reass+0x280>)
 801f54a:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	685b      	ldr	r3, [r3, #4]
 801f550:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f554:	781b      	ldrb	r3, [r3, #0]
 801f556:	f003 030f 	and.w	r3, r3, #15
 801f55a:	b2db      	uxtb	r3, r3
 801f55c:	009b      	lsls	r3, r3, #2
 801f55e:	b2db      	uxtb	r3, r3
 801f560:	2b14      	cmp	r3, #20
 801f562:	d008      	beq.n	801f576 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801f564:	4b94      	ldr	r3, [pc, #592]	@ (801f7b8 <ip4_reass+0x280>)
 801f566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f56a:	3301      	adds	r3, #1
 801f56c:	b29a      	uxth	r2, r3
 801f56e:	4b92      	ldr	r3, [pc, #584]	@ (801f7b8 <ip4_reass+0x280>)
 801f570:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801f574:	e17c      	b.n	801f870 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801f576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f578:	88db      	ldrh	r3, [r3, #6]
 801f57a:	b29b      	uxth	r3, r3
 801f57c:	4618      	mov	r0, r3
 801f57e:	f7f4 f98b 	bl	8013898 <lwip_htons>
 801f582:	4603      	mov	r3, r0
 801f584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f588:	b29b      	uxth	r3, r3
 801f58a:	00db      	lsls	r3, r3, #3
 801f58c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f590:	885b      	ldrh	r3, [r3, #2]
 801f592:	b29b      	uxth	r3, r3
 801f594:	4618      	mov	r0, r3
 801f596:	f7f4 f97f 	bl	8013898 <lwip_htons>
 801f59a:	4603      	mov	r3, r0
 801f59c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f5a0:	781b      	ldrb	r3, [r3, #0]
 801f5a2:	f003 030f 	and.w	r3, r3, #15
 801f5a6:	b2db      	uxtb	r3, r3
 801f5a8:	009b      	lsls	r3, r3, #2
 801f5aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801f5ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f5b2:	b29b      	uxth	r3, r3
 801f5b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f5b6:	429a      	cmp	r2, r3
 801f5b8:	f0c0 8157 	bcc.w	801f86a <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f5bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f5c0:	b29b      	uxth	r3, r3
 801f5c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f5c4:	1ad3      	subs	r3, r2, r3
 801f5c6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f5c8:	6878      	ldr	r0, [r7, #4]
 801f5ca:	f7f6 f839 	bl	8015640 <pbuf_clen>
 801f5ce:	4603      	mov	r3, r0
 801f5d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f5d2:	4b7a      	ldr	r3, [pc, #488]	@ (801f7bc <ip4_reass+0x284>)
 801f5d4:	881b      	ldrh	r3, [r3, #0]
 801f5d6:	461a      	mov	r2, r3
 801f5d8:	8c3b      	ldrh	r3, [r7, #32]
 801f5da:	4413      	add	r3, r2
 801f5dc:	2b0a      	cmp	r3, #10
 801f5de:	dd15      	ble.n	801f60c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f5e0:	8c3b      	ldrh	r3, [r7, #32]
 801f5e2:	4619      	mov	r1, r3
 801f5e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f5e6:	f7ff fd6b 	bl	801f0c0 <ip_reass_remove_oldest_datagram>
 801f5ea:	4603      	mov	r3, r0
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	d006      	beq.n	801f5fe <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f5f0:	4b72      	ldr	r3, [pc, #456]	@ (801f7bc <ip4_reass+0x284>)
 801f5f2:	881b      	ldrh	r3, [r3, #0]
 801f5f4:	461a      	mov	r2, r3
 801f5f6:	8c3b      	ldrh	r3, [r7, #32]
 801f5f8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f5fa:	2b0a      	cmp	r3, #10
 801f5fc:	dd06      	ble.n	801f60c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801f5fe:	4b6e      	ldr	r3, [pc, #440]	@ (801f7b8 <ip4_reass+0x280>)
 801f600:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801f602:	3301      	adds	r3, #1
 801f604:	b29a      	uxth	r2, r3
 801f606:	4b6c      	ldr	r3, [pc, #432]	@ (801f7b8 <ip4_reass+0x280>)
 801f608:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801f60a:	e131      	b.n	801f870 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f60c:	4b6c      	ldr	r3, [pc, #432]	@ (801f7c0 <ip4_reass+0x288>)
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	633b      	str	r3, [r7, #48]	@ 0x30
 801f612:	e01e      	b.n	801f652 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f616:	695a      	ldr	r2, [r3, #20]
 801f618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f61a:	68db      	ldr	r3, [r3, #12]
 801f61c:	429a      	cmp	r2, r3
 801f61e:	d115      	bne.n	801f64c <ip4_reass+0x114>
 801f620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f622:	699a      	ldr	r2, [r3, #24]
 801f624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f626:	691b      	ldr	r3, [r3, #16]
 801f628:	429a      	cmp	r2, r3
 801f62a:	d10f      	bne.n	801f64c <ip4_reass+0x114>
 801f62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f62e:	899a      	ldrh	r2, [r3, #12]
 801f630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f632:	889b      	ldrh	r3, [r3, #4]
 801f634:	b29b      	uxth	r3, r3
 801f636:	429a      	cmp	r2, r3
 801f638:	d108      	bne.n	801f64c <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801f63a:	4b5f      	ldr	r3, [pc, #380]	@ (801f7b8 <ip4_reass+0x280>)
 801f63c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801f640:	3301      	adds	r3, #1
 801f642:	b29a      	uxth	r2, r3
 801f644:	4b5c      	ldr	r3, [pc, #368]	@ (801f7b8 <ip4_reass+0x280>)
 801f646:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801f64a:	e005      	b.n	801f658 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	633b      	str	r3, [r7, #48]	@ 0x30
 801f652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f654:	2b00      	cmp	r3, #0
 801f656:	d1dd      	bne.n	801f614 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801f658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	d109      	bne.n	801f672 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f65e:	8c3b      	ldrh	r3, [r7, #32]
 801f660:	4619      	mov	r1, r3
 801f662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f664:	f7ff fd8e 	bl	801f184 <ip_reass_enqueue_new_datagram>
 801f668:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d11c      	bne.n	801f6aa <ip4_reass+0x172>
      goto nullreturn;
 801f670:	e0fe      	b.n	801f870 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f674:	88db      	ldrh	r3, [r3, #6]
 801f676:	b29b      	uxth	r3, r3
 801f678:	4618      	mov	r0, r3
 801f67a:	f7f4 f90d 	bl	8013898 <lwip_htons>
 801f67e:	4603      	mov	r3, r0
 801f680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f684:	2b00      	cmp	r3, #0
 801f686:	d110      	bne.n	801f6aa <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f68a:	89db      	ldrh	r3, [r3, #14]
 801f68c:	4618      	mov	r0, r3
 801f68e:	f7f4 f903 	bl	8013898 <lwip_htons>
 801f692:	4603      	mov	r3, r0
 801f694:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d006      	beq.n	801f6aa <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f69e:	3308      	adds	r3, #8
 801f6a0:	2214      	movs	r2, #20
 801f6a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	f002 f940 	bl	802192a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f6ac:	88db      	ldrh	r3, [r3, #6]
 801f6ae:	b29b      	uxth	r3, r3
 801f6b0:	f003 0320 	and.w	r3, r3, #32
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	bf0c      	ite	eq
 801f6b8:	2301      	moveq	r3, #1
 801f6ba:	2300      	movne	r3, #0
 801f6bc:	b2db      	uxtb	r3, r3
 801f6be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f6c0:	69fb      	ldr	r3, [r7, #28]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d00e      	beq.n	801f6e4 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801f6c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f6c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f6ca:	4413      	add	r3, r2
 801f6cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f6ce:	8b7a      	ldrh	r2, [r7, #26]
 801f6d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f6d2:	429a      	cmp	r2, r3
 801f6d4:	f0c0 80a7 	bcc.w	801f826 <ip4_reass+0x2ee>
 801f6d8:	8b7b      	ldrh	r3, [r7, #26]
 801f6da:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801f6de:	4293      	cmp	r3, r2
 801f6e0:	f200 80a1 	bhi.w	801f826 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f6e4:	69fa      	ldr	r2, [r7, #28]
 801f6e6:	6879      	ldr	r1, [r7, #4]
 801f6e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f6ea:	f7ff fdbb 	bl	801f264 <ip_reass_chain_frag_into_datagram_and_validate>
 801f6ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f6f0:	697b      	ldr	r3, [r7, #20]
 801f6f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f6f6:	f000 8098 	beq.w	801f82a <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f6fa:	4b30      	ldr	r3, [pc, #192]	@ (801f7bc <ip4_reass+0x284>)
 801f6fc:	881a      	ldrh	r2, [r3, #0]
 801f6fe:	8c3b      	ldrh	r3, [r7, #32]
 801f700:	4413      	add	r3, r2
 801f702:	b29a      	uxth	r2, r3
 801f704:	4b2d      	ldr	r3, [pc, #180]	@ (801f7bc <ip4_reass+0x284>)
 801f706:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f708:	69fb      	ldr	r3, [r7, #28]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d00d      	beq.n	801f72a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801f70e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f710:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f712:	4413      	add	r3, r2
 801f714:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f718:	8a7a      	ldrh	r2, [r7, #18]
 801f71a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f71e:	7f9b      	ldrb	r3, [r3, #30]
 801f720:	f043 0301 	orr.w	r3, r3, #1
 801f724:	b2da      	uxtb	r2, r3
 801f726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f728:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f72a:	697b      	ldr	r3, [r7, #20]
 801f72c:	2b01      	cmp	r3, #1
 801f72e:	d178      	bne.n	801f822 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f732:	8b9b      	ldrh	r3, [r3, #28]
 801f734:	3314      	adds	r3, #20
 801f736:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f73a:	685b      	ldr	r3, [r3, #4]
 801f73c:	685b      	ldr	r3, [r3, #4]
 801f73e:	681b      	ldr	r3, [r3, #0]
 801f740:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f744:	685b      	ldr	r3, [r3, #4]
 801f746:	685b      	ldr	r3, [r3, #4]
 801f748:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f74c:	3308      	adds	r3, #8
 801f74e:	2214      	movs	r2, #20
 801f750:	4619      	mov	r1, r3
 801f752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f754:	f002 f8e9 	bl	802192a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f758:	8a3b      	ldrh	r3, [r7, #16]
 801f75a:	4618      	mov	r0, r3
 801f75c:	f7f4 f89c 	bl	8013898 <lwip_htons>
 801f760:	4603      	mov	r3, r0
 801f762:	461a      	mov	r2, r3
 801f764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f766:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f76a:	2200      	movs	r2, #0
 801f76c:	719a      	strb	r2, [r3, #6]
 801f76e:	2200      	movs	r2, #0
 801f770:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f774:	2200      	movs	r2, #0
 801f776:	729a      	strb	r2, [r3, #10]
 801f778:	2200      	movs	r2, #0
 801f77a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f77e:	685b      	ldr	r3, [r3, #4]
 801f780:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f782:	e00d      	b.n	801f7a0 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801f784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f786:	685b      	ldr	r3, [r3, #4]
 801f788:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f78a:	2114      	movs	r1, #20
 801f78c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f78e:	f7f5 fe23 	bl	80153d8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f794:	6878      	ldr	r0, [r7, #4]
 801f796:	f7f5 ff93 	bl	80156c0 <pbuf_cat>
      r = iprh->next_pbuf;
 801f79a:	68fb      	ldr	r3, [r7, #12]
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801f7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d1ee      	bne.n	801f784 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f7a6:	4b06      	ldr	r3, [pc, #24]	@ (801f7c0 <ip4_reass+0x288>)
 801f7a8:	681b      	ldr	r3, [r3, #0]
 801f7aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f7ac:	429a      	cmp	r2, r3
 801f7ae:	d109      	bne.n	801f7c4 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801f7b0:	2300      	movs	r3, #0
 801f7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 801f7b4:	e017      	b.n	801f7e6 <ip4_reass+0x2ae>
 801f7b6:	bf00      	nop
 801f7b8:	2002d358 	.word	0x2002d358
 801f7bc:	2002d5b4 	.word	0x2002d5b4
 801f7c0:	2002d5b0 	.word	0x2002d5b0
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f7c4:	4b31      	ldr	r3, [pc, #196]	@ (801f88c <ip4_reass+0x354>)
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	637b      	str	r3, [r7, #52]	@ 0x34
 801f7ca:	e007      	b.n	801f7dc <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801f7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f7d2:	429a      	cmp	r2, r3
 801f7d4:	d006      	beq.n	801f7e4 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	637b      	str	r3, [r7, #52]	@ 0x34
 801f7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d1f4      	bne.n	801f7cc <ip4_reass+0x294>
 801f7e2:	e000      	b.n	801f7e6 <ip4_reass+0x2ae>
          break;
 801f7e4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f7e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f7e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f7ea:	f7ff fd0d 	bl	801f208 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f7ee:	6878      	ldr	r0, [r7, #4]
 801f7f0:	f7f5 ff26 	bl	8015640 <pbuf_clen>
 801f7f4:	4603      	mov	r3, r0
 801f7f6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f7f8:	4b25      	ldr	r3, [pc, #148]	@ (801f890 <ip4_reass+0x358>)
 801f7fa:	881b      	ldrh	r3, [r3, #0]
 801f7fc:	8c3a      	ldrh	r2, [r7, #32]
 801f7fe:	429a      	cmp	r2, r3
 801f800:	d906      	bls.n	801f810 <ip4_reass+0x2d8>
 801f802:	4b24      	ldr	r3, [pc, #144]	@ (801f894 <ip4_reass+0x35c>)
 801f804:	f240 229b 	movw	r2, #667	@ 0x29b
 801f808:	4923      	ldr	r1, [pc, #140]	@ (801f898 <ip4_reass+0x360>)
 801f80a:	4824      	ldr	r0, [pc, #144]	@ (801f89c <ip4_reass+0x364>)
 801f80c:	f001 feb8 	bl	8021580 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f810:	4b1f      	ldr	r3, [pc, #124]	@ (801f890 <ip4_reass+0x358>)
 801f812:	881a      	ldrh	r2, [r3, #0]
 801f814:	8c3b      	ldrh	r3, [r7, #32]
 801f816:	1ad3      	subs	r3, r2, r3
 801f818:	b29a      	uxth	r2, r3
 801f81a:	4b1d      	ldr	r3, [pc, #116]	@ (801f890 <ip4_reass+0x358>)
 801f81c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	e030      	b.n	801f884 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f822:	2300      	movs	r3, #0
 801f824:	e02e      	b.n	801f884 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801f826:	bf00      	nop
 801f828:	e000      	b.n	801f82c <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801f82a:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f82e:	2b00      	cmp	r3, #0
 801f830:	d106      	bne.n	801f840 <ip4_reass+0x308>
 801f832:	4b18      	ldr	r3, [pc, #96]	@ (801f894 <ip4_reass+0x35c>)
 801f834:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801f838:	4919      	ldr	r1, [pc, #100]	@ (801f8a0 <ip4_reass+0x368>)
 801f83a:	4818      	ldr	r0, [pc, #96]	@ (801f89c <ip4_reass+0x364>)
 801f83c:	f001 fea0 	bl	8021580 <iprintf>
  if (ipr->p == NULL) {
 801f840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f842:	685b      	ldr	r3, [r3, #4]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d112      	bne.n	801f86e <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f848:	4b10      	ldr	r3, [pc, #64]	@ (801f88c <ip4_reass+0x354>)
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f84e:	429a      	cmp	r2, r3
 801f850:	d006      	beq.n	801f860 <ip4_reass+0x328>
 801f852:	4b10      	ldr	r3, [pc, #64]	@ (801f894 <ip4_reass+0x35c>)
 801f854:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801f858:	4912      	ldr	r1, [pc, #72]	@ (801f8a4 <ip4_reass+0x36c>)
 801f85a:	4810      	ldr	r0, [pc, #64]	@ (801f89c <ip4_reass+0x364>)
 801f85c:	f001 fe90 	bl	8021580 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f860:	2100      	movs	r1, #0
 801f862:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f864:	f7ff fcd0 	bl	801f208 <ip_reass_dequeue_datagram>
 801f868:	e002      	b.n	801f870 <ip4_reass+0x338>
    goto nullreturn;
 801f86a:	bf00      	nop
 801f86c:	e000      	b.n	801f870 <ip4_reass+0x338>
  }

nullreturn:
 801f86e:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801f870:	4b0d      	ldr	r3, [pc, #52]	@ (801f8a8 <ip4_reass+0x370>)
 801f872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801f874:	3301      	adds	r3, #1
 801f876:	b29a      	uxth	r2, r3
 801f878:	4b0b      	ldr	r3, [pc, #44]	@ (801f8a8 <ip4_reass+0x370>)
 801f87a:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801f87c:	6878      	ldr	r0, [r7, #4]
 801f87e:	f7f5 fe39 	bl	80154f4 <pbuf_free>
  return NULL;
 801f882:	2300      	movs	r3, #0
}
 801f884:	4618      	mov	r0, r3
 801f886:	3738      	adds	r7, #56	@ 0x38
 801f888:	46bd      	mov	sp, r7
 801f88a:	bd80      	pop	{r7, pc}
 801f88c:	2002d5b0 	.word	0x2002d5b0
 801f890:	2002d5b4 	.word	0x2002d5b4
 801f894:	08026a24 	.word	0x08026a24
 801f898:	08026b94 	.word	0x08026b94
 801f89c:	08026a6c 	.word	0x08026a6c
 801f8a0:	08026bb0 	.word	0x08026bb0
 801f8a4:	08026bbc 	.word	0x08026bbc
 801f8a8:	2002d358 	.word	0x2002d358

0801f8ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f8ac:	b580      	push	{r7, lr}
 801f8ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f8b0:	2005      	movs	r0, #5
 801f8b2:	f7f4 fdbd 	bl	8014430 <memp_malloc>
 801f8b6:	4603      	mov	r3, r0
}
 801f8b8:	4618      	mov	r0, r3
 801f8ba:	bd80      	pop	{r7, pc}

0801f8bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f8bc:	b580      	push	{r7, lr}
 801f8be:	b082      	sub	sp, #8
 801f8c0:	af00      	add	r7, sp, #0
 801f8c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d106      	bne.n	801f8d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801f8ca:	4b07      	ldr	r3, [pc, #28]	@ (801f8e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f8cc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801f8d0:	4906      	ldr	r1, [pc, #24]	@ (801f8ec <ip_frag_free_pbuf_custom_ref+0x30>)
 801f8d2:	4807      	ldr	r0, [pc, #28]	@ (801f8f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f8d4:	f001 fe54 	bl	8021580 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f8d8:	6879      	ldr	r1, [r7, #4]
 801f8da:	2005      	movs	r0, #5
 801f8dc:	f7f4 fe24 	bl	8014528 <memp_free>
}
 801f8e0:	bf00      	nop
 801f8e2:	3708      	adds	r7, #8
 801f8e4:	46bd      	mov	sp, r7
 801f8e6:	bd80      	pop	{r7, pc}
 801f8e8:	08026a24 	.word	0x08026a24
 801f8ec:	08026bdc 	.word	0x08026bdc
 801f8f0:	08026a6c 	.word	0x08026a6c

0801f8f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	b084      	sub	sp, #16
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	2b00      	cmp	r3, #0
 801f904:	d106      	bne.n	801f914 <ipfrag_free_pbuf_custom+0x20>
 801f906:	4b11      	ldr	r3, [pc, #68]	@ (801f94c <ipfrag_free_pbuf_custom+0x58>)
 801f908:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801f90c:	4910      	ldr	r1, [pc, #64]	@ (801f950 <ipfrag_free_pbuf_custom+0x5c>)
 801f90e:	4811      	ldr	r0, [pc, #68]	@ (801f954 <ipfrag_free_pbuf_custom+0x60>)
 801f910:	f001 fe36 	bl	8021580 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f914:	68fa      	ldr	r2, [r7, #12]
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	429a      	cmp	r2, r3
 801f91a:	d006      	beq.n	801f92a <ipfrag_free_pbuf_custom+0x36>
 801f91c:	4b0b      	ldr	r3, [pc, #44]	@ (801f94c <ipfrag_free_pbuf_custom+0x58>)
 801f91e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801f922:	490d      	ldr	r1, [pc, #52]	@ (801f958 <ipfrag_free_pbuf_custom+0x64>)
 801f924:	480b      	ldr	r0, [pc, #44]	@ (801f954 <ipfrag_free_pbuf_custom+0x60>)
 801f926:	f001 fe2b 	bl	8021580 <iprintf>
  if (pcr->original != NULL) {
 801f92a:	68fb      	ldr	r3, [r7, #12]
 801f92c:	695b      	ldr	r3, [r3, #20]
 801f92e:	2b00      	cmp	r3, #0
 801f930:	d004      	beq.n	801f93c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f932:	68fb      	ldr	r3, [r7, #12]
 801f934:	695b      	ldr	r3, [r3, #20]
 801f936:	4618      	mov	r0, r3
 801f938:	f7f5 fddc 	bl	80154f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f93c:	68f8      	ldr	r0, [r7, #12]
 801f93e:	f7ff ffbd 	bl	801f8bc <ip_frag_free_pbuf_custom_ref>
}
 801f942:	bf00      	nop
 801f944:	3710      	adds	r7, #16
 801f946:	46bd      	mov	sp, r7
 801f948:	bd80      	pop	{r7, pc}
 801f94a:	bf00      	nop
 801f94c:	08026a24 	.word	0x08026a24
 801f950:	08026be8 	.word	0x08026be8
 801f954:	08026a6c 	.word	0x08026a6c
 801f958:	08026bf4 	.word	0x08026bf4

0801f95c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b094      	sub	sp, #80	@ 0x50
 801f960:	af02      	add	r7, sp, #8
 801f962:	60f8      	str	r0, [r7, #12]
 801f964:	60b9      	str	r1, [r7, #8]
 801f966:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f968:	2300      	movs	r3, #0
 801f96a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f96e:	68bb      	ldr	r3, [r7, #8]
 801f970:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f972:	3b14      	subs	r3, #20
 801f974:	2b00      	cmp	r3, #0
 801f976:	da00      	bge.n	801f97a <ip4_frag+0x1e>
 801f978:	3307      	adds	r3, #7
 801f97a:	10db      	asrs	r3, r3, #3
 801f97c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f97e:	2314      	movs	r3, #20
 801f980:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f982:	68fb      	ldr	r3, [r7, #12]
 801f984:	685b      	ldr	r3, [r3, #4]
 801f986:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801f988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f98a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f98e:	781b      	ldrb	r3, [r3, #0]
 801f990:	f003 030f 	and.w	r3, r3, #15
 801f994:	b2db      	uxtb	r3, r3
 801f996:	009b      	lsls	r3, r3, #2
 801f998:	b2db      	uxtb	r3, r3
 801f99a:	2b14      	cmp	r3, #20
 801f99c:	d002      	beq.n	801f9a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f99e:	f06f 0305 	mvn.w	r3, #5
 801f9a2:	e116      	b.n	801fbd2 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f9a4:	68fb      	ldr	r3, [r7, #12]
 801f9a6:	895b      	ldrh	r3, [r3, #10]
 801f9a8:	2b13      	cmp	r3, #19
 801f9aa:	d809      	bhi.n	801f9c0 <ip4_frag+0x64>
 801f9ac:	4b8b      	ldr	r3, [pc, #556]	@ (801fbdc <ip4_frag+0x280>)
 801f9ae:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801f9b2:	498b      	ldr	r1, [pc, #556]	@ (801fbe0 <ip4_frag+0x284>)
 801f9b4:	488b      	ldr	r0, [pc, #556]	@ (801fbe4 <ip4_frag+0x288>)
 801f9b6:	f001 fde3 	bl	8021580 <iprintf>
 801f9ba:	f06f 0305 	mvn.w	r3, #5
 801f9be:	e108      	b.n	801fbd2 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9c2:	88db      	ldrh	r3, [r3, #6]
 801f9c4:	b29b      	uxth	r3, r3
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	f7f3 ff66 	bl	8013898 <lwip_htons>
 801f9cc:	4603      	mov	r3, r0
 801f9ce:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801f9d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f9d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f9d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f9da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f9dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801f9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f9e2:	68fb      	ldr	r3, [r7, #12]
 801f9e4:	891b      	ldrh	r3, [r3, #8]
 801f9e6:	3b14      	subs	r3, #20
 801f9e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801f9ec:	e0e7      	b.n	801fbbe <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f9ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f9f0:	00db      	lsls	r3, r3, #3
 801f9f2:	b29b      	uxth	r3, r3
 801f9f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f9f8:	4293      	cmp	r3, r2
 801f9fa:	bf28      	it	cs
 801f9fc:	4613      	movcs	r3, r2
 801f9fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801fa00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801fa04:	2114      	movs	r1, #20
 801fa06:	200e      	movs	r0, #14
 801fa08:	f7f5 fa48 	bl	8014e9c <pbuf_alloc>
 801fa0c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801fa0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	f000 80db 	beq.w	801fbcc <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa18:	895b      	ldrh	r3, [r3, #10]
 801fa1a:	2b13      	cmp	r3, #19
 801fa1c:	d806      	bhi.n	801fa2c <ip4_frag+0xd0>
 801fa1e:	4b6f      	ldr	r3, [pc, #444]	@ (801fbdc <ip4_frag+0x280>)
 801fa20:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801fa24:	4970      	ldr	r1, [pc, #448]	@ (801fbe8 <ip4_frag+0x28c>)
 801fa26:	486f      	ldr	r0, [pc, #444]	@ (801fbe4 <ip4_frag+0x288>)
 801fa28:	f001 fdaa 	bl	8021580 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801fa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa2e:	685b      	ldr	r3, [r3, #4]
 801fa30:	2214      	movs	r2, #20
 801fa32:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801fa34:	4618      	mov	r0, r3
 801fa36:	f001 ff78 	bl	802192a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801fa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa3c:	685b      	ldr	r3, [r3, #4]
 801fa3e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801fa40:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801fa42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801fa46:	e064      	b.n	801fb12 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801fa48:	68fb      	ldr	r3, [r7, #12]
 801fa4a:	895a      	ldrh	r2, [r3, #10]
 801fa4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fa4e:	1ad3      	subs	r3, r2, r3
 801fa50:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	895b      	ldrh	r3, [r3, #10]
 801fa56:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801fa58:	429a      	cmp	r2, r3
 801fa5a:	d906      	bls.n	801fa6a <ip4_frag+0x10e>
 801fa5c:	4b5f      	ldr	r3, [pc, #380]	@ (801fbdc <ip4_frag+0x280>)
 801fa5e:	f240 322d 	movw	r2, #813	@ 0x32d
 801fa62:	4962      	ldr	r1, [pc, #392]	@ (801fbec <ip4_frag+0x290>)
 801fa64:	485f      	ldr	r0, [pc, #380]	@ (801fbe4 <ip4_frag+0x288>)
 801fa66:	f001 fd8b 	bl	8021580 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801fa6a:	8bfa      	ldrh	r2, [r7, #30]
 801fa6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801fa70:	4293      	cmp	r3, r2
 801fa72:	bf28      	it	cs
 801fa74:	4613      	movcs	r3, r2
 801fa76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801fa7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d105      	bne.n	801fa8e <ip4_frag+0x132>
        poff = 0;
 801fa82:	2300      	movs	r3, #0
 801fa84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	60fb      	str	r3, [r7, #12]
        continue;
 801fa8c:	e041      	b.n	801fb12 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801fa8e:	f7ff ff0d 	bl	801f8ac <ip_frag_alloc_pbuf_custom_ref>
 801fa92:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801fa94:	69bb      	ldr	r3, [r7, #24]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d103      	bne.n	801faa2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801fa9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fa9c:	f7f5 fd2a 	bl	80154f4 <pbuf_free>
        goto memerr;
 801faa0:	e095      	b.n	801fbce <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801faa2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801faa8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801faaa:	4413      	add	r3, r2
 801faac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801fab0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801fab4:	9201      	str	r2, [sp, #4]
 801fab6:	9300      	str	r3, [sp, #0]
 801fab8:	4603      	mov	r3, r0
 801faba:	2241      	movs	r2, #65	@ 0x41
 801fabc:	2000      	movs	r0, #0
 801fabe:	f7f5 fb37 	bl	8015130 <pbuf_alloced_custom>
 801fac2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801fac4:	697b      	ldr	r3, [r7, #20]
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	d106      	bne.n	801fad8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801faca:	69b8      	ldr	r0, [r7, #24]
 801facc:	f7ff fef6 	bl	801f8bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801fad0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fad2:	f7f5 fd0f 	bl	80154f4 <pbuf_free>
        goto memerr;
 801fad6:	e07a      	b.n	801fbce <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801fad8:	68f8      	ldr	r0, [r7, #12]
 801fada:	f7f5 fdc9 	bl	8015670 <pbuf_ref>
      pcr->original = p;
 801fade:	69bb      	ldr	r3, [r7, #24]
 801fae0:	68fa      	ldr	r2, [r7, #12]
 801fae2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801fae4:	69bb      	ldr	r3, [r7, #24]
 801fae6:	4a42      	ldr	r2, [pc, #264]	@ (801fbf0 <ip4_frag+0x294>)
 801fae8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801faea:	6979      	ldr	r1, [r7, #20]
 801faec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801faee:	f7f5 fde7 	bl	80156c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801faf2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801faf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801fafa:	1ad3      	subs	r3, r2, r3
 801fafc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801fb00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801fb04:	2b00      	cmp	r3, #0
 801fb06:	d004      	beq.n	801fb12 <ip4_frag+0x1b6>
        poff = 0;
 801fb08:	2300      	movs	r3, #0
 801fb0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801fb0c:	68fb      	ldr	r3, [r7, #12]
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801fb12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d196      	bne.n	801fa48 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801fb1a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801fb1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801fb20:	4413      	add	r3, r2
 801fb22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801fb24:	68bb      	ldr	r3, [r7, #8]
 801fb26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801fb28:	f1a3 0213 	sub.w	r2, r3, #19
 801fb2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fb30:	429a      	cmp	r2, r3
 801fb32:	bfcc      	ite	gt
 801fb34:	2301      	movgt	r3, #1
 801fb36:	2300      	movle	r3, #0
 801fb38:	b2db      	uxtb	r3, r3
 801fb3a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801fb3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801fb40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fb44:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801fb46:	6a3b      	ldr	r3, [r7, #32]
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	d002      	beq.n	801fb52 <ip4_frag+0x1f6>
 801fb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d003      	beq.n	801fb5a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801fb52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fb54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801fb58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801fb5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	f7f3 fe9b 	bl	8013898 <lwip_htons>
 801fb62:	4603      	mov	r3, r0
 801fb64:	461a      	mov	r2, r3
 801fb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb68:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fb6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801fb6c:	3314      	adds	r3, #20
 801fb6e:	b29b      	uxth	r3, r3
 801fb70:	4618      	mov	r0, r3
 801fb72:	f7f3 fe91 	bl	8013898 <lwip_htons>
 801fb76:	4603      	mov	r3, r0
 801fb78:	461a      	mov	r2, r3
 801fb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb7c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801fb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb80:	2200      	movs	r2, #0
 801fb82:	729a      	strb	r2, [r3, #10]
 801fb84:	2200      	movs	r2, #0
 801fb86:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801fb88:	68bb      	ldr	r3, [r7, #8]
 801fb8a:	695b      	ldr	r3, [r3, #20]
 801fb8c:	687a      	ldr	r2, [r7, #4]
 801fb8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801fb90:	68b8      	ldr	r0, [r7, #8]
 801fb92:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801fb94:	4b17      	ldr	r3, [pc, #92]	@ (801fbf4 <ip4_frag+0x298>)
 801fb96:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801fb98:	3301      	adds	r3, #1
 801fb9a:	b29a      	uxth	r2, r3
 801fb9c:	4b15      	ldr	r3, [pc, #84]	@ (801fbf4 <ip4_frag+0x298>)
 801fb9e:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801fba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fba2:	f7f5 fca7 	bl	80154f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801fba6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801fbaa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801fbac:	1ad3      	subs	r3, r2, r3
 801fbae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801fbb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801fbb6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801fbb8:	4413      	add	r3, r2
 801fbba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801fbbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	f47f af13 	bne.w	801f9ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801fbc8:	2300      	movs	r3, #0
 801fbca:	e002      	b.n	801fbd2 <ip4_frag+0x276>
      goto memerr;
 801fbcc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801fbce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801fbd2:	4618      	mov	r0, r3
 801fbd4:	3748      	adds	r7, #72	@ 0x48
 801fbd6:	46bd      	mov	sp, r7
 801fbd8:	bd80      	pop	{r7, pc}
 801fbda:	bf00      	nop
 801fbdc:	08026a24 	.word	0x08026a24
 801fbe0:	08026c00 	.word	0x08026c00
 801fbe4:	08026a6c 	.word	0x08026a6c
 801fbe8:	08026c1c 	.word	0x08026c1c
 801fbec:	08026c3c 	.word	0x08026c3c
 801fbf0:	0801f8f5 	.word	0x0801f8f5
 801fbf4:	2002d358 	.word	0x2002d358

0801fbf8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	b086      	sub	sp, #24
 801fbfc:	af00      	add	r7, sp, #0
 801fbfe:	6078      	str	r0, [r7, #4]
 801fc00:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801fc02:	230e      	movs	r3, #14
 801fc04:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	895b      	ldrh	r3, [r3, #10]
 801fc0a:	2b0e      	cmp	r3, #14
 801fc0c:	d80c      	bhi.n	801fc28 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801fc0e:	4b51      	ldr	r3, [pc, #324]	@ (801fd54 <ethernet_input+0x15c>)
 801fc10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801fc12:	3301      	adds	r3, #1
 801fc14:	b29a      	uxth	r2, r3
 801fc16:	4b4f      	ldr	r3, [pc, #316]	@ (801fd54 <ethernet_input+0x15c>)
 801fc18:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801fc1a:	4b4e      	ldr	r3, [pc, #312]	@ (801fd54 <ethernet_input+0x15c>)
 801fc1c:	8bdb      	ldrh	r3, [r3, #30]
 801fc1e:	3301      	adds	r3, #1
 801fc20:	b29a      	uxth	r2, r3
 801fc22:	4b4c      	ldr	r3, [pc, #304]	@ (801fd54 <ethernet_input+0x15c>)
 801fc24:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801fc26:	e08d      	b.n	801fd44 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	7bdb      	ldrb	r3, [r3, #15]
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	d106      	bne.n	801fc3e <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801fc30:	683b      	ldr	r3, [r7, #0]
 801fc32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801fc36:	3301      	adds	r3, #1
 801fc38:	b2da      	uxtb	r2, r3
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	685b      	ldr	r3, [r3, #4]
 801fc42:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801fc44:	693b      	ldr	r3, [r7, #16]
 801fc46:	7b1a      	ldrb	r2, [r3, #12]
 801fc48:	7b5b      	ldrb	r3, [r3, #13]
 801fc4a:	021b      	lsls	r3, r3, #8
 801fc4c:	4313      	orrs	r3, r2
 801fc4e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801fc50:	693b      	ldr	r3, [r7, #16]
 801fc52:	781b      	ldrb	r3, [r3, #0]
 801fc54:	f003 0301 	and.w	r3, r3, #1
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	d023      	beq.n	801fca4 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801fc5c:	693b      	ldr	r3, [r7, #16]
 801fc5e:	781b      	ldrb	r3, [r3, #0]
 801fc60:	2b01      	cmp	r3, #1
 801fc62:	d10f      	bne.n	801fc84 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fc64:	693b      	ldr	r3, [r7, #16]
 801fc66:	785b      	ldrb	r3, [r3, #1]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d11b      	bne.n	801fca4 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801fc6c:	693b      	ldr	r3, [r7, #16]
 801fc6e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fc70:	2b5e      	cmp	r3, #94	@ 0x5e
 801fc72:	d117      	bne.n	801fca4 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	7b5b      	ldrb	r3, [r3, #13]
 801fc78:	f043 0310 	orr.w	r3, r3, #16
 801fc7c:	b2da      	uxtb	r2, r3
 801fc7e:	687b      	ldr	r3, [r7, #4]
 801fc80:	735a      	strb	r2, [r3, #13]
 801fc82:	e00f      	b.n	801fca4 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801fc84:	693b      	ldr	r3, [r7, #16]
 801fc86:	2206      	movs	r2, #6
 801fc88:	4933      	ldr	r1, [pc, #204]	@ (801fd58 <ethernet_input+0x160>)
 801fc8a:	4618      	mov	r0, r3
 801fc8c:	f001 fdc8 	bl	8021820 <memcmp>
 801fc90:	4603      	mov	r3, r0
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d106      	bne.n	801fca4 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	7b5b      	ldrb	r3, [r3, #13]
 801fc9a:	f043 0308 	orr.w	r3, r3, #8
 801fc9e:	b2da      	uxtb	r2, r3
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801fca4:	89fb      	ldrh	r3, [r7, #14]
 801fca6:	2b08      	cmp	r3, #8
 801fca8:	d003      	beq.n	801fcb2 <ethernet_input+0xba>
 801fcaa:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801fcae:	d014      	beq.n	801fcda <ethernet_input+0xe2>
 801fcb0:	e034      	b.n	801fd1c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fcb2:	683b      	ldr	r3, [r7, #0]
 801fcb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801fcb8:	f003 0308 	and.w	r3, r3, #8
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d03c      	beq.n	801fd3a <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fcc0:	8afb      	ldrh	r3, [r7, #22]
 801fcc2:	4619      	mov	r1, r3
 801fcc4:	6878      	ldr	r0, [r7, #4]
 801fcc6:	f7f5 fb87 	bl	80153d8 <pbuf_remove_header>
 801fcca:	4603      	mov	r3, r0
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d136      	bne.n	801fd3e <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801fcd0:	6839      	ldr	r1, [r7, #0]
 801fcd2:	6878      	ldr	r0, [r7, #4]
 801fcd4:	f7fe fe7e 	bl	801e9d4 <ip4_input>
      }
      break;
 801fcd8:	e02d      	b.n	801fd36 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fcda:	683b      	ldr	r3, [r7, #0]
 801fcdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801fce0:	f003 0308 	and.w	r3, r3, #8
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	d02c      	beq.n	801fd42 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fce8:	8afb      	ldrh	r3, [r7, #22]
 801fcea:	4619      	mov	r1, r3
 801fcec:	6878      	ldr	r0, [r7, #4]
 801fcee:	f7f5 fb73 	bl	80153d8 <pbuf_remove_header>
 801fcf2:	4603      	mov	r3, r0
 801fcf4:	2b00      	cmp	r3, #0
 801fcf6:	d00c      	beq.n	801fd12 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801fcf8:	4b16      	ldr	r3, [pc, #88]	@ (801fd54 <ethernet_input+0x15c>)
 801fcfa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801fcfc:	3301      	adds	r3, #1
 801fcfe:	b29a      	uxth	r2, r3
 801fd00:	4b14      	ldr	r3, [pc, #80]	@ (801fd54 <ethernet_input+0x15c>)
 801fd02:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801fd04:	4b13      	ldr	r3, [pc, #76]	@ (801fd54 <ethernet_input+0x15c>)
 801fd06:	8bdb      	ldrh	r3, [r3, #30]
 801fd08:	3301      	adds	r3, #1
 801fd0a:	b29a      	uxth	r2, r3
 801fd0c:	4b11      	ldr	r3, [pc, #68]	@ (801fd54 <ethernet_input+0x15c>)
 801fd0e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801fd10:	e018      	b.n	801fd44 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801fd12:	6839      	ldr	r1, [r7, #0]
 801fd14:	6878      	ldr	r0, [r7, #4]
 801fd16:	f7fd fef7 	bl	801db08 <etharp_input>
      }
      break;
 801fd1a:	e00c      	b.n	801fd36 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801fd1c:	4b0d      	ldr	r3, [pc, #52]	@ (801fd54 <ethernet_input+0x15c>)
 801fd1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801fd20:	3301      	adds	r3, #1
 801fd22:	b29a      	uxth	r2, r3
 801fd24:	4b0b      	ldr	r3, [pc, #44]	@ (801fd54 <ethernet_input+0x15c>)
 801fd26:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801fd28:	4b0a      	ldr	r3, [pc, #40]	@ (801fd54 <ethernet_input+0x15c>)
 801fd2a:	8bdb      	ldrh	r3, [r3, #30]
 801fd2c:	3301      	adds	r3, #1
 801fd2e:	b29a      	uxth	r2, r3
 801fd30:	4b08      	ldr	r3, [pc, #32]	@ (801fd54 <ethernet_input+0x15c>)
 801fd32:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801fd34:	e006      	b.n	801fd44 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801fd36:	2300      	movs	r3, #0
 801fd38:	e008      	b.n	801fd4c <ethernet_input+0x154>
        goto free_and_return;
 801fd3a:	bf00      	nop
 801fd3c:	e002      	b.n	801fd44 <ethernet_input+0x14c>
        goto free_and_return;
 801fd3e:	bf00      	nop
 801fd40:	e000      	b.n	801fd44 <ethernet_input+0x14c>
        goto free_and_return;
 801fd42:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801fd44:	6878      	ldr	r0, [r7, #4]
 801fd46:	f7f5 fbd5 	bl	80154f4 <pbuf_free>
  return ERR_OK;
 801fd4a:	2300      	movs	r3, #0
}
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	3718      	adds	r7, #24
 801fd50:	46bd      	mov	sp, r7
 801fd52:	bd80      	pop	{r7, pc}
 801fd54:	2002d358 	.word	0x2002d358
 801fd58:	08027414 	.word	0x08027414

0801fd5c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801fd5c:	b580      	push	{r7, lr}
 801fd5e:	b086      	sub	sp, #24
 801fd60:	af00      	add	r7, sp, #0
 801fd62:	60f8      	str	r0, [r7, #12]
 801fd64:	60b9      	str	r1, [r7, #8]
 801fd66:	607a      	str	r2, [r7, #4]
 801fd68:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801fd6a:	8c3b      	ldrh	r3, [r7, #32]
 801fd6c:	4618      	mov	r0, r3
 801fd6e:	f7f3 fd93 	bl	8013898 <lwip_htons>
 801fd72:	4603      	mov	r3, r0
 801fd74:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801fd76:	210e      	movs	r1, #14
 801fd78:	68b8      	ldr	r0, [r7, #8]
 801fd7a:	f7f5 fb1d 	bl	80153b8 <pbuf_add_header>
 801fd7e:	4603      	mov	r3, r0
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d125      	bne.n	801fdd0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801fd84:	68bb      	ldr	r3, [r7, #8]
 801fd86:	685b      	ldr	r3, [r3, #4]
 801fd88:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801fd8a:	693b      	ldr	r3, [r7, #16]
 801fd8c:	8afa      	ldrh	r2, [r7, #22]
 801fd8e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801fd90:	693b      	ldr	r3, [r7, #16]
 801fd92:	2206      	movs	r2, #6
 801fd94:	6839      	ldr	r1, [r7, #0]
 801fd96:	4618      	mov	r0, r3
 801fd98:	f001 fdc7 	bl	802192a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801fd9c:	693b      	ldr	r3, [r7, #16]
 801fd9e:	3306      	adds	r3, #6
 801fda0:	2206      	movs	r2, #6
 801fda2:	6879      	ldr	r1, [r7, #4]
 801fda4:	4618      	mov	r0, r3
 801fda6:	f001 fdc0 	bl	802192a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801fdaa:	68fb      	ldr	r3, [r7, #12]
 801fdac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801fdb0:	2b06      	cmp	r3, #6
 801fdb2:	d006      	beq.n	801fdc2 <ethernet_output+0x66>
 801fdb4:	4b0d      	ldr	r3, [pc, #52]	@ (801fdec <ethernet_output+0x90>)
 801fdb6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801fdba:	490d      	ldr	r1, [pc, #52]	@ (801fdf0 <ethernet_output+0x94>)
 801fdbc:	480d      	ldr	r0, [pc, #52]	@ (801fdf4 <ethernet_output+0x98>)
 801fdbe:	f001 fbdf 	bl	8021580 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	699b      	ldr	r3, [r3, #24]
 801fdc6:	68b9      	ldr	r1, [r7, #8]
 801fdc8:	68f8      	ldr	r0, [r7, #12]
 801fdca:	4798      	blx	r3
 801fdcc:	4603      	mov	r3, r0
 801fdce:	e008      	b.n	801fde2 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801fdd0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801fdd2:	4b09      	ldr	r3, [pc, #36]	@ (801fdf8 <ethernet_output+0x9c>)
 801fdd4:	895b      	ldrh	r3, [r3, #10]
 801fdd6:	3301      	adds	r3, #1
 801fdd8:	b29a      	uxth	r2, r3
 801fdda:	4b07      	ldr	r3, [pc, #28]	@ (801fdf8 <ethernet_output+0x9c>)
 801fddc:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801fdde:	f06f 0301 	mvn.w	r3, #1
}
 801fde2:	4618      	mov	r0, r3
 801fde4:	3718      	adds	r7, #24
 801fde6:	46bd      	mov	sp, r7
 801fde8:	bd80      	pop	{r7, pc}
 801fdea:	bf00      	nop
 801fdec:	08026c4c 	.word	0x08026c4c
 801fdf0:	08026c84 	.word	0x08026c84
 801fdf4:	08026cb8 	.word	0x08026cb8
 801fdf8:	2002d358 	.word	0x2002d358

0801fdfc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801fdfc:	b580      	push	{r7, lr}
 801fdfe:	b082      	sub	sp, #8
 801fe00:	af00      	add	r7, sp, #0
 801fe02:	6078      	str	r0, [r7, #4]
 801fe04:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	2200      	movs	r2, #0
 801fe0a:	2104      	movs	r1, #4
 801fe0c:	4618      	mov	r0, r3
 801fe0e:	f7ed fc0f 	bl	800d630 <osMessageQueueNew>
 801fe12:	4602      	mov	r2, r0
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801fe18:	4b10      	ldr	r3, [pc, #64]	@ (801fe5c <sys_mbox_new+0x60>)
 801fe1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801fe1e:	3301      	adds	r3, #1
 801fe20:	b29a      	uxth	r2, r3
 801fe22:	4b0e      	ldr	r3, [pc, #56]	@ (801fe5c <sys_mbox_new+0x60>)
 801fe24:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801fe28:	4b0c      	ldr	r3, [pc, #48]	@ (801fe5c <sys_mbox_new+0x60>)
 801fe2a:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 801fe2e:	4b0b      	ldr	r3, [pc, #44]	@ (801fe5c <sys_mbox_new+0x60>)
 801fe30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801fe34:	429a      	cmp	r2, r3
 801fe36:	d205      	bcs.n	801fe44 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801fe38:	4b08      	ldr	r3, [pc, #32]	@ (801fe5c <sys_mbox_new+0x60>)
 801fe3a:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801fe3e:	4b07      	ldr	r3, [pc, #28]	@ (801fe5c <sys_mbox_new+0x60>)
 801fe40:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	681b      	ldr	r3, [r3, #0]
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	d102      	bne.n	801fe52 <sys_mbox_new+0x56>
    return ERR_MEM;
 801fe4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fe50:	e000      	b.n	801fe54 <sys_mbox_new+0x58>

  return ERR_OK;
 801fe52:	2300      	movs	r3, #0
}
 801fe54:	4618      	mov	r0, r3
 801fe56:	3708      	adds	r7, #8
 801fe58:	46bd      	mov	sp, r7
 801fe5a:	bd80      	pop	{r7, pc}
 801fe5c:	2002d358 	.word	0x2002d358

0801fe60 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801fe60:	b580      	push	{r7, lr}
 801fe62:	b082      	sub	sp, #8
 801fe64:	af00      	add	r7, sp, #0
 801fe66:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	681b      	ldr	r3, [r3, #0]
 801fe6c:	4618      	mov	r0, r3
 801fe6e:	f7ed fd4b 	bl	800d908 <osMessageQueueGetCount>
 801fe72:	4603      	mov	r3, r0
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	d007      	beq.n	801fe88 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801fe78:	4b0c      	ldr	r3, [pc, #48]	@ (801feac <sys_mbox_free+0x4c>)
 801fe7a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801fe7e:	3301      	adds	r3, #1
 801fe80:	b29a      	uxth	r2, r3
 801fe82:	4b0a      	ldr	r3, [pc, #40]	@ (801feac <sys_mbox_free+0x4c>)
 801fe84:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	4618      	mov	r0, r3
 801fe8e:	f7ed fd6d 	bl	800d96c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801fe92:	4b06      	ldr	r3, [pc, #24]	@ (801feac <sys_mbox_free+0x4c>)
 801fe94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801fe98:	3b01      	subs	r3, #1
 801fe9a:	b29a      	uxth	r2, r3
 801fe9c:	4b03      	ldr	r3, [pc, #12]	@ (801feac <sys_mbox_free+0x4c>)
 801fe9e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
}
 801fea2:	bf00      	nop
 801fea4:	3708      	adds	r7, #8
 801fea6:	46bd      	mov	sp, r7
 801fea8:	bd80      	pop	{r7, pc}
 801feaa:	bf00      	nop
 801feac:	2002d358 	.word	0x2002d358

0801feb0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801feb0:	b580      	push	{r7, lr}
 801feb2:	b084      	sub	sp, #16
 801feb4:	af00      	add	r7, sp, #0
 801feb6:	6078      	str	r0, [r7, #4]
 801feb8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	6818      	ldr	r0, [r3, #0]
 801febe:	4639      	mov	r1, r7
 801fec0:	2300      	movs	r3, #0
 801fec2:	2200      	movs	r2, #0
 801fec4:	f7ed fc3a 	bl	800d73c <osMessageQueuePut>
 801fec8:	4603      	mov	r3, r0
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d102      	bne.n	801fed4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801fece:	2300      	movs	r3, #0
 801fed0:	73fb      	strb	r3, [r7, #15]
 801fed2:	e009      	b.n	801fee8 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801fed4:	23ff      	movs	r3, #255	@ 0xff
 801fed6:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801fed8:	4b06      	ldr	r3, [pc, #24]	@ (801fef4 <sys_mbox_trypost+0x44>)
 801feda:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801fede:	3301      	adds	r3, #1
 801fee0:	b29a      	uxth	r2, r3
 801fee2:	4b04      	ldr	r3, [pc, #16]	@ (801fef4 <sys_mbox_trypost+0x44>)
 801fee4:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
#endif /* SYS_STATS */
  }

  return result;
 801fee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801feec:	4618      	mov	r0, r3
 801feee:	3710      	adds	r7, #16
 801fef0:	46bd      	mov	sp, r7
 801fef2:	bd80      	pop	{r7, pc}
 801fef4:	2002d358 	.word	0x2002d358

0801fef8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801fef8:	b580      	push	{r7, lr}
 801fefa:	b086      	sub	sp, #24
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	60f8      	str	r0, [r7, #12]
 801ff00:	60b9      	str	r1, [r7, #8]
 801ff02:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ff04:	f7ec fea2 	bl	800cc4c <osKernelGetTickCount>
 801ff08:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d013      	beq.n	801ff38 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ff10:	68fb      	ldr	r3, [r7, #12]
 801ff12:	6818      	ldr	r0, [r3, #0]
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	2200      	movs	r2, #0
 801ff18:	68b9      	ldr	r1, [r7, #8]
 801ff1a:	f7ed fc83 	bl	800d824 <osMessageQueueGet>
 801ff1e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ff20:	693b      	ldr	r3, [r7, #16]
 801ff22:	2b00      	cmp	r3, #0
 801ff24:	d105      	bne.n	801ff32 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ff26:	f7ec fe91 	bl	800cc4c <osKernelGetTickCount>
 801ff2a:	4602      	mov	r2, r0
 801ff2c:	697b      	ldr	r3, [r7, #20]
 801ff2e:	1ad3      	subs	r3, r2, r3
 801ff30:	e00f      	b.n	801ff52 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ff32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ff36:	e00c      	b.n	801ff52 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ff38:	68fb      	ldr	r3, [r7, #12]
 801ff3a:	6818      	ldr	r0, [r3, #0]
 801ff3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ff40:	2200      	movs	r2, #0
 801ff42:	68b9      	ldr	r1, [r7, #8]
 801ff44:	f7ed fc6e 	bl	800d824 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801ff48:	f7ec fe80 	bl	800cc4c <osKernelGetTickCount>
 801ff4c:	4602      	mov	r2, r0
 801ff4e:	697b      	ldr	r3, [r7, #20]
 801ff50:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ff52:	4618      	mov	r0, r3
 801ff54:	3718      	adds	r7, #24
 801ff56:	46bd      	mov	sp, r7
 801ff58:	bd80      	pop	{r7, pc}

0801ff5a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ff5a:	b580      	push	{r7, lr}
 801ff5c:	b082      	sub	sp, #8
 801ff5e:	af00      	add	r7, sp, #0
 801ff60:	6078      	str	r0, [r7, #4]
 801ff62:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	6818      	ldr	r0, [r3, #0]
 801ff68:	2300      	movs	r3, #0
 801ff6a:	2200      	movs	r2, #0
 801ff6c:	6839      	ldr	r1, [r7, #0]
 801ff6e:	f7ed fc59 	bl	800d824 <osMessageQueueGet>
 801ff72:	4603      	mov	r3, r0
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d101      	bne.n	801ff7c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801ff78:	2300      	movs	r3, #0
 801ff7a:	e001      	b.n	801ff80 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ff7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801ff80:	4618      	mov	r0, r3
 801ff82:	3708      	adds	r7, #8
 801ff84:	46bd      	mov	sp, r7
 801ff86:	bd80      	pop	{r7, pc}

0801ff88 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ff88:	b480      	push	{r7}
 801ff8a:	b083      	sub	sp, #12
 801ff8c:	af00      	add	r7, sp, #0
 801ff8e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	2b00      	cmp	r3, #0
 801ff96:	d101      	bne.n	801ff9c <sys_mbox_valid+0x14>
    return 0;
 801ff98:	2300      	movs	r3, #0
 801ff9a:	e000      	b.n	801ff9e <sys_mbox_valid+0x16>
  else
    return 1;
 801ff9c:	2301      	movs	r3, #1
}
 801ff9e:	4618      	mov	r0, r3
 801ffa0:	370c      	adds	r7, #12
 801ffa2:	46bd      	mov	sp, r7
 801ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffa8:	4770      	bx	lr

0801ffaa <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ffaa:	b480      	push	{r7}
 801ffac:	b083      	sub	sp, #12
 801ffae:	af00      	add	r7, sp, #0
 801ffb0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	601a      	str	r2, [r3, #0]
}
 801ffb8:	bf00      	nop
 801ffba:	370c      	adds	r7, #12
 801ffbc:	46bd      	mov	sp, r7
 801ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffc2:	4770      	bx	lr

0801ffc4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801ffc4:	b580      	push	{r7, lr}
 801ffc6:	b082      	sub	sp, #8
 801ffc8:	af00      	add	r7, sp, #0
 801ffca:	6078      	str	r0, [r7, #4]
 801ffcc:	460b      	mov	r3, r1
 801ffce:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801ffd0:	78fb      	ldrb	r3, [r7, #3]
 801ffd2:	2200      	movs	r2, #0
 801ffd4:	4619      	mov	r1, r3
 801ffd6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801ffda:	f7ed f999 	bl	800d310 <osSemaphoreNew>
 801ffde:	4602      	mov	r2, r0
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d10a      	bne.n	8020002 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801ffec:	4b17      	ldr	r3, [pc, #92]	@ (802004c <sys_sem_new+0x88>)
 801ffee:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 801fff2:	3301      	adds	r3, #1
 801fff4:	b29a      	uxth	r2, r3
 801fff6:	4b15      	ldr	r3, [pc, #84]	@ (802004c <sys_sem_new+0x88>)
 801fff8:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
#endif /* SYS_STATS */
    return ERR_MEM;
 801fffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020000:	e01f      	b.n	8020042 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 8020002:	78fb      	ldrb	r3, [r7, #3]
 8020004:	2b00      	cmp	r3, #0
 8020006:	d105      	bne.n	8020014 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	2100      	movs	r1, #0
 802000e:	4618      	mov	r0, r3
 8020010:	f7ed fa1a 	bl	800d448 <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 8020014:	4b0d      	ldr	r3, [pc, #52]	@ (802004c <sys_sem_new+0x88>)
 8020016:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 802001a:	3301      	adds	r3, #1
 802001c:	b29a      	uxth	r2, r3
 802001e:	4b0b      	ldr	r3, [pc, #44]	@ (802004c <sys_sem_new+0x88>)
 8020020:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 8020024:	4b09      	ldr	r3, [pc, #36]	@ (802004c <sys_sem_new+0x88>)
 8020026:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 802002a:	4b08      	ldr	r3, [pc, #32]	@ (802004c <sys_sem_new+0x88>)
 802002c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 8020030:	429a      	cmp	r2, r3
 8020032:	d205      	bcs.n	8020040 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 8020034:	4b05      	ldr	r3, [pc, #20]	@ (802004c <sys_sem_new+0x88>)
 8020036:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	@ 0xec
 802003a:	4b04      	ldr	r3, [pc, #16]	@ (802004c <sys_sem_new+0x88>)
 802003c:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8020040:	2300      	movs	r3, #0
}
 8020042:	4618      	mov	r0, r3
 8020044:	3708      	adds	r7, #8
 8020046:	46bd      	mov	sp, r7
 8020048:	bd80      	pop	{r7, pc}
 802004a:	bf00      	nop
 802004c:	2002d358 	.word	0x2002d358

08020050 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8020050:	b580      	push	{r7, lr}
 8020052:	b084      	sub	sp, #16
 8020054:	af00      	add	r7, sp, #0
 8020056:	6078      	str	r0, [r7, #4]
 8020058:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 802005a:	f7ec fdf7 	bl	800cc4c <osKernelGetTickCount>
 802005e:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8020060:	683b      	ldr	r3, [r7, #0]
 8020062:	2b00      	cmp	r3, #0
 8020064:	d011      	beq.n	802008a <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	6839      	ldr	r1, [r7, #0]
 802006c:	4618      	mov	r0, r3
 802006e:	f7ed f9eb 	bl	800d448 <osSemaphoreAcquire>
 8020072:	4603      	mov	r3, r0
 8020074:	2b00      	cmp	r3, #0
 8020076:	d105      	bne.n	8020084 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8020078:	f7ec fde8 	bl	800cc4c <osKernelGetTickCount>
 802007c:	4602      	mov	r2, r0
 802007e:	68fb      	ldr	r3, [r7, #12]
 8020080:	1ad3      	subs	r3, r2, r3
 8020082:	e012      	b.n	80200aa <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020088:	e00f      	b.n	80200aa <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 802008a:	bf00      	nop
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020094:	4618      	mov	r0, r3
 8020096:	f7ed f9d7 	bl	800d448 <osSemaphoreAcquire>
 802009a:	4603      	mov	r3, r0
 802009c:	2b00      	cmp	r3, #0
 802009e:	d1f5      	bne.n	802008c <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80200a0:	f7ec fdd4 	bl	800cc4c <osKernelGetTickCount>
 80200a4:	4602      	mov	r2, r0
 80200a6:	68fb      	ldr	r3, [r7, #12]
 80200a8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80200aa:	4618      	mov	r0, r3
 80200ac:	3710      	adds	r7, #16
 80200ae:	46bd      	mov	sp, r7
 80200b0:	bd80      	pop	{r7, pc}

080200b2 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80200b2:	b580      	push	{r7, lr}
 80200b4:	b082      	sub	sp, #8
 80200b6:	af00      	add	r7, sp, #0
 80200b8:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	681b      	ldr	r3, [r3, #0]
 80200be:	4618      	mov	r0, r3
 80200c0:	f7ed fa28 	bl	800d514 <osSemaphoreRelease>
}
 80200c4:	bf00      	nop
 80200c6:	3708      	adds	r7, #8
 80200c8:	46bd      	mov	sp, r7
 80200ca:	bd80      	pop	{r7, pc}

080200cc <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80200cc:	b580      	push	{r7, lr}
 80200ce:	b082      	sub	sp, #8
 80200d0:	af00      	add	r7, sp, #0
 80200d2:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 80200d4:	4b08      	ldr	r3, [pc, #32]	@ (80200f8 <sys_sem_free+0x2c>)
 80200d6:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80200da:	3b01      	subs	r3, #1
 80200dc:	b29a      	uxth	r2, r3
 80200de:	4b06      	ldr	r3, [pc, #24]	@ (80200f8 <sys_sem_free+0x2c>)
 80200e0:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	4618      	mov	r0, r3
 80200ea:	f7ed fa6b 	bl	800d5c4 <osSemaphoreDelete>
}
 80200ee:	bf00      	nop
 80200f0:	3708      	adds	r7, #8
 80200f2:	46bd      	mov	sp, r7
 80200f4:	bd80      	pop	{r7, pc}
 80200f6:	bf00      	nop
 80200f8:	2002d358 	.word	0x2002d358

080200fc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80200fc:	b480      	push	{r7}
 80200fe:	b083      	sub	sp, #12
 8020100:	af00      	add	r7, sp, #0
 8020102:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	2b00      	cmp	r3, #0
 802010a:	d101      	bne.n	8020110 <sys_sem_valid+0x14>
    return 0;
 802010c:	2300      	movs	r3, #0
 802010e:	e000      	b.n	8020112 <sys_sem_valid+0x16>
  else
    return 1;
 8020110:	2301      	movs	r3, #1
}
 8020112:	4618      	mov	r0, r3
 8020114:	370c      	adds	r7, #12
 8020116:	46bd      	mov	sp, r7
 8020118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802011c:	4770      	bx	lr

0802011e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 802011e:	b480      	push	{r7}
 8020120:	b083      	sub	sp, #12
 8020122:	af00      	add	r7, sp, #0
 8020124:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	2200      	movs	r2, #0
 802012a:	601a      	str	r2, [r3, #0]
}
 802012c:	bf00      	nop
 802012e:	370c      	adds	r7, #12
 8020130:	46bd      	mov	sp, r7
 8020132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020136:	4770      	bx	lr

08020138 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020138:	b580      	push	{r7, lr}
 802013a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 802013c:	2000      	movs	r0, #0
 802013e:	f7ec ff9f 	bl	800d080 <osMutexNew>
 8020142:	4603      	mov	r3, r0
 8020144:	4a01      	ldr	r2, [pc, #4]	@ (802014c <sys_init+0x14>)
 8020146:	6013      	str	r3, [r2, #0]
#endif
}
 8020148:	bf00      	nop
 802014a:	bd80      	pop	{r7, pc}
 802014c:	2002d5b8 	.word	0x2002d5b8

08020150 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020150:	b580      	push	{r7, lr}
 8020152:	b082      	sub	sp, #8
 8020154:	af00      	add	r7, sp, #0
 8020156:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8020158:	2000      	movs	r0, #0
 802015a:	f7ec ff91 	bl	800d080 <osMutexNew>
 802015e:	4602      	mov	r2, r0
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	681b      	ldr	r3, [r3, #0]
 8020168:	2b00      	cmp	r3, #0
 802016a:	d10a      	bne.n	8020182 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 802016c:	4b12      	ldr	r3, [pc, #72]	@ (80201b8 <sys_mutex_new+0x68>)
 802016e:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 8020172:	3301      	adds	r3, #1
 8020174:	b29a      	uxth	r2, r3
 8020176:	4b10      	ldr	r3, [pc, #64]	@ (80201b8 <sys_mutex_new+0x68>)
 8020178:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
#endif /* SYS_STATS */
    return ERR_MEM;
 802017c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020180:	e016      	b.n	80201b0 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 8020182:	4b0d      	ldr	r3, [pc, #52]	@ (80201b8 <sys_mutex_new+0x68>)
 8020184:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8020188:	3301      	adds	r3, #1
 802018a:	b29a      	uxth	r2, r3
 802018c:	4b0a      	ldr	r3, [pc, #40]	@ (80201b8 <sys_mutex_new+0x68>)
 802018e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8020192:	4b09      	ldr	r3, [pc, #36]	@ (80201b8 <sys_mutex_new+0x68>)
 8020194:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 8020198:	4b07      	ldr	r3, [pc, #28]	@ (80201b8 <sys_mutex_new+0x68>)
 802019a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 802019e:	429a      	cmp	r2, r3
 80201a0:	d205      	bcs.n	80201ae <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 80201a2:	4b05      	ldr	r3, [pc, #20]	@ (80201b8 <sys_mutex_new+0x68>)
 80201a4:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	@ 0xf2
 80201a8:	4b03      	ldr	r3, [pc, #12]	@ (80201b8 <sys_mutex_new+0x68>)
 80201aa:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80201ae:	2300      	movs	r3, #0
}
 80201b0:	4618      	mov	r0, r3
 80201b2:	3708      	adds	r7, #8
 80201b4:	46bd      	mov	sp, r7
 80201b6:	bd80      	pop	{r7, pc}
 80201b8:	2002d358 	.word	0x2002d358

080201bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80201bc:	b580      	push	{r7, lr}
 80201be:	b082      	sub	sp, #8
 80201c0:	af00      	add	r7, sp, #0
 80201c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80201cc:	4618      	mov	r0, r3
 80201ce:	f7ec fff1 	bl	800d1b4 <osMutexAcquire>
#endif
}
 80201d2:	bf00      	nop
 80201d4:	3708      	adds	r7, #8
 80201d6:	46bd      	mov	sp, r7
 80201d8:	bd80      	pop	{r7, pc}

080201da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80201da:	b580      	push	{r7, lr}
 80201dc:	b082      	sub	sp, #8
 80201de:	af00      	add	r7, sp, #0
 80201e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	4618      	mov	r0, r3
 80201e8:	f7ed f842 	bl	800d270 <osMutexRelease>
}
 80201ec:	bf00      	nop
 80201ee:	3708      	adds	r7, #8
 80201f0:	46bd      	mov	sp, r7
 80201f2:	bd80      	pop	{r7, pc}

080201f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80201f4:	b580      	push	{r7, lr}
 80201f6:	b08e      	sub	sp, #56	@ 0x38
 80201f8:	af00      	add	r7, sp, #0
 80201fa:	60f8      	str	r0, [r7, #12]
 80201fc:	60b9      	str	r1, [r7, #8]
 80201fe:	607a      	str	r2, [r7, #4]
 8020200:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8020202:	f107 0314 	add.w	r3, r7, #20
 8020206:	2224      	movs	r2, #36	@ 0x24
 8020208:	2100      	movs	r1, #0
 802020a:	4618      	mov	r0, r3
 802020c:	f001 fb18 	bl	8021840 <memset>
 8020210:	68fb      	ldr	r3, [r7, #12]
 8020212:	617b      	str	r3, [r7, #20]
 8020214:	683b      	ldr	r3, [r7, #0]
 8020216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8020218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802021a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 802021c:	f107 0314 	add.w	r3, r7, #20
 8020220:	461a      	mov	r2, r3
 8020222:	6879      	ldr	r1, [r7, #4]
 8020224:	68b8      	ldr	r0, [r7, #8]
 8020226:	f7ec fd39 	bl	800cc9c <osThreadNew>
 802022a:	4603      	mov	r3, r0
#endif
}
 802022c:	4618      	mov	r0, r3
 802022e:	3738      	adds	r7, #56	@ 0x38
 8020230:	46bd      	mov	sp, r7
 8020232:	bd80      	pop	{r7, pc}

08020234 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8020234:	b580      	push	{r7, lr}
 8020236:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8020238:	4b04      	ldr	r3, [pc, #16]	@ (802024c <sys_arch_protect+0x18>)
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020240:	4618      	mov	r0, r3
 8020242:	f7ec ffb7 	bl	800d1b4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8020246:	2301      	movs	r3, #1
}
 8020248:	4618      	mov	r0, r3
 802024a:	bd80      	pop	{r7, pc}
 802024c:	2002d5b8 	.word	0x2002d5b8

08020250 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8020250:	b580      	push	{r7, lr}
 8020252:	b082      	sub	sp, #8
 8020254:	af00      	add	r7, sp, #0
 8020256:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020258:	4b04      	ldr	r3, [pc, #16]	@ (802026c <sys_arch_unprotect+0x1c>)
 802025a:	681b      	ldr	r3, [r3, #0]
 802025c:	4618      	mov	r0, r3
 802025e:	f7ed f807 	bl	800d270 <osMutexRelease>
}
 8020262:	bf00      	nop
 8020264:	3708      	adds	r7, #8
 8020266:	46bd      	mov	sp, r7
 8020268:	bd80      	pop	{r7, pc}
 802026a:	bf00      	nop
 802026c:	2002d5b8 	.word	0x2002d5b8

08020270 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 8020270:	b580      	push	{r7, lr}
 8020272:	b0ca      	sub	sp, #296	@ 0x128
 8020274:	af00      	add	r7, sp, #0
	osStatus_t status;

	while (1)
	{
		//printf("adc waiting for messages\n");
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, 10);
 8020276:	4b3a      	ldr	r3, [pc, #232]	@ (8020360 <AdcTestTask+0xf0>)
 8020278:	6818      	ldr	r0, [r3, #0]
 802027a:	f107 0110 	add.w	r1, r7, #16
 802027e:	230a      	movs	r3, #10
 8020280:	2200      	movs	r2, #0
 8020282:	f7ed facf 	bl	800d824 <osMessageQueueGet>
 8020286:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 802028a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802028e:	2b00      	cmp	r3, #0
 8020290:	d153      	bne.n	802033a <AdcTestTask+0xca>
		{
			printf("adc received test ID: %lu\n", test_data.test_id);
 8020292:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020296:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 802029a:	689b      	ldr	r3, [r3, #8]
 802029c:	4619      	mov	r1, r3
 802029e:	4831      	ldr	r0, [pc, #196]	@ (8020364 <AdcTestTask+0xf4>)
 80202a0:	f001 f96e 	bl	8021580 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80202a4:	2300      	movs	r3, #0
 80202a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80202aa:	e00d      	b.n	80202c8 <AdcTestTask+0x58>
			{
				result = ADC_Test_Perform();
 80202ac:	f000 f860 	bl	8020370 <ADC_Test_Perform>
 80202b0:	4603      	mov	r3, r0
 80202b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 80202b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80202ba:	2bff      	cmp	r3, #255	@ 0xff
 80202bc:	d00e      	beq.n	80202dc <AdcTestTask+0x6c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 80202be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80202c2:	3301      	adds	r3, #1
 80202c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80202c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80202d0:	7b1b      	ldrb	r3, [r3, #12]
 80202d2:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80202d6:	429a      	cmp	r2, r3
 80202d8:	d3e8      	bcc.n	80202ac <AdcTestTask+0x3c>
 80202da:	e000      	b.n	80202de <AdcTestTask+0x6e>
					break;
 80202dc:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 80202de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80202e6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80202ea:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80202ee:	6812      	ldr	r2, [r2, #0]
 80202f0:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 80202f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80202fa:	889a      	ldrh	r2, [r3, #4]
 80202fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020300:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020304:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020306:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802030a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 802030e:	689a      	ldr	r2, [r3, #8]
 8020310:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020314:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020318:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 802031a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802031e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020322:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020326:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020328:	4b0f      	ldr	r3, [pc, #60]	@ (8020368 <AdcTestTask+0xf8>)
 802032a:	6818      	ldr	r0, [r3, #0]
 802032c:	4639      	mov	r1, r7
 802032e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020332:	2200      	movs	r2, #0
 8020334:	f7ed fa02 	bl	800d73c <osMessageQueuePut>
 8020338:	e79d      	b.n	8020276 <AdcTestTask+0x6>
		}
		else if (status == osErrorTimeout)
 802033a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802033e:	f113 0f02 	cmn.w	r3, #2
 8020342:	d103      	bne.n	802034c <AdcTestTask+0xdc>
		{
			osDelay(1);
 8020344:	2001      	movs	r0, #1
 8020346:	f7ec fd4f 	bl	800cde8 <osDelay>
 802034a:	e794      	b.n	8020276 <AdcTestTask+0x6>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 802034c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8020350:	4806      	ldr	r0, [pc, #24]	@ (802036c <AdcTestTask+0xfc>)
 8020352:	f001 f915 	bl	8021580 <iprintf>
			osDelay(1);
 8020356:	2001      	movs	r0, #1
 8020358:	f7ec fd46 	bl	800cde8 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, 10);
 802035c:	e78b      	b.n	8020276 <AdcTestTask+0x6>
 802035e:	bf00      	nop
 8020360:	20000334 	.word	0x20000334
 8020364:	08026ce0 	.word	0x08026ce0
 8020368:	20000324 	.word	0x20000324
 802036c:	08026cfc 	.word	0x08026cfc

08020370 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 8020370:	b580      	push	{r7, lr}
 8020372:	b082      	sub	sp, #8
 8020374:	af00      	add	r7, sp, #0
	printf("Performing adc test\n");
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 8020376:	2201      	movs	r2, #1
 8020378:	490f      	ldr	r1, [pc, #60]	@ (80203b8 <ADC_Test_Perform+0x48>)
 802037a:	4810      	ldr	r0, [pc, #64]	@ (80203bc <ADC_Test_Perform+0x4c>)
 802037c:	f7e2 f930 	bl	80025e0 <HAL_ADC_Start_DMA>
 8020380:	4603      	mov	r3, r0
 8020382:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 8020384:	79fb      	ldrb	r3, [r7, #7]
 8020386:	2b00      	cmp	r3, #0
 8020388:	d001      	beq.n	802038e <ADC_Test_Perform+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
#endif
		return TEST_FAILED;
 802038a:	23ff      	movs	r3, #255	@ 0xff
 802038c:	e00f      	b.n	80203ae <ADC_Test_Perform+0x3e>
	}

	while (!adc_ready);
 802038e:	bf00      	nop
 8020390:	4b0b      	ldr	r3, [pc, #44]	@ (80203c0 <ADC_Test_Perform+0x50>)
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	2b00      	cmp	r3, #0
 8020396:	d0fb      	beq.n	8020390 <ADC_Test_Perform+0x20>
	adc_ready=0;
 8020398:	4b09      	ldr	r3, [pc, #36]	@ (80203c0 <ADC_Test_Perform+0x50>)
 802039a:	2200      	movs	r2, #0
 802039c:	601a      	str	r2, [r3, #0]

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 802039e:	4b06      	ldr	r3, [pc, #24]	@ (80203b8 <ADC_Test_Perform+0x48>)
 80203a0:	881b      	ldrh	r3, [r3, #0]
 80203a2:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80203a6:	d301      	bcc.n	80203ac <ADC_Test_Perform+0x3c>
 80203a8:	2301      	movs	r3, #1
 80203aa:	e000      	b.n	80203ae <ADC_Test_Perform+0x3e>

	return TEST_FAILED;
 80203ac:	23ff      	movs	r3, #255	@ 0xff
}
 80203ae:	4618      	mov	r0, r3
 80203b0:	3708      	adds	r7, #8
 80203b2:	46bd      	mov	sp, r7
 80203b4:	bd80      	pop	{r7, pc}
 80203b6:	bf00      	nop
 80203b8:	2002d5bc 	.word	0x2002d5bc
 80203bc:	2000022c 	.word	0x2000022c
 80203c0:	2002d7bc 	.word	0x2002d7bc

080203c4 <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80203c4:	b580      	push	{r7, lr}
 80203c6:	b082      	sub	sp, #8
 80203c8:	af00      	add	r7, sp, #0
 80203ca:	6078      	str	r0, [r7, #4]
	adc_ready=1;
 80203cc:	4b07      	ldr	r3, [pc, #28]	@ (80203ec <HAL_ADC_ConvCpltCallback+0x28>)
 80203ce:	2201      	movs	r2, #1
 80203d0:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 80203d2:	4807      	ldr	r0, [pc, #28]	@ (80203f0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80203d4:	f7e2 fa02 	bl	80027dc <HAL_ADC_Stop_DMA>
 80203d8:	4603      	mov	r3, r0
 80203da:	2b00      	cmp	r3, #0
 80203dc:	d001      	beq.n	80203e2 <HAL_ADC_ConvCpltCallback+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
#endif
		Error_Handler();
 80203de:	f7e0 ffcf 	bl	8001380 <Error_Handler>
	}
}
 80203e2:	bf00      	nop
 80203e4:	3708      	adds	r7, #8
 80203e6:	46bd      	mov	sp, r7
 80203e8:	bd80      	pop	{r7, pc}
 80203ea:	bf00      	nop
 80203ec:	2002d7bc 	.word	0x2002d7bc
 80203f0:	2000022c 	.word	0x2000022c

080203f4 <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 80203f4:	b580      	push	{r7, lr}
 80203f6:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80203fa:	af00      	add	r7, sp, #0
	{
		//printf("IN dispatcher\n");
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, 10) == osOK)
 80203fc:	4b76      	ldr	r3, [pc, #472]	@ (80205d8 <TestDispatcher+0x1e4>)
 80203fe:	6818      	ldr	r0, [r3, #0]
 8020400:	4639      	mov	r1, r7
 8020402:	230a      	movs	r3, #10
 8020404:	2200      	movs	r2, #0
 8020406:	f7ed fa0d 	bl	800d824 <osMessageQueueGet>
 802040a:	4603      	mov	r3, r0
 802040c:	2b00      	cmp	r3, #0
 802040e:	f040 80de 	bne.w	80205ce <TestDispatcher+0x1da>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 8020412:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020416:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 802041a:	7b1b      	ldrb	r3, [r3, #12]
 802041c:	4619      	mov	r1, r3
 802041e:	486f      	ldr	r0, [pc, #444]	@ (80205dc <TestDispatcher+0x1e8>)
 8020420:	f001 f8ae 	bl	8021580 <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 8020424:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020428:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802042c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8020430:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8020434:	6812      	ldr	r2, [r2, #0]
 8020436:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 8020438:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 802043c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020440:	889a      	ldrh	r2, [r3, #4]
 8020442:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020446:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802044a:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 802044c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020450:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020454:	689a      	ldr	r2, [r3, #8]
 8020456:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 802045a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 802045e:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 8020460:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020464:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020468:	7b5a      	ldrb	r2, [r3, #13]
 802046a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 802046e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8020472:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 8020474:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020478:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 802047c:	7b9a      	ldrb	r2, [r3, #14]
 802047e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020482:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8020486:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 8020488:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 802048c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020490:	7b9b      	ldrb	r3, [r3, #14]
 8020492:	461a      	mov	r2, r3
 8020494:	463b      	mov	r3, r7
 8020496:	f103 010f 	add.w	r1, r3, #15
 802049a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 802049e:	330e      	adds	r3, #14
 80204a0:	4618      	mov	r0, r3
 80204a2:	f001 fa42 	bl	802192a <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 80204a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80204aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80204ae:	7b1b      	ldrb	r3, [r3, #12]
 80204b0:	f003 0302 	and.w	r3, r3, #2
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d013      	beq.n	80204e0 <TestDispatcher+0xec>
			{
				printf("dispatcher sent to UART\n");
 80204b8:	4849      	ldr	r0, [pc, #292]	@ (80205e0 <TestDispatcher+0x1ec>)
 80204ba:	f001 f8d1 	bl	8021660 <puts>
				if (osMessageQueuePut(uartQueueHandle, &test_data, 0, 10) != osOK)
 80204be:	4b49      	ldr	r3, [pc, #292]	@ (80205e4 <TestDispatcher+0x1f0>)
 80204c0:	6818      	ldr	r0, [r3, #0]
 80204c2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80204c6:	230a      	movs	r3, #10
 80204c8:	2200      	movs	r2, #0
 80204ca:	f7ed f937 	bl	800d73c <osMessageQueuePut>
 80204ce:	4603      	mov	r3, r0
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	d005      	beq.n	80204e0 <TestDispatcher+0xec>
				{
					printf("uart q full!\n");
 80204d4:	4844      	ldr	r0, [pc, #272]	@ (80205e8 <TestDispatcher+0x1f4>)
 80204d6:	f001 f8c3 	bl	8021660 <puts>
					osDelay(1);
 80204da:	2001      	movs	r0, #1
 80204dc:	f7ec fc84 	bl	800cde8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_I2C)
 80204e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80204e4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80204e8:	7b1b      	ldrb	r3, [r3, #12]
 80204ea:	f003 0308 	and.w	r3, r3, #8
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d013      	beq.n	802051a <TestDispatcher+0x126>
			{
				printf("dispatcher sent to I2C\n");
 80204f2:	483e      	ldr	r0, [pc, #248]	@ (80205ec <TestDispatcher+0x1f8>)
 80204f4:	f001 f8b4 	bl	8021660 <puts>
				if (osMessageQueuePut(i2cQueueHandle, &test_data, 0, 10) != osOK)
 80204f8:	4b3d      	ldr	r3, [pc, #244]	@ (80205f0 <TestDispatcher+0x1fc>)
 80204fa:	6818      	ldr	r0, [r3, #0]
 80204fc:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8020500:	230a      	movs	r3, #10
 8020502:	2200      	movs	r2, #0
 8020504:	f7ed f91a 	bl	800d73c <osMessageQueuePut>
 8020508:	4603      	mov	r3, r0
 802050a:	2b00      	cmp	r3, #0
 802050c:	d005      	beq.n	802051a <TestDispatcher+0x126>
				{
					printf("i2c q full!\n");
 802050e:	4839      	ldr	r0, [pc, #228]	@ (80205f4 <TestDispatcher+0x200>)
 8020510:	f001 f8a6 	bl	8021660 <puts>
					osDelay(1);
 8020514:	2001      	movs	r0, #1
 8020516:	f7ec fc67 	bl	800cde8 <osDelay>
    			}
			}
			if(in_msg.peripheral & TEST_SPI)
 802051a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 802051e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020522:	7b1b      	ldrb	r3, [r3, #12]
 8020524:	f003 0304 	and.w	r3, r3, #4
 8020528:	2b00      	cmp	r3, #0
 802052a:	d013      	beq.n	8020554 <TestDispatcher+0x160>
			{
				printf("dispatcher sent to SPI\n");
 802052c:	4832      	ldr	r0, [pc, #200]	@ (80205f8 <TestDispatcher+0x204>)
 802052e:	f001 f897 	bl	8021660 <puts>
				if (osMessageQueuePut(spiQueueHandle, &test_data, 0, 10) != osOK)
 8020532:	4b32      	ldr	r3, [pc, #200]	@ (80205fc <TestDispatcher+0x208>)
 8020534:	6818      	ldr	r0, [r3, #0]
 8020536:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 802053a:	230a      	movs	r3, #10
 802053c:	2200      	movs	r2, #0
 802053e:	f7ed f8fd 	bl	800d73c <osMessageQueuePut>
 8020542:	4603      	mov	r3, r0
 8020544:	2b00      	cmp	r3, #0
 8020546:	d005      	beq.n	8020554 <TestDispatcher+0x160>
				{
					printf("spi q full!\n");
 8020548:	482d      	ldr	r0, [pc, #180]	@ (8020600 <TestDispatcher+0x20c>)
 802054a:	f001 f889 	bl	8021660 <puts>
					osDelay(1);
 802054e:	2001      	movs	r0, #1
 8020550:	f7ec fc4a 	bl	800cde8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_ADC)
 8020554:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020558:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 802055c:	7b1b      	ldrb	r3, [r3, #12]
 802055e:	f003 0310 	and.w	r3, r3, #16
 8020562:	2b00      	cmp	r3, #0
 8020564:	d013      	beq.n	802058e <TestDispatcher+0x19a>
			{
				printf("dispatcher sent to ADC\n");
 8020566:	4827      	ldr	r0, [pc, #156]	@ (8020604 <TestDispatcher+0x210>)
 8020568:	f001 f87a 	bl	8021660 <puts>
				if (osMessageQueuePut(adcQueueHandle, &test_data, 0, 10) != osOK)
 802056c:	4b26      	ldr	r3, [pc, #152]	@ (8020608 <TestDispatcher+0x214>)
 802056e:	6818      	ldr	r0, [r3, #0]
 8020570:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8020574:	230a      	movs	r3, #10
 8020576:	2200      	movs	r2, #0
 8020578:	f7ed f8e0 	bl	800d73c <osMessageQueuePut>
 802057c:	4603      	mov	r3, r0
 802057e:	2b00      	cmp	r3, #0
 8020580:	d005      	beq.n	802058e <TestDispatcher+0x19a>
				{
					printf("adc q full!\n");
 8020582:	4822      	ldr	r0, [pc, #136]	@ (802060c <TestDispatcher+0x218>)
 8020584:	f001 f86c 	bl	8021660 <puts>
					osDelay(1);
 8020588:	2001      	movs	r0, #1
 802058a:	f7ec fc2d 	bl	800cde8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_TIM)
 802058e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8020592:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8020596:	7b1b      	ldrb	r3, [r3, #12]
 8020598:	f003 0301 	and.w	r3, r3, #1
 802059c:	2b00      	cmp	r3, #0
 802059e:	f43f af2d 	beq.w	80203fc <TestDispatcher+0x8>
			{
				printf("dispatcher sent to TIM\n");
 80205a2:	481b      	ldr	r0, [pc, #108]	@ (8020610 <TestDispatcher+0x21c>)
 80205a4:	f001 f85c 	bl	8021660 <puts>
				if (osMessageQueuePut(timQueueHandle, &test_data, 0, 10) != osOK)
 80205a8:	4b1a      	ldr	r3, [pc, #104]	@ (8020614 <TestDispatcher+0x220>)
 80205aa:	6818      	ldr	r0, [r3, #0]
 80205ac:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80205b0:	230a      	movs	r3, #10
 80205b2:	2200      	movs	r2, #0
 80205b4:	f7ed f8c2 	bl	800d73c <osMessageQueuePut>
 80205b8:	4603      	mov	r3, r0
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	f43f af1e 	beq.w	80203fc <TestDispatcher+0x8>
				{
					printf("tim q full!\n");
 80205c0:	4815      	ldr	r0, [pc, #84]	@ (8020618 <TestDispatcher+0x224>)
 80205c2:	f001 f84d 	bl	8021660 <puts>
					osDelay(1);
 80205c6:	2001      	movs	r0, #1
 80205c8:	f7ec fc0e 	bl	800cde8 <osDelay>
 80205cc:	e716      	b.n	80203fc <TestDispatcher+0x8>
				}
			}
		}
		else osDelay(0);
 80205ce:	2000      	movs	r0, #0
 80205d0:	f7ec fc0a 	bl	800cde8 <osDelay>
	{
 80205d4:	e712      	b.n	80203fc <TestDispatcher+0x8>
 80205d6:	bf00      	nop
 80205d8:	20000320 	.word	0x20000320
 80205dc:	08026d14 	.word	0x08026d14
 80205e0:	08026d38 	.word	0x08026d38
 80205e4:	20000328 	.word	0x20000328
 80205e8:	08026d50 	.word	0x08026d50
 80205ec:	08026d60 	.word	0x08026d60
 80205f0:	2000032c 	.word	0x2000032c
 80205f4:	08026d78 	.word	0x08026d78
 80205f8:	08026d84 	.word	0x08026d84
 80205fc:	20000330 	.word	0x20000330
 8020600:	08026d9c 	.word	0x08026d9c
 8020604:	08026da8 	.word	0x08026da8
 8020608:	20000334 	.word	0x20000334
 802060c:	08026dc0 	.word	0x08026dc0
 8020610:	08026dcc 	.word	0x08026dcc
 8020614:	20000338 	.word	0x20000338
 8020618:	08026de4 	.word	0x08026de4

0802061c <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 802061c:	b580      	push	{r7, lr}
 802061e:	b086      	sub	sp, #24
 8020620:	af00      	add	r7, sp, #0
 8020622:	60f8      	str	r0, [r7, #12]
 8020624:	607a      	str	r2, [r7, #4]
 8020626:	461a      	mov	r2, r3
 8020628:	460b      	mov	r3, r1
 802062a:	72fb      	strb	r3, [r7, #11]
 802062c:	4613      	mov	r3, r2
 802062e:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 8020630:	7afb      	ldrb	r3, [r7, #11]
 8020632:	461a      	mov	r2, r3
 8020634:	68f9      	ldr	r1, [r7, #12]
 8020636:	480b      	ldr	r0, [pc, #44]	@ (8020664 <Match_CRC+0x48>)
 8020638:	f7e2 fd5a 	bl	80030f0 <HAL_CRC_Calculate>
 802063c:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 802063e:	7abb      	ldrb	r3, [r7, #10]
 8020640:	461a      	mov	r2, r3
 8020642:	6879      	ldr	r1, [r7, #4]
 8020644:	4807      	ldr	r0, [pc, #28]	@ (8020664 <Match_CRC+0x48>)
 8020646:	f7e2 fd53 	bl	80030f0 <HAL_CRC_Calculate>
 802064a:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 802064c:	697a      	ldr	r2, [r7, #20]
 802064e:	693b      	ldr	r3, [r7, #16]
 8020650:	429a      	cmp	r2, r3
 8020652:	d101      	bne.n	8020658 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 8020654:	2301      	movs	r3, #1
 8020656:	e000      	b.n	802065a <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 8020658:	2300      	movs	r3, #0
}
 802065a:	4618      	mov	r0, r3
 802065c:	3718      	adds	r7, #24
 802065e:	46bd      	mov	sp, r7
 8020660:	bd80      	pop	{r7, pc}
 8020662:	bf00      	nop
 8020664:	200002d4 	.word	0x200002d4

08020668 <UDP_Server_Init>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Server_Init(void)
{
 8020668:	b580      	push	{r7, lr}
 802066a:	af00      	add	r7, sp, #0
    conn_recv = netconn_new(NETCONN_UDP);
 802066c:	2200      	movs	r2, #0
 802066e:	2100      	movs	r1, #0
 8020670:	2020      	movs	r0, #32
 8020672:	f7f0 feff 	bl	8011474 <netconn_new_with_proto_and_callback>
 8020676:	4603      	mov	r3, r0
 8020678:	4a1c      	ldr	r2, [pc, #112]	@ (80206ec <UDP_Server_Init+0x84>)
 802067a:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 802067c:	4b1b      	ldr	r3, [pc, #108]	@ (80206ec <UDP_Server_Init+0x84>)
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	2b00      	cmp	r3, #0
 8020682:	d104      	bne.n	802068e <UDP_Server_Init+0x26>
	{
		printf("error initializing UDP receive netconn\n");
 8020684:	481a      	ldr	r0, [pc, #104]	@ (80206f0 <UDP_Server_Init+0x88>)
 8020686:	f000 ffeb 	bl	8021660 <puts>
		while(1);
 802068a:	bf00      	nop
 802068c:	e7fd      	b.n	802068a <UDP_Server_Init+0x22>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 802068e:	4b17      	ldr	r3, [pc, #92]	@ (80206ec <UDP_Server_Init+0x84>)
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	f24d 4231 	movw	r2, #54321	@ 0xd431
 8020696:	4917      	ldr	r1, [pc, #92]	@ (80206f4 <UDP_Server_Init+0x8c>)
 8020698:	4618      	mov	r0, r3
 802069a:	f7f0 ffa5 	bl	80115e8 <netconn_bind>
 802069e:	4603      	mov	r3, r0
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	d00c      	beq.n	80206be <UDP_Server_Init+0x56>
	{
		printf("error binding UDP port\n");
 80206a4:	4814      	ldr	r0, [pc, #80]	@ (80206f8 <UDP_Server_Init+0x90>)
 80206a6:	f000 ffdb 	bl	8021660 <puts>
		netconn_delete(conn_recv);
 80206aa:	4b10      	ldr	r3, [pc, #64]	@ (80206ec <UDP_Server_Init+0x84>)
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	4618      	mov	r0, r3
 80206b0:	f7f0 ff7e 	bl	80115b0 <netconn_delete>
		conn_recv = NULL;
 80206b4:	4b0d      	ldr	r3, [pc, #52]	@ (80206ec <UDP_Server_Init+0x84>)
 80206b6:	2200      	movs	r2, #0
 80206b8:	601a      	str	r2, [r3, #0]
		while(1);
 80206ba:	bf00      	nop
 80206bc:	e7fd      	b.n	80206ba <UDP_Server_Init+0x52>
	}

	//netconn_set_recvtimeout(conn_recv, 10);

	conn_send = netconn_new(NETCONN_UDP);
 80206be:	2200      	movs	r2, #0
 80206c0:	2100      	movs	r1, #0
 80206c2:	2020      	movs	r0, #32
 80206c4:	f7f0 fed6 	bl	8011474 <netconn_new_with_proto_and_callback>
 80206c8:	4603      	mov	r3, r0
 80206ca:	4a0c      	ldr	r2, [pc, #48]	@ (80206fc <UDP_Server_Init+0x94>)
 80206cc:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 80206ce:	4b0b      	ldr	r3, [pc, #44]	@ (80206fc <UDP_Server_Init+0x94>)
 80206d0:	681b      	ldr	r3, [r3, #0]
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d104      	bne.n	80206e0 <UDP_Server_Init+0x78>
	{
		printf("error initializing UDP send netconn\n");
 80206d6:	480a      	ldr	r0, [pc, #40]	@ (8020700 <UDP_Server_Init+0x98>)
 80206d8:	f000 ffc2 	bl	8021660 <puts>
		while(1);
 80206dc:	bf00      	nop
 80206de:	e7fd      	b.n	80206dc <UDP_Server_Init+0x74>
	}

	printf("UDP init success\n");
 80206e0:	4808      	ldr	r0, [pc, #32]	@ (8020704 <UDP_Server_Init+0x9c>)
 80206e2:	f000 ffbd 	bl	8021660 <puts>
}
 80206e6:	bf00      	nop
 80206e8:	bd80      	pop	{r7, pc}
 80206ea:	bf00      	nop
 80206ec:	2002d7c0 	.word	0x2002d7c0
 80206f0:	08026df0 	.word	0x08026df0
 80206f4:	08027410 	.word	0x08027410
 80206f8:	08026e18 	.word	0x08026e18
 80206fc:	2002d7c4 	.word	0x2002d7c4
 8020700:	08026e30 	.word	0x08026e30
 8020704:	08026e54 	.word	0x08026e54

08020708 <UDP_Listen>:

void UDP_Listen(void)
{
 8020708:	b580      	push	{r7, lr}
 802070a:	b0ca      	sub	sp, #296	@ 0x128
 802070c:	af00      	add	r7, sp, #0
	printf("Listening started\n");
 802070e:	485f      	ldr	r0, [pc, #380]	@ (802088c <UDP_Listen+0x184>)
 8020710:	f000 ffa6 	bl	8021660 <puts>
	while (1)
	{
	    do
	    {

	        err = netconn_recv(conn_recv, &buf);
 8020714:	4b5e      	ldr	r3, [pc, #376]	@ (8020890 <UDP_Listen+0x188>)
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 802071c:	4611      	mov	r1, r2
 802071e:	4618      	mov	r0, r3
 8020720:	f7f1 f978 	bl	8011a14 <netconn_recv>
 8020724:	4603      	mov	r3, r0
 8020726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	        if (err == ERR_OK)
 802072a:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 802072e:	2b00      	cmp	r3, #0
 8020730:	f040 80a3 	bne.w	802087a <UDP_Listen+0x172>
	        {
	        	printf("listener got a message\n");
 8020734:	4857      	ldr	r0, [pc, #348]	@ (8020894 <UDP_Listen+0x18c>)
 8020736:	f000 ff93 	bl	8021660 <puts>
				// Load in_msg
				ip_addr_copy(in_msg.addr, *netbuf_fromaddr(buf));
 802073a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 802073e:	689a      	ldr	r2, [r3, #8]
 8020740:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020744:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020748:	601a      	str	r2, [r3, #0]
				in_msg.port = netbuf_fromport(buf);
 802074a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 802074e:	899a      	ldrh	r2, [r3, #12]
 8020750:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020754:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020758:	809a      	strh	r2, [r3, #4]

				netbuf_data(buf, &raw_data, &len);
 802075a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 802075e:	f507 7289 	add.w	r2, r7, #274	@ 0x112
 8020762:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8020766:	4618      	mov	r0, r3
 8020768:	f7f2 fe94 	bl	8013494 <netbuf_data>

				n_read = 0;
 802076c:	2300      	movs	r3, #0
 802076e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
				memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 8020772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	461a      	mov	r2, r3
 802077a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802077e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020782:	609a      	str	r2, [r3, #8]
				n_read += sizeof(in_msg.test_id);
 8020784:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020788:	3304      	adds	r3, #4
 802078a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

				memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 802078e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8020792:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020796:	1c59      	adds	r1, r3, #1
 8020798:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 802079c:	4413      	add	r3, r2
 802079e:	781a      	ldrb	r2, [r3, #0]
 80207a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80207a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80207a8:	731a      	strb	r2, [r3, #12]
				memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 80207aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80207ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80207b2:	1c59      	adds	r1, r3, #1
 80207b4:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80207b8:	4413      	add	r3, r2
 80207ba:	781a      	ldrb	r2, [r3, #0]
 80207bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80207c0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80207c4:	735a      	strb	r2, [r3, #13]
				memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 80207c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80207ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80207ce:	1c59      	adds	r1, r3, #1
 80207d0:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80207d4:	4413      	add	r3, r2
 80207d6:	781a      	ldrb	r2, [r3, #0]
 80207d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80207dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80207e0:	739a      	strb	r2, [r3, #14]
				memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 80207e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80207e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80207ea:	18d1      	adds	r1, r2, r3
 80207ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80207f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80207f4:	7b9b      	ldrb	r3, [r3, #14]
 80207f6:	461a      	mov	r2, r3
 80207f8:	463b      	mov	r3, r7
 80207fa:	330f      	adds	r3, #15
 80207fc:	4618      	mov	r0, r3
 80207fe:	f001 f894 	bl	802192a <memcpy>

				if (in_msg.p_len < sizeof(in_msg.payload))
					in_msg.payload[in_msg.p_len] = '\0';
 8020802:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020806:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802080a:	7b9b      	ldrb	r3, [r3, #14]
 802080c:	461a      	mov	r2, r3
 802080e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020812:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020816:	4413      	add	r3, r2
 8020818:	2200      	movs	r2, #0
 802081a:	73da      	strb	r2, [r3, #15]
				printf("Peripheral is: %d\n", in_msg.peripheral);
 802081c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020820:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020824:	7b1b      	ldrb	r3, [r3, #12]
 8020826:	4619      	mov	r1, r3
 8020828:	481b      	ldr	r0, [pc, #108]	@ (8020898 <UDP_Listen+0x190>)
 802082a:	f000 fea9 	bl	8021580 <iprintf>
				printf("n iterations is: %d\n", in_msg.n_iter);
 802082e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020832:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020836:	7b5b      	ldrb	r3, [r3, #13]
 8020838:	4619      	mov	r1, r3
 802083a:	4818      	ldr	r0, [pc, #96]	@ (802089c <UDP_Listen+0x194>)
 802083c:	f000 fea0 	bl	8021580 <iprintf>
				printf("Message is: %s\n", in_msg.payload);
 8020840:	463b      	mov	r3, r7
 8020842:	330f      	adds	r3, #15
 8020844:	4619      	mov	r1, r3
 8020846:	4816      	ldr	r0, [pc, #88]	@ (80208a0 <UDP_Listen+0x198>)
 8020848:	f000 fe9a 	bl	8021580 <iprintf>

				// send in_msg to InMsgQueue
				osStatus_t status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, 0);
 802084c:	4b15      	ldr	r3, [pc, #84]	@ (80208a4 <UDP_Listen+0x19c>)
 802084e:	6818      	ldr	r0, [r3, #0]
 8020850:	4639      	mov	r1, r7
 8020852:	2300      	movs	r3, #0
 8020854:	2200      	movs	r2, #0
 8020856:	f7ec ff71 	bl	800d73c <osMessageQueuePut>
 802085a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
				if (status != osOK)
 802085e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8020862:	2b00      	cmp	r3, #0
 8020864:	d004      	beq.n	8020870 <UDP_Listen+0x168>
				{
					printf("inMsg put error: %d\n", status);
 8020866:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 802086a:	480f      	ldr	r0, [pc, #60]	@ (80208a8 <UDP_Listen+0x1a0>)
 802086c:	f000 fe88 	bl	8021580 <iprintf>
				}

				netbuf_delete(buf);
 8020870:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8020874:	4618      	mov	r0, r3
 8020876:	f7f2 fda3 	bl	80133c0 <netbuf_delete>
	        }
	    }
	    while (err == ERR_OK);
 802087a:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 802087e:	2b00      	cmp	r3, #0
 8020880:	f43f af48 	beq.w	8020714 <UDP_Listen+0xc>

	    osDelay(1);
 8020884:	2001      	movs	r0, #1
 8020886:	f7ec faaf 	bl	800cde8 <osDelay>
	while (1)
 802088a:	e743      	b.n	8020714 <UDP_Listen+0xc>
 802088c:	08026e68 	.word	0x08026e68
 8020890:	2002d7c0 	.word	0x2002d7c0
 8020894:	08026e7c 	.word	0x08026e7c
 8020898:	08026e94 	.word	0x08026e94
 802089c:	08026ea8 	.word	0x08026ea8
 80208a0:	08026ec0 	.word	0x08026ec0
 80208a4:	20000320 	.word	0x20000320
 80208a8:	08026ed0 	.word	0x08026ed0

080208ac <UDP_Response>:
	}
	*/
}

void UDP_Response(void)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	b086      	sub	sp, #24
 80208b0:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;

	while(1)
	{
		//printf("IN responder\n");
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, 0) == osOK)
 80208b2:	4b23      	ldr	r3, [pc, #140]	@ (8020940 <UDP_Response+0x94>)
 80208b4:	6818      	ldr	r0, [r3, #0]
 80208b6:	4639      	mov	r1, r7
 80208b8:	2300      	movs	r3, #0
 80208ba:	2200      	movs	r2, #0
 80208bc:	f7ec ffb2 	bl	800d824 <osMessageQueueGet>
 80208c0:	4603      	mov	r3, r0
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d138      	bne.n	8020938 <UDP_Response+0x8c>
		{
			printf("responder got a response to send\n");
 80208c6:	481f      	ldr	r0, [pc, #124]	@ (8020944 <UDP_Response+0x98>)
 80208c8:	f000 feca 	bl	8021660 <puts>
			//Load response buffer
			buf = netbuf_new();
 80208cc:	f7f2 fd64 	bl	8013398 <netbuf_new>
 80208d0:	6178      	str	r0, [r7, #20]
			if (!buf)
 80208d2:	697b      	ldr	r3, [r7, #20]
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	d103      	bne.n	80208e0 <UDP_Response+0x34>
			{
				printf("responder netbuf_new() failed");
 80208d8:	481b      	ldr	r0, [pc, #108]	@ (8020948 <UDP_Response+0x9c>)
 80208da:	f000 fe51 	bl	8021580 <iprintf>
				continue;
 80208de:	e02e      	b.n	802093e <UDP_Response+0x92>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 80208e0:	2105      	movs	r1, #5
 80208e2:	6978      	ldr	r0, [r7, #20]
 80208e4:	f7f2 fd8c 	bl	8013400 <netbuf_alloc>
 80208e8:	6138      	str	r0, [r7, #16]
			if (!data)
 80208ea:	693b      	ldr	r3, [r7, #16]
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	d106      	bne.n	80208fe <UDP_Response+0x52>
			{
				printf("responder netbuf_alloc() failed");
 80208f0:	4816      	ldr	r0, [pc, #88]	@ (802094c <UDP_Response+0xa0>)
 80208f2:	f000 fe45 	bl	8021580 <iprintf>
			    netbuf_delete(buf);
 80208f6:	6978      	ldr	r0, [r7, #20]
 80208f8:	f7f2 fd62 	bl	80133c0 <netbuf_delete>
			    continue;
 80208fc:	e01f      	b.n	802093e <UDP_Response+0x92>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 80208fe:	68ba      	ldr	r2, [r7, #8]
 8020900:	693b      	ldr	r3, [r7, #16]
 8020902:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 8020904:	693b      	ldr	r3, [r7, #16]
 8020906:	3304      	adds	r3, #4
 8020908:	7b3a      	ldrb	r2, [r7, #12]
 802090a:	701a      	strb	r2, [r3, #0]

			// Send response
			netconn_connect(conn_send, &out_msg.addr, out_msg.port);
 802090c:	4b10      	ldr	r3, [pc, #64]	@ (8020950 <UDP_Response+0xa4>)
 802090e:	681b      	ldr	r3, [r3, #0]
 8020910:	88ba      	ldrh	r2, [r7, #4]
 8020912:	4639      	mov	r1, r7
 8020914:	4618      	mov	r0, r3
 8020916:	f7f0 fe9f 	bl	8011658 <netconn_connect>
			netconn_send(conn_send, buf);
 802091a:	4b0d      	ldr	r3, [pc, #52]	@ (8020950 <UDP_Response+0xa4>)
 802091c:	681b      	ldr	r3, [r3, #0]
 802091e:	6979      	ldr	r1, [r7, #20]
 8020920:	4618      	mov	r0, r3
 8020922:	f7f1 f8f1 	bl	8011b08 <netconn_send>
			netconn_disconnect(conn_send);
 8020926:	4b0a      	ldr	r3, [pc, #40]	@ (8020950 <UDP_Response+0xa4>)
 8020928:	681b      	ldr	r3, [r3, #0]
 802092a:	4618      	mov	r0, r3
 802092c:	f7f0 fecc 	bl	80116c8 <netconn_disconnect>
			if (netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port) != ERR_OK)
			{
				printf("Error sending response\n");
			}
			*/
			netbuf_delete(buf);
 8020930:	6978      	ldr	r0, [r7, #20]
 8020932:	f7f2 fd45 	bl	80133c0 <netbuf_delete>
 8020936:	e7bc      	b.n	80208b2 <UDP_Response+0x6>
		}
		else
		{
			osDelay(1);
 8020938:	2001      	movs	r0, #1
 802093a:	f7ec fa55 	bl	800cde8 <osDelay>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, 0) == osOK)
 802093e:	e7b8      	b.n	80208b2 <UDP_Response+0x6>
 8020940:	20000324 	.word	0x20000324
 8020944:	08026ee8 	.word	0x08026ee8
 8020948:	08026f0c 	.word	0x08026f0c
 802094c:	08026f2c 	.word	0x08026f2c
 8020950:	2002d7c4 	.word	0x2002d7c4

08020954 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 8020954:	b580      	push	{r7, lr}
 8020956:	b0ca      	sub	sp, #296	@ 0x128
 8020958:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("i2c waiting for messages\n");
 802095a:	4838      	ldr	r0, [pc, #224]	@ (8020a3c <I2cTestTask+0xe8>)
 802095c:	f000 fe80 	bl	8021660 <puts>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 8020960:	4b37      	ldr	r3, [pc, #220]	@ (8020a40 <I2cTestTask+0xec>)
 8020962:	6818      	ldr	r0, [r3, #0]
 8020964:	f107 0114 	add.w	r1, r7, #20
 8020968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802096c:	2200      	movs	r2, #0
 802096e:	f7ec ff59 	bl	800d824 <osMessageQueueGet>
 8020972:	4603      	mov	r3, r0
 8020974:	2b00      	cmp	r3, #0
 8020976:	d15d      	bne.n	8020a34 <I2cTestTask+0xe0>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 8020978:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802097c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020980:	689b      	ldr	r3, [r3, #8]
 8020982:	4619      	mov	r1, r3
 8020984:	482f      	ldr	r0, [pc, #188]	@ (8020a44 <I2cTestTask+0xf0>)
 8020986:	f000 fdfb 	bl	8021580 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 802098a:	2300      	movs	r3, #0
 802098c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020990:	e017      	b.n	80209c2 <I2cTestTask+0x6e>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 8020992:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020996:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802099a:	7b5a      	ldrb	r2, [r3, #13]
 802099c:	f107 0314 	add.w	r3, r7, #20
 80209a0:	330e      	adds	r3, #14
 80209a2:	4611      	mov	r1, r2
 80209a4:	4618      	mov	r0, r3
 80209a6:	f000 f851 	bl	8020a4c <I2C_Test_Perform>
 80209aa:	4603      	mov	r3, r0
 80209ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 80209b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80209b4:	2bff      	cmp	r3, #255	@ 0xff
 80209b6:	d00e      	beq.n	80209d6 <I2cTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 80209b8:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80209bc:	3301      	adds	r3, #1
 80209be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80209c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80209c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80209ca:	7b1b      	ldrb	r3, [r3, #12]
 80209cc:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80209d0:	429a      	cmp	r2, r3
 80209d2:	d3de      	bcc.n	8020992 <I2cTestTask+0x3e>
 80209d4:	e000      	b.n	80209d8 <I2cTestTask+0x84>
					break;
 80209d6:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 80209d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80209dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80209e0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80209e4:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80209e8:	6812      	ldr	r2, [r2, #0]
 80209ea:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 80209ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80209f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80209f4:	889a      	ldrh	r2, [r3, #4]
 80209f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80209fa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80209fe:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020a00:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020a04:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020a08:	689a      	ldr	r2, [r3, #8]
 8020a0a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020a0e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020a12:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020a14:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020a18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020a1c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020a20:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020a22:	4b09      	ldr	r3, [pc, #36]	@ (8020a48 <I2cTestTask+0xf4>)
 8020a24:	6818      	ldr	r0, [r3, #0]
 8020a26:	1d39      	adds	r1, r7, #4
 8020a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	f7ec fe85 	bl	800d73c <osMessageQueuePut>
 8020a32:	e792      	b.n	802095a <I2cTestTask+0x6>
		}
		else osDelay(1);
 8020a34:	2001      	movs	r0, #1
 8020a36:	f7ec f9d7 	bl	800cde8 <osDelay>
		printf("i2c waiting for messages\n");
 8020a3a:	e78e      	b.n	802095a <I2cTestTask+0x6>
 8020a3c:	08026f4c 	.word	0x08026f4c
 8020a40:	2000032c 	.word	0x2000032c
 8020a44:	08026f68 	.word	0x08026f68
 8020a48:	20000324 	.word	0x20000324

08020a4c <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8020a4c:	b590      	push	{r4, r7, lr}
 8020a4e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8020a52:	af00      	add	r7, sp, #0
 8020a54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020a58:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020a5c:	6018      	str	r0, [r3, #0]
 8020a5e:	460a      	mov	r2, r1
 8020a60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020a64:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020a68:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 8020a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8020ba0 <I2C_Test_Perform+0x154>)
 8020a6c:	2200      	movs	r2, #0
 8020a6e:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 8020a70:	4b4c      	ldr	r3, [pc, #304]	@ (8020ba4 <I2C_Test_Perform+0x158>)
 8020a72:	2200      	movs	r2, #0
 8020a74:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 8020a76:	4b4c      	ldr	r3, [pc, #304]	@ (8020ba8 <I2C_Test_Perform+0x15c>)
 8020a78:	2200      	movs	r2, #0
 8020a7a:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 8020a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8020bac <I2C_Test_Perform+0x160>)
 8020a7e:	2200      	movs	r2, #0
 8020a80:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 8020a82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020a86:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020a8a:	781b      	ldrb	r3, [r3, #0]
 8020a8c:	b29a      	uxth	r2, r3
 8020a8e:	f107 0308 	add.w	r3, r7, #8
 8020a92:	4619      	mov	r1, r3
 8020a94:	4846      	ldr	r0, [pc, #280]	@ (8020bb0 <I2C_Test_Perform+0x164>)
 8020a96:	f7e5 f8a3 	bl	8005be0 <HAL_I2C_Slave_Receive_DMA>
 8020a9a:	4603      	mov	r3, r0
 8020a9c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020aa0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d001      	beq.n	8020aac <I2C_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 8020aa8:	23ff      	movs	r3, #255	@ 0xff
 8020aaa:	e074      	b.n	8020b96 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 8020aac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020ab0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020ab4:	781b      	ldrb	r3, [r3, #0]
 8020ab6:	b29b      	uxth	r3, r3
 8020ab8:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8020abc:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 8020ac0:	6812      	ldr	r2, [r2, #0]
 8020ac2:	2114      	movs	r1, #20
 8020ac4:	483b      	ldr	r0, [pc, #236]	@ (8020bb4 <I2C_Test_Perform+0x168>)
 8020ac6:	f7e4 fd9b 	bl	8005600 <HAL_I2C_Master_Transmit_DMA>
 8020aca:	4603      	mov	r3, r0
 8020acc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020ad0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	d001      	beq.n	8020adc <I2C_Test_Perform+0x90>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 8020ad8:	23ff      	movs	r3, #255	@ 0xff
 8020ada:	e05c      	b.n	8020b96 <I2C_Test_Perform+0x14a>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 8020adc:	bf00      	nop
 8020ade:	4b33      	ldr	r3, [pc, #204]	@ (8020bac <I2C_Test_Perform+0x160>)
 8020ae0:	781b      	ldrb	r3, [r3, #0]
 8020ae2:	b2db      	uxtb	r3, r3
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d0fa      	beq.n	8020ade <I2C_Test_Perform+0x92>
 8020ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8020ba0 <I2C_Test_Perform+0x154>)
 8020aea:	781b      	ldrb	r3, [r3, #0]
 8020aec:	b2db      	uxtb	r3, r3
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	d0f5      	beq.n	8020ade <I2C_Test_Perform+0x92>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 8020af2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020af6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020afa:	781b      	ldrb	r3, [r3, #0]
 8020afc:	b29b      	uxth	r3, r3
 8020afe:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8020b02:	2114      	movs	r1, #20
 8020b04:	482b      	ldr	r0, [pc, #172]	@ (8020bb4 <I2C_Test_Perform+0x168>)
 8020b06:	f7e4 fe8f 	bl	8005828 <HAL_I2C_Master_Receive_DMA>
 8020b0a:	4603      	mov	r3, r0
 8020b0c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020b10:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d001      	beq.n	8020b1c <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 8020b18:	23ff      	movs	r3, #255	@ 0xff
 8020b1a:	e03c      	b.n	8020b96 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 8020b1c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020b20:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020b24:	781b      	ldrb	r3, [r3, #0]
 8020b26:	b29a      	uxth	r2, r3
 8020b28:	f107 0308 	add.w	r3, r7, #8
 8020b2c:	4619      	mov	r1, r3
 8020b2e:	4820      	ldr	r0, [pc, #128]	@ (8020bb0 <I2C_Test_Perform+0x164>)
 8020b30:	f7e4 ff6a 	bl	8005a08 <HAL_I2C_Slave_Transmit_DMA>
 8020b34:	4603      	mov	r3, r0
 8020b36:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020b3a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d001      	beq.n	8020b46 <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 8020b42:	23ff      	movs	r3, #255	@ 0xff
 8020b44:	e027      	b.n	8020b96 <I2C_Test_Perform+0x14a>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 8020b46:	bf00      	nop
 8020b48:	4b16      	ldr	r3, [pc, #88]	@ (8020ba4 <I2C_Test_Perform+0x158>)
 8020b4a:	781b      	ldrb	r3, [r3, #0]
 8020b4c:	b2db      	uxtb	r3, r3
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	d0fa      	beq.n	8020b48 <I2C_Test_Perform+0xfc>
 8020b52:	4b15      	ldr	r3, [pc, #84]	@ (8020ba8 <I2C_Test_Perform+0x15c>)
 8020b54:	781b      	ldrb	r3, [r3, #0]
 8020b56:	b2db      	uxtb	r3, r3
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d0f5      	beq.n	8020b48 <I2C_Test_Perform+0xfc>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 8020b5c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020b60:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020b64:	781c      	ldrb	r4, [r3, #0]
 8020b66:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8020b6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020b6e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020b72:	7819      	ldrb	r1, [r3, #0]
 8020b74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020b78:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020b7c:	4623      	mov	r3, r4
 8020b7e:	6800      	ldr	r0, [r0, #0]
 8020b80:	f7ff fd4c 	bl	802061c <Match_CRC>
 8020b84:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8020b88:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8020b8c:	2b01      	cmp	r3, #1
 8020b8e:	d101      	bne.n	8020b94 <I2C_Test_Perform+0x148>
 8020b90:	2301      	movs	r3, #1
 8020b92:	e000      	b.n	8020b96 <I2C_Test_Perform+0x14a>

	return TEST_FAILED;
 8020b94:	23ff      	movs	r3, #255	@ 0xff
}
 8020b96:	4618      	mov	r0, r3
 8020b98:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020b9c:	46bd      	mov	sp, r7
 8020b9e:	bd90      	pop	{r4, r7, pc}
 8020ba0:	2002d7c8 	.word	0x2002d7c8
 8020ba4:	2002d7c9 	.word	0x2002d7c9
 8020ba8:	2002d7ca 	.word	0x2002d7ca
 8020bac:	2002d7cb 	.word	0x2002d7cb
 8020bb0:	20000394 	.word	0x20000394
 8020bb4:	20000340 	.word	0x20000340

08020bb8 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020bb8:	b480      	push	{r7}
 8020bba:	b083      	sub	sp, #12
 8020bbc:	af00      	add	r7, sp, #0
 8020bbe:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	4a06      	ldr	r2, [pc, #24]	@ (8020bdc <HAL_I2C_MasterTxCpltCallback+0x24>)
 8020bc4:	4293      	cmp	r3, r2
 8020bc6:	d102      	bne.n	8020bce <HAL_I2C_MasterTxCpltCallback+0x16>
 8020bc8:	4b05      	ldr	r3, [pc, #20]	@ (8020be0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8020bca:	2201      	movs	r2, #1
 8020bcc:	701a      	strb	r2, [r3, #0]
}
 8020bce:	bf00      	nop
 8020bd0:	370c      	adds	r7, #12
 8020bd2:	46bd      	mov	sp, r7
 8020bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd8:	4770      	bx	lr
 8020bda:	bf00      	nop
 8020bdc:	20000340 	.word	0x20000340
 8020be0:	2002d7c8 	.word	0x2002d7c8

08020be4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020be4:	b480      	push	{r7}
 8020be6:	b083      	sub	sp, #12
 8020be8:	af00      	add	r7, sp, #0
 8020bea:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	4a06      	ldr	r2, [pc, #24]	@ (8020c08 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8020bf0:	4293      	cmp	r3, r2
 8020bf2:	d102      	bne.n	8020bfa <HAL_I2C_MasterRxCpltCallback+0x16>
 8020bf4:	4b05      	ldr	r3, [pc, #20]	@ (8020c0c <HAL_I2C_MasterRxCpltCallback+0x28>)
 8020bf6:	2201      	movs	r2, #1
 8020bf8:	701a      	strb	r2, [r3, #0]
}
 8020bfa:	bf00      	nop
 8020bfc:	370c      	adds	r7, #12
 8020bfe:	46bd      	mov	sp, r7
 8020c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c04:	4770      	bx	lr
 8020c06:	bf00      	nop
 8020c08:	20000340 	.word	0x20000340
 8020c0c:	2002d7c9 	.word	0x2002d7c9

08020c10 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020c10:	b480      	push	{r7}
 8020c12:	b083      	sub	sp, #12
 8020c14:	af00      	add	r7, sp, #0
 8020c16:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	4a06      	ldr	r2, [pc, #24]	@ (8020c34 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8020c1c:	4293      	cmp	r3, r2
 8020c1e:	d102      	bne.n	8020c26 <HAL_I2C_SlaveTxCpltCallback+0x16>
 8020c20:	4b05      	ldr	r3, [pc, #20]	@ (8020c38 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8020c22:	2201      	movs	r2, #1
 8020c24:	701a      	strb	r2, [r3, #0]
}
 8020c26:	bf00      	nop
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr
 8020c32:	bf00      	nop
 8020c34:	20000394 	.word	0x20000394
 8020c38:	2002d7ca 	.word	0x2002d7ca

08020c3c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020c3c:	b480      	push	{r7}
 8020c3e:	b083      	sub	sp, #12
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	4a06      	ldr	r2, [pc, #24]	@ (8020c60 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8020c48:	4293      	cmp	r3, r2
 8020c4a:	d102      	bne.n	8020c52 <HAL_I2C_SlaveRxCpltCallback+0x16>
 8020c4c:	4b05      	ldr	r3, [pc, #20]	@ (8020c64 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8020c4e:	2201      	movs	r2, #1
 8020c50:	701a      	strb	r2, [r3, #0]
}
 8020c52:	bf00      	nop
 8020c54:	370c      	adds	r7, #12
 8020c56:	46bd      	mov	sp, r7
 8020c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c5c:	4770      	bx	lr
 8020c5e:	bf00      	nop
 8020c60:	20000394 	.word	0x20000394
 8020c64:	2002d7cb 	.word	0x2002d7cb

08020c68 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 8020c68:	b580      	push	{r7, lr}
 8020c6a:	b0ca      	sub	sp, #296	@ 0x128
 8020c6c:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("spi waiting for messages\n");
 8020c6e:	4838      	ldr	r0, [pc, #224]	@ (8020d50 <SpiTestTask+0xe8>)
 8020c70:	f000 fcf6 	bl	8021660 <puts>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 8020c74:	4b37      	ldr	r3, [pc, #220]	@ (8020d54 <SpiTestTask+0xec>)
 8020c76:	6818      	ldr	r0, [r3, #0]
 8020c78:	f107 0114 	add.w	r1, r7, #20
 8020c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020c80:	2200      	movs	r2, #0
 8020c82:	f7ec fdcf 	bl	800d824 <osMessageQueueGet>
 8020c86:	4603      	mov	r3, r0
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d15d      	bne.n	8020d48 <SpiTestTask+0xe0>
		{
			printf("spi received test ID: %lu\n", test_data.test_id);
 8020c8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020c90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020c94:	689b      	ldr	r3, [r3, #8]
 8020c96:	4619      	mov	r1, r3
 8020c98:	482f      	ldr	r0, [pc, #188]	@ (8020d58 <SpiTestTask+0xf0>)
 8020c9a:	f000 fc71 	bl	8021580 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020c9e:	2300      	movs	r3, #0
 8020ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020ca4:	e017      	b.n	8020cd6 <SpiTestTask+0x6e>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 8020ca6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020caa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020cae:	7b5a      	ldrb	r2, [r3, #13]
 8020cb0:	f107 0314 	add.w	r3, r7, #20
 8020cb4:	330e      	adds	r3, #14
 8020cb6:	4611      	mov	r1, r2
 8020cb8:	4618      	mov	r0, r3
 8020cba:	f000 f851 	bl	8020d60 <SPI_Test_Perform>
 8020cbe:	4603      	mov	r3, r0
 8020cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cc8:	2bff      	cmp	r3, #255	@ 0xff
 8020cca:	d00e      	beq.n	8020cea <SpiTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020ccc:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020cd0:	3301      	adds	r3, #1
 8020cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020cd6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020cde:	7b1b      	ldrb	r3, [r3, #12]
 8020ce0:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020ce4:	429a      	cmp	r2, r3
 8020ce6:	d3de      	bcc.n	8020ca6 <SpiTestTask+0x3e>
 8020ce8:	e000      	b.n	8020cec <SpiTestTask+0x84>
					break;
 8020cea:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020cec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020cf0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020cf4:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020cf8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020cfc:	6812      	ldr	r2, [r2, #0]
 8020cfe:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020d00:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020d04:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020d08:	889a      	ldrh	r2, [r3, #4]
 8020d0a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020d0e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020d12:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020d14:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020d18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020d1c:	689a      	ldr	r2, [r3, #8]
 8020d1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020d22:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020d26:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020d28:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020d2c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020d30:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020d34:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020d36:	4b09      	ldr	r3, [pc, #36]	@ (8020d5c <SpiTestTask+0xf4>)
 8020d38:	6818      	ldr	r0, [r3, #0]
 8020d3a:	1d39      	adds	r1, r7, #4
 8020d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020d40:	2200      	movs	r2, #0
 8020d42:	f7ec fcfb 	bl	800d73c <osMessageQueuePut>
 8020d46:	e792      	b.n	8020c6e <SpiTestTask+0x6>
		}
		else osDelay(1);
 8020d48:	2001      	movs	r0, #1
 8020d4a:	f7ec f84d 	bl	800cde8 <osDelay>
		printf("spi waiting for messages\n");
 8020d4e:	e78e      	b.n	8020c6e <SpiTestTask+0x6>
 8020d50:	08026f84 	.word	0x08026f84
 8020d54:	20000330 	.word	0x20000330
 8020d58:	08026fa0 	.word	0x08026fa0
 8020d5c:	20000324 	.word	0x20000324

08020d60 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8020d60:	b590      	push	{r4, r7, lr}
 8020d62:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8020d66:	af00      	add	r7, sp, #0
 8020d68:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020d6c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020d70:	6018      	str	r0, [r3, #0]
 8020d72:	460a      	mov	r2, r1
 8020d74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020d78:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020d7c:	701a      	strb	r2, [r3, #0]
	printf("Performing SPI test\n");
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 8020d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8020eb4 <SPI_Test_Perform+0x154>)
 8020d80:	2200      	movs	r2, #0
 8020d82:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 8020d84:	4b4c      	ldr	r3, [pc, #304]	@ (8020eb8 <SPI_Test_Perform+0x158>)
 8020d86:	2200      	movs	r2, #0
 8020d88:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 8020d8a:	4b4c      	ldr	r3, [pc, #304]	@ (8020ebc <SPI_Test_Perform+0x15c>)
 8020d8c:	2200      	movs	r2, #0
 8020d8e:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 8020d90:	4b4b      	ldr	r3, [pc, #300]	@ (8020ec0 <SPI_Test_Perform+0x160>)
 8020d92:	2200      	movs	r2, #0
 8020d94:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 8020d96:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020d9a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020d9e:	781b      	ldrb	r3, [r3, #0]
 8020da0:	b29a      	uxth	r2, r3
 8020da2:	f107 0308 	add.w	r3, r7, #8
 8020da6:	4619      	mov	r1, r3
 8020da8:	4846      	ldr	r0, [pc, #280]	@ (8020ec4 <SPI_Test_Perform+0x164>)
 8020daa:	f7e8 f867 	bl	8008e7c <HAL_SPI_Receive_DMA>
 8020dae:	4603      	mov	r3, r0
 8020db0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020db4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d001      	beq.n	8020dc0 <SPI_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
#endif
		return TEST_FAILED;
 8020dbc:	23ff      	movs	r3, #255	@ 0xff
 8020dbe:	e073      	b.n	8020ea8 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 8020dc0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020dc4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020dc8:	781b      	ldrb	r3, [r3, #0]
 8020dca:	b29a      	uxth	r2, r3
 8020dcc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020dd0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020dd4:	6819      	ldr	r1, [r3, #0]
 8020dd6:	483c      	ldr	r0, [pc, #240]	@ (8020ec8 <SPI_Test_Perform+0x168>)
 8020dd8:	f7e7 ff62 	bl	8008ca0 <HAL_SPI_Transmit_DMA>
 8020ddc:	4603      	mov	r3, r0
 8020dde:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020de2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d001      	beq.n	8020dee <SPI_Test_Perform+0x8e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
#endif
		return TEST_FAILED;
 8020dea:	23ff      	movs	r3, #255	@ 0xff
 8020dec:	e05c      	b.n	8020ea8 <SPI_Test_Perform+0x148>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 8020dee:	bf00      	nop
 8020df0:	4b33      	ldr	r3, [pc, #204]	@ (8020ec0 <SPI_Test_Perform+0x160>)
 8020df2:	781b      	ldrb	r3, [r3, #0]
 8020df4:	b2db      	uxtb	r3, r3
 8020df6:	2b00      	cmp	r3, #0
 8020df8:	d0fa      	beq.n	8020df0 <SPI_Test_Perform+0x90>
 8020dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8020eb4 <SPI_Test_Perform+0x154>)
 8020dfc:	781b      	ldrb	r3, [r3, #0]
 8020dfe:	b2db      	uxtb	r3, r3
 8020e00:	2b00      	cmp	r3, #0
 8020e02:	d0f5      	beq.n	8020df0 <SPI_Test_Perform+0x90>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 8020e04:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e08:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020e0c:	781b      	ldrb	r3, [r3, #0]
 8020e0e:	b29a      	uxth	r2, r3
 8020e10:	f107 0308 	add.w	r3, r7, #8
 8020e14:	4619      	mov	r1, r3
 8020e16:	482b      	ldr	r0, [pc, #172]	@ (8020ec4 <SPI_Test_Perform+0x164>)
 8020e18:	f7e7 ff42 	bl	8008ca0 <HAL_SPI_Transmit_DMA>
 8020e1c:	4603      	mov	r3, r0
 8020e1e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020e22:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d001      	beq.n	8020e2e <SPI_Test_Perform+0xce>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
#endif
		return TEST_FAILED;
 8020e2a:	23ff      	movs	r3, #255	@ 0xff
 8020e2c:	e03c      	b.n	8020ea8 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 8020e2e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e32:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020e36:	781b      	ldrb	r3, [r3, #0]
 8020e38:	b29a      	uxth	r2, r3
 8020e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8020e3e:	4619      	mov	r1, r3
 8020e40:	4821      	ldr	r0, [pc, #132]	@ (8020ec8 <SPI_Test_Perform+0x168>)
 8020e42:	f7e8 f81b 	bl	8008e7c <HAL_SPI_Receive_DMA>
 8020e46:	4603      	mov	r3, r0
 8020e48:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020e4c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d001      	beq.n	8020e58 <SPI_Test_Perform+0xf8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
#endif
		return TEST_FAILED;
 8020e54:	23ff      	movs	r3, #255	@ 0xff
 8020e56:	e027      	b.n	8020ea8 <SPI_Test_Perform+0x148>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 8020e58:	bf00      	nop
 8020e5a:	4b17      	ldr	r3, [pc, #92]	@ (8020eb8 <SPI_Test_Perform+0x158>)
 8020e5c:	781b      	ldrb	r3, [r3, #0]
 8020e5e:	b2db      	uxtb	r3, r3
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d0fa      	beq.n	8020e5a <SPI_Test_Perform+0xfa>
 8020e64:	4b15      	ldr	r3, [pc, #84]	@ (8020ebc <SPI_Test_Perform+0x15c>)
 8020e66:	781b      	ldrb	r3, [r3, #0]
 8020e68:	b2db      	uxtb	r3, r3
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d0f5      	beq.n	8020e5a <SPI_Test_Perform+0xfa>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 8020e6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e72:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020e76:	781c      	ldrb	r4, [r3, #0]
 8020e78:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8020e7c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e80:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020e84:	7819      	ldrb	r1, [r3, #0]
 8020e86:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020e8a:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020e8e:	4623      	mov	r3, r4
 8020e90:	6800      	ldr	r0, [r0, #0]
 8020e92:	f7ff fbc3 	bl	802061c <Match_CRC>
 8020e96:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8020e9a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8020e9e:	2b01      	cmp	r3, #1
 8020ea0:	d101      	bne.n	8020ea6 <SPI_Test_Perform+0x146>
 8020ea2:	2301      	movs	r3, #1
 8020ea4:	e000      	b.n	8020ea8 <SPI_Test_Perform+0x148>

	return TEST_FAILED;
 8020ea6:	23ff      	movs	r3, #255	@ 0xff
}
 8020ea8:	4618      	mov	r0, r3
 8020eaa:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020eae:	46bd      	mov	sp, r7
 8020eb0:	bd90      	pop	{r4, r7, pc}
 8020eb2:	bf00      	nop
 8020eb4:	2002d7cc 	.word	0x2002d7cc
 8020eb8:	2002d7cd 	.word	0x2002d7cd
 8020ebc:	2002d7ce 	.word	0x2002d7ce
 8020ec0:	2002d7cf 	.word	0x2002d7cf
 8020ec4:	200005cc 	.word	0x200005cc
 8020ec8:	20000568 	.word	0x20000568

08020ecc <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8020ecc:	b480      	push	{r7}
 8020ece:	b083      	sub	sp, #12
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	4a09      	ldr	r2, [pc, #36]	@ (8020efc <HAL_SPI_TxCpltCallback+0x30>)
 8020ed8:	4293      	cmp	r3, r2
 8020eda:	d102      	bne.n	8020ee2 <HAL_SPI_TxCpltCallback+0x16>
 8020edc:	4b08      	ldr	r3, [pc, #32]	@ (8020f00 <HAL_SPI_TxCpltCallback+0x34>)
 8020ede:	2201      	movs	r2, #1
 8020ee0:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	4a07      	ldr	r2, [pc, #28]	@ (8020f04 <HAL_SPI_TxCpltCallback+0x38>)
 8020ee6:	4293      	cmp	r3, r2
 8020ee8:	d102      	bne.n	8020ef0 <HAL_SPI_TxCpltCallback+0x24>
 8020eea:	4b07      	ldr	r3, [pc, #28]	@ (8020f08 <HAL_SPI_TxCpltCallback+0x3c>)
 8020eec:	2201      	movs	r2, #1
 8020eee:	701a      	strb	r2, [r3, #0]
}
 8020ef0:	bf00      	nop
 8020ef2:	370c      	adds	r7, #12
 8020ef4:	46bd      	mov	sp, r7
 8020ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020efa:	4770      	bx	lr
 8020efc:	20000568 	.word	0x20000568
 8020f00:	2002d7cc 	.word	0x2002d7cc
 8020f04:	200005cc 	.word	0x200005cc
 8020f08:	2002d7ce 	.word	0x2002d7ce

08020f0c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8020f0c:	b480      	push	{r7}
 8020f0e:	b083      	sub	sp, #12
 8020f10:	af00      	add	r7, sp, #0
 8020f12:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	4a09      	ldr	r2, [pc, #36]	@ (8020f3c <HAL_SPI_RxCpltCallback+0x30>)
 8020f18:	4293      	cmp	r3, r2
 8020f1a:	d102      	bne.n	8020f22 <HAL_SPI_RxCpltCallback+0x16>
 8020f1c:	4b08      	ldr	r3, [pc, #32]	@ (8020f40 <HAL_SPI_RxCpltCallback+0x34>)
 8020f1e:	2201      	movs	r2, #1
 8020f20:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	4a07      	ldr	r2, [pc, #28]	@ (8020f44 <HAL_SPI_RxCpltCallback+0x38>)
 8020f26:	4293      	cmp	r3, r2
 8020f28:	d102      	bne.n	8020f30 <HAL_SPI_RxCpltCallback+0x24>
 8020f2a:	4b07      	ldr	r3, [pc, #28]	@ (8020f48 <HAL_SPI_RxCpltCallback+0x3c>)
 8020f2c:	2201      	movs	r2, #1
 8020f2e:	701a      	strb	r2, [r3, #0]
}
 8020f30:	bf00      	nop
 8020f32:	370c      	adds	r7, #12
 8020f34:	46bd      	mov	sp, r7
 8020f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3a:	4770      	bx	lr
 8020f3c:	20000568 	.word	0x20000568
 8020f40:	2002d7cd 	.word	0x2002d7cd
 8020f44:	200005cc 	.word	0x200005cc
 8020f48:	2002d7cf 	.word	0x2002d7cf

08020f4c <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 8020f4c:	b580      	push	{r7, lr}
 8020f4e:	b0ca      	sub	sp, #296	@ 0x128
 8020f50:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("timer waiting for messages\n");
 8020f52:	4833      	ldr	r0, [pc, #204]	@ (8021020 <TimTestTask+0xd4>)
 8020f54:	f000 fb84 	bl	8021660 <puts>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 8020f58:	4b32      	ldr	r3, [pc, #200]	@ (8021024 <TimTestTask+0xd8>)
 8020f5a:	6818      	ldr	r0, [r3, #0]
 8020f5c:	f107 0114 	add.w	r1, r7, #20
 8020f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020f64:	2200      	movs	r2, #0
 8020f66:	f7ec fc5d 	bl	800d824 <osMessageQueueGet>
 8020f6a:	4603      	mov	r3, r0
 8020f6c:	2b00      	cmp	r3, #0
 8020f6e:	d153      	bne.n	8021018 <TimTestTask+0xcc>
		{
			printf("timer received test ID: %lu\n", test_data.test_id);
 8020f70:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020f74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020f78:	689b      	ldr	r3, [r3, #8]
 8020f7a:	4619      	mov	r1, r3
 8020f7c:	482a      	ldr	r0, [pc, #168]	@ (8021028 <TimTestTask+0xdc>)
 8020f7e:	f000 faff 	bl	8021580 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020f82:	2300      	movs	r3, #0
 8020f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020f88:	e00d      	b.n	8020fa6 <TimTestTask+0x5a>
			{
				result = TIM_Test_Perform();
 8020f8a:	f000 f851 	bl	8021030 <TIM_Test_Perform>
 8020f8e:	4603      	mov	r3, r0
 8020f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020f98:	2bff      	cmp	r3, #255	@ 0xff
 8020f9a:	d00e      	beq.n	8020fba <TimTestTask+0x6e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020f9c:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020fa0:	3301      	adds	r3, #1
 8020fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020fa6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020faa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020fae:	7b1b      	ldrb	r3, [r3, #12]
 8020fb0:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020fb4:	429a      	cmp	r2, r3
 8020fb6:	d3e8      	bcc.n	8020f8a <TimTestTask+0x3e>
 8020fb8:	e000      	b.n	8020fbc <TimTestTask+0x70>
					break;
 8020fba:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020fbc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020fc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020fc4:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020fc8:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020fcc:	6812      	ldr	r2, [r2, #0]
 8020fce:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020fd0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020fd4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020fd8:	889a      	ldrh	r2, [r3, #4]
 8020fda:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020fde:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020fe2:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020fe4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020fe8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020fec:	689a      	ldr	r2, [r3, #8]
 8020fee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020ff2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020ff6:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020ff8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020ffc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8021000:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8021004:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8021006:	4b09      	ldr	r3, [pc, #36]	@ (802102c <TimTestTask+0xe0>)
 8021008:	6818      	ldr	r0, [r3, #0]
 802100a:	1d39      	adds	r1, r7, #4
 802100c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021010:	2200      	movs	r2, #0
 8021012:	f7ec fb93 	bl	800d73c <osMessageQueuePut>
 8021016:	e79c      	b.n	8020f52 <TimTestTask+0x6>
		}
		else osDelay(1);
 8021018:	2001      	movs	r0, #1
 802101a:	f7eb fee5 	bl	800cde8 <osDelay>
		printf("timer waiting for messages\n");
 802101e:	e798      	b.n	8020f52 <TimTestTask+0x6>
 8021020:	08026fbc 	.word	0x08026fbc
 8021024:	20000338 	.word	0x20000338
 8021028:	08026fd8 	.word	0x08026fd8
 802102c:	20000324 	.word	0x20000324

08021030 <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 8021030:	b580      	push	{r7, lr}
 8021032:	b082      	sub	sp, #8
 8021034:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
#endif

	tim6_count = 0;
 8021036:	4b27      	ldr	r3, [pc, #156]	@ (80210d4 <TIM_Test_Perform+0xa4>)
 8021038:	2200      	movs	r2, #0
 802103a:	601a      	str	r2, [r3, #0]
	test_running = 1;
 802103c:	4b26      	ldr	r3, [pc, #152]	@ (80210d8 <TIM_Test_Perform+0xa8>)
 802103e:	2201      	movs	r2, #1
 8021040:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 8021042:	4826      	ldr	r0, [pc, #152]	@ (80210dc <TIM_Test_Perform+0xac>)
 8021044:	f7e8 fea0 	bl	8009d88 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 8021048:	4825      	ldr	r0, [pc, #148]	@ (80210e0 <TIM_Test_Perform+0xb0>)
 802104a:	f7e8 fe9d 	bl	8009d88 <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 802104e:	4b23      	ldr	r3, [pc, #140]	@ (80210dc <TIM_Test_Perform+0xac>)
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	3324      	adds	r3, #36	@ 0x24
 8021054:	4619      	mov	r1, r3
 8021056:	4a23      	ldr	r2, [pc, #140]	@ (80210e4 <TIM_Test_Perform+0xb4>)
 8021058:	230a      	movs	r3, #10
 802105a:	4823      	ldr	r0, [pc, #140]	@ (80210e8 <TIM_Test_Perform+0xb8>)
 802105c:	f7e2 fa9c 	bl	8003598 <HAL_DMA_Start_IT>
 8021060:	4603      	mov	r3, r0
 8021062:	2b00      	cmp	r3, #0
 8021064:	d001      	beq.n	802106a <TIM_Test_Perform+0x3a>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
#endif
		return TEST_FAILED;
 8021066:	23ff      	movs	r3, #255	@ 0xff
 8021068:	e02f      	b.n	80210ca <TIM_Test_Perform+0x9a>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 802106a:	4b1d      	ldr	r3, [pc, #116]	@ (80210e0 <TIM_Test_Perform+0xb0>)
 802106c:	681b      	ldr	r3, [r3, #0]
 802106e:	68da      	ldr	r2, [r3, #12]
 8021070:	4b1b      	ldr	r3, [pc, #108]	@ (80210e0 <TIM_Test_Perform+0xb0>)
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8021078:	60da      	str	r2, [r3, #12]

	while (test_running) osDelay(1);
 802107a:	e002      	b.n	8021082 <TIM_Test_Perform+0x52>
 802107c:	2001      	movs	r0, #1
 802107e:	f7eb feb3 	bl	800cde8 <osDelay>
 8021082:	4b15      	ldr	r3, [pc, #84]	@ (80210d8 <TIM_Test_Perform+0xa8>)
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	2b00      	cmp	r3, #0
 8021088:	d1f8      	bne.n	802107c <TIM_Test_Perform+0x4c>

	HAL_TIM_Base_Stop(&htim6);
 802108a:	4815      	ldr	r0, [pc, #84]	@ (80210e0 <TIM_Test_Perform+0xb0>)
 802108c:	f7e8 feec 	bl	8009e68 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 8021090:	4812      	ldr	r0, [pc, #72]	@ (80210dc <TIM_Test_Perform+0xac>)
 8021092:	f7e8 fee9 	bl	8009e68 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 8021096:	2301      	movs	r3, #1
 8021098:	607b      	str	r3, [r7, #4]
 802109a:	e012      	b.n	80210c2 <TIM_Test_Perform+0x92>
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != EXPECTED_INTERVAL)
 802109c:	4a11      	ldr	r2, [pc, #68]	@ (80210e4 <TIM_Test_Perform+0xb4>)
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	3b01      	subs	r3, #1
 80210a8:	490e      	ldr	r1, [pc, #56]	@ (80210e4 <TIM_Test_Perform+0xb4>)
 80210aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80210ae:	1ad3      	subs	r3, r2, r3
 80210b0:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 80210b4:	4293      	cmp	r3, r2
 80210b6:	d001      	beq.n	80210bc <TIM_Test_Perform+0x8c>
			return TEST_FAILED;
 80210b8:	23ff      	movs	r3, #255	@ 0xff
 80210ba:	e006      	b.n	80210ca <TIM_Test_Perform+0x9a>
	for (int i = 1; i < N_SAMPLES; i++)
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	3301      	adds	r3, #1
 80210c0:	607b      	str	r3, [r7, #4]
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	2b09      	cmp	r3, #9
 80210c6:	dde9      	ble.n	802109c <TIM_Test_Perform+0x6c>
	}

	return TEST_SUCCESS;
 80210c8:	2301      	movs	r3, #1
}
 80210ca:	4618      	mov	r0, r3
 80210cc:	3708      	adds	r7, #8
 80210ce:	46bd      	mov	sp, r7
 80210d0:	bd80      	pop	{r7, pc}
 80210d2:	bf00      	nop
 80210d4:	2002d7d4 	.word	0x2002d7d4
 80210d8:	2002d7d0 	.word	0x2002d7d0
 80210dc:	20000800 	.word	0x20000800
 80210e0:	2000084c 	.word	0x2000084c
 80210e4:	2002d7d8 	.word	0x2002d7d8
 80210e8:	20000898 	.word	0x20000898

080210ec <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 80210ec:	b580      	push	{r7, lr}
 80210ee:	b0ca      	sub	sp, #296	@ 0x128
 80210f0:	af00      	add	r7, sp, #0
	osStatus_t status;

	while (1)
	{
		//printf("uart waiting for messages\n");
		status = osMessageQueueGet(uartQueueHandle, &test_data, 0, 10);
 80210f2:	4b43      	ldr	r3, [pc, #268]	@ (8021200 <UartTestTask+0x114>)
 80210f4:	6818      	ldr	r0, [r3, #0]
 80210f6:	f107 0110 	add.w	r1, r7, #16
 80210fa:	230a      	movs	r3, #10
 80210fc:	2200      	movs	r2, #0
 80210fe:	f7ec fb91 	bl	800d824 <osMessageQueueGet>
 8021102:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 8021106:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802110a:	2b00      	cmp	r3, #0
 802110c:	d166      	bne.n	80211dc <UartTestTask+0xf0>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 802110e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8021112:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8021116:	689b      	ldr	r3, [r3, #8]
 8021118:	4619      	mov	r1, r3
 802111a:	483a      	ldr	r0, [pc, #232]	@ (8021204 <UartTestTask+0x118>)
 802111c:	f000 fa30 	bl	8021580 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8021120:	2300      	movs	r3, #0
 8021122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8021126:	e01a      	b.n	802115e <UartTestTask+0x72>
			{
				osDelay(0);
 8021128:	2000      	movs	r0, #0
 802112a:	f7eb fe5d 	bl	800cde8 <osDelay>
				result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 802112e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8021132:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8021136:	7b5a      	ldrb	r2, [r3, #13]
 8021138:	f107 0310 	add.w	r3, r7, #16
 802113c:	330e      	adds	r3, #14
 802113e:	4611      	mov	r1, r2
 8021140:	4618      	mov	r0, r3
 8021142:	f000 f867 	bl	8021214 <UART_Test_Perform>
 8021146:	4603      	mov	r3, r0
 8021148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 802114c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8021150:	2bff      	cmp	r3, #255	@ 0xff
 8021152:	d00e      	beq.n	8021172 <UartTestTask+0x86>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8021154:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8021158:	3301      	adds	r3, #1
 802115a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802115e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8021162:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8021166:	7b1b      	ldrb	r3, [r3, #12]
 8021168:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 802116c:	429a      	cmp	r2, r3
 802116e:	d3db      	bcc.n	8021128 <UartTestTask+0x3c>
 8021170:	e000      	b.n	8021174 <UartTestTask+0x88>
					break;
 8021172:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8021174:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8021178:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802117c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8021180:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8021184:	6812      	ldr	r2, [r2, #0]
 8021186:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8021188:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802118c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8021190:	889a      	ldrh	r2, [r3, #4]
 8021192:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8021196:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 802119a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 802119c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80211a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80211a4:	689a      	ldr	r2, [r3, #8]
 80211a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80211aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80211ae:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 80211b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80211b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80211b8:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80211bc:	731a      	strb	r2, [r3, #12]

			// send result to queue
			if (osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever) != osOK)
 80211be:	4b12      	ldr	r3, [pc, #72]	@ (8021208 <UartTestTask+0x11c>)
 80211c0:	6818      	ldr	r0, [r3, #0]
 80211c2:	4639      	mov	r1, r7
 80211c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80211c8:	2200      	movs	r2, #0
 80211ca:	f7ec fab7 	bl	800d73c <osMessageQueuePut>
 80211ce:	4603      	mov	r3, r0
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d08e      	beq.n	80210f2 <UartTestTask+0x6>
			{
				printf("outMsg q full!\n");
 80211d4:	480d      	ldr	r0, [pc, #52]	@ (802120c <UartTestTask+0x120>)
 80211d6:	f000 fa43 	bl	8021660 <puts>
 80211da:	e78a      	b.n	80210f2 <UartTestTask+0x6>
			}
		}
		else if (status == osErrorTimeout)
 80211dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80211e0:	f113 0f02 	cmn.w	r3, #2
 80211e4:	d103      	bne.n	80211ee <UartTestTask+0x102>
		{
			osDelay(1);
 80211e6:	2001      	movs	r0, #1
 80211e8:	f7eb fdfe 	bl	800cde8 <osDelay>
 80211ec:	e781      	b.n	80210f2 <UartTestTask+0x6>
		}
		else
		{
			printf("uart msg read error: %d\n", status);
 80211ee:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 80211f2:	4807      	ldr	r0, [pc, #28]	@ (8021210 <UartTestTask+0x124>)
 80211f4:	f000 f9c4 	bl	8021580 <iprintf>
			osDelay(1);
 80211f8:	2001      	movs	r0, #1
 80211fa:	f7eb fdf5 	bl	800cde8 <osDelay>
		status = osMessageQueueGet(uartQueueHandle, &test_data, 0, 10);
 80211fe:	e778      	b.n	80210f2 <UartTestTask+0x6>
 8021200:	20000328 	.word	0x20000328
 8021204:	08026ff8 	.word	0x08026ff8
 8021208:	20000324 	.word	0x20000324
 802120c:	08027014 	.word	0x08027014
 8021210:	08027024 	.word	0x08027024

08021214 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8021214:	b590      	push	{r4, r7, lr}
 8021216:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 802121a:	af00      	add	r7, sp, #0
 802121c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8021220:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8021224:	6018      	str	r0, [r3, #0]
 8021226:	460a      	mov	r2, r1
 8021228:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802122c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8021230:	701a      	strb	r2, [r3, #0]
#ifdef PRINT_TESTS_DEBUG
	printf("Performing uart test\n");
#endif

	uart4_rx_done = 0;
 8021232:	4b3f      	ldr	r3, [pc, #252]	@ (8021330 <UART_Test_Perform+0x11c>)
 8021234:	2200      	movs	r2, #0
 8021236:	701a      	strb	r2, [r3, #0]
	uart5_rx_done = 0;
 8021238:	4b3e      	ldr	r3, [pc, #248]	@ (8021334 <UART_Test_Perform+0x120>)
 802123a:	2200      	movs	r2, #0
 802123c:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 802123e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8021242:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8021246:	781b      	ldrb	r3, [r3, #0]
 8021248:	b29a      	uxth	r2, r3
 802124a:	f107 030c 	add.w	r3, r7, #12
 802124e:	4619      	mov	r1, r3
 8021250:	4839      	ldr	r0, [pc, #228]	@ (8021338 <UART_Test_Perform+0x124>)
 8021252:	f7e9 fbc5 	bl	800a9e0 <HAL_UART_Receive_DMA>
 8021256:	4603      	mov	r3, r0
 8021258:	2b00      	cmp	r3, #0
 802125a:	d001      	beq.n	8021260 <UART_Test_Perform+0x4c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 802125c:	23ff      	movs	r3, #255	@ 0xff
 802125e:	e061      	b.n	8021324 <UART_Test_Perform+0x110>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 8021260:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8021264:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8021268:	781b      	ldrb	r3, [r3, #0]
 802126a:	b29a      	uxth	r2, r3
 802126c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8021270:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8021274:	6819      	ldr	r1, [r3, #0]
 8021276:	4831      	ldr	r0, [pc, #196]	@ (802133c <UART_Test_Perform+0x128>)
 8021278:	f7e9 fb54 	bl	800a924 <HAL_UART_Transmit_IT>
 802127c:	4603      	mov	r3, r0
 802127e:	2b00      	cmp	r3, #0
 8021280:	d004      	beq.n	802128c <UART_Test_Perform+0x78>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 8021282:	23ff      	movs	r3, #255	@ 0xff
 8021284:	e04e      	b.n	8021324 <UART_Test_Perform+0x110>
	}
	while (!uart5_rx_done) osDelay(0);
 8021286:	2000      	movs	r0, #0
 8021288:	f7eb fdae 	bl	800cde8 <osDelay>
 802128c:	4b29      	ldr	r3, [pc, #164]	@ (8021334 <UART_Test_Perform+0x120>)
 802128e:	781b      	ldrb	r3, [r3, #0]
 8021290:	b2db      	uxtb	r3, r3
 8021292:	2b00      	cmp	r3, #0
 8021294:	d0f7      	beq.n	8021286 <UART_Test_Perform+0x72>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8021296:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802129a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802129e:	781b      	ldrb	r3, [r3, #0]
 80212a0:	b29a      	uxth	r2, r3
 80212a2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80212a6:	4619      	mov	r1, r3
 80212a8:	4824      	ldr	r0, [pc, #144]	@ (802133c <UART_Test_Perform+0x128>)
 80212aa:	f7e9 fb99 	bl	800a9e0 <HAL_UART_Receive_DMA>
 80212ae:	4603      	mov	r3, r0
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	d001      	beq.n	80212b8 <UART_Test_Perform+0xa4>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 80212b4:	23ff      	movs	r3, #255	@ 0xff
 80212b6:	e035      	b.n	8021324 <UART_Test_Perform+0x110>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 80212b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80212bc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80212c0:	781b      	ldrb	r3, [r3, #0]
 80212c2:	b29a      	uxth	r2, r3
 80212c4:	f107 030c 	add.w	r3, r7, #12
 80212c8:	4619      	mov	r1, r3
 80212ca:	481b      	ldr	r0, [pc, #108]	@ (8021338 <UART_Test_Perform+0x124>)
 80212cc:	f7e9 fb2a 	bl	800a924 <HAL_UART_Transmit_IT>
 80212d0:	4603      	mov	r3, r0
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d004      	beq.n	80212e0 <UART_Test_Perform+0xcc>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 80212d6:	23ff      	movs	r3, #255	@ 0xff
 80212d8:	e024      	b.n	8021324 <UART_Test_Perform+0x110>
	}
	while (!uart4_rx_done) osDelay(0);
 80212da:	2000      	movs	r0, #0
 80212dc:	f7eb fd84 	bl	800cde8 <osDelay>
 80212e0:	4b13      	ldr	r3, [pc, #76]	@ (8021330 <UART_Test_Perform+0x11c>)
 80212e2:	781b      	ldrb	r3, [r3, #0]
 80212e4:	b2db      	uxtb	r3, r3
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d0f7      	beq.n	80212da <UART_Test_Perform+0xc6>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 80212ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80212ee:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80212f2:	781c      	ldrb	r4, [r3, #0]
 80212f4:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 80212f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80212fc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8021300:	7819      	ldrb	r1, [r3, #0]
 8021302:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8021306:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 802130a:	4623      	mov	r3, r4
 802130c:	6800      	ldr	r0, [r0, #0]
 802130e:	f7ff f985 	bl	802061c <Match_CRC>
 8021312:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8021316:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 802131a:	2b01      	cmp	r3, #1
 802131c:	d101      	bne.n	8021322 <UART_Test_Perform+0x10e>
 802131e:	2301      	movs	r3, #1
 8021320:	e000      	b.n	8021324 <UART_Test_Perform+0x110>

	return TEST_FAILED;
 8021322:	23ff      	movs	r3, #255	@ 0xff
}
 8021324:	4618      	mov	r0, r3
 8021326:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 802132a:	46bd      	mov	sp, r7
 802132c:	bd90      	pop	{r4, r7, pc}
 802132e:	bf00      	nop
 8021330:	2002d800 	.word	0x2002d800
 8021334:	2002d801 	.word	0x2002d801
 8021338:	20000980 	.word	0x20000980
 802133c:	200008f8 	.word	0x200008f8

08021340 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8021340:	b480      	push	{r7}
 8021342:	b083      	sub	sp, #12
 8021344:	af00      	add	r7, sp, #0
 8021346:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) uart4_rx_done = 1;
 8021348:	687b      	ldr	r3, [r7, #4]
 802134a:	4a09      	ldr	r2, [pc, #36]	@ (8021370 <HAL_UART_RxCpltCallback+0x30>)
 802134c:	4293      	cmp	r3, r2
 802134e:	d102      	bne.n	8021356 <HAL_UART_RxCpltCallback+0x16>
 8021350:	4b08      	ldr	r3, [pc, #32]	@ (8021374 <HAL_UART_RxCpltCallback+0x34>)
 8021352:	2201      	movs	r2, #1
 8021354:	701a      	strb	r2, [r3, #0]
    if (huart == &huart5) uart5_rx_done = 1;
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	4a07      	ldr	r2, [pc, #28]	@ (8021378 <HAL_UART_RxCpltCallback+0x38>)
 802135a:	4293      	cmp	r3, r2
 802135c:	d102      	bne.n	8021364 <HAL_UART_RxCpltCallback+0x24>
 802135e:	4b07      	ldr	r3, [pc, #28]	@ (802137c <HAL_UART_RxCpltCallback+0x3c>)
 8021360:	2201      	movs	r2, #1
 8021362:	701a      	strb	r2, [r3, #0]
}
 8021364:	bf00      	nop
 8021366:	370c      	adds	r7, #12
 8021368:	46bd      	mov	sp, r7
 802136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802136e:	4770      	bx	lr
 8021370:	200008f8 	.word	0x200008f8
 8021374:	2002d800 	.word	0x2002d800
 8021378:	20000980 	.word	0x20000980
 802137c:	2002d801 	.word	0x2002d801

08021380 <rand>:
 8021380:	4b16      	ldr	r3, [pc, #88]	@ (80213dc <rand+0x5c>)
 8021382:	b510      	push	{r4, lr}
 8021384:	681c      	ldr	r4, [r3, #0]
 8021386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021388:	b9b3      	cbnz	r3, 80213b8 <rand+0x38>
 802138a:	2018      	movs	r0, #24
 802138c:	f000 fb44 	bl	8021a18 <malloc>
 8021390:	4602      	mov	r2, r0
 8021392:	6320      	str	r0, [r4, #48]	@ 0x30
 8021394:	b920      	cbnz	r0, 80213a0 <rand+0x20>
 8021396:	4b12      	ldr	r3, [pc, #72]	@ (80213e0 <rand+0x60>)
 8021398:	4812      	ldr	r0, [pc, #72]	@ (80213e4 <rand+0x64>)
 802139a:	2152      	movs	r1, #82	@ 0x52
 802139c:	f000 fad4 	bl	8021948 <__assert_func>
 80213a0:	4911      	ldr	r1, [pc, #68]	@ (80213e8 <rand+0x68>)
 80213a2:	4b12      	ldr	r3, [pc, #72]	@ (80213ec <rand+0x6c>)
 80213a4:	e9c0 1300 	strd	r1, r3, [r0]
 80213a8:	4b11      	ldr	r3, [pc, #68]	@ (80213f0 <rand+0x70>)
 80213aa:	6083      	str	r3, [r0, #8]
 80213ac:	230b      	movs	r3, #11
 80213ae:	8183      	strh	r3, [r0, #12]
 80213b0:	2100      	movs	r1, #0
 80213b2:	2001      	movs	r0, #1
 80213b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80213b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80213ba:	480e      	ldr	r0, [pc, #56]	@ (80213f4 <rand+0x74>)
 80213bc:	690b      	ldr	r3, [r1, #16]
 80213be:	694c      	ldr	r4, [r1, #20]
 80213c0:	4a0d      	ldr	r2, [pc, #52]	@ (80213f8 <rand+0x78>)
 80213c2:	4358      	muls	r0, r3
 80213c4:	fb02 0004 	mla	r0, r2, r4, r0
 80213c8:	fba3 3202 	umull	r3, r2, r3, r2
 80213cc:	3301      	adds	r3, #1
 80213ce:	eb40 0002 	adc.w	r0, r0, r2
 80213d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80213d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80213da:	bd10      	pop	{r4, pc}
 80213dc:	20000080 	.word	0x20000080
 80213e0:	08027422 	.word	0x08027422
 80213e4:	08027439 	.word	0x08027439
 80213e8:	abcd330e 	.word	0xabcd330e
 80213ec:	e66d1234 	.word	0xe66d1234
 80213f0:	0005deec 	.word	0x0005deec
 80213f4:	5851f42d 	.word	0x5851f42d
 80213f8:	4c957f2d 	.word	0x4c957f2d

080213fc <std>:
 80213fc:	2300      	movs	r3, #0
 80213fe:	b510      	push	{r4, lr}
 8021400:	4604      	mov	r4, r0
 8021402:	e9c0 3300 	strd	r3, r3, [r0]
 8021406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802140a:	6083      	str	r3, [r0, #8]
 802140c:	8181      	strh	r1, [r0, #12]
 802140e:	6643      	str	r3, [r0, #100]	@ 0x64
 8021410:	81c2      	strh	r2, [r0, #14]
 8021412:	6183      	str	r3, [r0, #24]
 8021414:	4619      	mov	r1, r3
 8021416:	2208      	movs	r2, #8
 8021418:	305c      	adds	r0, #92	@ 0x5c
 802141a:	f000 fa11 	bl	8021840 <memset>
 802141e:	4b0d      	ldr	r3, [pc, #52]	@ (8021454 <std+0x58>)
 8021420:	6263      	str	r3, [r4, #36]	@ 0x24
 8021422:	4b0d      	ldr	r3, [pc, #52]	@ (8021458 <std+0x5c>)
 8021424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021426:	4b0d      	ldr	r3, [pc, #52]	@ (802145c <std+0x60>)
 8021428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802142a:	4b0d      	ldr	r3, [pc, #52]	@ (8021460 <std+0x64>)
 802142c:	6323      	str	r3, [r4, #48]	@ 0x30
 802142e:	4b0d      	ldr	r3, [pc, #52]	@ (8021464 <std+0x68>)
 8021430:	6224      	str	r4, [r4, #32]
 8021432:	429c      	cmp	r4, r3
 8021434:	d006      	beq.n	8021444 <std+0x48>
 8021436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802143a:	4294      	cmp	r4, r2
 802143c:	d002      	beq.n	8021444 <std+0x48>
 802143e:	33d0      	adds	r3, #208	@ 0xd0
 8021440:	429c      	cmp	r4, r3
 8021442:	d105      	bne.n	8021450 <std+0x54>
 8021444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802144c:	f000 ba6a 	b.w	8021924 <__retarget_lock_init_recursive>
 8021450:	bd10      	pop	{r4, pc}
 8021452:	bf00      	nop
 8021454:	08021671 	.word	0x08021671
 8021458:	08021693 	.word	0x08021693
 802145c:	080216cb 	.word	0x080216cb
 8021460:	080216ef 	.word	0x080216ef
 8021464:	2002d804 	.word	0x2002d804

08021468 <stdio_exit_handler>:
 8021468:	4a02      	ldr	r2, [pc, #8]	@ (8021474 <stdio_exit_handler+0xc>)
 802146a:	4903      	ldr	r1, [pc, #12]	@ (8021478 <stdio_exit_handler+0x10>)
 802146c:	4803      	ldr	r0, [pc, #12]	@ (802147c <stdio_exit_handler+0x14>)
 802146e:	f000 b869 	b.w	8021544 <_fwalk_sglue>
 8021472:	bf00      	nop
 8021474:	20000074 	.word	0x20000074
 8021478:	08022229 	.word	0x08022229
 802147c:	20000084 	.word	0x20000084

08021480 <cleanup_stdio>:
 8021480:	6841      	ldr	r1, [r0, #4]
 8021482:	4b0c      	ldr	r3, [pc, #48]	@ (80214b4 <cleanup_stdio+0x34>)
 8021484:	4299      	cmp	r1, r3
 8021486:	b510      	push	{r4, lr}
 8021488:	4604      	mov	r4, r0
 802148a:	d001      	beq.n	8021490 <cleanup_stdio+0x10>
 802148c:	f000 fecc 	bl	8022228 <_fflush_r>
 8021490:	68a1      	ldr	r1, [r4, #8]
 8021492:	4b09      	ldr	r3, [pc, #36]	@ (80214b8 <cleanup_stdio+0x38>)
 8021494:	4299      	cmp	r1, r3
 8021496:	d002      	beq.n	802149e <cleanup_stdio+0x1e>
 8021498:	4620      	mov	r0, r4
 802149a:	f000 fec5 	bl	8022228 <_fflush_r>
 802149e:	68e1      	ldr	r1, [r4, #12]
 80214a0:	4b06      	ldr	r3, [pc, #24]	@ (80214bc <cleanup_stdio+0x3c>)
 80214a2:	4299      	cmp	r1, r3
 80214a4:	d004      	beq.n	80214b0 <cleanup_stdio+0x30>
 80214a6:	4620      	mov	r0, r4
 80214a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214ac:	f000 bebc 	b.w	8022228 <_fflush_r>
 80214b0:	bd10      	pop	{r4, pc}
 80214b2:	bf00      	nop
 80214b4:	2002d804 	.word	0x2002d804
 80214b8:	2002d86c 	.word	0x2002d86c
 80214bc:	2002d8d4 	.word	0x2002d8d4

080214c0 <global_stdio_init.part.0>:
 80214c0:	b510      	push	{r4, lr}
 80214c2:	4b0b      	ldr	r3, [pc, #44]	@ (80214f0 <global_stdio_init.part.0+0x30>)
 80214c4:	4c0b      	ldr	r4, [pc, #44]	@ (80214f4 <global_stdio_init.part.0+0x34>)
 80214c6:	4a0c      	ldr	r2, [pc, #48]	@ (80214f8 <global_stdio_init.part.0+0x38>)
 80214c8:	601a      	str	r2, [r3, #0]
 80214ca:	4620      	mov	r0, r4
 80214cc:	2200      	movs	r2, #0
 80214ce:	2104      	movs	r1, #4
 80214d0:	f7ff ff94 	bl	80213fc <std>
 80214d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80214d8:	2201      	movs	r2, #1
 80214da:	2109      	movs	r1, #9
 80214dc:	f7ff ff8e 	bl	80213fc <std>
 80214e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80214e4:	2202      	movs	r2, #2
 80214e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214ea:	2112      	movs	r1, #18
 80214ec:	f7ff bf86 	b.w	80213fc <std>
 80214f0:	2002d93c 	.word	0x2002d93c
 80214f4:	2002d804 	.word	0x2002d804
 80214f8:	08021469 	.word	0x08021469

080214fc <__sfp_lock_acquire>:
 80214fc:	4801      	ldr	r0, [pc, #4]	@ (8021504 <__sfp_lock_acquire+0x8>)
 80214fe:	f000 ba12 	b.w	8021926 <__retarget_lock_acquire_recursive>
 8021502:	bf00      	nop
 8021504:	2002d945 	.word	0x2002d945

08021508 <__sfp_lock_release>:
 8021508:	4801      	ldr	r0, [pc, #4]	@ (8021510 <__sfp_lock_release+0x8>)
 802150a:	f000 ba0d 	b.w	8021928 <__retarget_lock_release_recursive>
 802150e:	bf00      	nop
 8021510:	2002d945 	.word	0x2002d945

08021514 <__sinit>:
 8021514:	b510      	push	{r4, lr}
 8021516:	4604      	mov	r4, r0
 8021518:	f7ff fff0 	bl	80214fc <__sfp_lock_acquire>
 802151c:	6a23      	ldr	r3, [r4, #32]
 802151e:	b11b      	cbz	r3, 8021528 <__sinit+0x14>
 8021520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021524:	f7ff bff0 	b.w	8021508 <__sfp_lock_release>
 8021528:	4b04      	ldr	r3, [pc, #16]	@ (802153c <__sinit+0x28>)
 802152a:	6223      	str	r3, [r4, #32]
 802152c:	4b04      	ldr	r3, [pc, #16]	@ (8021540 <__sinit+0x2c>)
 802152e:	681b      	ldr	r3, [r3, #0]
 8021530:	2b00      	cmp	r3, #0
 8021532:	d1f5      	bne.n	8021520 <__sinit+0xc>
 8021534:	f7ff ffc4 	bl	80214c0 <global_stdio_init.part.0>
 8021538:	e7f2      	b.n	8021520 <__sinit+0xc>
 802153a:	bf00      	nop
 802153c:	08021481 	.word	0x08021481
 8021540:	2002d93c 	.word	0x2002d93c

08021544 <_fwalk_sglue>:
 8021544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021548:	4607      	mov	r7, r0
 802154a:	4688      	mov	r8, r1
 802154c:	4614      	mov	r4, r2
 802154e:	2600      	movs	r6, #0
 8021550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021554:	f1b9 0901 	subs.w	r9, r9, #1
 8021558:	d505      	bpl.n	8021566 <_fwalk_sglue+0x22>
 802155a:	6824      	ldr	r4, [r4, #0]
 802155c:	2c00      	cmp	r4, #0
 802155e:	d1f7      	bne.n	8021550 <_fwalk_sglue+0xc>
 8021560:	4630      	mov	r0, r6
 8021562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021566:	89ab      	ldrh	r3, [r5, #12]
 8021568:	2b01      	cmp	r3, #1
 802156a:	d907      	bls.n	802157c <_fwalk_sglue+0x38>
 802156c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021570:	3301      	adds	r3, #1
 8021572:	d003      	beq.n	802157c <_fwalk_sglue+0x38>
 8021574:	4629      	mov	r1, r5
 8021576:	4638      	mov	r0, r7
 8021578:	47c0      	blx	r8
 802157a:	4306      	orrs	r6, r0
 802157c:	3568      	adds	r5, #104	@ 0x68
 802157e:	e7e9      	b.n	8021554 <_fwalk_sglue+0x10>

08021580 <iprintf>:
 8021580:	b40f      	push	{r0, r1, r2, r3}
 8021582:	b507      	push	{r0, r1, r2, lr}
 8021584:	4906      	ldr	r1, [pc, #24]	@ (80215a0 <iprintf+0x20>)
 8021586:	ab04      	add	r3, sp, #16
 8021588:	6808      	ldr	r0, [r1, #0]
 802158a:	f853 2b04 	ldr.w	r2, [r3], #4
 802158e:	6881      	ldr	r1, [r0, #8]
 8021590:	9301      	str	r3, [sp, #4]
 8021592:	f000 fb21 	bl	8021bd8 <_vfiprintf_r>
 8021596:	b003      	add	sp, #12
 8021598:	f85d eb04 	ldr.w	lr, [sp], #4
 802159c:	b004      	add	sp, #16
 802159e:	4770      	bx	lr
 80215a0:	20000080 	.word	0x20000080

080215a4 <putchar>:
 80215a4:	4b02      	ldr	r3, [pc, #8]	@ (80215b0 <putchar+0xc>)
 80215a6:	4601      	mov	r1, r0
 80215a8:	6818      	ldr	r0, [r3, #0]
 80215aa:	6882      	ldr	r2, [r0, #8]
 80215ac:	f000 bed8 	b.w	8022360 <_putc_r>
 80215b0:	20000080 	.word	0x20000080

080215b4 <_puts_r>:
 80215b4:	6a03      	ldr	r3, [r0, #32]
 80215b6:	b570      	push	{r4, r5, r6, lr}
 80215b8:	6884      	ldr	r4, [r0, #8]
 80215ba:	4605      	mov	r5, r0
 80215bc:	460e      	mov	r6, r1
 80215be:	b90b      	cbnz	r3, 80215c4 <_puts_r+0x10>
 80215c0:	f7ff ffa8 	bl	8021514 <__sinit>
 80215c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80215c6:	07db      	lsls	r3, r3, #31
 80215c8:	d405      	bmi.n	80215d6 <_puts_r+0x22>
 80215ca:	89a3      	ldrh	r3, [r4, #12]
 80215cc:	0598      	lsls	r0, r3, #22
 80215ce:	d402      	bmi.n	80215d6 <_puts_r+0x22>
 80215d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80215d2:	f000 f9a8 	bl	8021926 <__retarget_lock_acquire_recursive>
 80215d6:	89a3      	ldrh	r3, [r4, #12]
 80215d8:	0719      	lsls	r1, r3, #28
 80215da:	d502      	bpl.n	80215e2 <_puts_r+0x2e>
 80215dc:	6923      	ldr	r3, [r4, #16]
 80215de:	2b00      	cmp	r3, #0
 80215e0:	d135      	bne.n	802164e <_puts_r+0x9a>
 80215e2:	4621      	mov	r1, r4
 80215e4:	4628      	mov	r0, r5
 80215e6:	f000 f8c5 	bl	8021774 <__swsetup_r>
 80215ea:	b380      	cbz	r0, 802164e <_puts_r+0x9a>
 80215ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80215f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80215f2:	07da      	lsls	r2, r3, #31
 80215f4:	d405      	bmi.n	8021602 <_puts_r+0x4e>
 80215f6:	89a3      	ldrh	r3, [r4, #12]
 80215f8:	059b      	lsls	r3, r3, #22
 80215fa:	d402      	bmi.n	8021602 <_puts_r+0x4e>
 80215fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80215fe:	f000 f993 	bl	8021928 <__retarget_lock_release_recursive>
 8021602:	4628      	mov	r0, r5
 8021604:	bd70      	pop	{r4, r5, r6, pc}
 8021606:	2b00      	cmp	r3, #0
 8021608:	da04      	bge.n	8021614 <_puts_r+0x60>
 802160a:	69a2      	ldr	r2, [r4, #24]
 802160c:	429a      	cmp	r2, r3
 802160e:	dc17      	bgt.n	8021640 <_puts_r+0x8c>
 8021610:	290a      	cmp	r1, #10
 8021612:	d015      	beq.n	8021640 <_puts_r+0x8c>
 8021614:	6823      	ldr	r3, [r4, #0]
 8021616:	1c5a      	adds	r2, r3, #1
 8021618:	6022      	str	r2, [r4, #0]
 802161a:	7019      	strb	r1, [r3, #0]
 802161c:	68a3      	ldr	r3, [r4, #8]
 802161e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021622:	3b01      	subs	r3, #1
 8021624:	60a3      	str	r3, [r4, #8]
 8021626:	2900      	cmp	r1, #0
 8021628:	d1ed      	bne.n	8021606 <_puts_r+0x52>
 802162a:	2b00      	cmp	r3, #0
 802162c:	da11      	bge.n	8021652 <_puts_r+0x9e>
 802162e:	4622      	mov	r2, r4
 8021630:	210a      	movs	r1, #10
 8021632:	4628      	mov	r0, r5
 8021634:	f000 f85f 	bl	80216f6 <__swbuf_r>
 8021638:	3001      	adds	r0, #1
 802163a:	d0d7      	beq.n	80215ec <_puts_r+0x38>
 802163c:	250a      	movs	r5, #10
 802163e:	e7d7      	b.n	80215f0 <_puts_r+0x3c>
 8021640:	4622      	mov	r2, r4
 8021642:	4628      	mov	r0, r5
 8021644:	f000 f857 	bl	80216f6 <__swbuf_r>
 8021648:	3001      	adds	r0, #1
 802164a:	d1e7      	bne.n	802161c <_puts_r+0x68>
 802164c:	e7ce      	b.n	80215ec <_puts_r+0x38>
 802164e:	3e01      	subs	r6, #1
 8021650:	e7e4      	b.n	802161c <_puts_r+0x68>
 8021652:	6823      	ldr	r3, [r4, #0]
 8021654:	1c5a      	adds	r2, r3, #1
 8021656:	6022      	str	r2, [r4, #0]
 8021658:	220a      	movs	r2, #10
 802165a:	701a      	strb	r2, [r3, #0]
 802165c:	e7ee      	b.n	802163c <_puts_r+0x88>
	...

08021660 <puts>:
 8021660:	4b02      	ldr	r3, [pc, #8]	@ (802166c <puts+0xc>)
 8021662:	4601      	mov	r1, r0
 8021664:	6818      	ldr	r0, [r3, #0]
 8021666:	f7ff bfa5 	b.w	80215b4 <_puts_r>
 802166a:	bf00      	nop
 802166c:	20000080 	.word	0x20000080

08021670 <__sread>:
 8021670:	b510      	push	{r4, lr}
 8021672:	460c      	mov	r4, r1
 8021674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021678:	f000 f90c 	bl	8021894 <_read_r>
 802167c:	2800      	cmp	r0, #0
 802167e:	bfab      	itete	ge
 8021680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021682:	89a3      	ldrhlt	r3, [r4, #12]
 8021684:	181b      	addge	r3, r3, r0
 8021686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802168a:	bfac      	ite	ge
 802168c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802168e:	81a3      	strhlt	r3, [r4, #12]
 8021690:	bd10      	pop	{r4, pc}

08021692 <__swrite>:
 8021692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021696:	461f      	mov	r7, r3
 8021698:	898b      	ldrh	r3, [r1, #12]
 802169a:	05db      	lsls	r3, r3, #23
 802169c:	4605      	mov	r5, r0
 802169e:	460c      	mov	r4, r1
 80216a0:	4616      	mov	r6, r2
 80216a2:	d505      	bpl.n	80216b0 <__swrite+0x1e>
 80216a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80216a8:	2302      	movs	r3, #2
 80216aa:	2200      	movs	r2, #0
 80216ac:	f000 f8e0 	bl	8021870 <_lseek_r>
 80216b0:	89a3      	ldrh	r3, [r4, #12]
 80216b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80216b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80216ba:	81a3      	strh	r3, [r4, #12]
 80216bc:	4632      	mov	r2, r6
 80216be:	463b      	mov	r3, r7
 80216c0:	4628      	mov	r0, r5
 80216c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80216c6:	f000 b8f7 	b.w	80218b8 <_write_r>

080216ca <__sseek>:
 80216ca:	b510      	push	{r4, lr}
 80216cc:	460c      	mov	r4, r1
 80216ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80216d2:	f000 f8cd 	bl	8021870 <_lseek_r>
 80216d6:	1c43      	adds	r3, r0, #1
 80216d8:	89a3      	ldrh	r3, [r4, #12]
 80216da:	bf15      	itete	ne
 80216dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80216de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80216e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80216e6:	81a3      	strheq	r3, [r4, #12]
 80216e8:	bf18      	it	ne
 80216ea:	81a3      	strhne	r3, [r4, #12]
 80216ec:	bd10      	pop	{r4, pc}

080216ee <__sclose>:
 80216ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80216f2:	f000 b8ad 	b.w	8021850 <_close_r>

080216f6 <__swbuf_r>:
 80216f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216f8:	460e      	mov	r6, r1
 80216fa:	4614      	mov	r4, r2
 80216fc:	4605      	mov	r5, r0
 80216fe:	b118      	cbz	r0, 8021708 <__swbuf_r+0x12>
 8021700:	6a03      	ldr	r3, [r0, #32]
 8021702:	b90b      	cbnz	r3, 8021708 <__swbuf_r+0x12>
 8021704:	f7ff ff06 	bl	8021514 <__sinit>
 8021708:	69a3      	ldr	r3, [r4, #24]
 802170a:	60a3      	str	r3, [r4, #8]
 802170c:	89a3      	ldrh	r3, [r4, #12]
 802170e:	071a      	lsls	r2, r3, #28
 8021710:	d501      	bpl.n	8021716 <__swbuf_r+0x20>
 8021712:	6923      	ldr	r3, [r4, #16]
 8021714:	b943      	cbnz	r3, 8021728 <__swbuf_r+0x32>
 8021716:	4621      	mov	r1, r4
 8021718:	4628      	mov	r0, r5
 802171a:	f000 f82b 	bl	8021774 <__swsetup_r>
 802171e:	b118      	cbz	r0, 8021728 <__swbuf_r+0x32>
 8021720:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021724:	4638      	mov	r0, r7
 8021726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021728:	6823      	ldr	r3, [r4, #0]
 802172a:	6922      	ldr	r2, [r4, #16]
 802172c:	1a98      	subs	r0, r3, r2
 802172e:	6963      	ldr	r3, [r4, #20]
 8021730:	b2f6      	uxtb	r6, r6
 8021732:	4283      	cmp	r3, r0
 8021734:	4637      	mov	r7, r6
 8021736:	dc05      	bgt.n	8021744 <__swbuf_r+0x4e>
 8021738:	4621      	mov	r1, r4
 802173a:	4628      	mov	r0, r5
 802173c:	f000 fd74 	bl	8022228 <_fflush_r>
 8021740:	2800      	cmp	r0, #0
 8021742:	d1ed      	bne.n	8021720 <__swbuf_r+0x2a>
 8021744:	68a3      	ldr	r3, [r4, #8]
 8021746:	3b01      	subs	r3, #1
 8021748:	60a3      	str	r3, [r4, #8]
 802174a:	6823      	ldr	r3, [r4, #0]
 802174c:	1c5a      	adds	r2, r3, #1
 802174e:	6022      	str	r2, [r4, #0]
 8021750:	701e      	strb	r6, [r3, #0]
 8021752:	6962      	ldr	r2, [r4, #20]
 8021754:	1c43      	adds	r3, r0, #1
 8021756:	429a      	cmp	r2, r3
 8021758:	d004      	beq.n	8021764 <__swbuf_r+0x6e>
 802175a:	89a3      	ldrh	r3, [r4, #12]
 802175c:	07db      	lsls	r3, r3, #31
 802175e:	d5e1      	bpl.n	8021724 <__swbuf_r+0x2e>
 8021760:	2e0a      	cmp	r6, #10
 8021762:	d1df      	bne.n	8021724 <__swbuf_r+0x2e>
 8021764:	4621      	mov	r1, r4
 8021766:	4628      	mov	r0, r5
 8021768:	f000 fd5e 	bl	8022228 <_fflush_r>
 802176c:	2800      	cmp	r0, #0
 802176e:	d0d9      	beq.n	8021724 <__swbuf_r+0x2e>
 8021770:	e7d6      	b.n	8021720 <__swbuf_r+0x2a>
	...

08021774 <__swsetup_r>:
 8021774:	b538      	push	{r3, r4, r5, lr}
 8021776:	4b29      	ldr	r3, [pc, #164]	@ (802181c <__swsetup_r+0xa8>)
 8021778:	4605      	mov	r5, r0
 802177a:	6818      	ldr	r0, [r3, #0]
 802177c:	460c      	mov	r4, r1
 802177e:	b118      	cbz	r0, 8021788 <__swsetup_r+0x14>
 8021780:	6a03      	ldr	r3, [r0, #32]
 8021782:	b90b      	cbnz	r3, 8021788 <__swsetup_r+0x14>
 8021784:	f7ff fec6 	bl	8021514 <__sinit>
 8021788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802178c:	0719      	lsls	r1, r3, #28
 802178e:	d422      	bmi.n	80217d6 <__swsetup_r+0x62>
 8021790:	06da      	lsls	r2, r3, #27
 8021792:	d407      	bmi.n	80217a4 <__swsetup_r+0x30>
 8021794:	2209      	movs	r2, #9
 8021796:	602a      	str	r2, [r5, #0]
 8021798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802179c:	81a3      	strh	r3, [r4, #12]
 802179e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80217a2:	e033      	b.n	802180c <__swsetup_r+0x98>
 80217a4:	0758      	lsls	r0, r3, #29
 80217a6:	d512      	bpl.n	80217ce <__swsetup_r+0x5a>
 80217a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80217aa:	b141      	cbz	r1, 80217be <__swsetup_r+0x4a>
 80217ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80217b0:	4299      	cmp	r1, r3
 80217b2:	d002      	beq.n	80217ba <__swsetup_r+0x46>
 80217b4:	4628      	mov	r0, r5
 80217b6:	f000 f8e5 	bl	8021984 <_free_r>
 80217ba:	2300      	movs	r3, #0
 80217bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80217be:	89a3      	ldrh	r3, [r4, #12]
 80217c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80217c4:	81a3      	strh	r3, [r4, #12]
 80217c6:	2300      	movs	r3, #0
 80217c8:	6063      	str	r3, [r4, #4]
 80217ca:	6923      	ldr	r3, [r4, #16]
 80217cc:	6023      	str	r3, [r4, #0]
 80217ce:	89a3      	ldrh	r3, [r4, #12]
 80217d0:	f043 0308 	orr.w	r3, r3, #8
 80217d4:	81a3      	strh	r3, [r4, #12]
 80217d6:	6923      	ldr	r3, [r4, #16]
 80217d8:	b94b      	cbnz	r3, 80217ee <__swsetup_r+0x7a>
 80217da:	89a3      	ldrh	r3, [r4, #12]
 80217dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80217e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80217e4:	d003      	beq.n	80217ee <__swsetup_r+0x7a>
 80217e6:	4621      	mov	r1, r4
 80217e8:	4628      	mov	r0, r5
 80217ea:	f000 fd7d 	bl	80222e8 <__smakebuf_r>
 80217ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217f2:	f013 0201 	ands.w	r2, r3, #1
 80217f6:	d00a      	beq.n	802180e <__swsetup_r+0x9a>
 80217f8:	2200      	movs	r2, #0
 80217fa:	60a2      	str	r2, [r4, #8]
 80217fc:	6962      	ldr	r2, [r4, #20]
 80217fe:	4252      	negs	r2, r2
 8021800:	61a2      	str	r2, [r4, #24]
 8021802:	6922      	ldr	r2, [r4, #16]
 8021804:	b942      	cbnz	r2, 8021818 <__swsetup_r+0xa4>
 8021806:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802180a:	d1c5      	bne.n	8021798 <__swsetup_r+0x24>
 802180c:	bd38      	pop	{r3, r4, r5, pc}
 802180e:	0799      	lsls	r1, r3, #30
 8021810:	bf58      	it	pl
 8021812:	6962      	ldrpl	r2, [r4, #20]
 8021814:	60a2      	str	r2, [r4, #8]
 8021816:	e7f4      	b.n	8021802 <__swsetup_r+0x8e>
 8021818:	2000      	movs	r0, #0
 802181a:	e7f7      	b.n	802180c <__swsetup_r+0x98>
 802181c:	20000080 	.word	0x20000080

08021820 <memcmp>:
 8021820:	b510      	push	{r4, lr}
 8021822:	3901      	subs	r1, #1
 8021824:	4402      	add	r2, r0
 8021826:	4290      	cmp	r0, r2
 8021828:	d101      	bne.n	802182e <memcmp+0xe>
 802182a:	2000      	movs	r0, #0
 802182c:	e005      	b.n	802183a <memcmp+0x1a>
 802182e:	7803      	ldrb	r3, [r0, #0]
 8021830:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021834:	42a3      	cmp	r3, r4
 8021836:	d001      	beq.n	802183c <memcmp+0x1c>
 8021838:	1b18      	subs	r0, r3, r4
 802183a:	bd10      	pop	{r4, pc}
 802183c:	3001      	adds	r0, #1
 802183e:	e7f2      	b.n	8021826 <memcmp+0x6>

08021840 <memset>:
 8021840:	4402      	add	r2, r0
 8021842:	4603      	mov	r3, r0
 8021844:	4293      	cmp	r3, r2
 8021846:	d100      	bne.n	802184a <memset+0xa>
 8021848:	4770      	bx	lr
 802184a:	f803 1b01 	strb.w	r1, [r3], #1
 802184e:	e7f9      	b.n	8021844 <memset+0x4>

08021850 <_close_r>:
 8021850:	b538      	push	{r3, r4, r5, lr}
 8021852:	4d06      	ldr	r5, [pc, #24]	@ (802186c <_close_r+0x1c>)
 8021854:	2300      	movs	r3, #0
 8021856:	4604      	mov	r4, r0
 8021858:	4608      	mov	r0, r1
 802185a:	602b      	str	r3, [r5, #0]
 802185c:	f7e0 f974 	bl	8001b48 <_close>
 8021860:	1c43      	adds	r3, r0, #1
 8021862:	d102      	bne.n	802186a <_close_r+0x1a>
 8021864:	682b      	ldr	r3, [r5, #0]
 8021866:	b103      	cbz	r3, 802186a <_close_r+0x1a>
 8021868:	6023      	str	r3, [r4, #0]
 802186a:	bd38      	pop	{r3, r4, r5, pc}
 802186c:	2002d940 	.word	0x2002d940

08021870 <_lseek_r>:
 8021870:	b538      	push	{r3, r4, r5, lr}
 8021872:	4d07      	ldr	r5, [pc, #28]	@ (8021890 <_lseek_r+0x20>)
 8021874:	4604      	mov	r4, r0
 8021876:	4608      	mov	r0, r1
 8021878:	4611      	mov	r1, r2
 802187a:	2200      	movs	r2, #0
 802187c:	602a      	str	r2, [r5, #0]
 802187e:	461a      	mov	r2, r3
 8021880:	f7e0 f989 	bl	8001b96 <_lseek>
 8021884:	1c43      	adds	r3, r0, #1
 8021886:	d102      	bne.n	802188e <_lseek_r+0x1e>
 8021888:	682b      	ldr	r3, [r5, #0]
 802188a:	b103      	cbz	r3, 802188e <_lseek_r+0x1e>
 802188c:	6023      	str	r3, [r4, #0]
 802188e:	bd38      	pop	{r3, r4, r5, pc}
 8021890:	2002d940 	.word	0x2002d940

08021894 <_read_r>:
 8021894:	b538      	push	{r3, r4, r5, lr}
 8021896:	4d07      	ldr	r5, [pc, #28]	@ (80218b4 <_read_r+0x20>)
 8021898:	4604      	mov	r4, r0
 802189a:	4608      	mov	r0, r1
 802189c:	4611      	mov	r1, r2
 802189e:	2200      	movs	r2, #0
 80218a0:	602a      	str	r2, [r5, #0]
 80218a2:	461a      	mov	r2, r3
 80218a4:	f7e0 f933 	bl	8001b0e <_read>
 80218a8:	1c43      	adds	r3, r0, #1
 80218aa:	d102      	bne.n	80218b2 <_read_r+0x1e>
 80218ac:	682b      	ldr	r3, [r5, #0]
 80218ae:	b103      	cbz	r3, 80218b2 <_read_r+0x1e>
 80218b0:	6023      	str	r3, [r4, #0]
 80218b2:	bd38      	pop	{r3, r4, r5, pc}
 80218b4:	2002d940 	.word	0x2002d940

080218b8 <_write_r>:
 80218b8:	b538      	push	{r3, r4, r5, lr}
 80218ba:	4d07      	ldr	r5, [pc, #28]	@ (80218d8 <_write_r+0x20>)
 80218bc:	4604      	mov	r4, r0
 80218be:	4608      	mov	r0, r1
 80218c0:	4611      	mov	r1, r2
 80218c2:	2200      	movs	r2, #0
 80218c4:	602a      	str	r2, [r5, #0]
 80218c6:	461a      	mov	r2, r3
 80218c8:	f7df fc92 	bl	80011f0 <_write>
 80218cc:	1c43      	adds	r3, r0, #1
 80218ce:	d102      	bne.n	80218d6 <_write_r+0x1e>
 80218d0:	682b      	ldr	r3, [r5, #0]
 80218d2:	b103      	cbz	r3, 80218d6 <_write_r+0x1e>
 80218d4:	6023      	str	r3, [r4, #0]
 80218d6:	bd38      	pop	{r3, r4, r5, pc}
 80218d8:	2002d940 	.word	0x2002d940

080218dc <__libc_init_array>:
 80218dc:	b570      	push	{r4, r5, r6, lr}
 80218de:	4d0d      	ldr	r5, [pc, #52]	@ (8021914 <__libc_init_array+0x38>)
 80218e0:	4c0d      	ldr	r4, [pc, #52]	@ (8021918 <__libc_init_array+0x3c>)
 80218e2:	1b64      	subs	r4, r4, r5
 80218e4:	10a4      	asrs	r4, r4, #2
 80218e6:	2600      	movs	r6, #0
 80218e8:	42a6      	cmp	r6, r4
 80218ea:	d109      	bne.n	8021900 <__libc_init_array+0x24>
 80218ec:	4d0b      	ldr	r5, [pc, #44]	@ (802191c <__libc_init_array+0x40>)
 80218ee:	4c0c      	ldr	r4, [pc, #48]	@ (8021920 <__libc_init_array+0x44>)
 80218f0:	f000 fde8 	bl	80224c4 <_init>
 80218f4:	1b64      	subs	r4, r4, r5
 80218f6:	10a4      	asrs	r4, r4, #2
 80218f8:	2600      	movs	r6, #0
 80218fa:	42a6      	cmp	r6, r4
 80218fc:	d105      	bne.n	802190a <__libc_init_array+0x2e>
 80218fe:	bd70      	pop	{r4, r5, r6, pc}
 8021900:	f855 3b04 	ldr.w	r3, [r5], #4
 8021904:	4798      	blx	r3
 8021906:	3601      	adds	r6, #1
 8021908:	e7ee      	b.n	80218e8 <__libc_init_array+0xc>
 802190a:	f855 3b04 	ldr.w	r3, [r5], #4
 802190e:	4798      	blx	r3
 8021910:	3601      	adds	r6, #1
 8021912:	e7f2      	b.n	80218fa <__libc_init_array+0x1e>
 8021914:	08027508 	.word	0x08027508
 8021918:	08027508 	.word	0x08027508
 802191c:	08027508 	.word	0x08027508
 8021920:	0802750c 	.word	0x0802750c

08021924 <__retarget_lock_init_recursive>:
 8021924:	4770      	bx	lr

08021926 <__retarget_lock_acquire_recursive>:
 8021926:	4770      	bx	lr

08021928 <__retarget_lock_release_recursive>:
 8021928:	4770      	bx	lr

0802192a <memcpy>:
 802192a:	440a      	add	r2, r1
 802192c:	4291      	cmp	r1, r2
 802192e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021932:	d100      	bne.n	8021936 <memcpy+0xc>
 8021934:	4770      	bx	lr
 8021936:	b510      	push	{r4, lr}
 8021938:	f811 4b01 	ldrb.w	r4, [r1], #1
 802193c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021940:	4291      	cmp	r1, r2
 8021942:	d1f9      	bne.n	8021938 <memcpy+0xe>
 8021944:	bd10      	pop	{r4, pc}
	...

08021948 <__assert_func>:
 8021948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802194a:	4614      	mov	r4, r2
 802194c:	461a      	mov	r2, r3
 802194e:	4b09      	ldr	r3, [pc, #36]	@ (8021974 <__assert_func+0x2c>)
 8021950:	681b      	ldr	r3, [r3, #0]
 8021952:	4605      	mov	r5, r0
 8021954:	68d8      	ldr	r0, [r3, #12]
 8021956:	b14c      	cbz	r4, 802196c <__assert_func+0x24>
 8021958:	4b07      	ldr	r3, [pc, #28]	@ (8021978 <__assert_func+0x30>)
 802195a:	9100      	str	r1, [sp, #0]
 802195c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021960:	4906      	ldr	r1, [pc, #24]	@ (802197c <__assert_func+0x34>)
 8021962:	462b      	mov	r3, r5
 8021964:	f000 fc88 	bl	8022278 <fiprintf>
 8021968:	f000 fd60 	bl	802242c <abort>
 802196c:	4b04      	ldr	r3, [pc, #16]	@ (8021980 <__assert_func+0x38>)
 802196e:	461c      	mov	r4, r3
 8021970:	e7f3      	b.n	802195a <__assert_func+0x12>
 8021972:	bf00      	nop
 8021974:	20000080 	.word	0x20000080
 8021978:	08027491 	.word	0x08027491
 802197c:	0802749e 	.word	0x0802749e
 8021980:	080274cc 	.word	0x080274cc

08021984 <_free_r>:
 8021984:	b538      	push	{r3, r4, r5, lr}
 8021986:	4605      	mov	r5, r0
 8021988:	2900      	cmp	r1, #0
 802198a:	d041      	beq.n	8021a10 <_free_r+0x8c>
 802198c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021990:	1f0c      	subs	r4, r1, #4
 8021992:	2b00      	cmp	r3, #0
 8021994:	bfb8      	it	lt
 8021996:	18e4      	addlt	r4, r4, r3
 8021998:	f000 f8e8 	bl	8021b6c <__malloc_lock>
 802199c:	4a1d      	ldr	r2, [pc, #116]	@ (8021a14 <_free_r+0x90>)
 802199e:	6813      	ldr	r3, [r2, #0]
 80219a0:	b933      	cbnz	r3, 80219b0 <_free_r+0x2c>
 80219a2:	6063      	str	r3, [r4, #4]
 80219a4:	6014      	str	r4, [r2, #0]
 80219a6:	4628      	mov	r0, r5
 80219a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80219ac:	f000 b8e4 	b.w	8021b78 <__malloc_unlock>
 80219b0:	42a3      	cmp	r3, r4
 80219b2:	d908      	bls.n	80219c6 <_free_r+0x42>
 80219b4:	6820      	ldr	r0, [r4, #0]
 80219b6:	1821      	adds	r1, r4, r0
 80219b8:	428b      	cmp	r3, r1
 80219ba:	bf01      	itttt	eq
 80219bc:	6819      	ldreq	r1, [r3, #0]
 80219be:	685b      	ldreq	r3, [r3, #4]
 80219c0:	1809      	addeq	r1, r1, r0
 80219c2:	6021      	streq	r1, [r4, #0]
 80219c4:	e7ed      	b.n	80219a2 <_free_r+0x1e>
 80219c6:	461a      	mov	r2, r3
 80219c8:	685b      	ldr	r3, [r3, #4]
 80219ca:	b10b      	cbz	r3, 80219d0 <_free_r+0x4c>
 80219cc:	42a3      	cmp	r3, r4
 80219ce:	d9fa      	bls.n	80219c6 <_free_r+0x42>
 80219d0:	6811      	ldr	r1, [r2, #0]
 80219d2:	1850      	adds	r0, r2, r1
 80219d4:	42a0      	cmp	r0, r4
 80219d6:	d10b      	bne.n	80219f0 <_free_r+0x6c>
 80219d8:	6820      	ldr	r0, [r4, #0]
 80219da:	4401      	add	r1, r0
 80219dc:	1850      	adds	r0, r2, r1
 80219de:	4283      	cmp	r3, r0
 80219e0:	6011      	str	r1, [r2, #0]
 80219e2:	d1e0      	bne.n	80219a6 <_free_r+0x22>
 80219e4:	6818      	ldr	r0, [r3, #0]
 80219e6:	685b      	ldr	r3, [r3, #4]
 80219e8:	6053      	str	r3, [r2, #4]
 80219ea:	4408      	add	r0, r1
 80219ec:	6010      	str	r0, [r2, #0]
 80219ee:	e7da      	b.n	80219a6 <_free_r+0x22>
 80219f0:	d902      	bls.n	80219f8 <_free_r+0x74>
 80219f2:	230c      	movs	r3, #12
 80219f4:	602b      	str	r3, [r5, #0]
 80219f6:	e7d6      	b.n	80219a6 <_free_r+0x22>
 80219f8:	6820      	ldr	r0, [r4, #0]
 80219fa:	1821      	adds	r1, r4, r0
 80219fc:	428b      	cmp	r3, r1
 80219fe:	bf04      	itt	eq
 8021a00:	6819      	ldreq	r1, [r3, #0]
 8021a02:	685b      	ldreq	r3, [r3, #4]
 8021a04:	6063      	str	r3, [r4, #4]
 8021a06:	bf04      	itt	eq
 8021a08:	1809      	addeq	r1, r1, r0
 8021a0a:	6021      	streq	r1, [r4, #0]
 8021a0c:	6054      	str	r4, [r2, #4]
 8021a0e:	e7ca      	b.n	80219a6 <_free_r+0x22>
 8021a10:	bd38      	pop	{r3, r4, r5, pc}
 8021a12:	bf00      	nop
 8021a14:	2002d94c 	.word	0x2002d94c

08021a18 <malloc>:
 8021a18:	4b02      	ldr	r3, [pc, #8]	@ (8021a24 <malloc+0xc>)
 8021a1a:	4601      	mov	r1, r0
 8021a1c:	6818      	ldr	r0, [r3, #0]
 8021a1e:	f000 b825 	b.w	8021a6c <_malloc_r>
 8021a22:	bf00      	nop
 8021a24:	20000080 	.word	0x20000080

08021a28 <sbrk_aligned>:
 8021a28:	b570      	push	{r4, r5, r6, lr}
 8021a2a:	4e0f      	ldr	r6, [pc, #60]	@ (8021a68 <sbrk_aligned+0x40>)
 8021a2c:	460c      	mov	r4, r1
 8021a2e:	6831      	ldr	r1, [r6, #0]
 8021a30:	4605      	mov	r5, r0
 8021a32:	b911      	cbnz	r1, 8021a3a <sbrk_aligned+0x12>
 8021a34:	f000 fcea 	bl	802240c <_sbrk_r>
 8021a38:	6030      	str	r0, [r6, #0]
 8021a3a:	4621      	mov	r1, r4
 8021a3c:	4628      	mov	r0, r5
 8021a3e:	f000 fce5 	bl	802240c <_sbrk_r>
 8021a42:	1c43      	adds	r3, r0, #1
 8021a44:	d103      	bne.n	8021a4e <sbrk_aligned+0x26>
 8021a46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021a4a:	4620      	mov	r0, r4
 8021a4c:	bd70      	pop	{r4, r5, r6, pc}
 8021a4e:	1cc4      	adds	r4, r0, #3
 8021a50:	f024 0403 	bic.w	r4, r4, #3
 8021a54:	42a0      	cmp	r0, r4
 8021a56:	d0f8      	beq.n	8021a4a <sbrk_aligned+0x22>
 8021a58:	1a21      	subs	r1, r4, r0
 8021a5a:	4628      	mov	r0, r5
 8021a5c:	f000 fcd6 	bl	802240c <_sbrk_r>
 8021a60:	3001      	adds	r0, #1
 8021a62:	d1f2      	bne.n	8021a4a <sbrk_aligned+0x22>
 8021a64:	e7ef      	b.n	8021a46 <sbrk_aligned+0x1e>
 8021a66:	bf00      	nop
 8021a68:	2002d948 	.word	0x2002d948

08021a6c <_malloc_r>:
 8021a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a70:	1ccd      	adds	r5, r1, #3
 8021a72:	f025 0503 	bic.w	r5, r5, #3
 8021a76:	3508      	adds	r5, #8
 8021a78:	2d0c      	cmp	r5, #12
 8021a7a:	bf38      	it	cc
 8021a7c:	250c      	movcc	r5, #12
 8021a7e:	2d00      	cmp	r5, #0
 8021a80:	4606      	mov	r6, r0
 8021a82:	db01      	blt.n	8021a88 <_malloc_r+0x1c>
 8021a84:	42a9      	cmp	r1, r5
 8021a86:	d904      	bls.n	8021a92 <_malloc_r+0x26>
 8021a88:	230c      	movs	r3, #12
 8021a8a:	6033      	str	r3, [r6, #0]
 8021a8c:	2000      	movs	r0, #0
 8021a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021b68 <_malloc_r+0xfc>
 8021a96:	f000 f869 	bl	8021b6c <__malloc_lock>
 8021a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8021a9e:	461c      	mov	r4, r3
 8021aa0:	bb44      	cbnz	r4, 8021af4 <_malloc_r+0x88>
 8021aa2:	4629      	mov	r1, r5
 8021aa4:	4630      	mov	r0, r6
 8021aa6:	f7ff ffbf 	bl	8021a28 <sbrk_aligned>
 8021aaa:	1c43      	adds	r3, r0, #1
 8021aac:	4604      	mov	r4, r0
 8021aae:	d158      	bne.n	8021b62 <_malloc_r+0xf6>
 8021ab0:	f8d8 4000 	ldr.w	r4, [r8]
 8021ab4:	4627      	mov	r7, r4
 8021ab6:	2f00      	cmp	r7, #0
 8021ab8:	d143      	bne.n	8021b42 <_malloc_r+0xd6>
 8021aba:	2c00      	cmp	r4, #0
 8021abc:	d04b      	beq.n	8021b56 <_malloc_r+0xea>
 8021abe:	6823      	ldr	r3, [r4, #0]
 8021ac0:	4639      	mov	r1, r7
 8021ac2:	4630      	mov	r0, r6
 8021ac4:	eb04 0903 	add.w	r9, r4, r3
 8021ac8:	f000 fca0 	bl	802240c <_sbrk_r>
 8021acc:	4581      	cmp	r9, r0
 8021ace:	d142      	bne.n	8021b56 <_malloc_r+0xea>
 8021ad0:	6821      	ldr	r1, [r4, #0]
 8021ad2:	1a6d      	subs	r5, r5, r1
 8021ad4:	4629      	mov	r1, r5
 8021ad6:	4630      	mov	r0, r6
 8021ad8:	f7ff ffa6 	bl	8021a28 <sbrk_aligned>
 8021adc:	3001      	adds	r0, #1
 8021ade:	d03a      	beq.n	8021b56 <_malloc_r+0xea>
 8021ae0:	6823      	ldr	r3, [r4, #0]
 8021ae2:	442b      	add	r3, r5
 8021ae4:	6023      	str	r3, [r4, #0]
 8021ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8021aea:	685a      	ldr	r2, [r3, #4]
 8021aec:	bb62      	cbnz	r2, 8021b48 <_malloc_r+0xdc>
 8021aee:	f8c8 7000 	str.w	r7, [r8]
 8021af2:	e00f      	b.n	8021b14 <_malloc_r+0xa8>
 8021af4:	6822      	ldr	r2, [r4, #0]
 8021af6:	1b52      	subs	r2, r2, r5
 8021af8:	d420      	bmi.n	8021b3c <_malloc_r+0xd0>
 8021afa:	2a0b      	cmp	r2, #11
 8021afc:	d917      	bls.n	8021b2e <_malloc_r+0xc2>
 8021afe:	1961      	adds	r1, r4, r5
 8021b00:	42a3      	cmp	r3, r4
 8021b02:	6025      	str	r5, [r4, #0]
 8021b04:	bf18      	it	ne
 8021b06:	6059      	strne	r1, [r3, #4]
 8021b08:	6863      	ldr	r3, [r4, #4]
 8021b0a:	bf08      	it	eq
 8021b0c:	f8c8 1000 	streq.w	r1, [r8]
 8021b10:	5162      	str	r2, [r4, r5]
 8021b12:	604b      	str	r3, [r1, #4]
 8021b14:	4630      	mov	r0, r6
 8021b16:	f000 f82f 	bl	8021b78 <__malloc_unlock>
 8021b1a:	f104 000b 	add.w	r0, r4, #11
 8021b1e:	1d23      	adds	r3, r4, #4
 8021b20:	f020 0007 	bic.w	r0, r0, #7
 8021b24:	1ac2      	subs	r2, r0, r3
 8021b26:	bf1c      	itt	ne
 8021b28:	1a1b      	subne	r3, r3, r0
 8021b2a:	50a3      	strne	r3, [r4, r2]
 8021b2c:	e7af      	b.n	8021a8e <_malloc_r+0x22>
 8021b2e:	6862      	ldr	r2, [r4, #4]
 8021b30:	42a3      	cmp	r3, r4
 8021b32:	bf0c      	ite	eq
 8021b34:	f8c8 2000 	streq.w	r2, [r8]
 8021b38:	605a      	strne	r2, [r3, #4]
 8021b3a:	e7eb      	b.n	8021b14 <_malloc_r+0xa8>
 8021b3c:	4623      	mov	r3, r4
 8021b3e:	6864      	ldr	r4, [r4, #4]
 8021b40:	e7ae      	b.n	8021aa0 <_malloc_r+0x34>
 8021b42:	463c      	mov	r4, r7
 8021b44:	687f      	ldr	r7, [r7, #4]
 8021b46:	e7b6      	b.n	8021ab6 <_malloc_r+0x4a>
 8021b48:	461a      	mov	r2, r3
 8021b4a:	685b      	ldr	r3, [r3, #4]
 8021b4c:	42a3      	cmp	r3, r4
 8021b4e:	d1fb      	bne.n	8021b48 <_malloc_r+0xdc>
 8021b50:	2300      	movs	r3, #0
 8021b52:	6053      	str	r3, [r2, #4]
 8021b54:	e7de      	b.n	8021b14 <_malloc_r+0xa8>
 8021b56:	230c      	movs	r3, #12
 8021b58:	6033      	str	r3, [r6, #0]
 8021b5a:	4630      	mov	r0, r6
 8021b5c:	f000 f80c 	bl	8021b78 <__malloc_unlock>
 8021b60:	e794      	b.n	8021a8c <_malloc_r+0x20>
 8021b62:	6005      	str	r5, [r0, #0]
 8021b64:	e7d6      	b.n	8021b14 <_malloc_r+0xa8>
 8021b66:	bf00      	nop
 8021b68:	2002d94c 	.word	0x2002d94c

08021b6c <__malloc_lock>:
 8021b6c:	4801      	ldr	r0, [pc, #4]	@ (8021b74 <__malloc_lock+0x8>)
 8021b6e:	f7ff beda 	b.w	8021926 <__retarget_lock_acquire_recursive>
 8021b72:	bf00      	nop
 8021b74:	2002d944 	.word	0x2002d944

08021b78 <__malloc_unlock>:
 8021b78:	4801      	ldr	r0, [pc, #4]	@ (8021b80 <__malloc_unlock+0x8>)
 8021b7a:	f7ff bed5 	b.w	8021928 <__retarget_lock_release_recursive>
 8021b7e:	bf00      	nop
 8021b80:	2002d944 	.word	0x2002d944

08021b84 <__sfputc_r>:
 8021b84:	6893      	ldr	r3, [r2, #8]
 8021b86:	3b01      	subs	r3, #1
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	b410      	push	{r4}
 8021b8c:	6093      	str	r3, [r2, #8]
 8021b8e:	da08      	bge.n	8021ba2 <__sfputc_r+0x1e>
 8021b90:	6994      	ldr	r4, [r2, #24]
 8021b92:	42a3      	cmp	r3, r4
 8021b94:	db01      	blt.n	8021b9a <__sfputc_r+0x16>
 8021b96:	290a      	cmp	r1, #10
 8021b98:	d103      	bne.n	8021ba2 <__sfputc_r+0x1e>
 8021b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021b9e:	f7ff bdaa 	b.w	80216f6 <__swbuf_r>
 8021ba2:	6813      	ldr	r3, [r2, #0]
 8021ba4:	1c58      	adds	r0, r3, #1
 8021ba6:	6010      	str	r0, [r2, #0]
 8021ba8:	7019      	strb	r1, [r3, #0]
 8021baa:	4608      	mov	r0, r1
 8021bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021bb0:	4770      	bx	lr

08021bb2 <__sfputs_r>:
 8021bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bb4:	4606      	mov	r6, r0
 8021bb6:	460f      	mov	r7, r1
 8021bb8:	4614      	mov	r4, r2
 8021bba:	18d5      	adds	r5, r2, r3
 8021bbc:	42ac      	cmp	r4, r5
 8021bbe:	d101      	bne.n	8021bc4 <__sfputs_r+0x12>
 8021bc0:	2000      	movs	r0, #0
 8021bc2:	e007      	b.n	8021bd4 <__sfputs_r+0x22>
 8021bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021bc8:	463a      	mov	r2, r7
 8021bca:	4630      	mov	r0, r6
 8021bcc:	f7ff ffda 	bl	8021b84 <__sfputc_r>
 8021bd0:	1c43      	adds	r3, r0, #1
 8021bd2:	d1f3      	bne.n	8021bbc <__sfputs_r+0xa>
 8021bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021bd8 <_vfiprintf_r>:
 8021bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bdc:	460d      	mov	r5, r1
 8021bde:	b09d      	sub	sp, #116	@ 0x74
 8021be0:	4614      	mov	r4, r2
 8021be2:	4698      	mov	r8, r3
 8021be4:	4606      	mov	r6, r0
 8021be6:	b118      	cbz	r0, 8021bf0 <_vfiprintf_r+0x18>
 8021be8:	6a03      	ldr	r3, [r0, #32]
 8021bea:	b90b      	cbnz	r3, 8021bf0 <_vfiprintf_r+0x18>
 8021bec:	f7ff fc92 	bl	8021514 <__sinit>
 8021bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021bf2:	07d9      	lsls	r1, r3, #31
 8021bf4:	d405      	bmi.n	8021c02 <_vfiprintf_r+0x2a>
 8021bf6:	89ab      	ldrh	r3, [r5, #12]
 8021bf8:	059a      	lsls	r2, r3, #22
 8021bfa:	d402      	bmi.n	8021c02 <_vfiprintf_r+0x2a>
 8021bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021bfe:	f7ff fe92 	bl	8021926 <__retarget_lock_acquire_recursive>
 8021c02:	89ab      	ldrh	r3, [r5, #12]
 8021c04:	071b      	lsls	r3, r3, #28
 8021c06:	d501      	bpl.n	8021c0c <_vfiprintf_r+0x34>
 8021c08:	692b      	ldr	r3, [r5, #16]
 8021c0a:	b99b      	cbnz	r3, 8021c34 <_vfiprintf_r+0x5c>
 8021c0c:	4629      	mov	r1, r5
 8021c0e:	4630      	mov	r0, r6
 8021c10:	f7ff fdb0 	bl	8021774 <__swsetup_r>
 8021c14:	b170      	cbz	r0, 8021c34 <_vfiprintf_r+0x5c>
 8021c16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021c18:	07dc      	lsls	r4, r3, #31
 8021c1a:	d504      	bpl.n	8021c26 <_vfiprintf_r+0x4e>
 8021c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021c20:	b01d      	add	sp, #116	@ 0x74
 8021c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c26:	89ab      	ldrh	r3, [r5, #12]
 8021c28:	0598      	lsls	r0, r3, #22
 8021c2a:	d4f7      	bmi.n	8021c1c <_vfiprintf_r+0x44>
 8021c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021c2e:	f7ff fe7b 	bl	8021928 <__retarget_lock_release_recursive>
 8021c32:	e7f3      	b.n	8021c1c <_vfiprintf_r+0x44>
 8021c34:	2300      	movs	r3, #0
 8021c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c38:	2320      	movs	r3, #32
 8021c3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021c42:	2330      	movs	r3, #48	@ 0x30
 8021c44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021df4 <_vfiprintf_r+0x21c>
 8021c48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021c4c:	f04f 0901 	mov.w	r9, #1
 8021c50:	4623      	mov	r3, r4
 8021c52:	469a      	mov	sl, r3
 8021c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021c58:	b10a      	cbz	r2, 8021c5e <_vfiprintf_r+0x86>
 8021c5a:	2a25      	cmp	r2, #37	@ 0x25
 8021c5c:	d1f9      	bne.n	8021c52 <_vfiprintf_r+0x7a>
 8021c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8021c62:	d00b      	beq.n	8021c7c <_vfiprintf_r+0xa4>
 8021c64:	465b      	mov	r3, fp
 8021c66:	4622      	mov	r2, r4
 8021c68:	4629      	mov	r1, r5
 8021c6a:	4630      	mov	r0, r6
 8021c6c:	f7ff ffa1 	bl	8021bb2 <__sfputs_r>
 8021c70:	3001      	adds	r0, #1
 8021c72:	f000 80a7 	beq.w	8021dc4 <_vfiprintf_r+0x1ec>
 8021c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c78:	445a      	add	r2, fp
 8021c7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8021c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	f000 809f 	beq.w	8021dc4 <_vfiprintf_r+0x1ec>
 8021c86:	2300      	movs	r3, #0
 8021c88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021c90:	f10a 0a01 	add.w	sl, sl, #1
 8021c94:	9304      	str	r3, [sp, #16]
 8021c96:	9307      	str	r3, [sp, #28]
 8021c98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021c9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8021c9e:	4654      	mov	r4, sl
 8021ca0:	2205      	movs	r2, #5
 8021ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ca6:	4853      	ldr	r0, [pc, #332]	@ (8021df4 <_vfiprintf_r+0x21c>)
 8021ca8:	f7de fab2 	bl	8000210 <memchr>
 8021cac:	9a04      	ldr	r2, [sp, #16]
 8021cae:	b9d8      	cbnz	r0, 8021ce8 <_vfiprintf_r+0x110>
 8021cb0:	06d1      	lsls	r1, r2, #27
 8021cb2:	bf44      	itt	mi
 8021cb4:	2320      	movmi	r3, #32
 8021cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021cba:	0713      	lsls	r3, r2, #28
 8021cbc:	bf44      	itt	mi
 8021cbe:	232b      	movmi	r3, #43	@ 0x2b
 8021cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8021cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8021cca:	d015      	beq.n	8021cf8 <_vfiprintf_r+0x120>
 8021ccc:	9a07      	ldr	r2, [sp, #28]
 8021cce:	4654      	mov	r4, sl
 8021cd0:	2000      	movs	r0, #0
 8021cd2:	f04f 0c0a 	mov.w	ip, #10
 8021cd6:	4621      	mov	r1, r4
 8021cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021cdc:	3b30      	subs	r3, #48	@ 0x30
 8021cde:	2b09      	cmp	r3, #9
 8021ce0:	d94b      	bls.n	8021d7a <_vfiprintf_r+0x1a2>
 8021ce2:	b1b0      	cbz	r0, 8021d12 <_vfiprintf_r+0x13a>
 8021ce4:	9207      	str	r2, [sp, #28]
 8021ce6:	e014      	b.n	8021d12 <_vfiprintf_r+0x13a>
 8021ce8:	eba0 0308 	sub.w	r3, r0, r8
 8021cec:	fa09 f303 	lsl.w	r3, r9, r3
 8021cf0:	4313      	orrs	r3, r2
 8021cf2:	9304      	str	r3, [sp, #16]
 8021cf4:	46a2      	mov	sl, r4
 8021cf6:	e7d2      	b.n	8021c9e <_vfiprintf_r+0xc6>
 8021cf8:	9b03      	ldr	r3, [sp, #12]
 8021cfa:	1d19      	adds	r1, r3, #4
 8021cfc:	681b      	ldr	r3, [r3, #0]
 8021cfe:	9103      	str	r1, [sp, #12]
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	bfbb      	ittet	lt
 8021d04:	425b      	neglt	r3, r3
 8021d06:	f042 0202 	orrlt.w	r2, r2, #2
 8021d0a:	9307      	strge	r3, [sp, #28]
 8021d0c:	9307      	strlt	r3, [sp, #28]
 8021d0e:	bfb8      	it	lt
 8021d10:	9204      	strlt	r2, [sp, #16]
 8021d12:	7823      	ldrb	r3, [r4, #0]
 8021d14:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d16:	d10a      	bne.n	8021d2e <_vfiprintf_r+0x156>
 8021d18:	7863      	ldrb	r3, [r4, #1]
 8021d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8021d1c:	d132      	bne.n	8021d84 <_vfiprintf_r+0x1ac>
 8021d1e:	9b03      	ldr	r3, [sp, #12]
 8021d20:	1d1a      	adds	r2, r3, #4
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	9203      	str	r2, [sp, #12]
 8021d26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021d2a:	3402      	adds	r4, #2
 8021d2c:	9305      	str	r3, [sp, #20]
 8021d2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021e04 <_vfiprintf_r+0x22c>
 8021d32:	7821      	ldrb	r1, [r4, #0]
 8021d34:	2203      	movs	r2, #3
 8021d36:	4650      	mov	r0, sl
 8021d38:	f7de fa6a 	bl	8000210 <memchr>
 8021d3c:	b138      	cbz	r0, 8021d4e <_vfiprintf_r+0x176>
 8021d3e:	9b04      	ldr	r3, [sp, #16]
 8021d40:	eba0 000a 	sub.w	r0, r0, sl
 8021d44:	2240      	movs	r2, #64	@ 0x40
 8021d46:	4082      	lsls	r2, r0
 8021d48:	4313      	orrs	r3, r2
 8021d4a:	3401      	adds	r4, #1
 8021d4c:	9304      	str	r3, [sp, #16]
 8021d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d52:	4829      	ldr	r0, [pc, #164]	@ (8021df8 <_vfiprintf_r+0x220>)
 8021d54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021d58:	2206      	movs	r2, #6
 8021d5a:	f7de fa59 	bl	8000210 <memchr>
 8021d5e:	2800      	cmp	r0, #0
 8021d60:	d03f      	beq.n	8021de2 <_vfiprintf_r+0x20a>
 8021d62:	4b26      	ldr	r3, [pc, #152]	@ (8021dfc <_vfiprintf_r+0x224>)
 8021d64:	bb1b      	cbnz	r3, 8021dae <_vfiprintf_r+0x1d6>
 8021d66:	9b03      	ldr	r3, [sp, #12]
 8021d68:	3307      	adds	r3, #7
 8021d6a:	f023 0307 	bic.w	r3, r3, #7
 8021d6e:	3308      	adds	r3, #8
 8021d70:	9303      	str	r3, [sp, #12]
 8021d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d74:	443b      	add	r3, r7
 8021d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d78:	e76a      	b.n	8021c50 <_vfiprintf_r+0x78>
 8021d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8021d7e:	460c      	mov	r4, r1
 8021d80:	2001      	movs	r0, #1
 8021d82:	e7a8      	b.n	8021cd6 <_vfiprintf_r+0xfe>
 8021d84:	2300      	movs	r3, #0
 8021d86:	3401      	adds	r4, #1
 8021d88:	9305      	str	r3, [sp, #20]
 8021d8a:	4619      	mov	r1, r3
 8021d8c:	f04f 0c0a 	mov.w	ip, #10
 8021d90:	4620      	mov	r0, r4
 8021d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d96:	3a30      	subs	r2, #48	@ 0x30
 8021d98:	2a09      	cmp	r2, #9
 8021d9a:	d903      	bls.n	8021da4 <_vfiprintf_r+0x1cc>
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d0c6      	beq.n	8021d2e <_vfiprintf_r+0x156>
 8021da0:	9105      	str	r1, [sp, #20]
 8021da2:	e7c4      	b.n	8021d2e <_vfiprintf_r+0x156>
 8021da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8021da8:	4604      	mov	r4, r0
 8021daa:	2301      	movs	r3, #1
 8021dac:	e7f0      	b.n	8021d90 <_vfiprintf_r+0x1b8>
 8021dae:	ab03      	add	r3, sp, #12
 8021db0:	9300      	str	r3, [sp, #0]
 8021db2:	462a      	mov	r2, r5
 8021db4:	4b12      	ldr	r3, [pc, #72]	@ (8021e00 <_vfiprintf_r+0x228>)
 8021db6:	a904      	add	r1, sp, #16
 8021db8:	4630      	mov	r0, r6
 8021dba:	f3af 8000 	nop.w
 8021dbe:	4607      	mov	r7, r0
 8021dc0:	1c78      	adds	r0, r7, #1
 8021dc2:	d1d6      	bne.n	8021d72 <_vfiprintf_r+0x19a>
 8021dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021dc6:	07d9      	lsls	r1, r3, #31
 8021dc8:	d405      	bmi.n	8021dd6 <_vfiprintf_r+0x1fe>
 8021dca:	89ab      	ldrh	r3, [r5, #12]
 8021dcc:	059a      	lsls	r2, r3, #22
 8021dce:	d402      	bmi.n	8021dd6 <_vfiprintf_r+0x1fe>
 8021dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021dd2:	f7ff fda9 	bl	8021928 <__retarget_lock_release_recursive>
 8021dd6:	89ab      	ldrh	r3, [r5, #12]
 8021dd8:	065b      	lsls	r3, r3, #25
 8021dda:	f53f af1f 	bmi.w	8021c1c <_vfiprintf_r+0x44>
 8021dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021de0:	e71e      	b.n	8021c20 <_vfiprintf_r+0x48>
 8021de2:	ab03      	add	r3, sp, #12
 8021de4:	9300      	str	r3, [sp, #0]
 8021de6:	462a      	mov	r2, r5
 8021de8:	4b05      	ldr	r3, [pc, #20]	@ (8021e00 <_vfiprintf_r+0x228>)
 8021dea:	a904      	add	r1, sp, #16
 8021dec:	4630      	mov	r0, r6
 8021dee:	f000 f879 	bl	8021ee4 <_printf_i>
 8021df2:	e7e4      	b.n	8021dbe <_vfiprintf_r+0x1e6>
 8021df4:	080274cd 	.word	0x080274cd
 8021df8:	080274d7 	.word	0x080274d7
 8021dfc:	00000000 	.word	0x00000000
 8021e00:	08021bb3 	.word	0x08021bb3
 8021e04:	080274d3 	.word	0x080274d3

08021e08 <_printf_common>:
 8021e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e0c:	4616      	mov	r6, r2
 8021e0e:	4698      	mov	r8, r3
 8021e10:	688a      	ldr	r2, [r1, #8]
 8021e12:	690b      	ldr	r3, [r1, #16]
 8021e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021e18:	4293      	cmp	r3, r2
 8021e1a:	bfb8      	it	lt
 8021e1c:	4613      	movlt	r3, r2
 8021e1e:	6033      	str	r3, [r6, #0]
 8021e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021e24:	4607      	mov	r7, r0
 8021e26:	460c      	mov	r4, r1
 8021e28:	b10a      	cbz	r2, 8021e2e <_printf_common+0x26>
 8021e2a:	3301      	adds	r3, #1
 8021e2c:	6033      	str	r3, [r6, #0]
 8021e2e:	6823      	ldr	r3, [r4, #0]
 8021e30:	0699      	lsls	r1, r3, #26
 8021e32:	bf42      	ittt	mi
 8021e34:	6833      	ldrmi	r3, [r6, #0]
 8021e36:	3302      	addmi	r3, #2
 8021e38:	6033      	strmi	r3, [r6, #0]
 8021e3a:	6825      	ldr	r5, [r4, #0]
 8021e3c:	f015 0506 	ands.w	r5, r5, #6
 8021e40:	d106      	bne.n	8021e50 <_printf_common+0x48>
 8021e42:	f104 0a19 	add.w	sl, r4, #25
 8021e46:	68e3      	ldr	r3, [r4, #12]
 8021e48:	6832      	ldr	r2, [r6, #0]
 8021e4a:	1a9b      	subs	r3, r3, r2
 8021e4c:	42ab      	cmp	r3, r5
 8021e4e:	dc26      	bgt.n	8021e9e <_printf_common+0x96>
 8021e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021e54:	6822      	ldr	r2, [r4, #0]
 8021e56:	3b00      	subs	r3, #0
 8021e58:	bf18      	it	ne
 8021e5a:	2301      	movne	r3, #1
 8021e5c:	0692      	lsls	r2, r2, #26
 8021e5e:	d42b      	bmi.n	8021eb8 <_printf_common+0xb0>
 8021e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021e64:	4641      	mov	r1, r8
 8021e66:	4638      	mov	r0, r7
 8021e68:	47c8      	blx	r9
 8021e6a:	3001      	adds	r0, #1
 8021e6c:	d01e      	beq.n	8021eac <_printf_common+0xa4>
 8021e6e:	6823      	ldr	r3, [r4, #0]
 8021e70:	6922      	ldr	r2, [r4, #16]
 8021e72:	f003 0306 	and.w	r3, r3, #6
 8021e76:	2b04      	cmp	r3, #4
 8021e78:	bf02      	ittt	eq
 8021e7a:	68e5      	ldreq	r5, [r4, #12]
 8021e7c:	6833      	ldreq	r3, [r6, #0]
 8021e7e:	1aed      	subeq	r5, r5, r3
 8021e80:	68a3      	ldr	r3, [r4, #8]
 8021e82:	bf0c      	ite	eq
 8021e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021e88:	2500      	movne	r5, #0
 8021e8a:	4293      	cmp	r3, r2
 8021e8c:	bfc4      	itt	gt
 8021e8e:	1a9b      	subgt	r3, r3, r2
 8021e90:	18ed      	addgt	r5, r5, r3
 8021e92:	2600      	movs	r6, #0
 8021e94:	341a      	adds	r4, #26
 8021e96:	42b5      	cmp	r5, r6
 8021e98:	d11a      	bne.n	8021ed0 <_printf_common+0xc8>
 8021e9a:	2000      	movs	r0, #0
 8021e9c:	e008      	b.n	8021eb0 <_printf_common+0xa8>
 8021e9e:	2301      	movs	r3, #1
 8021ea0:	4652      	mov	r2, sl
 8021ea2:	4641      	mov	r1, r8
 8021ea4:	4638      	mov	r0, r7
 8021ea6:	47c8      	blx	r9
 8021ea8:	3001      	adds	r0, #1
 8021eaa:	d103      	bne.n	8021eb4 <_printf_common+0xac>
 8021eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021eb4:	3501      	adds	r5, #1
 8021eb6:	e7c6      	b.n	8021e46 <_printf_common+0x3e>
 8021eb8:	18e1      	adds	r1, r4, r3
 8021eba:	1c5a      	adds	r2, r3, #1
 8021ebc:	2030      	movs	r0, #48	@ 0x30
 8021ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021ec2:	4422      	add	r2, r4
 8021ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021ecc:	3302      	adds	r3, #2
 8021ece:	e7c7      	b.n	8021e60 <_printf_common+0x58>
 8021ed0:	2301      	movs	r3, #1
 8021ed2:	4622      	mov	r2, r4
 8021ed4:	4641      	mov	r1, r8
 8021ed6:	4638      	mov	r0, r7
 8021ed8:	47c8      	blx	r9
 8021eda:	3001      	adds	r0, #1
 8021edc:	d0e6      	beq.n	8021eac <_printf_common+0xa4>
 8021ede:	3601      	adds	r6, #1
 8021ee0:	e7d9      	b.n	8021e96 <_printf_common+0x8e>
	...

08021ee4 <_printf_i>:
 8021ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021ee8:	7e0f      	ldrb	r7, [r1, #24]
 8021eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021eec:	2f78      	cmp	r7, #120	@ 0x78
 8021eee:	4691      	mov	r9, r2
 8021ef0:	4680      	mov	r8, r0
 8021ef2:	460c      	mov	r4, r1
 8021ef4:	469a      	mov	sl, r3
 8021ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021efa:	d807      	bhi.n	8021f0c <_printf_i+0x28>
 8021efc:	2f62      	cmp	r7, #98	@ 0x62
 8021efe:	d80a      	bhi.n	8021f16 <_printf_i+0x32>
 8021f00:	2f00      	cmp	r7, #0
 8021f02:	f000 80d1 	beq.w	80220a8 <_printf_i+0x1c4>
 8021f06:	2f58      	cmp	r7, #88	@ 0x58
 8021f08:	f000 80b8 	beq.w	802207c <_printf_i+0x198>
 8021f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021f14:	e03a      	b.n	8021f8c <_printf_i+0xa8>
 8021f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021f1a:	2b15      	cmp	r3, #21
 8021f1c:	d8f6      	bhi.n	8021f0c <_printf_i+0x28>
 8021f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8021f24 <_printf_i+0x40>)
 8021f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021f24:	08021f7d 	.word	0x08021f7d
 8021f28:	08021f91 	.word	0x08021f91
 8021f2c:	08021f0d 	.word	0x08021f0d
 8021f30:	08021f0d 	.word	0x08021f0d
 8021f34:	08021f0d 	.word	0x08021f0d
 8021f38:	08021f0d 	.word	0x08021f0d
 8021f3c:	08021f91 	.word	0x08021f91
 8021f40:	08021f0d 	.word	0x08021f0d
 8021f44:	08021f0d 	.word	0x08021f0d
 8021f48:	08021f0d 	.word	0x08021f0d
 8021f4c:	08021f0d 	.word	0x08021f0d
 8021f50:	0802208f 	.word	0x0802208f
 8021f54:	08021fbb 	.word	0x08021fbb
 8021f58:	08022049 	.word	0x08022049
 8021f5c:	08021f0d 	.word	0x08021f0d
 8021f60:	08021f0d 	.word	0x08021f0d
 8021f64:	080220b1 	.word	0x080220b1
 8021f68:	08021f0d 	.word	0x08021f0d
 8021f6c:	08021fbb 	.word	0x08021fbb
 8021f70:	08021f0d 	.word	0x08021f0d
 8021f74:	08021f0d 	.word	0x08021f0d
 8021f78:	08022051 	.word	0x08022051
 8021f7c:	6833      	ldr	r3, [r6, #0]
 8021f7e:	1d1a      	adds	r2, r3, #4
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	6032      	str	r2, [r6, #0]
 8021f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021f8c:	2301      	movs	r3, #1
 8021f8e:	e09c      	b.n	80220ca <_printf_i+0x1e6>
 8021f90:	6833      	ldr	r3, [r6, #0]
 8021f92:	6820      	ldr	r0, [r4, #0]
 8021f94:	1d19      	adds	r1, r3, #4
 8021f96:	6031      	str	r1, [r6, #0]
 8021f98:	0606      	lsls	r6, r0, #24
 8021f9a:	d501      	bpl.n	8021fa0 <_printf_i+0xbc>
 8021f9c:	681d      	ldr	r5, [r3, #0]
 8021f9e:	e003      	b.n	8021fa8 <_printf_i+0xc4>
 8021fa0:	0645      	lsls	r5, r0, #25
 8021fa2:	d5fb      	bpl.n	8021f9c <_printf_i+0xb8>
 8021fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021fa8:	2d00      	cmp	r5, #0
 8021faa:	da03      	bge.n	8021fb4 <_printf_i+0xd0>
 8021fac:	232d      	movs	r3, #45	@ 0x2d
 8021fae:	426d      	negs	r5, r5
 8021fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021fb4:	4858      	ldr	r0, [pc, #352]	@ (8022118 <_printf_i+0x234>)
 8021fb6:	230a      	movs	r3, #10
 8021fb8:	e011      	b.n	8021fde <_printf_i+0xfa>
 8021fba:	6821      	ldr	r1, [r4, #0]
 8021fbc:	6833      	ldr	r3, [r6, #0]
 8021fbe:	0608      	lsls	r0, r1, #24
 8021fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8021fc4:	d402      	bmi.n	8021fcc <_printf_i+0xe8>
 8021fc6:	0649      	lsls	r1, r1, #25
 8021fc8:	bf48      	it	mi
 8021fca:	b2ad      	uxthmi	r5, r5
 8021fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8021fce:	4852      	ldr	r0, [pc, #328]	@ (8022118 <_printf_i+0x234>)
 8021fd0:	6033      	str	r3, [r6, #0]
 8021fd2:	bf14      	ite	ne
 8021fd4:	230a      	movne	r3, #10
 8021fd6:	2308      	moveq	r3, #8
 8021fd8:	2100      	movs	r1, #0
 8021fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021fde:	6866      	ldr	r6, [r4, #4]
 8021fe0:	60a6      	str	r6, [r4, #8]
 8021fe2:	2e00      	cmp	r6, #0
 8021fe4:	db05      	blt.n	8021ff2 <_printf_i+0x10e>
 8021fe6:	6821      	ldr	r1, [r4, #0]
 8021fe8:	432e      	orrs	r6, r5
 8021fea:	f021 0104 	bic.w	r1, r1, #4
 8021fee:	6021      	str	r1, [r4, #0]
 8021ff0:	d04b      	beq.n	802208a <_printf_i+0x1a6>
 8021ff2:	4616      	mov	r6, r2
 8021ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8021ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8021ffc:	5dc7      	ldrb	r7, [r0, r7]
 8021ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022002:	462f      	mov	r7, r5
 8022004:	42bb      	cmp	r3, r7
 8022006:	460d      	mov	r5, r1
 8022008:	d9f4      	bls.n	8021ff4 <_printf_i+0x110>
 802200a:	2b08      	cmp	r3, #8
 802200c:	d10b      	bne.n	8022026 <_printf_i+0x142>
 802200e:	6823      	ldr	r3, [r4, #0]
 8022010:	07df      	lsls	r7, r3, #31
 8022012:	d508      	bpl.n	8022026 <_printf_i+0x142>
 8022014:	6923      	ldr	r3, [r4, #16]
 8022016:	6861      	ldr	r1, [r4, #4]
 8022018:	4299      	cmp	r1, r3
 802201a:	bfde      	ittt	le
 802201c:	2330      	movle	r3, #48	@ 0x30
 802201e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022022:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022026:	1b92      	subs	r2, r2, r6
 8022028:	6122      	str	r2, [r4, #16]
 802202a:	f8cd a000 	str.w	sl, [sp]
 802202e:	464b      	mov	r3, r9
 8022030:	aa03      	add	r2, sp, #12
 8022032:	4621      	mov	r1, r4
 8022034:	4640      	mov	r0, r8
 8022036:	f7ff fee7 	bl	8021e08 <_printf_common>
 802203a:	3001      	adds	r0, #1
 802203c:	d14a      	bne.n	80220d4 <_printf_i+0x1f0>
 802203e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022042:	b004      	add	sp, #16
 8022044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022048:	6823      	ldr	r3, [r4, #0]
 802204a:	f043 0320 	orr.w	r3, r3, #32
 802204e:	6023      	str	r3, [r4, #0]
 8022050:	4832      	ldr	r0, [pc, #200]	@ (802211c <_printf_i+0x238>)
 8022052:	2778      	movs	r7, #120	@ 0x78
 8022054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022058:	6823      	ldr	r3, [r4, #0]
 802205a:	6831      	ldr	r1, [r6, #0]
 802205c:	061f      	lsls	r7, r3, #24
 802205e:	f851 5b04 	ldr.w	r5, [r1], #4
 8022062:	d402      	bmi.n	802206a <_printf_i+0x186>
 8022064:	065f      	lsls	r7, r3, #25
 8022066:	bf48      	it	mi
 8022068:	b2ad      	uxthmi	r5, r5
 802206a:	6031      	str	r1, [r6, #0]
 802206c:	07d9      	lsls	r1, r3, #31
 802206e:	bf44      	itt	mi
 8022070:	f043 0320 	orrmi.w	r3, r3, #32
 8022074:	6023      	strmi	r3, [r4, #0]
 8022076:	b11d      	cbz	r5, 8022080 <_printf_i+0x19c>
 8022078:	2310      	movs	r3, #16
 802207a:	e7ad      	b.n	8021fd8 <_printf_i+0xf4>
 802207c:	4826      	ldr	r0, [pc, #152]	@ (8022118 <_printf_i+0x234>)
 802207e:	e7e9      	b.n	8022054 <_printf_i+0x170>
 8022080:	6823      	ldr	r3, [r4, #0]
 8022082:	f023 0320 	bic.w	r3, r3, #32
 8022086:	6023      	str	r3, [r4, #0]
 8022088:	e7f6      	b.n	8022078 <_printf_i+0x194>
 802208a:	4616      	mov	r6, r2
 802208c:	e7bd      	b.n	802200a <_printf_i+0x126>
 802208e:	6833      	ldr	r3, [r6, #0]
 8022090:	6825      	ldr	r5, [r4, #0]
 8022092:	6961      	ldr	r1, [r4, #20]
 8022094:	1d18      	adds	r0, r3, #4
 8022096:	6030      	str	r0, [r6, #0]
 8022098:	062e      	lsls	r6, r5, #24
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	d501      	bpl.n	80220a2 <_printf_i+0x1be>
 802209e:	6019      	str	r1, [r3, #0]
 80220a0:	e002      	b.n	80220a8 <_printf_i+0x1c4>
 80220a2:	0668      	lsls	r0, r5, #25
 80220a4:	d5fb      	bpl.n	802209e <_printf_i+0x1ba>
 80220a6:	8019      	strh	r1, [r3, #0]
 80220a8:	2300      	movs	r3, #0
 80220aa:	6123      	str	r3, [r4, #16]
 80220ac:	4616      	mov	r6, r2
 80220ae:	e7bc      	b.n	802202a <_printf_i+0x146>
 80220b0:	6833      	ldr	r3, [r6, #0]
 80220b2:	1d1a      	adds	r2, r3, #4
 80220b4:	6032      	str	r2, [r6, #0]
 80220b6:	681e      	ldr	r6, [r3, #0]
 80220b8:	6862      	ldr	r2, [r4, #4]
 80220ba:	2100      	movs	r1, #0
 80220bc:	4630      	mov	r0, r6
 80220be:	f7de f8a7 	bl	8000210 <memchr>
 80220c2:	b108      	cbz	r0, 80220c8 <_printf_i+0x1e4>
 80220c4:	1b80      	subs	r0, r0, r6
 80220c6:	6060      	str	r0, [r4, #4]
 80220c8:	6863      	ldr	r3, [r4, #4]
 80220ca:	6123      	str	r3, [r4, #16]
 80220cc:	2300      	movs	r3, #0
 80220ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80220d2:	e7aa      	b.n	802202a <_printf_i+0x146>
 80220d4:	6923      	ldr	r3, [r4, #16]
 80220d6:	4632      	mov	r2, r6
 80220d8:	4649      	mov	r1, r9
 80220da:	4640      	mov	r0, r8
 80220dc:	47d0      	blx	sl
 80220de:	3001      	adds	r0, #1
 80220e0:	d0ad      	beq.n	802203e <_printf_i+0x15a>
 80220e2:	6823      	ldr	r3, [r4, #0]
 80220e4:	079b      	lsls	r3, r3, #30
 80220e6:	d413      	bmi.n	8022110 <_printf_i+0x22c>
 80220e8:	68e0      	ldr	r0, [r4, #12]
 80220ea:	9b03      	ldr	r3, [sp, #12]
 80220ec:	4298      	cmp	r0, r3
 80220ee:	bfb8      	it	lt
 80220f0:	4618      	movlt	r0, r3
 80220f2:	e7a6      	b.n	8022042 <_printf_i+0x15e>
 80220f4:	2301      	movs	r3, #1
 80220f6:	4632      	mov	r2, r6
 80220f8:	4649      	mov	r1, r9
 80220fa:	4640      	mov	r0, r8
 80220fc:	47d0      	blx	sl
 80220fe:	3001      	adds	r0, #1
 8022100:	d09d      	beq.n	802203e <_printf_i+0x15a>
 8022102:	3501      	adds	r5, #1
 8022104:	68e3      	ldr	r3, [r4, #12]
 8022106:	9903      	ldr	r1, [sp, #12]
 8022108:	1a5b      	subs	r3, r3, r1
 802210a:	42ab      	cmp	r3, r5
 802210c:	dcf2      	bgt.n	80220f4 <_printf_i+0x210>
 802210e:	e7eb      	b.n	80220e8 <_printf_i+0x204>
 8022110:	2500      	movs	r5, #0
 8022112:	f104 0619 	add.w	r6, r4, #25
 8022116:	e7f5      	b.n	8022104 <_printf_i+0x220>
 8022118:	080274de 	.word	0x080274de
 802211c:	080274ef 	.word	0x080274ef

08022120 <__sflush_r>:
 8022120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022128:	0716      	lsls	r6, r2, #28
 802212a:	4605      	mov	r5, r0
 802212c:	460c      	mov	r4, r1
 802212e:	d454      	bmi.n	80221da <__sflush_r+0xba>
 8022130:	684b      	ldr	r3, [r1, #4]
 8022132:	2b00      	cmp	r3, #0
 8022134:	dc02      	bgt.n	802213c <__sflush_r+0x1c>
 8022136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022138:	2b00      	cmp	r3, #0
 802213a:	dd48      	ble.n	80221ce <__sflush_r+0xae>
 802213c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802213e:	2e00      	cmp	r6, #0
 8022140:	d045      	beq.n	80221ce <__sflush_r+0xae>
 8022142:	2300      	movs	r3, #0
 8022144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022148:	682f      	ldr	r7, [r5, #0]
 802214a:	6a21      	ldr	r1, [r4, #32]
 802214c:	602b      	str	r3, [r5, #0]
 802214e:	d030      	beq.n	80221b2 <__sflush_r+0x92>
 8022150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022152:	89a3      	ldrh	r3, [r4, #12]
 8022154:	0759      	lsls	r1, r3, #29
 8022156:	d505      	bpl.n	8022164 <__sflush_r+0x44>
 8022158:	6863      	ldr	r3, [r4, #4]
 802215a:	1ad2      	subs	r2, r2, r3
 802215c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802215e:	b10b      	cbz	r3, 8022164 <__sflush_r+0x44>
 8022160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022162:	1ad2      	subs	r2, r2, r3
 8022164:	2300      	movs	r3, #0
 8022166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022168:	6a21      	ldr	r1, [r4, #32]
 802216a:	4628      	mov	r0, r5
 802216c:	47b0      	blx	r6
 802216e:	1c43      	adds	r3, r0, #1
 8022170:	89a3      	ldrh	r3, [r4, #12]
 8022172:	d106      	bne.n	8022182 <__sflush_r+0x62>
 8022174:	6829      	ldr	r1, [r5, #0]
 8022176:	291d      	cmp	r1, #29
 8022178:	d82b      	bhi.n	80221d2 <__sflush_r+0xb2>
 802217a:	4a2a      	ldr	r2, [pc, #168]	@ (8022224 <__sflush_r+0x104>)
 802217c:	40ca      	lsrs	r2, r1
 802217e:	07d6      	lsls	r6, r2, #31
 8022180:	d527      	bpl.n	80221d2 <__sflush_r+0xb2>
 8022182:	2200      	movs	r2, #0
 8022184:	6062      	str	r2, [r4, #4]
 8022186:	04d9      	lsls	r1, r3, #19
 8022188:	6922      	ldr	r2, [r4, #16]
 802218a:	6022      	str	r2, [r4, #0]
 802218c:	d504      	bpl.n	8022198 <__sflush_r+0x78>
 802218e:	1c42      	adds	r2, r0, #1
 8022190:	d101      	bne.n	8022196 <__sflush_r+0x76>
 8022192:	682b      	ldr	r3, [r5, #0]
 8022194:	b903      	cbnz	r3, 8022198 <__sflush_r+0x78>
 8022196:	6560      	str	r0, [r4, #84]	@ 0x54
 8022198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802219a:	602f      	str	r7, [r5, #0]
 802219c:	b1b9      	cbz	r1, 80221ce <__sflush_r+0xae>
 802219e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80221a2:	4299      	cmp	r1, r3
 80221a4:	d002      	beq.n	80221ac <__sflush_r+0x8c>
 80221a6:	4628      	mov	r0, r5
 80221a8:	f7ff fbec 	bl	8021984 <_free_r>
 80221ac:	2300      	movs	r3, #0
 80221ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80221b0:	e00d      	b.n	80221ce <__sflush_r+0xae>
 80221b2:	2301      	movs	r3, #1
 80221b4:	4628      	mov	r0, r5
 80221b6:	47b0      	blx	r6
 80221b8:	4602      	mov	r2, r0
 80221ba:	1c50      	adds	r0, r2, #1
 80221bc:	d1c9      	bne.n	8022152 <__sflush_r+0x32>
 80221be:	682b      	ldr	r3, [r5, #0]
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d0c6      	beq.n	8022152 <__sflush_r+0x32>
 80221c4:	2b1d      	cmp	r3, #29
 80221c6:	d001      	beq.n	80221cc <__sflush_r+0xac>
 80221c8:	2b16      	cmp	r3, #22
 80221ca:	d11e      	bne.n	802220a <__sflush_r+0xea>
 80221cc:	602f      	str	r7, [r5, #0]
 80221ce:	2000      	movs	r0, #0
 80221d0:	e022      	b.n	8022218 <__sflush_r+0xf8>
 80221d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80221d6:	b21b      	sxth	r3, r3
 80221d8:	e01b      	b.n	8022212 <__sflush_r+0xf2>
 80221da:	690f      	ldr	r7, [r1, #16]
 80221dc:	2f00      	cmp	r7, #0
 80221de:	d0f6      	beq.n	80221ce <__sflush_r+0xae>
 80221e0:	0793      	lsls	r3, r2, #30
 80221e2:	680e      	ldr	r6, [r1, #0]
 80221e4:	bf08      	it	eq
 80221e6:	694b      	ldreq	r3, [r1, #20]
 80221e8:	600f      	str	r7, [r1, #0]
 80221ea:	bf18      	it	ne
 80221ec:	2300      	movne	r3, #0
 80221ee:	eba6 0807 	sub.w	r8, r6, r7
 80221f2:	608b      	str	r3, [r1, #8]
 80221f4:	f1b8 0f00 	cmp.w	r8, #0
 80221f8:	dde9      	ble.n	80221ce <__sflush_r+0xae>
 80221fa:	6a21      	ldr	r1, [r4, #32]
 80221fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80221fe:	4643      	mov	r3, r8
 8022200:	463a      	mov	r2, r7
 8022202:	4628      	mov	r0, r5
 8022204:	47b0      	blx	r6
 8022206:	2800      	cmp	r0, #0
 8022208:	dc08      	bgt.n	802221c <__sflush_r+0xfc>
 802220a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802220e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022212:	81a3      	strh	r3, [r4, #12]
 8022214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802221c:	4407      	add	r7, r0
 802221e:	eba8 0800 	sub.w	r8, r8, r0
 8022222:	e7e7      	b.n	80221f4 <__sflush_r+0xd4>
 8022224:	20400001 	.word	0x20400001

08022228 <_fflush_r>:
 8022228:	b538      	push	{r3, r4, r5, lr}
 802222a:	690b      	ldr	r3, [r1, #16]
 802222c:	4605      	mov	r5, r0
 802222e:	460c      	mov	r4, r1
 8022230:	b913      	cbnz	r3, 8022238 <_fflush_r+0x10>
 8022232:	2500      	movs	r5, #0
 8022234:	4628      	mov	r0, r5
 8022236:	bd38      	pop	{r3, r4, r5, pc}
 8022238:	b118      	cbz	r0, 8022242 <_fflush_r+0x1a>
 802223a:	6a03      	ldr	r3, [r0, #32]
 802223c:	b90b      	cbnz	r3, 8022242 <_fflush_r+0x1a>
 802223e:	f7ff f969 	bl	8021514 <__sinit>
 8022242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022246:	2b00      	cmp	r3, #0
 8022248:	d0f3      	beq.n	8022232 <_fflush_r+0xa>
 802224a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802224c:	07d0      	lsls	r0, r2, #31
 802224e:	d404      	bmi.n	802225a <_fflush_r+0x32>
 8022250:	0599      	lsls	r1, r3, #22
 8022252:	d402      	bmi.n	802225a <_fflush_r+0x32>
 8022254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022256:	f7ff fb66 	bl	8021926 <__retarget_lock_acquire_recursive>
 802225a:	4628      	mov	r0, r5
 802225c:	4621      	mov	r1, r4
 802225e:	f7ff ff5f 	bl	8022120 <__sflush_r>
 8022262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022264:	07da      	lsls	r2, r3, #31
 8022266:	4605      	mov	r5, r0
 8022268:	d4e4      	bmi.n	8022234 <_fflush_r+0xc>
 802226a:	89a3      	ldrh	r3, [r4, #12]
 802226c:	059b      	lsls	r3, r3, #22
 802226e:	d4e1      	bmi.n	8022234 <_fflush_r+0xc>
 8022270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022272:	f7ff fb59 	bl	8021928 <__retarget_lock_release_recursive>
 8022276:	e7dd      	b.n	8022234 <_fflush_r+0xc>

08022278 <fiprintf>:
 8022278:	b40e      	push	{r1, r2, r3}
 802227a:	b503      	push	{r0, r1, lr}
 802227c:	4601      	mov	r1, r0
 802227e:	ab03      	add	r3, sp, #12
 8022280:	4805      	ldr	r0, [pc, #20]	@ (8022298 <fiprintf+0x20>)
 8022282:	f853 2b04 	ldr.w	r2, [r3], #4
 8022286:	6800      	ldr	r0, [r0, #0]
 8022288:	9301      	str	r3, [sp, #4]
 802228a:	f7ff fca5 	bl	8021bd8 <_vfiprintf_r>
 802228e:	b002      	add	sp, #8
 8022290:	f85d eb04 	ldr.w	lr, [sp], #4
 8022294:	b003      	add	sp, #12
 8022296:	4770      	bx	lr
 8022298:	20000080 	.word	0x20000080

0802229c <__swhatbuf_r>:
 802229c:	b570      	push	{r4, r5, r6, lr}
 802229e:	460c      	mov	r4, r1
 80222a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80222a4:	2900      	cmp	r1, #0
 80222a6:	b096      	sub	sp, #88	@ 0x58
 80222a8:	4615      	mov	r5, r2
 80222aa:	461e      	mov	r6, r3
 80222ac:	da0d      	bge.n	80222ca <__swhatbuf_r+0x2e>
 80222ae:	89a3      	ldrh	r3, [r4, #12]
 80222b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80222b4:	f04f 0100 	mov.w	r1, #0
 80222b8:	bf14      	ite	ne
 80222ba:	2340      	movne	r3, #64	@ 0x40
 80222bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80222c0:	2000      	movs	r0, #0
 80222c2:	6031      	str	r1, [r6, #0]
 80222c4:	602b      	str	r3, [r5, #0]
 80222c6:	b016      	add	sp, #88	@ 0x58
 80222c8:	bd70      	pop	{r4, r5, r6, pc}
 80222ca:	466a      	mov	r2, sp
 80222cc:	f000 f87c 	bl	80223c8 <_fstat_r>
 80222d0:	2800      	cmp	r0, #0
 80222d2:	dbec      	blt.n	80222ae <__swhatbuf_r+0x12>
 80222d4:	9901      	ldr	r1, [sp, #4]
 80222d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80222da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80222de:	4259      	negs	r1, r3
 80222e0:	4159      	adcs	r1, r3
 80222e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80222e6:	e7eb      	b.n	80222c0 <__swhatbuf_r+0x24>

080222e8 <__smakebuf_r>:
 80222e8:	898b      	ldrh	r3, [r1, #12]
 80222ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80222ec:	079d      	lsls	r5, r3, #30
 80222ee:	4606      	mov	r6, r0
 80222f0:	460c      	mov	r4, r1
 80222f2:	d507      	bpl.n	8022304 <__smakebuf_r+0x1c>
 80222f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80222f8:	6023      	str	r3, [r4, #0]
 80222fa:	6123      	str	r3, [r4, #16]
 80222fc:	2301      	movs	r3, #1
 80222fe:	6163      	str	r3, [r4, #20]
 8022300:	b003      	add	sp, #12
 8022302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022304:	ab01      	add	r3, sp, #4
 8022306:	466a      	mov	r2, sp
 8022308:	f7ff ffc8 	bl	802229c <__swhatbuf_r>
 802230c:	9f00      	ldr	r7, [sp, #0]
 802230e:	4605      	mov	r5, r0
 8022310:	4639      	mov	r1, r7
 8022312:	4630      	mov	r0, r6
 8022314:	f7ff fbaa 	bl	8021a6c <_malloc_r>
 8022318:	b948      	cbnz	r0, 802232e <__smakebuf_r+0x46>
 802231a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802231e:	059a      	lsls	r2, r3, #22
 8022320:	d4ee      	bmi.n	8022300 <__smakebuf_r+0x18>
 8022322:	f023 0303 	bic.w	r3, r3, #3
 8022326:	f043 0302 	orr.w	r3, r3, #2
 802232a:	81a3      	strh	r3, [r4, #12]
 802232c:	e7e2      	b.n	80222f4 <__smakebuf_r+0xc>
 802232e:	89a3      	ldrh	r3, [r4, #12]
 8022330:	6020      	str	r0, [r4, #0]
 8022332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022336:	81a3      	strh	r3, [r4, #12]
 8022338:	9b01      	ldr	r3, [sp, #4]
 802233a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802233e:	b15b      	cbz	r3, 8022358 <__smakebuf_r+0x70>
 8022340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022344:	4630      	mov	r0, r6
 8022346:	f000 f851 	bl	80223ec <_isatty_r>
 802234a:	b128      	cbz	r0, 8022358 <__smakebuf_r+0x70>
 802234c:	89a3      	ldrh	r3, [r4, #12]
 802234e:	f023 0303 	bic.w	r3, r3, #3
 8022352:	f043 0301 	orr.w	r3, r3, #1
 8022356:	81a3      	strh	r3, [r4, #12]
 8022358:	89a3      	ldrh	r3, [r4, #12]
 802235a:	431d      	orrs	r5, r3
 802235c:	81a5      	strh	r5, [r4, #12]
 802235e:	e7cf      	b.n	8022300 <__smakebuf_r+0x18>

08022360 <_putc_r>:
 8022360:	b570      	push	{r4, r5, r6, lr}
 8022362:	460d      	mov	r5, r1
 8022364:	4614      	mov	r4, r2
 8022366:	4606      	mov	r6, r0
 8022368:	b118      	cbz	r0, 8022372 <_putc_r+0x12>
 802236a:	6a03      	ldr	r3, [r0, #32]
 802236c:	b90b      	cbnz	r3, 8022372 <_putc_r+0x12>
 802236e:	f7ff f8d1 	bl	8021514 <__sinit>
 8022372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022374:	07d8      	lsls	r0, r3, #31
 8022376:	d405      	bmi.n	8022384 <_putc_r+0x24>
 8022378:	89a3      	ldrh	r3, [r4, #12]
 802237a:	0599      	lsls	r1, r3, #22
 802237c:	d402      	bmi.n	8022384 <_putc_r+0x24>
 802237e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022380:	f7ff fad1 	bl	8021926 <__retarget_lock_acquire_recursive>
 8022384:	68a3      	ldr	r3, [r4, #8]
 8022386:	3b01      	subs	r3, #1
 8022388:	2b00      	cmp	r3, #0
 802238a:	60a3      	str	r3, [r4, #8]
 802238c:	da05      	bge.n	802239a <_putc_r+0x3a>
 802238e:	69a2      	ldr	r2, [r4, #24]
 8022390:	4293      	cmp	r3, r2
 8022392:	db12      	blt.n	80223ba <_putc_r+0x5a>
 8022394:	b2eb      	uxtb	r3, r5
 8022396:	2b0a      	cmp	r3, #10
 8022398:	d00f      	beq.n	80223ba <_putc_r+0x5a>
 802239a:	6823      	ldr	r3, [r4, #0]
 802239c:	1c5a      	adds	r2, r3, #1
 802239e:	6022      	str	r2, [r4, #0]
 80223a0:	701d      	strb	r5, [r3, #0]
 80223a2:	b2ed      	uxtb	r5, r5
 80223a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80223a6:	07da      	lsls	r2, r3, #31
 80223a8:	d405      	bmi.n	80223b6 <_putc_r+0x56>
 80223aa:	89a3      	ldrh	r3, [r4, #12]
 80223ac:	059b      	lsls	r3, r3, #22
 80223ae:	d402      	bmi.n	80223b6 <_putc_r+0x56>
 80223b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80223b2:	f7ff fab9 	bl	8021928 <__retarget_lock_release_recursive>
 80223b6:	4628      	mov	r0, r5
 80223b8:	bd70      	pop	{r4, r5, r6, pc}
 80223ba:	4629      	mov	r1, r5
 80223bc:	4622      	mov	r2, r4
 80223be:	4630      	mov	r0, r6
 80223c0:	f7ff f999 	bl	80216f6 <__swbuf_r>
 80223c4:	4605      	mov	r5, r0
 80223c6:	e7ed      	b.n	80223a4 <_putc_r+0x44>

080223c8 <_fstat_r>:
 80223c8:	b538      	push	{r3, r4, r5, lr}
 80223ca:	4d07      	ldr	r5, [pc, #28]	@ (80223e8 <_fstat_r+0x20>)
 80223cc:	2300      	movs	r3, #0
 80223ce:	4604      	mov	r4, r0
 80223d0:	4608      	mov	r0, r1
 80223d2:	4611      	mov	r1, r2
 80223d4:	602b      	str	r3, [r5, #0]
 80223d6:	f7df fbc3 	bl	8001b60 <_fstat>
 80223da:	1c43      	adds	r3, r0, #1
 80223dc:	d102      	bne.n	80223e4 <_fstat_r+0x1c>
 80223de:	682b      	ldr	r3, [r5, #0]
 80223e0:	b103      	cbz	r3, 80223e4 <_fstat_r+0x1c>
 80223e2:	6023      	str	r3, [r4, #0]
 80223e4:	bd38      	pop	{r3, r4, r5, pc}
 80223e6:	bf00      	nop
 80223e8:	2002d940 	.word	0x2002d940

080223ec <_isatty_r>:
 80223ec:	b538      	push	{r3, r4, r5, lr}
 80223ee:	4d06      	ldr	r5, [pc, #24]	@ (8022408 <_isatty_r+0x1c>)
 80223f0:	2300      	movs	r3, #0
 80223f2:	4604      	mov	r4, r0
 80223f4:	4608      	mov	r0, r1
 80223f6:	602b      	str	r3, [r5, #0]
 80223f8:	f7df fbc2 	bl	8001b80 <_isatty>
 80223fc:	1c43      	adds	r3, r0, #1
 80223fe:	d102      	bne.n	8022406 <_isatty_r+0x1a>
 8022400:	682b      	ldr	r3, [r5, #0]
 8022402:	b103      	cbz	r3, 8022406 <_isatty_r+0x1a>
 8022404:	6023      	str	r3, [r4, #0]
 8022406:	bd38      	pop	{r3, r4, r5, pc}
 8022408:	2002d940 	.word	0x2002d940

0802240c <_sbrk_r>:
 802240c:	b538      	push	{r3, r4, r5, lr}
 802240e:	4d06      	ldr	r5, [pc, #24]	@ (8022428 <_sbrk_r+0x1c>)
 8022410:	2300      	movs	r3, #0
 8022412:	4604      	mov	r4, r0
 8022414:	4608      	mov	r0, r1
 8022416:	602b      	str	r3, [r5, #0]
 8022418:	f7df fbca 	bl	8001bb0 <_sbrk>
 802241c:	1c43      	adds	r3, r0, #1
 802241e:	d102      	bne.n	8022426 <_sbrk_r+0x1a>
 8022420:	682b      	ldr	r3, [r5, #0]
 8022422:	b103      	cbz	r3, 8022426 <_sbrk_r+0x1a>
 8022424:	6023      	str	r3, [r4, #0]
 8022426:	bd38      	pop	{r3, r4, r5, pc}
 8022428:	2002d940 	.word	0x2002d940

0802242c <abort>:
 802242c:	b508      	push	{r3, lr}
 802242e:	2006      	movs	r0, #6
 8022430:	f000 f82c 	bl	802248c <raise>
 8022434:	2001      	movs	r0, #1
 8022436:	f7df fb5f 	bl	8001af8 <_exit>

0802243a <_raise_r>:
 802243a:	291f      	cmp	r1, #31
 802243c:	b538      	push	{r3, r4, r5, lr}
 802243e:	4605      	mov	r5, r0
 8022440:	460c      	mov	r4, r1
 8022442:	d904      	bls.n	802244e <_raise_r+0x14>
 8022444:	2316      	movs	r3, #22
 8022446:	6003      	str	r3, [r0, #0]
 8022448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802244c:	bd38      	pop	{r3, r4, r5, pc}
 802244e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022450:	b112      	cbz	r2, 8022458 <_raise_r+0x1e>
 8022452:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022456:	b94b      	cbnz	r3, 802246c <_raise_r+0x32>
 8022458:	4628      	mov	r0, r5
 802245a:	f000 f831 	bl	80224c0 <_getpid_r>
 802245e:	4622      	mov	r2, r4
 8022460:	4601      	mov	r1, r0
 8022462:	4628      	mov	r0, r5
 8022464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022468:	f000 b818 	b.w	802249c <_kill_r>
 802246c:	2b01      	cmp	r3, #1
 802246e:	d00a      	beq.n	8022486 <_raise_r+0x4c>
 8022470:	1c59      	adds	r1, r3, #1
 8022472:	d103      	bne.n	802247c <_raise_r+0x42>
 8022474:	2316      	movs	r3, #22
 8022476:	6003      	str	r3, [r0, #0]
 8022478:	2001      	movs	r0, #1
 802247a:	e7e7      	b.n	802244c <_raise_r+0x12>
 802247c:	2100      	movs	r1, #0
 802247e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022482:	4620      	mov	r0, r4
 8022484:	4798      	blx	r3
 8022486:	2000      	movs	r0, #0
 8022488:	e7e0      	b.n	802244c <_raise_r+0x12>
	...

0802248c <raise>:
 802248c:	4b02      	ldr	r3, [pc, #8]	@ (8022498 <raise+0xc>)
 802248e:	4601      	mov	r1, r0
 8022490:	6818      	ldr	r0, [r3, #0]
 8022492:	f7ff bfd2 	b.w	802243a <_raise_r>
 8022496:	bf00      	nop
 8022498:	20000080 	.word	0x20000080

0802249c <_kill_r>:
 802249c:	b538      	push	{r3, r4, r5, lr}
 802249e:	4d07      	ldr	r5, [pc, #28]	@ (80224bc <_kill_r+0x20>)
 80224a0:	2300      	movs	r3, #0
 80224a2:	4604      	mov	r4, r0
 80224a4:	4608      	mov	r0, r1
 80224a6:	4611      	mov	r1, r2
 80224a8:	602b      	str	r3, [r5, #0]
 80224aa:	f7df fb13 	bl	8001ad4 <_kill>
 80224ae:	1c43      	adds	r3, r0, #1
 80224b0:	d102      	bne.n	80224b8 <_kill_r+0x1c>
 80224b2:	682b      	ldr	r3, [r5, #0]
 80224b4:	b103      	cbz	r3, 80224b8 <_kill_r+0x1c>
 80224b6:	6023      	str	r3, [r4, #0]
 80224b8:	bd38      	pop	{r3, r4, r5, pc}
 80224ba:	bf00      	nop
 80224bc:	2002d940 	.word	0x2002d940

080224c0 <_getpid_r>:
 80224c0:	f7df bb00 	b.w	8001ac4 <_getpid>

080224c4 <_init>:
 80224c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224c6:	bf00      	nop
 80224c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80224ca:	bc08      	pop	{r3}
 80224cc:	469e      	mov	lr, r3
 80224ce:	4770      	bx	lr

080224d0 <_fini>:
 80224d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224d2:	bf00      	nop
 80224d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80224d6:	bc08      	pop	{r3}
 80224d8:	469e      	mov	lr, r3
 80224da:	4770      	bx	lr
